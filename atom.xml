<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2020-11-06T16:01:26+00:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Setup Alerting With Loki]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/11/06/how-to-setup-alerting-with-loki/"/>
    <updated>2020-11-06T15:13:53+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/11/06/how-to-setup-alerting-with-loki</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/98380823-bd948880-2051-11eb-8ab4-c8d5f5d3e612.png" alt="image" /></p>

<p>Recently Grafana Labs announced <a href="https://grafana.com/blog/2020/10/28/loki-2.0-released-transform-logs-as-youre-querying-them-and-set-up-alerts-within-loki/">Loki v2</a> and its awesome! Definitely check out their blog post on more details.</p>

<p>Loki has a index option called boltdb-shipper, which allows you to run Loki with only a object store and you no longer need a dedicated index store such as DynamoDB. You can extract labels from log lines at query time, which is CRAZY! And I really like how they&rsquo;ve implemented it, you can parse, filter and format like mad. I really like that.</p>

<p>And then generating alerts from any query, which we will go into today. Definitely check out <a href="https://grafana.com/blog/2020/10/28/loki-2.0-released-transform-logs-as-youre-querying-them-and-set-up-alerts-within-loki/">this blogpost</a> and <a href="https://grafana.com/blog/2020/11/04/video-top-three-features-of-the-new-loki-2.0/">this video</a> for more details on the features of Loki v2.</p>

<h2>What will we be doing today</h2>

<p>In this tutorial we will setup an alert using the Loki local ruler to alert us when we have a high number of log events coming in. For example, let&rsquo;s say someone has debug logging enabled in their application and we want to send a alert to slack when it breaches the threshold.</p>

<p>I will simulate this with a <code>http-client</code> container which runs <code>curl</code> in a while loop to fire a bunch of http requests against the nginx container which logs to Loki, so we can see how the alerting works. And after that we will stop our http-client container to see how the alarm resolves when the log rate comes down again.</p>

<p>All the components are available in the <code>docker-compose.yml</code> on my <a href="https://github.com/ruanbekker/loki-alerts-docker">github repository</a></p>

<h2>Components</h2>

<p>Let&rsquo;s break it down and start with the loki config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>ruler:
</span><span class='line'>  storage:
</span><span class='line'>    type: local
</span><span class='line'>    local:
</span><span class='line'>      directory: /etc/loki/rules
</span><span class='line'>  rule_path: /tmp/loki/rules-temp
</span><span class='line'>  alertmanager_url: http://alertmanager:9093
</span><span class='line'>  ring:
</span><span class='line'>    kvstore:
</span><span class='line'>      store: inmemory
</span><span class='line'>  enable_api: true
</span><span class='line'>  enable_alertmanager_v2: true</span></code></pre></td></tr></table></div></figure>


<p>In the section of the loki config, I will be making use of the local ruler and map my alert rules under <code>/etc/loki/rules/</code> and we are also defining our alertmanager instance where these alerts should be shipped to.</p>

<p>In my rule definition <code>/etc/loki/rules/demo/rules.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>groups:
</span><span class='line'>  - name: rate-alerting
</span><span class='line'>    rules:
</span><span class='line'>      - alert: HighLogRate
</span><span class='line'>        expr: |
</span><span class='line'>          sum by (compose_service)
</span><span class='line'>            (rate({job="dockerlogs"}[1m]))
</span><span class='line'>            &gt; 60
</span><span class='line'>        for: 1m
</span><span class='line'>        labels:
</span><span class='line'>            severity: warning
</span><span class='line'>            team: devops
</span><span class='line'>            category: logs
</span><span class='line'>        annotations:
</span><span class='line'>            title: "High LogRate Alert"
</span><span class='line'>            description: "something is logging a lot"
</span><span class='line'>            impact: "impact"
</span><span class='line'>            action: "action"
</span><span class='line'>            dashboard: "https://grafana.com/service-dashboard"
</span><span class='line'>            runbook: "https://wiki.com"
</span><span class='line'>            logurl: "https://grafana.com/log-explorer"</span></code></pre></td></tr></table></div></figure>


<p>In my expression, I am using LogQL to return per second rate of all my docker logs within the last minute per compose service for my dockerlogs job and we are specifying that it should alert when the threshold is above 60.</p>

<p>As you can see I have a couple of labels and annotations, which becomes very helpful when you have dashboard links, runbooks etc and you would like to map that to your alert. I am doing the mapping in my <code>alertmanager.yml</code> config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>route:
</span><span class='line'>...
</span><span class='line'>  receiver: 'default-catchall-slack'
</span><span class='line'>  routes:
</span><span class='line'>  - match:
</span><span class='line'>      severity: warning
</span><span class='line'>    receiver: warning-devops-slack
</span><span class='line'>    routes:
</span><span class='line'>    - match_re:
</span><span class='line'>        team: .*(devops).*
</span><span class='line'>      receiver: warning-devops-slack
</span><span class='line'>
</span><span class='line'>receivers:
</span><span class='line'>...
</span><span class='line'>- name: 'warning-devops-slack'
</span><span class='line'>  slack_configs:
</span><span class='line'>    - send_resolved: true
</span><span class='line'>      channel: '__SLACK_CHANNEL__'
</span><span class='line'>      title: ':fire::white_check_mark: []  '
</span><span class='line'>      text: &gt;-
</span><span class='line'>        
</span><span class='line'>          *Description:* 
</span><span class='line'>          *Severity:* ``
</span><span class='line'>          *Graph:* &lt;|:chart_with_upwards_trend:&gt;&lt;|:chart_with_upwards_trend:&gt; *Dashboard:* &lt;|:bar_chart:&gt; *Runbook:* &lt;|:spiral_note_pad:&gt;
</span><span class='line'>          *Details:*
</span><span class='line'>           - *:* ``
</span><span class='line'>          
</span><span class='line'>           - *Impact*: 
</span><span class='line'>           - *Receiver*: warning--slack
</span><span class='line'>        </span></code></pre></td></tr></table></div></figure>


<p>As you can see, when my alert matches nothing it will go to my catch all receiver, but when my label contains <code>devops</code> and the route the alert to my <code>warning-devops-slack</code> receiver, and then we will be parsing our labels and annotations to include the values in our alarm on slack.</p>

<h2>Demo</h2>

<p>Enough with the background details, and it&rsquo;s time to get into the action.</p>

<p>All the code for this demonstration will be available in my github repository: <a href="https://github.com/ruanbekker/loki-alerts-docker">github.com/ruanbekker/loki-alerts-docker</a></p>

<p>The docker-compose will have a container of grafana, alertmanager, loki, nginx and a http-client.</p>

<p>The http-client is curl in a while loop that will just make a bunch of http requests against the nginx container, which will be logging to loki.</p>

<h2>Get the source</h2>

<p>Get the code from my github repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/ruanbekker/loki-alerts-docker
</span><span class='line'>$ cd loki-alerts-docker</span></code></pre></td></tr></table></div></figure>


<p>You will need to replace the slack webhook url and the slack channel where you want your alerts to be sent to. This will take the environment variables and replace the values in <code>config/alertmanager.yml</code> (always check out the script first, before executing it)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ SLACK_WEBHOOK_URL="https://hooks.slack.com/services/xx/xx/xx" SLACK_CHANNEL="#notifications" ./parse_configs.sh</span></code></pre></td></tr></table></div></figure>


<p>You can double check by running <code>cat config/alertmanager.yml</code>, once you are done, boot the stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose up -d</span></code></pre></td></tr></table></div></figure>


<p>Open up grafana:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ open http://grafana.localdns.xyz:3000</span></code></pre></td></tr></table></div></figure>


<p>Use the initial user and password combination <code>admin/admin</code> and then reset your password:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98379039-7efdce80-204f-11eb-9c8a-3ed12a63cb14.png" alt="image" /></p>

<p>Browse for your labels on the log explorer section, in my example it will be <code>{job="dockerlogs"}</code>:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98379172-ace31300-204f-11eb-8e6c-3cf073afe771.png" alt="image" /></p>

<p>When we select our job=&ldquo;dockerlogs&rdquo; label, we will see our logs:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98379288-c71cf100-204f-11eb-911c-043a983bae6d.png" alt="image" /></p>

<p>As I explained earlier the query that we will be running in our ruler, can be checked what the rate currently is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sum by (compose_project, compose_service) (rate({job="dockerlogs"}[1m]))</span></code></pre></td></tr></table></div></figure>


<p>Which will look like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98379765-54604580-2050-11eb-9c90-5e0adf2bb586.png" alt="image" /></p>

<p>In the configured expression in our ruler config, we have set to alarm once the value goes above 60, we can validate this by running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sum by (compose_project, compose_service) (rate({job="dockerlogs"}[1m])) &gt; 60</span></code></pre></td></tr></table></div></figure>


<p>And we can verify that this is the case, and by now it should be alarming:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98379900-84a7e400-2050-11eb-87d0-ae52617d195e.png" alt="image" /></p>

<p>Head over to alertmanager:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ open http://alertmanager.localdns.xyz:9093</span></code></pre></td></tr></table></div></figure>


<p>We can see alertmanager is showing the alarm:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98380013-af923800-2050-11eb-8585-f7489bf722cb.png" alt="image" /></p>

<p>When we head over to slack, we can see our notification:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98380158-de101300-2050-11eb-8d73-20828124fab5.png" alt="image" /></p>

<p>So let&rsquo;s stop our http client:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose stop http-client
</span><span class='line'>Stopping http-client ... done</span></code></pre></td></tr></table></div></figure>


<p>Then we can see the logging stopped:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98380907-e0bf3800-2051-11eb-99c3-b3b9ac22bba5.png" alt="image" /></p>

<p>And in slack, we should see that the alarm recovered and we should see the notification:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98381360-722eaa00-2052-11eb-8bb4-07cdc8ffa7ee.png" alt="image" /></p>

<p>Then you can terminate your stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose down</span></code></pre></td></tr></table></div></figure>


<p>Pretty epic stuff right? I really love how cost effective Loki is as logging use to be so expensive to run and especially maintain, Grafana Labs are really doing some epic work and my hat goes off to them.</p>

<h2>Thanks</h2>

<p>I hope you found this useful, feel free to reach out to me on Twitter <a href="https://twitter.com/ruanbekker">@ruanbekker</a> or visit me on my website <a href="https://ruan.dev">ruan.dev</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending Slack Messages With Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/11/06/sending-slack-messages-with-python/"/>
    <updated>2020-11-06T13:58:50+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/11/06/sending-slack-messages-with-python</id>
    <content type="html"><![CDATA[<p>In this post I will demonstrate how to send messages to slack using python based on the status of an event.</p>

<p>We will keep it basic, that when something is down or up, it should send a slack message with the status, message, color and embed your grafana dashboard links inside the alert (or any links that you would like).</p>

<h2>Create a Webhook</h2>

<p>From a previous post on <a href="https://blog.ruanbekker.com/blog/2019/04/18/setup-a-slack-webhook-for-sending-messages-from-applications/">how to use curl to send slack messages</a> I showed how to create your webhook, so you can just follow that post if you want to follow along.</p>

<p>Once you have a webhook, which will look like <code>https://hooks.slack.com/services/xx/yy/zz</code>, you are good to follow to the next step.</p>

<h2>Creating the Script</h2>

<p>First we need requests:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip install requests</span></code></pre></td></tr></table></div></figure>


<p>Then we will create the <code>slack_notifier.py</code>, just ensure that you replace your slack webhook url and slack channel to yours:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'>
</span><span class='line'><span class="n">SLACK_WEBHOOK_URL</span> <span class="o">=</span> <span class="s">&#39;https://hooks.slack.com/&lt;your&gt;/&lt;slack&gt;/&lt;webhook&gt;&#39;</span>
</span><span class='line'><span class="n">SLACK_CHANNEL</span> <span class="o">=</span> <span class="s">&quot;#your-slack-channel&quot;</span>
</span><span class='line'><span class="n">ALERT_STATE</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">alert_map</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;emoji&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;up&quot;</span><span class="p">:</span> <span class="s">&quot;:white_check_mark:&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;down&quot;</span><span class="p">:</span> <span class="s">&quot;:fire:&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">&quot;text&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;up&quot;</span><span class="p">:</span> <span class="s">&quot;RESOLVED&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;down&quot;</span><span class="p">:</span> <span class="s">&quot;FIRING&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">&quot;message&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;up&quot;</span><span class="p">:</span> <span class="s">&quot;Everything is good!&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;down&quot;</span><span class="p">:</span> <span class="s">&quot;Stuff is burning!&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">&quot;color&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;up&quot;</span><span class="p">:</span> <span class="s">&quot;#32a852&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;down&quot;</span><span class="p">:</span> <span class="s">&quot;#ad1721&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">alert_to_slack</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">log_url</span><span class="p">,</span> <span class="n">metric_url</span><span class="p">):</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;text&quot;</span><span class="p">:</span> <span class="s">&quot;AlertManager&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;username&quot;</span><span class="p">:</span> <span class="s">&quot;Notifications&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;channel&quot;</span><span class="p">:</span> <span class="n">SLACK_CHANNEL</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;attachments&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s">&quot;text&quot;</span><span class="p">:</span> <span class="s">&quot;{emoji} [*{state}*] Status Checker</span><span class="se">\n</span><span class="s"> {message}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
</span><span class='line'>                <span class="n">emoji</span><span class="o">=</span><span class="n">alert_map</span><span class="p">[</span><span class="s">&quot;emoji&quot;</span><span class="p">][</span><span class="n">status</span><span class="p">],</span>
</span><span class='line'>                <span class="n">state</span><span class="o">=</span><span class="n">alert_map</span><span class="p">[</span><span class="s">&quot;text&quot;</span><span class="p">][</span><span class="n">status</span><span class="p">],</span>
</span><span class='line'>                <span class="n">message</span><span class="o">=</span><span class="n">alert_map</span><span class="p">[</span><span class="s">&quot;message&quot;</span><span class="p">][</span><span class="n">status</span><span class="p">]</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="s">&quot;color&quot;</span><span class="p">:</span> <span class="n">alert_map</span><span class="p">[</span><span class="s">&quot;color&quot;</span><span class="p">][</span><span class="n">status</span><span class="p">],</span>
</span><span class='line'>            <span class="s">&quot;attachment_type&quot;</span><span class="p">:</span> <span class="s">&quot;default&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&quot;actions&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="s">&quot;Logs&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&quot;text&quot;</span><span class="p">:</span> <span class="s">&quot;Logs&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&quot;type&quot;</span><span class="p">:</span> <span class="s">&quot;button&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&quot;style&quot;</span><span class="p">:</span> <span class="s">&quot;primary&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&quot;url&quot;</span><span class="p">:</span> <span class="n">log_url</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="s">&quot;Metrics&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&quot;text&quot;</span><span class="p">:</span> <span class="s">&quot;Metrics&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&quot;type&quot;</span><span class="p">:</span> <span class="s">&quot;button&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&quot;style&quot;</span><span class="p">:</span> <span class="s">&quot;primary&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&quot;url&quot;</span><span class="p">:</span> <span class="n">metric_url</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">}]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">SLACK_WEBHOOK_URL</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">r</span><span class="o">.</span><span class="n">status_code</span>
</span><span class='line'>
</span><span class='line'><span class="n">alert_to_slack</span><span class="p">(</span><span class="n">ALERT_STATE</span><span class="p">,</span> <span class="s">&quot;https://grafana-logs.dashboard.local&quot;</span><span class="p">,</span> <span class="s">&quot;https://grafana-metrics.dashboard.local&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Testing it out</h2>

<p>Time to test it out, so let&rsquo;s assume something is down, then we can react on that event and action the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">python</span> <span class="n">slack_notifier</span><span class="o">.</span><span class="n">py</span> <span class="n">down</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which will look like the following on slack:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98374881-fdf00880-2049-11eb-9d7f-7599665871db.png" alt="image" /></p>

<p>And when recovery is in place, we can action the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">python</span> <span class="n">slack_notifier</span><span class="o">.</span><span class="n">py</span> <span class="n">up</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which will look like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98374958-1eb85e00-204a-11eb-8ab0-c6a8a0640752.png" alt="image" /></p>

<h2>Thanks</h2>

<p>That was a basic example on how you can use python to send slack messages.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running SSH Commands on AWS EC2 Instances With Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/11/02/running-ssh-commands-on-aws-ec2-instances-with-python/"/>
    <updated>2020-11-02T09:55:43+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/11/02/running-ssh-commands-on-aws-ec2-instances-with-python</id>
    <content type="html"><![CDATA[<p>In this quick post I will demonstrate how to discover a EC2 Instance&rsquo;s Private IP Address using the AWS API by using Tags then use Paramiko in Python to SSH to the EC2 instance and run SSH commands on the target instance.</p>

<p>Install the required dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ virtualenv -p python3 .venv
</span><span class='line'>$ source .venve/bin/activate
</span><span class='line'>$ pip install boto3 paramiko</span></code></pre></td></tr></table></div></figure>


<p>I have my development profile for aws configured under <code>dev</code> as can seen below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws --profile dev configure list
</span><span class='line'>      Name                    Value             Type    Location
</span><span class='line'>      ----                    -----             ----    --------
</span><span class='line'>   profile                      dev           manual    --profile
</span><span class='line'>access_key     ****************xxxx      assume-role
</span><span class='line'>secret_key     ****************xxxx      assume-role
</span><span class='line'>    region                eu-west-1      config-file    ~/.aws/config</span></code></pre></td></tr></table></div></figure>


<p>First we need to discover the private ip address from the api by referencing tags, and in this example we will use the <code>Name</code> tag:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import boto3
</span><span class='line'>ec2 = boto3.Session(profile_name='dev', region_name='eu-west-1').client('ec2')
</span><span class='line'>
</span><span class='line'>target_instances = ec2.describe_instances(
</span><span class='line'>    Filters=[{'Name':'tag:Name','Values':['my-demo-ec2-instance']}]
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>ec2_instances = []
</span><span class='line'>for each_instance in target_instances['Reservations']:
</span><span class='line'>    for found_instance in each_instance['Instances']:
</span><span class='line'>        ec2_instances.append(found_instance['PrivateIpAddress'])
</span><span class='line'>
</span><span class='line'># ec2_instances
</span><span class='line'># ['172.31.2.89']</span></code></pre></td></tr></table></div></figure>


<p>So we are instantiating a ec2 instance with our configured dev profile, then we describe all our instances using the tag key <code>Name</code> and value <code>my-demo-ec2-instance</code> and then access the private ip address and append it to our <code>ec2_instances</code> list.</p>

<p>Next we want to define the commands that we want to run on the target ec2 instance:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>commands = [
</span><span class='line'>    "echo hi",
</span><span class='line'>    "whoami",
</span><span class='line'>    "hostname"
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<p>In my case I only have 1 ec2 instance with the name <code>my-demo-ec2-instance</code>, but if you have more you can just loop through the list and perform the actions.</p>

<p>Next we want to establish the SSH connection:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>k = paramiko.RSAKey.from_private_key_file("/Users/ruan/.ssh/id_rsa")
</span><span class='line'>c = paramiko.SSHClient()
</span><span class='line'>c.set_missing_host_key_policy(paramiko.AutoAddPolicy())
</span><span class='line'>c.connect(hostname=ec2_instances[0], username="ruan", pkey=k, allow_agent=False, look_for_keys=False)</span></code></pre></td></tr></table></div></figure>


<p>Once our SSH connection has established, we can loop through our commands and execute them:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for command in commands:
</span><span class='line'>    print("running command: {}".format(command))
</span><span class='line'>    stdin , stdout, stderr = c.exec_command(command)
</span><span class='line'>    print(stdout.read())
</span><span class='line'>    print(stderr.read())</span></code></pre></td></tr></table></div></figure>


<p>Which will output the folling:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>running command: echo hi
</span><span class='line'>b'hi\n'
</span><span class='line'>b''
</span><span class='line'>running command: whoami
</span><span class='line'>b'ruan\n'
</span><span class='line'>b''
</span><span class='line'>running command: hostname
</span><span class='line'>b'ip-172-31-2-89\n'
</span><span class='line'>b''</span></code></pre></td></tr></table></div></figure>


<p>And then close the SSH connection:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>c.close()</span></code></pre></td></tr></table></div></figure>


<p>And the full script will look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="n">ssh_username</span> <span class="o">=</span> <span class="s">&quot;ruan&quot;</span>
</span><span class='line'><span class="n">ssh_key_file</span> <span class="o">=</span> <span class="s">&quot;/Users/ruan/.ssh/id_rsa&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">ec2</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">profile_name</span><span class="o">=</span><span class="s">&#39;dev&#39;</span><span class="p">,</span> <span class="n">region_name</span><span class="o">=</span><span class="s">&#39;eu-west-1&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s">&#39;ec2&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">target_instances</span> <span class="o">=</span> <span class="n">ec2</span><span class="o">.</span><span class="n">describe_instances</span><span class="p">(</span>
</span><span class='line'>    <span class="n">Filters</span><span class="o">=</span><span class="p">[{</span><span class="s">&#39;Name&#39;</span><span class="p">:</span><span class="s">&#39;tag:Name&#39;</span><span class="p">,</span><span class="s">&#39;Values&#39;</span><span class="p">:[</span><span class="s">&#39;my-demo-ec2-instance&#39;</span><span class="p">]}]</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">ec2_instances</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">each_instance</span> <span class="ow">in</span> <span class="n">target_instances</span><span class="p">[</span><span class="s">&#39;Reservations&#39;</span><span class="p">]:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">found_instance</span> <span class="ow">in</span> <span class="n">each_instance</span><span class="p">[</span><span class="s">&#39;Instances&#39;</span><span class="p">]:</span>
</span><span class='line'>        <span class="n">ec2_instances</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">found_instance</span><span class="p">[</span><span class="s">&#39;PrivateIpAddress&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="n">commands</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s">&quot;echo hi&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;whoami&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;hostname&quot;</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">k</span> <span class="o">=</span> <span class="n">paramiko</span><span class="o">.</span><span class="n">RSAKey</span><span class="o">.</span><span class="n">from_private_key_file</span><span class="p">(</span><span class="n">ssh_key_file</span><span class="p">)</span>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="n">paramiko</span><span class="o">.</span><span class="n">SSHClient</span><span class="p">()</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">set_missing_host_key_policy</span><span class="p">(</span><span class="n">paramiko</span><span class="o">.</span><span class="n">AutoAddPolicy</span><span class="p">())</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">hostname</span><span class="o">=</span><span class="n">ec2_instances</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">username</span><span class="o">=</span><span class="n">ssh_username</span><span class="p">,</span> <span class="n">pkey</span><span class="o">=</span><span class="n">k</span><span class="p">,</span> <span class="n">allow_agent</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">look_for_keys</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">command</span> <span class="ow">in</span> <span class="n">commands</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;running command: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">command</span><span class="p">))</span>
</span><span class='line'>    <span class="n">stdin</span> <span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">exec_command</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">stdout</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">stderr</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Loki Behind Nginx Reverse Proxy]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/10/29/running-loki-behind-nginx-reverse-proxy/"/>
    <updated>2020-10-29T08:29:13+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/10/29/running-loki-behind-nginx-reverse-proxy</id>
    <content type="html"><![CDATA[<p>In this tutorial I will demonstrate how to run <strong>Loki v2.0.0</strong> behind a <strong>Nginx Reverse Proxy</strong> with basic http authentication enabled on Nginx and what to do to configure Nginx for <strong>websockets</strong>, which is required when you want to use <strong>tail in logcli</strong> via Nginx.</p>

<h2>Assumptions</h2>

<p>My environment consists of a AWS Application LoadBalancer with a Host entry and a Target Group associated to port 80 of my Nginx/Loki EC2 instance.</p>

<p>Health checks to my EC2 instance are being performed to <code>instance:80/ready</code></p>

<p>I have a S3 bucket and a DynamoDB table already running in my account which Loki will use. But <strong>NOTE</strong> that boltdb-shipper is now production ready since <a href="https://github.com/grafana/loki/blob/v2.0.0/CHANGELOG.md#20">v2.0.0</a>, which is awesome, because now you only require a object store such as S3, so you don&rsquo;t need DynamoDB.</p>

<p>More information on this topic can be found under their <a href="https://github.com/grafana/loki/blob/v2.0.0/CHANGELOG.md#20">changelog</a></p>

<h2>What can you expect from this blogpost</h2>

<p>We will go through the following topics:</p>

<ul>
<li>Install Loki v2.0.0 and Nginx</li>
<li>Configure HTTP Basic Authentication to Loki&rsquo;s API Endpoints</li>
<li>Bypass HTTP Basic Authentication to the <code>/ready</code> endpoint for our Load Balancer to perform healthchecks</li>
<li>Enable Nginx to upgrade websocket connections so that we can use <code>logcli --tail</code></li>
<li>Test out access to Loki via our Nginx Reverse Proxy</li>
<li>Install and use LogCLI</li>
</ul>


<h2>Install Software</h2>

<p>First we will install <code>nginx</code> and <code>apache2-utils</code>. In my use-case I will be using Ubuntu 20 as my operating system:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt update && sudp apt install nginx apache2-utils -y</span></code></pre></td></tr></table></div></figure>


<p>Next we will install Loki v2.0.0, if you are upgrading from a previous version of Loki, I would recommend checking out the <a href="https://github.com/grafana/loki/releases/tag/v2.0.0">upgrade guide</a> mentioned on their releases page.</p>

<p>Download the package:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -O -L "https://github.com/grafana/loki/releases/download/v2.0.0/loki-linux-amd64.zip"</span></code></pre></td></tr></table></div></figure>


<p>Unzip the archive:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ unzip loki-linux-amd64.zip</span></code></pre></td></tr></table></div></figure>


<p>Move the binary to your $PATH:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo mv loki-linux-amd64 /usr/local/bin/loki</span></code></pre></td></tr></table></div></figure>


<p>And ensure that the binary is executable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo chmod a+x /usr/local/bin/loki</span></code></pre></td></tr></table></div></figure>


<h2>Configuration</h2>

<p>Create the user that will be responsible for running loki:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ useradd --no-create-home --shell /bin/false loki</span></code></pre></td></tr></table></div></figure>


<p>Create the directory where we will place the loki configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir /etc/loki</span></code></pre></td></tr></table></div></figure>


<p>Create the loki configuration file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/loki/loki-config.yml
</span><span class='line'>auth_enabled: false
</span><span class='line'>
</span><span class='line'>server:
</span><span class='line'>  http_listen_port: 3100
</span><span class='line'>  http_listen_address: 127.0.0.1
</span><span class='line'>  http_server_read_timeout: 1000s
</span><span class='line'>  http_server_write_timeout: 1000s
</span><span class='line'>  http_server_idle_timeout: 1000s
</span><span class='line'>  log_level: info
</span><span class='line'>
</span><span class='line'>ingester:
</span><span class='line'>  lifecycler:
</span><span class='line'>    address: 127.0.0.1
</span><span class='line'>    ring:
</span><span class='line'>      kvstore:
</span><span class='line'>        store: inmemory
</span><span class='line'>      replication_factor: 1
</span><span class='line'>    final_sleep: 0s
</span><span class='line'>  chunk_encoding: snappy
</span><span class='line'>  chunk_idle_period: 1h
</span><span class='line'>  chunk_target_size: 1048576
</span><span class='line'>  chunk_retain_period: 30s
</span><span class='line'>  max_transfer_retries: 0
</span><span class='line'>
</span><span class='line'># https://grafana.com/docs/loki/latest/configuration/#schema_config
</span><span class='line'>schema_config:
</span><span class='line'>  configs:
</span><span class='line'>    - from: 2020-05-15
</span><span class='line'>      store: aws
</span><span class='line'>      object_store: s3
</span><span class='line'>      schema: v11
</span><span class='line'>      index:
</span><span class='line'>        prefix: loki-logging-index
</span><span class='line'>
</span><span class='line'>storage_config:
</span><span class='line'>  aws:
</span><span class='line'>    http_config:
</span><span class='line'>      idle_conn_timeout: 90s
</span><span class='line'>      response_header_timeout: 0s
</span><span class='line'>    s3: s3://myak:mysk@eu-west-1/loki-logs-datastore
</span><span class='line'>
</span><span class='line'>    dynamodb:
</span><span class='line'>      dynamodb_url: dynamodb://myak:mysk@eu-west-1
</span><span class='line'>
</span><span class='line'>limits_config:
</span><span class='line'>  enforce_metric_name: false
</span><span class='line'>  reject_old_samples: true
</span><span class='line'>  reject_old_samples_max_age: 168h
</span><span class='line'>  ingestion_rate_mb: 30
</span><span class='line'>  ingestion_burst_size_mb: 60
</span><span class='line'>
</span><span class='line'># https://grafana.com/docs/loki/latest/operations/storage/retention/
</span><span class='line'># To avoid querying of data beyond the retention period, max_look_back_period config in chunk_store_config
</span><span class='line'># must be set to a value less than or equal to what is set in table_manager.retention_period
</span><span class='line'>chunk_store_config:
</span><span class='line'>  max_look_back_period: 720h
</span><span class='line'>
</span><span class='line'># https://grafana.com/docs/loki/latest/operations/storage/retention/
</span><span class='line'>table_manager:
</span><span class='line'>  retention_deletes_enabled: true
</span><span class='line'>  retention_period: 720h
</span><span class='line'>  chunk_tables_provisioning:
</span><span class='line'>    inactive_read_throughput: 10
</span><span class='line'>    inactive_write_throughput: 10
</span><span class='line'>    provisioned_read_throughput: 50
</span><span class='line'>    provisioned_write_throughput: 20
</span><span class='line'>  index_tables_provisioning:
</span><span class='line'>    inactive_read_throughput: 10
</span><span class='line'>    inactive_write_throughput: 10
</span><span class='line'>    provisioned_read_throughput: 50
</span><span class='line'>    provisioned_write_throughput: 20</span></code></pre></td></tr></table></div></figure>


<p>Apply permissions so that the loki user has access to it&rsquo;s configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chown -R loki:loki /etc/loki</span></code></pre></td></tr></table></div></figure>


<p>Create a systemd unit file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/systemd/system/loki.service
</span><span class='line'>[Unit]
</span><span class='line'>Description=Loki
</span><span class='line'>Wants=network-online.target
</span><span class='line'>After=network-online.target
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>User=loki
</span><span class='line'>Group=loki
</span><span class='line'>Type=simple
</span><span class='line'>Restart=on-failure
</span><span class='line'>ExecStart=/usr/local/bin/loki -config.file /etc/loki/loki-config.yml
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=multi-user.target</span></code></pre></td></tr></table></div></figure>


<p>Create the main nginx config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/nginx/nginx.conf
</span><span class='line'>user www-data;
</span><span class='line'>worker_processes auto;
</span><span class='line'>pid /run/nginx.pid;
</span><span class='line'>include /etc/nginx/modules-enabled/*.conf;
</span><span class='line'>worker_rlimit_nofile 100000;
</span><span class='line'>
</span><span class='line'>events {
</span><span class='line'>        worker_connections 4000;
</span><span class='line'>        use epoll;
</span><span class='line'>        multi_accept on;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>http {
</span><span class='line'>
</span><span class='line'>  # basic settings
</span><span class='line'>  sendfile on;
</span><span class='line'>  tcp_nopush on;
</span><span class='line'>  tcp_nodelay on;
</span><span class='line'>  keepalive_timeout 65;
</span><span class='line'>  types_hash_max_size 2048;
</span><span class='line'>        open_file_cache_valid 30s;
</span><span class='line'>        open_file_cache_min_uses 2;
</span><span class='line'>        open_file_cache_errors on;
</span><span class='line'>
</span><span class='line'>  include /etc/nginx/mime.types;
</span><span class='line'>  default_type application/octet-stream;
</span><span class='line'>
</span><span class='line'>        # ssl settings
</span><span class='line'>  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
</span><span class='line'>  ssl_prefer_server_ciphers on;
</span><span class='line'>
</span><span class='line'>  # websockets config
</span><span class='line'>  map $http_upgrade $connection_upgrade {
</span><span class='line'>            default upgrade;
</span><span class='line'>            '' close;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>  # logging settings
</span><span class='line'>  access_log off;
</span><span class='line'>  access_log /var/log/nginx/access.log;
</span><span class='line'>  error_log /var/log/nginx/error.log;
</span><span class='line'>
</span><span class='line'>  # gzip settings
</span><span class='line'>  gzip on;
</span><span class='line'>      gzip_min_length 10240;
</span><span class='line'>      gzip_comp_level 1;
</span><span class='line'>      gzip_vary on;
</span><span class='line'>      gzip_disable msie6;
</span><span class='line'>      gzip_proxied expired no-cache no-store private auth;
</span><span class='line'>      gzip_types
</span><span class='line'>      text/css
</span><span class='line'>      text/javascript
</span><span class='line'>      text/xml
</span><span class='line'>      text/plain
</span><span class='line'>      text/x-component
</span><span class='line'>      application/javascript
</span><span class='line'>      application/x-javascript
</span><span class='line'>      application/json
</span><span class='line'>      application/xml
</span><span class='line'>      application/rss+xml
</span><span class='line'>      application/atom+xml
</span><span class='line'>      font/truetype
</span><span class='line'>      font/opentype
</span><span class='line'>      application/vnd.ms-fontobject
</span><span class='line'>      image/svg+xml;
</span><span class='line'>      reset_timedout_connection on;
</span><span class='line'>      client_body_timeout 10;
</span><span class='line'>      send_timeout 2;
</span><span class='line'>      keepalive_requests 100000;
</span><span class='line'>        
</span><span class='line'>        # virtual host configs
</span><span class='line'>      include /etc/nginx/conf.d/loki.conf;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Create the virtual host config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/nginx/conf.d/loki.conf
</span><span class='line'>upstream loki {
</span><span class='line'>  server 127.0.0.1:3100;
</span><span class='line'>  keepalive 15;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>server {
</span><span class='line'>  listen 80;
</span><span class='line'>  server_name loki.localdns.xyz;
</span><span class='line'>
</span><span class='line'>  auth_basic "loki auth";
</span><span class='line'>  auth_basic_user_file /etc/nginx/passwords;
</span><span class='line'>
</span><span class='line'>  location / {
</span><span class='line'>    proxy_read_timeout 1800s;
</span><span class='line'>    proxy_connect_timeout 1600s;
</span><span class='line'>    proxy_pass http://loki;
</span><span class='line'>    proxy_http_version 1.1;
</span><span class='line'>    proxy_set_header Upgrade $http_upgrade;
</span><span class='line'>    proxy_set_header Connection $connection_upgrade;
</span><span class='line'>    proxy_set_header Connection "Keep-Alive";
</span><span class='line'>    proxy_set_header Proxy-Connection "Keep-Alive";
</span><span class='line'>    proxy_redirect off;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  location /ready {
</span><span class='line'>    proxy_pass http://loki;
</span><span class='line'>    proxy_http_version 1.1;
</span><span class='line'>    proxy_set_header Connection "Keep-Alive";
</span><span class='line'>    proxy_set_header Proxy-Connection "Keep-Alive";
</span><span class='line'>    proxy_redirect off;
</span><span class='line'>    auth_basic "off";
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>As you&rsquo;ve noticed, we are providing a <code>auth_basic_user_file</code> to <code>/etc/nginx/passwords</code>, so let&rsquo;s create a user that we will be using to authenticate against loki:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ htpasswd -c /etc/nginx/passwords lokiisamazing</span></code></pre></td></tr></table></div></figure>


<h2>Enable and Start Services</h2>

<p>Because we created a systemd unit file, we need to reload the systemd daemon:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo systemctl daemon-reload</span></code></pre></td></tr></table></div></figure>


<p>Then enable nginx and loki on boot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo systemctl enable nginx
</span><span class='line'>$ sudo systemctl enable loki</span></code></pre></td></tr></table></div></figure>


<p>Then start or restart both services:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo systemctl restart nginx
</span><span class='line'>$ sudo systemctl restart loki</span></code></pre></td></tr></table></div></figure>


<p>You should see both ports, 80 and 3100 are listening:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo netstat -tulpn | grep -E '(3100|80)'
</span><span class='line'>tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      8949/nginx: master
</span><span class='line'>tcp        0      0 127.0.0.1:3100          0.0.0.0:*               LISTEN      23498/loki</span></code></pre></td></tr></table></div></figure>


<h2>Test Access</h2>

<p>You will notice that I have a <code>/ready</code> endpoint that I am proxy passing to loki, which bypasses authentication, this has been setup for my AWS Application Load Balancer&rsquo;s Target Group to perform health checks against.</p>

<p>We can verify if we are getting a 200 response code without passing authentication:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -i http://loki.localdns.xyz/ready
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Server: nginx/1.14.0 (Ubuntu)
</span><span class='line'>Date: Thu, 29 Oct 2020 09:15:52 GMT
</span><span class='line'>Content-Type: text/plain; charset=utf-8
</span><span class='line'>Content-Length: 6
</span><span class='line'>Connection: keep-alive
</span><span class='line'>X-Content-Type-Options: nosniff
</span><span class='line'>
</span><span class='line'>ready</span></code></pre></td></tr></table></div></figure>


<p>If we try to make a request to Loki&rsquo;s labels API endpoint, you will notice that we are returned with a 401 unauthorized response:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -i http://loki.localdns.xyz/loki/api/v1/labels
</span><span class='line'>HTTP/1.1 401 Unauthorized
</span><span class='line'>Server: nginx/1.14.0 (Ubuntu)
</span><span class='line'>Date: Thu, 29 Oct 2020 09:16:52 GMT
</span><span class='line'>Content-Type: text/html
</span><span class='line'>Content-Length: 204
</span><span class='line'>Connection: keep-alive
</span><span class='line'>WWW-Authenticate: Basic realm="loki auth"</span></code></pre></td></tr></table></div></figure>


<p>So let&rsquo;s access the labels API endpoint by passing our basic auth credentials. To leave no leaking passwords behind, create a file and save your password content in that file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /tmp/.pass
</span><span class='line'>-&gt; then enter your password and save the file &lt;-</span></code></pre></td></tr></table></div></figure>


<p>Expose the content as an environment variable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pass=$(cat /tmp/.pass)</span></code></pre></td></tr></table></div></figure>


<p>Now make a request to Loki&rsquo;s labels endpoint by passing authentication:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -i -u lokiisawesome:$pass http://loki.localdns.xyz/loki/api/v1/labels
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Server: nginx/1.14.0 (Ubuntu)
</span><span class='line'>Date: Thu, 29 Oct 2020 09:20:20 GMT
</span><span class='line'>Content-Type: application/json; charset=UTF-8
</span><span class='line'>Content-Length: 277
</span><span class='line'>Connection: keep-alive
</span><span class='line'>
</span><span class='line'>{"status":"success","data":["__name__","aws_account","cluster_name","container_name","environment","filename","job","service","team"]}</span></code></pre></td></tr></table></div></figure>


<p>Then ensure that your remove the password file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rm -rf /tmp/.pass</span></code></pre></td></tr></table></div></figure>


<p>And unset your pass environment variable, to clean up your tracks:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ unset pass</span></code></pre></td></tr></table></div></figure>


<h2>LogCLI</h2>

<p>Now for my favorite part, using logcli to interact with Loki, but more specifically using <code>--tail</code> as it requires websockets, nginx will now be able to upgrade those connections:</p>

<p>Install logcli, in my case I am using a mac, so I will be using darwin:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://github.com/grafana/loki/releases/download/v2.0.0/logcli-darwin-amd64.zip
</span><span class='line'>$ unzip logcli-darwin-amd64.zip
</span><span class='line'>$ mv logcli-darwin-amd64 /usr/local/bin/logcli</span></code></pre></td></tr></table></div></figure>


<p>Set your environment variables for logcli:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export LOKI_ADDR=https://loki.yourdomain.com # im doing ssl termination on the aws alb
</span><span class='line'>$ export LOKI_USERNAME=lokiisawesome
</span><span class='line'>$ export LOKI_PASSWORD=$pass </span></code></pre></td></tr></table></div></figure>


<p>Now for that sweetness of tailing ALL THE LOGS!! :-D . Let&rsquo;s first discover the label that we want to select:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ logcli labels --quiet container_name | grep deadman
</span><span class='line'>ecs-deadmanswitch-4-deadmanswitch-01234567890abcdefghi</span></code></pre></td></tr></table></div></figure>


<p>Then tail for the win!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ logcli query --quiet --output raw --tail '{job="prod/dockerlogs", container_name=~"ecs-deadmanswitch.*"}'
</span><span class='line'>time="2020-10-29T09:03:36Z" level=info msg="timerID: xxxxxxxxxxxxxxxxxxxx"
</span><span class='line'>time="2020-10-29T09:03:36Z" level=info msg="POST - /ping/xxxxxxxxxxxxxxxxxxx"</span></code></pre></td></tr></table></div></figure>


<p>Awesome right?</p>

<p><img src="https://media.giphy.com/media/3ohzdIuqJoo8QdKlnW/giphy.gif" alt="" /></p>

<h2>Thank You</h2>

<p>Hope that you found this useful, make sure to follow Grafana&rsquo;s blog for more awesome content:</p>

<ul>
<li><a href="https://grafana.com/blog/">https://grafana.com/blog/</a></li>
</ul>


<p>If you liked this content, please make sure to share or come say hi on my website or twitter:</p>

<ul>
<li><a href="https://ruan.dev">w: ruan.dev</a></li>
<li><a href="https://ruan.dev">t: @ruanbekker</a></li>
</ul>


<p>For other content of mine on Loki:</p>

<ul>
<li><a href="https://blog.ruanbekker.com/blog/categories/loki/">https://blog.ruanbekker.com/blog/categories/loki/</a></li>
<li><a href="https://github.com/ruanbekker/docker-loki-distributed-minio">https://github.com/ruanbekker/docker-loki-distributed-minio</a></li>
<li><a href="https://github.com/ruanbekker/loki-docker-nginx-example">https://github.com/ruanbekker/loki-docker-nginx-example</a></li>
<li><a href="https://github.com/ruanbekker/loki-minio-docker">https://github.com/ruanbekker/loki-minio-docker</a></li>
<li><a href="https://github.com/ruanbekker/cheatsheets/tree/master/loki">https://github.com/ruanbekker/cheatsheets/tree/master/loki</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upload Public SSH Keys Using Ansible]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/10/26/upload-public-ssh-keys-using-ansible/"/>
    <updated>2020-10-26T07:44:25+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/10/26/upload-public-ssh-keys-using-ansible</id>
    <content type="html"><![CDATA[<p>In this post I will demonstrate how you can use ansible to automate the task of adding one or more ssh public keys to multiple servers authorized_keys file.</p>

<p>This will be focused in a scenario where you have 5 new ssh keys that we would want to copy to our bastion hosts authorized_keys file</p>

<h2>The User Accounts</h2>

<p>We have our bastion server named <code>bastion.mydomain.com</code> where would like to create the following accounts: <code>john, bob, sarah, sam, adam</code> and also upload their personal ssh public keys to those accounts so that they can logon with their ssh private keys.</p>

<p>On my local directory, I have their ssh public keys as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~/workspace/sshkeys/john.pub
</span><span class='line'>~/workspace/sshkeys/bob.pub
</span><span class='line'>~/workspace/sshkeys/sarah.pub
</span><span class='line'>~/workspace/sshkeys/sam.pub
</span><span class='line'>~/workspace/sshkeys/adam.pub</span></code></pre></td></tr></table></div></figure>


<p>They will be referenced in our playbook as <code>key: ".pub') }}"</code> but if they were on github we can reference them as <code>key: https://github.com/.keys</code>, more info on that can be found on the <a href="https://docs.ansible.com/ansible/2.4/authorized_key_module.html">authorized_key_module</a> documentation.</p>

<h2>The Target Server</h2>

<p>Our inventory for the target server only includes one host, but we can add as many as we want, but our inventory will look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat inventory.ini
</span><span class='line'>[bastion]
</span><span class='line'>bastion-host ansible_host=34.x.x.x ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/ansible.pem ansible_python_interpreter=/usr/bin/python3
</span><span class='line'>[bastion:vars]
</span><span class='line'>ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'</span></code></pre></td></tr></table></div></figure>


<p>Test if the target server is reachable using the user <code>ubuntu</code> using our admin accounts ssh key <code>ansible.pem</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ansible -i inventory.ini -m ping bastion
</span><span class='line'>bastion | SUCCESS =&gt; {
</span><span class='line'>    "changed": false,
</span><span class='line'>    "ping": "pong"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Our Playbook</h2>

<p>In this playbook, we will reference the users that we want to create and it will loop through those users, creating them on the target server and also use those names to match to the files on our laptop to match the ssh public keys:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat playbook.yml
</span><span class='line'>---
</span><span class='line'>- hosts: bastion
</span><span class='line'>  become: yes
</span><span class='line'>  become_user: root
</span><span class='line'>  become_method: sudo
</span><span class='line'>  tasks:
</span><span class='line'>    - name: create local user account on the target server
</span><span class='line'>      user:
</span><span class='line'>        name: ''
</span><span class='line'>        comment: ''
</span><span class='line'>        shell: /bin/bash
</span><span class='line'>        append: yes
</span><span class='line'>        groups: sudo
</span><span class='line'>        generate_ssh_key: yes
</span><span class='line'>        ssh_key_type: rsa
</span><span class='line'>      with_items:
</span><span class='line'>        - john
</span><span class='line'>        - bob
</span><span class='line'>        - sarah
</span><span class='line'>        - sam
</span><span class='line'>        - adam
</span><span class='line'>
</span><span class='line'>    - name: upload ssh public key to users authorized keys file
</span><span class='line'>      authorized_key:
</span><span class='line'>        user: ''
</span><span class='line'>        state: present
</span><span class='line'>        manage_dir: yes
</span><span class='line'>        key: ".pub') }}"
</span><span class='line'>      with_items:
</span><span class='line'>        - john
</span><span class='line'>        - bob
</span><span class='line'>        - sarah
</span><span class='line'>        - sam
</span><span class='line'>        - adam</span></code></pre></td></tr></table></div></figure>


<h2>Deploy</h2>

<p>Run the playbook:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ansible-playbook -i inventory.ini ssh-setup.yml
</span><span class='line'>
</span><span class='line'>PLAY [bastion]
</span><span class='line'>
</span><span class='line'>TASK [Gathering Facts]
</span><span class='line'>ok: [bastion-host]
</span><span class='line'>
</span><span class='line'>TASK [create local user account on the target server]
</span><span class='line'>changed: [bastion-host] =&gt; (item=john)
</span><span class='line'>changed: [bastion-host] =&gt; (item=bob)
</span><span class='line'>changed: [bastion-host] =&gt; (item=sarah)
</span><span class='line'>changed: [bastion-host] =&gt; (item=sam)
</span><span class='line'>changed: [bastion-host] =&gt; (item=adam)
</span><span class='line'>
</span><span class='line'>TASK [upload ssh public key to users authorized keys file]
</span><span class='line'>changed: [bastion-host] =&gt; (item=john)
</span><span class='line'>changed: [bastion-host] =&gt; (item=bob)
</span><span class='line'>changed: [bastion-host] =&gt; (item=sarah)
</span><span class='line'>changed: [bastion-host] =&gt; (item=sam)
</span><span class='line'>changed: [bastion-host] =&gt; (item=adam)
</span><span class='line'>
</span><span class='line'>PLAY RECAP
</span><span class='line'>bastion-host                   : ok=6    changed=5    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span></code></pre></td></tr></table></div></figure>


<p>Now when we ask one of the users, adam for example, to authenticate with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -i ~/.ssh/path_to_his_private_key.pem adamin@bastion.mydomain.com</span></code></pre></td></tr></table></div></figure>


<p>They should have access to the server.</p>

<h2>Thank You</h2>

<p>Thanks for reading, for more information on this module check out their documentation:</p>

<ul>
<li><a href="https://docs.ansible.com/ansible/2.4/authorized_key_module.html">https://docs.ansible.com/ansible/2.4/authorized_key_module.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy Ad-Hoc VPNs With Sshuttle]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/10/26/easy-ad-hoc-vpns-with-sshuttle/"/>
    <updated>2020-10-26T06:59:44+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/10/26/easy-ad-hoc-vpns-with-sshuttle</id>
    <content type="html"><![CDATA[<p>Theres a utility called <code>sshuttle</code> which allows you to VPN via a SSH connection, which is really handy when you quickly want to be able to reach a private range, which is accessible from a public reachable server such as a bastion host.</p>

<p>In this tutorial, I will demonstrate how to install sshuttle on a mac, if you are using a different OS you can see their <a href="https://github.com/sshuttle/sshuttle">documentation</a> and then we will use the VPN connection to reach a &ldquo;prod&rdquo; and a &ldquo;dev&rdquo; environment.</p>

<h2>SSH Config</h2>

<p>We will declare 2 jump-boxes / bastion hosts in our ssh config:</p>

<ul>
<li><code>dev-jump-host</code> is a public server that has network access to our private endpoints in <code>172.31.0.0/16</code></li>
<li><code>prod-jump-host</code> is a public server that has network access to our private endpoints in <code>172.31.0.0/16</code></li>
</ul>


<p>In this case, the above example is 2 AWS Accounts with the same CIDR&rsquo;s, and wanted to demonstrate using sshuttle for this reason, as if we had different CIDRs we can setup a dedicated VPN and route them respectively.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat ~/.ssh/config
</span><span class='line'>Host *
</span><span class='line'>    Port 22
</span><span class='line'>    StrictHostKeyChecking no
</span><span class='line'>    UserKnownHostsFile /dev/null
</span><span class='line'>    ServerAliveInterval 60
</span><span class='line'>    ServerAliveCountMax 30
</span><span class='line'>
</span><span class='line'>Host dev-jump-host
</span><span class='line'>    HostName dev-bastion.mydomain.com
</span><span class='line'>    User bastion
</span><span class='line'>    IdentityFile ~/.ssh/id_rsa
</span><span class='line'>
</span><span class='line'>Host prod-jump-host
</span><span class='line'>    HostName prod-bastion.mydomain.com
</span><span class='line'>    User bastion
</span><span class='line'>    IdentityFile ~/.ssh/id_rsa</span></code></pre></td></tr></table></div></figure>


<h2>Install sshuttle</h2>

<p>Install sshuttle for your operating system:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># macos
</span><span class='line'>$ brew install shuttle
</span><span class='line'>
</span><span class='line'># debian
</span><span class='line'>$ apt install sshuttle</span></code></pre></td></tr></table></div></figure>


<h2>Usage</h2>

<p>To setup a vpn tunnel to route connections to our prod account:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sshuttle -r prod-jump-host 172.31.0.0/16</span></code></pre></td></tr></table></div></figure>


<p>Or to setup a vpn tunnel to route connections to our dev account:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sshuttle -r dev-jump-host 172.31.0.0/16</span></code></pre></td></tr></table></div></figure>


<p>Once one of your chosen sessions establishes, you can use a new terminal to access your private network, as example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nc -vz 172.31.23.40 22</span></code></pre></td></tr></table></div></figure>


<h2>Bash Functions</h2>

<p>We can wrap this into functions, so we can use <code>vpn_dev</code> or <code>vpn_prod</code> which aliases to the commands shown below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat ~/.functions
</span><span class='line'>vpn_prod(){
</span><span class='line'>  sshuttle -r prod-jump-host 172.31.0.0/16
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>vpn_dev(){
</span><span class='line'>  sshuttle -r dev-jump-host 172.31.0.0/16
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Now source that to your environment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ source ~/.functions</span></code></pre></td></tr></table></div></figure>


<p>Then you should be able to use <code>vpn_dev</code> and <code>vpn_prod</code> from your terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vpn_prod
</span><span class='line'>[local sudo] Password:
</span><span class='line'>Warning: Permanently added 'xx,xx' (ECDSA) to the list of known hosts.
</span><span class='line'>client: Connected.</span></code></pre></td></tr></table></div></figure>


<p>And in a new terminal we can connect to a RDS MySQL Database sitting in a private network:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mysql -h my-prod-db.pvt.mydomain.com -u dbadmin -p$pass
</span><span class='line'>mysql&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Sshuttle as a Service</h2>

<p>You can create a systemd unit file to run a sshuttle vpn as a service. In this scenario I provided 2 different vpn routes, dev and prod, so you can create 2 seperate systemd unit files, but my case I will only create for prod:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/systemd/system/vpn_prod.service
</span><span class='line'>[Unit]
</span><span class='line'>Description=ShuttleProdVPN
</span><span class='line'>Wants=network-online.target
</span><span class='line'>After=network-online.target
</span><span class='line'>StartLimitIntervalSec=500
</span><span class='line'>StartLimitBurst=5
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>User=root
</span><span class='line'>Group=root
</span><span class='line'>Type=simple
</span><span class='line'>Restart=on-failure
</span><span class='line'>RestartSec=10s
</span><span class='line'>ExecStart=/usr/bin/sshuttle -r prod-jump-host 172.31.0.0/16
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=multi-user.target</span></code></pre></td></tr></table></div></figure>


<p>Reload the systemd daemon:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo systemctl daemon-reload</span></code></pre></td></tr></table></div></figure>


<p>Enable and start the service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo systemctl enable vpn_prod
</span><span class='line'>$ sudo systemctl start vpn_prod</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thanks for reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use a SSH Jump Host With Ansible]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/10/26/use-a-ssh-jump-host-with-ansible/"/>
    <updated>2020-10-26T05:25:18+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/10/26/use-a-ssh-jump-host-with-ansible</id>
    <content type="html"><![CDATA[<p>In this post we will demonstrate how to use a SSH Bastion or Jump Host with Ansible to reach the target server.</p>

<p>In some scenarios, the target server might be in a private range which is only accessible via a bastion host, and that counts the same for ansible as ansible is using SSH to reach to the target servers.</p>

<h2>SSH Config</h2>

<p>Our bastion host is configured as <code>bastion</code> and the config under <code>~/.ssh/config</code> looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Host *
</span><span class='line'>    Port 22
</span><span class='line'>    StrictHostKeyChecking no
</span><span class='line'>    UserKnownHostsFile /dev/null
</span><span class='line'>    ServerAliveInterval 60
</span><span class='line'>    ServerAliveCountMax 30
</span><span class='line'>
</span><span class='line'>Host bastion
</span><span class='line'>    HostName bastion.mydomain.com
</span><span class='line'>    User bastion
</span><span class='line'>    IdentityFile ~/.ssh/id_rsa</span></code></pre></td></tr></table></div></figure>


<p>To verify that our config is working, you should be able to use:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh bastion</span></code></pre></td></tr></table></div></figure>


<h2>Using a Bastion with Ansible</h2>

<p>In order to reach our target server we need to use the bastion, so to test the SSH connection we can use this SSH one-liner. Our target server has a IP address of <code>172.31.81.94</code> and expects us to provide a <code>ansible.pem</code> private key and we need to authenticate with the <code>ubuntu</code> user:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -o ProxyCommand="ssh -W %h:%p -q bastion" -i ~/.ssh/ansible.pem ubuntu@172.31.81.94</span></code></pre></td></tr></table></div></figure>


<p>If we can reach our server its time to include it in our playbook.</p>

<p>In our inventory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat inventory.ini
</span><span class='line'>[deployment]
</span><span class='line'>server-a ansible_host=172.31.81.94 ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/ansible.pem
</span><span class='line'>[deployment:vars]
</span><span class='line'>ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyCommand="ssh -W %h:%p -q bastion"'</span></code></pre></td></tr></table></div></figure>


<p>And our playbook which will use the ping module:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat playbook.yml
</span><span class='line'>- name: Test Ping
</span><span class='line'>  hosts: deployment
</span><span class='line'>  tasks:
</span><span class='line'>  - action: ping</span></code></pre></td></tr></table></div></figure>


<p>Test it out:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ansible-playbook -i inventory.ini ping.yml
</span><span class='line'>
</span><span class='line'>PLAY [Test Ping] ***********************************************************************************************************************************************************
</span><span class='line'>
</span><span class='line'>TASK [Gathering Facts] *****************************************************************************************************************************************************
</span><span class='line'>ok: [server-a]
</span><span class='line'>
</span><span class='line'>TASK [ping] ****************************************************************************************************************************************************************
</span><span class='line'>ok: [server-a]
</span><span class='line'>
</span><span class='line'>PLAY RECAP *****************************************************************************************************************************************************************
</span><span class='line'>server-a                   : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Ping Role With Ansible in a Playbook]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/10/23/basic-ping-role-with-ansible-in-a-playbook/"/>
    <updated>2020-10-23T13:13:16+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/10/23/basic-ping-role-with-ansible-in-a-playbook</id>
    <content type="html"><![CDATA[<p>This is a short post on how to create a basic role to reference the ping module in Ansible.</p>

<h2>Directory Structure</h2>

<p>This is our directory strucuture:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tree .
</span><span class='line'>.
</span><span class='line'>├── inventory.ini
</span><span class='line'>├── playbooks
</span><span class='line'>│   └── myplaybook.yml
</span><span class='line'>└── roles
</span><span class='line'>    └── ping
</span><span class='line'>        └── tasks
</span><span class='line'>            └── main.yml
</span><span class='line'>
</span><span class='line'>4 directories, 3 files</span></code></pre></td></tr></table></div></figure>


<p>Create the directories:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p playbooks
</span><span class='line'>$ mkdir -p roles/ping/tasks</span></code></pre></td></tr></table></div></figure>


<p>Our <code>inventory.ini</code> includes the hosts that we will be using, and in this case I will be defining a group named <code>rpifleet</code> with all the host nested under that group and I&rsquo;m using the user <code>pi</code> and my private ssh key <code>~/.ssh/id_rsa</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat inventory.ini
</span><span class='line'>[rpifleet]
</span><span class='line'>rpi-01 ansible_host=rpi-01.local ansible_user=pi ansible_ssh_private_key_file=~/.ssh/id_rsa ansible_python_interpreter=/usr/bin/python3
</span><span class='line'>rpi-02 ansible_host=rpi-02.local ansible_user=pi ansible_ssh_private_key_file=~/.ssh/id_rsa ansible_python_interpreter=/usr/bin/python3
</span><span class='line'>[rpifleet:vars]
</span><span class='line'>ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'</span></code></pre></td></tr></table></div></figure>


<p>Next our role is a basic role that will reference our ping module, so from our main playbook we will reference the role that we are defining:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat roles/ping/tasks/main.yml
</span><span class='line'>---
</span><span class='line'>- name: Test Ping
</span><span class='line'>  action: ping</span></code></pre></td></tr></table></div></figure>


<p>Now that we have defined our <code>ping</code> role, we need to include it into our playbook:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat playbooks/myplaybook.yml
</span><span class='line'>---
</span><span class='line'>- name: ping raspberry pi fleet
</span><span class='line'>  hosts: rpifleet
</span><span class='line'>  roles:
</span><span class='line'>    - { role: ../roles/ping }</span></code></pre></td></tr></table></div></figure>


<p>You will see due to my playbooks directory being non-default, I defined the path to the role directory.</p>

<h2>Install Ansible</h2>

<p>Next we need to install ansible:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip install ansible</span></code></pre></td></tr></table></div></figure>


<h2>Run the Ansible Playbook</h2>

<p>Now run the playbook which will ping the nodes using ssh. Using the ping module is useful when testing the connection to your nodes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ansible-playbook -i inventory.ini playbooks/myplaybook.yml
</span><span class='line'>
</span><span class='line'>PLAY [ping raspberry pi fleet] *****************************************************
</span><span class='line'>
</span><span class='line'>TASK [Gathering Facts] *************************************************************
</span><span class='line'>ok: [rpi-02]
</span><span class='line'>ok: [rpi-01]
</span><span class='line'>
</span><span class='line'>TASK [../roles/ping : Test Ping] ***************************************************
</span><span class='line'>ok: [rpi-02]
</span><span class='line'>ok: [rpi-01]
</span><span class='line'>
</span><span class='line'>PLAY RECAP *************************************************************************
</span><span class='line'>rpi-01                     : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
</span><span class='line'>rpi-02                     : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thanks for reading</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Libvirt Provisioner With Terraform for KVM]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/10/08/using-the-libvirt-provisioner-with-terraform-for-kvm/"/>
    <updated>2020-10-08T00:06:21+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/10/08/using-the-libvirt-provisioner-with-terraform-for-kvm</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/95402415-e836d880-090f-11eb-8977-d1e2f842ef34.png" alt="terraform-ansible-kvm" /></p>

<p>In this post we will use the <a href="https://github.com/dmacvicar/terraform-provider-libvirt">libvirt provisioner</a> with Terraform to deploy a KVM Virtual Machine on a Remote KVM Host using SSH and use Ansible to deploy Nginx on our VM.</p>

<p>In my <a href="https://blog.ruanbekker.com/blog/2020/10/07/setup-a-kvm-host-for-virtualization-on-oneprovider/">previous post</a> I demonstrated how I provisioned my KVM Host and created a dedicated user for Terraform to authenticate to our KVM host to provision VMs.</p>

<p>Once you have KVM installed and your SSH access is sorted, we can start by installing our dependencies.</p>

<h2>Install our Dependencies</h2>

<p>First we will install Terraform:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://releases.hashicorp.com/terraform/0.13.3/terraform_0.13.3_linux_amd64.zip
</span><span class='line'>$ unzip terraform_0.13.3_linux_amd64.zip
</span><span class='line'>$ sudo mv terraform /usr/local/bin/terraform</span></code></pre></td></tr></table></div></figure>


<p>Then we will install Ansible:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ virtualenv -p python3 .venv
</span><span class='line'>$ source .venv/bin/activate
</span><span class='line'>$ pip install ansible</span></code></pre></td></tr></table></div></figure>


<p>Now in order to use the libvirt provisioner, we need to install it where we will run our Terraform deployment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /tmp/
</span><span class='line'>$ mkdir -p ~/.local/share/terraform/plugins/registry.terraform.io/dmacvicar/libvirt/0.6.2/linux_amd64
</span><span class='line'>$ wget https://github.com/dmacvicar/terraform-provider-libvirt/releases/download/v0.6.2/terraform-provider-libvirt-0.6.2+git.1585292411.8cbe9ad0.Ubuntu_18.04.amd64.tar.gz
</span><span class='line'>$ tar -xvf terraform-provider-libvirt-0.6.2+git.1585292411.8cbe9ad0.Ubuntu_18.04.amd64.tar.gz
</span><span class='line'>$ mv ./terraform-provider-libvirt  ~/.local/share/terraform/plugins/registry.terraform.io/dmacvicar/libvirt/0.6.2/linux_amd64/</span></code></pre></td></tr></table></div></figure>


<p>Our ssh config for our KVM host in <code>~/.ssh/config</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Host *
</span><span class='line'>    Port 22
</span><span class='line'>    StrictHostKeyChecking no
</span><span class='line'>    UserKnownHostsFile /dev/null
</span><span class='line'>
</span><span class='line'>Host ams-kvm-remote-host
</span><span class='line'>    HostName ams-kvm.mydomain.com
</span><span class='line'>    User deploys
</span><span class='line'>    IdentityFile ~/.ssh/deploys.pem</span></code></pre></td></tr></table></div></figure>


<h2>Terraform all the things</h2>

<p>Create a workspace directory for our demonstration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p ~/workspace/terraform-kvm-example/
</span><span class='line'>$ cd ~/workspace/terraform-kvm-example/</span></code></pre></td></tr></table></div></figure>


<p>First let&rsquo;s create our <code>providers.tf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>terraform {
</span><span class='line'>  required_providers {
</span><span class='line'>    libvirt = {
</span><span class='line'>      source  = "dmacvicar/libvirt"
</span><span class='line'>      version = "0.6.2"
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Then our <code>variables.tf</code>, just double check where you need to change values to suite your environment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>variable "libvirt_disk_path" {
</span><span class='line'>  description = "path for libvirt pool"
</span><span class='line'>  default     = "/opt/kvm/pool1"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>variable "ubuntu_18_img_url" {
</span><span class='line'>  description = "ubuntu 18.04 image"
</span><span class='line'>  default     = "http://cloud-images.ubuntu.com/releases/bionic/release-20191008/ubuntu-18.04-server-cloudimg-amd64.img"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>variable "vm_hostname" {
</span><span class='line'>  description = "vm hostname"
</span><span class='line'>  default     = "terraform-kvm-ansible"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>variable "ssh_username" {
</span><span class='line'>  description = "the ssh user to use"
</span><span class='line'>  default     = "ubuntu"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>variable "ssh_private_key" {
</span><span class='line'>  description = "the private key to use"
</span><span class='line'>  default     = "~/.ssh/id_rsa"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Create the <code>main.tf</code>, you will notice that we are using ssh to connect to KVM, and because the private range of our VM&rsquo;s are not routable via the internet, I&rsquo;m using a bastion host to reach them.</p>

<p>The bastion host (ssh config from the pre-requirements section) is the KVM host and you will see that ansible is also using that host as a jump box, to get to the VM. I am also using cloud-init to bootstrap the node with SSH, etc.</p>

<p>The reason why I&rsquo;m using remote-exec before the ansible deployment, is to ensure that we can establish a command via SSH before Ansible starts.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>provider "libvirt" {
</span><span class='line'>  uri = "qemu+ssh://deploys@ams-kvm-remote-host/system"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>resource "libvirt_pool" "ubuntu" {
</span><span class='line'>  name = "ubuntu"
</span><span class='line'>  type = "dir"
</span><span class='line'>  path = var.libvirt_disk_path
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>resource "libvirt_volume" "ubuntu-qcow2" {
</span><span class='line'>  name = "ubuntu-qcow2"
</span><span class='line'>  pool = libvirt_pool.ubuntu.name
</span><span class='line'>  source = var.ubuntu_18_img_url
</span><span class='line'>  format = "qcow2"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>data "template_file" "user_data" {
</span><span class='line'>  template = file("${path.module}/config/cloud_init.yml")
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>data "template_file" "network_config" {
</span><span class='line'>  template = file("${path.module}/config/network_config.yml")
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>resource "libvirt_cloudinit_disk" "commoninit" {
</span><span class='line'>  name           = "commoninit.iso"
</span><span class='line'>  user_data      = data.template_file.user_data.rendered
</span><span class='line'>  network_config = data.template_file.network_config.rendered
</span><span class='line'>  pool           = libvirt_pool.ubuntu.name
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>resource "libvirt_domain" "domain-ubuntu" {
</span><span class='line'>  name   = var.vm_hostname
</span><span class='line'>  memory = "512"
</span><span class='line'>  vcpu   = 1
</span><span class='line'>
</span><span class='line'>  cloudinit = libvirt_cloudinit_disk.commoninit.id
</span><span class='line'>
</span><span class='line'>  network_interface {
</span><span class='line'>    network_name   = "default"
</span><span class='line'>    wait_for_lease = true
</span><span class='line'>    hostname       = var.vm_hostname
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  console {
</span><span class='line'>    type        = "pty"
</span><span class='line'>    target_port = "0"
</span><span class='line'>    target_type = "serial"
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  console {
</span><span class='line'>    type        = "pty"
</span><span class='line'>    target_type = "virtio"
</span><span class='line'>    target_port = "1"
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  disk {
</span><span class='line'>    volume_id = libvirt_volume.ubuntu-qcow2.id
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  graphics {
</span><span class='line'>    type        = "spice"
</span><span class='line'>    listen_type = "address"
</span><span class='line'>    autoport    = true
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  provisioner "remote-exec" {
</span><span class='line'>    inline = [
</span><span class='line'>      "echo 'Hello World'"
</span><span class='line'>    ]
</span><span class='line'>
</span><span class='line'>    connection {
</span><span class='line'>      type                = "ssh"
</span><span class='line'>      user                = var.ssh_username
</span><span class='line'>      host                = libvirt_domain.domain-ubuntu.network_interface[0].addresses[0]
</span><span class='line'>      private_key         = file(var.ssh_private_key)
</span><span class='line'>      bastion_host        = "ams-kvm-remote-host"
</span><span class='line'>      bastion_user        = "deploys"
</span><span class='line'>      bastion_private_key = file("~/.ssh/deploys.pem")
</span><span class='line'>      timeout             = "2m"
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  provisioner "local-exec" {
</span><span class='line'>    command = &lt;&lt;EOT
</span><span class='line'>      echo "[nginx]" &gt; nginx.ini
</span><span class='line'>      echo "${libvirt_domain.domain-ubuntu.network_interface[0].addresses[0]}" &gt;&gt; nginx.ini
</span><span class='line'>      echo "[nginx:vars]" &gt;&gt; nginx.ini
</span><span class='line'>      echo "ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyCommand=\"ssh -W %h:%p -q ams-kvm-remote-host\"'" &gt;&gt; nginx.ini
</span><span class='line'>      ansible-playbook -u ${var.ssh_username} --private-key ${var.ssh_private_key} -i nginx.ini ansible/playbook.yml
</span><span class='line'>      EOT
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>As I&rsquo;ve mentioned, Im using cloud-init, so lets setup the network config and cloud init under the <code>config/</code> directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir config</span></code></pre></td></tr></table></div></figure>


<p>And our <code>config/cloud_init.yml</code>, just make sure that you configure your public ssh key for ssh access in the config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#cloud-config
</span><span class='line'># vim: syntax=yaml
</span><span class='line'># examples:
</span><span class='line'># https://cloudinit.readthedocs.io/en/latest/topics/examples.html
</span><span class='line'>bootcmd:
</span><span class='line'>  - echo 192.168.0.1 gw.homedns.xyz &gt;&gt; /etc/hosts
</span><span class='line'>runcmd:
</span><span class='line'> - [ ls, -l, / ]
</span><span class='line'> - [ sh, -xc, "echo $(date) ': hello world!'" ]
</span><span class='line'>ssh_pwauth: true
</span><span class='line'>disable_root: false
</span><span class='line'>chpasswd:
</span><span class='line'>  list: |
</span><span class='line'>     root:password
</span><span class='line'>  expire: false
</span><span class='line'>users:
</span><span class='line'>  - name: ubuntu
</span><span class='line'>    sudo: ALL=(ALL) NOPASSWD:ALL
</span><span class='line'>    groups: users, admin
</span><span class='line'>    home: /home/ubuntu
</span><span class='line'>    shell: /bin/bash
</span><span class='line'>    lock_passwd: false
</span><span class='line'>    ssh-authorized-keys:
</span><span class='line'>      - ssh-rsa AAAA ...your-public-ssh-key-goes-here... user@host
</span><span class='line'>final_message: "The system is finally up, after $UPTIME seconds"</span></code></pre></td></tr></table></div></figure>


<p>And our network config, in <code>config/network_config.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>version: 2
</span><span class='line'>ethernets:
</span><span class='line'>  ens3:
</span><span class='line'>    dhcp4: true</span></code></pre></td></tr></table></div></figure>


<p>Now we will create our Ansible playbook, to deploy nginx to our VM, create the ansible directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir ansible</span></code></pre></td></tr></table></div></figure>


<p>Then create the <code>ansible/playbook.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'># https://docs.ansible.com/ansible/latest/collections/ansible/builtin/apt_module.html
</span><span class='line'># https://docs.ansible.com/ansible/latest/collections/ansible/builtin/systemd_module.html#examples
</span><span class='line'>- hosts: nginx
</span><span class='line'>  become: yes
</span><span class='line'>  become_user: root
</span><span class='line'>  become_method: sudo
</span><span class='line'>  tasks:
</span><span class='line'>    - name: Install nginx
</span><span class='line'>      apt:
</span><span class='line'>        name: nginx
</span><span class='line'>        state: latest
</span><span class='line'>        update_cache: yes
</span><span class='line'>
</span><span class='line'>    - name: Enable service nginx and ensure it is not masked
</span><span class='line'>      systemd:
</span><span class='line'>        name: nginx
</span><span class='line'>        enabled: yes
</span><span class='line'>        masked: no
</span><span class='line'>
</span><span class='line'>    - name: ensure nginx is started
</span><span class='line'>      systemd:
</span><span class='line'>        state: started
</span><span class='line'>        name: nginx</span></code></pre></td></tr></table></div></figure>


<p>This is optional, but I&rsquo;m using a <code>ansible.cfg</code> file to define my defaults:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[defaults]
</span><span class='line'>host_key_checking = False
</span><span class='line'>ansible_port = 22
</span><span class='line'>ansible_user = ubuntu
</span><span class='line'>ansible_ssh_private_key_file = ~/.ssh/id_rsa
</span><span class='line'>ansible_python_interpreter = /usr/bin/python3</span></code></pre></td></tr></table></div></figure>


<p>And lastly, our <code>outputs.tf</code> which will display our IP address of our VM:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>output "ip" {
</span><span class='line'>  value = libvirt_domain.domain-ubuntu.network_interface[0].addresses[0]
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>output "url" {
</span><span class='line'>  value = "http://${libvirt_domain.domain-ubuntu.network_interface[0].addresses[0]}"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Deploy our Terraform Deployment</h2>

<p>It&rsquo;s time to deploy a KVM instance with Terraform and deploy Nginx to our VM with Ansible using the local-exec provisioner.</p>

<p>Initialize terraform to download all the plugins:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ terraform init
</span><span class='line'>
</span><span class='line'>Initializing the backend...
</span><span class='line'>
</span><span class='line'>Initializing provider plugins...
</span><span class='line'>- Finding latest version of hashicorp/template...
</span><span class='line'>- Finding dmacvicar/libvirt versions matching "0.6.2"...
</span><span class='line'>- Installing hashicorp/template v2.1.2...
</span><span class='line'>- Installed hashicorp/template v2.1.2 (signed by HashiCorp)
</span><span class='line'>- Installing dmacvicar/libvirt v0.6.2...
</span><span class='line'>- Installed dmacvicar/libvirt v0.6.2 (unauthenticated)
</span><span class='line'>
</span><span class='line'>The following providers do not have any version constraints in configuration,
</span><span class='line'>so the latest version was installed.
</span><span class='line'>
</span><span class='line'>To prevent automatic upgrades to new major versions that may contain breaking
</span><span class='line'>changes, we recommend adding version constraints in a required_providers block
</span><span class='line'>in your configuration, with the constraint strings suggested below.
</span><span class='line'>
</span><span class='line'>* hashicorp/template: version = "~&gt; 2.1.2"
</span><span class='line'>
</span><span class='line'>Terraform has been successfully initialized!</span></code></pre></td></tr></table></div></figure>


<p>Run a plan, to see what will be done:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ terraform plan
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>Plan: 4 to add, 0 to change, 0 to destroy.
</span><span class='line'>
</span><span class='line'>Changes to Outputs:
</span><span class='line'>  + ip  = (known after apply)
</span><span class='line'>  + url = (known after apply)
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>And run a apply to run our deployment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ terraform apply -auto-approve
</span><span class='line'>...
</span><span class='line'>libvirt_domain.domain-ubuntu (local-exec): PLAY RECAP *********************************************************************
</span><span class='line'>libvirt_domain.domain-ubuntu (local-exec): 192.168.122.213            : ok=4    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
</span><span class='line'>libvirt_domain.domain-ubuntu: Creation complete after 2m24s [id=c96def6e-0361-441c-9e1f-5ba5f3fa5aec]
</span><span class='line'>
</span><span class='line'>Apply complete! Resources: 4 added, 0 changed, 0 destroyed.
</span><span class='line'>
</span><span class='line'>Outputs:
</span><span class='line'>
</span><span class='line'>ip = 192.168.122.213
</span><span class='line'>url = http://192.168.122.213</span></code></pre></td></tr></table></div></figure>


<p>You can always get the output afterwards using show or output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ terraform show -json | jq -r '.values.outputs.ip.value'
</span><span class='line'>192.168.122.213
</span><span class='line'>
</span><span class='line'>$ terraform output -json ip | jq -r '.'
</span><span class='line'>192.168.122.213</span></code></pre></td></tr></table></div></figure>


<h2>Test our VM</h2>

<p>Hop onto the KVM host, and test out nginx:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -I http://192.168.122.213
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Server: nginx/1.14.0 (Ubuntu)
</span><span class='line'>Date: Thu, 08 Oct 2020 00:37:43 GMT
</span><span class='line'>Content-Type: text/html
</span><span class='line'>Content-Length: 612
</span><span class='line'>Last-Modified: Thu, 08 Oct 2020 00:33:04 GMT
</span><span class='line'>Connection: keep-alive
</span><span class='line'>ETag: "5f7e5e40-264"
</span><span class='line'>Accept-Ranges: bytes</span></code></pre></td></tr></table></div></figure>




<iframe src="https://giphy.com/embed/3ohzdIuqJoo8QdKlnW" width="480" height="222" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>


<p><a href="https://giphy.com/gifs/reactionseditor-yes-awesome-3ohzdIuqJoo8QdKlnW">via GIPHY</a></p>


<h2>Thank You</h2>

<p><a href="https://saythanks.io/to/ruan.ru.bekker@gmail.com"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a></p>

<p>Thanks for reading, check out my <strong><a href="" rel="nofollow" target="_blank">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker" rel="nofollow" target="_blank">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a KVM Host for Virtualization on OneProvider]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/10/07/setup-a-kvm-host-for-virtualization-on-oneprovider/"/>
    <updated>2020-10-07T23:31:43+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/10/07/setup-a-kvm-host-for-virtualization-on-oneprovider</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been on the hunt for a hobby dedicated server for a terraform project, where I&rsquo;m intending to use the <a href="https://github.com/dmacvicar/terraform-provider-libvirt">libvirt provider</a> and found one awesome provider that offers amazingly great prices.</p>

<p>At <a href="https://oneprovider.com/dedicated-servers">oneprovider.com</a>, they offer dedicated servers for great prices and they offer a huge number of locations. So I decided to give them a go and ordered a dedicated server in Amsterdam, Netherlands:</p>

<p><img src="https://user-images.githubusercontent.com/567298/95398393-e9630800-0905-11eb-8277-79f13393187c.png" alt="cheap-dedicated-servers" /></p>

<p>I went for a 4GB DDR3 RAM, Atom C2350 2 Cores CPU with 128GB SSD and 1Gbps unmetered bandwidth for $7.30 a month, which is super cheap and more than enough for a hobby project:</p>

<p><img src="https://user-images.githubusercontent.com/567298/95398413-f7188d80-0905-11eb-9250-6368ea92b873.png" alt="image" /></p>

<p>I&rsquo;ve been using them for the last week and super impressed.</p>

<h2>What are we doing</h2>

<p>As part of my Terraform project, I would like to experiment with the libvirt provisioner to provision KVM instances, I need a dedicated server with KVM installed, and in this guide we will install KVM and create a dedicated user that we will use with Terraform.</p>

<h2>Install KVM</h2>

<p>Once your server is provisioned, SSH to your dedicated server and install <code>cpu-checker</code> to ensure that we are able to install KVM:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ $ apt update && apt upgrade -y
</span><span class='line'>$ apt install cpu-checker -y</span></code></pre></td></tr></table></div></figure>


<p>Test using <code>kvm-ok</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kvm-ok
</span><span class='line'>INFO: /dev/kvm exists
</span><span class='line'>KVM acceleration can be used</span></code></pre></td></tr></table></div></figure>


<p>On a client pc, generate the SSH key that we will use to authenticate with on our KVM host:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh-keygen -t rsa -C deploys -f ~/.ssh/deploys.pem</span></code></pre></td></tr></table></div></figure>


<p>Back on the server, create the user and prepare the ssh directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ useradd -m -s /bin/bash deploys
</span><span class='line'>$ mkdir /home/deploys/.ssh
</span><span class='line'>$ touch /home/deploys/.ssh/authorized_keys</span></code></pre></td></tr></table></div></figure>


<p>On the client PC where you generated your SSH key, copy the public key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat ~/.ssh/deploys.pem.pub| pbcopy</span></code></pre></td></tr></table></div></figure>


<p>Paste your public key to the servers authorized_keys file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /home/deploys/.ssh/authorized_keys
</span><span class='line'># paste the public key contents and save</span></code></pre></td></tr></table></div></figure>


<p>Update the content below with the correct permissions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chown -R deploys:deploys /home/deploys
</span><span class='line'>$ chmod 755 /home/deploys/.ssh
</span><span class='line'>$ chmod 644 /home/deploys/.ssh/authorized_keys</span></code></pre></td></tr></table></div></figure>


<p>Install KVM on the host:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt install bridge-utils qemu-kvm libvirt-bin virtinst -y</span></code></pre></td></tr></table></div></figure>


<p>Add our dedicated user to the libvirt group:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ usermod -G libvirt deploys</span></code></pre></td></tr></table></div></figure>


<p>Create the directory where we will store our vm&rsquo;s disks:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p /opt/kvm</span></code></pre></td></tr></table></div></figure>


<p>And apply ownership permissions for our user and group:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chown -R deploys:libvirt /opt/kvm</span></code></pre></td></tr></table></div></figure>


<p>I ran into a permission denied issue using terraform and the dedicated user, and to resolve I had to ensure that the <code>security_driver</code> is set to <code>none</code> in <code>/etc/libvirt/qemu.conf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/libvirt/qemu.conf</span></code></pre></td></tr></table></div></figure>


<p>and update the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>security_driver = "none"</span></code></pre></td></tr></table></div></figure>


<p>Then restart libvirtd:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo systemctl restart libvirtd </span></code></pre></td></tr></table></div></figure>


<h2>Test KVM</h2>

<p>Switch to the <code>deploys</code> user:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo su - deploys</span></code></pre></td></tr></table></div></figure>


<p>And list domains using <code>virsh</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ virsh list
</span><span class='line'> Id    Name                           State
</span><span class='line'>----------------------------------------------------</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>That&rsquo;s it, now we have a KVM host that allows us to provision VM&rsquo;s. In the next post we will install terraform and the libvirt provisioner for terraform to provision a vm and use ansible to deploy software to our vm.</p>

<p><a href="https://saythanks.io/to/ruan.ru.bekker@gmail.com"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a></p>

<p>Thanks for reaching out to me, check out my <strong><a href="" rel="nofollow" target="_blank">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker" rel="nofollow" target="_blank">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Local-exec Provisioner With Terraform]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/09/27/using-the-local-exec-provisioner-with-terraform/"/>
    <updated>2020-09-27T17:08:49+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/09/27/using-the-local-exec-provisioner-with-terraform</id>
    <content type="html"><![CDATA[<p>This is a basic example on how to use the <code>local-exec</code> provisioner in terraform, and I will use it to write a environment variable&rsquo;s value to disk.</p>

<h2>Installing Terraform</h2>

<p>Get the latest version of <a href="https://www.terraform.io/downloads.html">terraform</a>, for this post, I will be using the latest version of the time of writing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://releases.hashicorp.com/terraform/0.13.3/terraform_0.13.3_linux_amd64.zip
</span><span class='line'>$ unzip terraform_0.13.3_linux_amd64.zip
</span><span class='line'>$ sudo mv terraform /usr/local/bin/terraform</span></code></pre></td></tr></table></div></figure>


<p>Ensure that it&rsquo;s working:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ terraform -version
</span><span class='line'>Terraform v0.13.3</span></code></pre></td></tr></table></div></figure>


<h2>Terraform local-exec</h2>

<p>The local-exec provisioner allows us to run a command locally, so to test that we will write the environment variable <code>owner=ruan</code> to disk.</p>

<p>First setup our <code>main.tf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resource "null_resource" "this" {
</span><span class='line'>  provisioner "local-exec" {
</span><span class='line'>    command = "echo ${var.owner} &gt; file_${null_resource.this.id}.txt"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>As you can see our <code>local-exec</code> provisioner is issuing the command echo to write the environment variable <code>owner</code>&rsquo;s value to a file on disk, and the file name is <code>file_</code> + the null resource&rsquo;s id.</p>

<p>As we are referencing a variable, we need to define the variable, I will define it in <code>variables.tf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>variable "owner" {}</span></code></pre></td></tr></table></div></figure>


<p>As you can see, I am not defining the value, as I will define the value at runtime.</p>

<h2>Initialize</h2>

<p>When we initialize terraform, terraform builds up a dependency tree from all the <code>.tf</code> files and downloads any dependencies it requires:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ terraform init</span></code></pre></td></tr></table></div></figure>


<h2>Apply</h2>

<p>Run our deployment and pass our variable at runtime:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ terraform apply -var 'owner=ruan' -auto-approve
</span><span class='line'>
</span><span class='line'>null_resource.this: Creating...
</span><span class='line'>null_resource.this: Provisioning with 'local-exec'...
</span><span class='line'>null_resource.this (local-exec): Executing: ["/bin/sh" "-c" "echo ruan &gt; file_4397943546484635522.txt"]
</span><span class='line'>null_resource.this: Creation complete after 0s [id=4397943546484635522]
</span><span class='line'>
</span><span class='line'>Apply complete! Resources: 1 added, 0 changed, 0 destroyed.</span></code></pre></td></tr></table></div></figure>


<p>View the written file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat file_4397943546484635522.txt
</span><span class='line'>ruan</span></code></pre></td></tr></table></div></figure>


<p>If we wanted to define the environment variable in the <code>variables.tf</code> file, it will look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>variable "owner" {
</span><span class='line'>  description = "the owner of this project"
</span><span class='line'>  default     = "ruan"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The github repository for this code is located at:</p>

<ul>
<li><a href="https://github.com/ruanbekker/terraformfiles/tree/master/variable-via-cli">https://github.com/ruanbekker/terraformfiles/tree/master/variable-via-cli</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a NFS Server With Docker]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/09/20/setup-a-nfs-server-with-docker/"/>
    <updated>2020-09-20T16:07:09+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/09/20/setup-a-nfs-server-with-docker</id>
    <content type="html"><![CDATA[<p>In this tutorial we will setup a <strong>NFS Server</strong> using <strong>Docker</strong> for our development environment.</p>

<h2>Host Storage Path</h2>

<p>In this example we will be using our host path <code>/data/nfs-storage</code> which will host our storage for our NFS server, which will will mount to the container:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p /data/nfs-storage</span></code></pre></td></tr></table></div></figure>


<h2>NFS Server</h2>

<p>Create the NFS Server with docker:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run -itd --privileged \
</span><span class='line'>  --restart unless-stopped \
</span><span class='line'>  -e SHARED_DIRECTORY=/data \
</span><span class='line'>  -v /data/nfs-storage:/data \
</span><span class='line'>  -p 2049:2049 \
</span><span class='line'>  itsthenetwork/nfs-server-alpine:12</span></code></pre></td></tr></table></div></figure>


<p>We can do the same using docker-compose, for our <code>docker-compose.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>version: "2.1"
</span><span class='line'>services:
</span><span class='line'>  # https://hub.docker.com/r/itsthenetwork/nfs-server-alpine
</span><span class='line'>  nfs:
</span><span class='line'>    image: itsthenetwork/nfs-server-alpine:12
</span><span class='line'>    container_name: nfs
</span><span class='line'>    restart: unless-stopped
</span><span class='line'>    privileged: true
</span><span class='line'>    environment:
</span><span class='line'>      - SHARED_DIRECTORY=/data
</span><span class='line'>    volumes:
</span><span class='line'>      - /data/nfs-storage:/data
</span><span class='line'>    ports:
</span><span class='line'>      - 2049:2049</span></code></pre></td></tr></table></div></figure>


<p>To deploy using docker-compose:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose up -d</span></code></pre></td></tr></table></div></figure>


<h2>NFS Client</h2>

<p>To use a NFS Client to mount this to your filesystem, you can look at <a href="https://blog.ruanbekker.com/blog/2017/12/05/setup-a-nfs-server-on-a-raspberrypi/" rel="nofollow" target="_blank">this blogpost></a></p>

<p>In summary:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt install nfs-client -y
</span><span class='line'>$ sudo mount -v -o vers=4,loud 192.168.0.4:/ /mnt</span></code></pre></td></tr></table></div></figure>


<p>Verify that the mount is showing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ df -h
</span><span class='line'>Filesystem      Size  Used Avail Use% Mounted on
</span><span class='line'>/dev/sda2       109G   53G   51G  52% /
</span><span class='line'>192.168.0.4:/   4.5T  2.2T  2.1T  51% /mnt</span></code></pre></td></tr></table></div></figure>


<p>Now, create a test file on our NFS export:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ touch /mnt/file.txt</span></code></pre></td></tr></table></div></figure>


<p>Verify that the test file is on the local path:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls /data/nfs-storage/
</span><span class='line'>file.txt</span></code></pre></td></tr></table></div></figure>


<p>If you want to load this into other client&rsquo;s <code>/etc/fstab</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>192.168.0.4:/   /mnt   nfs4    _netdev,auto  0  0</span></code></pre></td></tr></table></div></figure>


<h2>NFS Docker Volume Plugin</h2>

<p>You can use a NFS Volume Plugin for Docker or Docker Swarm for persistent container storage.</p>

<p>To use the NFS Volume plugin, we need to download <a href="https://github.com/ContainX/docker-volume-netshare/releases" target="_blank" rel="nofollow">docker-volume-netshare</a> from their github releases page.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://github.com/ContainX/docker-volume-netshare/releases/download/v0.36/docker-volume-netshare_0.36_amd64.deb
</span><span class='line'>$ dpkg -i docker-volume-netshare_0.36_amd64.deb
</span><span class='line'>$ service docker-volume-netshare start</span></code></pre></td></tr></table></div></figure>


<p>Then your <code>docker-compose.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>version: '3.7'
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  mysql:
</span><span class='line'>    image: mariadb:10.1
</span><span class='line'>    networks:
</span><span class='line'>      - private
</span><span class='line'>    environment:
</span><span class='line'>      - MYSQL_ROOT_PASSWORD=${DATABASE_PASSWORD:-admin}
</span><span class='line'>      - MYSQL_DATABASE=testdb
</span><span class='line'>      - MYSQL_USER=${DATABASE_USER:-admin}
</span><span class='line'>      - MYSQL_PASSWORD=${DATABASE_PASSWORD:-admin}
</span><span class='line'>    volumes:
</span><span class='line'>      - mysql_data.vol:/var/lib/mysql
</span><span class='line'>
</span><span class='line'>volumes:
</span><span class='line'>  mysql_data.vol:
</span><span class='line'>    driver: nfs
</span><span class='line'>    driver_opts:
</span><span class='line'>      share: 192.168.69.1:/mysql_data_vol</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>That&rsquo;s it. Thanks for reading, follow me on Twitter and say hi! <a href="https://twitter.com/ruanbekker" rel="nofollow" target="_blank"><strong>@ruanbekker</strong></a></p><p><a href="https://saythanks.io/to/ruan.ru.bekker@gmail.com" rel="nofollow" target="_blank"><img src="https://svgshare.com/i/Pfy.svg" alt="Say Thanks!"></a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using if Statements in Bash to Check if Environment Variables Exist]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/08/14/using-if-statements-in-bash-to-check-if-environment-variables-exist/"/>
    <updated>2020-08-14T11:00:25+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/08/14/using-if-statements-in-bash-to-check-if-environment-variables-exist</id>
    <content type="html"><![CDATA[<p>This is a quick post to demonstrate how to use <strong>if statements</strong> in bash to check if we have the required environment variables in our environment before we continue a script.</p>

<p>Let&rsquo;s say we require <code>FOO</code> and <code>BAR</code> in our environment before we can continue, we can do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="k">${</span><span class="nv">FOO</span><span class="k">}</span> <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> -z <span class="k">${</span><span class="nv">BAR</span><span class="k">}</span> <span class="o">]</span> <span class="p">;</span>
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;required environment variables does not exist&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;required environment variables are set&quot;</span>
</span><span class='line'>    <span class="c"># do things</span>
</span><span class='line'>    <span class="nb">exit </span>0
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now if <code>FOO</code> or <code>BAR</code> is not set in our environment, the script will exit with return code 1.</p>

<p>To test it, when we pass no environment variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>chmod +x ./update.sh
</span><span class='line'><span class="nv">$ </span>./update.sh
</span><span class='line'>required environment variables does not exist
</span></code></pre></td></tr></table></div></figure>


<p>If we only pass one environment variable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ FOO</span><span class="o">=</span><span class="m">1</span> ./update.sh
</span><span class='line'>required environment variables does not exist
</span></code></pre></td></tr></table></div></figure>


<p>And as the result we want, when we pass both required environment variables, we have success:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ FOO</span><span class="o">=</span><span class="m">1</span> <span class="nv">BAR</span><span class="o">=</span><span class="m">2</span> ./update.sh
</span><span class='line'>required environment variables are <span class="nb">set</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started on Logging With Loki Using Docker]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/08/13/getting-started-on-logging-with-loki-using-docker/"/>
    <updated>2020-08-13T13:39:28+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/08/13/getting-started-on-logging-with-loki-using-docker</id>
    <content type="html"><![CDATA[<p>Logging with Loki is AMAZING!</p>

<p>In the past couple of months i&rsquo;ve been working a lot with logging, but more specifically logging with loki. As most of my metrics reside in prometheus, I use grafana quite extensively and logging was always the one that stood out a bit as I pushed my logs to elasticsearch and consumed them from grafana. Which worked pretty well, but the maintenance and resource costs was a bit too much for what I was looking for.</p>

<p>And then grafana released Loki, which is like prometheus, but for logs. And that was just super, exactly what I was looking for. For my use case, I was looking for something that can be consumed by grafana as a presentation layer, central based so I can push all sorts of logs, and want a easy way to grep for logs and a bonus would be to have a cli tool.</p>

<p>And Loki checked all those boxes!</p>

<div class="tenor-gif-embed" data-postid="7644619" data-share-method="host" data-width="100%" data-aspect-ratio="1.1971153846153846"><a href="https://tenor.com/view/oh-yeah-gif-7644619">Oh Yeah Parks And Recreation GIF</a> from <a href="https://tenor.com/search/ohyeah-gifs">Ohyeah GIFs</a></div>


<script type="text/javascript" async src="https://tenor.com/embed.js"></script>


<h2>What can you expect from this blog</h2>

<p>In this post will be a getting started guide to Loki, we will provision Loki, Grafana and Nginx using Docker to get our environment up and running, so that we can push our nginx container logs to the loki datasource, and access the logs via grafana.</p>

<p>We will then generate some logs so that we can show a couple of query examples using the log query language (LogQL) and use the LogCLI to access our logs via cli.</p>

<p>In a <a href="">future post</a>, I will demonstrate how to setup Loki for a non-docker deployment.</p>

<h2>Some useful information about Loki</h2>

<p>Let&rsquo;s first talk about Loki compared with Elasticsearch, as they are not the same:</p>

<ol>
<li>Loki does not index the text of the logs, instead grouping entries into streams and index those with labels</li>
<li>Things like full text search engines tokenizes your text into k/v pairs and gets written to an inverted index, which over time in my opinion gets complex to maintain, expensive to scale, storage retention, etc.</li>
<li>Loki is advertised as easy to scale, affordable to operate as it uses DynamoDB for Indexing and S3 for Storage</li>
<li>When using Loki, you may need to forget what you know and look to see how the problem can be solved differently with parallelization. Loki’s superpower is breaking up queries into small pieces and dispatching them in parallel so that you can query huge amounts of log data in small amounts of time.</li>
</ol>


<p>If we look at the <strong>Loki Log Model</strong>, we can see that the timestamp and the labels are indexed and the content of the logs are not indexed:</p>

<p><img src="https://img.sysadmins.co.za/cpr6n7.png" alt="loki" /></p>

<p>A <strong>log stream</strong> is a stream of log entries with the same exact label set:</p>

<p><img src="https://img.sysadmins.co.za/el6djk.png" alt="loki" /></p>

<p>For the <strong>storage</strong> side, inside each chunk, log entries are sorted by timestamp. Loki only indexes minimum and maximum timestamps of a chunk. Storage options support local storage, AWS S3, Google Cloud Storage and Azure</p>

<p><img src="https://img.sysadmins.co.za/959pjw.png" alt="loki" /></p>

<p>For <strong>chunks and querying</strong>, chunks are filled per stream and they are flushed of a few criterias such as age and size:</p>

<p><img src="https://img.sysadmins.co.za/ekm8cy.png" alt="loki" /></p>

<p>And one of the most important parts are the <strong>labels</strong>, labels define the stream and therefore its very important.</p>

<p>High cardinality is bad for labels, as something like a IP address can reduce your performance a lot, as it will create a stream for every unique IP label.</p>

<p>Static defined labels such as environment, hostnames are good, you can read more up about it <a href="https://grafana.com/blog/2020/04/21/how-labels-in-loki-can-make-log-queries-faster-and-easier/">here</a></p>

<p>Here is a info graphic on how one log line can be split up into 36 streams:</p>

<p><img src="https://img.sysadmins.co.za/g119oq.png" alt="" /></p>

<p>So with that being said, <strong>good labels</strong> will be considered as cluster, job, namespace, environment, etc where as <strong>bad labels</strong> will be things such as userid, ip address, url path, etc</p>

<h2>Selecting logstreams with Loki</h2>

<p>Selecting logstreams, is done by using <strong>label matchers</strong> and <strong>filter expressions</strong>, such as this example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{job="dockerlogs", environment="development"} |= "POST" |~ "196.35.64.+"</span></code></pre></td></tr></table></div></figure>


<p>Label Matchers and Filter Expressions support:</p>

<ul>
<li><code>=</code> Contains string</li>
<li><code>!=</code> Does not contain string</li>
<li><code>=~</code> Matches regular expression</li>
<li><code>!~</code> Does not match regular expression</li>
</ul>


<h2>Supported Clients</h2>

<p>At the moment of writing, loki supports the following log clients:</p>

<ul>
<li>Promtail (tails logs and ships to Loki)</li>
<li>Docker Driver</li>
<li>Fluentd</li>
<li>Fluent Bit</li>
<li>Logstash</li>
</ul>


<p>We will be going into more detail on using promtail in a <a href="">future post</a>, but you can read more up about it <a href="https://github.com/grafana/loki/tree/master/cmd">here</a></p>

<h2>Loki in Action</h2>

<p>Time to get to the fun part, clone my <a href="https://github.com/ruanbekker/loki-docker-nginx-example">github repo</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/ruanbekker/loki-docker-nginx-example
</span><span class='line'>$ cd loki-docker-nginx-example</span></code></pre></td></tr></table></div></figure>


<p>You can inspect the docker-compose.yml:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat docker-compose.yml
</span><span class='line'>version: "3.4"
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  my-nginx-service:
</span><span class='line'>    image: nginx
</span><span class='line'>    container_name: my-nginx-service
</span><span class='line'>    ports:
</span><span class='line'>      - 8000:80
</span><span class='line'>    environment:
</span><span class='line'>      - FOO=bar
</span><span class='line'>    logging:
</span><span class='line'>      driver: loki
</span><span class='line'>      options:
</span><span class='line'>        loki-url: http://localhost:3100/loki/api/v1/push
</span><span class='line'>        loki-external-labels: job=dockerlogs,owner=ruan,environment=development
</span><span class='line'>
</span><span class='line'>  grafana:
</span><span class='line'>    image: grafana/grafana:7.1.1
</span><span class='line'>    volumes:
</span><span class='line'>    - ./config/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
</span><span class='line'>    ports:
</span><span class='line'>    - "3000:3000"
</span><span class='line'>
</span><span class='line'>  loki:
</span><span class='line'>   image: grafana/loki:v1.3.0
</span><span class='line'>   volumes:
</span><span class='line'>     - ./config/loki.yaml:/etc/config/loki.yaml
</span><span class='line'>   entrypoint:
</span><span class='line'>     - /usr/bin/loki
</span><span class='line'>     - -config.file=/etc/config/loki.yaml
</span><span class='line'>   ports:
</span><span class='line'>     - "3100:3100"</span></code></pre></td></tr></table></div></figure>


<p>As you can see loki will be the datasource where we will be pushing our logs to from our nginx container and we are defining our logging section where it should find loki and we are also setting labels to that log stream using <code>loki-external-labels</code>. Then we are using grafana to auto configure the loki datasource from the <code>./config/datasource.yml</code> section so that we can visualize our logs.</p>

<p>If you don&rsquo;t want to define the logging section per container, you can always set the defaults using the <code>/etc/docker/daemon.json</code> by following <a href="https://grafana.com/docs/loki/latest/clients/docker-driver/configuration/#change-the-default-logging-driver">this guide</a></p>

<p>Let&rsquo;s boot up our stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose up</span></code></pre></td></tr></table></div></figure>


<p>After everything is up, you should be able to access nginx by visiting: <code>http://nginx.localdns.xyz:8000/</code>, after you received a response, visit Grafana on <code>http://grafana.localdns.xyz:3000</code> using the username and password: <code>admin/admin</code>.</p>

<p>If you head over to datasources, you should see the loki datasource which was provisioned for you:</p>

<p><img src="https://img.sysadmins.co.za/tyn0ny.png" alt="loki-grafana" /></p>

<p>When you head to the left on explore and you select the loki datasource on <code>http://grafana.localdns.xyz:3000/explore</code> you should see the following:</p>

<p><img src="https://img.sysadmins.co.za/5kp07m.png" alt="loki-grafana" /></p>

<p>You will see that grafana discovers logstreams with the label <code>job</code> as you can see that our <code>job="dockerlogs"</code> can be seen there. We can either click on it, select the log labels from the left and browse the label we want to select or manually enter the query.</p>

<p>I will be using the query manually:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{job="dockerlogs"}</span></code></pre></td></tr></table></div></figure>


<p>So now we will get all the logs that has that label associated and as you can see, we see our request that we made:</p>

<p><img src="https://img.sysadmins.co.za/gra0oe.png" alt="nginx-grafana-loki" /></p>

<p>We can see one error due to the favicon.ico that it could not find, but let&rsquo;s first inspect our first log line:</p>

<p><img src="https://img.sysadmins.co.za/6dbuqn.png" alt="loki" /></p>

<p>Here we can see the labels assigned to that log event, which we can include in our query, like if we had multiple services and different environments, we can use a query like the following to only see logs for a specific service and environment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{job="dockerlogs", environment="development", compose_service="my-nginx-service"}</span></code></pre></td></tr></table></div></figure>


<p>In the example above we used the selectors to select the logs we want to see, now we can use our filter expressions, to &ldquo;grep&rdquo; our logs.</p>

<p>Let&rsquo;s say we want to focus only on one service, and we want to filter for any logs with GET requests, so first we select to service then apply the filter expression:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{compose_service="my-nginx-service"} |= "GET"</span></code></pre></td></tr></table></div></figure>


<p><img src="https://img.sysadmins.co.za/vv609g.png" alt="loki-logs" /></p>

<p>As you can see we can see the ones we were looking for, we can also chain them, so we want to se GET&rsquo;s and errors:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{compose_service="my-nginx-service"} |= "GET" |= "error"</span></code></pre></td></tr></table></div></figure>


<p>And lets say for some reason we only want to see the logs that comes from a 192.168.32 subnet:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{compose_service="my-nginx-service"} |= "GET" |= "error" |~ "192.168.32."</span></code></pre></td></tr></table></div></figure>


<p>But we dont want to see requests from &ldquo;nginx.localdns.xyz&rdquo;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{compose_service="my-nginx-service"} |= "GET" |= "error" |~ "192.168.32." != "nginx.localdns.xyz"</span></code></pre></td></tr></table></div></figure>


<p>Make two extra get requests to &ldquo;foo.localdns.xyz:8000&rdquo; and &ldquo;bar.localdns.xyz:8000&rdquo; and then we change the query to say that we only want to see errors and hostnames coming from the 2 requests that we made:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{compose_service="my-nginx-service"} |= "error" |~ "(foo|bar).localdns.xyz"</span></code></pre></td></tr></table></div></figure>


<p>If we expand one of the log lines, we can do a ad-hoc analysis to see the percentage of logs by source for example:</p>

<p><img src="https://img.sysadmins.co.za/9ctz6d.png" alt="loki-logs" /></p>

<h2>LogCLI</h2>

<p>If you prefer the cli to query logs, logcli is the command line client for loki, allows you to query logs from your terminal and has clients for linux, mac and windows.</p>

<p>Check the releases for the latest version:</p>

<ul>
<li><a href="https://github.com/grafana/loki/releases">https://github.com/grafana/loki/releases</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://github.com/grafana/loki/releases/download/v1.5.0/logcli-darwin-amd64.zip
</span><span class='line'>$ unzip logcli-darwin-amd64.zip
</span><span class='line'>$ mv logcli-darwin-amd64 /usr/local/bin/logcli</span></code></pre></td></tr></table></div></figure>


<p>Set your environment details, in our case we dont have a username and password for loki:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ #export LOKI_USERNAME=${MYUSER}
</span><span class='line'>$ #export LOKI_PASSWORD=${MYPASS}
</span><span class='line'>$ export LOKI_ADDR=http://localhost:3001</span></code></pre></td></tr></table></div></figure>


<p>We can view all our labels, let’s view all the job labels:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ logcli labels job
</span><span class='line'>http://localhost:3001/loki/api/v1/label/job/values
</span><span class='line'>dockerlogs</span></code></pre></td></tr></table></div></figure>


<p>Let’s look at family apps nginx logs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ logcli query '{job="dockerlogs"}'
</span><span class='line'>http://localhost:3001/loki/api/v1/query_range?direction=BACKWARD&end=1587727924005496000&limit=30&query=%7Bjob%3D%22dockerlogs%22%2C&start=1587724324005496000
</span><span class='line'>Common labels: {environment="development", owner="ruan", compose_service="my-nginx-service", job="dockerlogs", host="docker-desktop", compose_project="loki-nginx-docker"}
</span><span class='line'>2020-08-13 17:08:40 192.168.32.1 - - [13/Aug/2020:15:08:40 +0000] "GET / HTTP/1.1" 200 612 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:79.0) Gecko/20100101 Firefox/79.0" "-"</span></code></pre></td></tr></table></div></figure>


<p>We can also pipe that output to grep, awk, etc:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ logcli query '{job="dockerlogs"}' | grep GREP | awk -F 'X' '{print  $1}'</span></code></pre></td></tr></table></div></figure>


<p>Supported arguments:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ logcli query --help
</span><span class='line'>usage: logcli query [&lt;flags&gt;] &lt;query&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Run a LogQL query.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Flags:
</span><span class='line'>      --help             Show context-sensitive help (also try --help-long and --help-man).
</span><span class='line'>      --version          Show application version.
</span><span class='line'>  -q, --quiet            suppress everything but log lines
</span><span class='line'>      --stats            show query statistics
</span><span class='line'>  -o, --output=default   specify output mode [default, raw, jsonl]
</span><span class='line'>  -z, --timezone=Local   Specify the timezone to use when formatting output timestamps [Local, UTC]
</span><span class='line'>      --addr="http://localhost:3100"
</span><span class='line'>                         Server address. Can also be set using LOKI_ADDR env var.
</span><span class='line'>      --username=""      Username for HTTP basic auth. Can also be set using LOKI_USERNAME env var.
</span><span class='line'>      --password=""      Password for HTTP basic auth. Can also be set using LOKI_PASSWORD env var.
</span><span class='line'>      --ca-cert=""       Path to the server Certificate Authority. Can also be set using LOKI_CA_CERT_PATH env var.
</span><span class='line'>      --tls-skip-verify  Server certificate TLS skip verify.
</span><span class='line'>      --cert=""          Path to the client certificate. Can also be set using LOKI_CLIENT_CERT_PATH env var.
</span><span class='line'>      --key=""           Path to the client certificate key. Can also be set using LOKI_CLIENT_KEY_PATH env var.
</span><span class='line'>      --org-id=ORG-ID    org ID header to be substituted for auth
</span><span class='line'>      --limit=30         Limit on number of entries to print.
</span><span class='line'>      --since=1h         Lookback window.
</span><span class='line'>      --from=FROM        Start looking for logs at this absolute time (inclusive)
</span><span class='line'>      --to=TO            Stop looking for logs at this absolute time (exclusive)
</span><span class='line'>      --step=STEP        Query resolution step width
</span><span class='line'>      --forward          Scan forwards through logs.
</span><span class='line'>      --no-labels        Do not print any labels
</span><span class='line'>      --exclude-label=EXCLUDE-LABEL ...
</span><span class='line'>                         Exclude labels given the provided key during output.
</span><span class='line'>      --include-label=INCLUDE-LABEL ...
</span><span class='line'>                         Include labels given the provided key during output.
</span><span class='line'>      --labels-length=0  Set a fixed padding to labels
</span><span class='line'>  -t, --tail             Tail the logs
</span><span class='line'>      --delay-for=0      Delay in tailing by number of seconds to accumulate logs for re-ordering
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Args:
</span><span class='line'>  &lt;query&gt;  eg '{foo="bar",baz=~".*blip"} |~ ".*error.*"'</span></code></pre></td></tr></table></div></figure>


<h2>Thank you</h2>

<p>I hope this was useful</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Hugo Blog With the Kiera Theme]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/06/14/setup-a-hugo-blog-with-the-kiera-theme/"/>
    <updated>2020-06-14T15:23:51+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/06/14/setup-a-hugo-blog-with-the-kiera-theme</id>
    <content type="html"><![CDATA[<p><img src="https://img.sysadmins.co.za/wngib2.png" alt="hugo-blog-kiera-theme" /></p>

<p>In this tutorial we will setup a Hugo Blog with the Kiera theme on Linux and will be using Ubuntu for this demonstration, but since Hugo runs on Go, you can run this on Windows, Linux or Mac.</p>

<h2>Dependencies</h2>

<p>We require git to download the theme from github, so first update your package managers indexes, and install git:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update && apt install git -y</span></code></pre></td></tr></table></div></figure>


<p>Install golang (optional):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ VERSION=1.14.4
</span><span class='line'>$ wget "https://dl.google.com/go/go${VERSION}.linux-amd64.tar.gz"
</span><span class='line'>$ tar -xf go$VERSION.linux-amd64.tar.gz -C /usr/local
</span><span class='line'>$ echo 'export HUGO_HOME=/usr/local/hugo' &gt;&gt; ~/.profile
</span><span class='line'>$ echo 'export PATH=$PATH:$HUGO_HOME/bin' &gt;&gt; ~/.profile</span></code></pre></td></tr></table></div></figure>


<p>When we source our profile, we sound be able to get the go version:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ source ~/.profile
</span><span class='line'>$ go version
</span><span class='line'>go version go1.14.4 linux/amd64</span></code></pre></td></tr></table></div></figure>


<p>Now to install Hugo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p /usr/local/hugo/bin
</span><span class='line'>$ wget https://github.com/gohugoio/hugo/releases/download/v0.72.0/hugo_0.72.0_Linux-64bit.tar.gz
</span><span class='line'>$ tar -xf hugo_0.72.0_Linux-64bit.tar.gz -C /usr/local/hugo/bin
</span><span class='line'>$ echo 'export HUGO_HOME=/usr/local/hugo' &gt;&gt; ~/.profile
</span><span class='line'>$ echo 'export PATH=$PATH:$HUGO_HOME/bin' &gt;&gt; ~/.profile</span></code></pre></td></tr></table></div></figure>


<p>After sourcing the profile we should see the hugo version:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ source ~/.profile
</span><span class='line'>$ hugo version
</span><span class='line'>Hugo Static Site Generator v0.72.0-8A7EF3CF linux/amd64 BuildDate: 2020-05-31T12:07:45Z</span></code></pre></td></tr></table></div></figure>


<h2>Create the Hugo Workspace</h2>

<p>Create the directory where we will host our blogs and change into that directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p ~/websites 
</span><span class='line'>$ cd ~/websites</span></code></pre></td></tr></table></div></figure>


<p>Create your site with hugo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hugo new site awesome-blog
</span><span class='line'>Congratulations! Your new Hugo site is created in /home/ubuntu/websites/awesome-blog.
</span><span class='line'>Visit https://gohugo.io/ for quickstart guide and full documentation.</span></code></pre></td></tr></table></div></figure>


<p>Change into the directory that was created:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd awesome-blog/</span></code></pre></td></tr></table></div></figure>


<h2>Themes</h2>

<p>Hugo has a <a href="https://themes.gohugo.io/">extensive list of themes</a>, but for this demonstration we will use <a href="https://themes.gohugo.io/hugo-kiera/">kiera</a>.</p>

<p>Download the theme to the themes directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/avianto/hugo-kiera themes/kiera</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s run the server and see how it looks like out of the box:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hugo server --theme=kiera --bind=0.0.0.0 --environment development</span></code></pre></td></tr></table></div></figure>


<p>By default hugo uses the port 1313, so accessing Hugo should look like this:</p>

<p><img src="https://img.sysadmins.co.za/iwqtmt.png" alt="" /></p>

<h2>Customize Hugo</h2>

<p>So let&rsquo;s customize Hugo a bit by adding some content such as a navbar and social icons:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat ./config.yml
</span><span class='line'>baseurl = "http://192.168.64.17/"
</span><span class='line'>title = "My Hugo Blog"
</span><span class='line'>copyright = "Copyright &copy; 2020 - Ruan Bekker"
</span><span class='line'>canonifyurls = true
</span><span class='line'>theme = "kiera"
</span><span class='line'>
</span><span class='line'>paginate = 3
</span><span class='line'>
</span><span class='line'>summaryLength = 30
</span><span class='line'>enableEmoji = true
</span><span class='line'>pygmentsCodeFences = true
</span><span class='line'>
</span><span class='line'>[author]
</span><span class='line'>    name = "Ruan Bekker"
</span><span class='line'>    github = "ruanbekker"
</span><span class='line'>    gitlab = "rbekker87"
</span><span class='line'>    linkedin = "ruanbekker"
</span><span class='line'>    facebook = ""
</span><span class='line'>    twitter = "ruanbekker"
</span><span class='line'>    instagram = ""
</span><span class='line'>
</span><span class='line'>[params]
</span><span class='line'>    tagline = "A Hugo theme for creative and technical writing"
</span><span class='line'>
</span><span class='line'>[menu]
</span><span class='line'>
</span><span class='line'>  [[menu.main]]
</span><span class='line'>    identifier = "about"
</span><span class='line'>    name = "about hugo"
</span><span class='line'>    pre = "&lt;i class='fa fa-heart'&gt;&lt;/i&gt;"
</span><span class='line'>    url = "/about/"
</span><span class='line'>    weight = -110
</span><span class='line'>
</span><span class='line'>  [[menu.main]]
</span><span class='line'>    name = "getting started"
</span><span class='line'>    post = "&lt;span class='alert'&gt;New!&lt;/span&gt;"
</span><span class='line'>    pre = "&lt;i class='fa fa-road'&gt;&lt;/i&gt;"
</span><span class='line'>    url = "/getting-started/"
</span><span class='line'>    weight = -100</span></code></pre></td></tr></table></div></figure>


<p>After config has been applied to <code>./config.yml</code> and we start our server up again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hugo server --theme=kiera --bind=0.0.0.0 --environment development</span></code></pre></td></tr></table></div></figure>


<p>We should see this:</p>

<p><img src="https://img.sysadmins.co.za/3dw9e9.png" alt="" /></p>

<h2>Create your First Post</h2>

<p>Creating the first post:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hugo new posts/my-first-post.md
</span><span class='line'>/home/ubuntu/websites/awesome-blog/content/posts/my-first-post.md created</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s add some sample data to our markdown file that hugo created:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+++
</span><span class='line'>title = "My First Post"
</span><span class='line'>date = 2020-06-14T15:47:17+02:00
</span><span class='line'>draft = false
</span><span class='line'>tags = ["hugo", "kiera"]
</span><span class='line'>categories = ["hugo-blog"]
</span><span class='line'>+++
</span><span class='line'>
</span><span class='line'>-&gt; markdown content here &lt;-</span></code></pre></td></tr></table></div></figure>


<p>When starting the server up again and viewing the home page:</p>

<p><img src="https://img.sysadmins.co.za/srklwj.png" alt="hugo-blog-with-home-page" /></p>

<p>And selecting the post:</p>

<p><img src="https://img.sysadmins.co.za/v95p79.png" alt="" /></p>

<p>Code snippets:</p>

<p><img src="https://img.sysadmins.co.za/0xufiy.png" alt="code" /></p>

<p>Tables, lists and images:</p>

<p><img src="https://img.sysadmins.co.za/c317ij.png" alt="hugo-blog" /></p>

<h2>Creating Pages</h2>

<p>For the pages section (about, getting-started), we first create the directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir content/getting-started</span></code></pre></td></tr></table></div></figure>


<p>Then create the page under the directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hugo new content/getting-started/index.md
</span><span class='line'>content/getting-started/index.md created</span></code></pre></td></tr></table></div></figure>


<p>The content:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat content/getting-started/index.md
</span><span class='line'>---
</span><span class='line'>title: "Getting Started"
</span><span class='line'>date: 2020-06-14T16:11:07+02:00
</span><span class='line'>draft: false
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'>This is a getting started page</span></code></pre></td></tr></table></div></figure>


<p>When we start up our server again and select the &ldquo;getting-started&rdquo; from the navbar on our home page:</p>

<p><img src="https://img.sysadmins.co.za/rod8eo.png" alt="getting-started-page" /></p>

<h2>Production Mode</h2>

<p>You can set the flags in your main config as well, but running the server in production mode:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hugo server \
</span><span class='line'>  --baseURL "http://192.168.64.17/" \
</span><span class='line'>  --themesDir=themes --theme=kiera \
</span><span class='line'>  --bind=0.0.0.0 --port=1313 --appendPort=true \
</span><span class='line'>  --buildDrafts --watch --environment production</span></code></pre></td></tr></table></div></figure>


<h2>Thanks</h2>

<p>Thanks for reading, feel free to reach out to me on <a href="https://twitter.com/ruanbekker">@ruanbekker</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using ProxyJump With SSH for VMs With No Public IPs]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/06/13/using-proxyjump-with-ssh-for-vms-with-no-public-ips/"/>
    <updated>2020-06-13T20:06:35+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/06/13/using-proxyjump-with-ssh-for-vms-with-no-public-ips</id>
    <content type="html"><![CDATA[<p><img src="https://img.sysadmins.co.za/wngib2.png" alt="ssh-proxy-jump" /></p>

<p>I have a dedicated server with LXD installed where I have a bunch of system containers running to host a lot of my playground services, and to access the operating system of those lxc containers, I need to SSH to the LXD host, then exec or ssh into that LXC container.</p>

<p>This became tedious and wanted a way to directly ssh to them, as they don&rsquo;t have public ip addresses, it&rsquo;s not possible but found its possible to access them using proxyjump.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[you] -&gt; [hypervisor] -&gt; [vm on hypervisor]</span></code></pre></td></tr></table></div></figure>


<p>First step is to create our ssh key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh-keygen -t rsa</span></code></pre></td></tr></table></div></figure>


<p>Add the created public key (<code>~/.ssh/id_rsa.pub</code>) on the hypervisor and the target vm&rsquo;s <code>~/.ssh/authorized_key</code> files.</p>

<p>Then create the SSH Config on your local workstation (<code>~/.ssh/config</code>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Host *
</span><span class='line'>  StrictHostKeyChecking no
</span><span class='line'>  UserKnownHostsFile=/dev/null
</span><span class='line'>
</span><span class='line'>Host hypervisor
</span><span class='line'>  Hostname hv.domain.com
</span><span class='line'>  User myuser
</span><span class='line'>  IdentityFile ~/.ssh/id_rsa
</span><span class='line'>
</span><span class='line'>Host ctr1
</span><span class='line'>  Hostname 10.37.117.132
</span><span class='line'>  User root
</span><span class='line'>  IdentityFile ~/.ssh/id_rsa
</span><span class='line'>  ProxyJump hypervisor</span></code></pre></td></tr></table></div></figure>


<p>Now accessing our lxc container ctr1, is possible by doing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh ctr1
</span><span class='line'>Warning: Permanently added 'x,x' (ECDSA) to the list of known hosts.
</span><span class='line'>Warning: Permanently added '10.37.117.132' (ECDSA) to the list of known hosts.
</span><span class='line'>root@ctr1~ $</span></code></pre></td></tr></table></div></figure>


<p>Thank you for reading</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using a SSH Reverse Tunnel to Access Nodes on Private Ranges]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/06/13/using-a-ssh-reverse-tunnel-to-access-nodes-on-private-ranges/"/>
    <updated>2020-06-13T19:59:27+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/06/13/using-a-ssh-reverse-tunnel-to-access-nodes-on-private-ranges</id>
    <content type="html"><![CDATA[<p><img src="https://img.sysadmins.co.za/wngib2.png" alt="ssh-tunneling" /></p>

<p>Personal utility (actually just a command) that I use to reach my Raspberry Pi Nodes that has no direct route via the Internet</p>

<h2>Other Projects</h2>

<p>There&rsquo;s a lot of other tools out there that&rsquo;s already solving this issue, such as <a href="https://inlets.dev">inlets</a>, but I wanted my own, so that I can extend features to it as it pleases me.</p>

<h2>Overview</h2>

<p>This is more ore less how it looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[VPS] &lt;-- Has a Public IP
</span><span class='line'> |
</span><span class='line'> |
</span><span class='line'> [HOME NETWORK] &lt;-- Dynamic IP
</span><span class='line'>   |
</span><span class='line'>   |
</span><span class='line'> [rpi-01:22], [rpi-02:22] &lt;-- Private IPs</span></code></pre></td></tr></table></div></figure>


<ul>
<li>SSH Tunnel is setup from the Raspberry Pi Nodes</li>
<li>Each Raspberry Pi sets up a unique port on the VPS for the tunnel to traverse to the Rpi on port 22</li>
<li>To reach Rpi-01, you hop onto the VPS and ssh to localhost port 2201</li>
<li>To reach Rpi-02, you hop onto the VPS and ssh to localhost port 2202, etc</li>
</ul>


<h2>Progress</h2>

<p>The tool will still be built, but using ssh it&rsquo;s quite easy</p>

<h2>Usage</h2>

<p>Setup the SSH Reverse Tunnel from rpi-01:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -i ~/.ssh/bastion.pem \
</span><span class='line'>  -o StrictHostKeyChecking=no \
</span><span class='line'>  -o UserKnownHostsFile=/dev/null \
</span><span class='line'>  -o ServerAliveInterval=60 \
</span><span class='line'>  -N -R 2201:localhost:22 \
</span><span class='line'>  -p 22 ruan@bastion-9239.domain.cloud</span></code></pre></td></tr></table></div></figure>


<p>Setup the SSH Reverse Tunnel from rpi-02:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -i ~/.ssh/bastion.pem \
</span><span class='line'>  -o StrictHostKeyChecking=no \
</span><span class='line'>  -o UserKnownHostsFile=/dev/null \
</span><span class='line'>  -o ServerAliveInterval=60 \
</span><span class='line'>  -N -R 2202:localhost:22 \
</span><span class='line'>  -p 22 ruan@bastion-9239.domain.cloud</span></code></pre></td></tr></table></div></figure>


<p>On the VPS, we can see that we have port 2021 and 2022 listening:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ netstat -tulpn
</span><span class='line'>Active Internet connections (only servers)
</span><span class='line'>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
</span><span class='line'>tcp        0      0 127.0.0.1:2201          0.0.0.0:*               LISTEN      -
</span><span class='line'>tcp        0      0 127.0.0.1:2202          0.0.0.0:*               LISTEN      -</span></code></pre></td></tr></table></div></figure>


<p>To connect to rpi-01, we ssh to localhost on port 2201, from the VPS:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -p 2201 pi@localhost
</span><span class='line'>pi@rpi-01:~ $</span></code></pre></td></tr></table></div></figure>


<p>To connect to rpi-02, we ssh to localhost on port 2202 from the VPS:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -p 2202 pi@localhost
</span><span class='line'>pi@rpi-02:~ $</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get the Top 10 Items on Hackernews in Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/06/13/get-the-top-10-items-on-hackernews-in-python/"/>
    <updated>2020-06-13T19:53:20+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/06/13/get-the-top-10-items-on-hackernews-in-python</id>
    <content type="html"><![CDATA[<p>This is a quick post on how to use python to get the 10 latest items from hacker<a href="news:">news:</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import requests
</span><span class='line'>import json
</span><span class='line'>
</span><span class='line'>def get_top_ten():
</span><span class='line'>    ids = requests.get('https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty').json()[0:10]
</span><span class='line'>    for id in ids:
</span><span class='line'>        postresponse = requests.get('https://hacker-news.firebaseio.com/v0/item/{postid}.json?print=pretty'.format(postid=id)).json()
</span><span class='line'>        formatted = {"title": postresponse["title"], "type": postresponse["type"], "url": postresponse["url"], "by": postresponse["by"]}
</span><span class='line'>        print(json.dumps(formatted, indent=2))</span></code></pre></td></tr></table></div></figure>


<p>When running it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; get_top_ten()
</span><span class='line'>..
</span><span class='line'>{
</span><span class='line'>  "title": "Play Counter-Strike 1.6 in your browser",
</span><span class='line'>  "type": "story",
</span><span class='line'>  "url": "http://cs-online.club",
</span><span class='line'>  "by": "m0ck"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improve MySQL Write Performance Using Batch Writes]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/06/13/improve-mysql-write-performance-using-batch-writes/"/>
    <updated>2020-06-13T19:31:32+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/06/13/improve-mysql-write-performance-using-batch-writes</id>
    <content type="html"><![CDATA[<p><img src="https://img.sysadmins.co.za/wngib2.png" alt="mysql-python-performance" /></p>

<p>I am no DBA, but I got curious when I noticed sluggish write performance on a mysql database, and I remembered somewhere that you should always use batch writes over sequential writes. So I decided to test it out, using a python script and a mysql server.</p>

<h2>What will we be doing</h2>

<p>I wrote a python script that writes 100,000 records to a database and keeps time of how long the writes took, 2 examples which I will compare:</p>

<ul>
<li>One script writing each record to the database</li>
<li>One script writing all the records as batch</li>
</ul>


<h2>Sequential Writes</h2>

<p>It took 48 seconds to write 100,000 records into a database using sequential writes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">userids</span><span class="p">:</span>
</span><span class='line'>    <span class="n">userid</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;uid&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;uid&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;_&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">job</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">job</span><span class="p">)</span>
</span><span class='line'>    <span class="n">age</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span><span class="mi">49</span><span class="p">)</span>
</span><span class='line'>    <span class="n">credit_card_num</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;ccnum&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">status</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">([</span><span class="s">&quot;active&quot;</span><span class="p">,</span> <span class="s">&quot;inactive&quot;</span><span class="p">,</span> <span class="s">&quot;disabled&quot;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;INSERT INTO customers(userid, name, job, age, credit_card_num, status) VALUES(%s, %s, %s, %s, %s, %s)&quot;&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">(</span><span class="n">userid</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">job</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">credit_card_num</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running that shows us this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">python3</span> <span class="n">mysql_seq_writes</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="n">start</span>
</span><span class='line'><span class="n">writing</span> <span class="n">customers</span> <span class="n">to</span> <span class="n">database</span>
</span><span class='line'><span class="n">finish</span>
</span><span class='line'><span class="n">inserted</span> <span class="mi">100000</span> <span class="n">records</span> <span class="ow">in</span> <span class="mi">48</span><span class="n">s</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Batch Writes</h2>

<p>It took 3 seconds to write to write 100,000 records using batch writes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">userids</span><span class="p">:</span>
</span><span class='line'>    <span class="n">userid</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;uid&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;uid&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;_&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">job</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">job</span><span class="p">)</span>
</span><span class='line'>    <span class="n">age</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span><span class="mi">49</span><span class="p">)</span>
</span><span class='line'>    <span class="n">credit_card_num</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;ccnum&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">status</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">([</span><span class="s">&quot;active&quot;</span><span class="p">,</span> <span class="s">&quot;inactive&quot;</span><span class="p">,</span> <span class="s">&quot;disabled&quot;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bunch_users</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">userid</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">job</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">credit_card_num</span><span class="p">,</span> <span class="n">status</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">cur</span><span class="o">.</span><span class="n">executemany</span><span class="p">(</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;INSERT INTO customers(userid, name, job, age, credit_card_num, status) VALUES(%s, %s, %s, %s, %s, %s)&quot;&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">bunch_users</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running that shows us this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">python3</span> <span class="n">mysql_batch_writes</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="n">start</span>
</span><span class='line'><span class="n">writing</span> <span class="n">customers</span> <span class="n">to</span> <span class="n">database</span>
</span><span class='line'><span class="n">finish</span>
</span><span class='line'><span class="n">inserted</span> <span class="mi">100000</span> <span class="n">records</span> <span class="ow">in</span> <span class="mi">3</span><span class="n">s</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Looking at the Scripts</h2>

<p>The script used for sequential writes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">datetime</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">MySQLdb</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span> <span class="k">as</span> <span class="n">dt</span>
</span><span class='line'>
</span><span class='line'><span class="n">host</span><span class="o">=</span><span class="s">&quot;172.18.0.1&quot;</span>
</span><span class='line'><span class="n">user</span><span class="o">=</span><span class="s">&quot;root&quot;</span>
</span><span class='line'><span class="n">password</span><span class="o">=</span><span class="s">&quot;password&quot;</span>
</span><span class='line'><span class="n">dbname</span><span class="o">=</span><span class="s">&quot;shopdb&quot;</span>
</span><span class='line'><span class="n">records</span><span class="o">=</span><span class="mi">100000</span>
</span><span class='line'>
</span><span class='line'><span class="n">db</span> <span class="o">=</span> <span class="n">MySQLdb</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">password</span><span class="p">,</span> <span class="n">dbname</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;ruan&#39;</span><span class="p">,</span> <span class="s">&#39;donovan&#39;</span><span class="p">,</span> <span class="s">&#39;james&#39;</span><span class="p">,</span> <span class="s">&#39;warren&#39;</span><span class="p">,</span> <span class="s">&#39;angie&#39;</span><span class="p">,</span> <span class="s">&#39;nicole&#39;</span><span class="p">,</span> <span class="s">&#39;jenny&#39;</span><span class="p">,</span> <span class="s">&#39;penny&#39;</span><span class="p">,</span> <span class="s">&#39;amber&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">job</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;doctor&#39;</span><span class="p">,</span> <span class="s">&#39;scientist&#39;</span><span class="p">,</span> <span class="s">&#39;teacher&#39;</span><span class="p">,</span> <span class="s">&#39;police officer&#39;</span><span class="p">,</span> <span class="s">&#39;waiter&#39;</span><span class="p">,</span> <span class="s">&#39;banker&#39;</span><span class="p">,</span> <span class="s">&#39;it&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">cur</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span><span class='line'><span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&quot;DROP TABLE IF EXISTS customers&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&quot;CREATE TABLE customers(userid VARCHAR(50), name VARCHAR(50), surname VARCHAR(50), job VARCHAR(50), age INT(2), credit_card_num VARCHAR(50), status VARCHAR(10))&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">bunch_users</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="n">userids</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;start&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">gen_id</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">9999</span><span class="p">))</span><span class="o">.</span><span class="n">zfill</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">gen_user</span><span class="p">(</span><span class="n">username</span><span class="p">):</span>
</span><span class='line'>    <span class="n">ccnum</span> <span class="o">=</span> <span class="s">&#39;{0}-{1}-{2}-{3}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">gen_id</span><span class="p">(),</span> <span class="n">gen_id</span><span class="p">(),</span> <span class="n">gen_id</span><span class="p">(),</span> <span class="n">gen_id</span><span class="p">())</span>
</span><span class='line'>    <span class="n">userid</span> <span class="o">=</span> <span class="n">username</span> <span class="o">+</span> <span class="s">&#39;_&#39;</span> <span class="o">+</span> <span class="n">ccnum</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;-&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">ccnum</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;-&#39;</span><span class="p">)[</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span><span class="s">&quot;uid&quot;</span><span class="p">:</span> <span class="n">userid</span><span class="p">,</span> <span class="s">&quot;ccnum&quot;</span><span class="p">:</span> <span class="n">ccnum</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">records</span><span class="p">):</span>
</span><span class='line'>    <span class="n">userids</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">gen_user</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">names</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;writing customers to database&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">timestart</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s">&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">userids</span><span class="p">:</span>
</span><span class='line'>    <span class="n">userid</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;uid&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;uid&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;_&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">job</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">job</span><span class="p">)</span>
</span><span class='line'>    <span class="n">age</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span><span class="mi">49</span><span class="p">)</span>
</span><span class='line'>    <span class="n">credit_card_num</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;ccnum&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">status</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">([</span><span class="s">&quot;active&quot;</span><span class="p">,</span> <span class="s">&quot;inactive&quot;</span><span class="p">,</span> <span class="s">&quot;disabled&quot;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#bunch_users.append((userid, name, job, age, credit_card_num, status))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;INSERT INTO customers(userid, name, job, age, credit_card_num, status) VALUES(%s, %s, %s, %s, %s, %s)&quot;&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">(</span><span class="n">userid</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">job</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">credit_card_num</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">db</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span><span class='line'><span class="n">db</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="n">timefinish</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s">&quot;</span><span class="p">))</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;finish&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;inserted {} records in {}s&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">records</span><span class="p">,</span> <span class="n">timefinish</span><span class="o">-</span><span class="n">timestart</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The script used for the batch writes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">datetime</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">MySQLdb</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span> <span class="k">as</span> <span class="n">dt</span>
</span><span class='line'>
</span><span class='line'><span class="n">host</span><span class="o">=</span><span class="s">&quot;172.18.0.1&quot;</span>
</span><span class='line'><span class="n">user</span><span class="o">=</span><span class="s">&quot;root&quot;</span>
</span><span class='line'><span class="n">password</span><span class="o">=</span><span class="s">&quot;password&quot;</span>
</span><span class='line'><span class="n">dbname</span><span class="o">=</span><span class="s">&quot;shopdb&quot;</span>
</span><span class='line'><span class="n">records</span><span class="o">=</span><span class="mi">100000</span>
</span><span class='line'>
</span><span class='line'><span class="n">db</span> <span class="o">=</span> <span class="n">MySQLdb</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">password</span><span class="p">,</span> <span class="n">dbname</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;ruan&#39;</span><span class="p">,</span> <span class="s">&#39;donovan&#39;</span><span class="p">,</span> <span class="s">&#39;james&#39;</span><span class="p">,</span> <span class="s">&#39;warren&#39;</span><span class="p">,</span> <span class="s">&#39;angie&#39;</span><span class="p">,</span> <span class="s">&#39;nicole&#39;</span><span class="p">,</span> <span class="s">&#39;jenny&#39;</span><span class="p">,</span> <span class="s">&#39;penny&#39;</span><span class="p">,</span> <span class="s">&#39;amber&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">job</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;doctor&#39;</span><span class="p">,</span> <span class="s">&#39;scientist&#39;</span><span class="p">,</span> <span class="s">&#39;teacher&#39;</span><span class="p">,</span> <span class="s">&#39;police officer&#39;</span><span class="p">,</span> <span class="s">&#39;waiter&#39;</span><span class="p">,</span> <span class="s">&#39;banker&#39;</span><span class="p">,</span> <span class="s">&#39;it&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">cur</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span><span class='line'><span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&quot;DROP TABLE IF EXISTS customers&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&quot;CREATE TABLE customers(userid VARCHAR(50), name VARCHAR(50), surname VARCHAR(50), job VARCHAR(50), age INT(2), credit_card_num VARCHAR(50), status VARCHAR(10))&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">bunch_users</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="n">userids</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;start&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">gen_id</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">9999</span><span class="p">))</span><span class="o">.</span><span class="n">zfill</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">gen_user</span><span class="p">(</span><span class="n">username</span><span class="p">):</span>
</span><span class='line'>    <span class="n">ccnum</span> <span class="o">=</span> <span class="s">&#39;{0}-{1}-{2}-{3}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">gen_id</span><span class="p">(),</span> <span class="n">gen_id</span><span class="p">(),</span> <span class="n">gen_id</span><span class="p">(),</span> <span class="n">gen_id</span><span class="p">())</span>
</span><span class='line'>    <span class="n">userid</span> <span class="o">=</span> <span class="n">username</span> <span class="o">+</span> <span class="s">&#39;_&#39;</span> <span class="o">+</span> <span class="n">ccnum</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;-&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">ccnum</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;-&#39;</span><span class="p">)[</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span><span class="s">&quot;uid&quot;</span><span class="p">:</span> <span class="n">userid</span><span class="p">,</span> <span class="s">&quot;ccnum&quot;</span><span class="p">:</span> <span class="n">ccnum</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">records</span><span class="p">):</span>
</span><span class='line'>    <span class="n">userids</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">gen_user</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">names</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">userids</span><span class="p">:</span>
</span><span class='line'>    <span class="n">userid</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;uid&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;uid&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;_&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">job</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">job</span><span class="p">)</span>
</span><span class='line'>    <span class="n">age</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span><span class="mi">49</span><span class="p">)</span>
</span><span class='line'>    <span class="n">credit_card_num</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;ccnum&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">status</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">([</span><span class="s">&quot;active&quot;</span><span class="p">,</span> <span class="s">&quot;inactive&quot;</span><span class="p">,</span> <span class="s">&quot;disabled&quot;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bunch_users</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">userid</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">job</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">credit_card_num</span><span class="p">,</span> <span class="n">status</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">timestart</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s">&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;writing customers to database&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">cur</span><span class="o">.</span><span class="n">executemany</span><span class="p">(</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;INSERT INTO customers(userid, name, job, age, credit_card_num, status) VALUES(%s, %s, %s, %s, %s, %s)&quot;&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">bunch_users</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">db</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span><span class='line'><span class="n">db</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="n">timefinish</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s">&quot;</span><span class="p">))</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;finish&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;inserted {} records in {}s&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">records</span><span class="p">,</span> <span class="n">timefinish</span><span class="o">-</span><span class="n">timestart</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Thanks</h2>

<p>Thanks for reading, so this was kind of interesting to see to never do sequential writes but write them in bulk when you have large amount of writes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Increase Performance With Your Ghost Blog on Docker]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/06/08/build-a-ghost-blog-with-nginx-cache-on-docker/"/>
    <updated>2020-06-08T23:28:07+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/06/08/build-a-ghost-blog-with-nginx-cache-on-docker</id>
    <content type="html"><![CDATA[<p><img src="https://img.sysadmins.co.za/wngib2.png" alt="nginx-blog-ghost-caching" /></p>

<p>Nginx Caching + Ghost == Great Performance.</p>

<p>In this post we will build a nginx reverse proxy with caching enabled for our static content such as images, which will be our frontend and therefore we will have port 80 exposed, and run our ghost blog as our backend, which we will proxy traffic through from our nginx container.</p>

<h2>But why would you want caching?</h2>

<p>Returning data from memory is a lot faster than returning data from disk, and in this case where a request is being made against nginx, then it proxy passes the request to ghost, gets the data that you requested and returns the data to the client.</p>

<p>So for items that rarely changes like images, we can benefit from caching, so the images can be returned from the nginx service, where the first request will be made to ghost and then it will be loaded into nginx cache, so then the next time when you request the same image it will be returned from cache instead of making that same request to ghost again.</p>

<h2>Caching Info</h2>

<p>For this demonstration once we define the size of our chache which will be 500MB and we specify that if an object has not been accessed for 24 hours, we can expire the object from the cache.</p>

<h2>Nginx</h2>

<p>We will build our nginx container by adding our custom nginx config to our dockerfile.</p>

<p>Our <code>Dockerfile</code> will look like the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ROM nginx:stable
</span><span class='line'>ADD nginx.conf /etc/nginx/nginx.conf</span></code></pre></td></tr></table></div></figure>


<p>Our <code>nginx.conf</code> configuration file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>events {
</span><span class='line'>  worker_connections  1024;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>http {
</span><span class='line'>  default_type       text/html;
</span><span class='line'>  access_log         /dev/stdout;
</span><span class='line'>  sendfile           on;
</span><span class='line'>  keepalive_timeout  65;
</span><span class='line'>
</span><span class='line'>  #proxy_cache_path /tmp/ghostcache levels=1:2 keys_zone=ghostcache:500m max_size=2g inactive=30d;
</span><span class='line'>  proxy_cache_path /tmp/ghostcache levels=1:2 keys_zone=ghostcache:60m max_size=500m inactive=24h;
</span><span class='line'>  proxy_cache_key "$scheme$request_method$host$request_uri";
</span><span class='line'>  proxy_cache_methods GET HEAD;
</span><span class='line'>
</span><span class='line'>  server {
</span><span class='line'>    listen 80;
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>        proxy_set_header X-Forwarded-Proto $scheme;
</span><span class='line'>        proxy_set_header X-Real-IP $remote_addr;
</span><span class='line'>        proxy_set_header Host $http_host;
</span><span class='line'>        proxy_pass http://ghost:2368;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    location ~* \.(?:css|js|ico)$ {
</span><span class='line'>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>        proxy_set_header X-Forwarded-Proto $scheme;
</span><span class='line'>        proxy_set_header X-Real-IP $remote_addr;
</span><span class='line'>        proxy_set_header Host $http_host;
</span><span class='line'>        proxy_pass http://ghost:2368;
</span><span class='line'>        access_log off;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    location ^~ /content/images/ {
</span><span class='line'>        proxy_cache ghostcache;
</span><span class='line'>        proxy_cache_valid 60m;
</span><span class='line'>        proxy_cache_valid 404 1m;
</span><span class='line'>        proxy_ignore_headers Set-Cookie;
</span><span class='line'>        proxy_hide_header Set-Cookie;
</span><span class='line'>        proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
</span><span class='line'>        proxy_ignore_headers Cache-Control;
</span><span class='line'>        add_header X-Cache-Status $upstream_cache_status;
</span><span class='line'>
</span><span class='line'>        proxy_set_header Host $http_host;
</span><span class='line'>        proxy_set_header X-Real-IP $remote_addr;
</span><span class='line'>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>        proxy_set_header X-Forwarded-Proto $scheme;
</span><span class='line'>        proxy_pass http://ghost:2368;
</span><span class='line'>        access_log off;
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Then our <code>docker-compose.yml</code> where we will add our nginx and ghost container to run together:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>version: '3.4'
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  ghost:
</span><span class='line'>    image: ghost:3.15.1
</span><span class='line'>    container_name: 'ghost'
</span><span class='line'>    environment:
</span><span class='line'>      - NODE_ENV=production
</span><span class='line'>      - url=http://localhost:80
</span><span class='line'>    networks:
</span><span class='line'>      - ghost
</span><span class='line'>    volumes:
</span><span class='line'>      - ghost_content:/var/lib/ghost/content/data
</span><span class='line'>
</span><span class='line'>  proxy:
</span><span class='line'>    build: .
</span><span class='line'>    container_name: 'proxy'
</span><span class='line'>    depends_on:
</span><span class='line'>      - ghost
</span><span class='line'>    ports:
</span><span class='line'>      - 80:80
</span><span class='line'>    networks:
</span><span class='line'>      - ghost
</span><span class='line'>
</span><span class='line'>networks:
</span><span class='line'>  ghost: {}
</span><span class='line'>
</span><span class='line'>volumes:
</span><span class='line'>  ghost_content: {}</span></code></pre></td></tr></table></div></figure>


<p>To boot our stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose up</span></code></pre></td></tr></table></div></figure>


<h2>Test Caching</h2>

<p>Once your containers are in a running state, open your browsers devloper tools and look at the networking tab, then access your ghost blog on <code>http://localhost:80/</code>, the first time a image is opened you should see the cache shows <code>MISS</code> when you refresh again you should see a <code>HIT</code>, which means that the object is being returned from your cache.</p>
]]></content>
  </entry>
  
</feed>
