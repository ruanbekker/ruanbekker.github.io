<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2020-09-20T16:34:50+00:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup a NFS Server With Docker]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/09/20/setup-a-nfs-server-with-docker/"/>
    <updated>2020-09-20T16:07:09+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/09/20/setup-a-nfs-server-with-docker</id>
    <content type="html"><![CDATA[<p>In this tutorial we will setup a <strong>NFS Server</strong> using <strong>Docker</strong> for our development environment.</p>

<h2>Host Storage Path</h2>

<p>In this example we will be using our host path <code>/data/nfs-storage</code> which will host our storage for our NFS server, which will will mount to the container:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p /data/nfs-storage</span></code></pre></td></tr></table></div></figure>


<h2>NFS Server</h2>

<p>Create the NFS Server with docker:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run -itd --privileged \
</span><span class='line'>  --restart unless-stopped \
</span><span class='line'>  -e SHARED_DIRECTORY=/data \
</span><span class='line'>  -v /data/nfs-storage:/data \
</span><span class='line'>  -p 2049:2049 \
</span><span class='line'>  itsthenetwork/nfs-server-alpine:12</span></code></pre></td></tr></table></div></figure>


<p>We can do the same using docker-compose, for our <code>docker-compose.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>version: "2.1"
</span><span class='line'>services:
</span><span class='line'>  # https://hub.docker.com/r/itsthenetwork/nfs-server-alpine
</span><span class='line'>  nfs:
</span><span class='line'>    image: itsthenetwork/nfs-server-alpine:12
</span><span class='line'>    container_name: nfs
</span><span class='line'>    restart: unless-stopped
</span><span class='line'>    privileged: true
</span><span class='line'>    environment:
</span><span class='line'>      - SHARED_DIRECTORY=/data
</span><span class='line'>    volumes:
</span><span class='line'>      - /data/nfs-storage:/data
</span><span class='line'>    ports:
</span><span class='line'>      - 2049:2049</span></code></pre></td></tr></table></div></figure>


<p>To deploy using docker-compose:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose up -d</span></code></pre></td></tr></table></div></figure>


<h2>NFS Client</h2>

<p>To use a NFS Client to mount this to your filesystem, you can look at <a href="https://blog.ruanbekker.com/blog/2017/12/05/setup-a-nfs-server-on-a-raspberrypi/" rel="nofollow" target="_blank">this blogpost></a></p>

<p>In summary:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt install nfs-client -y
</span><span class='line'>$ sudo mount -v -o vers=4,loud 192.168.0.4:/ /mnt</span></code></pre></td></tr></table></div></figure>


<p>Verify that the mount is showing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ df -h
</span><span class='line'>Filesystem      Size  Used Avail Use% Mounted on
</span><span class='line'>/dev/sda2       109G   53G   51G  52% /
</span><span class='line'>192.168.0.4:/   4.5T  2.2T  2.1T  51% /mnt</span></code></pre></td></tr></table></div></figure>


<p>Now, create a test file on our NFS export:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ touch /mnt/file.txt</span></code></pre></td></tr></table></div></figure>


<p>Verify that the test file is on the local path:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls /data/nfs-storage/
</span><span class='line'>file.txt</span></code></pre></td></tr></table></div></figure>


<p>If you want to load this into other client&rsquo;s <code>/etc/fstab</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>192.168.0.4:/   /mnt   nfs4    _netdev,auto  0  0</span></code></pre></td></tr></table></div></figure>


<h2>NFS Docker Volume Plugin</h2>

<p>You can use a NFS Volume Plugin for Docker or Docker Swarm for persistent container storage.</p>

<p>To use the NFS Volume plugin, we need to download <a href="https://github.com/ContainX/docker-volume-netshare/releases" target="_blank" rel="nofollow">docker-volume-netshare</a> from their github releases page.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://github.com/ContainX/docker-volume-netshare/releases/download/v0.36/docker-volume-netshare_0.36_amd64.deb
</span><span class='line'>$ dpkg -i docker-volume-netshare_0.36_amd64.deb
</span><span class='line'>$ service docker-volume-netshare start</span></code></pre></td></tr></table></div></figure>


<p>Then your <code>docker-compose.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>version: '3.7'
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  mysql:
</span><span class='line'>    image: mariadb:10.1
</span><span class='line'>    networks:
</span><span class='line'>      - private
</span><span class='line'>    environment:
</span><span class='line'>      - MYSQL_ROOT_PASSWORD=${DATABASE_PASSWORD:-admin}
</span><span class='line'>      - MYSQL_DATABASE=testdb
</span><span class='line'>      - MYSQL_USER=${DATABASE_USER:-admin}
</span><span class='line'>      - MYSQL_PASSWORD=${DATABASE_PASSWORD:-admin}
</span><span class='line'>    volumes:
</span><span class='line'>      - mysql_data.vol:/var/lib/mysql
</span><span class='line'>
</span><span class='line'>volumes:
</span><span class='line'>  mysql_data.vol:
</span><span class='line'>    driver: nfs
</span><span class='line'>    driver_opts:
</span><span class='line'>      share: 192.168.69.1:/mysql_data_vol</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>That&rsquo;s it. Thanks for reading, follow me on Twitter and say hi! <a href="https://twitter.com/ruanbekker" rel="nofollow" target="_blank"><strong>@ruanbekker</strong></a></p><p><a href="https://saythanks.io/to/ruan.ru.bekker@gmail.com" rel="nofollow" target="_blank"><img src="https://svgshare.com/i/Pfy.svg" alt="Say Thanks!"></a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using if Statements in Bash to Check if Environment Variables Exist]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/08/14/using-if-statements-in-bash-to-check-if-environment-variables-exist/"/>
    <updated>2020-08-14T11:00:25+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/08/14/using-if-statements-in-bash-to-check-if-environment-variables-exist</id>
    <content type="html"><![CDATA[<p>This is a quick post to demonstrate how to use <strong>if statements</strong> in bash to check if we have the required environment variables in our environment before we continue a script.</p>

<p>Let&rsquo;s say we require <code>FOO</code> and <code>BAR</code> in our environment before we can continue, we can do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="k">${</span><span class="nv">FOO</span><span class="k">}</span> <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> -z <span class="k">${</span><span class="nv">BAR</span><span class="k">}</span> <span class="o">]</span> <span class="p">;</span>
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;required environment variables does not exist&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;required environment variables are set&quot;</span>
</span><span class='line'>    <span class="c"># do things</span>
</span><span class='line'>    <span class="nb">exit </span>0
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now if <code>FOO</code> or <code>BAR</code> is not set in our environment, the script will exit with return code 1.</p>

<p>To test it, when we pass no environment variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>chmod +x ./update.sh
</span><span class='line'><span class="nv">$ </span>./update.sh
</span><span class='line'>required environment variables does not exist
</span></code></pre></td></tr></table></div></figure>


<p>If we only pass one environment variable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ FOO</span><span class="o">=</span><span class="m">1</span> ./update.sh
</span><span class='line'>required environment variables does not exist
</span></code></pre></td></tr></table></div></figure>


<p>And as the result we want, when we pass both required environment variables, we have success:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ FOO</span><span class="o">=</span><span class="m">1</span> <span class="nv">BAR</span><span class="o">=</span><span class="m">2</span> ./update.sh
</span><span class='line'>required environment variables are <span class="nb">set</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started on Logging With Loki Using Docker]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/08/13/getting-started-on-logging-with-loki-using-docker/"/>
    <updated>2020-08-13T13:39:28+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/08/13/getting-started-on-logging-with-loki-using-docker</id>
    <content type="html"><![CDATA[<p>Logging with Loki is AMAZING!</p>

<p>In the past couple of months i&rsquo;ve been working a lot with logging, but more specifically logging with loki. As most of my metrics reside in prometheus, I use grafana quite extensively and logging was always the one that stood out a bit as I pushed my logs to elasticsearch and consumed them from grafana. Which worked pretty well, but the maintenance and resource costs was a bit too much for what I was looking for.</p>

<p>And then grafana released Loki, which is like prometheus, but for logs. And that was just super, exactly what I was looking for. For my use case, I was looking for something that can be consumed by grafana as a presentation layer, central based so I can push all sorts of logs, and want a easy way to grep for logs and a bonus would be to have a cli tool.</p>

<p>And Loki checked all those boxes!</p>

<div class="tenor-gif-embed" data-postid="7644619" data-share-method="host" data-width="100%" data-aspect-ratio="1.1971153846153846"><a href="https://tenor.com/view/oh-yeah-gif-7644619">Oh Yeah Parks And Recreation GIF</a> from <a href="https://tenor.com/search/ohyeah-gifs">Ohyeah GIFs</a></div>


<script type="text/javascript" async src="https://tenor.com/embed.js"></script>


<h2>What can you expect from this blog</h2>

<p>In this post will be a getting started guide to Loki, we will provision Loki, Grafana and Nginx using Docker to get our environment up and running, so that we can push our nginx container logs to the loki datasource, and access the logs via grafana.</p>

<p>We will then generate some logs so that we can show a couple of query examples using the log query language (LogQL) and use the LogCLI to access our logs via cli.</p>

<p>In a <a href="">future post</a>, I will demonstrate how to setup Loki for a non-docker deployment.</p>

<h2>Some useful information about Loki</h2>

<p>Let&rsquo;s first talk about Loki compared with Elasticsearch, as they are not the same:</p>

<ol>
<li>Loki does not index the text of the logs, instead grouping entries into streams and index those with labels</li>
<li>Things like full text search engines tokenizes your text into k/v pairs and gets written to an inverted index, which over time in my opinion gets complex to maintain, expensive to scale, storage retention, etc.</li>
<li>Loki is advertised as easy to scale, affordable to operate as it uses DynamoDB for Indexing and S3 for Storage</li>
<li>When using Loki, you may need to forget what you know and look to see how the problem can be solved differently with parallelization. Loki’s superpower is breaking up queries into small pieces and dispatching them in parallel so that you can query huge amounts of log data in small amounts of time.</li>
</ol>


<p>If we look at the <strong>Loki Log Model</strong>, we can see that the timestamp and the labels are indexed and the content of the logs are not indexed:</p>

<p><img src="https://img.sysadmins.co.za/cpr6n7.png" alt="loki" /></p>

<p>A <strong>log stream</strong> is a stream of log entries with the same exact label set:</p>

<p><img src="https://img.sysadmins.co.za/el6djk.png" alt="loki" /></p>

<p>For the <strong>storage</strong> side, inside each chunk, log entries are sorted by timestamp. Loki only indexes minimum and maximum timestamps of a chunk. Storage options support local storage, AWS S3, Google Cloud Storage and Azure</p>

<p><img src="https://img.sysadmins.co.za/959pjw.png" alt="loki" /></p>

<p>For <strong>chunks and querying</strong>, chunks are filled per stream and they are flushed of a few criterias such as age and size:</p>

<p><img src="https://img.sysadmins.co.za/ekm8cy.png" alt="loki" /></p>

<p>And one of the most important parts are the <strong>labels</strong>, labels define the stream and therefore its very important.</p>

<p>High cardinality is bad for labels, as something like a IP address can reduce your performance a lot, as it will create a stream for every unique IP label.</p>

<p>Static defined labels such as environment, hostnames are good, you can read more up about it <a href="https://grafana.com/blog/2020/04/21/how-labels-in-loki-can-make-log-queries-faster-and-easier/">here</a></p>

<p>Here is a info graphic on how one log line can be split up into 36 streams:</p>

<p><img src="https://img.sysadmins.co.za/g119oq.png" alt="" /></p>

<p>So with that being said, <strong>good labels</strong> will be considered as cluster, job, namespace, environment, etc where as <strong>bad labels</strong> will be things such as userid, ip address, url path, etc</p>

<h2>Selecting logstreams with Loki</h2>

<p>Selecting logstreams, is done by using <strong>label matchers</strong> and <strong>filter expressions</strong>, such as this example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{job="dockerlogs", environment="development"} |= "POST" |~ "196.35.64.+"</span></code></pre></td></tr></table></div></figure>


<p>Label Matchers and Filter Expressions support:</p>

<ul>
<li><code>=</code> Contains string</li>
<li><code>!=</code> Does not contain string</li>
<li><code>=~</code> Matches regular expression</li>
<li><code>!~</code> Does not match regular expression</li>
</ul>


<h2>Supported Clients</h2>

<p>At the moment of writing, loki supports the following log clients:</p>

<ul>
<li>Promtail (tails logs and ships to Loki)</li>
<li>Docker Driver</li>
<li>Fluentd</li>
<li>Fluent Bit</li>
<li>Logstash</li>
</ul>


<p>We will be going into more detail on using promtail in a <a href="">future post</a>, but you can read more up about it <a href="https://github.com/grafana/loki/tree/master/cmd">here</a></p>

<h2>Loki in Action</h2>

<p>Time to get to the fun part, clone my <a href="https://github.com/ruanbekker/loki-docker-nginx-example">github repo</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/ruanbekker/loki-docker-nginx-example
</span><span class='line'>$ cd loki-docker-nginx-example</span></code></pre></td></tr></table></div></figure>


<p>You can inspect the docker-compose.yml:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat docker-compose.yml
</span><span class='line'>version: "3.4"
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  my-nginx-service:
</span><span class='line'>    image: nginx
</span><span class='line'>    container_name: my-nginx-service
</span><span class='line'>    ports:
</span><span class='line'>      - 8000:80
</span><span class='line'>    environment:
</span><span class='line'>      - FOO=bar
</span><span class='line'>    logging:
</span><span class='line'>      driver: loki
</span><span class='line'>      options:
</span><span class='line'>        loki-url: http://localhost:3100/loki/api/v1/push
</span><span class='line'>        loki-external-labels: job=dockerlogs,owner=ruan,environment=development
</span><span class='line'>
</span><span class='line'>  grafana:
</span><span class='line'>    image: grafana/grafana:7.1.1
</span><span class='line'>    volumes:
</span><span class='line'>    - ./config/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
</span><span class='line'>    ports:
</span><span class='line'>    - "3000:3000"
</span><span class='line'>
</span><span class='line'>  loki:
</span><span class='line'>   image: grafana/loki:v1.3.0
</span><span class='line'>   volumes:
</span><span class='line'>     - ./config/loki.yaml:/etc/config/loki.yaml
</span><span class='line'>   entrypoint:
</span><span class='line'>     - /usr/bin/loki
</span><span class='line'>     - -config.file=/etc/config/loki.yaml
</span><span class='line'>   ports:
</span><span class='line'>     - "3100:3100"</span></code></pre></td></tr></table></div></figure>


<p>As you can see loki will be the datasource where we will be pushing our logs to from our nginx container and we are defining our logging section where it should find loki and we are also setting labels to that log stream using <code>loki-external-labels</code>. Then we are using grafana to auto configure the loki datasource from the <code>./config/datasource.yml</code> section so that we can visualize our logs.</p>

<p>If you don&rsquo;t want to define the logging section per container, you can always set the defaults using the <code>/etc/docker/daemon.json</code> by following <a href="https://grafana.com/docs/loki/latest/clients/docker-driver/configuration/#change-the-default-logging-driver">this guide</a></p>

<p>Let&rsquo;s boot up our stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose up</span></code></pre></td></tr></table></div></figure>


<p>After everything is up, you should be able to access nginx by visiting: <code>http://nginx.localdns.xyz:8000/</code>, after you received a response, visit Grafana on <code>http://grafana.localdns.xyz:3000</code> using the username and password: <code>admin/admin</code>.</p>

<p>If you head over to datasources, you should see the loki datasource which was provisioned for you:</p>

<p><img src="https://img.sysadmins.co.za/tyn0ny.png" alt="loki-grafana" /></p>

<p>When you head to the left on explore and you select the loki datasource on <code>http://grafana.localdns.xyz:3000/explore</code> you should see the following:</p>

<p><img src="https://img.sysadmins.co.za/5kp07m.png" alt="loki-grafana" /></p>

<p>You will see that grafana discovers logstreams with the label <code>job</code> as you can see that our <code>job="dockerlogs"</code> can be seen there. We can either click on it, select the log labels from the left and browse the label we want to select or manually enter the query.</p>

<p>I will be using the query manually:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{job="dockerlogs"}</span></code></pre></td></tr></table></div></figure>


<p>So now we will get all the logs that has that label associated and as you can see, we see our request that we made:</p>

<p><img src="https://img.sysadmins.co.za/gra0oe.png" alt="nginx-grafana-loki" /></p>

<p>We can see one error due to the favicon.ico that it could not find, but let&rsquo;s first inspect our first log line:</p>

<p><img src="https://img.sysadmins.co.za/6dbuqn.png" alt="loki" /></p>

<p>Here we can see the labels assigned to that log event, which we can include in our query, like if we had multiple services and different environments, we can use a query like the following to only see logs for a specific service and environment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{job="dockerlogs", environment="development", compose_service="my-nginx-service"}</span></code></pre></td></tr></table></div></figure>


<p>In the example above we used the selectors to select the logs we want to see, now we can use our filter expressions, to &ldquo;grep&rdquo; our logs.</p>

<p>Let&rsquo;s say we want to focus only on one service, and we want to filter for any logs with GET requests, so first we select to service then apply the filter expression:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{compose_service="my-nginx-service"} |= "GET"</span></code></pre></td></tr></table></div></figure>


<p><img src="https://img.sysadmins.co.za/vv609g.png" alt="loki-logs" /></p>

<p>As you can see we can see the ones we were looking for, we can also chain them, so we want to se GET&rsquo;s and errors:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{compose_service="my-nginx-service"} |= "GET" |= "error"</span></code></pre></td></tr></table></div></figure>


<p>And lets say for some reason we only want to see the logs that comes from a 192.168.32 subnet:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{compose_service="my-nginx-service"} |= "GET" |= "error" |~ "192.168.32."</span></code></pre></td></tr></table></div></figure>


<p>But we dont want to see requests from &ldquo;nginx.localdns.xyz&rdquo;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{compose_service="my-nginx-service"} |= "GET" |= "error" |~ "192.168.32." != "nginx.localdns.xyz"</span></code></pre></td></tr></table></div></figure>


<p>Make two extra get requests to &ldquo;foo.localdns.xyz:8000&rdquo; and &ldquo;bar.localdns.xyz:8000&rdquo; and then we change the query to say that we only want to see errors and hostnames coming from the 2 requests that we made:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{compose_service="my-nginx-service"} |= "error" |~ "(foo|bar).localdns.xyz"</span></code></pre></td></tr></table></div></figure>


<p>If we expand one of the log lines, we can do a ad-hoc analysis to see the percentage of logs by source for example:</p>

<p><img src="https://img.sysadmins.co.za/9ctz6d.png" alt="loki-logs" /></p>

<h2>LogCLI</h2>

<p>If you prefer the cli to query logs, logcli is the command line client for loki, allows you to query logs from your terminal and has clients for linux, mac and windows.</p>

<p>Check the releases for the latest version:</p>

<ul>
<li><a href="https://github.com/grafana/loki/releases">https://github.com/grafana/loki/releases</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://github.com/grafana/loki/releases/download/v1.5.0/logcli-darwin-amd64.zip
</span><span class='line'>$ unzip logcli-darwin-amd64.zip
</span><span class='line'>$ mv logcli-darwin-amd64 /usr/local/bin/logcli</span></code></pre></td></tr></table></div></figure>


<p>Set your environment details, in our case we dont have a username and password for loki:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ #export LOKI_USERNAME=${MYUSER}
</span><span class='line'>$ #export LOKI_PASSWORD=${MYPASS}
</span><span class='line'>$ export LOKI_ADDR=http://localhost:3001</span></code></pre></td></tr></table></div></figure>


<p>We can view all our labels, let’s view all the job labels:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ logcli labels job
</span><span class='line'>http://localhost:3001/loki/api/v1/label/job/values
</span><span class='line'>dockerlogs</span></code></pre></td></tr></table></div></figure>


<p>Let’s look at family apps nginx logs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ logcli query '{job="dockerlogs"}'
</span><span class='line'>http://localhost:3001/loki/api/v1/query_range?direction=BACKWARD&end=1587727924005496000&limit=30&query=%7Bjob%3D%22dockerlogs%22%2C&start=1587724324005496000
</span><span class='line'>Common labels: {environment="development", owner="ruan", compose_service="my-nginx-service", job="dockerlogs", host="docker-desktop", compose_project="loki-nginx-docker"}
</span><span class='line'>2020-08-13 17:08:40 192.168.32.1 - - [13/Aug/2020:15:08:40 +0000] "GET / HTTP/1.1" 200 612 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:79.0) Gecko/20100101 Firefox/79.0" "-"</span></code></pre></td></tr></table></div></figure>


<p>We can also pipe that output to grep, awk, etc:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ logcli query '{job="dockerlogs"}' | grep GREP | awk -F 'X' '{print  $1}'</span></code></pre></td></tr></table></div></figure>


<p>Supported arguments:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ logcli query --help
</span><span class='line'>usage: logcli query [&lt;flags&gt;] &lt;query&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Run a LogQL query.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Flags:
</span><span class='line'>      --help             Show context-sensitive help (also try --help-long and --help-man).
</span><span class='line'>      --version          Show application version.
</span><span class='line'>  -q, --quiet            suppress everything but log lines
</span><span class='line'>      --stats            show query statistics
</span><span class='line'>  -o, --output=default   specify output mode [default, raw, jsonl]
</span><span class='line'>  -z, --timezone=Local   Specify the timezone to use when formatting output timestamps [Local, UTC]
</span><span class='line'>      --addr="http://localhost:3100"
</span><span class='line'>                         Server address. Can also be set using LOKI_ADDR env var.
</span><span class='line'>      --username=""      Username for HTTP basic auth. Can also be set using LOKI_USERNAME env var.
</span><span class='line'>      --password=""      Password for HTTP basic auth. Can also be set using LOKI_PASSWORD env var.
</span><span class='line'>      --ca-cert=""       Path to the server Certificate Authority. Can also be set using LOKI_CA_CERT_PATH env var.
</span><span class='line'>      --tls-skip-verify  Server certificate TLS skip verify.
</span><span class='line'>      --cert=""          Path to the client certificate. Can also be set using LOKI_CLIENT_CERT_PATH env var.
</span><span class='line'>      --key=""           Path to the client certificate key. Can also be set using LOKI_CLIENT_KEY_PATH env var.
</span><span class='line'>      --org-id=ORG-ID    org ID header to be substituted for auth
</span><span class='line'>      --limit=30         Limit on number of entries to print.
</span><span class='line'>      --since=1h         Lookback window.
</span><span class='line'>      --from=FROM        Start looking for logs at this absolute time (inclusive)
</span><span class='line'>      --to=TO            Stop looking for logs at this absolute time (exclusive)
</span><span class='line'>      --step=STEP        Query resolution step width
</span><span class='line'>      --forward          Scan forwards through logs.
</span><span class='line'>      --no-labels        Do not print any labels
</span><span class='line'>      --exclude-label=EXCLUDE-LABEL ...
</span><span class='line'>                         Exclude labels given the provided key during output.
</span><span class='line'>      --include-label=INCLUDE-LABEL ...
</span><span class='line'>                         Include labels given the provided key during output.
</span><span class='line'>      --labels-length=0  Set a fixed padding to labels
</span><span class='line'>  -t, --tail             Tail the logs
</span><span class='line'>      --delay-for=0      Delay in tailing by number of seconds to accumulate logs for re-ordering
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Args:
</span><span class='line'>  &lt;query&gt;  eg '{foo="bar",baz=~".*blip"} |~ ".*error.*"'</span></code></pre></td></tr></table></div></figure>


<h2>Thank you</h2>

<p>I hope this was useful</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Hugo Blog With the Kiera Theme]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/06/14/setup-a-hugo-blog-with-the-kiera-theme/"/>
    <updated>2020-06-14T15:23:51+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/06/14/setup-a-hugo-blog-with-the-kiera-theme</id>
    <content type="html"><![CDATA[<p><img src="https://img.sysadmins.co.za/wngib2.png" alt="hugo-blog-kiera-theme" /></p>

<p>In this tutorial we will setup a Hugo Blog with the Kiera theme on Linux and will be using Ubuntu for this demonstration, but since Hugo runs on Go, you can run this on Windows, Linux or Mac.</p>

<h2>Dependencies</h2>

<p>We require git to download the theme from github, so first update your package managers indexes, and install git:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update && apt install git -y</span></code></pre></td></tr></table></div></figure>


<p>Install golang (optional):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ VERSION=1.14.4
</span><span class='line'>$ wget "https://dl.google.com/go/go${VERSION}.linux-amd64.tar.gz"
</span><span class='line'>$ tar -xf go$VERSION.linux-amd64.tar.gz -C /usr/local
</span><span class='line'>$ echo 'export HUGO_HOME=/usr/local/hugo' &gt;&gt; ~/.profile
</span><span class='line'>$ echo 'export PATH=$PATH:$HUGO_HOME/bin' &gt;&gt; ~/.profile</span></code></pre></td></tr></table></div></figure>


<p>When we source our profile, we sound be able to get the go version:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ source ~/.profile
</span><span class='line'>$ go version
</span><span class='line'>go version go1.14.4 linux/amd64</span></code></pre></td></tr></table></div></figure>


<p>Now to install Hugo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p /usr/local/hugo/bin
</span><span class='line'>$ wget https://github.com/gohugoio/hugo/releases/download/v0.72.0/hugo_0.72.0_Linux-64bit.tar.gz
</span><span class='line'>$ tar -xf hugo_0.72.0_Linux-64bit.tar.gz -C /usr/local/hugo/bin
</span><span class='line'>$ echo 'export HUGO_HOME=/usr/local/hugo' &gt;&gt; ~/.profile
</span><span class='line'>$ echo 'export PATH=$PATH:$HUGO_HOME/bin' &gt;&gt; ~/.profile</span></code></pre></td></tr></table></div></figure>


<p>After sourcing the profile we should see the hugo version:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ source ~/.profile
</span><span class='line'>$ hugo version
</span><span class='line'>Hugo Static Site Generator v0.72.0-8A7EF3CF linux/amd64 BuildDate: 2020-05-31T12:07:45Z</span></code></pre></td></tr></table></div></figure>


<h2>Create the Hugo Workspace</h2>

<p>Create the directory where we will host our blogs and change into that directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p ~/websites 
</span><span class='line'>$ cd ~/websites</span></code></pre></td></tr></table></div></figure>


<p>Create your site with hugo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hugo new site awesome-blog
</span><span class='line'>Congratulations! Your new Hugo site is created in /home/ubuntu/websites/awesome-blog.
</span><span class='line'>Visit https://gohugo.io/ for quickstart guide and full documentation.</span></code></pre></td></tr></table></div></figure>


<p>Change into the directory that was created:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd awesome-blog/</span></code></pre></td></tr></table></div></figure>


<h2>Themes</h2>

<p>Hugo has a <a href="https://themes.gohugo.io/">extensive list of themes</a>, but for this demonstration we will use <a href="https://themes.gohugo.io/hugo-kiera/">kiera</a>.</p>

<p>Download the theme to the themes directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/avianto/hugo-kiera themes/kiera</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s run the server and see how it looks like out of the box:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hugo server --theme=kiera --bind=0.0.0.0 --environment development</span></code></pre></td></tr></table></div></figure>


<p>By default hugo uses the port 1313, so accessing Hugo should look like this:</p>

<p><img src="https://img.sysadmins.co.za/iwqtmt.png" alt="" /></p>

<h2>Customize Hugo</h2>

<p>So let&rsquo;s customize Hugo a bit by adding some content such as a navbar and social icons:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat ./config.yml
</span><span class='line'>baseurl = "http://192.168.64.17/"
</span><span class='line'>title = "My Hugo Blog"
</span><span class='line'>copyright = "Copyright &copy; 2020 - Ruan Bekker"
</span><span class='line'>canonifyurls = true
</span><span class='line'>theme = "kiera"
</span><span class='line'>
</span><span class='line'>paginate = 3
</span><span class='line'>
</span><span class='line'>summaryLength = 30
</span><span class='line'>enableEmoji = true
</span><span class='line'>pygmentsCodeFences = true
</span><span class='line'>
</span><span class='line'>[author]
</span><span class='line'>    name = "Ruan Bekker"
</span><span class='line'>    github = "ruanbekker"
</span><span class='line'>    gitlab = "rbekker87"
</span><span class='line'>    linkedin = "ruanbekker"
</span><span class='line'>    facebook = ""
</span><span class='line'>    twitter = "ruanbekker"
</span><span class='line'>    instagram = ""
</span><span class='line'>
</span><span class='line'>[params]
</span><span class='line'>    tagline = "A Hugo theme for creative and technical writing"
</span><span class='line'>
</span><span class='line'>[menu]
</span><span class='line'>
</span><span class='line'>  [[menu.main]]
</span><span class='line'>    identifier = "about"
</span><span class='line'>    name = "about hugo"
</span><span class='line'>    pre = "&lt;i class='fa fa-heart'&gt;&lt;/i&gt;"
</span><span class='line'>    url = "/about/"
</span><span class='line'>    weight = -110
</span><span class='line'>
</span><span class='line'>  [[menu.main]]
</span><span class='line'>    name = "getting started"
</span><span class='line'>    post = "&lt;span class='alert'&gt;New!&lt;/span&gt;"
</span><span class='line'>    pre = "&lt;i class='fa fa-road'&gt;&lt;/i&gt;"
</span><span class='line'>    url = "/getting-started/"
</span><span class='line'>    weight = -100</span></code></pre></td></tr></table></div></figure>


<p>After config has been applied to <code>./config.yml</code> and we start our server up again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hugo server --theme=kiera --bind=0.0.0.0 --environment development</span></code></pre></td></tr></table></div></figure>


<p>We should see this:</p>

<p><img src="https://img.sysadmins.co.za/3dw9e9.png" alt="" /></p>

<h2>Create your First Post</h2>

<p>Creating the first post:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hugo new posts/my-first-post.md
</span><span class='line'>/home/ubuntu/websites/awesome-blog/content/posts/my-first-post.md created</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s add some sample data to our markdown file that hugo created:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+++
</span><span class='line'>title = "My First Post"
</span><span class='line'>date = 2020-06-14T15:47:17+02:00
</span><span class='line'>draft = false
</span><span class='line'>tags = ["hugo", "kiera"]
</span><span class='line'>categories = ["hugo-blog"]
</span><span class='line'>+++
</span><span class='line'>
</span><span class='line'>-&gt; markdown content here &lt;-</span></code></pre></td></tr></table></div></figure>


<p>When starting the server up again and viewing the home page:</p>

<p><img src="https://img.sysadmins.co.za/srklwj.png" alt="hugo-blog-with-home-page" /></p>

<p>And selecting the post:</p>

<p><img src="https://img.sysadmins.co.za/v95p79.png" alt="" /></p>

<p>Code snippets:</p>

<p><img src="https://img.sysadmins.co.za/0xufiy.png" alt="code" /></p>

<p>Tables, lists and images:</p>

<p><img src="https://img.sysadmins.co.za/c317ij.png" alt="hugo-blog" /></p>

<h2>Creating Pages</h2>

<p>For the pages section (about, getting-started), we first create the directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir content/getting-started</span></code></pre></td></tr></table></div></figure>


<p>Then create the page under the directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hugo new content/getting-started/index.md
</span><span class='line'>content/getting-started/index.md created</span></code></pre></td></tr></table></div></figure>


<p>The content:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat content/getting-started/index.md
</span><span class='line'>---
</span><span class='line'>title: "Getting Started"
</span><span class='line'>date: 2020-06-14T16:11:07+02:00
</span><span class='line'>draft: false
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'>This is a getting started page</span></code></pre></td></tr></table></div></figure>


<p>When we start up our server again and select the &ldquo;getting-started&rdquo; from the navbar on our home page:</p>

<p><img src="https://img.sysadmins.co.za/rod8eo.png" alt="getting-started-page" /></p>

<h2>Production Mode</h2>

<p>You can set the flags in your main config as well, but running the server in production mode:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hugo server \
</span><span class='line'>  --baseURL "http://192.168.64.17/" \
</span><span class='line'>  --themesDir=themes --theme=kiera \
</span><span class='line'>  --bind=0.0.0.0 --port=1313 --appendPort=true \
</span><span class='line'>  --buildDrafts --watch --environment production</span></code></pre></td></tr></table></div></figure>


<h2>Thanks</h2>

<p>Thanks for reading, feel free to reach out to me on <a href="https://twitter.com/ruanbekker">@ruanbekker</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using ProxyJump With SSH for VMs With No Public IPs]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/06/13/using-proxyjump-with-ssh-for-vms-with-no-public-ips/"/>
    <updated>2020-06-13T20:06:35+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/06/13/using-proxyjump-with-ssh-for-vms-with-no-public-ips</id>
    <content type="html"><![CDATA[<p><img src="https://img.sysadmins.co.za/wngib2.png" alt="ssh-proxy-jump" /></p>

<p>I have a dedicated server with LXD installed where I have a bunch of system containers running to host a lot of my playground services, and to access the operating system of those lxc containers, I need to SSH to the LXD host, then exec or ssh into that LXC container.</p>

<p>This became tedious and wanted a way to directly ssh to them, as they don&rsquo;t have public ip addresses, it&rsquo;s not possible but found its possible to access them using proxyjump.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[you] -&gt; [hypervisor] -&gt; [vm on hypervisor]</span></code></pre></td></tr></table></div></figure>


<p>First step is to create our ssh key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh-keygen -t rsa</span></code></pre></td></tr></table></div></figure>


<p>Add the created public key (<code>~/.ssh/id_rsa.pub</code>) on the hypervisor and the target vm&rsquo;s <code>~/.ssh/authorized_key</code> files.</p>

<p>Then create the SSH Config on your local workstation (<code>~/.ssh/config</code>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Host *
</span><span class='line'>  StrictHostKeyChecking no
</span><span class='line'>  UserKnownHostsFile=/dev/null
</span><span class='line'>
</span><span class='line'>Host hypervisor
</span><span class='line'>  Hostname hv.domain.com
</span><span class='line'>  User myuser
</span><span class='line'>  IdentityFile ~/.ssh/id_rsa
</span><span class='line'>
</span><span class='line'>Host ctr1
</span><span class='line'>  Hostname 10.37.117.132
</span><span class='line'>  User root
</span><span class='line'>  IdentityFile ~/.ssh/id_rsa
</span><span class='line'>  ProxyJump hypervisor</span></code></pre></td></tr></table></div></figure>


<p>Now accessing our lxc container ctr1, is possible by doing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh ctr1
</span><span class='line'>Warning: Permanently added 'x,x' (ECDSA) to the list of known hosts.
</span><span class='line'>Warning: Permanently added '10.37.117.132' (ECDSA) to the list of known hosts.
</span><span class='line'>root@ctr1~ $</span></code></pre></td></tr></table></div></figure>


<p>Thank you for reading</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using a SSH Reverse Tunnel to Access Nodes on Private Ranges]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/06/13/using-a-ssh-reverse-tunnel-to-access-nodes-on-private-ranges/"/>
    <updated>2020-06-13T19:59:27+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/06/13/using-a-ssh-reverse-tunnel-to-access-nodes-on-private-ranges</id>
    <content type="html"><![CDATA[<p><img src="https://img.sysadmins.co.za/wngib2.png" alt="ssh-tunneling" /></p>

<p>Personal utility (actually just a command) that I use to reach my Raspberry Pi Nodes that has no direct route via the Internet</p>

<h2>Other Projects</h2>

<p>There&rsquo;s a lot of other tools out there that&rsquo;s already solving this issue, such as <a href="https://inlets.dev">inlets</a>, but I wanted my own, so that I can extend features to it as it pleases me.</p>

<h2>Overview</h2>

<p>This is more ore less how it looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[VPS] &lt;-- Has a Public IP
</span><span class='line'> |
</span><span class='line'> |
</span><span class='line'> [HOME NETWORK] &lt;-- Dynamic IP
</span><span class='line'>   |
</span><span class='line'>   |
</span><span class='line'> [rpi-01:22], [rpi-02:22] &lt;-- Private IPs</span></code></pre></td></tr></table></div></figure>


<ul>
<li>SSH Tunnel is setup from the Raspberry Pi Nodes</li>
<li>Each Raspberry Pi sets up a unique port on the VPS for the tunnel to traverse to the Rpi on port 22</li>
<li>To reach Rpi-01, you hop onto the VPS and ssh to localhost port 2201</li>
<li>To reach Rpi-02, you hop onto the VPS and ssh to localhost port 2202, etc</li>
</ul>


<h2>Progress</h2>

<p>The tool will still be built, but using ssh it&rsquo;s quite easy</p>

<h2>Usage</h2>

<p>Setup the SSH Reverse Tunnel from rpi-01:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -i ~/.ssh/bastion.pem \
</span><span class='line'>  -o StrictHostKeyChecking=no \
</span><span class='line'>  -o UserKnownHostsFile=/dev/null \
</span><span class='line'>  -o ServerAliveInterval=60 \
</span><span class='line'>  -N -R 2201:localhost:22 \
</span><span class='line'>  -p 22 ruan@bastion-9239.domain.cloud</span></code></pre></td></tr></table></div></figure>


<p>Setup the SSH Reverse Tunnel from rpi-02:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -i ~/.ssh/bastion.pem \
</span><span class='line'>  -o StrictHostKeyChecking=no \
</span><span class='line'>  -o UserKnownHostsFile=/dev/null \
</span><span class='line'>  -o ServerAliveInterval=60 \
</span><span class='line'>  -N -R 2202:localhost:22 \
</span><span class='line'>  -p 22 ruan@bastion-9239.domain.cloud</span></code></pre></td></tr></table></div></figure>


<p>On the VPS, we can see that we have port 2021 and 2022 listening:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ netstat -tulpn
</span><span class='line'>Active Internet connections (only servers)
</span><span class='line'>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
</span><span class='line'>tcp        0      0 127.0.0.1:2201          0.0.0.0:*               LISTEN      -
</span><span class='line'>tcp        0      0 127.0.0.1:2202          0.0.0.0:*               LISTEN      -</span></code></pre></td></tr></table></div></figure>


<p>To connect to rpi-01, we ssh to localhost on port 2201, from the VPS:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -p 2201 pi@localhost
</span><span class='line'>pi@rpi-01:~ $</span></code></pre></td></tr></table></div></figure>


<p>To connect to rpi-02, we ssh to localhost on port 2202 from the VPS:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -p 2202 pi@localhost
</span><span class='line'>pi@rpi-02:~ $</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get the Top 10 Items on Hackernews in Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/06/13/get-the-top-10-items-on-hackernews-in-python/"/>
    <updated>2020-06-13T19:53:20+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/06/13/get-the-top-10-items-on-hackernews-in-python</id>
    <content type="html"><![CDATA[<p>This is a quick post on how to use python to get the 10 latest items from hacker<a href="news:">news:</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import requests
</span><span class='line'>import json
</span><span class='line'>
</span><span class='line'>def get_top_ten():
</span><span class='line'>    ids = requests.get('https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty').json()[0:10]
</span><span class='line'>    for id in ids:
</span><span class='line'>        postresponse = requests.get('https://hacker-news.firebaseio.com/v0/item/{postid}.json?print=pretty'.format(postid=id)).json()
</span><span class='line'>        formatted = {"title": postresponse["title"], "type": postresponse["type"], "url": postresponse["url"], "by": postresponse["by"]}
</span><span class='line'>        print(json.dumps(formatted, indent=2))</span></code></pre></td></tr></table></div></figure>


<p>When running it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; get_top_ten()
</span><span class='line'>..
</span><span class='line'>{
</span><span class='line'>  "title": "Play Counter-Strike 1.6 in your browser",
</span><span class='line'>  "type": "story",
</span><span class='line'>  "url": "http://cs-online.club",
</span><span class='line'>  "by": "m0ck"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improve MySQL Write Performance Using Batch Writes]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/06/13/improve-mysql-write-performance-using-batch-writes/"/>
    <updated>2020-06-13T19:31:32+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/06/13/improve-mysql-write-performance-using-batch-writes</id>
    <content type="html"><![CDATA[<p><img src="https://img.sysadmins.co.za/wngib2.png" alt="mysql-python-performance" /></p>

<p>I am no DBA, but I got curious when I noticed sluggish write performance on a mysql database, and I remembered somewhere that you should always use batch writes over sequential writes. So I decided to test it out, using a python script and a mysql server.</p>

<h2>What will we be doing</h2>

<p>I wrote a python script that writes 100,000 records to a database and keeps time of how long the writes took, 2 examples which I will compare:</p>

<ul>
<li>One script writing each record to the database</li>
<li>One script writing all the records as batch</li>
</ul>


<h2>Sequential Writes</h2>

<p>It took 48 seconds to write 100,000 records into a database using sequential writes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">userids</span><span class="p">:</span>
</span><span class='line'>    <span class="n">userid</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;uid&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;uid&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;_&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">job</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">job</span><span class="p">)</span>
</span><span class='line'>    <span class="n">age</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span><span class="mi">49</span><span class="p">)</span>
</span><span class='line'>    <span class="n">credit_card_num</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;ccnum&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">status</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">([</span><span class="s">&quot;active&quot;</span><span class="p">,</span> <span class="s">&quot;inactive&quot;</span><span class="p">,</span> <span class="s">&quot;disabled&quot;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;INSERT INTO customers(userid, name, job, age, credit_card_num, status) VALUES(%s, %s, %s, %s, %s, %s)&quot;&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">(</span><span class="n">userid</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">job</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">credit_card_num</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running that shows us this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">python3</span> <span class="n">mysql_seq_writes</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="n">start</span>
</span><span class='line'><span class="n">writing</span> <span class="n">customers</span> <span class="n">to</span> <span class="n">database</span>
</span><span class='line'><span class="n">finish</span>
</span><span class='line'><span class="n">inserted</span> <span class="mi">100000</span> <span class="n">records</span> <span class="ow">in</span> <span class="mi">48</span><span class="n">s</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Batch Writes</h2>

<p>It took 3 seconds to write to write 100,000 records using batch writes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">userids</span><span class="p">:</span>
</span><span class='line'>    <span class="n">userid</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;uid&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;uid&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;_&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">job</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">job</span><span class="p">)</span>
</span><span class='line'>    <span class="n">age</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span><span class="mi">49</span><span class="p">)</span>
</span><span class='line'>    <span class="n">credit_card_num</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;ccnum&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">status</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">([</span><span class="s">&quot;active&quot;</span><span class="p">,</span> <span class="s">&quot;inactive&quot;</span><span class="p">,</span> <span class="s">&quot;disabled&quot;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bunch_users</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">userid</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">job</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">credit_card_num</span><span class="p">,</span> <span class="n">status</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">cur</span><span class="o">.</span><span class="n">executemany</span><span class="p">(</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;INSERT INTO customers(userid, name, job, age, credit_card_num, status) VALUES(%s, %s, %s, %s, %s, %s)&quot;&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">bunch_users</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running that shows us this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">python3</span> <span class="n">mysql_batch_writes</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="n">start</span>
</span><span class='line'><span class="n">writing</span> <span class="n">customers</span> <span class="n">to</span> <span class="n">database</span>
</span><span class='line'><span class="n">finish</span>
</span><span class='line'><span class="n">inserted</span> <span class="mi">100000</span> <span class="n">records</span> <span class="ow">in</span> <span class="mi">3</span><span class="n">s</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Looking at the Scripts</h2>

<p>The script used for sequential writes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">datetime</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">MySQLdb</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span> <span class="k">as</span> <span class="n">dt</span>
</span><span class='line'>
</span><span class='line'><span class="n">host</span><span class="o">=</span><span class="s">&quot;172.18.0.1&quot;</span>
</span><span class='line'><span class="n">user</span><span class="o">=</span><span class="s">&quot;root&quot;</span>
</span><span class='line'><span class="n">password</span><span class="o">=</span><span class="s">&quot;password&quot;</span>
</span><span class='line'><span class="n">dbname</span><span class="o">=</span><span class="s">&quot;shopdb&quot;</span>
</span><span class='line'><span class="n">records</span><span class="o">=</span><span class="mi">100000</span>
</span><span class='line'>
</span><span class='line'><span class="n">db</span> <span class="o">=</span> <span class="n">MySQLdb</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">password</span><span class="p">,</span> <span class="n">dbname</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;ruan&#39;</span><span class="p">,</span> <span class="s">&#39;donovan&#39;</span><span class="p">,</span> <span class="s">&#39;james&#39;</span><span class="p">,</span> <span class="s">&#39;warren&#39;</span><span class="p">,</span> <span class="s">&#39;angie&#39;</span><span class="p">,</span> <span class="s">&#39;nicole&#39;</span><span class="p">,</span> <span class="s">&#39;jenny&#39;</span><span class="p">,</span> <span class="s">&#39;penny&#39;</span><span class="p">,</span> <span class="s">&#39;amber&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">job</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;doctor&#39;</span><span class="p">,</span> <span class="s">&#39;scientist&#39;</span><span class="p">,</span> <span class="s">&#39;teacher&#39;</span><span class="p">,</span> <span class="s">&#39;police officer&#39;</span><span class="p">,</span> <span class="s">&#39;waiter&#39;</span><span class="p">,</span> <span class="s">&#39;banker&#39;</span><span class="p">,</span> <span class="s">&#39;it&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">cur</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span><span class='line'><span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&quot;DROP TABLE IF EXISTS customers&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&quot;CREATE TABLE customers(userid VARCHAR(50), name VARCHAR(50), surname VARCHAR(50), job VARCHAR(50), age INT(2), credit_card_num VARCHAR(50), status VARCHAR(10))&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">bunch_users</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="n">userids</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;start&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">gen_id</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">9999</span><span class="p">))</span><span class="o">.</span><span class="n">zfill</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">gen_user</span><span class="p">(</span><span class="n">username</span><span class="p">):</span>
</span><span class='line'>    <span class="n">ccnum</span> <span class="o">=</span> <span class="s">&#39;{0}-{1}-{2}-{3}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">gen_id</span><span class="p">(),</span> <span class="n">gen_id</span><span class="p">(),</span> <span class="n">gen_id</span><span class="p">(),</span> <span class="n">gen_id</span><span class="p">())</span>
</span><span class='line'>    <span class="n">userid</span> <span class="o">=</span> <span class="n">username</span> <span class="o">+</span> <span class="s">&#39;_&#39;</span> <span class="o">+</span> <span class="n">ccnum</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;-&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">ccnum</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;-&#39;</span><span class="p">)[</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span><span class="s">&quot;uid&quot;</span><span class="p">:</span> <span class="n">userid</span><span class="p">,</span> <span class="s">&quot;ccnum&quot;</span><span class="p">:</span> <span class="n">ccnum</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">records</span><span class="p">):</span>
</span><span class='line'>    <span class="n">userids</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">gen_user</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">names</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;writing customers to database&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">timestart</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s">&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">userids</span><span class="p">:</span>
</span><span class='line'>    <span class="n">userid</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;uid&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;uid&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;_&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">job</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">job</span><span class="p">)</span>
</span><span class='line'>    <span class="n">age</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span><span class="mi">49</span><span class="p">)</span>
</span><span class='line'>    <span class="n">credit_card_num</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;ccnum&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">status</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">([</span><span class="s">&quot;active&quot;</span><span class="p">,</span> <span class="s">&quot;inactive&quot;</span><span class="p">,</span> <span class="s">&quot;disabled&quot;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#bunch_users.append((userid, name, job, age, credit_card_num, status))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;INSERT INTO customers(userid, name, job, age, credit_card_num, status) VALUES(%s, %s, %s, %s, %s, %s)&quot;&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">(</span><span class="n">userid</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">job</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">credit_card_num</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">db</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span><span class='line'><span class="n">db</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="n">timefinish</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s">&quot;</span><span class="p">))</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;finish&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;inserted {} records in {}s&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">records</span><span class="p">,</span> <span class="n">timefinish</span><span class="o">-</span><span class="n">timestart</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The script used for the batch writes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">datetime</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">MySQLdb</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span> <span class="k">as</span> <span class="n">dt</span>
</span><span class='line'>
</span><span class='line'><span class="n">host</span><span class="o">=</span><span class="s">&quot;172.18.0.1&quot;</span>
</span><span class='line'><span class="n">user</span><span class="o">=</span><span class="s">&quot;root&quot;</span>
</span><span class='line'><span class="n">password</span><span class="o">=</span><span class="s">&quot;password&quot;</span>
</span><span class='line'><span class="n">dbname</span><span class="o">=</span><span class="s">&quot;shopdb&quot;</span>
</span><span class='line'><span class="n">records</span><span class="o">=</span><span class="mi">100000</span>
</span><span class='line'>
</span><span class='line'><span class="n">db</span> <span class="o">=</span> <span class="n">MySQLdb</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">password</span><span class="p">,</span> <span class="n">dbname</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;ruan&#39;</span><span class="p">,</span> <span class="s">&#39;donovan&#39;</span><span class="p">,</span> <span class="s">&#39;james&#39;</span><span class="p">,</span> <span class="s">&#39;warren&#39;</span><span class="p">,</span> <span class="s">&#39;angie&#39;</span><span class="p">,</span> <span class="s">&#39;nicole&#39;</span><span class="p">,</span> <span class="s">&#39;jenny&#39;</span><span class="p">,</span> <span class="s">&#39;penny&#39;</span><span class="p">,</span> <span class="s">&#39;amber&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">job</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;doctor&#39;</span><span class="p">,</span> <span class="s">&#39;scientist&#39;</span><span class="p">,</span> <span class="s">&#39;teacher&#39;</span><span class="p">,</span> <span class="s">&#39;police officer&#39;</span><span class="p">,</span> <span class="s">&#39;waiter&#39;</span><span class="p">,</span> <span class="s">&#39;banker&#39;</span><span class="p">,</span> <span class="s">&#39;it&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">cur</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span><span class='line'><span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&quot;DROP TABLE IF EXISTS customers&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&quot;CREATE TABLE customers(userid VARCHAR(50), name VARCHAR(50), surname VARCHAR(50), job VARCHAR(50), age INT(2), credit_card_num VARCHAR(50), status VARCHAR(10))&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">bunch_users</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="n">userids</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;start&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">gen_id</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">9999</span><span class="p">))</span><span class="o">.</span><span class="n">zfill</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">gen_user</span><span class="p">(</span><span class="n">username</span><span class="p">):</span>
</span><span class='line'>    <span class="n">ccnum</span> <span class="o">=</span> <span class="s">&#39;{0}-{1}-{2}-{3}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">gen_id</span><span class="p">(),</span> <span class="n">gen_id</span><span class="p">(),</span> <span class="n">gen_id</span><span class="p">(),</span> <span class="n">gen_id</span><span class="p">())</span>
</span><span class='line'>    <span class="n">userid</span> <span class="o">=</span> <span class="n">username</span> <span class="o">+</span> <span class="s">&#39;_&#39;</span> <span class="o">+</span> <span class="n">ccnum</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;-&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">ccnum</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;-&#39;</span><span class="p">)[</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span><span class="s">&quot;uid&quot;</span><span class="p">:</span> <span class="n">userid</span><span class="p">,</span> <span class="s">&quot;ccnum&quot;</span><span class="p">:</span> <span class="n">ccnum</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">records</span><span class="p">):</span>
</span><span class='line'>    <span class="n">userids</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">gen_user</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">names</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">userids</span><span class="p">:</span>
</span><span class='line'>    <span class="n">userid</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;uid&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;uid&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;_&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">job</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">job</span><span class="p">)</span>
</span><span class='line'>    <span class="n">age</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span><span class="mi">49</span><span class="p">)</span>
</span><span class='line'>    <span class="n">credit_card_num</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="s">&quot;ccnum&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">status</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">([</span><span class="s">&quot;active&quot;</span><span class="p">,</span> <span class="s">&quot;inactive&quot;</span><span class="p">,</span> <span class="s">&quot;disabled&quot;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bunch_users</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">userid</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">job</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">credit_card_num</span><span class="p">,</span> <span class="n">status</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">timestart</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s">&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;writing customers to database&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">cur</span><span class="o">.</span><span class="n">executemany</span><span class="p">(</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;INSERT INTO customers(userid, name, job, age, credit_card_num, status) VALUES(%s, %s, %s, %s, %s, %s)&quot;&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">bunch_users</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">db</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span><span class='line'><span class="n">db</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="n">timefinish</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s">&quot;</span><span class="p">))</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;finish&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;inserted {} records in {}s&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">records</span><span class="p">,</span> <span class="n">timefinish</span><span class="o">-</span><span class="n">timestart</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Thanks</h2>

<p>Thanks for reading, so this was kind of interesting to see to never do sequential writes but write them in bulk when you have large amount of writes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Increase Performance With Your Ghost Blog on Docker]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/06/08/build-a-ghost-blog-with-nginx-cache-on-docker/"/>
    <updated>2020-06-08T23:28:07+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/06/08/build-a-ghost-blog-with-nginx-cache-on-docker</id>
    <content type="html"><![CDATA[<p><img src="https://img.sysadmins.co.za/wngib2.png" alt="nginx-blog-ghost-caching" /></p>

<p>Nginx Caching + Ghost == Great Performance.</p>

<p>In this post we will build a nginx reverse proxy with caching enabled for our static content such as images, which will be our frontend and therefore we will have port 80 exposed, and run our ghost blog as our backend, which we will proxy traffic through from our nginx container.</p>

<h2>But why would you want caching?</h2>

<p>Returning data from memory is a lot faster than returning data from disk, and in this case where a request is being made against nginx, then it proxy passes the request to ghost, gets the data that you requested and returns the data to the client.</p>

<p>So for items that rarely changes like images, we can benefit from caching, so the images can be returned from the nginx service, where the first request will be made to ghost and then it will be loaded into nginx cache, so then the next time when you request the same image it will be returned from cache instead of making that same request to ghost again.</p>

<h2>Caching Info</h2>

<p>For this demonstration once we define the size of our chache which will be 500MB and we specify that if an object has not been accessed for 24 hours, we can expire the object from the cache.</p>

<h2>Nginx</h2>

<p>We will build our nginx container by adding our custom nginx config to our dockerfile.</p>

<p>Our <code>Dockerfile</code> will look like the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ROM nginx:stable
</span><span class='line'>ADD nginx.conf /etc/nginx/nginx.conf</span></code></pre></td></tr></table></div></figure>


<p>Our <code>nginx.conf</code> configuration file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>events {
</span><span class='line'>  worker_connections  1024;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>http {
</span><span class='line'>  default_type       text/html;
</span><span class='line'>  access_log         /dev/stdout;
</span><span class='line'>  sendfile           on;
</span><span class='line'>  keepalive_timeout  65;
</span><span class='line'>
</span><span class='line'>  #proxy_cache_path /tmp/ghostcache levels=1:2 keys_zone=ghostcache:500m max_size=2g inactive=30d;
</span><span class='line'>  proxy_cache_path /tmp/ghostcache levels=1:2 keys_zone=ghostcache:60m max_size=500m inactive=24h;
</span><span class='line'>  proxy_cache_key "$scheme$request_method$host$request_uri";
</span><span class='line'>  proxy_cache_methods GET HEAD;
</span><span class='line'>
</span><span class='line'>  server {
</span><span class='line'>    listen 80;
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>        proxy_set_header X-Forwarded-Proto $scheme;
</span><span class='line'>        proxy_set_header X-Real-IP $remote_addr;
</span><span class='line'>        proxy_set_header Host $http_host;
</span><span class='line'>        proxy_pass http://ghost:2368;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    location ~* \.(?:css|js|ico)$ {
</span><span class='line'>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>        proxy_set_header X-Forwarded-Proto $scheme;
</span><span class='line'>        proxy_set_header X-Real-IP $remote_addr;
</span><span class='line'>        proxy_set_header Host $http_host;
</span><span class='line'>        proxy_pass http://ghost:2368;
</span><span class='line'>        access_log off;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    location ^~ /content/images/ {
</span><span class='line'>        proxy_cache ghostcache;
</span><span class='line'>        proxy_cache_valid 60m;
</span><span class='line'>        proxy_cache_valid 404 1m;
</span><span class='line'>        proxy_ignore_headers Set-Cookie;
</span><span class='line'>        proxy_hide_header Set-Cookie;
</span><span class='line'>        proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
</span><span class='line'>        proxy_ignore_headers Cache-Control;
</span><span class='line'>        add_header X-Cache-Status $upstream_cache_status;
</span><span class='line'>
</span><span class='line'>        proxy_set_header Host $http_host;
</span><span class='line'>        proxy_set_header X-Real-IP $remote_addr;
</span><span class='line'>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>        proxy_set_header X-Forwarded-Proto $scheme;
</span><span class='line'>        proxy_pass http://ghost:2368;
</span><span class='line'>        access_log off;
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Then our <code>docker-compose.yml</code> where we will add our nginx and ghost container to run together:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>version: '3.4'
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  ghost:
</span><span class='line'>    image: ghost:3.15.1
</span><span class='line'>    container_name: 'ghost'
</span><span class='line'>    environment:
</span><span class='line'>      - NODE_ENV=production
</span><span class='line'>      - url=http://localhost:80
</span><span class='line'>    networks:
</span><span class='line'>      - ghost
</span><span class='line'>    volumes:
</span><span class='line'>      - ghost_content:/var/lib/ghost/content/data
</span><span class='line'>
</span><span class='line'>  proxy:
</span><span class='line'>    build: .
</span><span class='line'>    container_name: 'proxy'
</span><span class='line'>    depends_on:
</span><span class='line'>      - ghost
</span><span class='line'>    ports:
</span><span class='line'>      - 80:80
</span><span class='line'>    networks:
</span><span class='line'>      - ghost
</span><span class='line'>
</span><span class='line'>networks:
</span><span class='line'>  ghost: {}
</span><span class='line'>
</span><span class='line'>volumes:
</span><span class='line'>  ghost_content: {}</span></code></pre></td></tr></table></div></figure>


<p>To boot our stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose up</span></code></pre></td></tr></table></div></figure>


<h2>Test Caching</h2>

<p>Once your containers are in a running state, open your browsers devloper tools and look at the networking tab, then access your ghost blog on <code>http://localhost:80/</code>, the first time a image is opened you should see the cache shows <code>MISS</code> when you refresh again you should see a <code>HIT</code>, which means that the object is being returned from your cache.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ingesting Pocket.com Links Into Elasticsearch]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/06/08/ingesting-pocket-items-into-elasticsearch/"/>
    <updated>2020-06-08T23:06:23+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/06/08/ingesting-pocket-items-into-elasticsearch</id>
    <content type="html"><![CDATA[<p><img src="https://img.sysadmins.co.za/wngib2.png" alt="python-elasticsearch-pocket" /></p>

<p>Links that I stumble upon, I always save to <a href="https://getpocket.com">getpocket.com</a> and tag them with the relevant info. So the one day I had this random idea to list my links per category on a web service and I was wondering how to approach that scenario, which lead me to this.</p>

<p>In this post we will consume all our saved bookmarks from pocket.com and ingest them into elasticsearch. But we dont want to read all the items from pocket&rsquo;s api every single time when the consumer run, therefore I have a method of checkpointing the last save run with a timestamp, so the next time it runs, we have context where to start from</p>

<h2>What will we be doing</h2>

<p>We will authenticate with pocket, then write the code how we will read the data from pocket and ingest them into elasticsearch.</p>

<h2>Authentication</h2>

<p>Head over to the <a href="https://getpocket.com/developer/apps/new">developer console</a> on pocket and create a new application then save your config in <code>config.py</code> which we will have as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>application_name = "Awesome Links"
</span><span class='line'>application_link = "https://getpocket.com/developer/app/x/x"
</span><span class='line'>application_url = "https://awesome-links.domain"
</span><span class='line'>consumer_key = "x"
</span><span class='line'>access_token = "x"
</span><span class='line'>es_host = ""
</span><span class='line'>es_user = ""
</span><span class='line'>es_pass = ""</span></code></pre></td></tr></table></div></figure>


<p>Ensure that you have the requests library installed (<code>pip install requests</code>), the code that I used to get a access token:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import config
</span><span class='line'>import requests
</span><span class='line'>import webbrowser
</span><span class='line'>import time
</span><span class='line'>
</span><span class='line'>CONSUMER_KEY = config.consumer_key
</span><span class='line'>BASE_URL = "https://getpocket.com"
</span><span class='line'>REDIRECT_URL = "localhost" # &lt;-- you can run python -m SimpleHTTPServer 80 to have a local server listening on port 80
</span><span class='line'>HEADERS = {"Content-Type": "application/json; charset=UTF-8", "X-Accept": "application/json"}
</span><span class='line'>
</span><span class='line'>def request_code():
</span><span class='line'>    payload = {
</span><span class='line'>        "consumer_key": CONSUMER_KEY,
</span><span class='line'>        "redirect_uri": REDIRECT_URL,
</span><span class='line'>    }
</span><span class='line'>    response = requests.post("https://getpocket.com/v3/oauth/request", headers=HEADERS, json=payload)
</span><span class='line'>    print("request_code")
</span><span class='line'>    print(response.json())
</span><span class='line'>    return response.json()["code"]
</span><span class='line'>
</span><span class='line'>def request_access_token(code):
</span><span class='line'>    payload = {
</span><span class='line'>        "consumer_key": CONSUMER_KEY,
</span><span class='line'>        "code": code,
</span><span class='line'>    }
</span><span class='line'>    response = requests.post("https://getpocket.com/v3/oauth/authorize", headers=HEADERS, json=payload)
</span><span class='line'>    print("request_access_token")
</span><span class='line'>    print(response.json())
</span><span class='line'>    time.sleep(10)
</span><span class='line'>    return response.json()["access_token"]
</span><span class='line'>
</span><span class='line'>def request_authorization(code):
</span><span class='line'>    url = "https://getpocket.com/auth/authorize?request_token={code}&redirect_uri={redirect_url}".format(code=code, redirect_url=REDIRECT_URL)
</span><span class='line'>    print("request_authorization")
</span><span class='line'>    print(url)
</span><span class='line'>    webbrowser.open(url, new=2)
</span><span class='line'>
</span><span class='line'>def authenticate_pocket():
</span><span class='line'>    code = request_code()
</span><span class='line'>    request_authorization(code)
</span><span class='line'>    return request_access_token(code)
</span><span class='line'>
</span><span class='line'>authenticate_pocket()
</span><span class='line'># access_token will be returned</span></code></pre></td></tr></table></div></figure>


<h2>Main App</h2>

<p>Once we have our access_token we can save that to our <code>config.py</code>, we will also be working with elasticsearch so we can add our elasticsearch info there as well:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/usr/bin/env python
</span><span class='line'>
</span><span class='line'>import config
</span><span class='line'>import requests
</span><span class='line'>import time
</span><span class='line'>
</span><span class='line'>CONSUMER_KEY = config.consumer_key
</span><span class='line'>ACCESS_TOKEN = config.access_token
</span><span class='line'>HEADERS = {"Content-Type": "application/json; charset=UTF-8", "X-Accept": "application/json"}
</span><span class='line'>ES_HOST = config.es_host
</span><span class='line'>ES_USER = config.es_user
</span><span class='line'>ES_PASS = config.es_pass
</span><span class='line'>
</span><span class='line'>def write_checkpoint(timestamp):
</span><span class='line'>    response = requests.put(
</span><span class='line'>        'https://{eshost}/pocket-data/_doc/checkpoint'.format(eshost=ES_HOST),
</span><span class='line'>        auth=(ES_USER, ES_PASS),
</span><span class='line'>        json={
</span><span class='line'>            "checkpoint_timestamp": timestamp
</span><span class='line'>        }
</span><span class='line'>    )
</span><span class='line'>    return {"checkpoint_timestamp": timestamp}
</span><span class='line'>
</span><span class='line'>def get_checkpoint():
</span><span class='line'>    response = requests.get(
</span><span class='line'>        'https://{eshost}/pocket-data/_doc/checkpoint'.format(ES_HOST),
</span><span class='line'>        auth=(ES_USER, ES_PASS)
</span><span class='line'>    )
</span><span class='line'>    checkpoint_timestamp = response.json()['_source']['checkpoint_timestamp']
</span><span class='line'>    return checkpoint_timestamp
</span><span class='line'>
</span><span class='line'>def ingest_to_es(payload):
</span><span class='line'>    response = requests.put(
</span><span class='line'>        'https://{eshost}/pocket-data/_doc/{item_id}'.format(eshost=ES_HOST, item_id=payload['item_id']),
</span><span class='line'>        auth=(ES_USER, ES_PASS),
</span><span class='line'>        json=payload
</span><span class='line'>    )
</span><span class='line'>    return response.json()
</span><span class='line'>
</span><span class='line'>def convert_timestamp(epoch):
</span><span class='line'>    return time.strftime('%Y-%m-%d', time.localtime(int(epoch)))
</span><span class='line'>
</span><span class='line'>def mapper(pocket_item):
</span><span class='line'>    try:
</span><span class='line'>        payload = {
</span><span class='line'>            "item_id": pocket_item['item_id'],
</span><span class='line'>            "time_added": convert_timestamp(pocket_item['time_added']),
</span><span class='line'>            "url": pocket_item['resolved_url'],
</span><span class='line'>            "title": pocket_item['resolved_title'],
</span><span class='line'>            #"excerpt": pocket_item['excerpt'],
</span><span class='line'>            "tags": list(pocket_item['tags'].keys())
</span><span class='line'>        }
</span><span class='line'>    except:
</span><span class='line'>        print("error, item has been skipped:")
</span><span class='line'>        print(pocket_item)
</span><span class='line'>        payload = "skip"
</span><span class='line'>    return payload
</span><span class='line'>
</span><span class='line'>def ingest_pocket_items(payload):
</span><span class='line'>    pocket_items = list()
</span><span class='line'>    pocket_items.extend(payload['list'].keys())
</span><span class='line'>    last_scraped_time = payload['since']
</span><span class='line'>    number_of_items = len(pocket_items)
</span><span class='line'>    print('got {} items from pocket'.format(len(pocket_items)))
</span><span class='line'>    time.sleep(5)
</span><span class='line'>    if len(pocket_items) &gt; 0:
</span><span class='line'>        for pocket_item in pocket_items:
</span><span class='line'>            mapped_payload = mapper(payload['list'][pocket_item])
</span><span class='line'>            #print(mapped_payload)
</span><span class='line'>            if mapped_payload != "skip":
</span><span class='line'>                ingest_to_es(mapped_payload)
</span><span class='line'>            print("Number of items left to ingest: {}".format(number_of_items))
</span><span class='line'>            number_of_items-=1
</span><span class='line'>    else:
</span><span class='line'>        print('nothing new')
</span><span class='line'>    print('writing checkpoint to es: {}'.format(last_scraped_time))
</span><span class='line'>    write_checkpoint(last_scraped_time)
</span><span class='line'>    return 'done'
</span><span class='line'>
</span><span class='line'>def fetch_pocket_items(timestamp):
</span><span class='line'>    response = requests.post(
</span><span class='line'>        "https://getpocket.com/v3/get",
</span><span class='line'>        headers=HEADERS,
</span><span class='line'>        json={
</span><span class='line'>            "consumer_key": CONSUMER_KEY,
</span><span class='line'>            "access_token": ACCESS_TOKEN,
</span><span class='line'>            "state": "all",
</span><span class='line'>            "contentType": "article",
</span><span class='line'>            "sort": "newest",
</span><span class='line'>            "detailType": "complete",
</span><span class='line'>            "since": int(timestamp)
</span><span class='line'>        }
</span><span class='line'>    )
</span><span class='line'>    return response.json()
</span><span class='line'>
</span><span class='line'># get checkpoint
</span><span class='line'>print('getting checkpoint id')
</span><span class='line'>checkpoint_timestamp = get_checkpoint()
</span><span class='line'>print('got checkpoint id: {}'.format(checkpoint_timestamp))
</span><span class='line'>time.sleep(5)
</span><span class='line'>
</span><span class='line'># fetch items from pocket
</span><span class='line'>print('fetch items from pocket')
</span><span class='line'>pocket_response = fetch_pocket_items(checkpoint_timestamp)
</span><span class='line'>
</span><span class='line'># write
</span><span class='line'>print('ingesting pocket items into es')
</span><span class='line'>ingest_pocket_items(pocket_response)</span></code></pre></td></tr></table></div></figure>


<p>So what we are doing here is that we are reading from the pocket api all the data that you saved in your account, and save the current time in epoch format, which we will need to tell our run when was the last time we consumed and keep that value in memory.</p>

<p>Then from the data we received, we will map the data that we are interested in, into key/value pairs and then ingest the data into elasticsearch.</p>

<p>After the initial ingestion has been done, which can take some time depending on how many items you have on pocket, as soon as it&rsquo;s done it will write the checkpoint time to elasticsearch so that the client know the next time from what time to search from again.</p>

<p>This way we dont ingest all the items again, testing it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python server.py
</span><span class='line'>getting checkpoint id
</span><span class='line'>got checkpoint id: 1591045652
</span><span class='line'>fetch items from pocket
</span><span class='line'>ingesting pocket items into es
</span><span class='line'>got 2 items from pocket
</span><span class='line'>Number of items left to ingest: 2
</span><span class='line'>Number of items left to ingest: 1
</span><span class='line'>writing checkpoint to es: 1591392580</span></code></pre></td></tr></table></div></figure>


<p>Add one more item to pocket, then run our ingester again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python server.py
</span><span class='line'>getting checkpoint id
</span><span class='line'>got checkpoint id: 1591392580
</span><span class='line'>fetch items from pocket
</span><span class='line'>ingesting pocket items into es
</span><span class='line'>got 1 items from pocket
</span><span class='line'>Number of items left to ingest: 1
</span><span class='line'>writing checkpoint to es: 1591650259</span></code></pre></td></tr></table></div></figure>


<p>Search for one document on elasticsearch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -u user:pass 'https://es.domain/pocket-data/_search?pretty=true&size=1'
</span><span class='line'>{
</span><span class='line'>  "took" : 194,
</span><span class='line'>  "timed_out" : false,
</span><span class='line'>  "_shards" : {
</span><span class='line'>    "total" : 5,
</span><span class='line'>    "successful" : 5,
</span><span class='line'>    "skipped" : 0,
</span><span class='line'>    "failed" : 0
</span><span class='line'>  },
</span><span class='line'>  "hits" : {
</span><span class='line'>    "total" : 766,
</span><span class='line'>    "max_score" : 1.0,
</span><span class='line'>    "hits" : [
</span><span class='line'>      {
</span><span class='line'>        "_index" : "pocket-data",
</span><span class='line'>        "_type" : "_doc",
</span><span class='line'>        "_id" : "2676106577",
</span><span class='line'>        "_score" : 1.0,
</span><span class='line'>        "_source" : {
</span><span class='line'>          "item_id" : "2676106577",
</span><span class='line'>          "time_added" : "2020-05-03",
</span><span class='line'>          "url" : "https://programmaticponderings.com/2019/07/30/managing-aws-infrastructure-as-code-using-ansible-cloudformation-and-codebuild/",
</span><span class='line'>          "title" : "Managing AWS Infrastructure as Code using Ansible, CloudFormation, and CodeBuild",
</span><span class='line'>          "tags" : [
</span><span class='line'>            "ansible",
</span><span class='line'>            "aws",
</span><span class='line'>            "cicd",
</span><span class='line'>            "cloudformation",
</span><span class='line'>            "devops"
</span><span class='line'>          ]
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    ]
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Search for aws tags:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -u x:x 'https://es.domain/pocket-data/_search?q=tags:aws&pretty=true&size=1'
</span><span class='line'>{
</span><span class='line'>  "took" : 101,
</span><span class='line'>  "timed_out" : false,
</span><span class='line'>  "_shards" : {
</span><span class='line'>    "total" : 5,
</span><span class='line'>    "successful" : 5,
</span><span class='line'>    "skipped" : 0,
</span><span class='line'>    "failed" : 0
</span><span class='line'>  },
</span><span class='line'>  "hits" : {
</span><span class='line'>    "total" : 112,
</span><span class='line'>    "max_score" : 2.6346242,
</span><span class='line'>    "hits" : [
</span><span class='line'>      {
</span><span class='line'>        "_index" : "pocket-data",
</span><span class='line'>        "_type" : "_doc",
</span><span class='line'>        "_id" : "2673747670",
</span><span class='line'>        "_score" : 2.6346242,
</span><span class='line'>        "_source" : {
</span><span class='line'>          "item_id" : "2673747670",
</span><span class='line'>          "time_added" : "2019-07-28",
</span><span class='line'>          "url" : "https://github.com/lgoodridge/serverless-chat",
</span><span class='line'>          "title" : "lgoodridge/serverless-chat",
</span><span class='line'>          "tags" : [
</span><span class='line'>            "aws"
</span><span class='line'>          ]
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    ]
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Now what</h2>

<p>Now that our data is in elasticsearch, we can build a search engine or a web application that can list our favorite links per category. I wil write up a post on the search engine in the future.</p>

<h2>Thank You</h2>

<p>If you liked this please send me a shout out on Twitter: <a href="https://twitter.com/ruanbekker">@ruanbekker</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Python RQ for Task Queues in Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/05/16/using-python-rq-for-task-queues-in-python/"/>
    <updated>2020-05-16T21:12:36+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/05/16/using-python-rq-for-task-queues-in-python</id>
    <content type="html"><![CDATA[<p>This is a getting started on python-rq tutorial and I will demonstrate how to work with asynchronous tasks using python redis queue (python-rq).</p>

<h2>What will we be doing</h2>

<p>We want a client to submit 1000&rsquo;s of jobs in a non-blocking asynchronous fashion, and then we will have workers which will consume these jobs from our redis queue, and process those tasks at the rate of what our consumer can handle.</p>

<p>The nice thing about this is that, if our consumer is unavailable for processing the tasks will remain in the queue and once the consumer is ready to consume, the tasks will be executed. It&rsquo;s also nice that its asynchronous, so the client don&rsquo;t have to wait until the task has finished.</p>

<p>We will run a redis server using docker, which will be used to queue all our jobs, then we will go through the basics in python and python-rq such as:</p>

<ul>
<li>Writing a Task</li>
<li>Enqueueing a Job</li>
<li>Getting information from our queue, listing jobs, job statuses</li>
<li>Running our workers to consume from the queue and action our tasks</li>
<li>Basic application which queues jobs to the queue, consumes and action them and monitors the queue</li>
</ul>


<h2>Redis Server</h2>

<p>You will require docker for this next step, to start the redis server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run --rm -itd --name redis -p 6379:6379 redis:alpine</span></code></pre></td></tr></table></div></figure>


<h2>Python RQ</h2>

<p>Install python-rq:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip install rq</span></code></pre></td></tr></table></div></figure>


<p>Create the task which will be actioned by our workers, in our case it will just be a simple function that adds all the numbers from a given string to a list, then adds them up and return the total value.</p>

<p>This is however a very basic task, but its just for demonstration.</p>

<p>Our <code>tasks.py</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def sum_numbers_from_string(string):
</span><span class='line'>    numbers = []
</span><span class='line'>    for each_character in string:
</span><span class='line'>        if each_character.isdigit():
</span><span class='line'>            numbers.append(int(each_character))
</span><span class='line'>    total = 0
</span><span class='line'>    for each_number in numbers:
</span><span class='line'>        total=total+each_number
</span><span class='line'>
</span><span class='line'>    return total</span></code></pre></td></tr></table></div></figure>


<p>To test this locally:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; from tasks import sum_numbers_from_string
</span><span class='line'>&gt;&gt;&gt; sum_numbers_from_string('adje-fje5-sjfdu1s-gdj9-asd1fg')
</span><span class='line'>16</span></code></pre></td></tr></table></div></figure>


<p>Now, lets import redis and redis-queue, with our tasks and instantiate a queue object:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; from redis import Redis
</span><span class='line'>&gt;&gt;&gt; from rq import Connection, Queue, Worker
</span><span class='line'>&gt;&gt;&gt; from tasks import sum_numbers_from_string
</span><span class='line'>&gt;&gt;&gt; redis_connection = Redis(host='localhost', port=6379, db=0)
</span><span class='line'>&gt;&gt;&gt; q = Queue(connection=redis_connection)</span></code></pre></td></tr></table></div></figure>


<h2>Submit a Task to the Queue</h2>

<p>Let&rsquo;s submit a task to the queue:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; result = q.enqueue(sum_numbers_from_string, 'hbj2-plg5-2xf4r1s-f2lf-9sx4ff')</span></code></pre></td></tr></table></div></figure>


<p>We have a couple of properties from <code>result</code> which we can inspect, first let&rsquo;s have a look at the id that we got back when we submitted our task to the queue:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; result.get_id()
</span><span class='line'>'5a607474-cf1b-4fa5-9adb-f8437555a7e7'</span></code></pre></td></tr></table></div></figure>


<p>We can also get the status from our task:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; result.get_status()
</span><span class='line'>'queued'</span></code></pre></td></tr></table></div></figure>


<p>We can also view our results in json format:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; import json
</span><span class='line'>&gt;&gt;&gt; print(json.dumps(result.to_dict(), indent=2, default=str))
</span><span class='line'>{
</span><span class='line'>  "created_at": "2020-05-16T11:56:49.892713Z",
</span><span class='line'>  "data": "b'..\\x00\\x99\\xa0\\x16\\xfe..'",
</span><span class='line'>  "origin": "default",
</span><span class='line'>  "description": "tasks.sum_numbers_from_string('hbj2-plg5-2xf4r1s-f2lf-9sx4ff')",
</span><span class='line'>  "enqueued_at": "2020-05-16T11:56:49.893252Z",
</span><span class='line'>  "started_at": "",
</span><span class='line'>  "ended_at": "",
</span><span class='line'>  "timeout": 180,
</span><span class='line'>  "status": "queued"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>If we dont have context of the job id, we can use <code>get_jobs</code> to get all the jobs which is queued:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; list_jobs = q.get_jobs
</span><span class='line'>&gt;&gt;&gt; list_jobs()
</span><span class='line'>[Job('5a607474-cf1b-4fa5-9adb-f8437555a7e7', enqueued_at=datetime.datetime(2020, 5, 16, 12, 30, 22, 699609))]</span></code></pre></td></tr></table></div></figure>


<p>Then we can loop through the results and get the id like below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; for j in list_jobs():
</span><span class='line'>...     j.id
</span><span class='line'>...
</span><span class='line'>'5a607474-cf1b-4fa5-9adb-f8437555a7e7'</span></code></pre></td></tr></table></div></figure>


<p>Or to get the job id&rsquo;s in a list:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; list_job_ids = q.get_job_ids()
</span><span class='line'>&gt;&gt;&gt; list_job_ids
</span><span class='line'>['5a607474-cf1b-4fa5-9adb-f8437555a7e7']</span></code></pre></td></tr></table></div></figure>


<p>Since we received the job id, we can use <code>fetch_job</code> to get more info about the job:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; fetched_job = q.fetch_job('5a607474-cf1b-4fa5-9adb-f8437555a7e7')
</span><span class='line'>&gt;&gt;&gt; fetched_job
</span><span class='line'>Job('5a607474-cf1b-4fa5-9adb-f8437555a7e7', enqueued_at=datetime.datetime(2020, 5, 16, 12, 30, 22, 699609))</span></code></pre></td></tr></table></div></figure>


<p>And as before we can view it in json format:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; fetched_job.to_dict()
</span><span class='line'>{'created_at': '2020-05-16T12:30:22.698728Z', 'data': b'..x\x9c6\xfe..', 'origin': 'queue1', 'description': "tasks.sum_numbers_from_string('hbj2-plg5-2xf4r1s-f2lf-9sx4ff')", 'enqueued_at': '2020-05-16T12:30:22.699609Z', 'started_at': '', 'ended_at': '', 'timeout': 180, 'status': 'queued'}</span></code></pre></td></tr></table></div></figure>


<p>We can also view the key in redis by passing the job_id:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; result.key_for(job_id='5a607474-cf1b-4fa5-9adb-f8437555a7e7')
</span><span class='line'>b'rq:job:5a607474-cf1b-4fa5-9adb-f8437555a7e7'</span></code></pre></td></tr></table></div></figure>


<p>To view how many jobs are in our queue, we can either do:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; len(q)
</span><span class='line'>1</span></code></pre></td></tr></table></div></figure>


<p>or:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; q.get_job_ids()
</span><span class='line'>['5a607474-cf1b-4fa5-9adb-f8437555a7e7']</span></code></pre></td></tr></table></div></figure>


<h2>Consuming from the Queue</h2>

<p>Now that our task is queued, let&rsquo;s fire of our worker to consume the job from the queue and action the task:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; w = Worker([q], connection=redis_connection)
</span><span class='line'>&gt;&gt;&gt; w.work()
</span><span class='line'>14:05:35 Worker rq:worker:49658973741d4085961e34e9641227dd: started, version 1.4.1
</span><span class='line'>14:05:35 Listening on default...
</span><span class='line'>14:05:35 Cleaning registries for queue: default
</span><span class='line'>14:05:35 default: tasks.sum_numbers_from_string('hbj2-plg5-2xf4r1s-f2lf-9sx4ff') (5a607474-cf1b-4fa5-9adb-f8437555a7e7)
</span><span class='line'>14:05:40 default: Job OK (5a607474-cf1b-4fa5-9adb-f8437555a7e7)
</span><span class='line'>14:05:40 Result is kept for 500 seconds
</span><span class='line'>14:05:59 Warm shut down requested
</span><span class='line'>True</span></code></pre></td></tr></table></div></figure>


<p>Now, when we get the status of our job, you will see that it finished:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; result.get_status()
</span><span class='line'>'finished'</span></code></pre></td></tr></table></div></figure>


<p>And to get the result from our worker:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; result.result
</span><span class='line'>29</span></code></pre></td></tr></table></div></figure>


<p>And like before, if you dont have context of your job id, you can get the job id, then return the result:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; result = fetched_job = q.fetch_job('5a607474-cf1b-4fa5-9adb-f8437555a7e7')
</span><span class='line'>&gt;&gt;&gt; result.result
</span><span class='line'>29</span></code></pre></td></tr></table></div></figure>


<h2>Naming Queues</h2>

<p>We can namespace our tasks into specific queues, for example if we want to create <code>queue1</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; q1 = Queue('queue1', connection=redis_connection)</span></code></pre></td></tr></table></div></figure>


<p>To verify the queue name:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; q1
</span><span class='line'>Queue('queue1')</span></code></pre></td></tr></table></div></figure>


<p>As we can see our queue is empty:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; q1.get_job_ids()
</span><span class='line'>[]</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s submit 10 jobs to our queue:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; from uuid import uuid4
</span><span class='line'>&gt;&gt;&gt; for attempt in range(0,10):
</span><span class='line'>...     random_string = uuid4().hex
</span><span class='line'>...     q1.enqueue(sum_numbers_from_string, random_string)
</span><span class='line'>...
</span><span class='line'>Job('c3f2369d-5b27-40e0-97be-8fe26989a78e', enqueued_at=datetime.datetime(2020, 5, 16, 13, 1, 14, 472508))
</span><span class='line'>Job('06b93517-5dae-4133-8131-e8d35b8dd780', enqueued_at=datetime.datetime(2020, 5, 16, 13, 1, 14, 475604))
</span><span class='line'>Job('81f05aef-4bd6-421b-912d-78b5d419b10a', enqueued_at=datetime.datetime(2020, 5, 16, 13, 1, 14, 478071))
</span><span class='line'>Job('8f14e81f-74fa-44d9-9fc7-e8e7b8c7b76f', enqueued_at=datetime.datetime(2020, 5, 16, 13, 1, 14, 480438))
</span><span class='line'>Job('e8552750-89d2-4538-8c3e-a48c4c3e9a51', enqueued_at=datetime.datetime(2020, 5, 16, 13, 1, 14, 483106))
</span><span class='line'>Job('bf19a0a3-eb0c-4692-b452-67c5ad954094', enqueued_at=datetime.datetime(2020, 5, 16, 13, 1, 14, 486193))
</span><span class='line'>Job('0da3688a-cffa-4ba6-a272-b6cc90942ef6', enqueued_at=datetime.datetime(2020, 5, 16, 13, 1, 14, 488545))
</span><span class='line'>Job('717bd147-615c-458d-8386-9ea6a198e137', enqueued_at=datetime.datetime(2020, 5, 16, 13, 1, 14, 491074))
</span><span class='line'>Job('7cdac5aa-8dc3-40be-a8fc-b273ce61b03b', enqueued_at=datetime.datetime(2020, 5, 16, 13, 1, 14, 493618))
</span><span class='line'>Job('4f7ea527-0695-4e2b-bc8b-3d8807a86390', enqueued_at=datetime.datetime(2020, 5, 16, 13, 1, 14, 496930))</span></code></pre></td></tr></table></div></figure>


<p>To verify the number of jobs in our queue:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; q1.get_job_ids()
</span><span class='line'>['c3f2369d-5b27-40e0-97be-8fe26989a78e', '06b93517-5dae-4133-8131-e8d35b8dd780', '81f05aef-4bd6-421b-912d-78b5d419b10a', '8f14e81f-74fa-44d9-9fc7-e8e7b8c7b76f', 'e8552750-89d2-4538-8c3e-a48c4c3e9a51', 'bf19a0a3-eb0c-4692-b452-67c5ad954094', '0da3688a-cffa-4ba6-a272-b6cc90942ef6', '717bd147-615c-458d-8386-9ea6a198e137', '7cdac5aa-8dc3-40be-a8fc-b273ce61b03b', '4f7ea527-0695-4e2b-bc8b-3d8807a86390']</span></code></pre></td></tr></table></div></figure>


<p>And to count them:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; len(q1)
</span><span class='line'>10</span></code></pre></td></tr></table></div></figure>


<h2>Cleaning the Queue</h2>

<p>Cleaning the queue can either be done with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; q.empty()
</span><span class='line'>10</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; q.delete(delete_jobs=True)</span></code></pre></td></tr></table></div></figure>


<p>Then to verify that our queue is clean:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; q.get_job_ids()
</span><span class='line'>[]</span></code></pre></td></tr></table></div></figure>


<h2>Naming Workers</h2>

<p>The same way that we defined a name for our queue, we can define a name for our workers:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; worker = Worker([q1], connection=redis_connection, name='worker1')
</span><span class='line'>&gt;&gt;&gt; worker.work()</span></code></pre></td></tr></table></div></figure>


<p>Which means you can have different workers consuming jobs from specific queues.</p>

<h2>Resources</h2>

<p>Documentation:</p>

<ul>
<li><a href="https://python-rq.org/docs/">https://python-rq.org/docs/</a></li>
<li><a href="https://python-rq.org/docs/workers/">https://python-rq.org/docs/workers/</a></li>
<li><a href="https://python-rq.org/docs/monitoring/">https://python-rq.org/docs/monitoring/</a></li>
</ul>


<h2>Thank You</h2>

<p>I hope this was usful, if you enjoyed this come say hi on Twitter <a href="https://twitter.com/ruanbekker">@ruanbekker</a> or visit my website at <a href="https://ruan.dev">ruan.dev</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selecting and Returning Specific Data With JQ]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/05/09/selecting-and-returning-specific-data-with-jq/"/>
    <updated>2020-05-09T22:23:00+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/05/09/selecting-and-returning-specific-data-with-jq</id>
    <content type="html"><![CDATA[<p>I was working with curl to get data from a api, and wanted to get a specific url for a specific name within an array. I got it working using jq, and will be demonstrating how I got it working.</p>

<p>The data:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat data.json | jq .
</span><span class='line'>{
</span><span class='line'>  "tag_name": "v1.17.5+k3s1",
</span><span class='line'>  "name": "v1.17.5+k3s1",
</span><span class='line'>  "assets": [
</span><span class='line'>    {
</span><span class='line'>      "url": "https://api.github.com/repos/rancher/k3s/releases/assets/20496869",
</span><span class='line'>      "id": 20496869,
</span><span class='line'>      "name": "e2e-passed-amd64-parallel.log",
</span><span class='line'>      "state": "uploaded",
</span><span class='line'>      "size": 1125136,
</span><span class='line'>      "download_count": 3,
</span><span class='line'>      "created_at": "2020-05-07T00:00:45Z",
</span><span class='line'>      "updated_at": "2020-05-07T00:00:46Z",
</span><span class='line'>      "browser_download_url": "https://github.com/rancher/k3s/releases/download/v1.17.5%2Bk3s1/e2e-passed-amd64-parallel.log"
</span><span class='line'>    },
</span><span class='line'>    {
</span><span class='line'>      "url": "https://api.github.com/repos/rancher/k3s/releases/assets/20496281",
</span><span class='line'>      "id": 20496281,
</span><span class='line'>      "name": "k3s",
</span><span class='line'>      "state": "uploaded",
</span><span class='line'>      "size": 52740096,
</span><span class='line'>      "download_count": 887,
</span><span class='line'>      "created_at": "2020-05-06T23:45:02Z",
</span><span class='line'>      "updated_at": "2020-05-06T23:45:03Z",
</span><span class='line'>      "browser_download_url": "https://github.com/rancher/k3s/releases/download/v1.17.5%2Bk3s1/k3s"
</span><span class='line'>    },
</span><span class='line'>    {
</span><span class='line'>      "url": "https://api.github.com/repos/rancher/k3s/releases/assets/20496655",
</span><span class='line'>      "id": 20496655,
</span><span class='line'>      "name": "k3s-armhf",
</span><span class='line'>      "state": "uploaded",
</span><span class='line'>      "size": 48431104,
</span><span class='line'>      "download_count": 95,
</span><span class='line'>      "created_at": "2020-05-06T23:48:05Z",
</span><span class='line'>      "updated_at": "2020-05-06T23:48:06Z",
</span><span class='line'>      "browser_download_url": "https://github.com/rancher/k3s/releases/download/v1.17.5%2Bk3s1/k3s-armhf"
</span><span class='line'>    }
</span><span class='line'>  ],
</span><span class='line'>  "tarball_url": "",
</span><span class='line'>  "zipball_url": "",
</span><span class='line'>  "body": ""
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Getting the json objects inside the array &ldquo;assets&rdquo;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat data.json | jq '.assets[]'
</span><span class='line'>{
</span><span class='line'>  "url": "https://api.github.com/repos/rancher/k3s/releases/assets/20496869",
</span><span class='line'>  "id": 20496869,
</span><span class='line'>  "name": "e2e-passed-amd64-parallel.log",
</span><span class='line'>  "state": "uploaded",
</span><span class='line'>  "size": 1125136,
</span><span class='line'>  "download_count": 3,
</span><span class='line'>  "created_at": "2020-05-07T00:00:45Z",
</span><span class='line'>  "updated_at": "2020-05-07T00:00:46Z",
</span><span class='line'>  "browser_download_url": "https://github.com/rancher/k3s/releases/download/v1.17.5%2Bk3s1/e2e-passed-amd64-parallel.log"
</span><span class='line'>}
</span><span class='line'>{
</span><span class='line'>  "url": "https://api.github.com/repos/rancher/k3s/releases/assets/20496281",
</span><span class='line'>  "id": 20496281,
</span><span class='line'>  "name": "k3s",
</span><span class='line'>  "state": "uploaded",
</span><span class='line'>  "size": 52740096,
</span><span class='line'>  "download_count": 887,
</span><span class='line'>  "created_at": "2020-05-06T23:45:02Z",
</span><span class='line'>  "updated_at": "2020-05-06T23:45:03Z",
</span><span class='line'>  "browser_download_url": "https://github.com/rancher/k3s/releases/download/v1.17.5%2Bk3s1/k3s"
</span><span class='line'>}
</span><span class='line'>{
</span><span class='line'>  "url": "https://api.github.com/repos/rancher/k3s/releases/assets/20496655",
</span><span class='line'>  "id": 20496655,
</span><span class='line'>  "name": "k3s-armhf",
</span><span class='line'>  "state": "uploaded",
</span><span class='line'>  "size": 48431104,
</span><span class='line'>  "download_count": 95,
</span><span class='line'>  "created_at": "2020-05-06T23:48:05Z",
</span><span class='line'>  "updated_at": "2020-05-06T23:48:06Z",
</span><span class='line'>  "browser_download_url": "https://github.com/rancher/k3s/releases/download/v1.17.5%2Bk3s1/k3s-armhf"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Data containing &ldquo;k3s&rdquo; under the &ldquo;name&rdquo; key::</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat data.json | jq '.assets[] | select(.name | contains("3s"))'
</span><span class='line'>{
</span><span class='line'>  "url": "https://api.github.com/repos/rancher/k3s/releases/assets/20496281",
</span><span class='line'>  "id": 20496281,
</span><span class='line'>  "name": "k3s",
</span><span class='line'>  "state": "uploaded",
</span><span class='line'>  "size": 52740096,
</span><span class='line'>  "download_count": 887,
</span><span class='line'>  "created_at": "2020-05-06T23:45:02Z",
</span><span class='line'>  "updated_at": "2020-05-06T23:45:03Z",
</span><span class='line'>  "browser_download_url": "https://github.com/rancher/k3s/releases/download/v1.17.5%2Bk3s1/k3s"
</span><span class='line'>}
</span><span class='line'>{
</span><span class='line'>  "url": "https://api.github.com/repos/rancher/k3s/releases/assets/20496655",
</span><span class='line'>  "id": 20496655,
</span><span class='line'>  "name": "k3s-armhf",
</span><span class='line'>  "state": "uploaded",
</span><span class='line'>  "size": 48431104,
</span><span class='line'>  "download_count": 95,
</span><span class='line'>  "created_at": "2020-05-06T23:48:05Z",
</span><span class='line'>  "updated_at": "2020-05-06T23:48:06Z",
</span><span class='line'>  "browser_download_url": "https://github.com/rancher/k3s/releases/download/v1.17.5%2Bk3s1/k3s-armhf"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Data that starts with &ldquo;k3s&rdquo; under the &ldquo;name&rdquo; key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat data.json | jq '.assets[] | select(.name | startswith("k3s"))'
</span><span class='line'>{
</span><span class='line'>  "url": "https://api.github.com/repos/rancher/k3s/releases/assets/20496281",
</span><span class='line'>  "id": 20496281,
</span><span class='line'>  "name": "k3s",
</span><span class='line'>  "state": "uploaded",
</span><span class='line'>  "size": 52740096,
</span><span class='line'>  "download_count": 887,
</span><span class='line'>  "created_at": "2020-05-06T23:45:02Z",
</span><span class='line'>  "updated_at": "2020-05-06T23:45:03Z",
</span><span class='line'>  "browser_download_url": "https://github.com/rancher/k3s/releases/download/v1.17.5%2Bk3s1/k3s"
</span><span class='line'>}
</span><span class='line'>{
</span><span class='line'>  "url": "https://api.github.com/repos/rancher/k3s/releases/assets/20496655",
</span><span class='line'>  "id": 20496655,
</span><span class='line'>  "name": "k3s-armhf",
</span><span class='line'>  "state": "uploaded",
</span><span class='line'>  "size": 48431104,
</span><span class='line'>  "download_count": 95,
</span><span class='line'>  "created_at": "2020-05-06T23:48:05Z",
</span><span class='line'>  "updated_at": "2020-05-06T23:48:06Z",
</span><span class='line'>  "browser_download_url": "https://github.com/rancher/k3s/releases/download/v1.17.5%2Bk3s1/k3s-armhf"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Data with the exact name is &ldquo;k3s&rdquo;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat data.json | jq '.assets[] | select(.name == "k3s")'
</span><span class='line'>{
</span><span class='line'>  "url": "https://api.github.com/repos/rancher/k3s/releases/assets/20496281",
</span><span class='line'>  "id": 20496281,
</span><span class='line'>  "name": "k3s",
</span><span class='line'>  "state": "uploaded",
</span><span class='line'>  "size": 52740096,
</span><span class='line'>  "download_count": 887,
</span><span class='line'>  "created_at": "2020-05-06T23:45:02Z",
</span><span class='line'>  "updated_at": "2020-05-06T23:45:03Z",
</span><span class='line'>  "browser_download_url": "https://github.com/rancher/k3s/releases/download/v1.17.5%2Bk3s1/k3s"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Getting only the &ldquo;browser_download_url&rdquo; value from the match:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat data.json | jq '.assets[] | select(.name == "k3s") | .browser_download_url'
</span><span class='line'>"https://github.com/rancher/k3s/releases/download/v1.17.5%2Bk3s1/k3s"</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Server Backups to Google Drive Using the Drive CLI Tool]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/05/08/server-backups-to-google-drive-using-the-drive-cli-tool/"/>
    <updated>2020-05-08T18:43:35+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/05/08/server-backups-to-google-drive-using-the-drive-cli-tool</id>
    <content type="html"><![CDATA[<p>This tutorial will demonstrate how I ship my backups to Google Drive using the <a href="https://github.com/odeke-em/drive/releases/">drive</a> cli utility.</p>

<p>What I really like about the drive cli tool, is that it&rsquo;s super easy to setup and you can easily script your backups to ship it to google drive.</p>

<h2>What we will be doing</h2>

<p>We will setup the drive cli tool, authorize it with your google account, then show how to upload your files to google drive from your terminal and then create a script to automatically upload your data to google drive and then include it in a cronjob.</p>

<h2>Setup Drive CLI Tool</h2>

<p>Head over to the <a href="https://github.com/odeke-em/drive/releases/">drive releases</a> page and get the latest version, at the moment of writing 0.3.9 is the latest. Then we will move it to our path and make it executable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://github.com/odeke-em/drive/releases/download/v0.3.9/drive_linux
</span><span class='line'>$ mv drive_linux /usr/bin/gdrive
</span><span class='line'>$ chmod +x /usr/bin/gdrive</span></code></pre></td></tr></table></div></figure>


<p>You should be getting a output when running version as an argument:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gdrive version
</span><span class='line'>drive version: 0.3.9</span></code></pre></td></tr></table></div></figure>


<h2>Credentials</h2>

<p>Move to your home directory and initialize, this will ask you to access the google accounts web page, where you will be authorizing this application to use your google drive account. Upon succesful authorization, you will get a authorization code that we will need to paste in our terminal.</p>

<p>This will then write the credentials file to ~/.gd/credentials.json`. <strong>Always</strong> remember to keep this file safe.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gdrive init
</span><span class='line'>Visit this URL to get an authorization code
</span><span class='line'>https://accounts.google.com/o/oauth2/auth?access_type=offline&client_id=x&redirect_uri=x&response_type=code&scope=x&state=x
</span><span class='line'>Paste the authorization code: &lt; paste authorization code here &gt;</span></code></pre></td></tr></table></div></figure>


<p>You will now see that the credentials for your application has been saved as seen below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat ~/.gd/credentials.json
</span><span class='line'>{"client_id":"&lt;redacted&gt;","client_secret":"&lt;redacted&gt;","refresh_token":"&lt;redacted&gt;"}</span></code></pre></td></tr></table></div></figure>


<h2>Backup to Google Drive</h2>

<p>On Google Drive, I have a backup folder named <code>Backups</code> and in my local path <code>/opt/backups/</code>, which has the files that I want to backup to google drive:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls /opt/backups/
</span><span class='line'>app.backup-2020-05-05.tar.gz  
</span><span class='line'>app.backup-2020-05-06.tar.gz</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s backup the files to Google Drive, it works as follows <code>gdrive push -destination (path on google drive) (path on local drive)</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gdrive push -destination Backups/demo/app1 /opt/backups/*
</span><span class='line'>Resolving...
</span><span class='line'>+ /Backups/demo/app1/app.backup-2020-05-05.tar.gz
</span><span class='line'>+ /Backups/demo/app1/app.backup-2020-05-06.tar.gz
</span><span class='line'>Addition count 2 src: 26.32MB
</span><span class='line'>Proceed with the changes? [Y/n]:Y</span></code></pre></td></tr></table></div></figure>


<p>As you can see it checks what is on Google Drive and what is on the Local Drive, then determines what needs to be uploaded, and asks you if you want to continue.</p>

<p>If we run that command again, you will see that it does not upload it again, as the content is already on Google Drive:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gdrive push -destination Backups/demo/app1 /opt/backups/*
</span><span class='line'>Resolving...
</span><span class='line'>Everything is up-to-date.</span></code></pre></td></tr></table></div></figure>


<p>To test it out, let&rsquo;s create a new file and verify if it only uploads the new file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ touch file.txt
</span><span class='line'>$ gdrive push -destination Backups/demo/app1 /opt/backups/*
</span><span class='line'>Resolving...
</span><span class='line'>+ /Backups/demo/app1/file.txt
</span><span class='line'>Addition count 1
</span><span class='line'>Proceed with the changes? [Y/n]:y</span></code></pre></td></tr></table></div></figure>


<p>That is all cool and all, but if we want to script this, we don&rsquo;t want to be prompted to continue, we can do this by adding a argument <code>-quiet</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gdrive push -quiet -destination Backups/demo/app1 /opt/*</span></code></pre></td></tr></table></div></figure>


<h2>Scripting our Backup Task</h2>

<p>Let&rsquo;s create a script that makes a local archive, then uploads it to Google Drive, I will create the file: <code>/opt/scripts/backup.sh</code> with the following content:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'># make a local archive
</span><span class='line'>tar -zcvf /opt/backups/app1.backup-$(date +%F).tar.gz \
</span><span class='line'>  /home/me/data/dir1 \
</span><span class='line'>  /home/me/data/dir2 \
</span><span class='line'>  /home/me/data/dir3 \
</span><span class='line'>  /home/me/data/dir4 
</span><span class='line'>
</span><span class='line'># backup to gdrive
</span><span class='line'>sleep 1
</span><span class='line'>gdrive push -quiet -destination Backups/Servers/sysadmins.co.za /opt/backups/sysadmins-blog/*
</span><span class='line'>
</span><span class='line'># delete archives older than 14 days from disk
</span><span class='line'>sleep 1
</span><span class='line'>find /opt/backups/ -type f -name "*.tar.gz" -mtime +14 -exec rm {} \;</span></code></pre></td></tr></table></div></figure>


<p>Make the file executable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod +x /opt/scripts/backup.sh</span></code></pre></td></tr></table></div></figure>


<p>Then, we want to add it as a cronjob so that it runs every night at 23:10 in my case:</p>

<p>Open crotab: <code>crontab -e</code> and add the following entry:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>10 23 * * * /opt/scripts/backup.sh</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Backups are important, especially when you rely on them, and it was never made. Plan ahead to not be in that situation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Setup a Redis Exporter for Prometheus]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/05/05/how-to-setup-a-redis-exporter-for-prometheus/"/>
    <updated>2020-05-05T23:14:52+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/05/05/how-to-setup-a-redis-exporter-for-prometheus</id>
    <content type="html"><![CDATA[<p>In this tutorial we will visualize our Redis Cluster&rsquo;s Metrics with Grafana. In order to do that we will setup a <a href="https://github.com/oliver006/redis_exporter">redis exporter</a> which will authenticate with redis and then configure prometheus to scrape the endpoint of the redis exporter&rsquo;s http endpoint to write the time series data to prometheus.</p>

<h2>Install Golang</h2>

<p>We need to build a binary from the redis exporter project, and we need a Golang environment. If you don&rsquo;t have golang installed already:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /tmp/
</span><span class='line'>$ wget https://dl.google.com/go/go1.14.2.linux-amd64.tar.gz
</span><span class='line'>$ tar -xf go1.14.2.linux-amd64.tar.gz -C /usr/local
</span><span class='line'>$ mkdir -p $HOME/go/{bin,src,pkg}
</span><span class='line'>$ export GOPATH=/go
</span><span class='line'>$ export PATH=${PATH}:${GOPATH}/bin:/usr/local/go/bin</span></code></pre></td></tr></table></div></figure>


<p>You should now be able to get a response:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go version
</span><span class='line'>go version go1.14.2 linux/amd64</span></code></pre></td></tr></table></div></figure>


<h2>Redis Exporter</h2>

<p>Get the source code and build the binary:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/oliver006/redis_exporter.git
</span><span class='line'>$ cd redis_exporter
</span><span class='line'>$ go build .</span></code></pre></td></tr></table></div></figure>


<p>Now the binary should be built, and you should be able to get a response when running the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./redis_exporter --help</span></code></pre></td></tr></table></div></figure>


<p>Copy the binary the the following path:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cp redis_exporter /usr/bin/</span></code></pre></td></tr></table></div></figure>


<p>Then create the systemd unit file, in <code>/etc/systemd/system/redis_exporter.service</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'>Description=Redis Exporter
</span><span class='line'>Wants=network-online.target
</span><span class='line'>After=network-online.target
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>User=root
</span><span class='line'>Group=root
</span><span class='line'>Type=simple
</span><span class='line'>ExecStart=/usr/bin/redis_exporter \
</span><span class='line'>    -web.listen-address ":9121" \
</span><span class='line'>    -redis.addr "redis://ip.of.redis.server:6379" \
</span><span class='line'>    -redis.password "your-strong-redis-password"
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=multi-user.target</span></code></pre></td></tr></table></div></figure>


<p>Reload systemd:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl daemon-relaod</span></code></pre></td></tr></table></div></figure>


<p>Then start the redis exporter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart redis_exporter</span></code></pre></td></tr></table></div></figure>


<p>Now you should be able to get redis metrics when you hit the redis exporter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://127.0.0.1:9121/metrics
</span><span class='line'>...
</span><span class='line'># TYPE redis_commands_duration_seconds_total counter
</span><span class='line'>redis_commands_duration_seconds_total{cmd="auth"} 0.000308
</span><span class='line'>redis_commands_duration_seconds_total{cmd="client"} 0.000251
</span><span class='line'>redis_commands_duration_seconds_total{cmd="config"} 0.010594
</span><span class='line'>redis_commands_duration_seconds_total{cmd="evalsha"} 229.214873
</span><span class='line'>redis_commands_duration_seconds_total{cmd="get"} 0.002343
</span><span class='line'>redis_commands_duration_seconds_total{cmd="info"} 0.013722
</span><span class='line'>redis_commands_duration_seconds_total{cmd="latency"} 0.000557
</span><span class='line'>redis_commands_duration_seconds_total{cmd="lrange"} 11.102069
</span><span class='line'>redis_commands_duration_seconds_total{cmd="ltrim"} 3.731263
</span><span class='line'>redis_commands_duration_seconds_total{cmd="ping"} 2e-05
</span><span class='line'>redis_commands_duration_seconds_total{cmd="rpush"} 3.460981
</span><span class='line'>redis_commands_duration_seconds_total{cmd="script"} 0.008393
</span><span class='line'>redis_commands_duration_seconds_total{cmd="set"} 0.001329
</span><span class='line'>redis_commands_duration_seconds_total{cmd="slowlog"} 0.001308
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<h2>Configure Prometheus</h2>

<p>If you don&rsquo;t have prometheus setup, you can <a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">view this blogpost</a> to get it setup.</p>

<p>Then configure your <code>prometheus.yml</code> and add the target to scrape the redis exporter endpoint to write the time series data into prometheus:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>scrape_configs:
</span><span class='line'>  - job_name: redis_exporter
</span><span class='line'>    static_configs:
</span><span class='line'>    - targets: ['ip.of.redis.exporter:9121']</span></code></pre></td></tr></table></div></figure>


<p>Then restart prometheus, if you have docker redeploy your stack or prometheus container. For prometheus as a service you can use <code>systemctl restart prometheus</code>, depending on your operating system distribution.</p>

<h2>Grafana</h2>

<p>Head over to Grafana, if you don&rsquo;t have Grafana, you can <a href="https://blog.ruanbekker.com/blog/2019/05/17/install-grafana-to-visualize-your-metrics-from-datasources-such-as-prometheus-on-linux/">view this post</a> to install Grafana.</p>

<p>Then import the dashboard <a href="https://grafana.com/grafana/dashboards/763">763</a> and after some time, you should see a dashboard more or less like this:</p>

<p><img width="1280" alt="image" src="https://user-images.githubusercontent.com/567298/81118917-0b58f880-8f2a-11ea-941a-b43696fab9b0.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx Analysis Dashboard Using Grafana and Elasticsearch]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/04/28/nginx-analysis-dashboard-using-grafana-and-elasticsearch/"/>
    <updated>2020-04-28T20:07:22+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/04/28/nginx-analysis-dashboard-using-grafana-and-elasticsearch</id>
    <content type="html"><![CDATA[<p>In this post we will be setting up a <strong>analytical dashboard</strong> using <strong>grafana</strong> to visualize our <strong>nginx access logs</strong>.</p>

<p><img width="1212" alt="grafana-nginx-elasticsearch-prometheus" src="https://user-images.githubusercontent.com/567298/80539136-48ac0c00-89a7-11ea-869d-597da4fa4d92.png"></p>

<p>In this tutorial I will be using my other blog <code>sysadmins.co.za</code> which is being served on nginx. We will also be setting up the other components such as filebeat, logstash, elasticsearch and redis, which require if you would like to follow along.</p>

<h2>The End Result</h2>

<p>We will be able to analyze our Nginx Access logs to answer questions such as:</p>

<ul>
<li>Whats the Top 10 Countries accessing your website in the last 24 hours</li>
<li>Who&rsquo;s the Top 10 Referers?</li>
<li>Whats the most popular page for the past 24 hours?</li>
<li>How does the percentage of 200&rsquo;s vs 404&rsquo;s look like?</li>
<li>Ability to view results based on status code</li>
<li>Everyone loves a World Map to view hotspots</li>
</ul>


<p>At the end of the tutorial, your dashboard will look similar to this:</p>

<p><img width="1123" alt="grafana-elasticsearch-nginx-dashboard" src="https://user-images.githubusercontent.com/567298/80523974-32925180-898f-11ea-96b6-e8e559655745.png"></p>

<h2>High Level Overview</h2>

<p>Our infrastructure will require Nginx with Filebeat, Redis, Logstash, Elasticsearch and Grafana and will look like this:</p>

<p><img width="871" alt="grafana-elasticsearch-logs-setup" src="https://user-images.githubusercontent.com/567298/80526020-6d49b900-8992-11ea-9a39-67331ccc3808.png"></p>

<p>I will drill down how everything is connected:</p>

<ol>
<li>Nginx has a custom <code>log_format</code> that we define, that will write to <code>/var/log/nginx/access_json.log</code>, which will be picked up by <strong>Filebeat</strong> as a input.</li>
<li>and <strong>Filebeat</strong> has an output that pushes the data to <strong>Redis</strong></li>
<li><strong>Logstash</strong> is configured with <strong>Redis</strong> as an input with configured filter section to transform the data and outputs to <strong>Elasticsearch</strong></li>
<li>From <strong>Grafana</strong> we have a configured <strong>Elasticsearch</strong> datasource</li>
<li>Use the grafana template to build this awesome dashboard on Grafana</li>
</ol>


<p>But first, a massive thank you to <a href="https://www.akiraka.net">akiraka</a> for templatizing this dashboard and made it available on <a href="https://grafana.com/orgs/akiraka">grafana</a></p>

<h2>Let&rsquo;s build all the things</h2>

<p>I will be using LXD to run my system/server containers (running ubuntu 18), but you can use a vps, cloud instance, multipass, virtualbox, or anything to host your servers that we will be deploying redis, logstash, etc.</p>

<p>Servers provisioned for this setup:</p>

<ul>
<li>Nginx</li>
<li>Redis</li>
<li>Logstash</li>
<li>Elasticsearch</li>
<li>Grafana</li>
<li>Prometheus</li>
</ul>


<h2>Elasticsearch</h2>

<p>If you don&rsquo;t have a cluster running already, you can follow <strong><a href="https://blog.ruanbekker.com/blog/2019/04/02/setup-a-5-node-highly-available-elasticsearch-cluster/">this tutorial</a></strong> which will help you deploy a HA Elasticsearch Cluster, or if you prefer docker, you can follow <strong><a href="https://blog.ruanbekker.com/blog/2018/04/29/running-a-3-node-elasticsearch-cluster-with-docker-compose-on-your-laptop-for-testing/">this tutorial</a></strong></p>

<h2>Redis</h2>

<p>For our in-memory data store, I will be securing my redis installation with a password as well.</p>

<p>Install redis:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update && apt install redis-server -y</span></code></pre></td></tr></table></div></figure>


<p>Generate a password:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ openssl rand -base64 36
</span><span class='line'>9V5YlWvm8WuC4n1KZLYUEbLruLJLNJEnDzhu4WnAIfgxMmlv</span></code></pre></td></tr></table></div></figure>


<p>In your redis config <code>/etc/redis/redis.conf</code>, you need to change the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>bind 0.0.0.0
</span><span class='line'>port 6379
</span><span class='line'>daemonize yes
</span><span class='line'>supervised systemd
</span><span class='line'>requirepass 9V5YlWvm8WuC4n1KZLYUEbLruLJLNJEnDzhu4WnAIfgxMmlv
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Restart redis to activate your changes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart redis.service</span></code></pre></td></tr></table></div></figure>


<p>and then set and get a key using your password:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ redis-cli -a "9V5YlWvm8WuC4n1KZLYUEbLruLJLNJEnDzhu4WnAIfgxMmlv" set test ok
</span><span class='line'>$ redis-cli -a "9V5YlWvm8WuC4n1KZLYUEbLruLJLNJEnDzhu4WnAIfgxMmlv" get test
</span><span class='line'>ok</span></code></pre></td></tr></table></div></figure>


<h2>Logstash</h2>

<p>On the logstash server, install the requirements:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update && apt install wget apt-transport-https default-jre -y
</span><span class='line'>$ wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add -
</span><span class='line'>$ echo "deb https://artifacts.elastic.co/packages/7.x/apt stable main" | tee -a /etc/apt/sources.list.d/elastic-7.x.list</span></code></pre></td></tr></table></div></figure>


<p>Now the repository for elastic is setup now we need to update and install logstash:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update && apt install logstash -y</span></code></pre></td></tr></table></div></figure>


<p>Once logstash is installed, we need to provide logstash with a configuration, in our scenario we will have a input for redis, a filter section to transform and output as elasticsearch.</p>

<p>Just make sure of the following:</p>

<ul>
<li>Populate the connection details of redis (we will define the key in filebeat later)</li>
<li>Ensure that <code>GeoLite2-City.mmdb</code> is in the path that I have under filter</li>
<li>Populate the connectiond details of Elasticsearch and choose a suitable index name, we will need to provide that index name in Grafana later</li>
</ul>


<p>Create the config: <code>/etc/logstash/conf.d/logs.conf</code> and my config will look like the following. (<a href="https://grafana.com/grafana/dashboards/11190">config source</a>)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>input {
</span><span class='line'>  redis {
</span><span class='line'>    data_type =&gt;"list"
</span><span class='line'>    key =&gt;"nginx_logs"
</span><span class='line'>    host =&gt;"10.47.127.37"
</span><span class='line'>    port =&gt; 6379
</span><span class='line'>    password =&gt; "9V5YlWvm8WuC4n1KZLYUEbLruLJLNJEnDzhu4WnAIfgxMmlv"
</span><span class='line'>    db =&gt; 0
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>filter {
</span><span class='line'>  geoip {
</span><span class='line'>    target =&gt; "geoip"
</span><span class='line'>    source =&gt; "client_ip"
</span><span class='line'>    database =&gt; "/usr/share/logstash/vendor/bundle/jruby/2.5.0/gems/logstash-filter-geoip-6.0.3-java/vendor/GeoLite2-City.mmdb"
</span><span class='line'>    add_field =&gt; [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
</span><span class='line'>    add_field =&gt; [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]
</span><span class='line'>    remove_field =&gt; ["[geoip][latitude]", "[geoip][longitude]", "[geoip][country_code]", "[geoip][country_code2]", "[geoip][country_code3]", "[geoip][timezone]", "[geoip][continent_code]", "[geoip][region_code]"]
</span><span class='line'>  }
</span><span class='line'>  mutate {
</span><span class='line'>    convert =&gt; [ "size", "integer" ]
</span><span class='line'>    convert =&gt; [ "status", "integer" ]
</span><span class='line'>    convert =&gt; [ "responsetime", "float" ]
</span><span class='line'>    convert =&gt; [ "upstreamtime", "float" ]
</span><span class='line'>    convert =&gt; [ "[geoip][coordinates]", "float" ]
</span><span class='line'>    remove_field =&gt; [ "ecs","agent","host","cloud","@version","input","logs_type" ]
</span><span class='line'>  }
</span><span class='line'>  useragent {
</span><span class='line'>    source =&gt; "http_user_agent"
</span><span class='line'>    target =&gt; "ua"
</span><span class='line'>    remove_field =&gt; [ "[ua][minor]","[ua][major]","[ua][build]","[ua][patch]","[ua][os_minor]","[ua][os_major]" ]
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>output {
</span><span class='line'>  elasticsearch {
</span><span class='line'>    hosts =&gt; ["10.47.127.132", "10.47.127.199", "10.47.127.130"]
</span><span class='line'>    #user =&gt; "myusername"
</span><span class='line'>    #password =&gt; "mypassword"
</span><span class='line'>    index =&gt; "logstash-nginx-sysadmins-%{+YYYY.MM.dd}"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Nginx</h2>

<p>On our nginx server we will install nginx and filebeat, then configure nginx to log to a custom log format, and configure filebeat to read the logs and push it to redis.</p>

<p>Installing nginx:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update && apt install nginx -y</span></code></pre></td></tr></table></div></figure>


<p>Installing <a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-installation.html">filebeat</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.6.2-amd64.deb
</span><span class='line'>$ dpkg -i filebeat-7.6.2-amd64.deb</span></code></pre></td></tr></table></div></figure>


<p>Next we will configure nginx to log to a seperate file with a custom log format to include data such as the, request method, upstream response time, hostname, remote address, etc.</p>

<p>Under the <code>http</code> directive in your <code>/etc/nginx/nginx.conf</code>, configure the <code>log_format</code> and <code>access_log</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http {
</span><span class='line'>...
</span><span class='line'>        log_format json_logs '{"@timestamp":"$time_iso8601","host":"$hostname",'
</span><span class='line'>                            '"server_ip":"$server_addr","client_ip":"$remote_addr",'
</span><span class='line'>                            '"xff":"$http_x_forwarded_for","domain":"$host",'
</span><span class='line'>                            '"url":"$uri","referer":"$http_referer",'
</span><span class='line'>                            '"args":"$args","upstreamtime":"$upstream_response_time",'
</span><span class='line'>                            '"responsetime":"$request_time","request_method":"$request_method",'
</span><span class='line'>                            '"status":"$status","size":"$body_bytes_sent",'
</span><span class='line'>                            '"request_body":"$request_body","request_length":"$request_length",'
</span><span class='line'>                            '"protocol":"$server_protocol","upstreamhost":"$upstream_addr",'
</span><span class='line'>                            '"file_dir":"$request_filename","http_user_agent":"$http_user_agent"'
</span><span class='line'>                            '}';
</span><span class='line'>
</span><span class='line'>        access_log  /var/log/nginx/access_json.log  json_logs;
</span><span class='line'>...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Restart nginx to activate the changes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart nginx</span></code></pre></td></tr></table></div></figure>


<p>Next we need to configure filebeat to read from our nginx access logs and configure the output to redis. Edit the filebeat config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/filebeat/filebeat.yml</span></code></pre></td></tr></table></div></figure>


<p>And configure filebeat with the following and make sure to change the values where you need to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># config source: akiraka.net
</span><span class='line'># filebeat input 
</span><span class='line'>filebeat.inputs:
</span><span class='line'>- type: log
</span><span class='line'>  enabled: true
</span><span class='line'>  paths:
</span><span class='line'>    - /var/log/nginx/access_json.log
</span><span class='line'>  json.keys_under_root: true
</span><span class='line'>  json.overwrite_keys: true
</span><span class='line'>  json.add_error_key: true
</span><span class='line'>
</span><span class='line'># filebeat modules 
</span><span class='line'>filebeat.config.modules:
</span><span class='line'>  # remove the escape character before the wildcard below
</span><span class='line'>  path: ${path.config}/modules.d/\*.yml
</span><span class='line'>  reload.enabled: false
</span><span class='line'>
</span><span class='line'># elasticsearch template settings
</span><span class='line'>setup.template.settings:
</span><span class='line'>  index.number_of_shards: 3
</span><span class='line'>
</span><span class='line'># redis output
</span><span class='line'>output.redis:
</span><span class='line'>  hosts: ["10.47.127.140:6379"]
</span><span class='line'>  password: "9V5YlWvm8WuC4n1KZLYUEbLruLJLNJEnDzhu4WnAIfgxMmlv"
</span><span class='line'>  key: "nginx_logs"
</span><span class='line'>  # ^ this key needs to be the same as the configured key on logstash 
</span><span class='line'>  db: 0
</span><span class='line'>  timeout: 5</span></code></pre></td></tr></table></div></figure>


<p>Restart filebeat:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart filebeat</span></code></pre></td></tr></table></div></figure>


<p>When you make a request to your nginx server, you should see a similar logline like below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tail -n1 /var/log/nginx/access_elg.log
</span><span class='line'>{"@timestamp":"2020-04-28T20:05:03+00:00","host":"sysadmins-blog","server_ip":"10.68.100.89","client_ip":"x.x.x.x","xff":"x.x.x.x","domain":"sysadmins.co.za","url":"/","referer":"-","args":"-","upstreamtime":"0.310","responsetime":"0.312","request_method":"GET","status":"200","size":"4453","request_body":"-","request_length":"519","protocol":"HTTP/1.1","upstreamhost":"127.0.0.1:2369","file_dir":"/var/www/web/root/","http_user_agent":"Mozilla/5.0"}</span></code></pre></td></tr></table></div></figure>


<h2>Grafana</h2>

<p>On the grafana server, install grafana:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update && apt install apt-transport-https software-properties-common wget -y
</span><span class='line'>$ wget -q -O - https://packages.grafana.com/gpg.key | apt-key add -
</span><span class='line'>$ add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"
</span><span class='line'>$ apt update && apt install grafana -y</span></code></pre></td></tr></table></div></figure>


<p>Now we need to install a couple of grafana plugins that we require for our dashboards:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ grafana-cli plugins install grafana-worldmap-panel
</span><span class='line'>$ grafana-cli plugins install grafana-clock-panel
</span><span class='line'>$ grafana-cli plugins install grafana-piechart-panel</span></code></pre></td></tr></table></div></figure>


<p>Now reload systemd and restart grafana:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl daemon-reload
</span><span class='line'>$ systemctl restart grafana-server</span></code></pre></td></tr></table></div></figure>


<p>If you would like to setup nginx as a reverse proxy to grafana, you can have a look at <strong><a href="https://blog.ruanbekker.com/blog/2019/05/17/install-grafana-to-visualize-your-metrics-from-datasources-such-as-prometheus-on-linux/">this blogpost</a></strong> on how to do that.</p>

<h2>Prometheus</h2>

<p>If you don&rsquo;t have Prometheus installed already, you can view my <a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">blogpost</a> on setting up Prometheus.</p>

<h2>Verifying</h2>

<p>To verify if everything works as expected, make a request to your nginx server, then have a look if your index count on elasticsearch increases:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://elasticsearch-endpoint-address:9200/_cat/indices/logstash-*?v
</span><span class='line'>health status index                               uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>green  open   logstash-nginx-x-2020.04.28 SWbHCer-TeOcw6bi_695Xw   5   1      58279            0     32.6mb         16.3mb</span></code></pre></td></tr></table></div></figure>


<p>If you dont, make sure that all the processes are running on the servers, and that each server is able to reach each other on the targeted ports.</p>

<h2>The Fun Part: Dashboarding</h2>

<p>Now that we have everything in place, the fun part is to build the dashboards, first we need to configure elasticsearch as our datasource and specify the index we want to read from. Open grafana on <code>http://ip.of.grafana.server:3000</code>, default user and password is admin.</p>

<p>Select config on the left and select datasources, add a datasource, select elasticsearch and specify your datasource name, mine is <strong>es-nginx</strong> in this example, the <strong>url</strong> of your elasticsearch endpoint, if you have secured your elasticsearch cluster with authentication, provide the auth, then provide your index name as as provided in logstash.</p>

<p>My configured index will look like <code>logstash-nginx-sysadmins-YYYY-MM-dd</code>, therefore I specified index name as <code>logstash-nginx-sysadmins-*</code> and my timefield as <code>@timestamp</code>, the version, and select save and test, which would look like this:</p>

<p><img width="569" alt="AC025E20-38D0-4676-B576-9F5932913BA1" src="https://user-images.githubusercontent.com/567298/80538019-48ab0c80-89a5-11ea-8f4f-a30384991ab9.png"></p>

<p>Now we will import our dashboard template (Once again a massive thank you to <a href="https://grafana.com/grafana/dashboards/11190">Shenxiang, Qingkong and Ruixi</a> which made this template available!), head over to dashboards and select import, then provide the ID: <code>11190</code>, after that it will prompt what your dashboard needs to be named and you need to select your Elasticsearch and Prometheus datasource.</p>

<p>The description of the panels is in Chinese, if you would like it in english, I have translated mine to english and made the dashboard json available in <a href="https://gist.githubusercontent.com/ruanbekker/699fca31ebd7223b675d0acd25ea84bc/raw/316a015a0464989117cd72a1e8e056854d582178/nginx_grafana_dashboard_11190_eng.json">this gist</a></p>

<h2>Tour of our Dashboard Panels</h2>

<p>Looking at our hotspot map:</p>

<p><img width="1212" alt="grafana" src="https://user-images.githubusercontent.com/567298/80539136-48ac0c00-89a7-11ea-869d-597da4fa4d92.png"></p>

<p>The summary and top 10 pages:</p>

<p><img width="1243" alt="76E8CBE1-4B03-4226-8041-B98879BAD66A" src="https://user-images.githubusercontent.com/567298/80540596-e86a9980-89a9-11ea-924d-29f777a7c15a.png"></p>

<p>Page views, historical trends:</p>

<p><img width="1239" alt="grafana-page-views" src="https://user-images.githubusercontent.com/567298/80539728-4eeeb800-89a8-11ea-959e-5e2915387b7b.png"></p>

<p>Top 10 referers and table data of our logs:</p>

<p><img width="1235" alt="B17C4F55-DF91-4EA0-9669-C237FF560459" src="https://user-images.githubusercontent.com/567298/80540381-772ae680-89a9-11ea-9067-61cd519c9d8a.png"></p>

<h2>Thank You</h2>

<p>I hope this was useful, if you have any issues with this feel free to reach out to me. If you like my work, please feel free to share this post, follow me on Twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> or visit me on my <strong><a href="https://ruan.dev">website</a></strong></p>

<p><a href="https://ko-fi.com/A6423ZIQ"><img src="https://www.ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Do Port Forwarding With Iptables]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/04/27/how-to-do-port-forwarding-with-iptables/"/>
    <updated>2020-04-27T13:42:41+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/04/27/how-to-do-port-forwarding-with-iptables</id>
    <content type="html"><![CDATA[<p>This is a quick post on how to do port forwarding with iptables on linux.</p>

<h2>What would we like to achieve</h2>

<p>We have a lxc container running a <strong>redis</strong> server and we would like to do port forwarding so that we can reach the server over the internet</p>

<h2>LXC Host</h2>

<p>On our host that hosts our lxc containers, we want to forward the host port <code>5379</code> to <code>6379</code> of the container (10.37.117.37), so we can connect on a non-standard redis port:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -t nat -I PREROUTING -p tcp --dport 5379 -j DNAT --to-destination 10.37.117.37:6379</span></code></pre></td></tr></table></div></figure>


<h2>Test over the Internet</h2>

<p>Test the connection by connecting to the LXC Host&rsquo;s IP:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ redis-cli -h lxc.host.ip.address -p 5379 -a "${REDIS_PW}"  get test
</span><span class='line'>"It's working!"</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thanks for reading my short post on how to use iptables to do port forwarding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Set a Static IP in Ubuntu 18]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/04/27/how-to-set-a-static-ip-in-ubuntu-18/"/>
    <updated>2020-04-27T13:39:19+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/04/27/how-to-set-a-static-ip-in-ubuntu-18</id>
    <content type="html"><![CDATA[<p>This is a short post on how to set a <strong>static ip address</strong> on <strong>ubuntu 18.04</strong> using <strong>netplan</strong></p>

<h2>Netplan</h2>

<p>At the moment my network interfaces uses dhcp, and we can see that below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/netplan/50-cloud-init.yaml
</span><span class='line'>network:
</span><span class='line'>    version: 2
</span><span class='line'>    ethernets:
</span><span class='line'>        eth0:
</span><span class='line'>            dhcp4: true</span></code></pre></td></tr></table></div></figure>


<p>Changing the configuration to static:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/netplan/50-cloud-init.yaml
</span><span class='line'>network:
</span><span class='line'>    version: 2
</span><span class='line'>    ethernets:
</span><span class='line'>        eth0:
</span><span class='line'>            dhcp4: false
</span><span class='line'>            addresses: [10.37.117.37/24]
</span><span class='line'>            gateway4: 10.37.117.1
</span><span class='line'>            nameservers:
</span><span class='line'>                addresses: [127.0.0.53,8.8.8.8]</span></code></pre></td></tr></table></div></figure>


<p>After changing the configuration, you need to apply your changes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ netplan apply</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thank you for reading my short post on how to change a static ip address on ubuntu 18.04 using netplan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graphing Covid-19 Stats With Grafana and Elasticsearch Using Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/04/26/graphing-covid-19-stats-with-grafana-and-elasticsearch-using-python/"/>
    <updated>2020-04-26T02:24:27+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/04/26/graphing-covid-19-stats-with-grafana-and-elasticsearch-using-python</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/80421197-62345180-88dc-11ea-9e0a-557199aaf613.png" alt="coronavirus-covid19-grafana-metrics" /></p>

<p>I stumbled upon a <a href="https://github.com/pomber/covid19/">github repository</a> that stores time-series data in json format of corona virus / covid19 statistics, which get updated daily.</p>

<p>I was curious to see data about my country and want to see how metrics will look like after our lockdown started, so I decided to consume that data with <strong>Python</strong> and the requests library, then ingest data about covid19 into <strong>Elasticsearch</strong> and the visualize the data with <strong>Grafana</strong>.</p>

<h2>Sample of the Data</h2>

<p>Let&rsquo;s have a peek at the data to determine how we will use it to write to Elasticsearch. Let&rsquo;s consume the data with python:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; import requests
</span><span class='line'>&gt;&gt;&gt; import json
</span><span class='line'>&gt;&gt;&gt; response = requests.get('https://pomber.github.io/covid19/timeseries.json').json()</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s determine the data type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; type(response)
</span><span class='line'>&lt;type 'dict'&gt;</span></code></pre></td></tr></table></div></figure>


<p>Now as it&rsquo;s a dictionary, let&rsquo;s look at they keys:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; response.keys()
</span><span class='line'>[u'Canada', u'Sao Tome and Principe', u'Lithuania', u'Cambodia', u'Ethiopia',....</span></code></pre></td></tr></table></div></figure>


<p>So let&rsquo;s take a look how the data looks like if we do a lookup for Canada:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; type(response['Canada'])
</span><span class='line'>&lt;type 'list'&gt;</span></code></pre></td></tr></table></div></figure>


<p>As we can see it&rsquo;s a list, we can count how many items is in our list:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; len(response['Canada'])
</span><span class='line'>94</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s peek at the data by accessing our first index of our list:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; response['Canada'][0]
</span><span class='line'>{u'date': u'2020-1-22', u'confirmed': 0, u'recovered': 0, u'deaths': 0}</span></code></pre></td></tr></table></div></figure>


<p>So our data will look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  [
</span><span class='line'>    'Country Name': [
</span><span class='line'>      {
</span><span class='line'>        'date': '&lt;string&gt;', 
</span><span class='line'>        'confirmed': '&lt;int&gt;', 
</span><span class='line'>        'recovered': '&lt;int&gt;', 
</span><span class='line'>        'deaths': '&lt;int&gt;'
</span><span class='line'>      },
</span><span class='line'>      {
</span><span class='line'>        'date': '&lt;string&gt;',
</span><span class='line'>        'confirmed': '&lt;int&gt;',
</span><span class='line'>        'recovered': '&lt;int&gt;',
</span><span class='line'>        'deaths': '&lt;int&gt;'
</span><span class='line'>      },
</span><span class='line'>    ],
</span><span class='line'>    'Country Name': [
</span><span class='line'>      ...
</span><span class='line'>    ]
</span><span class='line'>  ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Some issues we need to fix</h2>

<p>As you can see the date is displayed as <code>2020-1-22</code> instead of <code>2020-01-22</code>, I want to make it consistent as I will be ingesting the data with a <code>@timestamp</code> key which we will use the date from the returned data. So first we will need to convert that before we ingest the data.</p>

<p>The other thing I was thinking of is that, if for some reason we need to ingest this data again, we dont want to sit with duplicates (same document with different _id&rsquo;s), so for that I decided to generate a hash value that consist of the date and the country, so if the script run to ingest the data, it will use the same id for the specific document, which would just overwrite it, therefore we won&rsquo;t sit with duplicates.</p>

<p>So the idea is to ingest a document to elasticsearch like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>doc = {
</span><span class='line'>    "_id": "sha_hash_value",
</span><span class='line'>    "day": "2020-01-22",
</span><span class='line'>    "timestamp": "@2020-01-22 00:00:00",
</span><span class='line'>    "country": "CountryName",
</span><span class='line'>    "confirmed": 0,
</span><span class='line'>    "recovered": 0,
</span><span class='line'>    "deaths": 0
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>How we will ingest the data</h2>

<p>The first run will load all the data and ingest all the data up to the current day to elasticsearch. Once that is done, we will add code to our script to only ingest the most recent day&rsquo;s data into elasticsearch, which we will control with a cronjob.</p>

<p>Create a index with a mapping to let Elasticsearch know <code>timestamp</code> will be a date field:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XPUT -H 'Content-Type: application/json' \
</span><span class='line'>  -u username:pass 'https://es.domain.com/coronastats' -d \
</span><span class='line'>  '{"mappings": {"foo1": {"properties": {"timestamp" : {"type" : "date","format" : "yyyy-MM-dd HH:mm:ss"}}}}}'</span></code></pre></td></tr></table></div></figure>


<p>Once our index is created, create the python script that will load the data, loop through each country&rsquo;s daily data and ingest it into elasticsearch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">datetime</span> <span class="kn">as</span> <span class="nn">dt</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">hashlib</span>
</span><span class='line'>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s">&#39;https://pomber.github.io/covid19/timeseries.json&#39;</span>
</span><span class='line'><span class="n">elasticsearch_url</span> <span class="o">=</span> <span class="s">&quot;https://es.domain.com&quot;</span>
</span><span class='line'><span class="n">elasticsearch_username</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">elasticsearch_password</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">api_response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">convert_datestamp</span><span class="p">(</span><span class="n">day</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">day</span><span class="p">,</span> <span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s">&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">hash_function</span><span class="p">(</span><span class="n">country</span><span class="p">,</span> <span class="n">date</span><span class="p">):</span>
</span><span class='line'>    <span class="n">string_to_hash</span> <span class="o">=</span> <span class="n">country</span> <span class="o">+</span> <span class="n">date</span>
</span><span class='line'>    <span class="n">hash_obj</span>  <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">(</span><span class="n">string_to_hash</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">hash_value</span> <span class="o">=</span> <span class="n">hash_obj</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">hash_value</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">map_es_doc</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">country</span><span class="p">):</span>
</span><span class='line'>    <span class="n">doc</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;day&quot;</span><span class="p">:</span> <span class="n">payload</span><span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="s">&quot;timestamp&quot;</span><span class="p">:</span> <span class="n">convert_datestamp</span><span class="p">(</span><span class="n">payload</span><span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">]),</span>
</span><span class='line'>        <span class="s">&quot;country&quot;</span><span class="p">:</span> <span class="n">country</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;confirmed&quot;</span><span class="p">:</span> <span class="n">payload</span><span class="p">[</span><span class="s">&#39;confirmed&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="s">&quot;recovered&quot;</span><span class="p">:</span> <span class="n">payload</span><span class="p">[</span><span class="s">&#39;recovered&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="s">&quot;deaths&quot;</span><span class="p">:</span> <span class="n">payload</span><span class="p">[</span><span class="s">&#39;deaths&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">doc</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">ingest</span><span class="p">(</span><span class="n">doc_id</span><span class="p">,</span> <span class="n">payload</span><span class="p">):</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">put</span><span class="p">(</span>
</span><span class='line'>        <span class="n">elasticsearch_url</span> <span class="o">+</span> <span class="s">&#39;/coronastats/coronastats/&#39;</span> <span class="o">+</span> <span class="n">doc_id</span><span class="p">,</span>
</span><span class='line'>        <span class="n">auth</span><span class="o">=</span><span class="p">(</span><span class="n">elasticsearch_username</span><span class="p">,</span> <span class="n">elasticsearch_password</span><span class="p">),</span>
</span><span class='line'>        <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;content-type&#39;</span><span class="p">:</span> <span class="s">&#39;application/json&#39;</span><span class="p">},</span>
</span><span class='line'>        <span class="n">json</span><span class="o">=</span><span class="n">payload</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">country</span> <span class="ow">in</span> <span class="n">api_response</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">each_payload</span> <span class="ow">in</span> <span class="n">api_response</span><span class="p">[</span><span class="n">country</span><span class="p">]:</span>
</span><span class='line'>            <span class="n">doc_id</span> <span class="o">=</span> <span class="n">hash_function</span><span class="p">(</span><span class="n">country</span><span class="p">,</span> <span class="n">each_payload</span><span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">])</span>
</span><span class='line'>            <span class="n">doc</span> <span class="o">=</span> <span class="n">map_es_doc</span><span class="p">(</span><span class="n">each_payload</span><span class="p">,</span> <span class="n">country</span><span class="p">)</span>
</span><span class='line'>            <span class="n">response</span> <span class="o">=</span> <span class="n">ingest</span><span class="p">(</span><span class="n">doc_id</span><span class="p">,</span> <span class="n">doc</span><span class="p">)</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the script to ingest all the data into elasticsearch. Now we will create the script that will run daily to only ingest the previous day&rsquo;s data, so that we only ingest the latest data and not all the data from scratch again.</p>

<p>I will create this file in <code>/opt/scripts/corona_covid19_ingest.py</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">datetime</span> <span class="kn">as</span> <span class="nn">dt</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">hashlib</span>
</span><span class='line'>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s">&#39;https://pomber.github.io/covid19/timeseries.json&#39;</span>
</span><span class='line'><span class="n">elasticsearch_url</span> <span class="o">=</span> <span class="s">&quot;https://es.domain.com&quot;</span>
</span><span class='line'><span class="n">elasticsearch_username</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">elasticsearch_password</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">api_response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">yesterdays_date</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">()</span> <span class="o">-</span> <span class="n">dt</span><span class="o">.</span><span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">convert_datestamp</span><span class="p">(</span><span class="n">day</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">day</span><span class="p">,</span> <span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s">&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">hash_function</span><span class="p">(</span><span class="n">country</span><span class="p">,</span> <span class="n">date</span><span class="p">):</span>
</span><span class='line'>    <span class="n">string_to_hash</span> <span class="o">=</span> <span class="n">country</span> <span class="o">+</span> <span class="n">date</span>
</span><span class='line'>    <span class="n">hash_obj</span>  <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">(</span><span class="n">string_to_hash</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">hash_value</span> <span class="o">=</span> <span class="n">hash_obj</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">hash_value</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">map_es_doc</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">country</span><span class="p">):</span>
</span><span class='line'>    <span class="n">doc</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;day&quot;</span><span class="p">:</span> <span class="n">payload</span><span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="s">&quot;timestamp&quot;</span><span class="p">:</span> <span class="n">convert_datestamp</span><span class="p">(</span><span class="n">payload</span><span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">]),</span>
</span><span class='line'>        <span class="s">&quot;country&quot;</span><span class="p">:</span> <span class="n">country</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;confirmed&quot;</span><span class="p">:</span> <span class="n">payload</span><span class="p">[</span><span class="s">&#39;confirmed&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="s">&quot;recovered&quot;</span><span class="p">:</span> <span class="n">payload</span><span class="p">[</span><span class="s">&#39;recovered&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="s">&quot;deaths&quot;</span><span class="p">:</span> <span class="n">payload</span><span class="p">[</span><span class="s">&#39;deaths&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">doc</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">ingest</span><span class="p">(</span><span class="n">doc_id</span><span class="p">,</span> <span class="n">payload</span><span class="p">):</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">put</span><span class="p">(</span>
</span><span class='line'>        <span class="n">elasticsearch_url</span> <span class="o">+</span> <span class="s">&#39;/coronastats/coronastats/&#39;</span> <span class="o">+</span> <span class="n">doc_id</span><span class="p">,</span>
</span><span class='line'>        <span class="n">auth</span><span class="o">=</span><span class="p">(</span><span class="n">elasticsearch_username</span><span class="p">,</span> <span class="n">elasticsearch_password</span><span class="p">),</span>
</span><span class='line'>        <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;content-type&#39;</span><span class="p">:</span> <span class="s">&#39;application/json&#39;</span><span class="p">},</span>
</span><span class='line'>        <span class="n">json</span><span class="o">=</span><span class="n">payload</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">country</span> <span class="ow">in</span> <span class="n">api_response</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">each_payload</span> <span class="ow">in</span> <span class="n">api_response</span><span class="p">[</span><span class="n">country</span><span class="p">]:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">convert_datestamp</span><span class="p">(</span><span class="n">each_payload</span><span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="nb">str</span><span class="p">(</span><span class="n">yesterdays_date</span><span class="p">):</span>
</span><span class='line'>                <span class="k">print</span><span class="p">(</span><span class="s">&quot;ingesting latest data for {country}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">country</span><span class="o">=</span><span class="n">country</span><span class="p">))</span>
</span><span class='line'>                <span class="n">doc_id</span> <span class="o">=</span> <span class="n">hash_function</span><span class="p">(</span><span class="n">country</span><span class="p">,</span> <span class="n">each_payload</span><span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">])</span>
</span><span class='line'>                <span class="n">doc</span> <span class="o">=</span> <span class="n">map_es_doc</span><span class="p">(</span><span class="n">each_payload</span><span class="p">,</span> <span class="n">country</span><span class="p">)</span>
</span><span class='line'>                <span class="n">response</span> <span class="o">=</span> <span class="n">ingest</span><span class="p">(</span><span class="n">doc_id</span><span class="p">,</span> <span class="n">doc</span><span class="p">)</span>
</span><span class='line'>                <span class="k">print</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only difference with this script is that it checks if the date is equals to yesterday&rsquo;s date, and if so the document will be prepared and ingested into elasticsearch. We will create a cronjob that runs this script every morning at 08:45.</p>

<p>First make the file executable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">scripts</span><span class="o">/</span><span class="n">corona_covid19_ingest</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run <code>crontab -e</code> and add the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mi">45</span> <span class="mi">8</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">scripts</span><span class="o">/</span><span class="n">corona_covid19_ingest</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Visualize the Data with Grafana</h2>

<p>We will create this dashboard:</p>

<p><img src="https://user-images.githubusercontent.com/567298/80418135-35ca0680-88d7-11ea-83f6-3432a903333d.png" alt="corona-covid-19-dashboard" /></p>

<p>We need a elasticsearch datasource that points to the index that we ingest our data into. Head over to datasources, add a elasticsearch datasource and set the index to <code>coronastats</code> and add the timefield as <code>timestamp</code>.</p>

<p>We want to make the dashboard dynamic to have a <strong>&ldquo;country&rdquo;</strong> dropdown selector, for that go to the dashboard settings, select variable and add a country variable:</p>

<p><img src="https://user-images.githubusercontent.com/567298/80419463-7cb8fb80-88d9-11ea-959f-8f37ae3f6dc7.png" alt="covid19-dashboard-variables" /></p>

<p>First panel: &ldquo;Reported Cases per Day&rdquo;:</p>

<p><img src="https://user-images.githubusercontent.com/567298/80419572-af62f400-88d9-11ea-802e-7eeacb61ee19.png" alt="covid19-reported-cases" /></p>

<p>Second panel: &ldquo;Confirmed Cases&rdquo;:</p>

<p><img src="https://user-images.githubusercontent.com/567298/80419675-db7e7500-88d9-11ea-98a5-3aae4d9a6c87.png" alt="covid19-confirmed-cases" /></p>

<p>Third panel: &ldquo;Recovered Cases&rdquo;:</p>

<p><img src="https://user-images.githubusercontent.com/567298/80419750-fa7d0700-88d9-11ea-82a3-f26ff8c807ef.png" alt="covid19-recovered-cases" /></p>

<p>Now, if we select Italy, Spain and France as an example, we will see something like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/80419966-56479000-88da-11ea-8f30-39ac3da27007.png" alt="covid19-country-stats" /></p>

<h2>Thank You</h2>

<p>Although its pretty cool visualizing data, the issue that we are in at the moment with coronavirus / covid19 is really scary and we should all do our part to try and stay home, sanitize and try not to spread the virus. Together we can all do great things by reducing the spread of this virus.</p>

<p>Stay safe everyone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx Metrics on Prometheus With the Nginx Log Exporter]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/04/25/nginx-metrics-on-prometheus-with-the-nginx-log-exporter/"/>
    <updated>2020-04-25T01:42:35+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/04/25/nginx-metrics-on-prometheus-with-the-nginx-log-exporter</id>
    <content type="html"><![CDATA[<p>In this post we will setup a nginx log exporter for prometeus to get metrics of our nginx web server, such as number of requests per method, status code, processed bytes etc. Then we will configure prometheus to scrape our nginx metric endpoint and also create a basic dashbaord to visualize our data.</p>

<p>If you follow along on this tutorial, it assumes that you have <a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">Prometheus</a> and <a href="https://blog.ruanbekker.com/blog/2019/05/17/install-grafana-to-visualize-your-metrics-from-datasources-such-as-prometheus-on-linux/">Grafana</a> up and running. But if not the embedded links will take you to the blog posts to set it up.</p>

<h2>Nginx Webserver</h2>

<p>Install nginx:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update
</span><span class='line'>$ apt install nginx -y</span></code></pre></td></tr></table></div></figure>


<p>Configure your nginx server&rsquo;s log format to match the nginx log exporter&rsquo;s expected format, we will name it custom:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  log_format custom   '$remote_addr - $remote_user [$time_local] '
</span><span class='line'>                      '"$request" $status $body_bytes_sent '
</span><span class='line'>                      '"$http_referer" "$http_user_agent" "$http_x_forwarded_for"';
</span></code></pre></td></tr></table></div></figure>


<p>Edit your main nginx config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/nginx/nginx.conf</span></code></pre></td></tr></table></div></figure>


<p>This is how my complete config looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user www-data;
</span><span class='line'>worker_processes auto;
</span><span class='line'>pid /run/nginx.pid;
</span><span class='line'># remote the escape char if you are going to use this config
</span><span class='line'>include /etc/nginx/modules-enabled/\*.conf;
</span><span class='line'>
</span><span class='line'>events {
</span><span class='line'>  worker_connections 768;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>http {
</span><span class='line'>
</span><span class='line'>  # basic config
</span><span class='line'>  sendfile on;
</span><span class='line'>  tcp_nopush on;
</span><span class='line'>  tcp_nodelay on;
</span><span class='line'>  keepalive_timeout 65;
</span><span class='line'>  types_hash_max_size 2048;
</span><span class='line'>  include /etc/nginx/mime.types;
</span><span class='line'>  default_type application/octet-stream;
</span><span class='line'>
</span><span class='line'>  # ssl config
</span><span class='line'>  ssl_protocols TLSv1 TLSv1.1 TLSv1.2; 
</span><span class='line'>  ssl_prefer_server_ciphers on;
</span><span class='line'>
</span><span class='line'>  # logging config
</span><span class='line'>  log_format custom   '$remote_addr - $remote_user [$time_local] '
</span><span class='line'>                      '"$request" $status $body_bytes_sent '
</span><span class='line'>                      '"$http_referer" "$http_user_agent" "$http_x_forwarded_for"';
</span><span class='line'>
</span><span class='line'>  access_log /var/log/nginx/access.log custom;
</span><span class='line'>  error_log /var/log/nginx/error.log;
</span><span class='line'>
</span><span class='line'>  # gzip
</span><span class='line'>  gzip on;
</span><span class='line'>
</span><span class='line'>  # virtual host config
</span><span class='line'>  include /etc/nginx/conf.d/myapp.conf;
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>I will delete the default host config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rm -rf /etc/nginx/sites-enabled/default</span></code></pre></td></tr></table></div></figure>


<p>And then create my <code>/etc/nginx/conf.d/myapp.conf</code> as referenced in my main config, with the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>
</span><span class='line'>  listen 80 default_server;
</span><span class='line'>  # remove the escape char if you are going to use this config
</span><span class='line'>  server_name \_;
</span><span class='line'>
</span><span class='line'>  root /var/www/html;
</span><span class='line'>  index index.html index.htm index.nginx-debian.html;
</span><span class='line'>
</span><span class='line'>  location / {
</span><span class='line'>    try_files $uri $uri/ =404;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>When you make a GET request to your server, you should see something like this in your access log:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>10x.1x.2x.1x - - [25/Apr/2020:00:31:11 +0000] "GET / HTTP/1.1" 200 396 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1 Safari/605.1.15" "-"</span></code></pre></td></tr></table></div></figure>


<h2>Nginx Log Exporter</h2>

<p>Head over to the <a href="https://github.com/martin-helmich/prometheus-nginxlog-exporter/releases">prometheus-nginxlog-exporter releases</a> page and get the latest version, in the time of writing it is v1.4.0:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://github.com/martin-helmich/prometheus-nginxlog-exporter/releases/download/v1.4.0/prometheus-nginxlog-exporter</span></code></pre></td></tr></table></div></figure>


<p>Make it executable and move it to your path:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod +x prometheus-nginxlog-exporter
</span><span class='line'>$ mv prometheus-nginxlog-exporter /usr/bin/prometheus-nginxlog-exporter</span></code></pre></td></tr></table></div></figure>


<p>Create the directory where we will place our config for our exporter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir /etc/prometheus</span></code></pre></td></tr></table></div></figure>


<p>Create the config file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/prometheus/nginxlog_exporter.yml</span></code></pre></td></tr></table></div></figure>


<p>You can follow the instructions from <a href="https://github.com/martin-helmich/prometheus-nginxlog-exporter">github.com/prometheus-nginxlog-exporter</a> for more information on configuration, but I will be using the following config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>listen:
</span><span class='line'>  port: 4040
</span><span class='line'>  address: "0.0.0.0"
</span><span class='line'>
</span><span class='line'>consul:
</span><span class='line'>  enable: false
</span><span class='line'>
</span><span class='line'>namespaces:
</span><span class='line'>  - name: myapp
</span><span class='line'>    format: "$remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent \"$http_referer\" \"$http_user_agent\" \"$http_x_forwarded_for\""
</span><span class='line'>    source:
</span><span class='line'>      files:
</span><span class='line'>        - /var/log/nginx/access.log
</span><span class='line'>    labels:
</span><span class='line'>      service: "myapp"
</span><span class='line'>      environment: "production"
</span><span class='line'>      hostname: "myapp.example.com"
</span><span class='line'>    histogram_buckets: [.005, .01, .025, .05, .1, .25, .5, 1, 2.5, 5, 10]</span></code></pre></td></tr></table></div></figure>


<p>Create the systemd unit file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/systemd/system/nginxlog_exporter.service</span></code></pre></td></tr></table></div></figure>


<p>And my configuration that I will be using:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'>Description=Prometheus Log Exporter
</span><span class='line'>Wants=network-online.target
</span><span class='line'>After=network-online.target
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>User=root
</span><span class='line'>Group=root
</span><span class='line'>Type=simple
</span><span class='line'>ExecStart=/usr/bin/prometheus-nginxlog-exporter -config-file /etc/prometheus/nginxlog_exporter.yml
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=multi-user.target</span></code></pre></td></tr></table></div></figure>


<p>Reload systemd and enable the service on boot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl daemon-reload
</span><span class='line'>$ systemctl enable nginxlog_exporter</span></code></pre></td></tr></table></div></figure>


<p>Restart the service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart nginxlog_exporter</span></code></pre></td></tr></table></div></figure>


<p>Ensure that the service is running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl status nginxlog_exporter
</span><span class='line'>
</span><span class='line'>● nginxlog_exporter.service - Prometheus Log Exporter
</span><span class='line'>   Loaded: loaded (/etc/systemd/system/nginxlog_exporter.service; disabled; vendor preset: enabled)
</span><span class='line'>   Active: active (running) since Sat 2020-04-25 00:50:06 UTC; 5s ago
</span><span class='line'> Main PID: 4561 (prometheus-ngin)
</span><span class='line'>    Tasks: 7 (limit: 2317)
</span><span class='line'>   CGroup: /system.slice/nginxlog_exporter.service
</span><span class='line'>           └─4561 /usr/bin/prometheus-nginxlog-exporter -config-file /etc/prometheus/nginxlog_exporter.yml
</span><span class='line'>
</span><span class='line'>Apr 25 00:50:06 nginx-log-exporter systemd[1]: Started Prometheus Log Exporter.
</span><span class='line'>Apr 25 00:50:06 nginx-log-exporter prometheus-nginxlog-exporter[4561]: loading configuration file /etc/prometheus/nginxlog_exporter.yml
</span><span class='line'>Apr 25 00:50:06 nginx-log-exporter prometheus-nginxlog-exporter[4561]: using configuration {Listen:{Port:4040 Address:0.0.0.0} Consul:{Enable:false Address: Datacenter: Scheme: Toke
</span><span class='line'>Apr 25 00:50:06 nginx-log-exporter prometheus-nginxlog-exporter[4561]: starting listener for namespace myapp
</span><span class='line'>Apr 25 00:50:06 nginx-log-exporter prometheus-nginxlog-exporter[4561]: running HTTP server on address 0.0.0.0:4040
</span><span class='line'>Apr 25 00:50:06 nginx-log-exporter prometheus-nginxlog-exporter[4561]: 2020/04/25 00:50:06 Seeked /var/log/nginx/access.log - &{Offset:0 Whence:2}</span></code></pre></td></tr></table></div></figure>


<h2>Test the exporter</h2>

<p>Make a couple of requests against your webserver:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ for each in {1..10}; do curl http://78.141.211.49 ; done</span></code></pre></td></tr></table></div></figure>


<p>So prometheus will now scrape the exporter http endpoint (<code>:4040/metrics</code>) and push the returned values into prometheus. But to get a feel on how the metrics look like, make a request to the metrics endpoint:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:4040/metrics
</span><span class='line'>...
</span><span class='line'># HELP myapp_http_response_count_total Amount of processed HTTP requests
</span><span class='line'># TYPE myapp_http_response_count_total counter
</span><span class='line'>myapp_http_response_count_total{environment="production",hostname="myapp.example.com",method="GET",service="myapp",status="200"} 10
</span><span class='line'>myapp_http_response_count_total{environment="production",hostname="myapp.example.com",method="POST",service="myapp",status="404"} 1
</span><span class='line'># HELP myapp_http_response_size_bytes Total amount of transferred bytes
</span><span class='line'># TYPE myapp_http_response_size_bytes counter
</span><span class='line'>myapp_http_response_size_bytes{environment="production",hostname="myapp.example.com",method="GET",service="myapp",status="200"} 6120
</span><span class='line'>myapp_http_response_size_bytes{environment="production",hostname="myapp.example.com",method="POST",service="myapp",status="404"} 152
</span><span class='line'># HELP myapp_parse_errors_total Total number of log file lines that could not be parsed
</span><span class='line'># TYPE myapp_parse_errors_total counter
</span><span class='line'>myapp_parse_errors_total 0
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>As you can see we are getting metrics such as response count total, response size, errors, etc.</p>

<h2>Configure Prometheus</h2>

<p>Let&rsquo;s configure prometheus to scrape this endpoint. Head over to your prometheus instance, and edit your prometheus config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/prometheus/prometheus.yml</span></code></pre></td></tr></table></div></figure>


<p>Note that in my config I have 2 endpoints that I am scraping, the prometheus endpoint which exists and I will be adding the nginx endpoint, so in full, this is how my config will look like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global:
</span><span class='line'>  scrape_interval: 15s
</span><span class='line'>
</span><span class='line'>scrape_configs:
</span><span class='line'>  - job_name: 'prometheus'
</span><span class='line'>    scrape_interval: 5s
</span><span class='line'>    static_configs:
</span><span class='line'>      - targets: ['localhost:9090']
</span><span class='line'>
</span><span class='line'>  - job_name: 'nginx'
</span><span class='line'>    scrape_interval: 15s
</span><span class='line'>    static_configs:
</span><span class='line'>      - targets: ['ip.of.nginx.exporter:4040']</span></code></pre></td></tr></table></div></figure>


<p>Restart prometheus:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart prometheus</span></code></pre></td></tr></table></div></figure>


<p>To verify that the exporter is working as expected, head over to your prometheus ui on port 9090, and query <code>up{}</code> to see if your exporters are returning 1:</p>

<p><img width="1280" alt="image" src="https://user-images.githubusercontent.com/567298/80267654-7b51be00-86a2-11ea-98e2-a48a5c2a1e4f.png"></p>

<p>We can then query prometheus with <code>myapp_http_response_count_total{service="myapp"}</code> to see the response counts:</p>

<p><img width="1273" alt="image" src="https://user-images.githubusercontent.com/567298/80267823-590c7000-86a3-11ea-9098-28e37e7941d7.png"></p>

<h2>Dashboarding in Grafana</h2>

<p>If you don&rsquo;t have Grafana installed, you can look at my <a href="https://blog.ruanbekker.com/blog/2019/05/17/install-grafana-to-visualize-your-metrics-from-datasources-such-as-prometheus-on-linux/">Grafana Installation</a> post to get that up and running.</p>

<p>If you have not created the Prometheus datasource, on Grafana, head over to the configuration section on your left, select Datasources, add a Prometheus datasource and add the following (this is assuming grafana runs on the prometheus node - which is fine for testing):</p>

<p><img width="592" alt="image" src="https://user-images.githubusercontent.com/567298/80267986-48a8c500-86a4-11ea-9046-3fba601d41cf.png"></p>

<p>Create a new dashboard and add a new panel:</p>

<p><img width="605" alt="image" src="https://user-images.githubusercontent.com/567298/80267884-b3a5cc00-86a3-11ea-8624-797e5310de80.png"></p>

<p>Let&rsquo;s query our data to show us HTTP Method and Status code per 30s: <code>rate(myapp_http_response_count_total{service="myapp"}[$__interval])</code></p>

<p><img width="1271" alt="image" src="https://user-images.githubusercontent.com/567298/80269073-e607f700-86ac-11ea-8d42-4814084dfb4a.png"></p>

<h2>Thank You</h2>

<p>Hope you found this helpful, if you haven&rsquo;t seen my other posts on Prometheus, have a look at the following:</p>

<ul>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">Setup Prometheus</a></li>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/17/install-grafana-to-visualize-your-metrics-from-datasources-such-as-prometheus-on-linux/">Setup Grafana</a></li>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">Setup Node Exporter</a></li>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/17/install-blackbox-exporter-to-monitor-websites-with-prometheus/">Setup Blackbox Exporter</a></li>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/17/install-alertmanager-to-alert-based-on-metrics-from-prometheus/">Setup Alertmanager</a></li>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/17/install-pushgateway-to-expose-metrics-to-prometheus/">Setup Pushgateway</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IPSec Site to Site VPN With Dynamic IPs With Openswan]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/04/19/ipsec-site-to-site-vpn-with-dynamic-ips-with-openswan/"/>
    <updated>2020-04-19T20:58:17+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/04/19/ipsec-site-to-site-vpn-with-dynamic-ips-with-openswan</id>
    <content type="html"><![CDATA[<p>In this tutorial we will setup a site to site ipsec vpn with strongswan and we will enable each server to discover the other vpn server via dynamic dns. We will also append to our config the ability of roadwarriors so that you will be able to connect to your homelab from any mobile or laptop device from any remote source.</p>

<h2>Some background</h2>

<p>Me and one of my friends decided to build a site to site vpn with strongswan so that our homelabs could be reachable to each other over private networks.</p>

<p>One challenge that I thought of is that both of our internet providers don&rsquo;t support static ip addressing, so each vpn server needs to know where to connect to whenever the ip address changes.</p>

<h2>What we will be doing</h2>

<p>We will setup strongswan vpn on both servers and allow the private LAN ranges to be reachable for both sides. As I have a domain hosted on cloudflare, I will be using cloudflare&rsquo;s api to update the A record of each sides dns whenever the IP changes.</p>

<h2>Environment</h2>

<p>On my side, which I will be referring to as <strong>Side-A</strong>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Public DNS Name: side-a.example.com
</span><span class='line'>Private Range: 192.168.0.0/24
</span><span class='line'>VPN Server IP: 192.168.0.2</span></code></pre></td></tr></table></div></figure>


<p>On my friend&rsquo;s side, which I will be referring to as <strong>Side-B</strong>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Public DNS Name: side-b.example.com
</span><span class='line'>Private Range: 192.168.1.0/24
</span><span class='line'>VPN Server IP: 192.168.1.2</span></code></pre></td></tr></table></div></figure>


<h2>Cloudflare Dynamic DNS</h2>

<p>You don&rsquo;t need to use Cloudflare, theres services such as dyndns.com, no-ip.com. But for this tutorial I will be using cloudflare to utilize my own domain.</p>

<p>I will be using the <a href="https://github.com/LINKIWI/cloudflare-ddns-client">cloudflare-ddns-client</a></p>

<p>First we need to create a API Token, head over to your dashboard: <a href="https://dash.cloudflare.com">dash.cloudflare.com</a>, head over to &ldquo;my profile&rdquo;, select &ldquo;API Tokens&rdquo;, then allow &ldquo;Read Zones&rdquo; and &ldquo;Edit DNS&rdquo;, then select &ldquo;Create Token&rdquo;. Keep the returned token value in a safe place.</p>

<p>Install the pre-requirements:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt install python python-dev python-pip make curl build-essential -y</span></code></pre></td></tr></table></div></figure>


<p>Get the source and install:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/LINKIWI/cloudflare-ddns-client.git
</span><span class='line'>$ cd cloudflare-ddns-client
</span><span class='line'>$ make install</span></code></pre></td></tr></table></div></figure>


<p>We will now configure the cloudflare dynamic dns client, this will be done on both sides, but will only demonstrate for side-a:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cloudflare-ddns --configure
</span><span class='line'>Use API token or API key to authenticate?
</span><span class='line'>Choose [T]oken or [K]ey: T
</span><span class='line'>Enter the API token you created at https://dash.cloudflare.com/profile/api-tokens.
</span><span class='line'>Required permissions are READ Account.Access: Organizations, Identity Providers, and Groups; READ Zone.Zone; EDIT Zone.DNS
</span><span class='line'>CloudFlare API token: [redacted]
</span><span class='line'>Enter the domains for which you would like to automatically update the DNS records, delimited by a single comma.
</span><span class='line'>Comma-delimited domains: side-a.example.com</span></code></pre></td></tr></table></div></figure>


<p>Testing it out to ensure the A record can be updated:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cloudflare-ddns --update-now
</span><span class='line'>Found external IPv4: "1.x.x.x"
</span><span class='line'>Listing all zones.
</span><span class='line'>Finding all DNS records.
</span><span class='line'>Updating the A record (ID x) of (sub)domain side-a.example.com (ID x) to 1.x.x.x.
</span><span class='line'>DNS record updated successfully!</span></code></pre></td></tr></table></div></figure>


<p>We can run this command from above in a cron, but I will use a bash script to only run when the public ip changed: <code>/opt/scripts/detect_ip_change.sh</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>set -ex
</span><span class='line'>MY_DDNS_HOST="side-a.example.com"
</span><span class='line'>
</span><span class='line'>if [ $(dig ${MY_DDNS_HOST} +short) == $(curl -s icanhazip.com) ];
</span><span class='line'>  then exit 0;
</span><span class='line'>  else /usr/local/bin/cloudflare-ddns --update-now;
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure>


<p>Make the file executable: <code>chmod +x /opt/scripts/detect_ip_change.sh</code> then edit your cronjobs: <code>crontab -e</code> and add the script:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* * * * * /opt/scripts/detect_ip_change.sh</span></code></pre></td></tr></table></div></figure>


<p>This will keep your DNS updated, this needs to be done on both sides, if you want to use dynamic dns.</p>

<h2>Port Forwarding</h2>

<p>We will need to forward UDP traffic from the router to the VPN server, on both sides:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Port: UDP/500 
</span><span class='line'>Target: VPN-Server-IP:500
</span><span class='line'>
</span><span class='line'>Port: UDP/4500
</span><span class='line'>Target: VPN-Server-IP:4500</span></code></pre></td></tr></table></div></figure>


<h2>Create a Pre-Shared Key</h2>

<p>Create a preshared key that will be used on both sides to authenticate:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ openssl rand -base64 36
</span><span class='line'>pgDU4eKZaQNL7GNRWJPvZbaSYFn2PAFjK9vDOvxAQ85p7qc4</span></code></pre></td></tr></table></div></figure>


<p>This value will be used on both sides, which we will need later.</p>

<h2>Install Strongswan on Side-A</h2>

<p>Install strongswan and enable the service on boot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt install strongswan -y
</span><span class='line'>$ systemctl enable strongswan</span></code></pre></td></tr></table></div></figure>


<p>The left side will be the side we are configuring and the right side will be the remote side.</p>

<p>Create the config: <code>/etc/ipsec.conf</code> and provide the following config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config setup
</span><span class='line'>    charondebug="all"
</span><span class='line'>    uniqueids=yes
</span><span class='line'>    virtual_private=
</span><span class='line'>    cachecrls=no
</span><span class='line'>
</span><span class='line'>conn vpn-to-side-b
</span><span class='line'>    type=tunnel
</span><span class='line'>    authby=secret
</span><span class='line'>    left=%defaultroute
</span><span class='line'>    leftid=side-a.example.com
</span><span class='line'>    leftsubnet=192.168.0.0/24
</span><span class='line'>    right=%side-b.example.com
</span><span class='line'>    rightid=side-b.example.com
</span><span class='line'>    rightsubnet=192.168.1.0/24
</span><span class='line'>    ike=aes256-sha2_256-modp1024!
</span><span class='line'>    esp=aes256-sha2_256!
</span><span class='line'>    keyingtries=0
</span><span class='line'>    ikelifetime=1h
</span><span class='line'>    lifetime=8h
</span><span class='line'>    dpddelay=30
</span><span class='line'>    dpdtimeout=120
</span><span class='line'>    dpdaction=restart
</span><span class='line'>    auto=start</span></code></pre></td></tr></table></div></figure>


<p>Create the secrets file: <code>/etc/ipsec.secrets</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>side-b.example.com : PSK "pgDU4eKZaQNL7GNRWJPvZbaSYFn2PAFjK9vDOvxAQ85p7qc4"</span></code></pre></td></tr></table></div></figure>


<p>Append the following kernel parameters to <code>/etc/sysctl.conf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>net.ipv4.ip_forward = 1
</span><span class='line'>net.ipv4.conf.all.accept_redirects = 0
</span><span class='line'>net.ipv4.conf.all.send_redirects = 0</span></code></pre></td></tr></table></div></figure>


<p>Save:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sysctl -p</span></code></pre></td></tr></table></div></figure>


<p>We now want to add a POSTROUTING and FORWARD rule using iptables:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -t nat -A POSTROUTING -s 192.168.1.0/24  -d 192.168.0.0/24 -j MASQUERADE
</span><span class='line'>$ iptables -A FORWARD -s 192.168.1.0/24 -d 192.168.0.0/24 -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<p>Now we need to route back:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ip route add 192.168.1.0/24 via 192.168.0.2 dev eth0</span></code></pre></td></tr></table></div></figure>


<p>We want to persist the iptables and static route across reboots, so edit the <code>/etc/rc.local</code> file, if it&rsquo;s not there create it with the following values:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>iptables -t nat -A POSTROUTING -s 192.168.1.0/24  -d 192.168.0.0/24 -j MASQUERADE
</span><span class='line'>iptables -A FORWARD -s 192.168.1.0/24 -d 192.168.0.0/24 -j ACCEPT
</span><span class='line'>ip route add 192.168.1.0/24 via 192.168.0.2 dev eth0
</span><span class='line'>exit 0</span></code></pre></td></tr></table></div></figure>


<p>If you created the file, make sure to apply executable permissions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod +x /etc/rc.local</span></code></pre></td></tr></table></div></figure>


<p>Read the secrets and restart strongswan:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ipsec rereadsecrets
</span><span class='line'>$ systemctl restart strongswan</span></code></pre></td></tr></table></div></figure>


<h2>Install Strongswan on Side-B</h2>

<p>Install strongswan and enable the service on boot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt install strongswan -y
</span><span class='line'>$ systemctl enable strongswan</span></code></pre></td></tr></table></div></figure>


<p>The left side will be the side we are configuring and the right side will be the remote side.</p>

<p>Create the config: <code>/etc/ipsec.conf</code> and provide the following config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config setup
</span><span class='line'>    charondebug="all"
</span><span class='line'>    uniqueids=yes
</span><span class='line'>    virtual_private=
</span><span class='line'>    cachecrls=no
</span><span class='line'>
</span><span class='line'>conn vpn-to-side-a
</span><span class='line'>    type=tunnel
</span><span class='line'>    authby=secret
</span><span class='line'>    left=%defaultroute
</span><span class='line'>    leftid=side-b.example.com
</span><span class='line'>    leftsubnet=192.168.1.0/24
</span><span class='line'>    right=%side-a.example.com
</span><span class='line'>    rightid=side-a.example.com
</span><span class='line'>    rightsubnet=192.168.0.0/24
</span><span class='line'>    ike=aes256-sha2_256-modp1024!
</span><span class='line'>    esp=aes256-sha2_256!
</span><span class='line'>    keyingtries=0
</span><span class='line'>    ikelifetime=1h
</span><span class='line'>    lifetime=8h
</span><span class='line'>    dpddelay=30
</span><span class='line'>    dpdtimeout=120
</span><span class='line'>    dpdaction=restart
</span><span class='line'>    auto=start</span></code></pre></td></tr></table></div></figure>


<p>Create the secrets file: <code>/etc/ipsec.secrets</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>side-a.example.com : PSK "pgDU4eKZaQNL7GNRWJPvZbaSYFn2PAFjK9vDOvxAQ85p7qc4"</span></code></pre></td></tr></table></div></figure>


<p>Append the following kernel parameters to <code>/etc/sysctl.conf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>net.ipv4.ip_forward = 1
</span><span class='line'>net.ipv4.conf.all.accept_redirects = 0
</span><span class='line'>net.ipv4.conf.all.send_redirects = 0</span></code></pre></td></tr></table></div></figure>


<p>Save:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sysctl -p</span></code></pre></td></tr></table></div></figure>


<p>We now want to add a POSTROUTING and FORWARD rule using iptables:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -t nat -A POSTROUTING -s 192.168.0.0/24  -d 192.168.1.0/24 -j MASQUERADE
</span><span class='line'>$ iptables -A FORWARD -s 192.168.0.0/24 -d 192.168.1.0/24 -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<p>Now we need to route back:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ip route add 192.168.0.0/24 via 192.168.1.2 dev eth0</span></code></pre></td></tr></table></div></figure>


<p>We want to persist the iptables and static route across reboots, so edit the <code>/etc/rc.local</code> file, if it&rsquo;s not there create it with the following values:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>iptables -t nat -A POSTROUTING -s 192.168.0.0/24  -d 192.168.1.0/24 -j MASQUERADE
</span><span class='line'>iptables -A FORWARD -s 192.168.0.0/24 -d 192.168.1.0/24 -j ACCEPT
</span><span class='line'>ip route add 192.168.0.0/24 via 192.168.1.2 dev eth0
</span><span class='line'>exit 0</span></code></pre></td></tr></table></div></figure>


<p>If you created the file, make sure to apply executable permissions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod +x /etc/rc.local</span></code></pre></td></tr></table></div></figure>


<p>Read the secrets and restart strongswan:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ipsec rereadsecrets
</span><span class='line'>$ systemctl restart strongswan</span></code></pre></td></tr></table></div></figure>


<h2>Verify Status</h2>

<p>Verify that the ipsec tunnel is up on side-a:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ipsec statusall
</span><span class='line'>
</span><span class='line'>Connections:
</span><span class='line'>  vpn-to-side-b:  %any...side-b.example.com,0.0.0.0/0,::/0  IKEv1/2
</span><span class='line'>  vpn-to-side-b:   local:  [side-a.example.com] uses pre-shared key authentication
</span><span class='line'>  vpn-to-side-b:   remote: [side-b.example.com] uses pre-shared key authentication
</span><span class='line'>  vpn-to-side-b:   child:  192.168.0.0/24 === 192.168.1.0/24 TUNNEL
</span><span class='line'>Security Associations (1 up, 0 connecting):
</span><span class='line'>  vpn-to-side-b[1]: ESTABLISHED 28 minutes ago, 192.168.0.2[side-a.example.com]...4x.x.x.214[side-b.example.com]
</span><span class='line'>  vpn-to-side-b[1]: IKEv2 SPIs: 81996170df1c927d_i e8294946491ddf08_r, pre-shared key reauthentication in 2 hours
</span><span class='line'>  vpn-to-side-b[1]: IKE proposal: AES_CBC_128/HMAC_SHA2_256_128/PRF_HMAC_SHA2_256/ECP_256
</span><span class='line'>  vpn-to-side-b{2}:  INSTALLED, TUNNEL, reqid 1, ESP in UDP SPIs: cc4504be_i c294cb26_o
</span><span class='line'>  vpn-to-side-b{2}:  AES_CBC_128/HMAC_SHA2_256_128, 0 bytes_i, 240 bytes_o (4 pkts, 7s ago), rekeying in 18 minutes
</span><span class='line'>  vpn-to-side-b{2}:   192.168.0.0/24 === 192.168.1.0/24</span></code></pre></td></tr></table></div></figure>


<p>Verify that the ipsec tunnel is up on side-b:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ipsec statusall
</span><span class='line'>
</span><span class='line'>Connections:
</span><span class='line'> vpn-to-side-a:  %any...side-a.example.com,0.0.0.0/0,::/0  IKEv1/2
</span><span class='line'> vpn-to-side-a:   local:  [side-b.example.com] uses pre-shared key authentication
</span><span class='line'> vpn-to-side-a:   remote: [side-a.example.com] uses pre-shared key authentication
</span><span class='line'> vpn-to-side-a:   child:  192.168.1.0/24 === 192.168.0.0/24 TUNNEL
</span><span class='line'>Security Associations (1 up, 0 connecting):
</span><span class='line'> vpn-to-side-a[2]: ESTABLISHED 20 minutes ago, 192.168.1.2[side-b.example.com]...14x.x.x.x[side-a.example.com]
</span><span class='line'> vpn-to-side-a[2]: IKEv2 SPIs: 81996170df1c927d_i e8294946491ddf08_r, pre-shared key reauthentication in 2 hours
</span><span class='line'> vpn-to-side-a[2]: IKE proposal: AES_CBC_128/HMAC_SHA2_256_128/PRF_HMAC_SHA2_256/ECP_256
</span><span class='line'> vpn-to-side-a{2}:  INSTALLED, TUNNEL, reqid 1, ESP in UDP SPIs: c294cb26_i cc4504be_o
</span><span class='line'> vpn-to-side-a{2}:  AES_CBC_128/HMAC_SHA2_256_128, 0 bytes_i, 0 bytes_o, rekeying in 26 minutes
</span><span class='line'> vpn-to-side-a{2}:   192.168.1.0/24 === 192.168.0.0/24</span></code></pre></td></tr></table></div></figure>


<p>From side-a (192.168.0.2) ping the gateway on side-b (192.168.1.1):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ $ ping -c2 192.168.1.1
</span><span class='line'>PING 10.3.96.2 (192.168.1.1) 56(84) bytes of data.
</span><span class='line'>64 bytes from 192.168.1.1: icmp_seq=1 ttl=62 time=11.9 ms</span></code></pre></td></tr></table></div></figure>


<p>If you want to be able to reach the private range of the other side of the vpn from any device on your network, you should add a static route on your router to inform your default gateway where to route traffic to.</p>

<p>In this case on side-a (192.168.0.0/24) we want to inform our default gateway to route (192.168.1.0/24) to the VPN as it knows to route that destination over the VPN.</p>

<p>On side-a, on your router, add a static route:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Route: 192.168.1.0
</span><span class='line'>Subnet: 255.255.255.0
</span><span class='line'>Gateway: 192.168.0.2</span></code></pre></td></tr></table></div></figure>


<p>On side-b, on your router, add a static route:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Route: 192.168.0.0
</span><span class='line'>Subnet: 255.255.255.0
</span><span class='line'>Gateway: 192.168.1.2</span></code></pre></td></tr></table></div></figure>


<h2>Optional: Roadwarrior VPN Clients</h2>

<p>This step is optional, but since we can access each others homelabs, we thought it would be nice to be able to access the resources from mobile devices or laptops when we are on remote locations.</p>

<p>We made it that each VPN owner will connect to its own endpoint (for roadwarriors), so side-a (which will be me) will connect to its own dns endpoint to connect when away from home..</p>

<p>I will only demonstrate how to append your config to add the ability for a roadwarrion vpn connection, append to the <code>/etc/ipsec.conf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ...
</span><span class='line'>conn ikev2-vpn
</span><span class='line'>    auto=add
</span><span class='line'>    type=tunnel
</span><span class='line'>    authby=secret
</span><span class='line'>    left=%any
</span><span class='line'>    leftid=side-a.roadwarrior
</span><span class='line'>    leftsubnet=0.0.0.0/0
</span><span class='line'>    right=%any
</span><span class='line'>    rightid=%any
</span><span class='line'>    rightsourceip=10.10.0.0/24
</span><span class='line'>    rightdns=192.168.0.1,8.8.8.8
</span><span class='line'>    auto=start</span></code></pre></td></tr></table></div></figure>


<p>Append the secret in <code>/etc/ipsec.secrets</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ...
</span><span class='line'>side-a.roadwarrior my-laptop : PSK "MySuperSecureSecret123"</span></code></pre></td></tr></table></div></figure>


<p>Add the vpn ip&rsquo;s that we will assign to the roardwarrior clients to the routing table:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ip route add 10.10.0.0/24 via 192.168.0.2 dev eth0</span></code></pre></td></tr></table></div></figure>


<p>If you only want the roadwarriors to be able to reach your network, you will only forward to the local network such as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A FORWARD -s 10.10.0.0/24 -d 192.168.0.0/24 -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<p>But we will be forwarding traffic to all destinations:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A FORWARD -s 10.10.0.0/24 -d 0.0.0.0/0 -j ACCEPT
</span><span class='line'>$ iptables -t nat -A POSTROUTING -s 10.10.0.0/24 -d 0.0.0.0/0 -j MASQUERADE</span></code></pre></td></tr></table></div></figure>


<p>Remember to append the routes to <code>/etc/rc.local</code> to persist across reboots.</p>

<p>Reread the secrets and restart strongswan:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ipsec rereadsecrets
</span><span class='line'>$ systemctl restart strongswan</span></code></pre></td></tr></table></div></figure>


<p>Connecting your VPN Client, I will be using my Laptop, with the following details:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>VPN Type: IKEv2
</span><span class='line'>Description: Home VPN
</span><span class='line'>Server: side-a.example.com
</span><span class='line'>Remote ID: side-a.roadwarrior
</span><span class='line'>Local ID: my-laptop
</span><span class='line'>User Authentication: None
</span><span class='line'>Secret: MySuperSecureSecret123</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>In this tutorial I demonstrated how to setup a site to site ipsec vpn between 2 sides that consists of internet connections that has dynamic ip&rsquo;s and also appending roadwarrior config so that you can connect to your homelab from anywhere in the world.</p>
]]></content>
  </entry>
  
</feed>
