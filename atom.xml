<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-03-28T02:06:09-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Expanding the Size of Your EBS Volume on AWS EC2 for Linux]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/03/28/expanding-the-size-of-your-ebs-volume-on-aws-ec2-for-linux/"/>
    <updated>2018-03-28T01:45:07-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/03/28/expanding-the-size-of-your-ebs-volume-on-aws-ec2-for-linux</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/BJLbwQ.jpg" alt="" /></p>

<p>Resizing your EBS Volume on the fly, that is attached to your EC2 Linux instance, on Amazon Web Services.</p>

<p>We want to resize our EBS Volume from 100GB to 1000GB and at the moment my EBS Volume is 100GB, as you can see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>df -h
</span><span class='line'>Filesystem      Size  Used Avail Use% Mounted on
</span><span class='line'>devtmpfs        7.9G   60K  7.9G   1% /dev
</span><span class='line'>tmpfs           7.9G     <span class="m">0</span>  7.9G   0% /dev/shm
</span><span class='line'>/dev/xvda1       99G   32G   67G  32% /
</span></code></pre></td></tr></table></div></figure>


<p>Now we want to resize the volume to 1000GB, without shutting down our EC2 instance.</p>

<p>Go to your EC2 Management Console, Select your EC2 Instance, scroll down to the EBS Volume, click on it and click the EBS Volume ID, from there select Actions, modify and resize the disk to the needed size. As you can see the disk is now 1000GB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>lsblk
</span><span class='line'>NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
</span><span class='line'>xvda    202:0    <span class="m">0</span> 1000G  <span class="m">0</span> disk
</span><span class='line'>xvda1 202:1    <span class="m">0</span> 1000G  <span class="m">0</span> part /
</span></code></pre></td></tr></table></div></figure>


<p>But our partition is still 100GB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>df -h
</span><span class='line'>Filesystem      Size  Used Avail Use% Mounted on
</span><span class='line'>devtmpfs        7.9G   60K  7.9G   1% /dev
</span><span class='line'>tmpfs           7.9G     <span class="m">0</span>  7.9G   0% /dev/shm
</span><span class='line'>/dev/xvda1       99G   32G   67G  32% /
</span></code></pre></td></tr></table></div></figure>


<p>We need to use <code>growpart</code> and <code>resize2fs</code> to resize our partition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo growpart /dev/xvda 1
</span><span class='line'>CHANGED: <span class="nv">disk</span><span class="o">=</span>/dev/xvda <span class="nv">partition</span><span class="o">=</span>1: <span class="nv">start</span><span class="o">=</span><span class="m">4096</span> old: <span class="nv">size</span><span class="o">=</span>209711070,end<span class="o">=</span><span class="m">209715166</span> new: <span class="nv">size</span><span class="o">=</span>2097147870,end<span class="o">=</span>2097151966
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo resize2fs /dev/xvda1
</span><span class='line'>resize2fs 1.42.12 <span class="o">(</span>29-Aug-2014<span class="o">)</span>
</span><span class='line'>Filesystem at /dev/xvda1 is mounted on /<span class="p">;</span> on-line resizing required
</span><span class='line'><span class="nv">old_desc_blocks</span> <span class="o">=</span> 7, <span class="nv">new_desc_blocks</span> <span class="o">=</span> 63
</span><span class='line'>The filesystem on /dev/xvda1 is now <span class="m">262143483</span> <span class="o">(</span>4k<span class="o">)</span> blocks long.
</span></code></pre></td></tr></table></div></figure>


<p>Now we will have a resized partition to 100GB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>df -h
</span><span class='line'>Filesystem      Size  Used Avail Use% Mounted on
</span><span class='line'>devtmpfs        7.9G   60K  7.9G   1% /dev
</span><span class='line'>tmpfs           7.9G     <span class="m">0</span>  7.9G   0% /dev/shm
</span><span class='line'>/dev/xvda1      985G   33G  952G   4% /
</span></code></pre></td></tr></table></div></figure>


<p>Resources:</p>

<ul>
<li><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recognize-expanded-volume-linux.html">https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recognize-expanded-volume-linux.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx Basic Authentication With Source IP Whitelisting]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/03/19/nginx-basic-authentication-with-source-ip-whitelisting/"/>
    <updated>2018-03-19T10:57:36-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/03/19/nginx-basic-authentication-with-source-ip-whitelisting</id>
    <content type="html"><![CDATA[<p>Quick post on how to setup HTTP Basic Authentication and whitelist IP Based Sources to not get prompted for Authentication.</p>

<p>This could be useful for systems interacting with Nginx, so that they don&rsquo;t have to provide authentication.</p>

<h2>Dependencies:</h2>

<p>Install nginx and the package required to create the auth file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt install nginx apache2-utils -y</span></code></pre></td></tr></table></div></figure>


<p>Create the Password file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ htpasswd -c /etc/ngins/secrets admin</span></code></pre></td></tr></table></div></figure>


<h2>Configuration:</h2>

<p>Create the site config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rm -rf /etc/nginx/conf.d/*.conf
</span><span class='line'>$ vim /etc/nginx/conf.d/default.conf</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen       80;
</span><span class='line'>    server_name  localhost;
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>        satisfy any;
</span><span class='line'>        allow 127.0.0.1;
</span><span class='line'>        deny all;
</span><span class='line'>
</span><span class='line'>        auth_basic "restricted";
</span><span class='line'>        auth_basic_user_file /etc/nginx/secrets;
</span><span class='line'>        root   /usr/share/nginx/html;
</span><span class='line'>        index  index.html index.htm;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    error_page   500 502 503 504  /50x.html;
</span><span class='line'>    location = /50x.html {
</span><span class='line'>        root   /usr/share/nginx/html;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Reload the Changes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nginx -s reload</span></code></pre></td></tr></table></div></figure>


<h2>Testing:</h2>

<p>Testing from our Whitelisted location (localhost):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -i http://127.0.0.1 
</span><span class='line'>HTTP/1.1 200 OK</span></code></pre></td></tr></table></div></figure>


<p>Testing from remote location:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -i http://localhost
</span><span class='line'>HTTP/1.1 401 Unauthorized
</span><span class='line'>
</span><span class='line'>$ curl -i http://admin:password@localhost
</span><span class='line'>HTTP/1.1 200 OK</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Populate Environment Variables From Docker Secrets With a Flask Demo App]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/03/12/populate-environment-variables-from-docker-secrets-with-a-flask-demo-app/"/>
    <updated>2018-03-12T18:16:42-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/03/12/populate-environment-variables-from-docker-secrets-with-a-flask-demo-app</id>
    <content type="html"><![CDATA[<p><img src="http://obj-cache.cloud.ruanbekker.com/docker-logo.png" alt="" /></p>

<p>In this post we will create a basic Python Flask WebApp on Docker Swarm, but we will read our Flask Host, and Flask Port from Environment Variables, which will be populated from Docker Secrets, which we will read in from a python script.</p>

<h2>Our Directory Setup:</h2>

<p>This can be retrieved from <a href="https://github.com/ruanbekker/docker-swarm-apps/tree/master/tools-secrets-env-exporter">github.com/ruanbekker/docker-swarm-apps/tool-secrets-env-exporter</a>, but I will place the code in here as well.</p>

<figure class='code'><figcaption><span>Dockerfile:</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>FROM alpine:edge
</span><span class='line'>RUN apk add --no-cache python2 py2-pip <span class="o">&amp;&amp;</span> pip install flask
</span><span class='line'>ADD exporter.py /exporter.py
</span><span class='line'>ADD boot.sh /boot.sh
</span><span class='line'>ADD app.py /app.py
</span><span class='line'>CMD <span class="o">[</span><span class="s2">&quot;/bin/sh&quot;</span>, <span class="s2">&quot;/boot.sh&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>exporter.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">glob</span> <span class="kn">import</span> <span class="n">glob</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">var</span> <span class="ow">in</span> <span class="n">glob</span><span class="p">(</span><span class="s">&#39;/run/secrets/*&#39;</span><span class="p">):</span>
</span><span class='line'>    <span class="n">k</span><span class="o">=</span><span class="n">var</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="n">v</span><span class="o">=</span><span class="nb">open</span><span class="p">(</span><span class="n">var</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;export {key}={value}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">k</span><span class="p">,</span><span class="n">value</span><span class="o">=</span><span class="n">v</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span><span class='line'>
</span><span class='line'><span class="n">flask_host</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;flask_host&#39;</span><span class="p">])</span>
</span><span class='line'><span class="n">flask_port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;flask_port&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;ok</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="n">flask_host</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="n">flask_port</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>boot.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'><span class="nb">eval</span> <span class="k">$(</span>python /exporter.py<span class="k">)</span>
</span><span class='line'>python /app.py
</span></code></pre></td></tr></table></div></figure>


<h2>Flow Information:</h2>

<p>The exporter script checks all the secrets that is mounted to the container, then formats the secrets to a key/value pair, which then exports the environment variables to the current shell, which thereafter gets read by the flask application.</p>

<h2>Usage:</h2>

<p>Create Docker Secrets:</p>

<figure class='code'><figcaption><span>boot.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo </span><span class="m">5001</span> <span class="p">|</span> docker secret create flask_port -
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>0.0.0.0 <span class="p">|</span> docker secret create flask_host -
</span></code></pre></td></tr></table></div></figure>


<p>Build and Push the Image:</p>

<figure class='code'><figcaption><span>boot.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker build -t registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/&lt;image&gt;:&lt;tag&gt;
</span><span class='line'><span class="nv">$ </span>docker push registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/&lt;image&gt;:&lt;tag&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Create the Service, and specify the secrets that we created earlier:</p>

<figure class='code'><figcaption><span>boot.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker service create --name webapp <span class="se">\</span>
</span><span class='line'>--secret <span class="nb">source</span><span class="o">=</span>flask_host,target<span class="o">=</span>flask_host <span class="se">\</span>
</span><span class='line'>--secret <span class="nb">source</span><span class="o">=</span>flask_port,target<span class="o">=</span>flask_port <span class="se">\</span>
</span><span class='line'>registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/&lt;image&gt;:&lt;tag&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Exec into the container, list to see where the secrets got populated:</p>

<figure class='code'><figcaption><span>boot.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls /run/secrets/
</span><span class='line'>flask_host  flask_port
</span></code></pre></td></tr></table></div></figure>


<p>Do a netstat, to see that the value from the created secret is listening:</p>

<figure class='code'><figcaption><span>boot.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>netstat -tulpn
</span><span class='line'>Active Internet connections <span class="o">(</span>only servers<span class="o">)</span>
</span><span class='line'>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:5001            0.0.0.0:*               LISTEN      7/python
</span></code></pre></td></tr></table></div></figure>


<p>Do a GET request on the Flask Application:</p>

<figure class='code'><figcaption><span>boot.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl http://0.0.0.0:5001/
</span><span class='line'>ok
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Send SMS Messages With Python and Twilio via Their API]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/03/02/send-sms-messages-with-python-and-twilio-via-their-api/"/>
    <updated>2018-03-02T17:09:56-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/03/02/send-sms-messages-with-python-and-twilio-via-their-api</id>
    <content type="html"><![CDATA[<p>This post will guide you through the steps on how to send SMS messages with Python and Twilio. We will use <code>talaikis.com</code> API to get a random quote that we will include in the body of the sms.</p>

<h2>Signup for a Trail Account:</h2>

<p>Sign up for a trail account at <a href="https://www.twilio.com">Twilio</a> then create a number, which I will refer to as the <code>sender number</code>, take note of your accountid and token.</p>

<h2>Create the Config:</h2>

<p>Create the config, that will keep the accountid, token, sender number and recipient number:</p>

<figure class='code'><figcaption><span>config.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">secrets</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;account&#39;</span><span class="p">:</span> <span class="s">&#39;xxxxxxxx&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;token&#39;</span><span class="p">:</span> <span class="s">&#39;xxxxxxx&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;sender&#39;</span><span class="p">:</span> <span class="s">&#39;+1234567890&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;receiver&#39;</span><span class="p">:</span> <span class="s">&#39;+0987654321&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Create the Client:</h2>

<p>We will get a random quote via talaikis.com&rsquo;s API which we will be using for the body of our text message, and then use twilio&rsquo;s API to send the text message:</p>

<figure class='code'><figcaption><span>sms_client.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">config</span> <span class="kn">import</span> <span class="n">secrets</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">twilio.rest</span> <span class="kn">import</span> <span class="n">Client</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'>
</span><span class='line'><span class="n">twilio_acountid</span> <span class="o">=</span> <span class="n">secrets</span><span class="p">[</span><span class="s">&#39;account&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">twilio_token</span> <span class="o">=</span> <span class="n">secrets</span><span class="p">[</span><span class="s">&#39;token&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">twilio_receiver</span> <span class="o">=</span> <span class="n">secrets</span><span class="p">[</span><span class="s">&#39;receiver&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">twilio_sender</span> <span class="o">=</span> <span class="n">secrets</span><span class="p">[</span><span class="s">&#39;sender&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">quote_response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;https://talaikis.com/api/quotes/random&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">Client</span><span class="p">(</span>
</span><span class='line'>    <span class="n">twilio_acountid</span><span class="p">,</span>
</span><span class='line'>    <span class="n">twilio_token</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">message</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>    <span class="n">to</span><span class="o">=</span><span class="n">twilio_receiver</span><span class="p">,</span>
</span><span class='line'>    <span class="n">from_</span><span class="o">=</span><span class="n">twilio_sender</span><span class="p">,</span>
</span><span class='line'>    <span class="n">body</span><span class="o">=</span><span class="n">quote_response</span><span class="p">[</span><span class="s">&#39;quote&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Message Preview:</h2>

<p>Then within a couple of seconds your message should look something more or less like this:</p>

<p><img src="https://i.snag.gy/Oqj2cP.jpg" alt="" /></p>

<p>For more info, have a look at their docs:
- <a href="https://www.twilio.com/docs/">https://www.twilio.com/docs/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang: Reading From Files and Writing to Disk With Arguments]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/03/02/golang-reading-from-files-and-writing-to-disk-with-arguments/"/>
    <updated>2018-03-02T07:11:13-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/03/02/golang-reading-from-files-and-writing-to-disk-with-arguments</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/VJmUZz.jpg" alt="" /></p>

<p>From our <a href="https://goo.gl/ih43uv">Previous Post</a> we wrote a basic golang app that reads the contents of a file and writes it back to disk, but in a static way as we defined the source and destination filenames in the code.</p>

<p>Today we will use arguments to specify what the source and destination filenames should be instead of hardcoding it.</p>

<h2>Our Golang Application:</h2>

<p>We will be using if statements to determine if the number of arguments provided is as expected, if not, then a usage string should be returned to stdout. Then we will loop through the list of arguments to determine what the values for our source and destination file should be.</p>

<p>Once it completes, it prints out the coice of filenames that was used:</p>

<figure class='code'><figcaption><span>app.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;io/ioutil&quot;</span>
</span><span class='line'>    <span class="s">&quot;os&quot;</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="p">(</span>
</span><span class='line'>    <span class="nx">input_filename</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nx">output_filename</span> <span class="kt">string</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">)</span> <span class="p">&lt;</span> <span class="mi">5</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Usage: (-i/--input) &#39;input_filename&#39; (-o/--output) &#39;output_filename&#39; \n&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">arg</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Args</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">arg</span> <span class="o">==</span> <span class="s">&quot;-i&quot;</span> <span class="o">||</span> <span class="nx">arg</span> <span class="o">==</span> <span class="s">&quot;--input&quot;</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">input_filename</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">arg</span> <span class="o">==</span> <span class="s">&quot;-o&quot;</span> <span class="o">||</span> <span class="nx">arg</span> <span class="o">==</span> <span class="s">&quot;--output&quot;</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">output_filename</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">input_file_content</span><span class="p">,</span> <span class="kt">error</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadFile</span><span class="p">(</span><span class="nx">input_filename</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="kt">error</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">panic</span><span class="p">(</span><span class="kt">error</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;File used for reading:&quot;</span><span class="p">,</span> <span class="nx">input_filename</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">ioutil</span><span class="p">.</span><span class="nx">WriteFile</span><span class="p">(</span><span class="nx">output_filename</span><span class="p">,</span> <span class="nx">input_file_content</span><span class="p">,</span> <span class="mo">0644</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;File used for writing:&quot;</span><span class="p">,</span> <span class="nx">output_filename</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Build your application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go build app.go
</span></code></pre></td></tr></table></div></figure>


<p>Run your application with no additional arguments to determine the expected behaviour:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./app
</span><span class='line'>Usage: <span class="o">(</span>-i/--input<span class="o">)</span> <span class="s1">&#39;input_filename&#39;</span> <span class="o">(</span>-o/--output<span class="o">)</span> <span class="s1">&#39;output_file-to-write&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It works as expected, now create a source file, then run the application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$RANDOM</span> &gt; myfile.txt
</span></code></pre></td></tr></table></div></figure>


<p>Run the application, and in this run, we will set the destination file as newfile.txt:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./app -i myfile.txt -o newfile.txt
</span><span class='line'>File used <span class="k">for</span> reading: myfile.txt
</span><span class='line'>File used <span class="k">for</span> writing: newfile.txt
</span></code></pre></td></tr></table></div></figure>


<p>Checking out the new file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat newfile.txt
</span><span class='line'>8568
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang: Reading From Files and Writing to Disk With Golang]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/03/02/golang-reading-from-files-and-writing-to-disk-with-golang/"/>
    <updated>2018-03-02T06:44:59-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/03/02/golang-reading-from-files-and-writing-to-disk-with-golang</id>
    <content type="html"><![CDATA[<p><img src="![](https://i.snag.gy/VJmUZz.jpg" alt="" />)</p>

<p>Today we will create a very basic application to read content from a file, and write the content from the file back to disk, but to another filename.</p>

<p>Basically, doing a copy of the file to another filename.</p>

<h2>Golang Environment: Golang Docker Image</h2>

<p>Dropping into a Golang Environment using Docker:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run -it golang:alpine sh
</span></code></pre></td></tr></table></div></figure>


<h2>Our Golang Application</h2>

<p>After we are in our container, lets write our app:</p>

<figure class='code'><figcaption><span>app.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;io/ioutil&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">content</span><span class="p">,</span> <span class="kt">error</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadFile</span><span class="p">(</span><span class="s">&quot;source-data.txt&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="kt">error</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">panic</span><span class="p">(</span><span class="kt">error</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">error</span> <span class="p">=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">WriteFile</span><span class="p">(</span><span class="s">&quot;destination-data.txt&quot;</span><span class="p">,</span> <span class="nx">content</span><span class="p">,</span> <span class="mo">0644</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="kt">error</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">panic</span><span class="p">(</span><span class="kt">error</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Building our application to a binary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go build app.go
</span></code></pre></td></tr></table></div></figure>


<p>Creating our <code>source-data.txt</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;foo&quot;</span> &gt; <span class="nb">source</span>-data.txt
</span></code></pre></td></tr></table></div></figure>


<h2>Running the Golang App:</h2>

<p>When we run this app, it will read the content of <code>source-data.txt</code> and write it to <code>destination-data.txt</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./app.go
</span></code></pre></td></tr></table></div></figure>


<p>We can see that the file has been written to disk:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls <span class="p">|</span> grep data
</span><span class='line'>destination-data.txt
</span><span class='line'><span class="nb">source</span>-data.txt
</span></code></pre></td></tr></table></div></figure>


<p>Making sure the data is the same, we can do a <code>md5sum hash</code> function on them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>md5sum <span class="nb">source</span>-data.txt
</span><span class='line'>d3b07384d113edec49eaa6238ad5ff00  <span class="nb">source</span>-data.txt
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>md5sum destination-data.txt
</span><span class='line'>d3b07384d113edec49eaa6238ad5ff00  destination-data.txt
</span></code></pre></td></tr></table></div></figure>


<h2>Next:</h2>

<p>This was a very static way of doing it, as you need to hardcode the filenames. In the <a href="https://goo.gl/t8fasN">next post</a> I will show how to use arguments to make it more dynamic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a KVM Hypervisor on Ubuntu to Host Virtual Machines]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/02/20/setup-a-kvm-hypervisor-on-ubuntu-to-host-virtual-machines/"/>
    <updated>2018-02-20T06:21:56-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/02/20/setup-a-kvm-hypervisor-on-ubuntu-to-host-virtual-machines</id>
    <content type="html"><![CDATA[<p>Today we will setup a KVM (Kernel Virtual Machine) Hypervisor, where we can host Virtual Machines. In order to do so, your host needs to Support Hardware Virtualization.</p>

<h2>What we will be doing today:</h2>

<ul>
<li>Check if your host supports Hardware Virtualization</li>
<li>Setup the KVM Hypervisor</li>
<li>Setup a Alpine VM</li>
</ul>


<h2>Check for Hardware Virtualization Support:</h2>

<p>We will install the package required to do the check:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt update <span class="o">&amp;&amp;</span> sudo apt install cpu-checker -y
</span></code></pre></td></tr></table></div></figure>


<p>Once that is installed, run <code>kvm-ok</code> and if its supported, your output should look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kvm-ok
</span><span class='line'>INFO: /dev/kvm exists
</span><span class='line'>KVM acceleration can be used
</span></code></pre></td></tr></table></div></figure>


<h2>Installing KVM</h2>

<p>Update your System and get the Packages required to Setup KVM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt update <span class="o">&amp;&amp;</span> sudo apt upgrade -y
</span><span class='line'><span class="nv">$ </span>apt install bridge-utils qemu-kvm libvirt-bin virtinst -y
</span></code></pre></td></tr></table></div></figure>


<p>Add your user to the libvirtd group:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo usermod -G libvirtd <span class="nv">$USER</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check that the libvirtd service is running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo systemctl is-active libvirtd
</span><span class='line'>active
</span></code></pre></td></tr></table></div></figure>


<p>You will also find that there is a new interface configured called <code>virbr0</code> in my case.</p>

<h2>Provision the Alpine VM and Setup OpenSSH:</h2>

<p>Get the ISO:</p>

<ul>
<li><a href="https://alpinelinux.org/downloads/">https://alpinelinux.org/downloads/</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget http://dl-cdn.alpinelinux.org/alpine/v3.7/releases/x86_64/alpine-virt-3.7.0-x86_64.iso
</span></code></pre></td></tr></table></div></figure>


<p>Provision the VM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>virt-install <span class="se">\</span>
</span><span class='line'>--name alpine1 <span class="se">\</span>
</span><span class='line'>--ram <span class="m">256</span> <span class="se">\</span>
</span><span class='line'>--disk <span class="nv">path</span><span class="o">=</span>/var/lib/libvirt/images/alpine1.img,size<span class="o">=</span><span class="m">8</span> <span class="se">\</span>
</span><span class='line'>--vcpus <span class="m">1</span> <span class="se">\</span>
</span><span class='line'>--os-type linux <span class="se">\</span>
</span><span class='line'>--os-variant generic <span class="se">\</span>
</span><span class='line'>--network bridge:virbr0,model<span class="o">=</span>virtio <span class="se">\</span>
</span><span class='line'>--graphics none <span class="se">\</span>
</span><span class='line'>--console pty,target_type<span class="o">=</span>serial <span class="se">\</span>
</span><span class='line'>--cdrom ./alpine-virt-3.7.0-x86_64.iso
</span></code></pre></td></tr></table></div></figure>


<p>After this, you will be dropped into the console:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Starting install...
</span><span class='line'>Allocating <span class="s1">&#39;alpine1.img&#39;</span>                                                                                                           <span class="p">|</span>   <span class="m">8</span> GB  00:00:01
</span><span class='line'>Creating domain...                                                                                                                 <span class="p">|</span>    <span class="m">0</span> B  00:00:00
</span><span class='line'>Connected to domain alpine1
</span><span class='line'>Escape character is ^<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>ISOLINUX 6.04 6.04-pre1  Copyright <span class="o">(</span>C<span class="o">)</span> 1994-2015 H. Peter Anvin et al
</span><span class='line'>boot:
</span><span class='line'>
</span><span class='line'>   OpenRC 0.24.1.a941ee4a0b is starting up Linux 4.9.65-1-virthardened <span class="o">(</span>x86_64<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Welcome to Alpine Linux 3.7
</span><span class='line'>Kernel 4.9.65-1-virthardened on an x86_64 <span class="o">(</span>/dev/ttyS0<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>localhost login:
</span></code></pre></td></tr></table></div></figure>


<p>Login with the <code>root</code> user and no password, then setup the VM by running <code>setup-alpine</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>localhost login: root
</span><span class='line'>Welcome to Alpine!
</span><span class='line'>
</span><span class='line'>localhost:~# setup-alpine
</span></code></pre></td></tr></table></div></figure>


<p>After completing the prompts reboot the VM by running <code>reboot</code>, then you will be dropped out of the console. Check the status of the reboot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>virsh list
</span><span class='line'> Id    Name                           State
</span><span class='line'>----------------------------------------------------
</span><span class='line'> <span class="m">2</span>     alpine1                        running
</span></code></pre></td></tr></table></div></figure>


<p>As we can see our guest is running, lets console to our guest, provide the root user and password that you provided during the setup phase:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>virsh console 2
</span><span class='line'>Connected to domain alpine1
</span><span class='line'>Escape character is ^<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>alpine1 login: root
</span><span class='line'>Password:
</span><span class='line'>Welcome to Alpine!
</span></code></pre></td></tr></table></div></figure>


<p>Setup OpenSSH so that we can SSH to our guest over the network:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apk update
</span><span class='line'><span class="nv">$ </span>apk add openssh
</span></code></pre></td></tr></table></div></figure>


<p>Configure SSH to accept Root Passwords, this is not advisable for production environments, but for testing this is okay. For Production servers, we will rather look at Key Based Authentication etc.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -i <span class="s1">&#39;s/#PermitRootLogin prohibit-password/PermitRootLogin yes/g&#39;</span> /etc/ssh/sshd_config
</span><span class='line'><span class="nv">$ </span>/etc/init.d/sshd restart
</span></code></pre></td></tr></table></div></figure>


<p>Get the IP Address:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ifconfig
</span><span class='line'>eth0      Link encap:Ethernet  HWaddr 52:54:00:D0:48:0C
</span><span class='line'>          inet addr:192.168.122.176  Bcast:192.168.122.255  Mask:255.255.255.0
</span><span class='line'>          inet6 addr: fe80::5054:ff:fed0:480c/64 Scope:Link
</span><span class='line'>          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
</span><span class='line'>          RX packets:55 errors:0 dropped:28 overruns:0 frame:0
</span><span class='line'>          TX packets:34 errors:0 dropped:0 overruns:0 carrier:0
</span><span class='line'>          collisions:0 txqueuelen:1000
</span><span class='line'>          RX bytes:4545 <span class="o">(</span>4.4 KiB<span class="o">)</span>  TX bytes:3345 <span class="o">(</span>3.2 KiB<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Exit the guest by running <code>exit</code> and <code>Ctrl + ]</code> to exit the console session.</p>

<p>Now SSH to your Alpine VM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh root@192.168.122.176
</span><span class='line'>root@192.168.122.176<span class="err">&#39;</span>s password:
</span><span class='line'>Welcome to Alpine!
</span></code></pre></td></tr></table></div></figure>


<h2>Some Useful Commands:</h2>

<p>List Running VMs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>virsh list
</span><span class='line'> Id    Name                           State
</span><span class='line'>----------------------------------------------------
</span><span class='line'> <span class="m">3</span>     alpine1                        running
</span></code></pre></td></tr></table></div></figure>


<p>Shutdown a VM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>virsh shutdown alpine1
</span><span class='line'>Domain alpine1 is being shutdown
</span></code></pre></td></tr></table></div></figure>


<p>List all VMs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>virsh list --all
</span><span class='line'> Id    Name                           State
</span><span class='line'>----------------------------------------------------
</span><span class='line'> -     alpine1                        shut off
</span></code></pre></td></tr></table></div></figure>


<p>Delete a VM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>virsh shutdown alpine1 <span class="c">#or to force shutdown:</span>
</span><span class='line'><span class="nv">$ </span>virsh destroy alpine1
</span><span class='line'><span class="nv">$ </span>virsh undefine alpine1
</span></code></pre></td></tr></table></div></figure>


<p>Any future KVM posts will be tagged under <a href="http://blog.ruanbekker.com/blog/categories/kvm?source_site=blog.ruanbekker.com?source_category=kvm">KVM</a> and Alpine posts will be available under the <a href="http://blog.ruanbekker.com/blog/categories/alpine?source_site=blog.ruanbekker.com?source_category=kvm">Alpine</a> tag.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guide to Setup Docker Convoy Volume Driver for Docker Swarm With NFS]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/02/16/guide-to-setup-docker-convoy-volume-driver-for-docker-swarm-with-nfs/"/>
    <updated>2018-02-16T08:51:59-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/02/16/guide-to-setup-docker-convoy-volume-driver-for-docker-swarm-with-nfs</id>
    <content type="html"><![CDATA[<p><img src="http://obj-cache.cloud.ruanbekker.com/docker-logo.png" alt="" /></p>

<p>In this post we will setup <a href="https://github.com/rancher/convoy">Rancher&rsquo;s Convoy Storage Plugin</a> with NFS, to provide data persistence in Docker Swarm.</p>

<h2>The Overview:</h2>

<p>This essentially means that we will have a NFS Volume, when the service gets created on Docker Swarm, the cluster creates these volumes with path mapping, so when a container gets spawned, restarted, scaled etc, the container that gets started on the new node will be aware of the volume, and will get the data that its expecting.</p>

<p>Its also good to note that our NFS Server will be a single point of failure, therefore its also good to look at a Distributed Volume like <a href="https://sysadmins.co.za/tag/glusterfs">GlusterFS</a>, <a href="https://sysadmins.co.za/tag/xtreemfs/">XtreemFS</a>, <a href="">Ceph</a>, etc.</p>

<ul>
<li>NFS Server (10.8.133.83)</li>
<li>Rancher Convoy Plugin on Each Docker Node in the Swarm (10.8.133.83, 10.8.166.19, 10.8.142.195)</li>
</ul>


<h2>Setup NFS:</h2>

<p>Setup the NFS Server</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install nfs-kernel-server nfs-common -y
</span><span class='line'><span class="nv">$ </span>mkdir /vol
</span><span class='line'><span class="nv">$ </span>chown -R nobody:nogroup /vol
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;/vol 10.8.133.83(rw,sync,no_subtree_check) 10.8.166.19(rw,sync,no_subtree_check) 10.8.142.195(rw,sync,no_subtree_check)&#39;</span> &gt;&gt; /etc/exports
</span><span class='line'><span class="nv">$ </span>sudo systemctl restart nfs-kernel-server
</span><span class='line'><span class="nv">$ </span>sudo systemctl <span class="nb">enable </span>nfs-kernel-server
</span></code></pre></td></tr></table></div></figure>


<p>Setup the NFS Clients on each Docker Node:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install nfs-common -y
</span><span class='line'><span class="nv">$ </span>mount 10.8.133.83:/vol /mnt
</span><span class='line'><span class="nv">$ </span>umount /mnt
</span><span class='line'><span class="nv">$ </span>df -h
</span></code></pre></td></tr></table></div></figure>


<p>If you can see tht the volume is mounted, unmount it and add it to the <code>fstab</code> so the volume can be mounted on boot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo bash -c <span class="s2">&quot;echo &#39;10.8.133.83:/vol /mnt nfs auto,nofail,noatime,nolock,intr,tcp,actimeo=1800 0 0&#39; &gt;&gt; /etc/fstab&quot;</span>
</span><span class='line'><span class="nv">$ </span>sudo mount -a
</span></code></pre></td></tr></table></div></figure>


<h2>Install Rancher Convoy Plugin:</h2>

<p>The Plugin needs to be installed on each docker node that will be part of the swarm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /tmp
</span><span class='line'><span class="nv">$ </span>wget https://github.com/rancher/convoy/releases/download/v0.5.0/convoy.tar.gz
</span><span class='line'><span class="nv">$ </span>tar xzf convoy.tar.gz
</span><span class='line'><span class="nv">$ </span>sudo cp convoy/convoy convoy/convoy-pdata_tools /usr/local/bin/
</span><span class='line'><span class="nv">$ </span>sudo mkdir -p /etc/docker/plugins/
</span><span class='line'><span class="nv">$ </span>sudo bash -c <span class="s1">&#39;echo &quot;unix:///var/run/convoy/convoy.sock&quot; &gt; /etc/docker/plugins/convoy.spec&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Create the init script:</h2>

<p>Thanks to <a href="https://gist.github.com/deviantony/557984d62e867e6f505577b207db6ffc">deviantony</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="c">### BEGIN INIT INFO</span>
</span><span class='line'><span class="c"># Provides:</span>
</span><span class='line'><span class="c"># Required-Start:    $remote_fs $syslog</span>
</span><span class='line'><span class="c"># Required-Stop:     $remote_fs $syslog</span>
</span><span class='line'><span class="c"># Default-Start:     2 3 4 5</span>
</span><span class='line'><span class="c"># Default-Stop:      0 1 6</span>
</span><span class='line'><span class="c"># Short-Description: Start daemon at boot time</span>
</span><span class='line'><span class="c"># Description:       Enable service provided by daemon.</span>
</span><span class='line'><span class="c">### END INIT INFO</span>
</span><span class='line'>
</span><span class='line'><span class="nv">dir</span><span class="o">=</span><span class="s2">&quot;/usr/local/bin&quot;</span>
</span><span class='line'><span class="nv">cmd</span><span class="o">=</span><span class="s2">&quot;convoy daemon --drivers vfs --driver-opts vfs.path=/mnt/docker/volumes&quot;</span>
</span><span class='line'><span class="nv">user</span><span class="o">=</span><span class="s2">&quot;root&quot;</span>
</span><span class='line'><span class="nv">name</span><span class="o">=</span><span class="s2">&quot;convoy&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">pid_file</span><span class="o">=</span><span class="s2">&quot;/var/run/$name.pid&quot;</span>
</span><span class='line'><span class="nv">stdout_log</span><span class="o">=</span><span class="s2">&quot;/var/log/$name.log&quot;</span>
</span><span class='line'><span class="nv">stderr_log</span><span class="o">=</span><span class="s2">&quot;/var/log/$name.err&quot;</span>
</span><span class='line'>
</span><span class='line'>get_pid<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    cat <span class="s2">&quot;$pid_file&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>is_running<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">[</span> -f <span class="s2">&quot;$pid_file&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> ps <span class="sb">`</span>get_pid<span class="sb">`</span> &gt; /dev/null 2&gt;<span class="p">&amp;</span>1
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="s2">&quot;$1&quot;</span> in
</span><span class='line'>    start<span class="o">)</span>
</span><span class='line'>    <span class="k">if</span> is_running<span class="p">;</span> <span class="k">then</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;Already started&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;Starting $name&quot;</span>
</span><span class='line'>        <span class="nb">cd</span> <span class="s2">&quot;$dir&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$user&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>            sudo <span class="nv">$cmd</span> &gt;&gt; <span class="s2">&quot;$stdout_log&quot;</span> 2&gt;&gt; <span class="s2">&quot;$stderr_log&quot;</span> <span class="p">&amp;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            sudo -u <span class="s2">&quot;$user&quot;</span> <span class="nv">$cmd</span> &gt;&gt; <span class="s2">&quot;$stdout_log&quot;</span> 2&gt;&gt; <span class="s2">&quot;$stderr_log&quot;</span> <span class="p">&amp;</span>
</span><span class='line'>        <span class="k">fi</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="nv">$!</span> &gt; <span class="s2">&quot;$pid_file&quot;</span>
</span><span class='line'>        <span class="k">if</span> ! is_running<span class="p">;</span> <span class="k">then</span>
</span><span class='line'>            <span class="nb">echo</span> <span class="s2">&quot;Unable to start, see $stdout_log and $stderr_log&quot;</span>
</span><span class='line'>            <span class="nb">exit </span>1
</span><span class='line'>        <span class="k">fi</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>    <span class="p">;;</span>
</span><span class='line'>    stop<span class="o">)</span>
</span><span class='line'>    <span class="k">if</span> is_running<span class="p">;</span> <span class="k">then</span>
</span><span class='line'>        <span class="nb">echo</span> -n <span class="s2">&quot;Stopping $name..&quot;</span>
</span><span class='line'>        <span class="nb">kill</span> <span class="sb">`</span>get_pid<span class="sb">`</span>
</span><span class='line'>        <span class="k">for</span> i in <span class="o">{</span>1..10<span class="o">}</span>
</span><span class='line'>        <span class="k">do</span>
</span><span class='line'>            <span class="k">if</span> ! is_running<span class="p">;</span> <span class="k">then</span>
</span><span class='line'>                <span class="nb">break</span>
</span><span class='line'><span class="nb">            </span><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>            <span class="nb">echo</span> -n <span class="s2">&quot;.&quot;</span>
</span><span class='line'>            sleep 1
</span><span class='line'>        <span class="k">done</span>
</span><span class='line'>        <span class="nb">echo</span>
</span><span class='line'>
</span><span class='line'><span class="nb">        </span><span class="k">if</span> is_running<span class="p">;</span> <span class="k">then</span>
</span><span class='line'>            <span class="nb">echo</span> <span class="s2">&quot;Not stopped; may still be shutting down or shutdown may have failed&quot;</span>
</span><span class='line'>            <span class="nb">exit </span>1
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="nb">echo</span> <span class="s2">&quot;Stopped&quot;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">[</span> -f <span class="s2">&quot;$pid_file&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>                rm <span class="s2">&quot;$pid_file&quot;</span>
</span><span class='line'>            <span class="k">fi</span>
</span><span class='line'>        <span class="k">fi</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;Not running&quot;</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>    <span class="p">;;</span>
</span><span class='line'>    restart<span class="o">)</span>
</span><span class='line'>    <span class="nv">$0</span> stop
</span><span class='line'>    <span class="k">if</span> is_running<span class="p">;</span> <span class="k">then</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;Unable to stop, will not attempt to start&quot;</span>
</span><span class='line'>        <span class="nb">exit </span>1
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>    <span class="nv">$0</span> start
</span><span class='line'>    <span class="p">;;</span>
</span><span class='line'>    status<span class="o">)</span>
</span><span class='line'>    <span class="k">if</span> is_running<span class="p">;</span> <span class="k">then</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;Running&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;Stopped&quot;</span>
</span><span class='line'>        <span class="nb">exit </span>1
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>    <span class="p">;;</span>
</span><span class='line'>    *<span class="o">)</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;Usage: $0 {start|stop|restart|status}&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'>    <span class="p">;;</span>
</span><span class='line'><span class="k">esac</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<p>Make the script executable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>chmod +x /etc/init.d/convoy
</span></code></pre></td></tr></table></div></figure>


<p>Enable the service on boot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo systemctl <span class="nb">enable </span>convoy
</span></code></pre></td></tr></table></div></figure>


<p>Start the service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo /etc/init.d/convoy start
</span></code></pre></td></tr></table></div></figure>


<p>This should be done on all the nodes.</p>

<h2>Externally Managed Convoy Volumes</h2>

<p>One thing to note is that, after your delete a volume, you will still need to delete the directory from the path where its hosted, as the application does not do that by itself.</p>

<p>Creating the Volume Before hand:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>convoy create test1
</span><span class='line'>test1
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>docker volume ls
</span><span class='line'>DRIVER              VOLUME NAME
</span><span class='line'>convoy              test1
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>cat /mnt/docker/volumes/config/vfs_volume_test1.json
</span><span class='line'><span class="o">{</span><span class="s2">&quot;Name&quot;</span>:<span class="s2">&quot;test1&quot;</span>,<span class="s2">&quot;Size&quot;</span>:0,<span class="s2">&quot;Path&quot;</span>:<span class="s2">&quot;/mnt/docker/volumes/test1&quot;</span>,<span class="s2">&quot;MountPoint&quot;</span>:<span class="s2">&quot;&quot;</span>,<span class="s2">&quot;PrepareForVM&quot;</span>:false,<span class="s2">&quot;CreatedTime&quot;</span>:<span class="s2">&quot;Mon Feb 05 13:07:05 +0000 2018&quot;</span>,<span class="s2">&quot;Snapshots&quot;</span>:<span class="o">{}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Viewing the volume from another node:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker volume ls
</span><span class='line'>DRIVER              VOLUME NAME
</span><span class='line'>convoy              test1
</span></code></pre></td></tr></table></div></figure>


<h2>Creating a Test Service:</h2>

<p>Create a test service to test the data persistence, our docker-compose.yml:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>version: <span class="s1">&#39;3.4&#39;</span>
</span><span class='line'>
</span><span class='line'>volumes:
</span><span class='line'>  test1:
</span><span class='line'>    external: <span class="nb">true</span>
</span><span class='line'>
</span><span class='line'>networks:
</span><span class='line'>  appnet:
</span><span class='line'>    external: <span class="nb">true</span>
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  <span class="nb">test</span>:
</span><span class='line'>    image: alpine:edge
</span><span class='line'>    <span class="nb">command</span>: sh -c <span class="s2">&quot;ping 127.0.0.1&quot;</span>
</span><span class='line'>    volumes:
</span><span class='line'>      - test1:/data
</span><span class='line'>    networks:
</span><span class='line'>      - appnet
</span></code></pre></td></tr></table></div></figure>


<p>Creating the Overlay Network and Deploying the Stack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker network create -d overlay appnet
</span><span class='line'><span class="nv">$ </span>docker stack deploy -c docker-compose.yml apps
</span><span class='line'>Creating service apps_test
</span></code></pre></td></tr></table></div></figure>


<p>Write data to the volume in the container:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker <span class="nb">exec</span> -it apps_test.1.iojo7fpw8jirqjs3iu8qr7qpe sh
</span><span class='line'>/ <span class="c"># echo &quot;ok&quot; &gt; /data/file.txt</span>
</span><span class='line'>/ <span class="c"># cat /data/file.txt</span>
</span><span class='line'>ok
</span></code></pre></td></tr></table></div></figure>


<p>Scale the service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker service scale <span class="nv">apps_test</span><span class="o">=</span>2
</span><span class='line'>apps_test scaled to 2
</span></code></pre></td></tr></table></div></figure>


<p>Inspect to see if the new replica is on another node:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker service ps apps_test
</span><span class='line'>ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE               ERROR                         PORTS
</span><span class='line'>myrq2pc3z26z        apps_test.1         alpine:edge         scw-docker-1        Running             Running <span class="m">45</span> seconds ago
</span><span class='line'>ny8t97l2q00c         <span class="se">\_</span> apps_test.1     alpine:edge         scw-docker-1        Shutdown            Failed <span class="m">51</span> seconds ago       <span class="s2">&quot;task: non-zero exit (137)&quot;</span>
</span><span class='line'>iojo7fpw8jir         <span class="se">\_</span> apps_test.1     alpine:edge         scw-docker-1        Shutdown            Failed about a minute ago   <span class="s2">&quot;task: non-zero exit (137)&quot;</span>
</span><span class='line'>tt0nuusvgeki        apps_test.2         alpine:edge         scw-docker-2        Running             Running <span class="m">15</span> seconds ago
</span></code></pre></td></tr></table></div></figure>


<p>Logon to the new container and test if the data is persisted:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker <span class="nb">exec</span> -it apps_test.2.tt0nuusvgekirw1c5myu720ga sh
</span><span class='line'>/ <span class="c"># cat /data/file.txt</span>
</span><span class='line'>ok
</span></code></pre></td></tr></table></div></figure>


<p>Delete the Stack and Redeploy and have a look at the data we created earlier, and you will notice the data is persisted:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker stack rm apps
</span><span class='line'><span class="nv">$ </span>docker stack deploy -c docker-compose.yml apps
</span><span class='line'><span class="nv">$ </span>docker <span class="nb">exec</span> -it apps_test.1.la4w2sbuu8cmv6xamwxl7n0ip cat /data/file.txt
</span><span class='line'>ok
</span><span class='line'><span class="nv">$ </span>docker stack rm apps
</span></code></pre></td></tr></table></div></figure>


<h2>Create Volume via Compose:</h2>

<p>You can also create the volume on service/stack creation level, so you dont need to create the volume before hand, the compose file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&#39;3.4&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">test2</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">convoy</span>
</span><span class='line'>    <span class="l-Scalar-Plain">driver_opts</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">size</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">appnet</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">external</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">alpine:edge</span>
</span><span class='line'>    <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sh -c &quot;ping 127.0.0.1&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">test2:/data</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">appnet</span>
</span></code></pre></td></tr></table></div></figure>


<p>Deploy the Stack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker stack deploy -c docker-compose-new.yml apps
</span><span class='line'>Creating service apps_test
</span></code></pre></td></tr></table></div></figure>


<p>List the volumes and you will notice that the volume was created:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker volume ls
</span><span class='line'>DRIVER              VOLUME NAME
</span><span class='line'>convoy              apps_test2
</span><span class='line'>convoy              test1
</span></code></pre></td></tr></table></div></figure>


<p>Lets inspect the volume, to see more details about it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker volume inspect apps_test2
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;CreatedAt&quot;</span>: <span class="s2">&quot;0001-01-01T00:00:00Z&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;Driver&quot;</span>: <span class="s2">&quot;convoy&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;Labels&quot;</span>: <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;com.docker.stack.namespace&quot;</span>: <span class="s2">&quot;apps&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="s2">&quot;Mountpoint&quot;</span>: <span class="s2">&quot;/mnt/docker/volumes/apps_test2&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;Name&quot;</span>: <span class="s2">&quot;apps_test2&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;Options&quot;</span>: <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;size&quot;</span>: <span class="s2">&quot;10&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="s2">&quot;Scope&quot;</span>: <span class="s2">&quot;local&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>As mentioned earlier, if you delete the volume, you need to delete the data directories as well</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker volume rm test1
</span><span class='line'>test1
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ls /mnt/docker/volumes/
</span><span class='line'>apps_test2  config  test1
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>rm -rf /mnt/docker/volumes/test1
</span></code></pre></td></tr></table></div></figure>


<p>More info about the project:
- <a href="https://github.com/rancher/convoy">https://github.com/rancher/convoy</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a NFS Server on Ubuntu]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/02/11/setup-a-nfs-server-on-ubuntu/"/>
    <updated>2018-02-11T17:26:56-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/02/11/setup-a-nfs-server-on-ubuntu</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/3sUALo.jpg" alt="" /></p>

<p>Quick post on how to setup a NFS Server on Ubuntu and how to setup the client to interact with the NFS Server.</p>

<h2>Setup the Dependencies:</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt update <span class="o">&amp;&amp;</span> sudo apt upgrade -y
</span><span class='line'><span class="nv">$ </span>sudo apt-get install nfs-kernel-server nfs-common -y
</span></code></pre></td></tr></table></div></figure>


<p>Create the Directory for NFS and set permissions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir /vol
</span><span class='line'>chown -R nobody:nogroup /vol
</span></code></pre></td></tr></table></div></figure>


<h2>Allow the Clients:</h2>

<p>We need to set in the <code>exports</code> file, the clients we would like to allow:</p>

<ul>
<li><code>rw</code>: Allows Client R/W Access to the Volume.</li>
<li><code>sync</code>: This option forces NFS to write changes to disk before replying. More stable and Consistent. Note, it does reduce the speed of file operations.</li>
<li><code>no_subtree_check</code>: This prevents subtree checking, which is a process where the host must check whether the file is actually still available in the exported tree for every request. This can cause many problems when a file is renamed while the client has it opened. In almost all cases, it is better to disable subtree checking.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;/vol 10.8.133.83(rw,sync,no_subtree_check) 10.8.166.19(rw,sync,no_subtree_check) 10.8.142.195(rw,sync,no_subtree_check)&#39;</span> &gt;&gt; /etc/exports
</span></code></pre></td></tr></table></div></figure>


<h2>Start the NFS Server:</h2>

<p>Restart the service and enable the service on boot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo systemctl restart nfs-kernel-server
</span><span class='line'><span class="nv">$ </span>sudo systemctl <span class="nb">enable </span>nfs-kernel-server
</span></code></pre></td></tr></table></div></figure>


<h2>Client Side:</h2>

<p>We will mount the NFS Volume to our Clients <code>/mnt</code> partition.</p>

<p>Install the dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install nfs-common -y
</span></code></pre></td></tr></table></div></figure>


<p>Test if we can mount the volume, then unmount it, as we will set the config in our <code>fstab</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo mount 10.8.133.83:/vol /mnt
</span><span class='line'><span class="nv">$ </span>sudo umount /mnt
</span><span class='line'><span class="nv">$ </span>df -h
</span></code></pre></td></tr></table></div></figure>


<p>Set the config in your <code>fstab</code>, then mount it from there:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo bash -c <span class="s2">&quot;echo &#39;10.8.133.83:/vol /mnt nfs auto,nofail,noatime,nolock,intr,tcp,actimeo=1800 0 0&#39; &gt;&gt; /etc/fstab&quot;</span>
</span><span class='line'><span class="nv">$ </span>sudo mount -a
</span><span class='line'><span class="nv">$ </span>df -h
</span></code></pre></td></tr></table></div></figure>


<p>Now you shoule be able to write to your NFS Volume from your client.</p>

<p>Sources:
- <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nfs-mount-on-ubuntu-16-04">1</a> <a href="https://gist.github.com/deviantony/557984d62e867e6f505577b207db6ffc%">2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Site to Site IPsec VPN With Strongswan and PreShared Key Authentication]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/02/11/setup-a-site-to-site-ipsec-vpn-with-strongswan-and-preshared-key-authentication/"/>
    <updated>2018-02-11T16:09:37-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/02/11/setup-a-site-to-site-ipsec-vpn-with-strongswan-and-preshared-key-authentication</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/sWn8zc.jpg" alt="" /></p>

<p>Today we will setup a Site to Site ipsec VPN with Strongswan, which will be configured with PreShared Key Authentication.</p>

<p>After our tunnels are established, we will be able to reach the private ips over the vpn tunnels.</p>

<h2>Get the Dependencies:</h2>

<p>Update your repository indexes and install strongswan:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt update <span class="o">&amp;&amp;</span> sudo apt upgrade -y
</span><span class='line'><span class="nv">$ </span>apt install strongswan -y
</span></code></pre></td></tr></table></div></figure>


<p>Set the following kernel parameters:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat &gt;&gt; /etc/sysctl.conf <span class="s">&lt;&lt; EOF</span>
</span><span class='line'><span class="s">echo net.ipv4.ip_forward = 1 </span>
</span><span class='line'><span class="s">net.ipv4.conf.all.accept_redirects = 0 </span>
</span><span class='line'><span class="s">net.ipv4.conf.all.send_redirects = 0</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sysctl -p /etc/sysctl.conf
</span></code></pre></td></tr></table></div></figure>


<h2>Generate Preshared Key:</h2>

<p>We will need a preshared key that both servers will use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>openssl rand -base64 64
</span><span class='line'>87zRQqylaoeF5I8o4lRhwvmUzf+pYdDpsCOlesIeFA/2xrtxKXJTbCPZgqplnXgPX5uprL+aRgxD8ua7MmdWaQ
</span></code></pre></td></tr></table></div></figure>


<h2>Details of our 2 Sites:</h2>

<p>Site A:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Location: Paris, France
</span><span class='line'>External IP: 51.15.139.201
</span><span class='line'>Internal IP: 10.10.27.1/24
</span></code></pre></td></tr></table></div></figure>


<p>Site B:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Location: Amsterdam, Netherlands
</span><span class='line'>External IP: 51.15.44.48
</span><span class='line'>Internal IP: 10.9.141.1/24
</span></code></pre></td></tr></table></div></figure>


<h2>Configure Site A:</h2>

<p>We will setup our VPN Gateway in Site A (Paris), first to setup the <code>/etc/ipsec.secrets</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /etc/ipsec.secrets
</span><span class='line'><span class="c"># source      destination</span>
</span><span class='line'>51.15.139.201 51.15.44.48 : PSK <span class="s2">&quot;87zRQqylaoeF5I8o4lRhwvmUzf+pYdDpsCOlesIeFA/2xrtxKXJTbCPZgqplnXgPX5uprL+aRgxD8ua7MmdWaQ&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now to setup our VPN configuration in <code>/etc/ipsec.conf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat /etc/ipsec.conf
</span><span class='line'><span class="c"># basic configuration</span>
</span><span class='line'>config setup
</span><span class='line'>        <span class="nv">charondebug</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>
</span><span class='line'>        <span class="nv">uniqueids</span><span class="o">=</span>yes
</span><span class='line'>        <span class="nv">strictcrlpolicy</span><span class="o">=</span>no
</span><span class='line'>
</span><span class='line'><span class="c"># connection to amsterdam datacenter</span>
</span><span class='line'>conn paris-to-amsterdam
</span><span class='line'>  <span class="nv">authby</span><span class="o">=</span>secret
</span><span class='line'>  <span class="nv">left</span><span class="o">=</span>%defaultroute
</span><span class='line'>  <span class="nv">leftid</span><span class="o">=</span>51.15.139.201
</span><span class='line'>  <span class="nv">leftsubnet</span><span class="o">=</span>10.10.27.1/24
</span><span class='line'>  <span class="nv">right</span><span class="o">=</span>51.15.44.48
</span><span class='line'>  <span class="nv">rightsubnet</span><span class="o">=</span>10.9.141.1/24
</span><span class='line'>  <span class="nv">ike</span><span class="o">=</span>aes256-sha2_256-modp1024!
</span><span class='line'>  <span class="nv">esp</span><span class="o">=</span>aes256-sha2_256!
</span><span class='line'>  <span class="nv">keyingtries</span><span class="o">=</span>0
</span><span class='line'>  <span class="nv">ikelifetime</span><span class="o">=</span>1h
</span><span class='line'>  <span class="nv">lifetime</span><span class="o">=</span>8h
</span><span class='line'>  <span class="nv">dpddelay</span><span class="o">=</span>30
</span><span class='line'>  <span class="nv">dpdtimeout</span><span class="o">=</span>120
</span><span class='line'>  <span class="nv">dpdaction</span><span class="o">=</span>restart
</span><span class='line'>  <span class="nv">auto</span><span class="o">=</span>start
</span></code></pre></td></tr></table></div></figure>


<p>Firewall Rules:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo iptables -t nat -A POSTROUTING -s 10.9.141.0/24 -d 10.10.27.0/24 -j MASQUERADE
</span></code></pre></td></tr></table></div></figure>


<h2>Configure Site B:</h2>

<p>We will setup our VPN Gateway in Site B (Amsterdam), setup the <code>/etc/ipsec.secrets</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /etc/ipsec.secrets
</span><span class='line'>51.15.44.48 51.15.139.201 : PSK <span class="s2">&quot;87zRQqylaoeF5I8o4lRhwvmUzf+pYdDpsCOlesIeFA/2xrtxKXJTbCPZgqplnXgPX5uprL+aRgxD8ua7MmdWaQ&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next to setup our VPN Configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat /etc/ipsec.conf
</span><span class='line'><span class="c"># basic configuration</span>
</span><span class='line'>config setup
</span><span class='line'>        <span class="nv">charondebug</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>
</span><span class='line'>        <span class="nv">uniqueids</span><span class="o">=</span>yes
</span><span class='line'>        <span class="nv">strictcrlpolicy</span><span class="o">=</span>no
</span><span class='line'>
</span><span class='line'><span class="c"># connection to paris datacenter</span>
</span><span class='line'>conn amsterdam-to-paris
</span><span class='line'>  <span class="nv">authby</span><span class="o">=</span>secret
</span><span class='line'>  <span class="nv">left</span><span class="o">=</span>%defaultroute
</span><span class='line'>  <span class="nv">leftid</span><span class="o">=</span>51.15.44.48
</span><span class='line'>  <span class="nv">leftsubnet</span><span class="o">=</span>10.9.141.1/24
</span><span class='line'>  <span class="nv">right</span><span class="o">=</span>51.15.139.201
</span><span class='line'>  <span class="nv">rightsubnet</span><span class="o">=</span>10.10.27.1/24
</span><span class='line'>  <span class="nv">ike</span><span class="o">=</span>aes256-sha2_256-modp1024!
</span><span class='line'>  <span class="nv">esp</span><span class="o">=</span>aes256-sha2_256!
</span><span class='line'>  <span class="nv">keyingtries</span><span class="o">=</span>0
</span><span class='line'>  <span class="nv">ikelifetime</span><span class="o">=</span>1h
</span><span class='line'>  <span class="nv">lifetime</span><span class="o">=</span>8h
</span><span class='line'>  <span class="nv">dpddelay</span><span class="o">=</span>30
</span><span class='line'>  <span class="nv">dpdtimeout</span><span class="o">=</span>120
</span><span class='line'>  <span class="nv">dpdaction</span><span class="o">=</span>restart
</span><span class='line'>  <span class="nv">auto</span><span class="o">=</span>start
</span></code></pre></td></tr></table></div></figure>


<p>Firewall Rules:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo iptables -t nat -A POSTROUTING -s 10.10.27.0/24 -d 10.9.41.0/24 -J MASQUERADE
</span></code></pre></td></tr></table></div></figure>


<h2>Start the VPN:</h2>

<p>Start the VPN on both ends:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo ipsec restart
</span></code></pre></td></tr></table></div></figure>


<p>Get the status of the tunnel, in this case we are logged onto our Site A (Paris) Server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo ipsec status
</span><span class='line'>Security Associations <span class="o">(</span><span class="m">1</span> up, <span class="m">0</span> connecting<span class="o">)</span>:
</span><span class='line'>paris-to-amsterdam<span class="o">[</span>2<span class="o">]</span>: ESTABLISHED <span class="m">14</span> minutes ago, 10.10.27.161<span class="o">[</span>51.15.139.201<span class="o">]</span>...51.15.44.48<span class="o">[</span>51.15.44.48<span class="o">]</span>
</span><span class='line'>paris-to-amsterdam<span class="o">{</span>1<span class="o">}</span>:  INSTALLED, TUNNEL, reqid 1, ESP in UDP SPIs: c8c868ee_i c9d58dbd_o
</span><span class='line'>paris-to-amsterdam<span class="o">{</span>1<span class="o">}</span>:   10.10.27.1/24 <span class="o">===</span> 10.9.141.1/24
</span></code></pre></td></tr></table></div></figure>


<p>Test if we can see the remote end on its private range:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ping 10.9.141.97
</span><span class='line'>PING 10.9.141.97 <span class="o">(</span>10.9.141.97<span class="o">)</span> 56<span class="o">(</span>84<span class="o">)</span> bytes of data.
</span><span class='line'><span class="m">64</span> bytes from 10.9.141.97: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">1</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nb">time</span><span class="o">=</span>14.6 ms
</span></code></pre></td></tr></table></div></figure>


<p>Set the service to start on boot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo systemctl <span class="nb">enable </span>strongswan
</span></code></pre></td></tr></table></div></figure>


<p>Then your VPN should be setup correctly.</p>

<h2>Other useful commands:</h2>

<p>Start / Stop / Status:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo ipsec up connection-name
</span><span class='line'><span class="nv">$ </span>sudo ipsec down connection-name
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo ipsec restart
</span><span class='line'><span class="nv">$ </span>sudo ipsec status
</span><span class='line'><span class="nv">$ </span>sudo ipsec statusall
</span></code></pre></td></tr></table></div></figure>


<p>Get the Policies and States of the IPsec Tunnel:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo ip xfrm state
</span><span class='line'><span class="nv">$ </span>sudo ip xfrm policy
</span></code></pre></td></tr></table></div></figure>


<p>Reload the secrets, while the service is running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo ipsec rereadsecrets
</span></code></pre></td></tr></table></div></figure>


<p>Check if traffic flows through the tunnel:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo tcpdump esp
</span></code></pre></td></tr></table></div></figure>


<h2>Adding more connections to your config:</h2>

<p>If you have to add another site to your config, the example of the <code>ipsec.secrets</code> will look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /etc/ipsec.secrets
</span><span class='line'>51.15.139.201 51.15.44.48 : PSK <span class="s2">&quot;87zRQqylaoeF5I8o4lRhwvmUzf+pYdDpsCOlesIeFA/2xrtxKXJTbCPZgqplnXgPX5uprL+aRgxD8ua7MmdWaQ&quot;</span>
</span><span class='line'>51.15.139.201 51.15.87.41  : PSK <span class="s2">&quot;87zRQqylaoeF5I8o4lRhwvmUzf+pYdDpsCOlesIeFA/2xrtxKXJTbCPZgqplnXgPX5uprL+aRgxD8ua7MmdWaQ&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the <code>ipsec.conf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat /etc/ipsec.conf
</span><span class='line'><span class="c"># basic configuration</span>
</span><span class='line'>config setup
</span><span class='line'>        <span class="nv">charondebug</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>
</span><span class='line'>        <span class="nv">uniqueids</span><span class="o">=</span>yes
</span><span class='line'>        <span class="nv">strictcrlpolicy</span><span class="o">=</span>no
</span><span class='line'>
</span><span class='line'><span class="c"># connection to amsterdam datacenter</span>
</span><span class='line'>conn paris-to-amsterdam
</span><span class='line'>  <span class="nv">authby</span><span class="o">=</span>secret
</span><span class='line'>  <span class="nv">left</span><span class="o">=</span>%defaultroute
</span><span class='line'>  <span class="nv">leftid</span><span class="o">=</span>51.15.139.201
</span><span class='line'>  <span class="nv">leftsubnet</span><span class="o">=</span>10.10.27.161/32
</span><span class='line'>  <span class="nv">right</span><span class="o">=</span>51.15.44.48
</span><span class='line'>  <span class="nv">rightsubnet</span><span class="o">=</span>10.9.141.97/32
</span><span class='line'>  <span class="nv">ike</span><span class="o">=</span>aes256-sha2_256-modp1024!
</span><span class='line'>  <span class="nv">esp</span><span class="o">=</span>aes256-sha2_256!
</span><span class='line'>  <span class="nv">keyingtries</span><span class="o">=</span>0
</span><span class='line'>  <span class="nv">ikelifetime</span><span class="o">=</span>1h
</span><span class='line'>  <span class="nv">lifetime</span><span class="o">=</span>8h
</span><span class='line'>  <span class="nv">dpddelay</span><span class="o">=</span>30
</span><span class='line'>  <span class="nv">dpdtimeout</span><span class="o">=</span>120
</span><span class='line'>  <span class="nv">dpdaction</span><span class="o">=</span>restart
</span><span class='line'>  <span class="nv">auto</span><span class="o">=</span>start
</span><span class='line'>
</span><span class='line'><span class="c"># connection to frankfurt datacenter</span>
</span><span class='line'>conn paris-to-frankfurt
</span><span class='line'>  <span class="nv">authby</span><span class="o">=</span>secret
</span><span class='line'>  <span class="nv">left</span><span class="o">=</span>%defaultroute
</span><span class='line'>  <span class="nv">leftid</span><span class="o">=</span>51.15.139.201
</span><span class='line'>  <span class="nv">leftsubnet</span><span class="o">=</span>10.10.27.1/24
</span><span class='line'>  <span class="nv">right</span><span class="o">=</span>51.15.87.41
</span><span class='line'>  <span class="nv">rightsubnet</span><span class="o">=</span>10.9.137.1/24
</span><span class='line'>  <span class="nv">ike</span><span class="o">=</span>aes256-sha2_256-modp1024!
</span><span class='line'>  <span class="nv">esp</span><span class="o">=</span>aes256-sha2_256!
</span><span class='line'>  <span class="nv">keyingtries</span><span class="o">=</span>0
</span><span class='line'>  <span class="nv">ikelifetime</span><span class="o">=</span>1h
</span><span class='line'>  <span class="nv">lifetime</span><span class="o">=</span>8h
</span><span class='line'>  <span class="nv">dpddelay</span><span class="o">=</span>30
</span><span class='line'>  <span class="nv">dpdtimeout</span><span class="o">=</span>120
</span><span class='line'>  <span class="nv">dpdaction</span><span class="o">=</span>restart
</span><span class='line'>  <span class="nv">auto</span><span class="o">=</span>start
</span></code></pre></td></tr></table></div></figure>


<p>Just remember to configure the config on the Frankfurt VPN Gateway, and the example of the status output will look like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo ipsec status
</span><span class='line'>Security Associations <span class="o">(</span><span class="m">2</span> up, <span class="m">0</span> connecting<span class="o">)</span>:
</span><span class='line'>paris-to-frankfurt<span class="o">[</span>2<span class="o">]</span>: ESTABLISHED <span class="m">102</span> seconds ago, 10.10.27.161<span class="o">[</span>51.15.139.201<span class="o">]</span>...51.15.87.41<span class="o">[</span>51.15.87.41<span class="o">]</span>
</span><span class='line'>paris-to-frankfurt<span class="o">{</span>1<span class="o">}</span>:  INSTALLED, TUNNEL, reqid 2, ESP in UDP SPIs: cbc62a1f_i c95b8f78_o
</span><span class='line'>paris-to-frankfurt<span class="o">{</span>1<span class="o">}</span>:   10.10.27.1/24 <span class="o">===</span> 10.9.137.1/24
</span><span class='line'>paris-to-amsterdam<span class="o">[</span>1<span class="o">]</span>: ESTABLISHED <span class="m">102</span> seconds ago, 10.10.27.161<span class="o">[</span>51.15.139.201<span class="o">]</span>...51.15.44.48<span class="o">[</span>51.15.44.48<span class="o">]</span>
</span><span class='line'>paris-to-amsterdam<span class="o">{</span>2<span class="o">}</span>:  INSTALLED, TUNNEL, reqid 1, ESP in UDP SPIs: c7b36756_i cc54053c_o
</span><span class='line'>paris-to-amsterdam<span class="o">{</span>2<span class="o">}</span>:   10.10.27.1/24 <span class="o">===</span> 10.9.141.1/24
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authenticate to Your AWS MySQL RDS Instance via IAM]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/01/30/authenticate-to-your-aws-mysql-rds-instance-via-iam/"/>
    <updated>2018-01-30T10:02:05-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/01/30/authenticate-to-your-aws-mysql-rds-instance-via-iam</id>
    <content type="html"><![CDATA[<p>On Amazon Web Services with RDS for MySQL or Aurora with MySQL compatibility, you can authenticate to your Database instance or cluster using IAM for database authentication. The benefit of using this authentication method is that you don&rsquo;t need to use a password when you connect to your database, but you use your authentication token instead</p>

<ul>
<li>More info from their <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.Connecting.html">docs</a></li>
</ul>


<h2>What we will be doing today:</h2>

<p>We will do the following:</p>

<ul>
<li>Create RDS MySQL Database</li>
<li>Create IAM Policy that allows a user to connect via a MySQL User</li>
<li>Create IAM User and associate IAM Policy</li>
<li>Configure the new user credentials in the awscli credential provider</li>
<li>Bash script to generate the auth token and authenticate to RDS via Token instead of password</li>
</ul>


<h2>Create the RDS Database:</h2>

<p>In this tutorial I will spin up a <code>db.t2.micro</code> in <code>eu-west-1</code> with <code>IAMDatabaseAuthentication Enabled</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>aws rds create-db-instance <span class="se">\</span>
</span><span class='line'>    --db-instance-identifier rbtest <span class="se">\</span>
</span><span class='line'>    --db-instance-class db.t2.micro <span class="se">\</span>
</span><span class='line'>    --engine MySQL <span class="se">\</span>
</span><span class='line'>    --allocated-storage <span class="m">20</span> <span class="se">\</span>
</span><span class='line'>    --master-username dbadmin <span class="se">\</span>
</span><span class='line'>    --master-user-password mysuperpassword <span class="se">\</span>
</span><span class='line'>    --region eu-west-1 <span class="se">\</span>
</span><span class='line'>    --enable-iam-database-authentication
</span></code></pre></td></tr></table></div></figure>


<p>Give it some time to spin up, then get your database endpoint:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws rds describe-db-instances --db-instance-identifier rbtest <span class="p">|</span> jq -r <span class="s2">&quot;.DBInstances[].Endpoint.Address&quot;</span>
</span><span class='line'>rbtest.abcdefgh.eu-west-1.rds.amazonaws.com
</span></code></pre></td></tr></table></div></figure>


<p>If you need to have SSL Enabled, get the bundled certificate as described in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using SSL with RDS</a> docs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget -O /tmp/rds.pem https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem
</span></code></pre></td></tr></table></div></figure>


<h2>Create the Database Account:</h2>

<p>Create the database account on the MySQL RDS instance as described from their <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.DBAccounts.html">docs</a>. IAM handles the authentication via AWSAuthenticationPlugin, therefore we do not need to set passwords on the database.</p>

<p>Connect to the database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mysql -u dbadmin -h rbtest.abcdefgh.eu-west-1.rds.amazonaws.com -p
</span></code></pre></td></tr></table></div></figure>


<p>Create the database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">CREATE</span> <span class="k">USER</span> <span class="n">mydbaccount</span> <span class="n">IDENTIFIED</span> <span class="k">WITH</span> <span class="n">AWSAuthenticationPlugin</span> <span class="k">AS</span> <span class="s1">&#39;RDS&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="n">FLUSH</span> <span class="k">PRIVILEGES</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Creating the Databases and Granting Permissions</h2>

<p>While you are on the database, create 2 databases (<code>db1</code> and <code>db2</code>) with some tables, which we will use for our user to have read only access to, and create one database (<code>db3</code>) which the user will not have access to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">create</span> <span class="k">database</span> <span class="n">db1</span><span class="p">;</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">create</span> <span class="k">database</span> <span class="n">db2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="n">use</span> <span class="n">db1</span><span class="p">;</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">create</span> <span class="k">table</span> <span class="n">foo</span> <span class="p">(</span><span class="n">name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">age</span> <span class="nb">INT</span><span class="p">);</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">foo</span> <span class="k">values</span><span class="p">(</span><span class="s1">&#39;ruan&#39;</span><span class="p">,</span> <span class="mi">31</span><span class="p">);</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">foo</span> <span class="k">values</span><span class="p">(</span><span class="s1">&#39;james&#39;</span><span class="p">,</span> <span class="mi">32</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="n">use</span> <span class="n">db2</span><span class="p">;</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">create</span> <span class="k">table</span> <span class="n">foo</span> <span class="p">(</span><span class="k">location</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">));</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">foo</span> <span class="k">values</span><span class="p">(</span><span class="s1">&#39;south africa&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">foo</span> <span class="k">values</span><span class="p">(</span><span class="s1">&#39;new zealand&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">foo</span> <span class="k">values</span><span class="p">(</span><span class="s1">&#39;australia&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">grant</span> <span class="k">select</span> <span class="k">on</span> <span class="n">db1</span><span class="p">.</span><span class="o">*</span> <span class="k">to</span> <span class="s1">&#39;mydbuser&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">grant</span> <span class="k">select</span> <span class="k">on</span> <span class="n">db2</span><span class="p">.</span><span class="o">*</span> <span class="k">to</span> <span class="s1">&#39;mydbuser&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">create</span> <span class="k">database</span> <span class="n">db3</span><span class="p">;</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="n">use</span> <span class="n">db3</span><span class="p">;</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">create</span> <span class="k">table</span> <span class="n">foo</span> <span class="p">(</span><span class="n">passwords</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">));</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">foo</span> <span class="k">values</span><span class="p">(</span><span class="s1">&#39;superpassword&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">foo</span> <span class="k">values</span><span class="p">(</span><span class="s1">&#39;sekret&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="n">flush</span> <span class="k">privileges</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>IAM Permissions to allow our user to authenticate to our RDS.</h2>

<p>First to create the user and configure awscli tools. My default profile has administrative access, so we will create our db user in its own profile and configure our awscli tools with its new access key and secret key:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws configure --profile dbuser
</span><span class='line'>AWS Access Key ID <span class="o">[</span>None<span class="o">]</span>: xxxxxxxxxxxxx
</span><span class='line'>AWS Secret Access Key <span class="o">[</span>None<span class="o">]</span>: xxxxxxxxxxxxxxxxxx
</span><span class='line'>Default region name <span class="o">[</span>None<span class="o">]</span>: eu-west-1
</span><span class='line'>Default output format <span class="o">[</span>None<span class="o">]</span>: json
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to create a IAM policy to allow our user to authenticate to our RDS Instance via IAM, which we will associate with our Users account.</p>

<p>We need the AWS Account ID, the Database Identifier Resource ID, and the User Account that we created on MySQL.</p>

<p>To get the DB ResourceId:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws rds describe-db-instances --db-instance-identifier rbtest <span class="p">|</span> jq -r <span class="err">&quot;</span>.DBInstances<span class="o">[]</span>.DbiResourceId
</span><span class='line'>db-123456789ABCDEFGH
</span></code></pre></td></tr></table></div></figure>


<p>Create the IAM Policy and associate it with the new user account:</p>

<ul>
<li><a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.IAMPolicy.html">More info from the Docs</a>:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>           <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;RDSIAMAUTH&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>             <span class="s2">&quot;rds-db:connect&quot;</span>
</span><span class='line'>         <span class="p">],</span>
</span><span class='line'>         <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>             <span class="s2">&quot;arn:aws:rds-db:eu-west-1:123456789012:dbuser:db-123456789ABCDEFGH/mydbaccount&quot;</span>
</span><span class='line'>         <span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The bash script will get the authentication token which will be used as the password. Note that the authentication token will expire after 15 minutes after creation. The <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.Connecting.html">docs</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">db_endpoint</span><span class="o">=</span><span class="s2">&quot;rbtest.abcdefgh.eu-west-1.rds.amazonaws.com&quot;</span>
</span><span class='line'><span class="nv">auth_token</span><span class="o">=</span><span class="s2">&quot;$(aws --profile dbuser rds generate-db-auth-token --hostname $RDSHOST --port 3306 --username mydbaccount )&quot;</span>
</span><span class='line'>mysql --host<span class="o">=</span><span class="nv">$db_endpoint</span> --port<span class="o">=</span><span class="m">3306</span> --enable-cleartext-plugin --user<span class="o">=</span>mydbaccount --password<span class="o">=</span><span class="nv">$auth_token</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Testing it out:</h2>

<p>Now that our policies are in place, credentials from the credential provider has been set and our bash script is setup, lets connect to our database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./conn-mysql.sh
</span><span class='line'>
</span><span class='line'>mysql&gt; show databases<span class="p">;</span>
</span><span class='line'>+--------------------+
</span><span class='line'><span class="p">|</span> Database           <span class="p">|</span>
</span><span class='line'>+--------------------+
</span><span class='line'><span class="p">|</span> information_schema <span class="p">|</span>
</span><span class='line'><span class="p">|</span> db1                <span class="p">|</span>
</span><span class='line'><span class="p">|</span> db2                <span class="p">|</span>
</span><span class='line'>+--------------------+
</span><span class='line'><span class="m">3</span> rows in <span class="nb">set</span> <span class="o">(</span>0.16 sec<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>mysql&gt; <span class="k">select</span> * from db2.foo<span class="p">;</span>
</span><span class='line'>+--------------+
</span><span class='line'><span class="p">|</span> location     <span class="p">|</span>
</span><span class='line'>+--------------+
</span><span class='line'><span class="p">|</span> south africa <span class="p">|</span>
</span><span class='line'><span class="p">|</span> new zealand  <span class="p">|</span>
</span><span class='line'><span class="p">|</span> australia    <span class="p">|</span>
</span><span class='line'>+--------------+
</span><span class='line'>
</span><span class='line'>mysql&gt; <span class="k">select</span> * from db3.foo<span class="p">;</span>
</span><span class='line'>ERROR <span class="m">1044</span> <span class="o">(</span>42000<span class="o">)</span>: Access denied <span class="k">for</span> user <span class="s1">&#39;mydbaccount&#39;</span>@<span class="s1">&#39;*&#39;</span> to database <span class="s1">&#39;db3&#39;</span>
</span><span class='line'>
</span><span class='line'>mysql&gt; create database test123<span class="p">;</span>
</span><span class='line'>ERROR <span class="m">1044</span> <span class="o">(</span>42000<span class="o">)</span>: Access denied <span class="k">for</span> user <span class="s1">&#39;mydbaccount&#39;</span>@<span class="s1">&#39;%&#39;</span> to database <span class="s1">&#39;test123&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Changing the IAM Policy to revoke access:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./conn-mysql.sh
</span><span class='line'>mysql: <span class="o">[</span>Warning<span class="o">]</span> Using a password on the <span class="nb">command </span>line interface can be insecure.
</span><span class='line'>ERROR <span class="m">1045</span> <span class="o">(</span>28000<span class="o">)</span>: Access denied <span class="k">for</span> user <span class="s1">&#39;mydbaccount&#39;</span>@<span class="s1">&#39;10.0.0.10&#39;</span> <span class="o">(</span>using password: YES<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Creating a MySQL Client Wrapper Script:</h2>

<p>Using bash we can create a wrapper script so we can connect to our database like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mysql-iam prod rbtest.eu-west-1.amazonaws.com mydbaccount
</span><span class='line'>mysql&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Here is the script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Wrapper MySQL Client for IAM Based Authentication for MySQL and Amazon Aurora on RDS</span>
</span><span class='line'><span class="c"># Read: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html</span>
</span><span class='line'><span class="c"># Usage: [app] [aws_profile] [rds_endpoint] [rds_mysql_username]</span>
</span><span class='line'>
</span><span class='line'>command_exists<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">type</span> <span class="s2">&quot;$1&quot;</span> <span class="p">&amp;</span>&gt; /dev/null <span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>check_required_parameters<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">aws_profile</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'>  <span class="nv">rds_hostname</span><span class="o">=</span><span class="s2">&quot;$2&quot;</span>
</span><span class='line'>  <span class="nv">rds_username</span><span class="o">=</span><span class="s2">&quot;$3&quot;</span>
</span><span class='line'>  <span class="k">if</span> ! <span class="o">[[</span> -n <span class="s2">&quot;$aws_profile&quot;</span> <span class="o">&amp;&amp;</span> -n <span class="s2">&quot;$rds_username&quot;</span> <span class="o">&amp;&amp;</span> -n <span class="s2">&quot;$rds_username&quot;</span> <span class="o">]]</span>
</span><span class='line'>    <span class="k">then</span>
</span><span class='line'>      <span class="nb">echo</span> <span class="s2">&quot;Error: Missing Parameters&quot;</span>
</span><span class='line'>      <span class="nb">echo</span> <span class="s2">&quot;Expected: $0 aws_profile_name rds_endpoint_name rds_db_username&quot;</span>
</span><span class='line'>      <span class="nb">echo</span> <span class="s2">&quot;Usage: $0 prod dbname.eu-west-1.amazonaws.com dba&quot;</span>
</span><span class='line'>      <span class="nb">exit </span>1
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>get_auth_token<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">aws_bin</span><span class="o">=</span><span class="k">$(</span>which aws <span class="p">|</span> head -1<span class="k">)</span>
</span><span class='line'>  <span class="nv">auth_token</span><span class="o">=</span><span class="s2">&quot;$($aws_bin --profile $aws_profile rds generate-db-auth-token --hostname $rds_hostname --port 3306 --username $rds_username )&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>connect_to_rds<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">mysql_bin</span><span class="o">=</span><span class="k">$(</span>which mysql <span class="p">|</span> head -1<span class="k">)</span>
</span><span class='line'>  <span class="nv">$mysql_bin</span> --host<span class="o">=</span><span class="nv">$rds_hostname</span> --port<span class="o">=</span><span class="m">3306</span> --enable-cleartext-plugin --user<span class="o">=</span><span class="nv">$rds_username</span> --password<span class="o">=</span><span class="nv">$auth_token</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$1&quot;</span> <span class="o">==</span> <span class="s2">&quot;help&quot;</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;Help&quot;</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;Expected: $0 aws_profile_name rds_endpoint_name rds_db_username&quot;</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;Usage: $0 prod dbname.eu-west-1.amazonaws.com dba_user&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>0
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> command_exists aws <span class="o">&amp;&amp;</span> command_exists mysql
</span><span class='line'><span class="k">then</span>
</span><span class='line'>  check_required_parameters <span class="nv">$1</span> <span class="nv">$2</span> <span class="nv">$3</span>
</span><span class='line'>  get_auth_token
</span><span class='line'>  connect_to_rds
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;Error: Make sure aws-cli and mysql client is installed&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>For more information on this, have a look at the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">docs</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Hive for Small Datasets on My Mac Using Docker]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/01/23/using-hive-for-small-datasets-on-my-mac-using-docker/"/>
    <updated>2018-01-23T10:06:16-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/01/23/using-hive-for-small-datasets-on-my-mac-using-docker</id>
    <content type="html"><![CDATA[<p>I wanted to process a small subset of data, and not wanting to spin up a cluster, so I used <code>nagasuga/docker-hive</code> docker image to run Hive on my Mac.</p>

<h2>Running Hive</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run -it -v /home/me/resource-data.csv:/resource-data.csv nagasuga/docker-hive /bin/bash -c <span class="s1">&#39;cd /usr/local/hive &amp;&amp; ./bin/hive&#39;</span>
</span><span class='line'>hive&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Once I was entered into my hive shell, I created a table for my CSV data:</p>

<h2>Creating the Table</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">hive</span><span class="o">&gt;</span> <span class="k">create</span> <span class="k">table</span> <span class="n">resources</span> <span class="p">(</span><span class="n">ResourceType</span> <span class="n">STRING</span><span class="p">,</span> <span class="k">Owner</span> <span class="n">STRING</span><span class="p">)</span> <span class="k">ROW</span> <span class="n">FORMAT</span> <span class="n">DELIMITED</span> <span class="n">FIELDS</span> <span class="n">TERMINATED</span> <span class="k">BY</span> <span class="s1">&#39;,&#39;</span> <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">hive</span><span class="o">&gt;</span> <span class="n">hive</span><span class="o">&gt;</span> <span class="k">show</span> <span class="n">tables</span><span class="p">;</span>
</span><span class='line'><span class="n">OK</span>
</span><span class='line'><span class="n">resources</span>
</span><span class='line'>
</span><span class='line'><span class="n">hive</span><span class="o">&gt;</span> <span class="k">describe</span> <span class="n">resources</span><span class="p">;</span>
</span><span class='line'><span class="n">OK</span>
</span><span class='line'><span class="n">resourcetype</span>           <span class="n">string</span>
</span><span class='line'><span class="k">owner</span>                  <span class="n">string</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Loading the Data</h2>

<p>My csv data is located at <code>/resource-data.csv</code> on the container, which I will load into my table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">hive</span><span class="o">&gt;</span> <span class="k">load</span> <span class="k">data</span> <span class="k">local</span> <span class="n">inpath</span> <span class="s1">&#39;/resource-data.csv&#39;</span> <span class="k">into</span> <span class="k">table</span> <span class="n">resources</span><span class="p">;</span>
</span><span class='line'><span class="n">Loading</span> <span class="k">data</span> <span class="k">to</span> <span class="k">table</span> <span class="k">default</span><span class="p">.</span><span class="n">resources</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Query the Data</h2>

<p>Just two simple queries for demonstration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">hive</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">resources</span> <span class="k">limit</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="n">OK</span>
</span><span class='line'><span class="n">EC2</span>     <span class="n">Engineering</span>
</span><span class='line'><span class="n">EC2</span>     <span class="n">Finance</span>
</span><span class='line'><span class="n">EC2</span>     <span class="n">Product</span>
</span><span class='line'>
</span><span class='line'><span class="n">hive</span><span class="o">&gt;</span> <span class="n">hive</span><span class="o">&gt;</span> <span class="k">select</span> <span class="k">count</span><span class="p">(</span><span class="n">resourcetype</span><span class="p">)</span> <span class="k">as</span> <span class="n">num</span><span class="p">,</span> <span class="k">owner</span> <span class="k">from</span> <span class="n">resources</span> <span class="k">group</span> <span class="k">by</span> <span class="k">owner</span> <span class="k">order</span> <span class="k">by</span> <span class="n">num</span> <span class="k">desc</span> <span class="k">limit</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="n">K</span>
</span><span class='line'><span class="mi">50</span>     <span class="n">Engineering</span>
</span><span class='line'><span class="mi">20</span>     <span class="n">Product</span>
</span><span class='line'><span class="mi">10</span>     <span class="n">Finance</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Resource:</h2>

<p>Thanks to <a href="https://github.com/nagasuga/docker-hive">https://github.com/nagasuga/docker-hive</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Getpass in Python to Accept Passwords From Stdin Without Echoing It Back]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/01/22/using-getpass-in-python-to-accept-passwords-from-stdin-without-echoing-it-back/"/>
    <updated>2018-01-22T13:15:09-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/01/22/using-getpass-in-python-to-accept-passwords-from-stdin-without-echoing-it-back</id>
    <content type="html"><![CDATA[<p>Using <code>raw_input</code> in python expects standard input, which echo&rsquo;s it back after enter is executed, below is an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">(</span><span class="s">&quot;What is the word? </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">What</span> <span class="ow">is</span> <span class="n">the</span> <span class="n">word</span><span class="err">?</span>
</span><span class='line'><span class="n">football</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
</span><span class='line'><span class="n">football</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using getpass, the standard input gets masked, like you would expect when entering a password, like below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">getpass</span> <span class="kn">import</span> <span class="n">getpass</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span> <span class="o">=</span> <span class="n">getpass</span><span class="p">()</span>
</span><span class='line'><span class="n">Password</span><span class="p">:</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
</span><span class='line'><span class="n">rugby</span>
</span></code></pre></td></tr></table></div></figure>


<p>Changing the default prompt:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span> <span class="o">=</span> <span class="n">getpass</span><span class="p">(</span><span class="n">prompt</span><span class="o">=</span><span class="s">&#39;What is your name? &#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">What</span> <span class="ow">is</span> <span class="n">your</span> <span class="n">name</span><span class="err">?</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
</span><span class='line'><span class="n">Ruan</span>
</span></code></pre></td></tr></table></div></figure>


<p>Creating a Simple Insecure Password Verification App:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">getpass</span> <span class="kn">import</span> <span class="n">getpass</span>
</span><span class='line'>
</span><span class='line'><span class="n">password</span> <span class="o">=</span> <span class="n">getpass</span><span class="p">()</span>
</span><span class='line'><span class="k">if</span> <span class="n">password</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="o">==</span> <span class="s">&#39;simplepass&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Password Correct&#39;</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Password Failed&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing it, by first entering a incorrect string, then the correct one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python auth-check.py
</span><span class='line'>Password:
</span><span class='line'>Password Failed
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>python auth-check.py
</span><span class='line'>Password:
</span><span class='line'>Password Correct
</span></code></pre></td></tr></table></div></figure>


<p>You definitely don&rsquo;t want to hard code the credentials in your app, but you get the idea.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Basic Hello World Pipeline on Concourse]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/01/11/setup-a-basic-hello-world-pipeline-on-concourse/"/>
    <updated>2018-01-11T09:15:27-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/01/11/setup-a-basic-hello-world-pipeline-on-concourse</id>
    <content type="html"><![CDATA[<p>We will setup a basic pipeline that pulls down content from github, then executes a task that prints hello world.</p>

<h2>Content on Github</h2>

<p>The config can be found on my <a href="https://github.com/ruanbekker/concourse-test/tree/basic-helloworld">Github Branch</a> but I will display each file in this post.</p>

<h2>Running our Pipeline</h2>

<p>Our <code>pipeline.yml</code> that we need to have for concourse to know what to do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">resources</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-git-repo</span>
</span><span class='line'>  <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git</span>
</span><span class='line'>  <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">uri</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://github.com/ruanbekker/concourse-test</span>
</span><span class='line'>    <span class="l-Scalar-Plain">branch</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">basic-helloworld</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">jobs</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hello-world-job</span>
</span><span class='line'>  <span class="l-Scalar-Plain">public</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>  <span class="l-Scalar-Plain">plan</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-git-repo</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">task</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">task_print-hello-world</span>
</span><span class='line'>    <span class="l-Scalar-Plain">file</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-git-repo/ci/task-hello-world.yml</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can see from our <code>pipeline.yml</code> file, it points to a <code>task-hello-world.yml</code>, which I will preview below, but can be found in the repo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">platform</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linux</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">image_resource</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker-image</span>
</span><span class='line'>  <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">repository</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">busybox</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">run</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">echo</span>
</span><span class='line'>  <span class="l-Scalar-Plain">args</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;hello</span><span class="nv"> </span><span class="s">world&quot;</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Set Pipeline:</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ fly -t tutorial sp -c pipeline.yml -p pipeline-01</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Unpause Pipeline:</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ fly -t tutorial up -p pipeline-01</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Trigger Job:</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ fly -t tutorial tj -j pipeline-01/hello-world-job --watch</span>
</span><span class='line'><span class="l-Scalar-Plain">started pipeline-01/hello-world-job</span> <span class="c1">#2</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Cloning into &#39;/tmp/build/get&#39;...</span>
</span><span class='line'><span class="l-Scalar-Plain">Fetching HEAD</span>
</span><span class='line'><span class="l-Scalar-Plain">292c84b change task name</span>
</span><span class='line'><span class="l-Scalar-Plain">initializing</span>
</span><span class='line'><span class="l-Scalar-Plain">running echo hello world</span>
</span><span class='line'><span class="l-Scalar-Plain">hello world</span>
</span><span class='line'><span class="l-Scalar-Plain">succeeded</span>
</span></code></pre></td></tr></table></div></figure>


<p>This was all done through the command line, but you can also accessed it from the web ui</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Change Your Relayhost on Postfix Using Sed]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/12/14/change-your-relayhost-on-postfix-using-sed/"/>
    <updated>2017-12-14T10:11:33-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/12/14/change-your-relayhost-on-postfix-using-sed</id>
    <content type="html"><![CDATA[<p>a Quick post on how to change your relayhost on Postfix to a External SMTP Provider and aswell how to revert back the changes so the Relay server sends out mail directly.</p>

<h2>Checking your current relayhost configuration:</h2>

<p>We will assume your <code>/etc/postfix/main.cf</code> has a relayhost entry of <code>#relayhost =</code>, in my example it will look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /etc/postfix/main.cf
</span><span class='line'><span class="c">#relayhost =</span>
</span></code></pre></td></tr></table></div></figure>


<p>If not, you can just adjust your sed command accordingly.</p>

<h2>Changing your relayhost configuration to a External SMTP Provider:</h2>

<p>We will use sed to change the relayhost to <code>za-smtp-outbound-1.mimecast.co.za</code> for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -i <span class="s1">&#39;s/#relayhost\ =/relayhost\ =\ \[za-smtp-outbound-1.mimecast.co.za\]/g&#39;</span> /etc/postfix/main.cf
</span></code></pre></td></tr></table></div></figure>


<p>to verify that we have set the config, look at the config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /etc/postfix/main.cf <span class="p">|</span> grep relayhost
</span><span class='line'><span class="nv">relayhost</span> <span class="o">=</span> <span class="o">[</span>za-smtp-outbound-1.mimecast.co.za<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you see the changes looks as expected, you can restart postfix:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>/etc/init.d/postfix restart
</span></code></pre></td></tr></table></div></figure>


<p>Then you can tail the logs to see if the mail gets delivered:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tail -f /var/log/maillog
</span></code></pre></td></tr></table></div></figure>


<h2>Revert your changes so that postfix sends out directly:</h2>

<p>To revert your changes, let&rsquo;s change the config back to what it was:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -i <span class="s1">&#39;s/relayhost\ =\ \[za-smtp-outbound-1.mimecast.co.za\]/#relayhost\ =/g&#39;</span> /etc/postfix/main.cf
</span></code></pre></td></tr></table></div></figure>


<p>To verify your changes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /etc/postfix/main.cf <span class="p">|</span> grep relayhost
</span><span class='line'><span class="c">#relayhost =</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the relayhost is commented out, meaning that the relayhost property will not be active, go ahead and restart the service for the changes to take effect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>/etc/init.d/postfix restart
</span></code></pre></td></tr></table></div></figure>


<p>Same as before, look at the logs to confirm mailflow is as expected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tail -f /var/log/maillog
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graphing Pretty Charts With Python Flask and Chartjs]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/12/14/graphing-pretty-charts-with-python-flask-and-chartjs/"/>
    <updated>2017-12-14T02:28:51-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/12/14/graphing-pretty-charts-with-python-flask-and-chartjs</id>
    <content type="html"><![CDATA[<p><img src="https://thumbsplus.tutsplus.com/uploads/users/1251/posts/28278/preview_image/chartjs-tutsplus.jpg" alt="" /></p>

<p>I am a big sucker for Charts and Graphs, and today I found one awesome library called <a href="http://www.chartjs.org/">Chart.js</a>, which we will use with Python Flask Web Framework, to graph our data.</p>

<p>As Bitcoin is doing so well, I decided to graph the monthly Bitcoin price from January up until now.</p>

<h2>Dependencies:</h2>

<p>Install Flask:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pip install flask
</span></code></pre></td></tr></table></div></figure>


<p>Create the files and directories:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>touch app.py
</span><span class='line'><span class="nv">$ </span>mkdir templates
</span></code></pre></td></tr></table></div></figure>


<p>We need the <a href="http://www.chartjs.org/docs/latest/#installation">Chart.js</a> library, but I will use the CDN version, in my html.</p>

<h2>Creating the Flask App:</h2>

<p>Our data that we want to graph will be hard-coded in our application, but there are many ways to make this more dynamic, in your <code>app.py</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">Markup</span><span class="p">,</span> <span class="n">render_template</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">labels</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s">&#39;JAN&#39;</span><span class="p">,</span> <span class="s">&#39;FEB&#39;</span><span class="p">,</span> <span class="s">&#39;MAR&#39;</span><span class="p">,</span> <span class="s">&#39;APR&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;MAY&#39;</span><span class="p">,</span> <span class="s">&#39;JUN&#39;</span><span class="p">,</span> <span class="s">&#39;JUL&#39;</span><span class="p">,</span> <span class="s">&#39;AUG&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;SEP&#39;</span><span class="p">,</span> <span class="s">&#39;OCT&#39;</span><span class="p">,</span> <span class="s">&#39;NOV&#39;</span><span class="p">,</span> <span class="s">&#39;DEC&#39;</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">values</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="mf">967.67</span><span class="p">,</span> <span class="mf">1190.89</span><span class="p">,</span> <span class="mf">1079.75</span><span class="p">,</span> <span class="mf">1349.19</span><span class="p">,</span>
</span><span class='line'>    <span class="mf">2328.91</span><span class="p">,</span> <span class="mf">2504.28</span><span class="p">,</span> <span class="mf">2873.83</span><span class="p">,</span> <span class="mf">4764.87</span><span class="p">,</span>
</span><span class='line'>    <span class="mf">4349.29</span><span class="p">,</span> <span class="mf">6458.30</span><span class="p">,</span> <span class="mi">9907</span><span class="p">,</span> <span class="mi">16297</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s">&quot;#F7464A&quot;</span><span class="p">,</span> <span class="s">&quot;#46BFBD&quot;</span><span class="p">,</span> <span class="s">&quot;#FDB45C&quot;</span><span class="p">,</span> <span class="s">&quot;#FEDCBA&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;#ABCDEF&quot;</span><span class="p">,</span> <span class="s">&quot;#DDDDDD&quot;</span><span class="p">,</span> <span class="s">&quot;#ABCABC&quot;</span><span class="p">,</span> <span class="s">&quot;#4169E1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;#C71585&quot;</span><span class="p">,</span> <span class="s">&quot;#FF4500&quot;</span><span class="p">,</span> <span class="s">&quot;#FEDCBA&quot;</span><span class="p">,</span> <span class="s">&quot;#46BFBD&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/bar&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">bar</span><span class="p">():</span>
</span><span class='line'>    <span class="n">bar_labels</span><span class="o">=</span><span class="n">labels</span>
</span><span class='line'>    <span class="n">bar_values</span><span class="o">=</span><span class="n">values</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&#39;bar_chart.html&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s">&#39;Bitcoin Monthly Price in USD&#39;</span><span class="p">,</span> <span class="nb">max</span><span class="o">=</span><span class="mi">17000</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">bar_labels</span><span class="p">,</span> <span class="n">values</span><span class="o">=</span><span class="n">bar_values</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/line&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">line</span><span class="p">():</span>
</span><span class='line'>    <span class="n">line_labels</span><span class="o">=</span><span class="n">labels</span>
</span><span class='line'>    <span class="n">line_values</span><span class="o">=</span><span class="n">values</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&#39;line_chart.html&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s">&#39;Bitcoin Monthly Price in USD&#39;</span><span class="p">,</span> <span class="nb">max</span><span class="o">=</span><span class="mi">17000</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">line_labels</span><span class="p">,</span> <span class="n">values</span><span class="o">=</span><span class="n">line_values</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/pie&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">pie</span><span class="p">():</span>
</span><span class='line'>    <span class="n">pie_labels</span> <span class="o">=</span> <span class="n">labels</span>
</span><span class='line'>    <span class="n">pie_values</span> <span class="o">=</span> <span class="n">values</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&#39;pie_chart.html&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s">&#39;Bitcoin Monthly Price in USD&#39;</span><span class="p">,</span> <span class="nb">max</span><span class="o">=</span><span class="mi">17000</span><span class="p">,</span> <span class="nb">set</span><span class="o">=</span><span class="nb">zip</span><span class="p">(</span><span class="n">values</span><span class="p">,</span> <span class="n">labels</span><span class="p">,</span> <span class="n">colors</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">8080</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Populating the HTML Static Content:</h2>

<p>As we are using <code>render_template</code> we need to populate our html files in our <code>templates/</code> directory. As you can see we have 3 different html files:</p>

<ul>
<li><code>templates/bar_chart.html</code> :</li>
</ul>


<script src="https://gist.github.com/ruanbekker/019a893face148a43b048240a79c4605.js"></script>


<ul>
<li><code>templates/line_chart.html</code>:</li>
</ul>


<script src="https://gist.github.com/ruanbekker/b9fe6d95019a0e382108f7bfe3ed4122.js"></script>


<ul>
<li><code>templates/pie_chart.html</code>:</li>
</ul>


<script src="https://gist.github.com/ruanbekker/540737448cd8d4a1b427028fa713b061.js"></script>


<h2>Running our Application:</h2>

<p>As you can see, we have 3 endpoints, each representing a different chart style:</p>

<ul>
<li>/line</li>
<li>/bar</li>
<li>/pie</li>
</ul>


<p>Let&rsquo;s start our flask application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python app.py
</span></code></pre></td></tr></table></div></figure>


<p>When we access our <code>/line</code> endpoint:</p>

<p><img src="https://i.snag.gy/M8FU6S.jpg" alt="" /></p>

<p>When we access our <code>/bar</code> endpoint:</p>

<p><img src="https://i.snag.gy/DTp0AZ.jpg" alt="" /></p>

<p>When we access our <code>/pie</code> endpoint:</p>

<p><img src="https://i.snag.gy/D6nqJN.jpg?nocache=1513261344206" alt="" /></p>

<h2>Resources:</h2>

<ul>
<li><a href="https://pythonspot.com/flask-and-great-looking-charts-using-chart-js/">https://pythonspot.com/flask-and-great-looking-charts-using-chart-js/</a></li>
<li><a href="http://www.chartjs.org/docs/latest/#installation">http://www.chartjs.org/docs/latest/#installation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Chatbot With Chatterbot on Python]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/12/13/create-a-chatbot-with-chatterbot-on-python/"/>
    <updated>2017-12-13T08:53:50-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/12/13/create-a-chatbot-with-chatterbot-on-python</id>
    <content type="html"><![CDATA[<p><img src="https://chatterbot.readthedocs.io/en/stable/_images/banner.png" alt="" /></p>

<p>So I&rsquo;ve been wanting to take a stab at chatbots for some time, and recently discovered <a href="https://github.com/gunthercox/ChatterBot">Chatterbot</a>, so in this tutorial I will go through some examples on setting up a very basic chatbot.</p>

<h2>Getting the Dependencies:</h2>

<p>I will be using Alpine on <a href="docker.com">Docker</a> to run all the the examples, I am using Alpine so that we have a basic container with nothing special pre-installed.</p>

<p>Chatterbot is written in Python, so let&rsquo;s install Python and Chatterbot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run -it --name chatbot alpine:edge sh
</span><span class='line'><span class="nv">$ </span>apk update <span class="o">&amp;&amp;</span> apk add python py2-pip
</span><span class='line'><span class="nv">$ </span>pip install pip --upgrade --user
</span><span class='line'><span class="nv">$ </span>pip install chatterbot
</span></code></pre></td></tr></table></div></figure>


<h2>Setup the Basic Chatbot:</h2>

<p>Now that our dependencies is installed, enter the Python interpreter where we will instantiate our Chatbot, and get a response from our Chatbot. By default the library will create a sqlite database to build up statements that is passed to and from the bot.</p>

<p>At this point, the bot is still pretty useless:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python
</span><span class='line'>&gt;&gt;&gt; from chatterbot import ChatBot
</span><span class='line'>&gt;&gt;&gt; <span class="nv">chatbot</span> <span class="o">=</span> ChatBot<span class="o">(</span><span class="s1">&#39;Ben&#39;</span><span class="o">)</span>
</span><span class='line'>&gt;&gt;&gt; chatbot.get_response<span class="o">(</span><span class="s1">&#39;What is your name?&#39;</span><span class="o">)</span>
</span><span class='line'>&lt;Statement text:What is your name?&gt;
</span><span class='line'>&gt;&gt;&gt; chatbot.get_response<span class="o">(</span><span class="s1">&#39;My name is Ruan, what is your name?&#39;</span><span class="o">)</span>
</span><span class='line'>&lt;Statement text:What is your name?&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>Training your Bot:</h2>

<p>To enable your bot to have some knowledge, we can train the bot with training data. The training data is populated in a list, which will represent the conversation.</p>

<p>Exit the python interpreter and delete the sqlite database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rm -rf db.sqlite3
</span></code></pre></td></tr></table></div></figure>


<p>Now our Bot wont have any history of what we said. Start the interpreter again and add some data to train our bot. In this example, we want our Chatbot to respond when we ask it, what his name is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt;&gt; from chatterbot import ChatBot
</span><span class='line'>&gt;&gt;&gt; from chatterbot.trainers import ListTrainer
</span><span class='line'>&gt;&gt;&gt; <span class="nv">chatbot</span> <span class="o">=</span> ChatBot<span class="o">(</span><span class="s1">&#39;Ben&#39;</span><span class="o">)</span>
</span><span class='line'>&gt;&gt;&gt; chatbot.set_trainer<span class="o">(</span>ListTrainer<span class="o">)</span>
</span><span class='line'>&gt;&gt;&gt; chatbot.train<span class="o">([</span><span class="s1">&#39;What is your name?&#39;</span>, <span class="s1">&#39;My name is Ben&#39;</span><span class="o">])</span>
</span><span class='line'>List Trainer: <span class="o">[</span><span class="c">####################] 100%</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have trained our bot, let&rsquo;s try to chat to our bot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt;&gt; chatbot.get_response<span class="o">(</span><span class="s1">&#39;What is your name?&#39;</span><span class="o">)</span>
</span><span class='line'>&lt;Statement text:My name is Ben&gt;
</span><span class='line'>&gt;&gt;&gt; chatbot.get_response<span class="o">(</span><span class="s1">&#39;Who is Ben?&#39;</span><span class="o">)</span>
</span><span class='line'>&lt;Statement text:My name is Ben&gt;
</span></code></pre></td></tr></table></div></figure>


<p>We can also enable our bot to respond on multiple statements:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt;&gt; chatbot.train<span class="o">([</span><span class="s1">&#39;Do you know someone with the name of Sarah?&#39;</span>, <span class="s1">&#39;Yes, my sisters name is Sarah&#39;</span>, <span class="s1">&#39;Is your sisters name, Sarah?&#39;</span>, <span class="s1">&#39;Faw shizzle!&#39;</span><span class="o">])</span>
</span><span class='line'>List Trainer: <span class="o">[</span><span class="c">####################] 100%</span>
</span><span class='line'>
</span><span class='line'>&gt;&gt;&gt; chatbot.get_response<span class="o">(</span><span class="s1">&#39;do you know someone with the name of Sarah?&#39;</span><span class="o">)</span>
</span><span class='line'>&lt;Statement text:Yes, my sisters name is Sarah&gt;
</span><span class='line'>&gt;&gt;&gt; chatbot.get_response<span class="o">(</span><span class="s1">&#39;is your sisters name Sarah?&#39;</span><span class="o">)</span>
</span><span class='line'>&lt;Statement text:Faw shizzle!&gt;
</span></code></pre></td></tr></table></div></figure>


<p>With that said, we can define our list of statements in our code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">conversations</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'><span class="o">...</span>     <span class="s">&#39;Are you an athlete?&#39;</span><span class="p">,</span> <span class="s">&#39;No, are you mad? I am a bot&#39;</span><span class="p">,</span>
</span><span class='line'><span class="o">...</span>     <span class="s">&#39;Do you like big bang theory?&#39;</span><span class="p">,</span> <span class="s">&#39;Bazinga!&#39;</span><span class="p">,</span>
</span><span class='line'><span class="o">...</span>     <span class="s">&#39;What is my name?&#39;</span><span class="p">,</span> <span class="s">&#39;Ruan&#39;</span><span class="p">,</span>
</span><span class='line'><span class="o">...</span>     <span class="s">&#39;What color is the sky?&#39;</span><span class="p">,</span> <span class="s">&#39;Blue, stop asking me stupid questions&#39;</span>
</span><span class='line'><span class="o">...</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">chatbot</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">conversations</span><span class="p">)</span>
</span><span class='line'><span class="n">List</span> <span class="n">Trainer</span><span class="p">:</span> <span class="p">[</span><span class="c">####################] 100%</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">chatbot</span><span class="o">.</span><span class="n">get_response</span><span class="p">(</span><span class="s">&#39;What color is the sky?&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">Statement</span> <span class="n">text</span><span class="p">:</span><span class="n">Blue</span><span class="p">,</span> <span class="n">stop</span> <span class="n">asking</span> <span class="n">me</span> <span class="n">stupid</span> <span class="n">questions</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we can see it works as expected, but let&rsquo;s state one of the answers from our statements, to see what happens:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt;&gt; chatbot.get_response<span class="o">(</span><span class="s1">&#39;Bazinga&#39;</span><span class="o">)</span>
</span><span class='line'>&lt;Statement text:What is my name?&gt;
</span><span class='line'>&gt;&gt;&gt; chatbot.get_response<span class="o">(</span><span class="s1">&#39;Your name is Ben&#39;</span><span class="o">)</span>
</span><span class='line'>&lt;Statement text:Yes, my name is Ben&gt;
</span></code></pre></td></tr></table></div></figure>


<p>So we can see it uses natural language processing to learn from the data that we provide our bot. Just to check another question:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt;&gt; chatbot.get_response<span class="o">(</span><span class="s1">&#39;Do you like big bang theory?&#39;</span><span class="o">)</span>
</span><span class='line'>&lt;Statement text:Bazinga!&gt;
</span></code></pre></td></tr></table></div></figure>


<p>If we have quite a large subset of learning data, we can add all the data in a file, seperated by new lines then we can use python to read the data from disk, and split up the data in the expected format.</p>

<p>The training file will reside in our working directory, let&rsquo;s name it <code>training-data.txt</code> and the content will look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>What is Bitcoin?
</span><span class='line'>Bitcoin is a Crypto Currency
</span><span class='line'>Where is this blog hosted?
</span><span class='line'>Github
</span></code></pre></td></tr></table></div></figure>


<p>A visual example of how we will process this data will look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt;&gt; <span class="nv">data</span> <span class="o">=</span> open<span class="o">(</span><span class="s1">&#39;training-data.txt&#39;</span><span class="o">)</span>.read<span class="o">()</span>
</span><span class='line'>&gt;&gt;&gt; data.strip<span class="o">()</span>.split<span class="o">(</span><span class="s1">&#39;\n&#39;</span><span class="o">)</span>
</span><span class='line'><span class="o">[</span><span class="s1">&#39;What is Bitcoin?&#39;</span>, <span class="s1">&#39;Bitcoin is a Crypto Currency&#39;</span>, <span class="s1">&#39;Where is this blog hosted?&#39;</span>, <span class="s1">&#39;Github&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in action, it will look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt;&gt; <span class="nv">data</span> <span class="o">=</span> open<span class="o">(</span><span class="s1">&#39;training-data.txt&#39;</span><span class="o">)</span>.read<span class="o">()</span>
</span><span class='line'>&gt;&gt;&gt; <span class="nv">conversations</span> <span class="o">=</span> data.strip<span class="o">()</span>.split<span class="o">(</span><span class="s1">&#39;\n&#39;</span><span class="o">)</span>
</span><span class='line'>&gt;&gt;&gt; chatbot.train<span class="o">(</span>conversations<span class="o">)</span>
</span><span class='line'>List Trainer: <span class="o">[</span><span class="c">####################] 100%</span>
</span><span class='line'>
</span><span class='line'>&gt;&gt;&gt; chatbot.get_response<span class="o">(</span><span class="s1">&#39;Where is this blog hosted?&#39;</span><span class="o">)</span>
</span><span class='line'>&lt;Statement text:Github&gt;
</span></code></pre></td></tr></table></div></figure>


<p>There is also pre-populated data that you can use to train your bot, on the <a href="https://chatterbot.readthedocs.io/en/stable/training.html#training-with-corpus-data">documentation</a> is a couple of examples, but for demonstration, we will use the CorpusTrainer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt;&gt; from chatterbot.trainers import ChatterBotCorpusTrainer
</span><span class='line'>&gt;&gt;&gt; chatterbot.set_trainer<span class="o">(</span>ChatterBotCorpusTrainer<span class="o">)</span>
</span><span class='line'>&gt;&gt;&gt; chatbot.train<span class="o">(</span><span class="s2">&quot;chatterbot.corpus.english&quot;</span><span class="o">)</span>
</span><span class='line'>ai.yml Training: <span class="o">[</span><span class="c">####################] 100%</span>
</span><span class='line'>botprofile.yml Training: <span class="o">[</span><span class="c">####################] 100%</span>
</span><span class='line'>computers.yml Training: <span class="o">[</span><span class="c">####################] 100%</span>
</span><span class='line'>conversations.yml Training: <span class="o">[</span><span class="c">####################] 100%</span>
</span><span class='line'>emotion.yml Training: <span class="o">[</span><span class="c">####################] 100%</span>
</span><span class='line'>food.yml Training: <span class="o">[</span><span class="c">####################] 100%</span>
</span><span class='line'>gossip.yml Training: <span class="o">[</span><span class="c">####################] 100%</span>
</span><span class='line'>greetings.yml Training: <span class="o">[</span><span class="c">####################] 100%</span>
</span><span class='line'>history.yml Training: <span class="o">[</span><span class="c">####################] 100%</span>
</span><span class='line'>humor.yml Training: <span class="o">[</span><span class="c">####################] 100%</span>
</span><span class='line'>literature.yml Training: <span class="o">[</span><span class="c">####################] 100%</span>
</span><span class='line'>money.yml Training: <span class="o">[</span><span class="c">####################] 100%</span>
</span><span class='line'>movies.yml Training: <span class="o">[</span><span class="c">####################] 100%</span>
</span><span class='line'>politics.yml Training: <span class="o">[</span><span class="c">####################] 100%</span>
</span><span class='line'>psychology.yml Training: <span class="o">[</span><span class="c">####################] 100%</span>
</span><span class='line'>science.yml Training: <span class="o">[</span><span class="c">####################] 100%</span>
</span><span class='line'>sports.yml Training: <span class="o">[</span><span class="c">####################] 100%</span>
</span><span class='line'>trivia.yml Training: <span class="o">[</span><span class="c">####################] 100%</span>
</span><span class='line'>
</span><span class='line'>&gt;&gt;&gt; chatbot.get_response<span class="o">(</span><span class="s1">&#39;Do you like peace?&#39;</span><span class="o">)</span>
</span><span class='line'>&lt;Statement text:not especially. i am not into violence.&gt;
</span><span class='line'>&gt;&gt;&gt; chatbot.get_response<span class="o">(</span><span class="s1">&#39;Are you emotional?&#39;</span><span class="o">)</span>
</span><span class='line'>&lt;Statement text:Sort of.&gt;
</span><span class='line'>&gt;&gt;&gt; chatbot.get_response<span class="o">(</span><span class="s1">&#39;What language do you speak?&#39;</span><span class="o">)</span>
</span><span class='line'>&lt;Statement text:Python.&gt;
</span><span class='line'>&gt;&gt;&gt; chatbot.get_response<span class="o">(</span><span class="s1">&#39;What is your name?&#39;</span><span class="o">)</span>
</span><span class='line'>&lt;Statement text:My name is Ben&gt;
</span><span class='line'>&gt;&gt;&gt; chatbot.get_response<span class="o">(</span><span class="s1">&#39;Who is the President of America?&#39;</span><span class="o">)</span>
</span><span class='line'>&lt;Statement text:Richard Nixon&gt; <span class="c">#data seems outdated :D</span>
</span><span class='line'>&gt;&gt;&gt; chatbot.get_response<span class="o">(</span><span class="s1">&#39;I like cheese&#39;</span><span class="o">)</span>
</span><span class='line'>&lt;Statement text:What kind of movies <span class="k">do</span> you like?&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>Using an External Database like MongoDB</h2>

<p>Instead of using sqlite on the same host, we can use a NoSQL Database like MongoDB that resides outside our application.</p>

<p>For the sake of this tutorial, I will use Docker to spin up a MongoDB Container:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run -d --name mongodb -p 27017:27017 -p 28017:28017 -e <span class="nv">AUTH</span><span class="o">=</span>no -e <span class="nv">OPLOG_SIZE</span><span class="o">=</span><span class="m">50</span> tutum/mongodb
</span></code></pre></td></tr></table></div></figure>


<p>Below is my code of a terminal application that uses Chatterbot, MongoDB as a Storage Adapter, and we are using a while loop, so that we can chat with our bot, and in our except statement, we can stop our application by using our keyboard to exit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">chatterbot</span> <span class="kn">import</span> <span class="n">ChatBot</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">chatterbot.trainers</span> <span class="kn">import</span> <span class="n">ChatterBotCorpusTrainer</span>
</span><span class='line'>
</span><span class='line'><span class="n">chatbot</span> <span class="o">=</span> <span class="n">ChatBot</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;Chatbot Backed by MongoDB&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">storage_adapter</span><span class="o">=</span><span class="s">&quot;chatterbot.storage.MongoDatabaseAdapter&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">database</span><span class="o">=</span><span class="s">&quot;chatterbot_db&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">database_uri</span><span class="o">=</span><span class="s">&quot;mongodb://172.17.0.3:27017/&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">logic_adapters</span><span class="o">=</span><span class="p">[</span>
</span><span class='line'>        <span class="s">&#39;chatterbot.logic.BestMatch&#39;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="n">trainer</span><span class="o">=</span><span class="s">&#39;chatterbot.trainers.ChatterBotCorpusTrainer&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">filters</span><span class="o">=</span><span class="p">[</span>
</span><span class='line'>        <span class="s">&#39;chatterbot.filters.RepetitiveResponseFilter&#39;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="n">input_adapter</span><span class="o">=</span><span class="s">&#39;chatterbot.input.TerminalAdapter&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">output_adapter</span><span class="o">=</span><span class="s">&#39;chatterbot.output.TerminalAdapter&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">chatbot</span><span class="o">.</span><span class="n">set_trainer</span><span class="p">(</span><span class="n">ChatterBotCorpusTrainer</span><span class="p">)</span>
</span><span class='line'><span class="n">chatbot</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="s">&quot;chatterbot.corpus.english&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;Chatbot Started:&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot; -&gt; You:&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">botInput</span> <span class="o">=</span> <span class="n">chatbot</span><span class="o">.</span><span class="n">get_response</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="p">(</span><span class="ne">KeyboardInterrupt</span><span class="p">,</span> <span class="ne">EOFError</span><span class="p">,</span> <span class="ne">SystemExit</span><span class="p">):</span>
</span><span class='line'>        <span class="k">break</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running the example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python bot.py
</span><span class='line'> -&gt; You:
</span><span class='line'>How are you?
</span><span class='line'>I am doing well.
</span><span class='line'> -&gt; You:
</span><span class='line'>Tell me a joke
</span><span class='line'>A 3-legged dog walks into an old west saloon, slides up to the bar and announces <span class="s2">&quot;I&#39;m looking for the man who shot my paw.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And from mongodb, we can see some data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mongo
</span><span class='line'>&gt; show dbs
</span><span class='line'>admin          0.078GB
</span><span class='line'>chatterbot_db  0.078GB
</span><span class='line'><span class="nb">local          </span>0.078GB
</span><span class='line'>
</span><span class='line'>&gt; use chatterbot_db
</span><span class='line'>switched to db chatterbot_db
</span><span class='line'>
</span><span class='line'>&gt; show collections<span class="p">;</span>
</span><span class='line'>conversations
</span><span class='line'>statements
</span><span class='line'>system.indexes
</span><span class='line'>
</span><span class='line'>&gt; db.conversations.find<span class="o">()</span>.count<span class="o">()</span>
</span><span class='line'>4
</span><span class='line'>&gt; db.statements.find<span class="o">()</span>.count<span class="o">()</span>
</span><span class='line'>1240
</span><span class='line'>&gt; db.system.indexes.find<span class="o">()</span>.count<span class="o">()</span>
</span><span class='line'>3
</span></code></pre></td></tr></table></div></figure>


<p>That was a basic tutorial on Chatterbot, next I will be looking into mining data from Twitter&rsquo;s API and see how clever our bot can become.</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://chatterbot.readthedocs.io/en/stable/quickstart.html#quick-start-guide">Chatterbot Documentation</a></li>
<li><a href="https://github.com/gunthercox/ChatterBot/tree/master/examples">Chatterbot Examples</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH Host Key Warnings With Strict Checking Enabled]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/12/13/ssh-host-key-warnings-with-strict-checking-enabled/"/>
    <updated>2017-12-13T02:07:29-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/12/13/ssh-host-key-warnings-with-strict-checking-enabled</id>
    <content type="html"><![CDATA[<p>When you format / reload a server and the host gets the same IP, when you try to SSH to that host, you might get a warning like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh 192.168.1.104
</span><span class='line'>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
</span><span class='line'>@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
</span><span class='line'>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
</span><span class='line'>IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
</span><span class='line'>Someone could be eavesdropping on you right now <span class="o">(</span>man-in-the-middle attack<span class="o">)</span>!
</span><span class='line'>It is also possible that a host key has just been changed.
</span><span class='line'>The fingerprint <span class="k">for</span> the ECDSA key sent by the remote host is
</span><span class='line'>a1:a2:a3:a4:a5:a6:a7:a8:a9:b0:b1:b2:b3:b4:b5:b6.
</span><span class='line'>Please contact your system administrator.
</span><span class='line'>Add correct host key in /home/pi/.ssh/known_hosts to get rid of this message.
</span><span class='line'>Offending ECDSA key in /home/pi/.ssh/known_hosts:10
</span><span class='line'>ECDSA host key <span class="k">for</span> 192.168.1.104 has changed and you have requested strict checking.
</span><span class='line'>Host key verification failed.
</span></code></pre></td></tr></table></div></figure>


<p>This is because we have <code>StrictMode</code> enabled in our SSH Configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /etc/ssh/sshd_config <span class="p">|</span> grep -i stric
</span><span class='line'>StrictModes yes
</span></code></pre></td></tr></table></div></figure>


<p>To remove the offending key from your <code>known_hosts</code> file, without opening it, you can use <code>ssh-keygen</code> to remove it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh-keygen -f .ssh/known_hosts -R 192.168.1.104
</span><span class='line'><span class="c"># Host 192.168.1.104 found: line 10 type ECDSA</span>
</span><span class='line'>.ssh/known_hosts updated.
</span><span class='line'>Original contents retained as .ssh/known_hosts.old
</span></code></pre></td></tr></table></div></figure>


<p>Now when you SSH the warning should be removed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a 3 Node Kubernetes Cluster on Ubuntu]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/12/11/setup-a-3-node-kubernetes-cluster-on-ubuntu/"/>
    <updated>2017-12-11T09:31:47-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/12/11/setup-a-3-node-kubernetes-cluster-on-ubuntu</id>
    <content type="html"><![CDATA[<p><img src="https://kumorilabs.com/img/blog/kubernetes-logo.png" alt="" /></p>

<p>Setup a 3 Node Kubernetes Cluster on Ubuntu 16.04</p>

<h2>What is Kubernetes?</h2>

<p>As referenced from their <a href="https://kubernetes.io/">website</a>:</p>

<ul>
<li>&ldquo;Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications.&rdquo;</li>
</ul>


<h2>Our Setup:</h2>

<p>For this setup I will be using 3 AWS EC2 Instances with Ubuntu 16.04. One node will act as the master node, and the other 2 nodes, will act as nodes, previously named minions.</p>

<p>We will deploy Kubernetes on all 3 nodes, the master will be the node where we will initialize our cluster, deploy our weave network, applications and we will execute the join command on the worker nodes to join the master to form the cluster.</p>

<h2>Deploy Kubernetes: Master</h2>

<p>The following commands will be used to install Kubernetes, it will be executed with root permissions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt update <span class="o">&amp;&amp;</span> sudo apt upgrade -y
</span><span class='line'><span class="nv">$ </span>sudo apt install docker.io apt-transport-https -qy
</span><span class='line'><span class="nv">$ </span>sudo apt update
</span><span class='line'><span class="nv">$ </span>curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg <span class="p">|</span> sudo apt-key add -
</span><span class='line'><span class="nv">$ </span>sudo su -c <span class="s1">&#39;echo &quot;deb http://apt.kubernetes.io/ kubernetes-xenial main&quot; &gt; /etc/apt/sources.list.d/app&#39;</span> root
</span><span class='line'><span class="nv">$ </span>apt update
</span><span class='line'><span class="nv">$ </span>sudo apt install kubelet kubeadm kubernetes-cni -y
</span></code></pre></td></tr></table></div></figure>


<p>Now we would like to set up the master by initializing the cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo kubeadm init --kubernetes-version stable-1.8
</span></code></pre></td></tr></table></div></figure>


<p>The output will provide you with instructions to setup the configurations for the master node, and provide you with a join token for your worker nodes, remember to make not of this token string, as we will need it later for our worker nodes. As your normal user, run the following to setup the config:</p>

<p>Remember to not run this as root, and as the normal user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir -p <span class="nv">$HOME</span>/.kube
</span><span class='line'><span class="nv">$ </span>sudo cp -i /etc/kubernetes/admin.conf <span class="nv">$HOME</span>/.kube/config
</span><span class='line'><span class="nv">$ </span>sudo chown <span class="k">$(</span>id -u<span class="k">)</span>:<span class="k">$(</span>id -g<span class="k">)</span> <span class="nv">$HOME</span>/.kube/config
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to deploy a network for our pods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl apply -f <span class="s2">&quot;https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d &#39;\n&#39;)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lets confirm if all our resources are in its desired state, a small snippet of the output will look like the one below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get all -n kube-system
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>NAME                                          READY     STATUS    RESTARTS   AGE
</span><span class='line'>po/etcd-ip-172-31-40-211                      1/1       Running   <span class="m">0</span>          6h
</span><span class='line'>po/kube-apiserver-ip-172-31-40-211            1/1       Running   <span class="m">0</span>          6h
</span></code></pre></td></tr></table></div></figure>


<p>Once all of the resources are in its desired state, we can head along to our worker nodes, to join them to the cluster</p>

<h2>Deploy Kubernetes: Worker Nodes</h2>

<p>As I have 2 worker nodes, we will need to deploy the following on both of our worker nodes, first to deploy Kubernetes on our nodes with root permission:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt update <span class="o">&amp;&amp;</span> sudo apt upgrade -y
</span><span class='line'><span class="nv">$ </span>sudo apt install docker.io apt-transport-https -qy
</span><span class='line'><span class="nv">$ </span>sudo apt update
</span><span class='line'><span class="nv">$ </span>curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg <span class="p">|</span> sudo apt-key add -
</span><span class='line'><span class="nv">$ </span>sudo su -c <span class="s1">&#39;echo &quot;deb http://apt.kubernetes.io/ kubernetes-xenial main&quot; &gt; /etc/apt/sources.list.d/app&#39;</span> root
</span><span class='line'><span class="nv">$ </span>apt update
</span><span class='line'><span class="nv">$ </span>sudo apt install kubelet kubeadm kubernetes-cni -y
</span></code></pre></td></tr></table></div></figure>


<p>Once Kubernetes is installed, join the Master node by executing the join command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo kubeadm join --token 49abf7.247d663db97f8504 172.31.40.211:6443 --discovery-token-ca-cert-hash sha256:3a3b301cfbac0995c69a0115989ea384230470d6836ae0e13e71dbdf15ffbb48
</span></code></pre></td></tr></table></div></figure>


<p>Do the 2 steps on the other node, then head back to the master node.</p>

<h2>Verifying if All Nodes are Checked In</h2>

<p>To verify if all nodes are available and reachable in the cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get nodes
</span><span class='line'>NAME               STATUS    ROLES     AGE       VERSION
</span><span class='line'>ip-172-31-36-68    Ready     &lt;none&gt;    6h        v1.8.5
</span><span class='line'>ip-172-31-40-211   Ready     master    6h        v1.8.5
</span><span class='line'>ip-172-31-44-80    Ready     &lt;none&gt;    6h        v1.8.5
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy Services to Kubernetes:</h2>

<p>Kubernetes has Awesome Examples on their <a href="https://github.com/kubernetes/kubernetes/tree/master/examples">Github Repository</a>.</p>

<p>Since the awesomeness of <a href="https://github.com/openfaas">OpenFaas</a>, I will deploy OpenFaas on Kubernetes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone https://github.com/openfaas/faas-netes
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>faas-netes
</span><span class='line'><span class="nv">$ </span>kubectl apply -f faas.yml,monitoring.yml,rbac.yml
</span></code></pre></td></tr></table></div></figure>


<p>Give it about a minute or so, then you should see the pods running in their desired state:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get pods
</span><span class='line'>NAME                           READY     STATUS    RESTARTS   AGE
</span><span class='line'>alertmanager-77b4b476b-zxtcz   1/1       Running   <span class="m">0</span>          4h
</span><span class='line'>crypto-7d8b7f999c-7l85k        1/1       Running   <span class="m">0</span>          1h
</span><span class='line'>faas-netesd-64fb9b4dfb-hc8gh   1/1       Running   <span class="m">0</span>          4h
</span><span class='line'>gateway-69c9d949f-q57zh        1/1       Running   <span class="m">0</span>          4h
</span><span class='line'>prometheus-7fbfd8bfb8-d4cft    1/1       Running   <span class="m">0</span>          4h
</span></code></pre></td></tr></table></div></figure>


<p>When we have the desired state, head over to the OpenFaas Gateway WebUI: <code>http://master-public-ip:31112/ui/</code>, select &ldquo;Deploy New Function&rdquo;, you can use your own function or select one from the store.</p>

<p>I am going to use Figlet from the store, once the pod has been deployed, select the function, enter any text into the request body and select invoke. I have used my name and surname, and turns out into:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> ____                      ____       _    _
</span><span class='line'><span class="p">|</span>  _ <span class="se">\ </span>_   _  __ _ _ __   <span class="p">|</span> __ <span class="o">)</span>  ___<span class="p">|</span> <span class="p">|</span> _<span class="p">|</span> <span class="p">|</span> _____ _ __
</span><span class='line'><span class="p">|</span> <span class="p">|</span>_<span class="o">)</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span>/ _<span class="sb">`</span> <span class="p">|</span> <span class="s1">&#39;_ \  |  _ \ / _ \ |/ / |/ / _ \ &#39;</span>__<span class="p">|</span>
</span><span class='line'><span class="p">|</span>  _ &lt;<span class="p">|</span> <span class="p">|</span>_<span class="p">|</span> <span class="p">|</span> <span class="o">(</span>_<span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span>_<span class="o">)</span> <span class="p">|</span>  __/   &lt;<span class="p">|</span>   &lt;  __/ <span class="p">|</span>
</span><span class='line'><span class="p">|</span>_<span class="p">|</span> <span class="se">\_\\</span>__,_<span class="p">|</span><span class="se">\_</span>_,_<span class="p">|</span>_<span class="p">|</span> <span class="p">|</span>_<span class="p">|</span> <span class="p">|</span>____/ <span class="se">\_</span>__<span class="p">|</span>_<span class="p">|</span><span class="se">\_\_</span><span class="p">|</span><span class="se">\_\_</span>__<span class="p">|</span>_<span class="p">|</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h2>Resources:</h2>

<ul>
<li><a href="https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/">Kubernetes Overview</a></li>
<li><a href="https://kubernetes.io/docs/concepts/">Kubernetes Concepts</a></li>
<li><a href="https://blog.alexellis.io/tag/kubernetes/">Kubernetes Blogs</a></li>
<li><a href="https://blog.alexellis.io/tag/openfaas/">OpenFaas Blogs</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rejoining or Bootstrapping MySQL Galera Cluster Nodes After Shutdown]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/12/10/rejoining-or-bootstrapping-mysql-galera-cluster-nodes-after-shutdown/"/>
    <updated>2017-12-10T18:03:44-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/12/10/rejoining-or-bootstrapping-mysql-galera-cluster-nodes-after-shutdown</id>
    <content type="html"><![CDATA[<p>I have a 3 Node MySQL Galera Cluster that faced a shutdown on all 3 nodes at the same time, luckily this is only a testing environment, but at that time it was down and did not want to start up.</p>

<h2>Issues Faced</h2>

<p>When trying to start MySQL the only error visible was:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>/etc/init.d/mysql restart
</span><span class='line'> * MySQL server PID file could not be found!
</span><span class='line'>Starting MySQL
</span><span class='line'>........ * The server quit without updating PID file <span class="o">(</span>/var/run/mysqld/mysqld.pid<span class="o">)</span>.
</span><span class='line'> * Failed to restart server.
</span></code></pre></td></tr></table></div></figure>


<p>At that time I can see that the galera port is started, but not mysql:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ps aux <span class="p">|</span> grep mysql
</span><span class='line'>root     <span class="m">23580</span>  0.0  0.0   <span class="m">4508</span>  <span class="m">1800</span> pts/0    S    00:37   0:00 /bin/sh /usr/bin/mysqld_safe --datadir<span class="o">=</span>/var/lib/mysql --pid-file<span class="o">=</span>/var/run/mysqld/mysqld.pid
</span><span class='line'>mysql    <span class="m">24144</span>  0.7 22.2 <span class="m">1185116</span> <span class="m">455660</span> pts/0  Sl   00:38   0:00 /usr/sbin/mysqld --basedir<span class="o">=</span>/usr --datadir<span class="o">=</span>/var/lib/mysql --plugin-dir<span class="o">=</span>/usr/lib/mysql/plugin --user<span class="o">=</span>mysql --log-error<span class="o">=</span>/var/log/mysql/error.log --pid-file<span class="o">=</span>/var/run/mysqld/mysqld.pid --socket<span class="o">=</span>/var/run/mysqld/mysqld.sock --port<span class="o">=</span><span class="m">3306</span> --wsrep_start_position<span class="o">=</span>long:string
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>netstat -tulpn
</span><span class='line'>Active Internet connections <span class="o">(</span>only servers<span class="o">)</span>
</span><span class='line'>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:4567            0.0.0.0:*               LISTEN      25507/mysqld
</span></code></pre></td></tr></table></div></figure>


<h2>Why?</h2>

<p>More in detail is explained on a <a href="https://severalnines.com/blog/how-bootstrap-mysqlmariadb-galera-cluster">SeveralNines Blog Post</a>, but due to the fact that all the nodes left the cluster, one of the nodes needs to be started as a referencing point, before the other nodes can rejoin or bootstrapped to the cluster.</p>

<h2>Rejoining the Cluster</h2>

<p>Consult the blog for more information, but from my end, I had a look at the node with the highest seqno and then updated <code>safe_to_bootstrap</code> to <code>1</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /var/lib/mysql/grastate.dat
</span><span class='line'><span class="c"># GALERA saved state</span>
</span><span class='line'>version: 2.1
</span><span class='line'>uuid:    e9f9cf6a-87a1-11e7-9fb4-52612b906897
</span><span class='line'>seqno:   123512
</span><span class='line'>safe_to_bootstrap: 1
</span></code></pre></td></tr></table></div></figure>


<p>Then made sure that no mysql processes are running, then did a bootstrap:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>/etc/init.d/mysql bootstrap
</span><span class='line'>Bootstrapping the cluster
</span><span class='line'>Starting MySQL
</span></code></pre></td></tr></table></div></figure>


<p>Then restarted mysql on the other nodes.</p>

<h2>Verifying</h2>

<p>To verify that all your nodes has checked in, I have 3 nodes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SHOW</span> <span class="n">STATUS</span> <span class="k">LIKE</span> <span class="s1">&#39;wsrep_%&#39;</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span><span class="c1">------------------------------+---------------------------------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">Variable_name</span>                <span class="o">|</span> <span class="n">Value</span>                                             <span class="o">|</span>
</span><span class='line'><span class="o">+</span><span class="c1">------------------------------+---------------------------------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">wsrep_local_recv_queue_avg</span>   <span class="o">|</span> <span class="mi">0</span><span class="p">.</span><span class="mi">000000</span>                                          <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">wsrep_local_state_comment</span>    <span class="o">|</span> <span class="n">Synced</span>                                            <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">wsrep_incoming_addresses</span>     <span class="o">|</span> <span class="mi">10</span><span class="p">.</span><span class="mi">3</span><span class="p">.</span><span class="mi">132</span><span class="p">.</span><span class="mi">91</span><span class="p">:</span><span class="mi">3306</span><span class="p">,</span><span class="mi">10</span><span class="p">.</span><span class="mi">4</span><span class="p">.</span><span class="mi">1</span><span class="p">.</span><span class="mi">201</span><span class="p">:</span><span class="mi">3306</span><span class="p">,</span><span class="mi">10</span><span class="p">.</span><span class="mi">4</span><span class="p">.</span><span class="mi">113</span><span class="p">.</span><span class="mi">21</span><span class="p">:</span><span class="mi">3306</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">wsrep_evs_state</span>              <span class="o">|</span> <span class="n">OPERATIONAL</span>                                       <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">wsrep_cluster_size</span>           <span class="o">|</span> <span class="mi">3</span>                                                 <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">wsrep_cluster_status</span>         <span class="o">|</span> <span class="k">Primary</span>                                           <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">wsrep_connected</span>              <span class="o">|</span> <span class="k">ON</span>                                                <span class="o">|</span>
</span><span class='line'><span class="o">+</span><span class="c1">------------------------------+---------------------------------------------------+</span>
</span></code></pre></td></tr></table></div></figure>


<p>or a shorter version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SHOW</span> <span class="k">GLOBAL</span> <span class="n">STATUS</span> <span class="k">LIKE</span> <span class="s1">&#39;wsrep_cluster_size&#39;</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span><span class="c1">------------------------------+---------------------------------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">Variable_name</span>                <span class="o">|</span> <span class="n">Value</span>                                             <span class="o">|</span>
</span><span class='line'><span class="o">+</span><span class="c1">------------------------------+---------------------------------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">wsrep_cluster_size</span>           <span class="o">|</span> <span class="mi">3</span>                                                 <span class="o">|</span>
</span><span class='line'><span class="o">+</span><span class="c1">------------------------------+---------------------------------------------------+</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
