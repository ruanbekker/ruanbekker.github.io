<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-12-19T08:38:11-05:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Local Dev Environment for Wordpress Using Docker Compose]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/12/19/local-dev-environment-for-wordpress-using-docker-compose/"/>
    <updated>2018-12-19T08:33:44-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/12/19/local-dev-environment-for-wordpress-using-docker-compose</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s setup a local development environment with Docker, Wordpress, MySQL using Docker Compose</p>

<h2>Docker Compose File</h2>

<p>Let&rsquo;s look at our docker-compose.yml file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&#39;3.1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">wordpress</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">wordpress</span>
</span><span class='line'>    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">always</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">8080:80</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">WORDPRESS_DB_NAME=wordpress</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">WORDPRESS_DB_HOST=mysql</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">WORDPRESS_DB_USER=wordpress</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">WORDPRESS_DB_PASSWORD=wordpress</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">wordpress</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">mysql</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mysql:5.7</span>
</span><span class='line'>    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">always</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_ROOT_PASSWORD=password</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_DATABASE=wordpress</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_USER=wordpress</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_PASSWORD=wordpress</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">wordpress</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">wordpress</span><span class="p-Indicator">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>Environment Variables for the MySQL Docker image is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_ROOT_PASSWORD</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_DATABASE</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_USER, MYSQL_PASSWORD</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_ALLOW_EMPTY_PASSWORD</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_RANDOM_ROOT_PASSWORD</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_ONETIME_PASSWORD</span>
</span></code></pre></td></tr></table></div></figure>


<p>More info can be viewed on this resource: <a href="https://hub.docker.com/_/mysql/">hub.docker.com/_/mysql/</a></p>

<h2>Launching our Wordpress Application:</h2>

<p>Lets deploy wordpress:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker-compose up
</span><span class='line'>Creating network <span class="s2">&quot;wordpress_wordpress&quot;</span> with the default driver
</span><span class='line'>Creating wordpress_mysql_1_3e6e3cfe07b1     ... <span class="k">done</span>
</span><span class='line'>Creating wordpress_wordpress_1_a9cb16f277af ... <span class="k">done</span>
</span><span class='line'>Attaching to wordpress_wordpress_1_9227f3d3e587, wordpress_mysql_1_65cc98d222d0
</span></code></pre></td></tr></table></div></figure>


<h2>Accessing Wordpress</h2>

<p>You should be able to access Wordpress on <code>http://localhost:80/</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Local Dev Environment for Mediawiki Using Docker Compose]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/12/19/local-dev-environment-for-mediawiki-using-docker-compose/"/>
    <updated>2018-12-19T08:22:36-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/12/19/local-dev-environment-for-mediawiki-using-docker-compose</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s setup a local development environment with Docker, Mediawiki, MySQL using Docker Compose</p>

<h2>Docker Compose File</h2>

<p>Let&rsquo;s look at our docker-compose.yml file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&quot;3.4&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">db</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mysql:5.6</span>
</span><span class='line'>    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">always</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_ROOT_PASSWORD=password</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_USER=mw</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_DATABASE=mediawiki</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_PASSWORD=pass</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/Users/ruan/workspace/docker/mediawiki/mediawiki-mysql-data:/var/lib/mysql</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mediawiki</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">3306:3306</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">memcached</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rbekker87/memcached:alpine</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MEMCACHED_USER=memcached</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MEMCACHED_HOST=0.0.0.0</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MEMCACHED_PORT=11211</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MEMCACHED_MEMUSAGE=128</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MEMCACHED_MAXCONN=1024</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mediawiki</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">mediawiki</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">benhutchins/mediawiki:latest</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mediawiki</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MEDIAWIKI_DB_TYPE=mysql</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MEDIAWIKI_DB_HOST=db</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MEDIAWIKI_DB_USER=mw</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MEDIAWIKI_DB_PASSWORD=pass</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MEDIAWIKI_SITE_SERVER=http://localhost</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MEDIAWIKI_SITE_NAME=&quot;My Lekke Wiki&quot;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MEDIAWIKI_SITE_LANG=en</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MEDIAWIKI_ADMIN_USER=admin</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MEDIAWIKI_ADMIN_PASS=password123</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MEDIAWIKI_UPDATE=true</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MEDIAWIKI_ENABLE_SSL=false</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/Users/ruan/workspace/docker/mediawiki/mediawiki-data:/data</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">80:80</span>
</span><span class='line'>    <span class="l-Scalar-Plain">depends_on</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">db</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">memcached</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">mediawiki</span><span class="p-Indicator">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your current working directory in this case: <code>/Users/ruan/workspace/docker/mediawiki</code></p>

<p>Environment Variables for the MySQL Docker image is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_ROOT_PASSWORD</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_DATABASE</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_USER, MYSQL_PASSWORD</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_ALLOW_EMPTY_PASSWORD</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_RANDOM_ROOT_PASSWORD</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_ONETIME_PASSWORD</span>
</span></code></pre></td></tr></table></div></figure>


<p>More info can be viewed on this resource: <a href="https://hub.docker.com/_/mysql/">hub.docker.com/_/mysql/</a></p>

<h2>Launching our Mediawiki Application:</h2>

<p>Lets deploy mediawiki:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker-compose up
</span><span class='line'>Creating network <span class="s2">&quot;mediawiki_mediawiki&quot;</span> with the default driver
</span><span class='line'>Creating mediawiki_memcached_1_bbbe8d3fa8b3 ... <span class="k">done</span>
</span><span class='line'>Creating mediawiki_db_1_257775fcf65b        ... <span class="k">done</span>
</span><span class='line'>Creating mediawiki_mediawiki_1_56813d66cbe2 ... <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Accessing Mediawiki</h2>

<p>You should be able to access Mediawiki on <code>http://localhost:80/</code></p>

<h2>Resources:</h2>

<ul>
<li><a href="https://github.com/benhutchins/docker-mediawiki">https://github.com/benhutchins/docker-mediawiki</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Basic CI Pipeline on Gitlab]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/12/19/setup-a-basic-ci-pipeline-on-gitlab/"/>
    <updated>2018-12-19T05:43:00-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/12/19/setup-a-basic-ci-pipeline-on-gitlab</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/50217968-0629f680-0393-11e9-8387-ad69937eb891.png" alt="" /></p>

<p>In this tutorial we will setup a Basic CI (Continuous Integration) Pipeline on Gitlab.</p>

<p>The code for this example is available on <a href="https://gitlab.com/rbekker87/demo-ci-basic-pipeline">gitlab.com/rbekker87/demo-ci-basic-pipeline</a>.</p>

<p>If you would like to read more on <a href="https://www.atlassian.com/continuous-delivery/continuous-integration">Continuous Integration / Continuous Deliver (CI/CD)</a>.</p>

<h2>What will we be doing?</h2>

<p>The aim for this is every time there is a commit made to the master branch, that the jobs defined by the <code>.gitlab-ci.yml</code> will be executed and will only pass if exit code 0 has been returned on the scripts.</p>

<p>The jobs gets executed on <a href="https://docs.gitlab.com/ee/ci/yaml/">gitlab runners</a> which is hosted with Giltab. Important to note is that every job runs independently from each other.</p>

<h2>Our Basic Pipeline</h2>

<p>In this pipeline we will have 2 basic jobs, each job execute a set of scripts:</p>

<p>Build:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo "this is building" 
</span><span class='line'>$ hostname
</span><span class='line'>$ mkdir builds
</span><span class='line'>$ touch builds/data.txt
</span><span class='line'>$ echo "true" &gt; builds/data.txt</span></code></pre></td></tr></table></div></figure>


<p>Test:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo "this is testing"
</span><span class='line'>$ hostname
</span><span class='line'>$ test -f builds/data.txt
</span><span class='line'>$ grep "true" builds/data.txt</span></code></pre></td></tr></table></div></figure>


<h2>Setup the Pipeline:</h2>

<p>From a newly created repository which i&rsquo;ve cloned to my workspace, create the config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ touch .gitlab-ci.yml</span></code></pre></td></tr></table></div></figure>


<p>The config for above yaml file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">stages</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">build</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">test</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">build</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">stage</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">build</span>
</span><span class='line'>  <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;this is building&quot;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hostname</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mkdir builds</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">touch builds/data.txt</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;false&quot; &gt; builds/data.txt</span>
</span><span class='line'>  <span class="l-Scalar-Plain">artifacts</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">paths</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">builds/</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">stage</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">test</span>
</span><span class='line'>  <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;this is testing&quot;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hostname</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">test -f builds/data.txt</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">grep &quot;true&quot; builds/data.txt</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Config Explained</h2>

<ul>
<li>We define 2 stages for this pipeline: build and test</li>
<li>We provide context of each job, the stage, the script (commands that will be executed in the lifecycle of the runner) and artifacts (artifacts will be the content that will be transferred, as each job runs in a different runner/container)</li>
</ul>


<p>Note that I deliberately made a mistake so that my pipeline can fail. I populated the content &ldquo;false&rdquo; into the <code>builds/data.txt</code> file from the build job and grep for the word &ldquo;true&rdquo; on the test job, so this job will fail.</p>

<h2>Push to Github</h2>

<p>Save the content to the config file, add, commit and push to master:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add .gitlab-ci.yml
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;add gitlab-ci config&quot;</span>
</span><span class='line'><span class="nv">$ </span>git push origin master
</span></code></pre></td></tr></table></div></figure>


<h2>Gitlab Pipelines</h2>

<p>From the Gitlab UI, if you head over to CI/CD -> Pipelines, you should see your pipeline running:</p>

<p><img src="https://user-images.githubusercontent.com/567298/50216548-c103c580-038e-11e9-959b-ffdcf6038305.png" alt="" /></p>

<p>When you select the Pipeline ID, you should be presented with the jobs available in your pipeline:</p>

<p><img src="https://user-images.githubusercontent.com/567298/50216698-2ce62e00-038f-11e9-8cb5-8b67dc6e6e3d.png" alt="" /></p>

<p>Select Jobs, and you should see an overview of your jobs. At this moment we can see that the build job has completed, and that the test job is busy running:</p>

<p><img src="https://user-images.githubusercontent.com/567298/50216644-0922e800-038f-11e9-81d8-d40dd6ff0862.png" alt="" /></p>

<p>Shortly thereafter the status of the test job should change to failed, select the Job ID and you should see the output:</p>

<p><img src="https://user-images.githubusercontent.com/567298/50216833-89e1e400-038f-11e9-896f-9d36aad1c55d.png" alt="" /></p>

<p>From the above output it gives you a link to create a new issue, which is quite handy.</p>

<h2>Fix the Pipeline Config</h2>

<p>Let&rsquo;s go ahead and change the content in the <code>.gitlab-ci.yml</code> config and push to master:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim .gitlab-ci.yml
</span></code></pre></td></tr></table></div></figure>


<p>Change line 12 from <code>- echo "false" &gt; builds/data.txt</code> to <code>- echo "true" &gt; builds/data.txt</code>, the full content of the file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">stages</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">build</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">test</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">build</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">stage</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">build</span>
</span><span class='line'>  <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;this is building&quot;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hostname</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mkdir builds</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">touch builds/data.txt</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;true&quot; &gt; builds/data.txt</span>
</span><span class='line'>  <span class="l-Scalar-Plain">artifacts</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">paths</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">builds/</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">stage</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">test</span>
</span><span class='line'>  <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;this is testing&quot;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hostname</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">test -f builds/data.txt</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">grep &quot;true&quot; builds/data.txt</span>
</span></code></pre></td></tr></table></div></figure>


<p>Commit and push to master:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add .gitlab-ci.yml
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;change content in script&quot;</span>
</span><span class='line'><span class="nv">$ </span>git push origin master
</span></code></pre></td></tr></table></div></figure>


<p>When you head over to Pipelines, you will see that the pipeline is busy running, and on the right the commit that we just made:</p>

<p><img src="https://user-images.githubusercontent.com/567298/50217143-91ee5380-0390-11e9-8b08-08626984f176.png" alt="" /></p>

<h2>Great Success</h2>

<p>Select the Pipeline ID, then select Jobs, you should see both jobs succeeded:</p>

<p><img src="https://user-images.githubusercontent.com/567298/50217299-f9a49e80-0390-11e9-871d-78423f0651c7.png" alt="" /></p>

<p>Select the Job ID of the test job, and from the output you will see that the job succeeded:</p>

<p><img src="https://user-images.githubusercontent.com/567298/50217268-eb568280-0390-11e9-972c-58f23ce39741.png" alt="" /></p>

<p>From this output you can also confirm from both jobs, that each job ran in a different runner as the hostnames that was returned to stdout was different.</p>

<h2>Resources</h2>

<p>This was a really basic example to demonstrate Gitlab CI. Some relevant resources to this post:</p>

<ul>
<li><a href="https://docs.gitlab.com/ee/ci/">Gitlab CI/CD Docs</a></li>
<li><a href="https://hackernoon.com/setting-up-ci-cd-on-gitlab-step-by-step-guide-part-1-826385728223">Full CI/CD Example with Gitlab and Heroku</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resizing Hetzner Cloud Block Storage Volumes on the Fly]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/12/19/resizing-hetzner-cloud-block-storage-volumes-on-the-fly/"/>
    <updated>2018-12-19T00:59:11-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/12/19/resizing-hetzner-cloud-block-storage-volumes-on-the-fly</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/50203557-96a01100-036a-11e9-8fd5-2953497f92d8.png" alt="" /></p>

<p>Today we will be looking into Hetzner&rsquo;s Cloud Storage Volumes and how you can resize volumes on the fly!</p>

<h2>What is Hetzner&rsquo;s Cloud Storage Volumes</h2>

<p><a href="https://www.hetzner.com/cloud">Hetzner Cloud</a> offers a fast, flexible, and cost-effective SSD based Block Storage which can be attach to your Hetzner Cloud Server. At this point in time its available in the Nuremberg and Helsinki regions.</p>

<h2>Resizing of Volumes</h2>

<p>Volumes can be resized up to 10TB and the console allows you to resize in 1GB increments. You are allowed to increase, but cannot decrease.</p>

<h2>Demo through Cloud Volumes</h2>

<p>Let&rsquo;s run through a demo, where we will do the following:</p>

<ul>
<li>Provision a Server</li>
<li>Provision a Volume (XFS Filesystem / EXT4 is also optional)</li>
<li>Inspect the Volume, do some performance testing</li>
<li>Resize the Volume via Hetzner Cloud Console</li>
<li>Grow the XFS Filesystem</li>
</ul>


<p>After provisioning a server, which takes less than a minute, you should see that the server is created:</p>

<p><img src="https://user-images.githubusercontent.com/567298/50202325-6f474500-0366-11e9-8e7d-e96f0c78beba.png" alt="" /></p>

<p>SSH into your server. At this moment, we have not provisioned any volumes, so only the root partition should be mounted. Look at the block allocation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>lsblk
</span><span class='line'>NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
</span><span class='line'>sda      8:0    <span class="m">0</span> 19.1G  <span class="m">0</span> disk
</span><span class='line'>--sda1   8:1    <span class="m">0</span> 19.1G  <span class="m">0</span> part /
</span><span class='line'>sr0     11:0    <span class="m">1</span> 1024M  <span class="m">0</span> rom
</span></code></pre></td></tr></table></div></figure>


<p>Have a look at the fstab:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat /etc/fstab
</span><span class='line'><span class="c"># &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span>
</span><span class='line'><span class="nv">UUID</span><span class="o">=</span>2f54e8e6-ff9c-497a-88ea-ce159f6cd283 /               ext4    discard,errors<span class="o">=</span>remount-ro <span class="m">0</span>       1
</span><span class='line'>/dev/fd0        /media/floppy0  auto    rw,user,noauto,exec,utf8 <span class="m">0</span>       0
</span></code></pre></td></tr></table></div></figure>


<p>And have a look at the mounted disks layout:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>df -h
</span><span class='line'>Filesystem      Size  Used Avail Use% Mounted on
</span><span class='line'>udev            959M     <span class="m">0</span>  959M   0% /dev
</span><span class='line'>tmpfs           195M  652K  194M   1% /run
</span><span class='line'>/dev/sda1        19G  1.6G   17G   9% /
</span><span class='line'>tmpfs           973M     <span class="m">0</span>  973M   0% /dev/shm
</span><span class='line'>tmpfs           5.0M     <span class="m">0</span>  5.0M   0% /run/lock
</span><span class='line'>tmpfs           973M     <span class="m">0</span>  973M   0% /sys/fs/cgroup
</span><span class='line'>tmpfs           195M     <span class="m">0</span>  195M   0% /run/user/0
</span></code></pre></td></tr></table></div></figure>


<p>Now, time to provision a Volume. Head over to the Volumes section:</p>

<p><img src="https://user-images.githubusercontent.com/567298/50202468-dfee6180-0366-11e9-8e48-aaadeb707938.png" alt="" /></p>

<p>I&rsquo;m going ahead with creating a volume with 10GB of space and assign it to my server, and yeah that&rsquo;s right, 10GB of storage is 0,40 EUR per month, epic value for money!</p>

<p><img src="https://user-images.githubusercontent.com/567298/50202502-fd233000-0366-11e9-9c71-475966488ca1.png" alt="" /></p>

<p>After you volume is created, you should see similar output below:</p>

<p><img src="https://user-images.githubusercontent.com/567298/50202614-5a1ee600-0367-11e9-97ab-8352d5b6f064.png" alt="" /></p>

<p>Head back to your server, and have a look at the output when running the similar commands from earlier:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>lsblk
</span><span class='line'>NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
</span><span class='line'>sda      8:0    <span class="m">0</span> 19.1G  <span class="m">0</span> disk
</span><span class='line'>--sda1   8:1    <span class="m">0</span> 19.1G  <span class="m">0</span> part /
</span><span class='line'>sdb      8:16   <span class="m">0</span>   10G  <span class="m">0</span> disk /mnt/HC_Volume_1497823
</span><span class='line'>sr0     11:0    <span class="m">1</span> 1024M  <span class="m">0</span> rom
</span></code></pre></td></tr></table></div></figure>


<p>The fstab config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /etc/fstab
</span><span class='line'><span class="c"># &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span>
</span><span class='line'><span class="nv">UUID</span><span class="o">=</span>2f54e8e6-ff9c-497a-88ea-ce159f6cd283 /               ext4    discard,errors<span class="o">=</span>remount-ro <span class="m">0</span>       1
</span><span class='line'>/dev/fd0        /media/floppy0  auto    rw,user,noauto,exec,utf8 <span class="m">0</span>       0
</span><span class='line'>/dev/disk/by-id/scsi-0HC_Volume_1497823 /mnt/HC_Volume_1497823 xfs discard,nofail,defaults <span class="m">0</span> 0
</span></code></pre></td></tr></table></div></figure>


<p>The disk layout:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>df -h
</span><span class='line'>Filesystem      Size  Used Avail Use% Mounted on
</span><span class='line'>udev            959M     <span class="m">0</span>  959M   0% /dev
</span><span class='line'>tmpfs           195M  660K  194M   1% /run
</span><span class='line'>/dev/sda1        19G  1.6G   17G   9% /
</span><span class='line'>tmpfs           973M     <span class="m">0</span>  973M   0% /dev/shm
</span><span class='line'>tmpfs           5.0M     <span class="m">0</span>  5.0M   0% /run/lock
</span><span class='line'>tmpfs           973M     <span class="m">0</span>  973M   0% /sys/fs/cgroup
</span><span class='line'>tmpfs           195M     <span class="m">0</span>  195M   0% /run/user/0
</span><span class='line'>/dev/sdb         10G   43M   10G   1% /mnt/HC_Volume_1497823
</span></code></pre></td></tr></table></div></figure>


<p>We can see from the output above how easy it is to provision a volume to your Hetzner Cloud Server. And everything gets done for you, the disk is mounted and the <code>/etc/fstab</code> configuration is populated for you.</p>

<p>Time for some performance testing on the volume:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>dd <span class="nv">bs</span><span class="o">=</span>2M <span class="nv">count</span><span class="o">=</span><span class="m">256</span> <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>/mnt/HC_Volume_1497823/test.dd
</span><span class='line'>256+0 records in
</span><span class='line'>256+0 records out
</span><span class='line'><span class="m">536870912</span> bytes <span class="o">(</span><span class="m">537</span> MB, <span class="m">512</span> MiB<span class="o">)</span> copied, 0.911306 s, <span class="m">589</span> MB/s
</span></code></pre></td></tr></table></div></figure>


<p>Pretty neat right? :D</p>

<p>Let&rsquo;s resize the volume via the Hetzner Cloud Console to 20GB and resize the filesystem. From the Console, head over to the volumes section, select the more options and select resize:</p>

<p><img src="https://user-images.githubusercontent.com/567298/50203010-bcc4b180-0368-11e9-86e8-653490ad6870.png" alt="" /></p>

<p>After the volume has been resized, head back to your server and resize the filesystem. As we are using XFS Filesystem, we will use <code>xfs_growfs</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>xfs_growfs /dev/sdb
</span><span class='line'>meta-data<span class="o">=</span>/dev/sdb               <span class="nv">isize</span><span class="o">=</span><span class="m">512</span>    <span class="nv">agcount</span><span class="o">=</span>4, <span class="nv">agsize</span><span class="o">=</span><span class="m">655360</span> <span class="nv">blks</span>
</span><span class='line'>         <span class="o">=</span>                       <span class="nv">sectsz</span><span class="o">=</span><span class="m">512</span>   <span class="nv">attr</span><span class="o">=</span>2, <span class="nv">projid32bit</span><span class="o">=</span><span class="nv">1</span>
</span><span class='line'>         <span class="o">=</span>                       <span class="nv">crc</span><span class="o">=</span><span class="m">1</span>        <span class="nv">finobt</span><span class="o">=</span><span class="m">1</span> <span class="nv">spinodes</span><span class="o">=</span><span class="m">0</span> <span class="nv">rmapbt</span><span class="o">=</span><span class="nv">0</span>
</span><span class='line'>         <span class="o">=</span>                       <span class="nv">reflink</span><span class="o">=</span>0
</span><span class='line'><span class="nv">data</span>     <span class="o">=</span>                       <span class="nv">bsize</span><span class="o">=</span><span class="m">4096</span>   <span class="nv">blocks</span><span class="o">=</span>2621440, <span class="nv">imaxpct</span><span class="o">=</span><span class="nv">25</span>
</span><span class='line'>         <span class="o">=</span>                       <span class="nv">sunit</span><span class="o">=</span><span class="m">0</span>      <span class="nv">swidth</span><span class="o">=</span><span class="m">0</span> blks
</span><span class='line'><span class="nv">naming</span>   <span class="o">=</span>version <span class="m">2</span>              <span class="nv">bsize</span><span class="o">=</span><span class="m">4096</span>   ascii-ci<span class="o">=</span><span class="m">0</span> <span class="nv">ftype</span><span class="o">=</span>1
</span><span class='line'><span class="nv">log</span>      <span class="o">=</span>internal               <span class="nv">bsize</span><span class="o">=</span><span class="m">4096</span>   <span class="nv">blocks</span><span class="o">=</span>2560, <span class="nv">version</span><span class="o">=</span><span class="nv">2</span>
</span><span class='line'>         <span class="o">=</span>                       <span class="nv">sectsz</span><span class="o">=</span><span class="m">512</span>   <span class="nv">sunit</span><span class="o">=</span><span class="m">0</span> blks, lazy-count<span class="o">=</span>1
</span><span class='line'><span class="nv">realtime</span> <span class="o">=</span>none                   <span class="nv">extsz</span><span class="o">=</span><span class="m">4096</span>   <span class="nv">blocks</span><span class="o">=</span>0, <span class="nv">rtextents</span><span class="o">=</span>0
</span><span class='line'>data blocks changed from <span class="m">2621440</span> to 5242880
</span></code></pre></td></tr></table></div></figure>


<p>Have a look at the disk layout and see that the filesystem was resized on the fly. If you have applications writing/reading to and from that volume, its better to unmount it first.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>df -h
</span><span class='line'>Filesystem      Size  Used Avail Use% Mounted on
</span><span class='line'>udev            959M     <span class="m">0</span>  959M   0% /dev
</span><span class='line'>tmpfs           195M  660K  194M   1% /run
</span><span class='line'>/dev/sda1        19G  2.1G   16G  12% /
</span><span class='line'>tmpfs           973M     <span class="m">0</span>  973M   0% /dev/shm
</span><span class='line'>tmpfs           5.0M     <span class="m">0</span>  5.0M   0% /run/lock
</span><span class='line'>tmpfs           973M     <span class="m">0</span>  973M   0% /sys/fs/cgroup
</span><span class='line'>tmpfs           195M     <span class="m">0</span>  195M   0% /run/user/0
</span><span class='line'>/dev/sdb         20G  565M   20G   3% /mnt/HC_Volume_1497823
</span></code></pre></td></tr></table></div></figure>


<p>I must admit, I am really stoked with Hetzner&rsquo;s offerings and their performance. I&rsquo;ve been hosting servers with them for the past 5 months and so far they really impressed me.</p>

<p>Have a look at <a href="https://www.hetzner.com/cloud">Hetzner Cloud&rsquo;s</a> offerings, they have great prices as you can start off with a server from as little as 2.49 EUR per month, which gives you 1vCPU, 2GB of RAM, 20GB disk Space and 20TB of traffic. I mean, thats awesome value for money. They also offer Floating IP&rsquo;s, Backups, etc.</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://www.hetzner.com/cloud">Hetzner Cloud&rsquo;s</a></li>
<li><a href="https://wiki.hetzner.de/index.php/CloudServer/en#What_are_the_Hetzner_Cloud_Volumes.3F">More info on Hetzner Volumes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a UI in Python Flask and Bootstrap for Our Serverless URL Shortener]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/12/18/creating-a-ui-in-python-flask-and-bootstrap-for-our-serverless-url-shortener/"/>
    <updated>2018-12-18T09:35:53-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/12/18/creating-a-ui-in-python-flask-and-bootstrap-for-our-serverless-url-shortener</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/python-flask.png" alt="" /></p>

<p>From a <a href="https://blog.ruanbekker.com/blog/2018/11/30/how-to-setup-a-serverless-url-shortener-with-api-gateway-lambda-and-dynamodb-on-aws/">previous</a> post, we went through the setup of building a <a href="https://blog.ruanbekker.com/blog/2018/11/30/how-to-setup-a-serverless-url-shortener-with-api-gateway-lambda-and-dynamodb-on-aws/">Serverless URL Shortener with API Gateway, Lambda, and DynamoDB on AWS</a>. Today we will build a Web User Interface using Python Flask, Bootstrap and JavaScript that will communicate to our API to shorten URL&rsquo;s.</p>

<p>Note: Although using Python Flask is a Hosted option, you could also use <a href="https://s3-us-west-2.amazonaws.com/sha-public-us-west-2/URLShortener/index.html">this example</a> to host it as a web page on Amazon S3, for the complete serverless route.</p>

<h2>Dependencies:</h2>

<p>We need Flask, Gunicorn (optional) and Requests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pip install flask gunicorn requests
</span></code></pre></td></tr></table></div></figure>


<h2>Application Code:</h2>

<p>It&rsquo;s good practice to use a API Key for some level of security, but if not, you can just remove the headers section of <code>x-api-key</code>.</p>

<p>The application relies on 3 environment variables: <code>APP_TITLE</code> - which is the banner name (defaults to &ldquo;My URL Shortener&rdquo; if none is set), <code>TINY_API_URL</code> - which is the URL to create the shortened url and <code>X_API_KEY</code> which is the api key for your API.</p>

<p>The content of <code>app.py</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">render_template</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">url_for</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">logging</span>
</span><span class='line'>
</span><span class='line'><span class="n">tiny_api_url</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">&#39;TINY_API_URL&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'><span class="n">tiny_api_key</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">&#39;X_API_KEY&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'><span class="n">app_title</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">&#39;APP_TITLE&#39;</span><span class="p">,</span> <span class="s">&#39;My URL Shortener&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">tiny_api_url</span> <span class="o">==</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">tiny_api_key</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>    <span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s">&quot;Failed to load configuration&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;Content-Type&#39;</span><span class="p">:</span> <span class="s">&#39;application/json&#39;</span><span class="p">,</span> <span class="s">&#39;X-Api-Key&#39;</span><span class="p">:</span> <span class="n">tiny_api_key</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&#39;index.html&#39;</span><span class="p">,</span> <span class="n">app_title</span><span class="o">=</span><span class="n">app_title</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/shortened&#39;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;GET&#39;</span><span class="p">,</span> <span class="s">&#39;POST&#39;</span><span class="p">])</span>
</span><span class='line'><span class="k">def</span> <span class="nf">search_request</span><span class="p">():</span>
</span><span class='line'>    <span class="n">user_url</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="p">[</span><span class="s">&quot;input&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span>
</span><span class='line'>        <span class="n">tiny_api_url</span><span class="p">,</span>
</span><span class='line'>        <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span>
</span><span class='line'>        <span class="n">data</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">({</span>
</span><span class='line'>            <span class="s">&quot;long_url&quot;</span><span class="p">:</span> <span class="n">user_url</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&#39;results.html&#39;</span><span class="p">,</span> <span class="n">app_title</span><span class="o">=</span><span class="n">app_title</span><span class="p">,</span> <span class="n">res</span><span class="o">=</span><span class="n">response</span><span class="o">.</span><span class="n">content</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">passthrough_errors</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>JavaScript</h2>

<p>We want to copy the value of the shortened url response to clipboard when clicking on a button. For that functionality, we need some javascript.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir -p static/js
</span><span class='line'><span class="nv">$ </span>touch static/js/clipboard.js
</span></code></pre></td></tr></table></div></figure>


<p>the content for our javascript function - <code>static/js/clipboard.js</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">copyToClipboard</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">copyText</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;input&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">copyText</span><span class="p">.</span><span class="nx">select</span><span class="p">();</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">execCommand</span><span class="p">(</span><span class="s2">&quot;Copy&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>HTML</h2>

<p>The content for <code>templates/index.html</code> :</p>

<script src="https://gist.github.com/ruanbekker/0c12fd81c94dc9019641dd536d704519.js"></script>


<p>The content for <code>templates/results.html</code> :</p>

<script src="https://gist.github.com/ruanbekker/01e27db70d4a2f60393b927697b2ca57.js"></script>


<h2>Run the Server</h2>

<p>Before we run the server, we need to set the environment variables as mentioned earlier:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">TINY_API_URL</span><span class="o">=</span>https://tiny-api.mydomain.com/create
</span><span class='line'><span class="nv">X_API_KEY</span><span class="o">=</span>someRandomSecretKey09876543210
</span></code></pre></td></tr></table></div></figure>


<p>Run the Server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gunicorn -w <span class="m">2</span> -b 0.0.0.0:8080 --access-logfile<span class="o">=</span>/dev/stdout --error-log<span class="o">=</span>/dev/stderr app:app
</span></code></pre></td></tr></table></div></figure>


<p>After booting the server, access the server on <code>http://localhost:8080/</code> and the response should look like:</p>

<p><img src="https://user-images.githubusercontent.com/567298/50162763-c5c16e80-02e7-11e9-8744-a4c3c3c51f8e.png" alt="" /></p>

<h2>Dockerizing this Application</h2>

<p>The source code for this project is available on my <a href="https://github.com/ruanbekker/flask-url-shortener-ui">github repository</a></p>

<h2>Thank You</h2>

<p>Please feel free to show support by, <strong>sharing</strong> this post, making a <strong>donation</strong>, <strong>subscribing</strong> or <strong>reach out to me</strong> if you want me to demo and write up on any specific tech topic.</p>

<center>
<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
<input type="hidden" name="cmd" value="_s-xclick" />
<input type="hidden" name="hosted_button_id" value="W7CBGYTCWGANQ" />
<input type="image" src="https://user-images.githubusercontent.com/567298/49853901-461c3700-fdf1-11e8-9d80-8a424a3173af.png" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
</form>
</center>


<p><br></p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VULTR Cloud Servers Limited Signup Promotion]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/12/12/vultr-cloud-servers-limited-singup-promotion/"/>
    <updated>2018-12-12T01:00:32-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/12/12/vultr-cloud-servers-limited-singup-promotion</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/49853336-78c53000-fdef-11e8-8cc2-4b7684550060.png" alt="" /></p>

<p>It&rsquo;s promotion time with VULTR! Get a head start with some free credits.</p>

<h2>Promotion</h2>

<p>VULTR has a promotion running for a limited time, when you sign up with this link below, use the coupon / promo code: <em>VULTRMATCH</em> and you will receive double the deposit in credits for up to $100. This applies to new customers only.</p>

<p>I&rsquo;m not quite sure how long they will be running this promotion, but you can get $100 free in credits when you sign up. That is basically <em>20 months free hosting</em> of a Cloud Server with 1CPU, 1GB RAM, 1TB Bandwidth.</p>

<p>Here&rsquo;s the link:</p>

<p><a href="https://goo.gl/hiAamd"><img src="https://www.vultr.com/media/banner_1.png" width="468" height="60"></a></p>

<h2>About VULTR</h2>

<p>If you are not familliar with VULTR, they are a Cloud Hosting Company that offers cloud servers, bare-metal servers and storage servers in 16 different regions and they provide a hourly billing model.</p>

<p>Below are some of their features:</p>

<ul>
<li>16 Locations: Silicon Valley, Seattle, LA, Dallas, Toronto, Miami, New Jersey, Chicago, Atlanta, London, Paris, Frankfurt, Amsterdam, Tokyo, Singapore, Sydney</li>
<li>100% SLA Guaranteed</li>
<li>Solid-State Drives (SSD)</li>
<li>Private Networking</li>
<li>Reserved IP&rsquo;s</li>
<li>Anti-DDOS Support</li>
<li>Backups</li>
<li>DNS</li>
<li>Startup Scripts</li>
<li>Firewalls</li>
<li>Pretty Slick User Interface</li>
<li>Root Access</li>
<li>Hourly Billing</li>
<li>Deploy Applications Instantly to your Servers with App Deploys</li>
<li>OS Support: Linux, Windows and Custom Uploads</li>
<li>API Support</li>
<li>Great Documentation and Tutorials</li>
</ul>


<p>They also allow you to submit articles to them that can earn you up to $300 per article, check it out <a href="https://goo.gl/hiAamd">here</a></p>

<h2>VULTR Mission</h2>

<p>From their website, their about us section states:</p>

<p>&ldquo;Vultr, founded in 2014, is on a mission to empower developers and businesses by simplifying the deployment of infrastructure via its advanced cloud platform. Vultr is strategically located in 16 datacenters around the globe and provides frictionless provisioning of public cloud, storage and single-tenant bare metal.&rdquo;</p>

<p>&ldquo;Vultr has made it our priority to offer a standardized highly reliable high performance cloud compute environment in all of the cities we serve. Launching a cloud server environment in 16 cities around the globe has never been easier!&rdquo;</p>

<h2>Launching a Server</h2>

<p>I decided to deploy a server pre-configured with Docker, and just about a minute I had my server up and running with Docker, ready to go.</p>

<p>Screenshot of the UI:</p>

<p><img src="https://user-images.githubusercontent.com/567298/49851122-bc686b80-fde8-11e8-82f5-d5fd7fdbaf8a.png" alt="" /></p>

<p>Screenshot of the root login:</p>

<p><img src="https://user-images.githubusercontent.com/567298/49851151-d609b300-fde8-11e8-98aa-974b79b67ed1.png" alt="" /></p>

<h2>Overall</h2>

<p>I&rsquo;m quite impressed with VULTR and the ease of use. The pricing is really good and like the fact that you can deploy servers with pre-configured software on it.</p>

<h2>Thank You</h2>

<p>Please feel free to show support by, <strong>sharing</strong> this post, making a <strong>donation</strong>, <strong>subscribing</strong> or <strong>reach out to me</strong> if you want me to demo and write up on any specific tech topic.</p>

<center>
<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
<input type="hidden" name="cmd" value="_s-xclick" />
<input type="hidden" name="hosted_button_id" value="W7CBGYTCWGANQ" />
<input type="image" src="https://user-images.githubusercontent.com/567298/49853901-461c3700-fdf1-11e8-9d80-8a424a3173af.png" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
<img alt="" border="0" src="https://www.paypal.com/en_ZA/i/scr/pixel.gif" width="1" height="1" />
</form>
</center>


<p><br></p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Flask Tutorial Series: Routing in Flask]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/12/11/python-flask-tutorial-series-routing-in-flask-p3/"/>
    <updated>2018-12-11T05:29:14-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/12/11/python-flask-tutorial-series-routing-in-flask-p3</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/python-flask.png" alt="" /></p>

<p>This is post 3 of our <a href="http://blog.ruanbekker.com/blog/categories/flask-tutorial/">Python Flask Tutorial Series</a> where we will go into Views and Routing.</p>

<p>In our previous post we went through the steps to setup a <a href="https://blog.ruanbekker.com/blog/2018/12/09/python-flask-tutorial-series-setup-a-python-virtual-environment-p2/">Virtual Environment for our Flask App</a></p>

<h2>Flask Views and Routing:</h2>

<p>Flask Routing is essentially mapping a URL eg. <code>example.com/pages/test</code> to a view function within your code. For example having <code>/contact-us</code> displaying a page about contact details.</p>

<p>The <code>route()</code> decorator in Flask is used to bind the URL to a function.</p>

<h2>Some basic examples:</h2>

<p>This is a basic web app that shows on which page you are:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/home&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">home</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;&lt;h2&gt;You are on the Home Page&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/about-us&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">about</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;&lt;h2&gt;You are on the About Us Page&lt;/h2&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__main__</span> <span class="o">==</span> <span class="s">&#39;__name__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>With <code>app.run()</code> we have passed no arguments, so it will use the defaults, which is:</p>

<ul>
<li>Host: <code>127.0.0.1</code></li>
<li>Port: <code>5000</code></li>
<li>Debug: <code>False</code></li>
</ul>


<p>To set your own values, you could do something like: <code>app.run(host='0.0.0.0', port=8080, debug=True)</code>. Note: Never use debug mode in production.</p>

<p>So when you do a GET Request on <code>http://localhost:5000/home</code> you will be presented with the response that you are on the home page.</p>

<p>This is all good and well, but its static, so lets look how we can set this up in a dynamic way.</p>

<h2>URL Variables:</h2>

<p>We can use variables in the <code>route()</code> decorator which we can parse through to the function. In this next example we will use a <code>name</code> variable, and depending on what name is passed in the GET request, will be provided in the response.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/user/&lt;name&gt;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">user</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;Welcome, {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__main__</span> <span class="o">==</span> <span class="s">&#39;__name__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>So with the above example, <code>&lt;name&gt;</code> will be used as a placeholder or variable, and then passed through to our function and then returned in our response, for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XGET http://localhost:5000/user/James
</span><span class='line'>Welcome, James
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>curl -XGET http://localhost:5000/user/Frank
</span><span class='line'>Welcome, Frank
</span></code></pre></td></tr></table></div></figure>


<p>So this can be really useful when dealing with dynamic data. You can also go deeper into this, like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/user/&lt;name&gt;/&lt;surname&gt;/&lt;prog_lang&gt;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">user</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">surname</span><span class="p">,</span> <span class="n">prog_lang</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;{} {} likes {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">surname</span><span class="p">,</span> <span class="n">prog_lang</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__main__</span> <span class="o">==</span> <span class="s">&#39;__name__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will produce:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XGET http://localhost:5000/user/John/Smith/Python
</span><span class='line'>John Smith likes Python
</span></code></pre></td></tr></table></div></figure>


<p>We can also have defaults, so if no values was passed, and you only hit the <code>/user</code> endpoint, you can have a default value returned:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/user&#39;</span><span class="p">,</span> <span class="n">defaults</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;Ruan&#39;</span><span class="p">,</span> <span class="s">&#39;surname&#39;</span><span class="p">:</span> <span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="s">&#39;prog_lang&#39;</span><span class="p">:</span> <span class="s">&#39;Python&#39;</span><span class="p">})</span>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/user/&lt;name&gt;/&lt;surname&gt;/&lt;prog_lang&gt;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">user</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">surname</span><span class="p">,</span> <span class="n">prog_lang</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;{} {} likes {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">surname</span><span class="p">,</span> <span class="n">prog_lang</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__main__</span> <span class="o">==</span> <span class="s">&#39;__name__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>So then the output would look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XGET http://localhost:5000/user
</span><span class='line'>Ruan B likes Python
</span></code></pre></td></tr></table></div></figure>


<p>This is a very simple example, but you could use it in many ways.</p>

<h2>Data Types in URL Routing:</h2>

<p>You could also explicitly set your datatypes, like string or integer etc in your route decorators.</p>

<p>Example for <em>Strings</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/city/&lt;string:cityname&gt;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">user</span><span class="p">(</span><span class="n">cityname</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;Selected City is: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">cityname</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__main__</span> <span class="o">==</span> <span class="s">&#39;__name__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Example for <em>Integers</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/user/&lt;integer:age&gt;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">user</span><span class="p">(</span><span class="n">age</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;Selected age is: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__main__</span> <span class="o">==</span> <span class="s">&#39;__name__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now because the datatype is an integer, when you try to pass a string, you will be faced with an error. So the value that you will need to pass would then be strictly set to the type of integer.</p>

<p>Example with <em>if statements</em>:</p>

<p>You could also use if statements in your functions, like determining the age group, for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/user/&lt;integer:age&gt;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">user</span><span class="p">(</span><span class="n">age</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">28</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;Your selected age is {}, so you are in the 28 and older group&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;Your selected age is {}, so you are in the younger then 28 group&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__main__</span> <span class="o">==</span> <span class="s">&#39;__name__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>So with the above example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XGET http://127.0.0.1:5000/user/12
</span><span class='line'>Your selected age is 12, so you are in the younger <span class="k">then</span> <span class="m">28</span> group
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>curl -XGET http://127.0.0.1:5000/user/30
</span><span class='line'>Your selected age is 30, so you are in the <span class="m">28</span> and older group
</span></code></pre></td></tr></table></div></figure>


<p>Example with <em>Floats</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>@app.route<span class="o">(</span><span class="s1">&#39;/myfloat/&lt;float:floatnum&gt;&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Example with <em>Path Types</em>:</p>

<p>We can also pass accept the URL Path, that is passed by using the path type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/path/&lt;path:mypath&gt;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">user</span><span class="p">(</span><span class="n">mypath</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;Your selected path is: /{}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">mypath</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__main__</span> <span class="o">==</span> <span class="s">&#39;__name__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>So with the above example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XGET http://127.0.0.1:5000/path/apps/data/my/app
</span><span class='line'>Your selected path is: /apps/data/my/app
</span></code></pre></td></tr></table></div></figure>


<p>I hope this was useful, next up in our <a href="http://blog.ruanbekker.com/blog/categories/flask-tutorial/">Python Flask Tutorial-Series</a> will be rendering templates in flask with the jinja2 templating engine.</p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Flask Tutorial Series: Setup a Python Virtual Environment]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/12/09/python-flask-tutorial-series-setup-a-python-virtual-environment-p2/"/>
    <updated>2018-12-09T17:19:24-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/12/09/python-flask-tutorial-series-setup-a-python-virtual-environment-p2</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/python-flask.png" alt="" /></p>

<p>In our previous post we wrote a basic <a href="https://blog.ruanbekker.com/blog/2018/11/27/python-flask-tutorial-series-create-a-hello-world-app-p1/">Hello World App in Flask</a>. This is post 2 of the <a href="http://blog.ruanbekker.com/blog/categories/flask-tutorial/">Python Flask Tutorial Series</a></p>

<p>In this section we will be covering our Environment Setup, where I will be showing you how to setup a typical Python Flask Environment using <a href="http://virtualenv.readthedocs.org/en/latest/">virtualenv</a></p>

<h2>What is VirtualEnv?</h2>

<p>Virtualenv allows you to have isolated Python Environments, where each project or environment can have their own versions. Some applications may need a specific version of a certain package, so lets say you are running multiple applications on one server, then having to manage each ones dependencies can be a pain. As you may run into scenarios where they are dependent on specific versions, where you have to upgrade/downgrade packages like no-ones business.</p>

<p>Luckily with the help of virtualenv, each environment is isolated from each other, so system wide you might be running Python 2.7 with minimal packages installed, then you can create a virtual environment with Python 3 with packages for the application you are developing.</p>

<h2>Setup a Virtual Environment:</h2>

<p>We will setup a virtualenv for our project with our default python version which in this case is 2.7:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir ~/projects/mywebapp
</span><span class='line'>$ cd ~/projects/mywebapp
</span><span class='line'>$ virtualenv .venv</span></code></pre></td></tr></table></div></figure>


<p>At this moment you should have your virtual environment ready, now to enter and activate our environment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ source .venv/bin/activate</span></code></pre></td></tr></table></div></figure>


<p>To confirm your python version:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python --version
</span><span class='line'>Python 2.7.6</span></code></pre></td></tr></table></div></figure>


<p>If you have multiple versions of python, you can create your virtual environment with a different python version by using the <code>-p</code> flag, as in:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ virtualenv -p /usr/local/bin/python2.7 .venv</span></code></pre></td></tr></table></div></figure>


<p>Now that we are in our virtualenv, lets install 2 packages, Flask and Requests:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip install flask
</span><span class='line'>$ pip install requests</span></code></pre></td></tr></table></div></figure>


<p>With pip we can list the installed packages we have with <code>pip freeze</code>. Since this is our virtual environment, we will only see the packages that was installed into this environment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip freeze
</span><span class='line'>click==6.7
</span><span class='line'>Flask==0.12
</span><span class='line'>itsdangerous==0.24
</span><span class='line'>Jinja2==2.9.5.1
</span><span class='line'>MarkupSafe==1.0
</span><span class='line'>requests==2.7.0
</span><span class='line'>six==1.10.0
</span><span class='line'>virtualenv==15.0.1
</span><span class='line'>Werkzeug==0.12.1</span></code></pre></td></tr></table></div></figure>


<p>We can dump this to a file, which we can later use to install packages from a list so that we don&rsquo;t have to specify them manually. We can dump them by doing this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pip freeze &gt; requirements.txt
</span></code></pre></td></tr></table></div></figure>


<p>Now lets say you are on a different host and you would like to install the packages from the <code>requirements.txt</code> file, we do this by using the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pip install -r requirements.txt
</span></code></pre></td></tr></table></div></figure>


<p>To exit your virtualenv, you do the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>deactivate
</span></code></pre></td></tr></table></div></figure>


<p>I hope this was useful, next up in our <a href="http://blog.ruanbekker.com/blog/categories/flask-tutorial/">Python Flask Tutorial Series</a> will be <a href="https://blog.ruanbekker.com/blog/2018/12/11/python-flask-tutorial-series-routing-in-flask-p3/">Routing in Flask</a></p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Setup a Serverless URL Shortener With API Gateway Lambda and DynamoDB on AWS]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/11/30/how-to-setup-a-serverless-url-shortener-with-api-gateway-lambda-and-dynamodb-on-aws/"/>
    <updated>2018-11-30T02:51:24-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/11/30/how-to-setup-a-serverless-url-shortener-with-api-gateway-lambda-and-dynamodb-on-aws</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/aws-logo.png" alt="" /></p>

<p>Today we will set a Serverless URL Shortener using API Gateway, Lambda with Python and DynamoDB.</p>

<h2>Overview</h2>

<p>The service that we will be creating, will shorten URLs via our API which will create an entry on DynamoDB. When a GET method is performed on the shortened URL, a GetItem is executed on DynamoDB to get the Long URL and a 301 Redirect is performed to redirect the client to intended destination URL.</p>

<p>Note, I am using a domain name which is quite long, but its only for demonstration, if you can get hold of any short domains like <code>t.co</code> etc, that will make your Shortened URLs really short in character count.</p>

<p>Update: URL Shortener UI <a href="https://blog.ruanbekker.com/blog/2018/12/18/creating-a-ui-in-python-flask-and-bootstrap-for-our-serverless-url-shortener/">available in this post</a></p>

<h2>The Setup</h2>

<p>The following services will be used to create a URL Shortener:</p>

<ul>
<li>AWS API Gateway: ( <code>/create</code>: to create a shortened url and <code>/t/{id}</code> to redirect to long url)</li>
<li>AWS IAM: (Role and Policy for Permissions to call DynamoDB from Lambda)</li>
<li>AWS Lambda: (Application Logic)</li>
<li>AWS DynamoDB: (Persistent Store to save our Data)</li>
<li>AWS ACM: (Optional: Certificate for your Domain)</li>
<li>AWS Route53: (Optional: DNS for the domain that you want to associate to your API)</li>
</ul>


<p>The flow will be like the following:</p>

<ul>
<li>POST Request gets made to the <code>/create</code> request path with the <code>long_url</code> data in the payload</li>
<li>This data is then used by the Lambda function to create a short url and create a entry in DynamoDB</li>
<li>In DynamoDB the entry is created with the short id as the hash key and the long url as one of the attributes</li>
<li>The response to the client will be the short url</li>
<li>When a GET method is performed on the id eg <code>/t/{short_id}</code>, a lookup gets done on the DynamoDB table, retrieves the long url from the table</li>
<li>A 301 redirect gets performed on API Gateway and the client gets redirected to the intended url</li>
</ul>


<h2>Creating the URL Shortener</h2>

<p>After completing this tutorial you will have your own Serverless URL Shortener using API Gateway, Lambda and DynamoDB.</p>

<h2>IAM Permissions</h2>

<p>On AWS IAM, create a IAM Policy, in my case the policy name is <code>lambda-dynamodb-url-shortener</code> and note that I masked out my account number:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;VisualEditor0&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;dynamodb:PutItem&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;dynamodb:DeleteItem&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;dynamodb:GetItem&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;dynamodb:Query&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;dynamodb:UpdateItem&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="s2">&quot;arn:aws:dynamodb:eu-west-1:xxxxxxxxxxxx:table/url-shortener-table&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Head over to <a href="https://console.aws.amazon.com/iam/home?region=eu-west-1#/roles">IAM Roles</a>, select Create Role, Select Lambda as the Trusted Entitiy from the AWS Service section, go ahead with the permissions and select your IAM Policy that was created, in my case <code>lambda-dynamodb-url-shortener</code> and <code>AWSLambdaBasicExecution</code> role. Give your Role a name, in my case <code>lambda-dynamodb-url-shortener-role</code>.</p>

<h2>DynamoDB Table</h2>

<p>Next, head over to <a href="https://eu-west-1.console.aws.amazon.com/dynamodb/home?region=eu-west-1#create-table:">DynamoDB</a> create a table, in my case the table name: <code>url-shortener-table</code> and the primary key <code>short_id</code> set to string:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-02.png" alt="" /></p>

<h2>Lambda Functions</h2>

<p>Once the table is created, head over to <a href="https://eu-west-1.console.aws.amazon.com/lambda/home?region=eu-west-1#/create?firstrun=true">Lambda</a> and create a Lambda function, in my case using Python 3.6 and provide a name, where I used: <code>url-shortener-create</code> and select the IAM role from the previous role that we created, this function will be the lambda function that will create the shortened urls:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-03-lambda.png" alt="" /></p>

<p>The code for your lambda function which will take care of creating the short urls and save them to dynamodb, take note on the region and table name to ensure that it matches your setup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">string</span> <span class="kn">import</span> <span class="n">ascii_letters</span><span class="p">,</span> <span class="n">digits</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">choice</span><span class="p">,</span> <span class="n">randint</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">strftime</span><span class="p">,</span> <span class="n">time</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">urllib</span> <span class="kn">import</span> <span class="n">parse</span>
</span><span class='line'>
</span><span class='line'><span class="n">app_url</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">&#39;APP_URL&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">min_char</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">&#39;MIN_CHAR&#39;</span><span class="p">))</span>
</span><span class='line'><span class="n">max_char</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">&#39;MAX_CHAR&#39;</span><span class="p">))</span>
</span><span class='line'><span class="n">string_format</span> <span class="o">=</span> <span class="n">ascii_letters</span> <span class="o">+</span> <span class="n">digits</span>
</span><span class='line'>
</span><span class='line'><span class="n">ddb</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s">&#39;dynamodb&#39;</span><span class="p">,</span> <span class="n">region_name</span> <span class="o">=</span> <span class="s">&#39;eu-west-1&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">Table</span><span class="p">(</span><span class="s">&#39;url-shortener-table&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">generate_timestamp</span><span class="p">():</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%Y-%m-</span><span class="si">%d</span><span class="s">T%H:%M:%S&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">response</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">expiry_date</span><span class="p">():</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">time</span><span class="p">())</span> <span class="o">+</span> <span class="nb">int</span><span class="p">(</span><span class="mi">604800</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">response</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">check_id</span><span class="p">(</span><span class="n">short_id</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;Item&#39;</span> <span class="ow">in</span> <span class="n">ddb</span><span class="o">.</span><span class="n">get_item</span><span class="p">(</span><span class="n">Key</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;short_id&#39;</span><span class="p">:</span> <span class="n">short_id</span><span class="p">}):</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="n">generate_id</span><span class="p">()</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">short_id</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">generate_id</span><span class="p">():</span>
</span><span class='line'>    <span class="n">short_id</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">choice</span><span class="p">(</span><span class="n">string_format</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">randint</span><span class="p">(</span><span class="n">min_char</span><span class="p">,</span> <span class="n">max_char</span><span class="p">)))</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">short_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">check_id</span><span class="p">(</span><span class="n">short_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">response</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">lambda_handler</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
</span><span class='line'>    <span class="n">analytics</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
</span><span class='line'>    <span class="n">short_id</span> <span class="o">=</span> <span class="n">generate_id</span><span class="p">()</span>
</span><span class='line'>    <span class="n">short_url</span> <span class="o">=</span> <span class="n">app_url</span> <span class="o">+</span> <span class="n">short_id</span>
</span><span class='line'>    <span class="n">long_url</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;body&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;long_url&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">timestamp</span> <span class="o">=</span> <span class="n">generate_timestamp</span><span class="p">()</span>
</span><span class='line'>    <span class="n">ttl_value</span> <span class="o">=</span> <span class="n">expiry_date</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">analytics</span><span class="p">[</span><span class="s">&#39;user_agent&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;headers&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;User-Agent&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">analytics</span><span class="p">[</span><span class="s">&#39;source_ip&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;headers&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;X-Forwarded-For&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">analytics</span><span class="p">[</span><span class="s">&#39;xray_trace_id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;headers&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;X-Amzn-Trace-Id&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">parse</span><span class="o">.</span><span class="n">urlsplit</span><span class="p">(</span><span class="n">long_url</span><span class="p">)</span><span class="o">.</span><span class="n">query</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">url_params</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">parse</span><span class="o">.</span><span class="n">parse_qsl</span><span class="p">(</span><span class="n">parse</span><span class="o">.</span><span class="n">urlsplit</span><span class="p">(</span><span class="n">long_url</span><span class="p">)</span><span class="o">.</span><span class="n">query</span><span class="p">))</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">url_params</span><span class="p">:</span>
</span><span class='line'>            <span class="n">analytics</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">url_params</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">ddb</span><span class="o">.</span><span class="n">put_item</span><span class="p">(</span>
</span><span class='line'>        <span class="n">Item</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;short_id&#39;</span><span class="p">:</span> <span class="n">short_id</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;created_at&#39;</span><span class="p">:</span> <span class="n">timestamp</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;ttl&#39;</span><span class="p">:</span> <span class="nb">int</span><span class="p">(</span><span class="n">ttl_value</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&#39;short_url&#39;</span><span class="p">:</span> <span class="n">short_url</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;long_url&#39;</span><span class="p">:</span> <span class="n">long_url</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;analytics&#39;</span><span class="p">:</span> <span class="n">analytics</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;hits&#39;</span><span class="p">:</span> <span class="nb">int</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;statusCode&quot;</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;body&quot;</span><span class="p">:</span> <span class="n">short_url</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Set a couple of environment variables that will be used in our function, min and max chars from the screenshot below is the amount of characters that will be used in a random manner to make the short id unique. The app_url will be your domain name, as this will be returned to the client with the short id eg. <code>https://tiny.myserverlessapp.net/t/3f8Hf38n398t</code> :</p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-04-lambda.png" alt="" /></p>

<p>While you are on Lambda, create the function that will retrieve the long url, in my case <code>url-shortener-retrieve</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'>
</span><span class='line'><span class="n">ddb</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s">&#39;dynamodb&#39;</span><span class="p">,</span> <span class="n">region_name</span> <span class="o">=</span> <span class="s">&#39;eu-west-1&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">Table</span><span class="p">(</span><span class="s">&#39;eng-url-shortener&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">lambda_handler</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
</span><span class='line'>    <span class="n">short_id</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;short_id&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">item</span> <span class="o">=</span> <span class="n">ddb</span><span class="o">.</span><span class="n">get_item</span><span class="p">(</span><span class="n">Key</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;short_id&#39;</span><span class="p">:</span> <span class="n">short_id</span><span class="p">})</span>
</span><span class='line'>        <span class="n">long_url</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;Item&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;long_url&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># increase the hit number on the db entry of the url (analytics?)</span>
</span><span class='line'>        <span class="n">ddb</span><span class="o">.</span><span class="n">update_item</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Key</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;short_id&#39;</span><span class="p">:</span> <span class="n">short_id</span><span class="p">},</span>
</span><span class='line'>            <span class="n">UpdateExpression</span><span class="o">=</span><span class="s">&#39;set hits = hits + :val&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">ExpressionAttributeValues</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;:val&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">except</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;statusCode&#39;</span><span class="p">:</span> <span class="mi">301</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;location&#39;</span><span class="p">:</span> <span class="s">&#39;https://objects.ruanbekker.com/assets/images/404-blue.jpg&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;statusCode&quot;</span><span class="p">:</span> <span class="mi">301</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;location&quot;</span><span class="p">:</span> <span class="n">long_url</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>API Gateway</h2>

<p>Head over to <a href="https://console.aws.amazon.com/apigateway/home?region=us-east-1#/apis">API Gateway</a> and create your API, in my case <code>url-shortener-api</code></p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-05-api-gateway.png" alt="" /></p>

<p>Head over to Resources:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-06-api-gateway.png" alt="" /></p>

<p>and create a new resource called <code>/create</code>:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-07-api-gateway.png" alt="" /></p>

<p>Once the resource is created, create a post method on the <code>create</code> resource and select Lambda as the integration type and lambda proxy integration as seen below:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-09-api-gateway.png" alt="" /></p>

<p>Once you save it, it will ask to give api gateway permission to invoike your lambda function wich you can accept by hitting ok as below:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-10-iam-permission.png" alt="" /></p>

<p>When you look at the POST method on your create resource, it should look like this:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-12-api-gateway.png" alt="" /></p>

<p>Select the root resource <code>/</code> and from Actions create a new resource <code>/t</code>:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-13-api-gateway.png" alt="" /></p>

<p>Select the <code>/t</code> resource and create a new resource named <code>shortid</code> and provide <code>{shortid}</code> in the resource path as this will be the data that will be proxied through to our lambda function:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-14-api-gateway.png" alt="" /></p>

<p>Create a GET method on the <code>/t/{shortid}</code> resource and select <code>url-shortener-retrieve</code> lambda function as the function from the lambda integration selection as seen below:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-17-api-gateway.png" alt="" /></p>

<p>Again, grant api gateway permission to invoke your function:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-18-iam-permission.png" alt="" /></p>

<p>When you select the GET method, it should look like this:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-19-api-gateway.png" alt="" /></p>

<p>Select the Integration Request and head over to Mapping Templates:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-20-api-gateway.png" alt="" /></p>

<p>from the Request body passtrhough, add a mapping template <code>application/json</code> and provide the following mapping template:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;short_id&quot;</span><span class="p">:</span> <span class="s">&quot;$input.params(&#39;shortid&#39;)&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the Method Response:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-21-api-gateway.png" alt="" /></p>

<p>Delete the 200 HTTP Status Response and create a new response by &ldquo;Add Response&rdquo;, add <code>301</code> HTTP Status, add <code>Location</code> Header to the response.</p>

<p>Navigate to the Integration Response from the <code>/{shortid}</code> GET method:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-21-api-gateway.png" alt="" /></p>

<p>delete the 200 HTTP Response, add &ldquo;integration response&rdquo;, set method response status to 301 and add header mapping for location to integration.response.body.location as below:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-23-api-gateway.png" alt="" /></p>

<p>make sure to select the integration response to - so that the method response reflects to 301:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-24-api-gateway.png" alt="" /></p>

<p>Navigate to Actions and select &ldquo;Deploy API&rdquo;, select your stage, in my case <code>test</code> and deploy:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-25-api-gateway.png" alt="" /></p>

<p>Go to stages, select your stage, select the post request to reveal the API URL:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-26-api-gateway.png" alt="" /></p>

<p>Time to test out the URL Shortener:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -XPOST -H <span class="s2">&quot;Content-Type: application/json&quot;</span> https://xxxxxx.execute-api.eu-west-1.amazonaws.com/test/create -d <span class="s1">&#39;{&quot;long_url&quot;: &quot;https://www.google.com/search?q=helloworld&quot;}&#39;</span>
</span><span class='line'>https://tiny.myserverlessapp.net/t/pcnWoCGCr2ad1x
</span></code></pre></td></tr></table></div></figure>


<h2>ACM Certificates</h2>

<p>At this moment we dont have our domain connected with our API Gateway, and we would also want a certificate on our application, which we can use ACM to request a certificate that can be associated to our domain. So in order to do that, first request a certificate on <a href="https://eu-west-1.console.aws.amazon.com/acm/home?region=eu-west-1#/privatewizard/">ACM</a>. Select Request a certificate, create a wildcard entry: <code>*.yourdomain.com</code>, select DNS Validation (If you host with Route53, they allow you the option to create the record).</p>

<p>Head back to API Gateway to associate the Domain and ACM Certificate to our API:</p>

<p>From the &ldquo;Custom Domain Names&rdquo; section, create a custom domain name, once you selected regional, it will ask for the target domain name, which will be the resolved to your API Endpoint that was created, and from the &ldquo;Base Path Mappings&rdquo; section, select <code>/</code> as the path to your API stage, in my case <code>url-shortener-api:test</code>:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-28-api-gateway.png" alt="" /></p>

<h2>Route 53</h2>

<p>Last part is to create a Route53 entry for tiny.yourdomain.com to resolve to the CNAME value of the target domain name that was provided in the custom domain names section:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/tiny-url-setup-29-route53.png" alt="" /></p>

<h2>Demo the URL Shortener Service:</h2>

<p>Once everything is setup we can test, by creating a Shortened URL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST -H <span class="s2">&quot;Content-Type: application/json&quot;</span> https://tiny.myserverlessapp.net/create -d <span class="s1">&#39;{&quot;long_url&quot;: &quot;https://www.google.com/search?q=helloworld&quot;}&#39;</span>
</span><span class='line'>https://tiny.myserverlessapp.net/t/p7ISNcxTByXhN
</span></code></pre></td></tr></table></div></figure>


<p>Testing out the Short URL to redirect to the Destination URL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -ivL https://tiny.myserverlessapp.net/t/p7ISNcxTByXhN
</span><span class='line'>*   Trying 34.226.10.0...
</span><span class='line'>* TCP_NODELAY <span class="nb">set</span>
</span><span class='line'>* Connected to tiny.myserverlessapp.net <span class="o">(</span>34.226.10.0<span class="o">)</span> port <span class="m">443</span> <span class="o">(</span><span class="c">#0)</span>
</span><span class='line'>* TLS 1.2 connection using TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
</span><span class='line'>* Server certificate: *.myserverlessapp.net
</span><span class='line'>* Server certificate: Amazon
</span><span class='line'>* Server certificate: Amazon Root CA 1
</span><span class='line'>* Server certificate: Starfield Services Root Certificate Authority - G2
</span><span class='line'>&gt; GET /t/p7ISNcxTByXhN HTTP/1.1
</span><span class='line'>&gt; Host: tiny.myserverlessapp.net
</span><span class='line'>&gt; User-Agent: curl/7.54.0
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt;
</span><span class='line'>&lt; HTTP/1.1 <span class="m">301</span> Moved Permanently
</span><span class='line'>HTTP/1.1 <span class="m">301</span> Moved Permanently
</span><span class='line'>&lt; Date: Tue, <span class="m">29</span> Nov <span class="m">2018</span> 00:05:02 GMT
</span><span class='line'>Date: Tue, <span class="m">29</span> Nov <span class="m">2018</span> 00:05:02 GMT
</span><span class='line'>&lt; Content-Type: application/json
</span><span class='line'>Content-Type: application/json
</span><span class='line'>&lt; Content-Length: 77
</span><span class='line'>Content-Length: 77
</span><span class='line'>&lt; Connection: keep-alive
</span><span class='line'>Connection: keep-alive
</span><span class='line'>&lt; x-amzn-RequestId: f79048c8-cb56-41e8-b21d-b45fac47453a
</span><span class='line'>x-amzn-RequestId: f79048c8-cb56-41e8-b21d-b45fac47453a
</span><span class='line'>&lt; x-amz-apigw-id: <span class="nv">OeKPHH7_DoEFdjg</span><span class="o">=</span>
</span><span class='line'>x-amz-apigw-id: <span class="nv">OeKPHH7_DoEFdjg</span><span class="o">=</span>
</span><span class='line'>&lt; Location: https://www.google.com/search?q<span class="o">=</span>helloworld
</span><span class='line'>Location: https://www.google.com/search?q<span class="o">=</span>helloworld
</span></code></pre></td></tr></table></div></figure>


<p>At this moment our API is open to the world, which is probably not the best as everyone will be able to Shorten URL&rsquo;s. You can check out <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-setup-api-key-with-console.html">Set Up API Keys Using the API Gateway Console</a> documentation on how to secure your application by utilizing a api key which can be included in your request headers when Shortening URLs.</p>

<p>For a bit of housekeeping, you can implement TTL on DynamoDB so that old items expire, which can help you to refrain your dynamodb table from growing into large amounts of storage, you can have a look at a post on <a href="https://blog.ruanbekker.com/blog/2017/11/22/delete-old-items-with-amazons-dynamodb-ttl-feature/">Delete Old Items with Amazons DynamoDB TTL Feature</a> to implement that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Flask Tutorial Series: Create a Hello World App]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/11/27/python-flask-tutorial-series-create-a-hello-world-app-p1/"/>
    <updated>2018-11-27T08:36:20-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/11/27/python-flask-tutorial-series-create-a-hello-world-app-p1</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/python-flask.png" alt="" /></p>

<p>This is post 1 of the <a href="http://blog.ruanbekker.com/blog/categories/flask-tutorial/">Python Flask Tutorial Series</a></p>

<h2>What is Python Flask</h2>

<p>Flask is a Micro Web Framework which is written in Python and is based on the Werkzeug Toolkit and the Jinja2 Template Engine.</p>

<p>Flask is super lightweight, and you import the modules as you need them, from some research some say that Flask is more designed for smaller applications whereas Django is designed for your larger applications.</p>

<p>a Good read on the [Differences and Performance Comparison]. With that being said, if you are planning with scale I am pretty sure that Flask can handle big applications, but it probably depends what your application is doing. More <a href="https://www.reddit.com/r/Python/comments/2jja20/is_flask_good_enough_to_develop_large_applications/">Detailed Discussion</a> on Reddit.</p>

<h2>Hello World in Python Flask</h2>

<p>In this post we will be creating a &ldquo;Hello, World&rdquo; application to demonstrate how easy it is to run a Flask Appliation.</p>

<p>The only requirement you need to run this app, would be to to have <code>python</code> and <code>pip</code> installed so that we can install the <code>Flask</code> package which is needed.</p>

<h2>Creating your Traditional Hello World App</h2>

<p>We will install flask globally, but will write up a <a href="https://sysadmins.co.za/python-flask-series-environment-setup-p3/">future post</a> on how to setup a virtual environment for you application. Install the flask package:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pip install flask
</span></code></pre></td></tr></table></div></figure>


<p>The code for the Hello World Flask Application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;Hello, World!&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">5000</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Save the above code as <code>app.py</code> and then run the application as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">python</span> <span class="n">app</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Debug</span> <span class="n">mode</span><span class="p">:</span> <span class="n">on</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Running</span> <span class="n">on</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span><span class="p">:</span><span class="mi">5000</span><span class="o">/</span> <span class="p">(</span><span class="n">Press</span> <span class="n">CTRL</span><span class="o">+</span><span class="n">C</span> <span class="n">to</span> <span class="n">quit</span><span class="p">)</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Restarting</span> <span class="k">with</span> <span class="n">stat</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Debugger</span> <span class="ow">is</span> <span class="n">active</span><span class="err">!</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Debugger</span> <span class="n">PIN</span><span class="p">:</span> <span class="mi">282</span><span class="o">-</span><span class="mi">492</span><span class="o">-</span><span class="mi">812</span>
</span></code></pre></td></tr></table></div></figure>


<h2>It&rsquo;s Running What Now?</h2>

<p>We can see that our application is running on 127.0.0.1 and listening on port: 5000, if you point your browser to this URL, you will be returned with: Hello, World!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -i -XGET http://127.0.0.1:5000/
</span><span class='line'>HTTP/1.0 <span class="m">200</span> OK
</span><span class='line'>Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Content-Length: 13
</span><span class='line'>Server: Werkzeug/0.12.1 Python/2.7.12
</span><span class='line'>Date: Thu, <span class="m">27</span> Nov <span class="m">2018</span> 13:51:15 GMT
</span><span class='line'>
</span><span class='line'>Hello, World!
</span></code></pre></td></tr></table></div></figure>


<h2>Explaining the Application Code</h2>

<ul>
<li>First, we imported the <code>Flask</code> class from the flask module, using: <code>from flask import Flask</code></li>
<li>Then we instantiate our application from the Flask class: <code>app = Flask(__name__)</code> using our module&rsquo;s name as a parameter, where our app object will use this to resolve resources. We are using <code>__name__</code> , which links our module to our app object.</li>
<li>Next up we have the <code>@app.route('/')</code> decorator. Flask uses decorators for URL Routing.</li>
<li>Below our decorator, we have a <code>view function</code>, this function will be executed when the <code>/</code> route gets matched, in this case returning <code>Hello, World!</code></li>
<li>The last line starts our server, and from this example it runs locally on <code>127.0.0.1</code> on port: <code>5000</code> and <code>debug is enabled</code>, so any error details will be logged directly in the browser. This is only recommended for test/dev and not for production as you can make your service vulnerable for hackers.</li>
</ul>


<h2>Let&rsquo;s Extend our Hello World App</h2>

<p>We would like to add the route &lsquo;/movie&rsquo; which will return a random movie name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;Hello, World!&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/movie&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">movie</span><span class="p">():</span>
</span><span class='line'>    <span class="n">movies</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;godfather&#39;</span><span class="p">,</span> <span class="s">&#39;deadpool&#39;</span><span class="p">,</span> <span class="s">&#39;toy story&#39;</span><span class="p">,</span> <span class="s">&#39;top gun&#39;</span><span class="p">,</span> <span class="s">&#39;forrest gump&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">movies</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">5000</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Making a GET Request on the &lsquo;/movie&rsquo; route:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XGET http://127.0.0.1/movie
</span><span class='line'>forrest gump
</span></code></pre></td></tr></table></div></figure>


<p>This was just a basic example and will be covering more topics in detail at a further stage.</p>

<p>Next up, setting up our Python Environment, with <a href="https://blog.ruanbekker.com/blog/2018/12/09/python-flask-tutorial-series-setup-a-python-virtual-environment-p2/">Virtual Environment (virtualenv)</a></p>

<h2>Related Content</h2>

<p>All posts related to this tutorial series will be listed under <a href="http://blog.ruanbekker.com/blog/categories/flask-tutorial/">Python Flask Tutorial Series</a> tag.</p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Python Flask: Tutorial Series]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/11/27/introduction-to-python-flask-tutorial-series/"/>
    <updated>2018-11-27T08:28:33-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/11/27/introduction-to-python-flask-tutorial-series</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/python-flask.png" alt="" /></p>

<p>This post is the index for all the posts that will be covered in our Python Flask Tutorial Series:</p>

<h2>What will be covered</h2>

<p>This is intended for people starting out with Python Flask and the basics will be covered on using Flask so that you can get familliar with the framework.</p>

<p>The following will be covered:</p>

<ul>
<li>Hello World Basic App</li>
<li>Routing in Flask</li>
<li>Jinja Templating</li>
<li>Static Files</li>
<li>etc</li>
</ul>


<p>More will be posted</p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Relayhost With Postfix to Send Mail via Sendgrid]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/11/23/setup-a-relayhost-with-postfix-to-send-mail-via-sendgrid/"/>
    <updated>2018-11-23T07:40:49-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/11/23/setup-a-relayhost-with-postfix-to-send-mail-via-sendgrid</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/sendgrid-logo.png" alt="" /></p>

<p>In this post we will setup Postfix to Relay Mail through SendGrid and we will also configure the authentication as SendGrid is not an open relay, but you can obtain credentials by signing up with the for a free account to obtain your username and password which will use to relay mail through them.</p>

<h2>Access Control on Postfix</h2>

<p>For this demonstration we can make use of the mynetworks configuration to specify the cidr of the source which we want to allow clients to be able to relay from. This is a acceptable way of controlling which source addresses you would like to authorize to relay mail via your smtp relay server.</p>

<h2>Sendgrid</h2>

<p>Sendgrid offers 100 free outbound emails per day, sign up with them via <a href="https://sendgrid.com/free/">sendgrid.com/free</a>, create a API Key and save your credentials in a safe place.</p>

<p>You first need to verify your account by sending a mail using their API, but it&rsquo;s step by step so won&rsquo;t take more than 2 minutes to complete.</p>

<h2>Setup Postifx</h2>

<p>I will be using ubuntu to setup postfix and configure postfix to specify sendgrid as the relayhost and also configure the authentication for the destination server in question:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt install postfix libsasl2-modules -y
</span></code></pre></td></tr></table></div></figure>


<p>Configure postfix to relay all outbound mail via sendgrid, enable sasl auth, tls, relayhost etc via <code>/etc/postfix/main.cf</code>. The settings that needs to be set/configured:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">smtp_sasl_auth_enable</span> <span class="o">=</span> yes
</span><span class='line'><span class="nv">smtp_sasl_password_maps</span> <span class="o">=</span> <span class="nb">hash</span>:/etc/postfix/sasl_passwd
</span><span class='line'><span class="nv">smtp_sasl_security_options</span> <span class="o">=</span> noanonymous
</span><span class='line'><span class="nv">smtp_sasl_tls_security_options</span> <span class="o">=</span> noanonymous
</span><span class='line'><span class="nv">smtp_tls_security_level</span> <span class="o">=</span> encrypt
</span><span class='line'><span class="nv">header_size_limit</span> <span class="o">=</span> 4096000
</span><span class='line'><span class="nv">relayhost</span> <span class="o">=</span> <span class="o">[</span>smtp.sendgrid.net<span class="o">]</span>:587
</span><span class='line'><span class="nv">mynetworks</span> <span class="o">=</span> /etc/postfix/mynetworks
</span></code></pre></td></tr></table></div></figure>


<p>Create the <code>/etc/postfix/mynetworks</code> file where the whitelisted source addresses will be specified. In our case the loopback address and the class c subnet 10.0.1.0 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>127.0.0.1/32
</span><span class='line'>10.0.1.0/24
</span></code></pre></td></tr></table></div></figure>


<p>Create the credential file where the credentials for the sendgrid service will be stored, in my case it will be in <code>/etc/postfix/sasl_passwd</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>smtp.sendgrid.net<span class="o">]</span>:587 your_username:your_password
</span></code></pre></td></tr></table></div></figure>


<p>Apply permissions and update postfix hashtables on the file in question:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>chmod <span class="m">600</span> /etc/postfix/sasl_passwd
</span><span class='line'><span class="nv">$ </span>postmap /etc/postfix/sasl_passwd
</span></code></pre></td></tr></table></div></figure>


<p>Enable and Start the Service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>systemctl <span class="nb">enable </span>postfix
</span><span class='line'><span class="nv">$ </span>systemctl restart postfix
</span></code></pre></td></tr></table></div></figure>


<h2>Send a Test Mail</h2>

<p>From the server you can test your mail delivery by sending a mail:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;the body of the mail&quot;</span> <span class="p">|</span> mail -r user@authenticated-domain.com -s <span class="s2">&quot;my subject&quot;</span> recipient-mail@mydomain.com
</span></code></pre></td></tr></table></div></figure>


<p>or using telnet for a remote system:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>telnet smtp-server.ip 25
</span><span class='line'>helo admin
</span><span class='line'>mail from: me@mydomain.com
</span><span class='line'>rcpt to: recipient-main@mydomain.com
</span><span class='line'>DATA
</span><span class='line'>Subject: This is a <span class="nb">test</span>
</span><span class='line'>From: James John &lt;me@mydomain.com&gt;
</span><span class='line'>To: Peter Smith &lt;recipient-mail@mydomain.com&gt;
</span><span class='line'>
</span><span class='line'>ctrl + <span class="o">]</span>
</span><span class='line'>q
</span></code></pre></td></tr></table></div></figure>


<p>You can monitor <code>/var/log/maillog</code> to see log messages of your email.</p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Golang Environment on Ubuntu]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/11/22/setup-a-golang-environment-on-ubuntu/"/>
    <updated>2018-11-22T17:09:29-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/11/22/setup-a-golang-environment-on-ubuntu</id>
    <content type="html"><![CDATA[<p>In this post I will demonstrate how to setup a golang environment on Ubuntu.</p>

<h2>Get the sources:</h2>

<p>Get the latest stable release golang tarball from <a href="https://golang.org/dl/">https://golang.org/dl/</a> and download to the directory path of choice, and extract the archive:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /tmp
</span><span class='line'><span class="nv">$ </span>wget https://dl.google.com/go/go1.11.2.linux-amd64.tar.gz
</span><span class='line'><span class="nv">$ </span>tar -xf go1.11.2.linux-amd64.tar.gz
</span></code></pre></td></tr></table></div></figure>


<p>Once the archive is extracted, set root permissions and move it to the path where your other executable binaries reside:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo chown -R root:root ./go
</span><span class='line'><span class="nv">$ </span>sudo mv go /usr/local/
</span></code></pre></td></tr></table></div></figure>


<p>Cleanup the downloaded archive:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rm -rf go1.*.tar.gz
</span></code></pre></td></tr></table></div></figure>


<h2>Path Variables:</h2>

<p>Adjust your path variables in your <code>~/.profile</code> and append the following:</p>

<figure class='code'><figcaption><span>~/.profile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">GOPATH</span><span class="o">=</span><span class="nv">$HOME</span>/go
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/local/go/bin:<span class="nv">$GOPATH</span>/bin
</span></code></pre></td></tr></table></div></figure>


<p>Source your profile, or open a new tab:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">source</span> ~/.profile
</span></code></pre></td></tr></table></div></figure>


<p>Test if you can return the version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go version
</span><span class='line'>go version go1.11.2 linux/amd64
</span></code></pre></td></tr></table></div></figure>


<h2>Create a Golang Application</h2>

<p>Create a simple golang app that prints a string to stdout:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/
</span><span class='line'><span class="nv">$ </span>mkdir -p go/src/hello
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>go/src/hello
</span><span class='line'><span class="nv">$ </span>vim app.go
</span></code></pre></td></tr></table></div></figure>


<p>Add the following golang code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Hello!\n&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Build the binary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go build
</span></code></pre></td></tr></table></div></figure>


<p>Run it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./app
</span><span class='line'>Hello!
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang: Building a Basic Web Server in Go]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/11/21/golang-building-a-basic-web-server-in-go/"/>
    <updated>2018-11-21T00:57:54-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/11/21/golang-building-a-basic-web-server-in-go</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/golang-web-server.png" alt="" /></p>

<p>Continuing with our <a href="https://blog.ruanbekker.com/blog/categories/golang-tutorial/">#golang-tutorial</a> blog series, in this post we will setup a Basic HTTP Server in Go.</p>

<h2>Our Web Server:</h2>

<p>Our Web Server will respond on 2 Request Paths:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- / -&gt; returns "Hello, Wolrd!"
</span><span class='line'>- /cheers -&gt; returns "Goodbye!"</span></code></pre></td></tr></table></div></figure>


<h2>Application Code:</h2>

<p>If you have not setup your golang environment, you can do so by visiting <a href="https://medium.com/@AkyunaAkish/setting-up-a-golang-development-environment-mac-os-x-d58e5a7ea24f">@AkyunaAkish&rsquo;s Post on Setting up a Golang Development Enviornment on MacOSX</a>.</p>

<p>Create the <code>server.go</code> or any filename of your choice. Note: I created 2 ways of returning the content of http response for demonstration</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;io&quot;</span>
</span><span class='line'>        <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">hello</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Content-Type&quot;</span><span class="p">,</span> <span class="s">&quot;text/plain; charset=utf-8&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;Hello, World!&quot;</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;hello function handler was executed&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">goodbye</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Content-Type&quot;</span><span class="p">,</span> <span class="s">&quot;text/plain; charset=utf-8&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">io</span><span class="p">.</span><span class="nx">WriteString</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;Cheers!&quot;</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;goodbye function handler was executed&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">hello</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/cheers&quot;</span><span class="p">,</span> <span class="nx">goodbye</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:8000&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Explanation of what we are doing:</p>

<ul>
<li>Programs runs in the package <code>main</code></li>
<li>We are importing 3 packages: <code>io</code>, <code>log</code> and <code>net/http</code></li>
<li>HandleFunc registers the handler function for the given pattern in the DefaultServeMux, in this case the HandleFunc registers <code>/</code> to the <code>hello</code> handler function and <code>/cheers</code> to the goodbye handler function.</li>
<li>In our 2 handler functions, we have two arguments:

<ul>
<li>The first one is <code>http.ResponseWriter</code> and its corresponding response stream, which is actually an interface type.</li>
<li>The second is <code>*http.Request</code> and its corresponding HTTP request. <code>io.WriteString</code> is a helper function to let you write a string into a given writable stream, this is named the <code>io.Writer</code> interface in Golang.</li>
</ul>
</li>
<li>ListenAndServe starts an HTTP server with a given address and handler. The handler is usually nil, which means to use DefaultServeMux</li>
<li>The logging is not a requirement, but used it for debugging/verbosity</li>
</ul>


<h2>Running our Server:</h2>

<p>Run the http server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go run server.go
</span></code></pre></td></tr></table></div></figure>


<h2>Client Side Requests:</h2>

<p>Run client side http requests to your golang web server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -i http://localhost:8000/
</span><span class='line'>HTTP/1.1 <span class="m">200</span> OK
</span><span class='line'>Content-Type: text/plain<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Date: Wed, <span class="m">21</span> Nov <span class="m">2018</span> 21:33:42 GMT
</span><span class='line'>Content-Length: 14
</span><span class='line'>
</span><span class='line'>Hello, World!
</span></code></pre></td></tr></table></div></figure>


<p>And another request to <code>/cheers</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -i http://localhost:8000/cheers
</span><span class='line'>HTTP/1.1 <span class="m">200</span> OK
</span><span class='line'>Content-Type: text/plain<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Date: Wed, <span class="m">21</span> Nov <span class="m">2018</span> 21:29:46 GMT
</span><span class='line'>Content-Length: 8
</span><span class='line'>
</span><span class='line'>Cheers!
</span></code></pre></td></tr></table></div></figure>


<h2>Server Side Output:</h2>

<p>As we used the log package, the logging gets returned to stdout:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go run server.go
</span><span class='line'>2018/11/21 23:29:36 hello <span class="k">function</span> handler was executed
</span><span class='line'>2018/11/21 23:29:46 goodbye <span class="k">function</span> handler was executed
</span></code></pre></td></tr></table></div></figure>


<h2>Resources:</h2>

<ul>
<li><a href="https://golang.org/doc/code.html">https://golang.org/doc/code.html</a></li>
<li><a href="https://gowalker.org/net/http#HandleFunc">https://gowalker.org/net/http#HandleFunc</a></li>
<li><a href="https://stackoverflow.com/questions/37863374/whats-the-difference-between-responsewriter-write-and-io-writestring">https://stackoverflow.com/questions/37863374/whats-the-difference-between-responsewriter-write-and-io-writestring</a></li>
<li><a href="https://www.alexedwards.net/blog/golang-response-snippets">https://www.alexedwards.net/blog/golang-response-snippets</a></li>
</ul>


<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create Read Only Users in MongoDB]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/11/12/create-read-only-users-in-mongodb/"/>
    <updated>2018-11-12T17:02:53-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/11/12/create-read-only-users-in-mongodb</id>
    <content type="html"><![CDATA[<p>In this post I will demonstrate how to setup 2 read only users in MongoDB, one user that will have access to one MongoDB Database and all the Collections, and one user with access to one MongoDB Database and only one Collection.</p>

<script id="mNCC" language="javascript">
    medianet_width = "728";
    medianet_height = "90";
    medianet_crid = "218284798";
    medianet_versionId = "3111299";
  </script>


<script src="//contextual.media.net/nmedianet.js?cid=8CUD78FSV"></script>


<h2>First Method: Creating and Assigning the User</h2>

<p>The first method we will create the user and assign it the read permissions that he needs. In this case read only access to the mytest db.</p>

<p>First logon to mongodb and switch to the admin database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mongo -u dbadmin -p --authenticationDatabase admin
</span><span class='line'>&gt; use admin
</span><span class='line'>switched to db admin
</span></code></pre></td></tr></table></div></figure>


<p>Now list the dbs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; show dbs
</span><span class='line'>admin       0.000GB
</span><span class='line'>mytest      0.000GB
</span></code></pre></td></tr></table></div></figure>


<p>List the collections and read the data from it for demonstration purposes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; use mytest
</span><span class='line'>&gt; show collections<span class="p">;</span>
</span><span class='line'>col1
</span><span class='line'>col2
</span><span class='line'>&gt; db.col1.find<span class="o">()</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;5be3d377b54849bb738e3b6b&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;ruan&quot;</span> <span class="o">}</span>
</span><span class='line'>&gt; db.col2.find<span class="o">()</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;5be3d383b54849bb738e3b6c&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;stefan&quot;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now create the user collectionreader that will have access to read all the collections from the database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>&gt; db.createUser<span class="o">({</span>user: <span class="s2">&quot;collectionreader&quot;</span>, <span class="nb">pwd</span>: <span class="s2">&quot;secretpass&quot;</span>, roles: <span class="o">[{</span>role: <span class="s2">&quot;read&quot;</span>, db: <span class="s2">&quot;mytest&quot;</span><span class="o">}]})</span>
</span><span class='line'>Successfully added user: <span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;user&quot;</span> : <span class="s2">&quot;collectionreader&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;roles&quot;</span> : <span class="o">[</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="s2">&quot;role&quot;</span> : <span class="s2">&quot;read&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;db&quot;</span> : <span class="s2">&quot;mytest&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Exit and log out and log in with the new user to test the permissions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mongo -u collectionreader -p --authenticationDatabase mytest
</span><span class='line'>&gt; use mytest
</span><span class='line'>switched to db mytest
</span><span class='line'>
</span><span class='line'>&gt; show collections
</span><span class='line'>col1
</span><span class='line'>col2
</span><span class='line'>
</span><span class='line'>&gt; db.col1.find<span class="o">()</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;5be3d377b54849bb738e3b6b&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;ruan&quot;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now lets try to write to a collection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.col1.insert<span class="o">({</span><span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;james&quot;</span><span class="o">})</span>
</span><span class='line'>WriteResult<span class="o">({</span>
</span><span class='line'>  <span class="s2">&quot;writeError&quot;</span> : <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;code&quot;</span> : 13,
</span><span class='line'>    <span class="s2">&quot;errmsg&quot;</span> : <span class="s2">&quot;not authorized on mytest to execute command { insert: \&quot;col1\&quot;, documents: [ { _id: ObjectId(&#39;5be3d6c0492818b2c966d61a&#39;), name: \&quot;james\&quot; } ], ordered: true }&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we can see it works as expected.</p>

<h2>Second Method: Create Roles and Assign Users to the Roles</h2>

<p>In the second method, we will create the roles then assign the users to the roles. And in this scenario, we will only grant a user <code>reader</code> access to one collection on a database. Login with the admin user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mongo -u dbadmin -p --authenticationDatabase admin
</span><span class='line'>&gt; use admin
</span></code></pre></td></tr></table></div></figure>


<p>First create the read only role <code>myReadOnlyRole</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.createRole<span class="o">({</span> role: <span class="s2">&quot;myReadOnlyRole&quot;</span>, privileges: <span class="o">[{</span> resource: <span class="o">{</span> db: <span class="s2">&quot;mytest&quot;</span>, collection: <span class="s2">&quot;col2&quot;</span><span class="o">}</span>, actions: <span class="o">[</span><span class="s2">&quot;find&quot;</span><span class="o">]}]</span>, roles: <span class="o">[]})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now create the user and assign it to the role:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.createUser<span class="o">({</span> user: <span class="s2">&quot;reader&quot;</span>, <span class="nb">pwd</span>: <span class="s2">&quot;secretpass&quot;</span>, roles: <span class="o">[{</span> role: <span class="s2">&quot;myReadOnlyRole&quot;</span>, db: <span class="s2">&quot;mytest&quot;</span><span class="o">}]})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similarly, if we had an existing user that we also would like to add to that role, we can do that by doing this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.grantRolesToUser<span class="o">(</span><span class="s2">&quot;anotheruser&quot;</span>, <span class="o">[</span> <span class="o">{</span> role: <span class="s2">&quot;myReadOnlyRole&quot;</span>, db: <span class="s2">&quot;mytest&quot;</span> <span class="o">}</span> <span class="o">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Logout and login with the reader user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mongo -u reader -p --authenticationDatabase mytest
</span><span class='line'>&gt; use mytest
</span></code></pre></td></tr></table></div></figure>


<p>Now try to list the collections:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; show collections
</span><span class='line'>2018-11-08T07:42:39.907+0100 E QUERY    <span class="o">[</span>thread1<span class="o">]</span> Error: listCollections failed: <span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;ok&quot;</span> : 0,
</span><span class='line'>  <span class="s2">&quot;errmsg&quot;</span> : <span class="s2">&quot;not authorized on mytest to execute command { listCollections: 1.0, filter: {} }&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;code&quot;</span> : 13,
</span><span class='line'>  <span class="s2">&quot;codeName&quot;</span> : <span class="s2">&quot;Unauthorized&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we only have read (find) access on col2, lets try to read data from collection col1:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.col1.find<span class="o">()</span>
</span><span class='line'>Error: error: <span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;ok&quot;</span> : 0,
</span><span class='line'>  <span class="s2">&quot;errmsg&quot;</span> : <span class="s2">&quot;not authorized on mytest to execute command { find: \&quot;col1\&quot;, filter: {} }&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;code&quot;</span> : 13,
</span><span class='line'>  <span class="s2">&quot;codeName&quot;</span> : <span class="s2">&quot;Unauthorized&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally try to read data from the collection we are allowed to read from:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.col2.find<span class="o">()</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;5be3d383b54849bb738e3b6c&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;stefan&quot;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And also making sure we cant write to that collection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.col2.insert<span class="o">({</span><span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;frank&quot;</span><span class="o">})</span>
</span><span class='line'>WriteResult<span class="o">({</span>
</span><span class='line'>  <span class="s2">&quot;writeError&quot;</span> : <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;code&quot;</span> : 13,
</span><span class='line'>    <span class="s2">&quot;errmsg&quot;</span> : <span class="s2">&quot;not authorized on mytest to execute command { insert: \&quot;col2\&quot;, documents: [ { _id: ObjectId(&#39;5be3db1530a86d900c361465&#39;), name: \&quot;frank\&quot; } ], ordered: true }&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Assigning Permissions to Roles</h2>

<p>If you later on want to add more permissions to the role, this can easily be done by using <code>grantPrivilegesToRole()</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mongo -u dbadmin -p --authenticationDatabase admin
</span><span class='line'>&gt; use mytest
</span><span class='line'>&gt; db.grantPrivilegesToRole<span class="o">(</span><span class="s2">&quot;myReadOnlyRole&quot;</span>, <span class="o">[{</span> resource: <span class="o">{</span> db : <span class="s2">&quot;mytest&quot;</span>, collection : <span class="s2">&quot;col1&quot;</span><span class="o">}</span>, actions : <span class="o">[</span><span class="s2">&quot;find&quot;</span><span class="o">]</span> <span class="o">}])</span>
</span></code></pre></td></tr></table></div></figure>


<p>To view the permissions for that role:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.getRole<span class="o">(</span><span class="s2">&quot;myReadOnlyRole&quot;</span>, <span class="o">{</span> showPrivileges : <span class="nb">true</span> <span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Resources:</h2>

<ul>
<li><a href="https://docs.mongodb.com/manual/tutorial/create-users/">https://docs.mongodb.com/manual/tutorial/create-users/</a></li>
<li><a href="https://docs.mongodb.com/manual/core/collection-level-access-control/">https://docs.mongodb.com/manual/core/collection-level-access-control/</a></li>
<li><a href="https://docs.mongodb.com/manual/reference/privilege-actions/">https://docs.mongodb.com/manual/reference/privilege-actions/</a></li>
<li><a href="https://sanderknape.com/2018/07/manage-custom-secrets-aws-secrets-manager/">https://sanderknape.com/2018/07/manage-custom-secrets-aws-secrets-manager/</a></li>
<li><a href="https://blog.mlab.com/2016/07/mongodb-tips-tricks-collection-level-access-control/">https://blog.mlab.com/2016/07/mongodb-tips-tricks-collection-level-access-control/</a></li>
<li><a href="https://studio3t.com/knowledge-base/articles/mongodb-users-roles-explained-part-1/">https://studio3t.com/knowledge-base/articles/mongodb-users-roles-explained-part-1/</a></li>
</ul>


<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IAM Policy to Allow Team Wide and User Level Permissions on AWS Secrets Manager]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/11/12/iam-policy-to-allow-team-wide-and-user-level-permissions-on-aws-secrets-manager/"/>
    <updated>2018-11-12T16:32:24-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/11/12/iam-policy-to-allow-team-wide-and-user-level-permissions-on-aws-secrets-manager</id>
    <content type="html"><![CDATA[<p>In this post we will simulate a scenario where a team would like to have access to create secrets under a team path name like <code>/security-team/prod/*</code> and <code>/security-team/dev/*</code> and allow all the users from that team to be able to write and read secrets from that path. Then have individual users create and read secrets from their own isolated path: <code>/security-team/personal/aws-username/*</code> so they can create their personal secrets.</p>

<script id="mNCC" language="javascript">
    medianet_width = "728";
    medianet_height = "90";
    medianet_crid = "218284798";
    medianet_versionId = "3111299";
  </script>


<script src="//contextual.media.net/nmedianet.js?cid=8CUD78FSV"></script>


<h2>Our Scenario:</h2>

<ul>
<li>Create IAM Policy</li>
<li>Create 2 IAM Users: <code>jack.smith</code> and <code>steve.adams</code></li>
<li>Create IAM Group, Associate IAM Policy to the Group</li>
<li>Attach 2 Users to the Group</li>
</ul>


<p>The IAM Policy:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "Version": "2012-10-17",
</span><span class='line'>    "Statement": [
</span><span class='line'>        {
</span><span class='line'>            "Sid": "Stmt1541597166491",
</span><span class='line'>            "Action": [
</span><span class='line'>                "secretsmanager:CreateSecret",
</span><span class='line'>                "secretsmanager:DeleteSecret",
</span><span class='line'>                "secretsmanager:DescribeSecret",
</span><span class='line'>                "secretsmanager:GetRandomPassword",
</span><span class='line'>                "secretsmanager:GetSecretValue",
</span><span class='line'>                "secretsmanager:ListSecretVersionIds",
</span><span class='line'>                "secretsmanager:ListSecrets",
</span><span class='line'>                "secretsmanager:PutSecretValue",
</span><span class='line'>                "secretsmanager:TagResource",
</span><span class='line'>                "secretsmanager:UpdateSecret"
</span><span class='line'>            ],
</span><span class='line'>            "Effect": "Allow",
</span><span class='line'>            "Resource": [
</span><span class='line'>                "arn:aws:secretsmanager:eu-west-1:123456789012:secret:/security-team/prod/*",
</span><span class='line'>                "arn:aws:secretsmanager:eu-west-1:123456789012:secret:/security-team/dev/*",
</span><span class='line'>                "arn:aws:secretsmanager:eu-west-1:123456789012:secret:/security-team/personal/${aws:username}/*"
</span><span class='line'>            ]
</span><span class='line'>        }
</span><span class='line'>    ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Either configure the access keys and secret keys into the credential provider using aws cli, or for this demonstration I will use them inside the code. But never hardcode your credentials.</p>

<h2>Create Secrets with Secrets Manager in AWS using Python Boto3</h2>

<p>Instantiate user1 and user2:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">jack</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">aws_access_key_id</span><span class="o">=</span><span class="s">&#39;ya&#39;</span><span class="p">,</span> <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="s">&#39;xx&#39;</span><span class="p">,</span> <span class="n">region_name</span><span class="o">=</span><span class="s">&#39;eu-west-1&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s">&#39;secretsmanager&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">steve</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">aws_access_key_id</span><span class="o">=</span><span class="s">&#39;yb&#39;</span><span class="p">,</span> <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="s">&#39;xx&#39;</span><span class="p">,</span> <span class="n">region_name</span><span class="o">=</span><span class="s">&#39;eu-west-1&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s">&#39;secretsmanager&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create a team wide secret with jack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">jack</span><span class="o">.</span><span class="n">create_secret</span><span class="p">(</span><span class="n">Name</span><span class="o">=</span><span class="s">&#39;/security-team/prod/app1/username&#39;</span><span class="p">,</span> <span class="n">SecretString</span><span class="o">=</span><span class="s">&#39;appreader&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;ResponseMetadata&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;RetryAttempts&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;HTTPStatusCode&#39;</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="s">&#39;RequestId&#39;</span><span class="p">:</span> <span class="s">&#39;x&#39;</span><span class="p">,</span> <span class="s">&#39;HTTPHeaders&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;date&#39;</span><span class="p">:</span> <span class="s">&#39;Thu, 08 Nov 2018 07:50:35 GMT&#39;</span><span class="p">,</span> <span class="s">&#39;x-amzn-requestid&#39;</span><span class="p">:</span> <span class="s">&#39;x&#39;</span><span class="p">,</span> <span class="s">&#39;content-length&#39;</span><span class="p">:</span> <span class="s">&#39;193&#39;</span><span class="p">,</span> <span class="s">&#39;content-type&#39;</span><span class="p">:</span> <span class="s">&#39;application/x-amz-json-1.1&#39;</span><span class="p">,</span> <span class="s">&#39;connection&#39;</span><span class="p">:</span> <span class="s">&#39;keep-alive&#39;</span><span class="p">}},</span> <span class="s">u&#39;VersionId&#39;</span><span class="p">:</span> <span class="s">u&#39;x&#39;</span><span class="p">,</span> <span class="s">u&#39;Name&#39;</span><span class="p">:</span> <span class="s">u&#39;/security-team/prod/app1/username&#39;</span><span class="p">,</span> <span class="s">u&#39;ARN&#39;</span><span class="p">:</span> <span class="s">u&#39;arn:aws:secretsmanager:eu-west-1:123456789012:secret:/security-team/prod/app1/username-12ABC00&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let jack and steve try to read the secret:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">jack</span><span class="o">.</span><span class="n">get_secret_value</span><span class="p">(</span><span class="n">SecretId</span><span class="o">=</span><span class="s">&#39;/security-team/prod/app1/username&#39;</span><span class="p">)[</span><span class="s">&#39;SecretString&#39;</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;appreader&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">steve</span><span class="o">.</span><span class="n">get_secret_value</span><span class="p">(</span><span class="n">SecretId</span><span class="o">=</span><span class="s">&#39;/security-team/prod/app1/username&#39;</span><span class="p">)[</span><span class="s">&#39;SecretString&#39;</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;appreader&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let jack create a personal secret, let him read it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">jack</span><span class="o">.</span><span class="n">create_secret</span><span class="p">(</span><span class="n">Name</span><span class="o">=</span><span class="s">&#39;/security-team/personal/jack.smith/svc1/password&#39;</span><span class="p">,</span> <span class="n">SecretString</span><span class="o">=</span><span class="s">&#39;secret&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">jack</span><span class="o">.</span><span class="n">get_secret_value</span><span class="p">(</span><span class="n">SecretId</span><span class="o">=</span><span class="s">&#39;/security-team/personal/jack.smith/svc1/password&#39;</span><span class="p">)[</span><span class="s">&#39;SecretString&#39;</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;secret&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let steve try to read the secret and you will see that access is denied:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">steve</span><span class="o">.</span><span class="n">get_secret_value</span><span class="p">(</span><span class="n">SecretId</span><span class="o">=</span><span class="s">&#39;/security-team/personal/jack.smith/username&#39;</span><span class="p">)[</span><span class="s">&#39;SecretString&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>    <span class="k">raise</span> <span class="n">error_class</span><span class="p">(</span><span class="n">parsed_response</span><span class="p">,</span> <span class="n">operation_name</span><span class="p">)</span>
</span><span class='line'><span class="n">botocore</span><span class="o">.</span><span class="n">exceptions</span><span class="o">.</span><span class="n">ClientError</span><span class="p">:</span> <span class="n">An</span> <span class="n">error</span> <span class="n">occurred</span> <span class="p">(</span><span class="n">AccessDeniedException</span><span class="p">)</span> <span class="n">when</span> <span class="n">calling</span> <span class="n">the</span> <span class="n">GetSecretValue</span> <span class="n">operation</span><span class="p">:</span> <span class="n">User</span><span class="p">:</span> <span class="n">arn</span><span class="p">:</span><span class="n">aws</span><span class="p">:</span><span class="n">iam</span><span class="p">::</span><span class="mi">123456789012</span><span class="p">:</span><span class="n">user</span><span class="o">/</span><span class="n">steve</span><span class="o">.</span><span class="n">adams</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">authorized</span> <span class="n">to</span> <span class="n">perform</span><span class="p">:</span> <span class="n">secretsmanager</span><span class="p">:</span><span class="n">GetSecretValue</span> <span class="n">on</span> <span class="n">resource</span><span class="p">:</span> <span class="n">arn</span><span class="p">:</span><span class="n">aws</span><span class="p">:</span><span class="n">secretsmanager</span><span class="p">:</span><span class="n">eu</span><span class="o">-</span><span class="n">west</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="mi">123456789012</span><span class="p">:</span><span class="n">secret</span><span class="p">:</span><span class="o">/</span><span class="n">security</span><span class="o">-</span><span class="n">team</span><span class="o">/</span><span class="n">personal</span><span class="o">/</span><span class="n">jack</span><span class="o">.</span><span class="n">smith</span><span class="o">/</span><span class="n">svc1</span><span class="o">/</span><span class="n">password</span><span class="o">-</span><span class="n">a1234b</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thats it for this post</p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Application Performance Metrics on Python Flask With Elastic APM on Kibana and Elasticsearch]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/11/11/get-application-performance-metrics-on-python-flask-with-elastic-apm-on-kibana-and-elasticsearch/"/>
    <updated>2018-11-11T13:09:18-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/11/11/get-application-performance-metrics-on-python-flask-with-elastic-apm-on-kibana-and-elasticsearch</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-banner.png" alt="" /></p>

<p>In this post we will setup a Python Flask Application which includes the APM Agent which will collect metrics, that gets pushed to the APM Server. If you have not setup the Elastic Stack with / or APM Server, you <a href="https://blog.ruanbekker.com/blog/2018/11/11/setup-apm-server-on-ubuntu-for-your-elastic-stack-to-get-insights-in-your-application-performance-metrics/">can follow this post</a> to setup the needed.</p>

<p>Then we will make a bunch of HTTP Requests to our Application and will go through the metrics per request type.</p>

<h2>Application Metrics</h2>

<p>Our Application will have the following Request Paths:</p>

<ul>
<li><code>/</code> - Returns static text</li>
<li><code>/delay</code> - random delays to simulate increased response latencies</li>
<li><code>/upstream</code> - get data from a upstream provider, if statements to provide dummy 200, 404 and 502 reponses to visualize</li>
<li><code>/5xx</code> - request path that will raise an exception so that we can see the error via apm</li>
<li><code>/sql-write</code> - inserts 5 rows into a sqlite database</li>
<li><code>/sql-read</code> - executes a select all from the database</li>
<li><code>/sql-group</code> - sql query to group all the cities and count them</li>
</ul>


<p>This is just simple request paths to demonstrate the metrics via APM (Application Performance Monitoring) on Kibana.</p>

<h2>Install Flask and APM Agent</h2>

<p>Create a virtual environment and install the dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt install python python-setuptools -y
</span><span class='line'><span class="nv">$ </span>easy_install pip
</span><span class='line'><span class="nv">$ </span>pip install virtualenv
</span><span class='line'><span class="nv">$ </span>pip install elastic-apm<span class="o">[</span>flask<span class="o">]</span>
</span><span class='line'><span class="nv">$ </span>pip install flask
</span></code></pre></td></tr></table></div></figure>


<p>For more info on <a href="https://www.elastic.co/guide/en/apm/agent/python/current/getting-started.html">APM Configuration</a>.</p>

<h2>Instrument a Bare Bones Python Flask app with APM:</h2>

<p>A Barebones app with APM Configured will look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">jsonify</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">elasticapm.contrib.flask</span> <span class="kn">import</span> <span class="n">ElasticAPM</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">elasticapm.handlers.logging</span> <span class="kn">import</span> <span class="n">LoggingHandler</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'><span class="n">apm</span> <span class="o">=</span> <span class="n">ElasticAPM</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">server_url</span><span class="o">=</span><span class="s">&#39;http://localhost:8200&#39;</span><span class="p">,</span> <span class="n">service_name</span><span class="o">=</span><span class="s">&#39;flask-app-1&#39;</span><span class="p">,</span> <span class="n">logging</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span><span class="s">&quot;message&quot;</span><span class="p">:</span> <span class="s">&quot;response ok&quot;</span><span class="p">}),</span> <span class="mi">200</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">80</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will provide metrics on the <code>/</code> request path. In order to trace transaction ids from the metrics, we need to configure the index on Kibana. To do this, head over to Kibana, Management, Index Patterns, Add Index Pattern, <code>apm*</code>, select <code>@timestamp</code> as the time filter field name.</p>

<p>This will allow you to see the data when tracing the transaction id&rsquo;s via the Discover UI.</p>

<h2>Create the Python Flask App</h2>

<p>Create the Flask App with the request paths as mentioned in the beginning:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sqlite3</span><span class="o">,</span> <span class="nn">requests</span><span class="o">,</span> <span class="nn">time</span><span class="o">,</span> <span class="nn">logging</span><span class="o">,</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">jsonify</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">elasticapm.contrib.flask</span> <span class="kn">import</span> <span class="n">ElasticAPM</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">elasticapm.handlers.logging</span> <span class="kn">import</span> <span class="n">LoggingHandler</span>
</span><span class='line'>
</span><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;ruan&#39;</span><span class="p">,</span> <span class="s">&#39;stefan&#39;</span><span class="p">,</span> <span class="s">&#39;philip&#39;</span><span class="p">,</span> <span class="s">&#39;norman&#39;</span><span class="p">,</span> <span class="s">&#39;frank&#39;</span><span class="p">,</span> <span class="s">&#39;pete&#39;</span><span class="p">,</span> <span class="s">&#39;johnny&#39;</span><span class="p">,</span> <span class="s">&#39;peter&#39;</span><span class="p">,</span> <span class="s">&#39;adam&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">cities</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;cape town&#39;</span><span class="p">,</span> <span class="s">&#39;johannesburg&#39;</span><span class="p">,</span> <span class="s">&#39;pretoria&#39;</span><span class="p">,</span> <span class="s">&#39;dublin&#39;</span><span class="p">,</span> <span class="s">&#39;kroonstad&#39;</span><span class="p">,</span> <span class="s">&#39;bloemfontein&#39;</span><span class="p">,</span> <span class="s">&#39;port elizabeth&#39;</span><span class="p">,</span> <span class="s">&#39;auckland&#39;</span><span class="p">,</span> <span class="s">&#39;sydney&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">lastnames</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;smith&#39;</span><span class="p">,</span> <span class="s">&#39;bekker&#39;</span><span class="p">,</span> <span class="s">&#39;admams&#39;</span><span class="p">,</span> <span class="s">&#39;phillips&#39;</span><span class="p">,</span> <span class="s">&#39;james&#39;</span><span class="p">,</span> <span class="s">&#39;adamson&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&#39;database.db&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;CREATE TABLE IF NOT EXISTS people (name STRING, age INTEGER, surname STRING, city STRING)&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c">#sqlquery_write = conn.execute(&#39;INSERT INTO people VALUES(&quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;)&#39;.format(random.choice(names), random.randint(18,40), random.choice(lastnames), random.choice(cities)))</span>
</span><span class='line'><span class="n">seconds</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.002</span><span class="p">,</span> <span class="mf">0.003</span><span class="p">,</span> <span class="mf">0.004</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.009</span><span class="p">,</span> <span class="mf">0.015</span><span class="p">,</span> <span class="mf">0.02</span><span class="p">,</span> <span class="mf">0.225</span><span class="p">,</span> <span class="mf">0.009</span><span class="p">,</span> <span class="mf">0.001</span><span class="p">,</span> <span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.030</span><span class="p">,</span> <span class="mf">0.018</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'><span class="n">apm</span> <span class="o">=</span> <span class="n">ElasticAPM</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">server_url</span><span class="o">=</span><span class="s">&#39;http://localhost:8200&#39;</span><span class="p">,</span> <span class="n">service_name</span><span class="o">=</span><span class="s">&#39;my-app-01&#39;</span><span class="p">,</span> <span class="n">logging</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span><span class="s">&quot;message&quot;</span><span class="p">:</span> <span class="s">&quot;response ok&quot;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/delay&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">delay</span><span class="p">():</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">seconds</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span><span class="s">&quot;message&quot;</span><span class="p">:</span> <span class="s">&quot;response delay&quot;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/upstream&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">upstream</span><span class="p">():</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;https://api.ruanbekker.com/people&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span><span class='line'>    <span class="n">r</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;country&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">r</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;country&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="s">&#39;italy&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;Italalia!&#39;</span><span class="p">,</span> <span class="mi">200</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">r</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;country&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="s">&#39;canada&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;Canada!&#39;</span><span class="p">,</span> <span class="mi">502</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;Not Found&#39;</span><span class="p">,</span> <span class="mi">404</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/5xx&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">fail_with_5xx</span><span class="p">():</span>
</span><span class='line'>    <span class="n">value</span> <span class="o">=</span> <span class="s">&#39;a&#39;</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span><span class="s">&quot;message&quot;</span><span class="p">:</span> <span class="n">value</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/sql-write&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">sqlw</span><span class="p">():</span>
</span><span class='line'>    <span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&#39;database.db&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;INSERT INTO people VALUES(&quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;)&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">names</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span><span class="mi">40</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">lastnames</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">cities</span><span class="p">)))</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;INSERT INTO people VALUES(&quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;)&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">names</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span><span class="mi">40</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">lastnames</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">cities</span><span class="p">)))</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;INSERT INTO people VALUES(&quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;)&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">names</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span><span class="mi">40</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">lastnames</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">cities</span><span class="p">)))</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;INSERT INTO people VALUES(&quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;)&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">names</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span><span class="mi">40</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">lastnames</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">cities</span><span class="p">)))</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;INSERT INTO people VALUES(&quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;)&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">names</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span><span class="mi">40</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">lastnames</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">cities</span><span class="p">)))</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;ok&#39;</span><span class="p">,</span> <span class="mi">200</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/sql-read&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">sqlr</span><span class="p">():</span>
</span><span class='line'>    <span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&#39;database.db&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">row_factory</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">Row</span>
</span><span class='line'>    <span class="n">cur</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span><span class='line'>    <span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;select * from people&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rows</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">fetchall</span><span class="p">()</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;ok&#39;</span><span class="p">,</span> <span class="mi">200</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/sql-group&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">slqg</span><span class="p">():</span>
</span><span class='line'>    <span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&#39;database.db&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">row_factory</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">Row</span>
</span><span class='line'>    <span class="n">cur</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span><span class='line'>    <span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;select count(*) as num, city from people group by city&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rows</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">fetchall</span><span class="p">()</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;ok&#39;</span><span class="p">,</span> <span class="mi">200</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">80</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python app.py
</span></code></pre></td></tr></table></div></figure>


<p>At this point, we wont have any data on APM as we need to make requests to our application. Let&rsquo;s make 10 HTTP GET Requests on the <code>/</code> Request Path:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ count</span><span class="o">=</span><span class="m">0</span> <span class="o">&amp;&amp;</span> <span class="k">while</span> <span class="o">[</span> <span class="nv">$count</span> -lt <span class="m">10</span> <span class="o">]</span><span class="p">;</span> <span class="k">do</span> curl http://application-routable-address:80/<span class="p">;</span> sleep 1<span class="p">;</span> <span class="nv">count</span><span class="o">=</span><span class="k">$((</span>count+1<span class="k">))</span><span class="p">;</span> <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Visualize the Root Request Path</h2>

<p>Head over to Kibana, Select APM and you will see something similar like below when selecting the timepicker to 15 minutes at the right top corner. This page will give you the overview of all your configured applications and the average response times over the selected time, transactions per minute, errors per minute etc:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-home-root.png" alt="" /></p>

<p>When you select your application, you will find the graphs on you response times and requests per minute, also a breakdown per request path:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-app-view-1.png" alt="" /></p>

<p>When selecting the request path, in this case <code>GET /</code>, you will find a breakdown of metrics only for that request and also the response time distribution for that request path, if you select frame from the response time distribution, it will filter the focus to that specific transaction.</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-req-view-1.png" alt="" /></p>

<p>When you scroll a bit down to the Transaction Sample section, you will find data about the request, response, system etc:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-app-transaction-1.png" alt="" /></p>

<p>From the Transaction Sample, you can select the View Transaction in Discover button, which will trace that transaction id on the Discover UI:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-transaction-disc-1.png" alt="" /></p>

<p>Increasing the http curl clients running simultaneously from different servers and increasing the time for 15 minutes to have more metrics will result in the screenshot below, notice the 6ms response time can easily be traced selecting it in the response time distribution, then discovering it in the UI, which will give you the raw data from that request:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-req-view-2.png" alt="" /></p>

<h2>Viewing Application Errors in APM</h2>

<p>Make a couple of requests to <code>/5xx</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl http://application-routable-endpoint:80/5xx
</span></code></pre></td></tr></table></div></figure>


<p>Navigate to the app, select Errors, then you will see the exception details that was returned. Here we can see that in our code we tried to concatenate integers with strings:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-error-1.png" alt="" /></p>

<p>Furthermore we can select that error and it will provide us a direct view on where in our code the error gets generated:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-error-details-1.png" alt="" /></p>

<p>Pretty cool right?! You can also further select the library frames, which will take you to the lower level code that raised the exception. If this errors can be drilled down via the discover ui, to group by source address etc.</p>

<h2>Simulate Response Latencies:</h2>

<p>Make a couple of requests to the <code>/delay</code> request path, and you should see the increased response times from earlier:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-app-view-delay.png" alt="" /></p>

<h2>Requests where Database Calls are Executed</h2>

<p>The while loop to call random request paths:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">count</span><span class="o">=</span><span class="m">0</span> <span class="o">&amp;&amp;</span> <span class="k">while</span> <span class="o">[</span> <span class="nv">$count</span> -lt <span class="m">1000</span> <span class="o">]</span><span class="p">;</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-za-server&quot;</span> -i http://x.x.x.x/sql-write<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-za-server&quot;</span> -i http://x.x.x.x/sql-read<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-za-server&quot;</span> -i http://x.x.x.x/sql-group<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-eu-server&quot;</span> -i http://x.x.x.x/sql-write<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-us-server&quot;</span> -i http://x.x.x.x/sql-write<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-za-server&quot;</span> -i http://x.x.x.x/sql-write<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-za-server&quot;</span> -i http://x.x.x.x/sql-write<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-za-server&quot;</span> -i http://x.x.x.x/sql-read<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-eu-server&quot;</span> -i http://x.x.x.x/sql-group<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-us-server&quot;</span> -i http://x.x.x.x/sql-group<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-za-server&quot;</span> -i http://x.x.x.x/sql-write<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-za-server&quot;</span> -i http://x.x.x.x/sql-write<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-eu-server&quot;</span> -i http://x.x.x.x/sql-group<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-za-server&quot;</span> -i http://x.x.x.x/sql-group<span class="p">;</span>
</span><span class='line'>  <span class="nv">count</span><span class="o">=</span><span class="k">$((</span>count+1<span class="k">))</span><span class="p">;</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we look at our applications performance monitoring overview, we can see the writes provide more latencies as the group by&rsquo;s:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-view-1.png" alt="" /></p>

<p>The <code>/sql-write</code> request overview:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlwrite-1.png" alt="" /></p>

<p>When selecting a transaction sample, we can see the timeline of each database call:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlwrite-1-details.png" alt="" /></p>

<p>When looking at the <code>/sql-group</code> request overview, we can see that the response times increasing overtime, as more data is written to the database, it takes longer to read and group all the data from the database:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlgroup-1.png" alt="" /></p>

<p>The transaction details shows the timeline of the database query from that request:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlgroup-1-details.png" alt="" /></p>

<p>When you select the database select query on the timeline view, it will take you to the exact database query that was executed:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlgroup-1-span.png" alt="" /></p>

<p>When we include a database call with a external request to a remote http endpoint, we will see something like:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlread-ext.png" alt="" /></p>

<h2>Viewing 4xx and 5xx Response Codes</h2>

<p>From the application code we are returning 2xx, 4xx, and 5xx response codes for this demonstration to visualize them:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-app-response-codes.png" alt="" /></p>

<h2>Configuring more Applications</h2>

<p>Once more apps are configured, and they start serving traffic, they will start appearing on the APM UI as below:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-apps.png" alt="" /></p>

<p>APM is available for other languages as well and provides a getting started snippets from the APM UI. For more information on APM, have a look at their <a href="https://www.elastic.co/solutions/apm">Documentation</a></p>

<p>Hope this was useful.</p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup APM Server on Ubuntu for Your Elastic Stack to Get Insights in Your Application Performance Metrics]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/11/11/setup-apm-server-on-ubuntu-for-your-elastic-stack-to-get-insights-in-your-application-performance-metrics/"/>
    <updated>2018-11-11T12:31:43-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/11/11/setup-apm-server-on-ubuntu-for-your-elastic-stack-to-get-insights-in-your-application-performance-metrics</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-overview.png" alt="" /></p>

<p>In this post we will setup the Elastic Stack with Elasticsearc, Kibana and APM . The APM Server (Application Performance Metrics) which will receive the metric data from the application side, and is then pushed to apm indices on Elasticsearch.</p>

<p>This will be a 2 post blog on APM:</p>

<ul>
<li>1) <a href="">Setup the Elastic Stack with Elasticsearch, Kibana and APM Server</a> - this post</li>
<li>2) <a href="https://blog.ruanbekker.com/blog/2018/11/11/get-application-performance-metrics-on-python-flask-with-elastic-apm-on-kibana-and-elasticsearch/">Setup a Python Flask application with the APM Agent</a></li>
</ul>


<h2>What is APM</h2>

<p>From their website APM is described as: &ldquo;Elastic APM is an application performance monitoring system built on the Elastic Stack. It allows you to monitor software services and applications in real time, collecting detailed performance information on response time for incoming requests, database queries, calls to caches, external HTTP requests, etc.&rdquo;</p>

<p>You get metrics like average, p99 response times etc, and also have insights when errors occur, it even allows you to look at the stacktrace, poinpointing on which line of your code it ocurred etc.</p>

<ul>
<li><a href="https://www.elastic.co/solutions/apm">More Info</a></li>
</ul>


<h2>APM Agents:</h2>

<p>The APM Agents will be loaded inside your application, application metrics will then be pushed to the APM Server (which we will setup in this post), which then gets pushed to Elasticsearch and is then consumed by Kibana.</p>

<p>At the time of writing, the APM Agents are supported in the following languages:</p>

<ul>
<li>Node.js</li>
<li>Django</li>
<li>Flask</li>
<li>Ruby on Rails</li>
<li>Rack</li>
<li>RUM</li>
<li>Golang</li>
<li>Java</li>
</ul>


<h2>Setup the Elastic Stack</h2>

<p>One thing to note, every service in your Elastic Stack needs to be running on the same version. In this post we will setup Elasticsearch, APM and Kibana all running on version <code>6.4.3</code></p>

<h2>Setup the Pre-Requirements:</h2>

<p>Elasticsearch depends on Java, se we will go ahead and setup the repositories:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch <span class="p">|</span> sudo apt-key add -
</span><span class='line'><span class="nv">$ </span>apt-get install apt-transport-https -y
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;deb https://artifacts.elastic.co/packages/6.x/apt stable main&quot;</span> <span class="p">|</span> sudo tee -a /etc/apt/sources.list.d/elastic-6.x.list
</span><span class='line'><span class="nv">$ </span>apt update <span class="o">&amp;&amp;</span> apt upgrade -y
</span><span class='line'><span class="nv">$ </span>apt install openjdk-8-jdk -y
</span></code></pre></td></tr></table></div></figure>


<p>Verify that Java is installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>java -version
</span><span class='line'>openjdk version <span class="s2">&quot;1.8.0_181&quot;</span>
</span><span class='line'>OpenJDK Runtime Environment <span class="o">(</span>build 1.8.0_181-8u181-b13-1ubuntu0.16.04.1-b13<span class="o">)</span>
</span><span class='line'>OpenJDK 64-Bit Server VM <span class="o">(</span>build 25.181-b13, mixed mode<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Setup Kernel parameters for Elasticsearch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sysctl -w vm.max_map_count<span class="o">=</span>262144
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;vm.max_map_count=262144&#39;</span> &gt;&gt; /etc/sysctl.conf
</span></code></pre></td></tr></table></div></figure>


<h2>Setup Elasticsearch:</h2>

<p>Search for the latest versions (when already having elasticsearch, either upgrade or install apm on the same version as elasticsearch/kibana):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt-cache madison elasticsearch
</span><span class='line'>elasticsearch <span class="p">|</span>      6.4.3 <span class="p">|</span> https://artifacts.elastic.co/packages/6.x/apt stable/main amd64 Packages
</span><span class='line'>elasticsearch <span class="p">|</span>      6.4.2 <span class="p">|</span> https://artifacts.elastic.co/packages/6.x/apt stable/main amd64 Packages
</span></code></pre></td></tr></table></div></figure>


<p>Install Elasticsearch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt-get install <span class="nv">elasticsearch</span><span class="o">=</span>6.4.3 -y
</span></code></pre></td></tr></table></div></figure>


<p>Configure Elasticsearch to lock the memory on startup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -i <span class="s1">&#39;s/#bootstrap.memory_lock: true/bootstrap.memory_lock: true/g&#39;</span> /etc/elasticsearch/elasticsearch.yml
</span></code></pre></td></tr></table></div></figure>


<p>Enable Elasticsearch on startup and start the service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>systemctl daemon-reload
</span><span class='line'><span class="nv">$ </span>systemctl <span class="nb">enable </span>elasticsearch.service
</span><span class='line'><span class="nv">$ </span>systemctl start elasticsearch.service
</span></code></pre></td></tr></table></div></figure>


<h2>Install Kibana:</h2>

<p>Install Kibana version <code>6.4.3</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt install <span class="nv">kibana</span><span class="o">=</span>6.4.3 -y
</span></code></pre></td></tr></table></div></figure>


<p>For demonstration, I will configure Kibana to listen on all interfaces on port <code>5601</code>, but note this will enable access for everyone, you can [follow this blogpost] to setup a Nginx Reverse Proxy to upstream to localhost on port 5601.</p>

<p>Since this demonstration we are using Elasticsearch locally, so if you have a remote cluster, configuration can be applied where needed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -i <span class="s1">&#39;s/#server.host: &quot;localhost&quot;/server.host: &quot;0.0.0.0&quot;/&#39;</span>g /etc/kibana/kibana.yml
</span><span class='line'><span class="nv">$ </span>sed -i <span class="s1">&#39;s/#elasticsearch.url: &quot;http:\/\/localhost:9200&quot;/elasticsearch.url: &quot;http:\/\/localhost:9200&quot;/&#39;</span>g /etc/kibana/kibana.yml
</span></code></pre></td></tr></table></div></figure>


<p>Enable Kibana on startup and start the service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>systemctl <span class="nb">enable </span>kibana.service
</span><span class='line'><span class="nv">$ </span>systemctl restart kibana.service
</span></code></pre></td></tr></table></div></figure>


<h2>Install the APM Server</h2>

<p>Install APM Server version <code>6.4.3</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt install apm-server<span class="o">=</span>6.4.3 -y
</span></code></pre></td></tr></table></div></figure>


<p>Since we have everything locally, the configuration can be kept as is, but if you need to configure the elasticsearch or kibana hosts, it can be done via <code>/etc/apm-server/apm-server.yml</code></p>

<p>Then once Kibana and Elasticsearch is started, load the mapping templates, enable and start the service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apm-server setup
</span><span class='line'><span class="nv">$ </span>systemctl <span class="nb">enable </span>apm-server.service
</span><span class='line'><span class="nv">$ </span>systemctl restart apm-server.service
</span></code></pre></td></tr></table></div></figure>


<p>Ensure all the services are running with <code>netstat -tulpn</code> and port <code>9200</code>, <code>9300</code>, <code>5601</code> and <code>8300</code> should be listening</p>

<h2>Access Your Elastic Stack</h2>

<p>Access Kibana on your routable endpoint on port <code>5601</code> and you should see something like this:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-startup.png" alt="" /></p>

<h2>Configuring a Application to push metrics to APM</h2>

<p>In the <a href="https://blog.ruanbekker.com/blog/2018/11/11/get-application-performance-metrics-on-python-flask-with-elastic-apm-on-kibana-and-elasticsearch/">next post</a> I will setup a Python Flask Application on APM</p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Benchmark Website Response Times With CURL]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/31/benchmark-website-response-times-with-curl/"/>
    <updated>2018-10-31T02:17:12-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/31/benchmark-website-response-times-with-curl</id>
    <content type="html"><![CDATA[<p>We can gain insights when making requests to websites such as:</p>

<ul>
<li>Lookup time</li>
<li>Connect time</li>
<li>AppCon time</li>
<li>Redirect time</li>
<li>PreXfer time</li>
<li>StartXfer time</li>
</ul>


<p>We will make a request to a website that has caching enabled, the first hit will be a MISS:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -s -w <span class="s1">&#39;\nLookup time:\t%{time_namelookup}\nConnect time:\t%{time_connect}\nAppCon time:\t%{time_appconnect}\nRedirect time:\t%{time_redirect}\nPreXfer time:\t%{time_pretransfer}\nStartXfer time:\t%{time_starttransfer}\n\nTotal time:\t%{time_total}\n&#39;</span> -o /dev/null obj-cache.cloud.ruanbekker.com/elasticsearch-2.jpg
</span><span class='line'>
</span><span class='line'>Lookup <span class="nb">time</span>:  1.524465
</span><span class='line'>Connect <span class="nb">time</span>: 1.707561
</span><span class='line'>AppCon <span class="nb">time</span>:  0.000000
</span><span class='line'>Redirect <span class="nb">time</span>:    0.000000
</span><span class='line'>PreXfer <span class="nb">time</span>: 1.707656
</span><span class='line'>StartXfer <span class="nb">time</span>:   1.897660
</span><span class='line'>
</span><span class='line'>Total <span class="nb">time</span>:   2.451824
</span></code></pre></td></tr></table></div></figure>


<p>The next hit will be a HIT:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -s -w <span class="s1">&#39;\nLookup time:\t%{time_namelookup}\nConnect time:\t%{time_connect}\nAppCon time:\t%{time_appconnect}\nRedirect time:\t%{time_redirect}\nPreXfer time:\t%{time_pretransfer}\nStartXfer time:\t%{time_starttransfer}\n\nTotal time:\t%{time_total}\n&#39;</span> -o /dev/null obj-cache.cloud.ruanbekker.com/elasticsearch-2.jpg
</span><span class='line'>
</span><span class='line'>Lookup <span class="nb">time</span>:  0.004441
</span><span class='line'>Connect <span class="nb">time</span>: 0.188065
</span><span class='line'>AppCon <span class="nb">time</span>:  0.000000
</span><span class='line'>Redirect <span class="nb">time</span>:    0.000000
</span><span class='line'>PreXfer <span class="nb">time</span>: 0.188160
</span><span class='line'>StartXfer <span class="nb">time</span>:   0.381344
</span><span class='line'>
</span><span class='line'>Total <span class="nb">time</span>:   0.926420
</span></code></pre></td></tr></table></div></figure>


<p>Similar Posts:</p>

<ul>
<li><a href="https://blog.josephscott.org/2011/10/14/timing-details-with-curl/">https://blog.josephscott.org/2011/10/14/timing-details-with-curl/</a></li>
<li><a href="https://ops.tips/gists/measuring-http-response-times-curl/">https://ops.tips/gists/measuring-http-response-times-curl/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Bootstrap Nodes With Python Using Ansible]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/31/how-to-bootstrap-nodes-with-python-using-ansible/"/>
    <updated>2018-10-31T01:48:15-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/31/how-to-bootstrap-nodes-with-python-using-ansible</id>
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/rbekker/image/upload/v1531083331/ansible_tojf8l.png" alt="" /></p>

<p>As Ansible depends on Python, therefore we can bootstrap our nodes with Python using a Ansible Playbook</p>

<h2>Inventory</h2>

<p>The nodes we want to bootstrap:</p>

<figure class='code'><figcaption><span>inventory.ini</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>new<span class="o">]</span>
</span><span class='line'>node-1
</span><span class='line'>node-2
</span><span class='line'>node-3
</span><span class='line'>
</span><span class='line'><span class="o">[</span>new:vars<span class="o">]</span>
</span><span class='line'><span class="nv">ansible_python_interpreter</span><span class="o">=</span>/usr/bin/python3
</span></code></pre></td></tr></table></div></figure>


<h2>Playbook</h2>

<p>Our playbook with what we want to do:</p>

<figure class='code'><figcaption><span>bootstrap-python.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">all</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gather_facts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">False</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">install python</span>
</span><span class='line'>    <span class="l-Scalar-Plain">raw</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">test -e /usr/bin/python || ( apt update &amp;&amp; apt install python -y )</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy</h2>

<p>Deploy with Ansible:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ansible-playbook -i inventory.ini bootstrap-python.yml
</span><span class='line'>
</span><span class='line'>PLAY <span class="o">[</span>all<span class="o">]</span> ***********************************************************************************************************************************************************************************************
</span><span class='line'>
</span><span class='line'>TASK <span class="o">[</span>install python<span class="o">]</span> ************************************************************************************************************************************************************************************
</span><span class='line'>changed: <span class="o">[</span>node-1<span class="o">]</span>
</span><span class='line'>changed: <span class="o">[</span>node-2<span class="o">]</span>
</span><span class='line'>changed: <span class="o">[</span>node-3<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>PLAY RECAP ***********************************************************************************************************************************************************************************************
</span><span class='line'>node-1                     : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">2</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>node-2                     : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">2</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>node-3                     : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">2</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure>


<p>This is it for this post, all posts for this tutorial will be posted under <a href="http://blog.ruanbekker.com/blog/categories/ansible-tutorial">#ansible-tutorial</a></p>
]]></content>
  </entry>
  
</feed>
