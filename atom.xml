<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2021-10-11T19:18:07-04:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install Nodejs on Linux Using NVM]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/10/11/install-nodejs-on-linux-using-nvm/"/>
    <updated>2021-10-11T19:07:43-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/10/11/install-nodejs-on-linux-using-nvm</id>
    <content type="html"><![CDATA[<p>In this post we will install Nodejs using Node Version Manager (nvm), which allows you to install and use different versions of node via the command line.</p>

<p>For more information on NVM, checkout their <a href="https://github.com/nvm-sh/nvm">github repository</a></p>

<h2>Install</h2>

<p>I will be using a debian based linux distribution, so I first will be updating my package manager&rsquo;s indexes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt update
</span></code></pre></td></tr></table></div></figure>


<p>Then I will install NVM using the instructions from <a href="https://github.com/nvm-sh/nvm#installing-and-updating">their</a> repository (always ensure that you are aware what you are installing when you curl, pipe, bash):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh <span class="p">|</span> bash
</span></code></pre></td></tr></table></div></figure>


<h2>Verify</h2>

<p>You can now log out and log back in for your path to be updated, or you can follow the instructions on your terminal to source your session so that your path to nvm is updated:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">NVM_DIR</span><span class="o">=</span><span class="s2">&quot;$HOME/.nvm&quot;</span>
</span><span class='line'><span class="nv">$ </span><span class="o">[</span> -s <span class="s2">&quot;$NVM_DIR/bash_completion&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="se">\.</span> <span class="s2">&quot;$NVM_DIR/bash_completion&quot;</span>
</span><span class='line'><span class="nv">$ </span><span class="o">[</span> -s <span class="s2">&quot;$NVM_DIR/nvm.sh&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="se">\.</span> <span class="s2">&quot;$NVM_DIR/nvm.sh&quot;</span>
</span><span class='line'><span class="nv">$ </span><span class="o">[</span> -s <span class="s2">&quot;$NVM_DIR/bash_completion&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="se">\.</span> <span class="s2">&quot;$NVM_DIR/bash_completion&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you can verify if <code>nvm</code> is in your path:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">command</span> -v nvm
</span><span class='line'>nvm
</span></code></pre></td></tr></table></div></figure>


<h2>Installing a Node Version</h2>

<p>Before we install a specific version of nodejs, let&rsquo;s first look at the LTS versions from the Fermium release:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>nvm ls-remote --lts<span class="o">=</span>fermium
</span><span class='line'>       v14.15.0   <span class="o">(</span>LTS: Fermium<span class="o">)</span>
</span><span class='line'>       v14.15.1   <span class="o">(</span>LTS: Fermium<span class="o">)</span>
</span><span class='line'>       v14.15.2   <span class="o">(</span>LTS: Fermium<span class="o">)</span>
</span><span class='line'>       v14.15.3   <span class="o">(</span>LTS: Fermium<span class="o">)</span>
</span><span class='line'>       v14.15.4   <span class="o">(</span>LTS: Fermium<span class="o">)</span>
</span><span class='line'>       v14.15.5   <span class="o">(</span>LTS: Fermium<span class="o">)</span>
</span><span class='line'>       v14.16.0   <span class="o">(</span>LTS: Fermium<span class="o">)</span>
</span><span class='line'>       v14.16.1   <span class="o">(</span>LTS: Fermium<span class="o">)</span>
</span><span class='line'>       v14.17.0   <span class="o">(</span>LTS: Fermium<span class="o">)</span>
</span><span class='line'>       v14.17.1   <span class="o">(</span>LTS: Fermium<span class="o">)</span>
</span><span class='line'>       v14.17.2   <span class="o">(</span>LTS: Fermium<span class="o">)</span>
</span><span class='line'>       v14.17.3   <span class="o">(</span>LTS: Fermium<span class="o">)</span>
</span><span class='line'>       v14.17.4   <span class="o">(</span>LTS: Fermium<span class="o">)</span>
</span><span class='line'>       v14.17.5   <span class="o">(</span>LTS: Fermium<span class="o">)</span>
</span><span class='line'>       v14.17.6   <span class="o">(</span>LTS: Fermium<span class="o">)</span>
</span><span class='line'>       v14.18.0   <span class="o">(</span>Latest LTS: Fermium<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So I want to install <code>v14.8.0</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>nvm install 14.8.0
</span></code></pre></td></tr></table></div></figure>


<p>I also would like to make it my default version of node:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>nvm <span class="nb">alias </span>default node
</span><span class='line'>default -&gt; node <span class="o">(</span>-&gt; v14.8.0<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Verify Installation</h2>

<p>Now we can verify if <code>npm</code> is installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm -v
</span><span class='line'>6.14.7
</span></code></pre></td></tr></table></div></figure>


<p>as well as <code>node</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>node -v
</span><span class='line'>v14.8.0
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup TLS and Basic Authentication on Node Exporter for Prometheus]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/10/10/setup-basic-authentication-on-node-exporter-and-prometheus/"/>
    <updated>2021-10-10T16:50:17-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/10/10/setup-basic-authentication-on-node-exporter-and-prometheus</id>
    <content type="html"><![CDATA[<p>I had a public VPS server that I wanted to scrape node-exporter metrics from, but my Prometheus instance was behind a Dynamic IP address, so to allow only my prometheus instance to scrape my Node Exporter instance, was a bit difficult, since the IP keep changing and I had to update my iptables firewall rules.</p>

<p>In this tutorial I will show you how to setup TLS and Basic Authentication on Node Exporter, and how to configure prometheus to pass the auhtentication to successfully scrape the node exporter metrics endpoint.</p>

<h2>Install Node Exporter</h2>

<p>On the node-exporter host, set the environment variables for the version, user and directory path where node exporter will be installed::</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ NODE_EXPORTER_VERSION</span><span class="o">=</span><span class="s2">&quot;1.1.2&quot;</span>
</span><span class='line'><span class="nv">$ NODE_EXPORTER_USER</span><span class="o">=</span><span class="s2">&quot;node_exporter&quot;</span>
</span><span class='line'><span class="nv">$ BIN_DIRECTORY</span><span class="o">=</span><span class="s2">&quot;/usr/local/bin&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Download and place the node-exporter binary in place:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget https://github.com/prometheus/node_exporter/releases/download/v<span class="k">${</span><span class="nv">NODE_EXPORTER_VERSION</span><span class="k">}</span>/node_exporter-<span class="k">${</span><span class="nv">NODE_EXPORTER_VERSION</span><span class="k">}</span>.linux-amd64.tar.gz
</span><span class='line'><span class="nv">$ </span>tar -xf node_exporter-<span class="k">${</span><span class="nv">NODE_EXPORTER_VERSION</span><span class="k">}</span>.linux-amd64.tar.gz
</span><span class='line'><span class="nv">$ </span>cp node_exporter-<span class="k">${</span><span class="nv">NODE_EXPORTER_VERSION</span><span class="k">}</span>.linux-amd64/node_exporter <span class="k">${</span><span class="nv">BIN_DIRECTORY</span><span class="k">}</span>/
</span><span class='line'><span class="nv">$ </span>chown <span class="k">${</span><span class="nv">NODE_EXPORTER_USER</span><span class="k">}</span>:<span class="k">${</span><span class="nv">NODE_EXPORTER_USER</span><span class="k">}</span> <span class="k">${</span><span class="nv">BIN_DIRECTORY</span><span class="k">}</span>/node_exporter
</span><span class='line'><span class="nv">$ </span>rm -rf node_exporter-<span class="k">${</span><span class="nv">NODE_EXPORTER_VERSION</span><span class="k">}</span>.linux-amd64*
</span><span class='line'><span class="nv">$ </span>mkdir /etc/node-exporter
</span></code></pre></td></tr></table></div></figure>


<h2>Configuration</h2>

<p>Create a self-signed cert for node-exporter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>openssl req -new -newkey rsa:2048 -days <span class="m">365</span> -nodes -x509 -keyout node_exporter.key -out node_exporter.crt -subj <span class="s2">&quot;/C=ZA/ST=CT/L=SA/O=VPN/CN=localhost&quot;</span> -addext <span class="s2">&quot;subjectAltName = DNS:localhost&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Move the certs into the directory we created:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mv node_exporter.* /etc/node-exporter/
</span></code></pre></td></tr></table></div></figure>


<p>Install htpasswd so that we can generate a password hash with bcrypt, which will prompt you for a password that we are setting for the prometheus user::</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt install apache2-utils
</span><span class='line'><span class="nv">$ </span>htpasswd -nBC <span class="m">10</span> <span class="s2">&quot;&quot;</span> <span class="p">|</span> tr -d <span class="s1">&#39;:\n&#39;</span><span class="p">;</span> <span class="nb">echo</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now populate the config for node-exporter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /etc/node-exporter/config.yml
</span><span class='line'>tls_server_config:
</span><span class='line'>  cert_file: node_exporter.crt
</span><span class='line'>  key_file: node_exporter.key
</span><span class='line'>basic_auth_users:
</span><span class='line'>  prometheus: &lt;the-output-value-of-htpasswd&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Change the ownership of the node exporter directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>chown -R <span class="k">${</span><span class="nv">NODE_EXPORTER_USER</span><span class="k">}</span>:<span class="k">${</span><span class="nv">NODE_EXPORTER_USER</span><span class="k">}</span> /etc/node-exporter
</span></code></pre></td></tr></table></div></figure>


<p>Then create the systemd unit file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat &gt; /etc/systemd/system/node_exporter.service <span class="s">&lt;&lt; EOF</span>
</span><span class='line'><span class="s">[Unit]</span>
</span><span class='line'><span class="s">Description=Node Exporter</span>
</span><span class='line'><span class="s">Wants=network-online.target</span>
</span><span class='line'><span class="s">After=network-online.target</span>
</span><span class='line'><span class="s">StartLimitIntervalSec=500</span>
</span><span class='line'><span class="s">StartLimitBurst=5</span>
</span><span class='line'><span class="s">[Service]</span>
</span><span class='line'><span class="s">User=${NODE_EXPORTER_USER}</span>
</span><span class='line'><span class="s">Group=${NODE_EXPORTER_USER}</span>
</span><span class='line'><span class="s">Type=simple</span>
</span><span class='line'><span class="s">Restart=on-failure</span>
</span><span class='line'><span class="s">RestartSec=5s</span>
</span><span class='line'><span class="s">ExecStart=${BIN_DIRECTORY}/node_exporter --web.config=/etc/node-exporter/config.yml</span>
</span><span class='line'><span class="s">[Install]</span>
</span><span class='line'><span class="s">WantedBy=multi-user.target</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reload systemd and start node-exporter</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>systemctl daemon-reload
</span><span class='line'><span class="nv">$ </span>systemctl <span class="nb">enable </span>node_exporter
</span><span class='line'><span class="nv">$ </span>systemctl restart node_exporter
</span></code></pre></td></tr></table></div></figure>


<h2>Prometheus Config</h2>

<p>Copy the <code>/etc/node-exporter/node_exporter.crt</code> from the node-exporter node to prometheus-node, then in the <code>/etc/prometheus/prometheus.yml</code> config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">scrape_configs</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">job_name</span><span class="p-Indicator">:</span> <span class="s">&#39;node-exporter-tls&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">scheme</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https</span>
</span><span class='line'>    <span class="l-Scalar-Plain">basic_auth</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">prometheus</span>
</span><span class='line'>      <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;the-plain-text-password&gt;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">tls_config</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">ca_file</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">node_exporter.crt</span>
</span><span class='line'>      <span class="l-Scalar-Plain">insecure_skip_verify</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>    <span class="l-Scalar-Plain">static_configs</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">targets</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&#39;node-exporter-ip:9100&#39;</span><span class="p-Indicator">]</span>
</span><span class='line'>      <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">instance</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">friendly-instance-name</span>
</span></code></pre></td></tr></table></div></figure>


<p>After you restart prometheus, you should see the metrics in prometheus' tsdb of the node exporter target that we are scraping.</p>

<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Concourse CI v7.4 on Ubuntu Linux]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/10/07/install-concourse-ci-v7-dot-4-on-ubuntu-linux/"/>
    <updated>2021-10-07T19:27:05-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/10/07/install-concourse-ci-v7-dot-4-on-ubuntu-linux</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/gzkdu9.jpg?nocache=1511644783495" alt="" /></p>

<p>Concourse is a Pipeline Based Continious Integration system written in Go</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://concourse-ci.org/">https://concourse-ci.org/</a></li>
<li><a href="https://github.com/concourse/concourse">https://github.com/concourse/concourse</a></li>
<li><a href="https://github.com/starkandwayne/concourse-tutorial">https://github.com/starkandwayne/concourse-tutorial</a></li>
</ul>


<h2>Older Version</h2>

<p>An older version is available:</p>

<ul>
<li><a href="https://blog.ruanbekker.com/blog/2021/04/06/install-concourse-ci-v6-on-ubuntu-20-dot-04/">Install Concourse CI V6 on Ubuntu 20.04</a></li>
<li><a href="https://blog.ruanbekker.com/blog/2017/11/07/setup-a-concourse-ci-server-on-ubuntu-16/">Setup Concourse CI v4 on Ubuntu 16.04</a></li>
</ul>


<h2>What is Concourse CI:</h2>

<p>Concourse CI is a Continious Integration Platform. Concourse enables you to construct pipelines with a yaml configuration that can consist out of 3 core concepts, tasks, resources, and jobs that compose them. For more information about this have a look at their <a href="https://concourse.ci/concepts.html">docs</a></p>

<h2>What will we be doing today</h2>

<p>We will setup a Concourse CI Server v6.7.6 (web and worker) on Ubuntu 20.04 and run the traditional <code>Hello, World</code> pipeline</p>

<h2>Setup the Server:</h2>

<p>Concourse needs <code>PostgresSQL</code> server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt update <span class="o">&amp;&amp;</span> apt upgrade -y
</span><span class='line'><span class="nv">$ </span>apt install postgresql postgresql-contrib -y
</span><span class='line'><span class="nv">$ </span>systemctl <span class="nb">enable </span>postgresql
</span></code></pre></td></tr></table></div></figure>


<p>Create the Database and User for Concourse on Postgres:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo -u postgres createuser concourse
</span><span class='line'><span class="nv">$ </span>sudo -u postgres createdb --owner<span class="o">=</span>concourse atc
</span></code></pre></td></tr></table></div></figure>


<p>Download the Concourse Binary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">CONCOURSE_VERSION</span><span class="o">=</span>7.4.0
</span><span class='line'><span class="nv">$ </span>wget https://github.com/concourse/concourse/releases/download/v<span class="k">${</span><span class="nv">CONCOURSE_VERSION</span><span class="k">}</span>/concourse-<span class="k">${</span><span class="nv">CONCOURSE_VERSION</span><span class="k">}</span>-linux-amd64.tgz
</span><span class='line'><span class="nv">$ </span>tar -xvf concourse-<span class="k">${</span><span class="nv">CONCOURSE_VERSION</span><span class="k">}</span>-linux-amd64.tgz -C /usr/local/
</span><span class='line'><span class="nv">$ </span>rm -rf concourse-*-linux-amd64.tgz
</span></code></pre></td></tr></table></div></figure>


<p>Create the Encryption Keys:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir /etc/concourse
</span><span class='line'><span class="nv">$ </span>ssh-keygen -t rsa -q -N <span class="s1">&#39;&#39;</span> -f /etc/concourse/tsa_host_key -m pem
</span><span class='line'><span class="nv">$ </span>ssh-keygen -t rsa -q -N <span class="s1">&#39;&#39;</span> -f /etc/concourse/worker_key -m pem
</span><span class='line'><span class="nv">$ </span>ssh-keygen -t rsa -q -N <span class="s1">&#39;&#39;</span> -f /etc/concourse/session_signing_key -m pem
</span><span class='line'><span class="nv">$ </span>cp /etc/concourse/worker_key.pub /etc/concourse/authorized_worker_keys -m pem
</span></code></pre></td></tr></table></div></figure>


<p>Set the IP Address:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">IP_ADDRESS</span><span class="o">=</span><span class="k">$(</span>ifconfig <span class="k">$(</span>route -n <span class="p">|</span> grep <span class="s1">&#39;0.0.0.0&#39;</span> <span class="p">|</span> head -1 <span class="p">|</span> rev <span class="p">|</span> awk <span class="s1">&#39;{print $1}&#39;</span> <span class="p">|</span> rev<span class="k">)</span> <span class="p">|</span> grep -w <span class="s1">&#39;inet&#39;</span> <span class="p">|</span> awk <span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Concourse Web Process Configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat &gt; /etc/concourse/web_environment <span class="s">&lt;&lt; EOF</span>
</span><span class='line'><span class="s">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/concourse/bin</span>
</span><span class='line'><span class="s">CONCOURSE_ADD_LOCAL_USER=ruan:$(openssl rand -hex 14)</span>
</span><span class='line'><span class="s">CONCOURSE_SESSION_SIGNING_KEY=/etc/concourse/session_signing_key</span>
</span><span class='line'><span class="s">CONCOURSE_TSA_HOST_KEY=/etc/concourse/tsa_host_key</span>
</span><span class='line'><span class="s">CONCOURSE_TSA_AUTHORIZED_KEYS=/etc/concourse/authorized_worker_keys</span>
</span><span class='line'><span class="s">CONCOURSE_POSTGRES_HOST=127.0.0.1</span>
</span><span class='line'><span class="s">CONCOURSE_POSTGRES_USER=concourse</span>
</span><span class='line'><span class="s">CONCOURSE_POSTGRES_PASSWORD=concourse</span>
</span><span class='line'><span class="s">CONCOURSE_POSTGRES_DATABASE=atc</span>
</span><span class='line'><span class="s">CONCOURSE_MAIN_TEAM_LOCAL_USER=ruan</span>
</span><span class='line'><span class="s">CONCOURSE_EXTERNAL_URL=http://$IP_ADDRESS:8080</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>Concourse Worker Process Configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat &gt; /etc/concourse/worker_environment <span class="s">&lt;&lt; EOF</span>
</span><span class='line'><span class="s">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/concourse/bin</span>
</span><span class='line'><span class="s">CONCOURSE_WORK_DIR=/var/lib/concourse</span>
</span><span class='line'><span class="s">CONCOURSE_TSA_HOST=127.0.0.1:2222</span>
</span><span class='line'><span class="s">CONCOURSE_TSA_PUBLIC_KEY=/etc/concourse/tsa_host_key.pub</span>
</span><span class='line'><span class="s">CONCOURSE_TSA_WORKER_PRIVATE_KEY=/etc/concourse/worker_key</span>
</span><span class='line'><span class="s">CONCOURSE_GARDEN_DNS_SERVER=8.8.8.8</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create a Concourse user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir /var/lib/concourse
</span><span class='line'><span class="nv">$ </span>sudo adduser --system --group concourse
</span><span class='line'><span class="nv">$ </span>sudo chown -R concourse:concourse /etc/concourse /var/lib/concourse
</span><span class='line'><span class="nv">$ </span>sudo chmod <span class="m">600</span> /etc/concourse/*_environment
</span></code></pre></td></tr></table></div></figure>


<p>Create SystemD Unit Files, first for the Web Service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat &gt; /etc/systemd/system/concourse-web.service <span class="s">&lt;&lt; EOF</span>
</span><span class='line'><span class="s">[Unit]</span>
</span><span class='line'><span class="s">Description=Concourse CI web process (ATC and TSA)</span>
</span><span class='line'><span class="s">After=postgresql.service</span>
</span><span class='line'>
</span><span class='line'><span class="s">[Service]</span>
</span><span class='line'><span class="s">User=concourse</span>
</span><span class='line'><span class="s">Restart=on-failure</span>
</span><span class='line'><span class="s">EnvironmentFile=/etc/concourse/web_environment</span>
</span><span class='line'><span class="s">ExecStart=/usr/local/concourse/bin/concourse web</span>
</span><span class='line'>
</span><span class='line'><span class="s">[Install]</span>
</span><span class='line'><span class="s">WantedBy=multi-user.target</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then the SystemD Unit File for the Worker Service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat &gt; /etc/systemd/system/concourse-worker.service <span class="s">&lt;&lt; EOF</span>
</span><span class='line'><span class="s">[Unit]</span>
</span><span class='line'><span class="s">Description=Concourse CI worker process</span>
</span><span class='line'><span class="s">After=concourse-web.service</span>
</span><span class='line'>
</span><span class='line'><span class="s">[Service]</span>
</span><span class='line'><span class="s">User=root</span>
</span><span class='line'><span class="s">Restart=on-failure</span>
</span><span class='line'><span class="s">EnvironmentFile=/etc/concourse/worker_environment</span>
</span><span class='line'><span class="s">ExecStart=/usr/local/concourse/bin/concourse worker</span>
</span><span class='line'>
</span><span class='line'><span class="s">[Install]</span>
</span><span class='line'><span class="s">WantedBy=multi-user.target</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create a postgres password for the concourse user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /home/concourse/
</span><span class='line'><span class="nv">$ </span>sudo -u concourse psql atc
</span><span class='line'><span class="nv">atc</span><span class="o">=</span>&gt; ALTER USER concourse WITH PASSWORD <span class="s1">&#39;concourse&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">atc</span><span class="o">=</span>&gt; <span class="se">\q</span>
</span></code></pre></td></tr></table></div></figure>


<p>Start and Enable the Services:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>systemctl start concourse-web concourse-worker
</span><span class='line'><span class="nv">$ </span>systemctl <span class="nb">enable </span>concourse-web concourse-worker postgresql
</span><span class='line'><span class="nv">$ </span>systemctl status concourse-web concourse-worker
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>systemctl is-active concourse-worker concourse-web
</span><span class='line'>active
</span><span class='line'>active
</span></code></pre></td></tr></table></div></figure>


<p>The listening ports should more or less look like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>netstat -tulpn
</span><span class='line'>
</span><span class='line'>Active Internet connections <span class="o">(</span>only servers<span class="o">)</span>
</span><span class='line'>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.1:7777          0.0.0.0:*               LISTEN      4530/concourse
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.1:7788          0.0.0.0:*               LISTEN      4530/concourse
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.1:8079          0.0.0.0:*               LISTEN      4525/concourse
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:22              0.0.0.0:*               LISTEN      1283/sshd
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.1:5432          0.0.0.0:*               LISTEN      4047/postgres
</span><span class='line'>tcp6       <span class="m">0</span>      <span class="m">0</span> :::36159                :::*                    LISTEN      4525/concourse
</span><span class='line'>tcp6       <span class="m">0</span>      <span class="m">0</span> :::46829                :::*                    LISTEN      4525/concourse
</span><span class='line'>tcp6       <span class="m">0</span>      <span class="m">0</span> :::2222                 :::*                    LISTEN      4525/concourse
</span><span class='line'>tcp6       <span class="m">0</span>      <span class="m">0</span> :::8080                 :::*                    LISTEN      4525/concourse
</span><span class='line'>tcp6       <span class="m">0</span>      <span class="m">0</span> :::22                   :::*                    LISTEN      1283/sshd
</span><span class='line'>udp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:68              0.0.0.0:*                           918/dhclient
</span><span class='line'>udp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:42165           0.0.0.0:*                           4530/concourse
</span></code></pre></td></tr></table></div></figure>


<p>You can check the logs like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo journalctl -fu concourse-web
</span><span class='line'><span class="nv">$ </span>sudo journalctl -fu concourse-worker
</span></code></pre></td></tr></table></div></figure>


<p>Make a request using the API:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl http://<span class="k">${</span><span class="nv">IP_ADDRESS</span><span class="k">}</span>:8080/api/v1/info
</span><span class='line'><span class="o">{</span><span class="s2">&quot;version&quot;</span>:<span class="s2">&quot;7.4.0&quot;</span>,<span class="s2">&quot;worker_version&quot;</span>:<span class="s2">&quot;2.3&quot;</span>,<span class="s2">&quot;feature_flags&quot;</span>:<span class="o">{</span><span class="s2">&quot;across_step&quot;</span>:false,<span class="s2">&quot;build_rerun&quot;</span>:false,<span class="s2">&quot;cache_streamed_volumes&quot;</span>:false,<span class="s2">&quot;global_resources&quot;</span>:false,<span class="s2">&quot;pipeline_instances&quot;</span>:false,<span class="s2">&quot;redact_secrets&quot;</span>:false,<span class="s2">&quot;resource_causality&quot;</span>:false<span class="o">}</span>,<span class="s2">&quot;external_url&quot;</span>:<span class="s2">&quot;http://x.x.x.x:8080&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Client Side:</h2>

<p>I will be using a the Fly cli from a Mac, so first we need to download the fly-cli for Mac:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">CONCOURSE_VERSION</span><span class="o">=</span>7.4.0
</span><span class='line'><span class="nv">$ </span>wget https://github.com/concourse/concourse/releases/download/v<span class="k">${</span><span class="nv">CONCOURSE_VERSION</span><span class="k">}</span>/fly-<span class="k">${</span><span class="nv">CONCOURSE_VERSION</span><span class="k">}</span>-darwin-amd64.tgz
</span><span class='line'><span class="nv">$ </span>tar -xvf fly-<span class="k">${</span><span class="nv">CONCOURSE_VERSION</span><span class="k">}</span>-darwin-amd64.tgz
</span><span class='line'><span class="nv">$ </span>sudo mv fly /usr/local/bin/fly
</span><span class='line'><span class="nv">$ </span>rm -rf fly-<span class="k">${</span><span class="nv">CONCOURSE_VERSION</span><span class="k">}</span>-darwin-amd64.tgz
</span></code></pre></td></tr></table></div></figure>


<p>Next, we need to setup our Concourse Target by Authenticating against our Concourse Endpoint, lets setup our target with the name <code>ci</code>, and make sure to replace the ip address with the ip of your concourse server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci login -c http://<span class="k">${</span><span class="nv">IP_ADDRESS</span><span class="k">}</span>:8080
</span><span class='line'>logging in to team <span class="s1">&#39;main&#39;</span>
</span><span class='line'>
</span><span class='line'>navigate to the following URL in your browser:
</span><span class='line'>
</span><span class='line'>  http://<span class="k">${</span><span class="nv">IP_ADDRESS</span><span class="k">}</span>:8080/login?fly_port<span class="o">=</span>42181
</span><span class='line'>
</span><span class='line'>or enter token manually <span class="o">(</span>input hidden<span class="o">)</span>:
</span><span class='line'>target saved
</span></code></pre></td></tr></table></div></figure>


<p>Lets list our targets:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly targets
</span><span class='line'>name  url                        team  expiry
</span><span class='line'>ci    http://x.x.x.x:8080        main  Wed, <span class="m">08</span> Nov <span class="m">2021</span> 15:32:59 UTC
</span></code></pre></td></tr></table></div></figure>


<p>Listing Registered Workers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci workers
</span><span class='line'>name              containers  platform  tags  team  state    version
</span><span class='line'>x.x.x.x           <span class="m">0</span>           linux     none  none  running  1.2
</span></code></pre></td></tr></table></div></figure>


<p>Listing Active Containers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci containers
</span><span class='line'>handle                                worker            pipeline     job            build <span class="c">#  build id  type   name                  attempt</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Hello World Pipeline:</h2>

<p>Let&rsquo;s create a basic pipeline, that will print out <code>Hello, World!</code>:</p>

<p>Our <code>hello-world.yml</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">jobs</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-job</span>
</span><span class='line'>  <span class="l-Scalar-Plain">plan</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">task</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">say-hello</span>
</span><span class='line'>    <span class="l-Scalar-Plain">config</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">platform</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linux</span>
</span><span class='line'>      <span class="l-Scalar-Plain">image_resource</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker-image</span>
</span><span class='line'>        <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">repository</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">alpine</span>
</span><span class='line'>          <span class="l-Scalar-Plain">tag</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">edge</span>
</span><span class='line'>      <span class="l-Scalar-Plain">run</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/bin/sh</span>
</span><span class='line'>        <span class="l-Scalar-Plain">args</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">-c</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="p-Indicator">|</span>
</span><span class='line'>          <span class="no">echo &quot;=============&quot;</span>
</span><span class='line'>          <span class="no">echo &quot;Hello, World!&quot;</span>
</span><span class='line'>          <span class="no">echo &quot;=============&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Applying the configuration to our pipeline:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci <span class="nb">set</span>-pipeline -p yeeehaa -c hello-world.yml
</span><span class='line'><span class="nb">jobs</span>:
</span><span class='line'>  job my-job has been added:
</span><span class='line'>    name: my-job
</span><span class='line'>    plan:
</span><span class='line'>    - task: say-hello
</span><span class='line'>      config:
</span><span class='line'>        platform: linux
</span><span class='line'>        image_resource:
</span><span class='line'>          <span class="nb">type</span>: docker-image
</span><span class='line'>          <span class="nb">source</span>:
</span><span class='line'>            repository: alpine
</span><span class='line'>            tag: edge
</span><span class='line'>        run:
</span><span class='line'>          path: /bin/sh
</span><span class='line'>          args:
</span><span class='line'>          - -c
</span><span class='line'>          - <span class="p">|</span>
</span><span class='line'>            <span class="nb">echo</span> <span class="s2">&quot;=============&quot;</span>
</span><span class='line'>            <span class="nb">echo</span> <span class="s2">&quot;Hello, World!&quot;</span>
</span><span class='line'>            <span class="nb">echo</span> <span class="s2">&quot;=============&quot;</span>
</span><span class='line'>
</span><span class='line'>apply configuration? <span class="o">[</span>yN<span class="o">]</span>: y
</span><span class='line'>pipeline created!
</span><span class='line'>you can view your pipeline here: http://x.x.x.x:8080/teams/main/pipelines/yeeehaa
</span><span class='line'>
</span><span class='line'>the pipeline is currently paused. to unpause, either:
</span><span class='line'>  - run the unpause-pipeline <span class="nb">command</span>
</span><span class='line'>  - click play next to the pipeline in the web ui
</span></code></pre></td></tr></table></div></figure>


<p>We can browse to the WebUI to unpause the pipeline, but since I like to do everything on cli as far as possible, I will unpause the pipeline via cli:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci unpause-pipeline -p yeeehaa
</span><span class='line'>unpaused <span class="s1">&#39;yeeehaa&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now our Pipeline is unpaused, but since we did not specify any triggers, we need to manually trigger the pipeline to run, you can either via the WebUI, select your pipeline which in this case will be named <code>yeeehaa</code> and then select the job, which will be <code>my-job</code> then hit the <code>+</code> sign, which will trigger the pipeline.</p>

<p>I will be using the cli:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci trigger-job --job yeeehaa/my-job
</span><span class='line'>started yeeehaa/my-job <span class="c">#1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Via the WebUI on <code>http://x.x.x.x:8080/teams/main/pipelines/yeeehaa/jobs/my-job/builds/1</code> you should see the <code>Hello, World!</code> output, or via the cli, we also have the option to see the output, so let&rsquo;s trigger it again, but this time passing the <code>--watch</code> flag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci trigger-job --job yeeehaa/my-job --watch
</span><span class='line'>started yeeehaa/my-job <span class="c">#2</span>
</span><span class='line'>
</span><span class='line'>initializing
</span><span class='line'>running /bin/sh -c <span class="nb">echo</span> <span class="s2">&quot;=============&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Hello, World!&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;=============&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">=============</span>
</span><span class='line'>Hello, World!
</span><span class='line'><span class="o">=============</span>
</span><span class='line'>succeeded
</span></code></pre></td></tr></table></div></figure>


<p>Listing our Workers and Containers again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci workers
</span><span class='line'>name              containers  platform  tags  team  state    version
</span><span class='line'>x.x.x.x            <span class="m">2</span>           linux     none  none  running  1.2
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>fly -t ci containers
</span><span class='line'>handle                                worker            pipeline     job         build <span class="c">#  build id  type   name           attempt</span>
</span><span class='line'>46282555-64cd-5h1b-67b8-316486h58eb8  x.x.x.x           yeeehaa      my-job      <span class="m">2</span>        <span class="m">729</span>       task   say-hello      n/a
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Tour With Vagrant and Virtualbox on Mac]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/08/14/a-tour-with-vagrant-and-virtualbox-on-mac/"/>
    <updated>2021-08-14T13:41:32-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/08/14/a-tour-with-vagrant-and-virtualbox-on-mac</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/58658188-37cec280-8320-11e9-90ca-1226b3ccb292.png" alt="vagrant" /></p>

<p><a href="https://www.vagrantup.com/">Vagrant</a>, yet another amazing product from <a href="https://www.hashicorp.com/">Hashicorp</a>.</p>

<p>Vagrant makes it really easy to provision virtual servers for local development (not limited to), which they refer as &ldquo;boxes&rdquo;, that enables developers to run their jobs/tasks/applications in a really easy and fast way. Vagrant utilizes a declarative configuration model, so you can describe which OS you want, bootstrap them with installation instructions as soon as it boots, etc.</p>

<h2>What are we doing today?</h2>

<p>When completing this tutorial, you will have Vagrant and Virtualbox installed on your Mac and should be able to launch a Ubuntu Virtual Server locally with Vagrant and using the Virtualbox provider which will be responsible for running our VM&rsquo;s.</p>

<p>We will also look at different configuration options to configure the VM, bootstrapping software, using the shell, docker and ansible provisioner.</p>

<p>For this demonstration, I am using a Mac OSX, but you can run this on Mac, Windows or Linux. First we will use Homebrew to install Virtualbox, then Vagrant, then we will provision a Ubuntu box and I will also show how to inject shell commands into your Vagrantfile so that you can provision software to your VM, and also forward traffic to a web server from the host to the guest.</p>

<p>If you are looking for a Linux version instead of mac, you can look at this post:
* <a href="https://blog.ruanbekker.com/blog/2019/05/30/use-vagrant-to-setup-a-local-development-environment-on-linux/">Use Vagrant to Setup a Local Development Environment on Linux</a></p>

<h2>Pre-Requisites</h2>

<p>I will be installing Vagrant and Virtualbox with Homebrew, if you do not have homebrew installed, you can install homebrew with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby -e <span class="s2">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once homebrew is installed, it&rsquo;s a good thing to update the indexes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew update
</span></code></pre></td></tr></table></div></figure>


<h2>Virtualbox</h2>

<p>Install <a href="https://www.virtualbox.org/">VirtualBox</a> using homebrew:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install --cask virtualbox
</span></code></pre></td></tr></table></div></figure>


<h2>Vagrant</h2>

<p>Install <a href="https://www.vagrantup.com/">Vagrant</a> using homebrew:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install --cask vagrant
</span></code></pre></td></tr></table></div></figure>


<p>Install the virtualbox guest additions plugin for vagrant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant plugin install vagrant-vbguest
</span></code></pre></td></tr></table></div></figure>


<p>If you would like a vagrant manager utility to help you manage your vagrant boxes, you can install <a href="http://www.vagrantmanager.com/">vagrant-manager</a> using homebrew:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install --cask vagrant-manager
</span></code></pre></td></tr></table></div></figure>


<h2>Create your first Vagrant Box</h2>

<p>From <a href="https://app.vagrantup.com/boxes/search">app.vagrantup.com/boxes/search</a> you can search for any box, such as ubuntu, centos, alpine etc and for this demonstration I am going with <a href="https://app.vagrantup.com/ubuntu/boxes/focal64">ubuntu/focal64</a>.</p>

<p>I am creating a new directory for my devbox:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir devbox
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>devbox
</span></code></pre></td></tr></table></div></figure>


<p>Then initialize the Vagrantfile by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant init ubuntu/focal64
</span></code></pre></td></tr></table></div></figure>


<p>A <code>Vagrantfile</code> has been created in the current working directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat Vagrantfile <span class="p">|</span> grep -v <span class="s2">&quot;#&quot;</span>
</span><span class='line'>
</span><span class='line'>Vagrant.configure<span class="o">(</span><span class="s2">&quot;2&quot;</span><span class="o">)</span> <span class="k">do</span> <span class="p">|</span>config<span class="p">|</span>
</span><span class='line'>  config.vm.box <span class="o">=</span> <span class="s2">&quot;ubuntu/focal64&quot;</span>
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>Boot the VM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant up
</span></code></pre></td></tr></table></div></figure>


<p>The box should now be in a started state, and we can verify that by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant status
</span><span class='line'>Current machine states:
</span><span class='line'>
</span><span class='line'>default                   running <span class="o">(</span>virtualbox<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now SSH to our VM by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant ssh
</span><span class='line'>vagrant@ubuntu-focal:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Installing Software with Vagrant</h2>

<p>First let&rsquo;s destroy the VM that we created:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant destroy --force
</span></code></pre></td></tr></table></div></figure>


<p>Then edit the <code>Vagrantfile</code> and add the commands that we want to be executed when the VM boots, in our case, installing Nginx:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;ubuntu/focal64&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;forwarded_port&quot;</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">80</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="mi">8080</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> <span class="ss">inline</span><span class="p">:</span> <span class="o">&lt;&lt;-</span><span class="no">SHELL</span>
</span><span class='line'><span class="sh">     apt update</span>
</span><span class='line'><span class="sh">     apt install nginx -y</span>
</span><span class='line'><span class="no">  SHELL</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will also notice that we are forwarding port 8080 from our host, to port 80 on the VM so that we can access the webserver on port 8080 from our laptop. Then boot the VM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">vagrant</span> <span class="n">up</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once the VM has booted and installed our software, we should be able to access the index document served by Nginx on our VM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -I http://localhost:8080/
</span><span class='line'>
</span><span class='line'>HTTP/1.1 <span class="m">200</span> OK
</span><span class='line'>Server: nginx/1.18.0 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span><span class='line'>Date: Sat, <span class="m">14</span> Aug <span class="m">2021</span> 18:11:59 GMT
</span><span class='line'>Content-Type: text/html
</span><span class='line'>Content-Length: 612
</span><span class='line'>Last-Modified: Sat, <span class="m">14</span> Aug <span class="m">2021</span> 18:11:10 GMT
</span><span class='line'>Connection: keep-alive
</span><span class='line'>ETag: <span class="s2">&quot;6118073e-264&quot;</span>
</span><span class='line'>Accept-Ranges: bytes
</span></code></pre></td></tr></table></div></figure>


<h2>Shared Folders</h2>

<p>Let&rsquo;s say you want to map your local directory to your VM, in a scenario where you want to store your <code>index.html</code> on your laptop and map it to the VM, we can use <code>config.vm.synced_folder</code>.</p>

<p>On our laptop, create a <code>html</code> directory where we will store our <code>index.hml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir html
</span></code></pre></td></tr></table></div></figure>


<p>Now create the content in the <code>index.html</code> under the <code>html</code> directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;Hello, World&quot;</span> &gt; html/index.html
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to make vagrant aware of the folder that we are mapping to the VM, so we need to edit the <code>Vagrantfile</code> and it will now look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- mode: ruby -*-</span>
</span><span class='line'><span class="c1"># vi: set ft=ruby :</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;ubuntu/focal64&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;forwarded_port&quot;</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">80</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="mi">8080</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> <span class="ss">inline</span><span class="p">:</span> <span class="o">&lt;&lt;-</span><span class="no">SHELL</span>
</span><span class='line'><span class="sh">     apt update</span>
</span><span class='line'><span class="sh">     apt install nginx -y</span>
</span><span class='line'><span class="no">  SHELL</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">synced_folder</span> <span class="s2">&quot;html&quot;</span><span class="p">,</span> <span class="s2">&quot;/var/www/html&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>To reload the VM with our changes, we use <code>vagrant provision</code> to update our VM when changes to provisioners are made, and <code>vagrant reload</code> when we have config changes such as <code>config.vm.network</code>, but to restart the VM and forcing provisioners to run, we can use the following:</p>

<p>Thanks <a href="https://twitter.com/joshva_jebaraj">@joshva_jebaraj</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant reload --provision
</span></code></pre></td></tr></table></div></figure>


<p>Once the VM is up, we can verify the changes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl http://localhost:8080/
</span><span class='line'>Hello, World
</span></code></pre></td></tr></table></div></figure>


<p>Now we can edit our content locally which is synced to our VM.</p>

<h2>Setting Hostname and Configure Memory</h2>

<p>We can also configure the hostname of our VM and configure the amount of memory that we want to allocate to our VM using:</p>

<ul>
<li><code>config.vm.hostname</code></li>
<li><code>vb.memory</code></li>
</ul>


<p>An example of that will look like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- mode: ruby -*-</span>
</span><span class='line'><span class="c1"># vi: set ft=ruby :</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;ubuntu/focal64&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">hostname</span> <span class="o">=</span> <span class="s2">&quot;mydevbox&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;forwarded_port&quot;</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">80</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="mi">8080</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> <span class="ss">inline</span><span class="p">:</span> <span class="o">&lt;&lt;-</span><span class="no">SHELL</span>
</span><span class='line'><span class="sh">     apt update</span>
</span><span class='line'><span class="sh">     apt install nginx -y</span>
</span><span class='line'><span class="no">  SHELL</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">synced_folder</span> <span class="s2">&quot;html&quot;</span><span class="p">,</span> <span class="s2">&quot;/var/www/html&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;virtualbox&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">vb</span><span class="o">|</span>
</span><span class='line'>    <span class="n">vb</span><span class="o">.</span><span class="n">memory</span> <span class="o">=</span> <span class="s2">&quot;1024&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>In this example our VM&rsquo;s hostname is <code>mydevbox</code> and we assigned 1024MB of memory to our VM.</p>

<h2>Provisioners: Shell</h2>

<p>We can also run scripts from our local directory on our laptop on our VM using the <a href="https://www.vagrantup.com/docs/provisioning/shell">shell provisioner</a>.</p>

<p>First we need to create the script on our local directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat bootstrap.sh
</span><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'><span class="nb">set</span> -x
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;my hostname is $(hostname)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then in our <code>Vagrantfile</code> we inform vagrant to execute the shell script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- mode: ruby -*-</span>
</span><span class='line'><span class="c1"># vi: set ft=ruby :</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;ubuntu/focal64&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">hostname</span> <span class="o">=</span> <span class="s2">&quot;mydevbox&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:shell</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s2">&quot;bootstrap.sh&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since my VM is already running, I will be doing a <code>reload</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant reload --provision
</span><span class='line'>...
</span><span class='line'><span class="o">==</span>&gt; default: Running provisioner: shell...
</span><span class='line'>    default: Running: /var/folders/04/r10yvb8d5dgfvd167jz5z23w0000gn/T/vagrant-shell20210814-70233-1p9dump.sh
</span><span class='line'>    default: ++ hostname
</span><span class='line'>    default: my hostname is mydevbox
</span><span class='line'>    default: + <span class="nb">echo</span> <span class="s1">&#39;my hostname is mydevbox&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the shell script from our local directory was executed on our VM, you can use this method to automate installations as well, etc.</p>

<h2>Provisioners: Docker</h2>

<p>Vagrant offers a <a href="https://www.vagrantup.com/docs/provisioning/docker">docker provisioner</a>, and for this example we will be hosting a mysql server using docker container in our VM.</p>

<p>Our <code>Vagrantfile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- mode: ruby -*-</span>
</span><span class='line'><span class="c1"># vi: set ft=ruby :</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;ubuntu/focal64&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">hostname</span> <span class="o">=</span> <span class="s2">&quot;mydevbox&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;forwarded_port&quot;</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">3306</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="mi">3306</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;docker&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">d</span><span class="o">|</span>
</span><span class='line'>    <span class="n">d</span><span class="o">.</span><span class="n">run</span> <span class="s2">&quot;mysql&quot;</span><span class="p">,</span> <span class="ss">image</span><span class="p">:</span> <span class="s2">&quot;mysql:8.0&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">args</span><span class="p">:</span> <span class="s2">&quot;-p 3306:3306 -e MYSQL_ROOT_PASSWORD=password&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since I don&rsquo;t have port <code>3306</code> listening locally, I have mapped port <code>3306</code> from my laptop to port <code>3306</code> on my VM and I am using the <code>mysql:8.0</code> container image from docker hub and passing the arguments which is specific to the container.</p>

<p>The convenient thing about the docker provisioner, is that it will install docker onto the VM for you.</p>

<p>Once the config has been set in your <code>Vagrantfile</code> do a reload:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant reload --provision
</span><span class='line'>...
</span><span class='line'>    default: /vagrant <span class="o">=</span>&gt; /Users/ruanbekker/workspace/vagrant/devbox
</span><span class='line'><span class="o">==</span>&gt; default: Running provisioner: docker...
</span><span class='line'>    default: Installing Docker onto machine...
</span><span class='line'><span class="o">==</span>&gt; default: Starting Docker containers...
</span><span class='line'><span class="o">==</span>&gt; default: -- Container: mysql
</span></code></pre></td></tr></table></div></figure>


<p>From our laptop we should be able to communicate with our mysql server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>nc -vz localhost 3306
</span><span class='line'>found <span class="m">0</span> associations
</span><span class='line'>found <span class="m">1</span> connections:
</span><span class='line'>     1:   <span class="nv">flags</span><span class="o">=</span>82&lt;CONNECTED,PREFERRED&gt;
</span><span class='line'>  outif lo0
</span><span class='line'>  src 127.0.0.1 port 58745
</span><span class='line'>  dst 127.0.0.1 port 3306
</span><span class='line'>  rank info not available
</span><span class='line'>  TCP aux info available
</span><span class='line'>
</span><span class='line'>Connection to localhost port <span class="m">3306</span> <span class="o">[</span>tcp/mysql<span class="o">]</span> succeeded!
</span></code></pre></td></tr></table></div></figure>


<p>We can also SSH to our VM and verify if the container is running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant ssh
</span></code></pre></td></tr></table></div></figure>


<p>And then list the containers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span> docker ps
</span><span class='line'>CONTAINER ID   IMAGE       COMMAND                  CREATED         STATUS         PORTS                                                  NAMES
</span><span class='line'>30a843a486ae   mysql:8.0   <span class="err">&quot;</span>docker-entrypoint.sh    <span class="m">2</span> minutes ago   Up <span class="m">2</span> minutes   0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql
</span></code></pre></td></tr></table></div></figure>


<h2>Provisioners: Ansible</h2>

<p>We can also execute <a href="https://www.ansible.com/">Ansible</a> playbooks on our VM using the <a href="https://www.vagrantup.com/docs/provisioning/ansible">Ansible Provisioner</a>.</p>

<p>Something to note is that we use <code>ansible</code> to execute the playbook on the host, and <code>ansible_local</code> to execute the playbook on the VM.</p>

<p>First we will create our <a href="https://docs.ansible.com/playbooks_best_practices.html#directory-layout">project structure</a> for ansible, so that we have the following in place:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>Vagrantfile
</span><span class='line'>provisioning/playbook.yml
</span><span class='line'>provisioning/group_vars/all
</span></code></pre></td></tr></table></div></figure>


<p>Create the <code>provisioning</code> directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir provisioning
</span></code></pre></td></tr></table></div></figure>


<p>Then the content for our <code>provisioning/playbook.yml</code> playbook:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">all</span>
</span><span class='line'>  <span class="l-Scalar-Plain">become</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ensure ntpd is at the latest version</span>
</span><span class='line'>      <span class="l-Scalar-Plain">apt</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">pkg</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ntp</span>
</span><span class='line'>        <span class="l-Scalar-Plain">state</span><span class="p-Indicator">:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">notify</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">restart ntpd</span>
</span><span class='line'>  <span class="l-Scalar-Plain">handlers</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">restart ntpd</span>
</span><span class='line'>      <span class="l-Scalar-Plain">service</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ntp</span>
</span><span class='line'>        <span class="l-Scalar-Plain">state</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">restarted</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our <code>provisioning/group_vars/all</code> file that will contain the variables for the all group:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">desired_state</span><span class="p-Indicator">:</span> <span class="s">&quot;latest&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In our <code>Vagrantfile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- mode: ruby -*-</span>
</span><span class='line'><span class="c1"># vi: set ft=ruby :</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;ubuntu/focal64&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">hostname</span> <span class="o">=</span> <span class="s2">&quot;mydevbox&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:ansible</span> <span class="k">do</span> <span class="o">|</span><span class="n">ansible</span><span class="o">|</span>
</span><span class='line'>    <span class="n">ansible</span><span class="o">.</span><span class="n">playbook</span> <span class="o">=</span> <span class="s2">&quot;provisioning/playbook.yml&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When using ansible with vagrant the inventory is <a href="https://www.vagrantup.com/docs/provisioning/ansible_intro#auto-generated-inventory">auto-generated</a> when then inventory is not specified. Vagrant will store the inventory on the host at <code>.vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory</code>.</p>

<p>To execute playbooks with ansible, we need ansible installed on our host machine, for this demonstration I will be using virtualenv and then install ansible using pip:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python3 -m pip install virtualenv
</span><span class='line'><span class="nv">$ </span>virtualenv -p <span class="k">$(</span>which python3<span class="k">)</span> .venv
</span><span class='line'><span class="nv">$ </span><span class="nb">source</span> .venv/bin/activate
</span><span class='line'><span class="nv">$ </span>pip install ansible
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have ansible installed, reload the VM to execute the playbook on our VM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant reload --provision
</span><span class='line'>...
</span><span class='line'><span class="o">==</span>&gt; default: Running provisioner: ansible...
</span><span class='line'>    default: Running ansible-playbook...
</span><span class='line'>
</span><span class='line'>PLAY <span class="o">[</span>all<span class="o">]</span> *********************************************************************
</span><span class='line'>
</span><span class='line'>TASK <span class="o">[</span>Gathering Facts<span class="o">]</span> *********************************************************
</span><span class='line'>ok: <span class="o">[</span>default<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>TASK <span class="o">[</span>ensure ntpd is at the latest version<span class="o">]</span> ************************************
</span><span class='line'>ok: <span class="o">[</span>default<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>PLAY RECAP *********************************************************************
</span><span class='line'>default                    : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">skipped</span><span class="o">=</span><span class="m">0</span>    <span class="nv">rescued</span><span class="o">=</span><span class="m">0</span>    <span class="nv">ignored</span><span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure>


<p>Pretty neat right?</p>

<h2>Tear Down</h2>

<p>To destroy the VM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant destroy --force
</span></code></pre></td></tr></table></div></figure>


<h2>Resources</h2>

<p>For more information on vagrant, check out their documentation:</p>

<ul>
<li><a href="https://www.vagrantup.com/docs">https://www.vagrantup.com/docs</a></li>
</ul>


<p>On provisioning documentation:</p>

<ul>
<li><a href="https://www.vagrantup.com/docs/provisioning/shell">https://www.vagrantup.com/docs/provisioning/shell</a></li>
<li><a href="https://www.vagrantup.com/docs/provisioning/docker">https://www.vagrantup.com/docs/provisioning/docker</a></li>
<li><a href="https://www.vagrantup.com/docs/provisioning/ansible_intro">https://www.vagrantup.com/docs/provisioning/ansible_intro</a></li>
</ul>


<p>I have a couple of example <code>Vagrantfile</code>s available on my github repository:</p>

<ul>
<li><a href="https://github.com/ruanbekker/vagrantfiles">https://github.com/ruanbekker/vagrantfiles</a></li>
</ul>


<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Specify Wallet Name in Bitcoin Core Walletnotify]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/08/04/how-to-specify-wallet-name-in-bitcoin-core-walletnotify/"/>
    <updated>2021-08-04T09:41:51-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/08/04/how-to-specify-wallet-name-in-bitcoin-core-walletnotify</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/ruanbekker-header-photo.png" alt="" /></p>

<p>With bitcoin-core, you get a configuration option called <code>walletnotify</code> which allow you to invoke a command whenever you receive a payment, first confirmation of a payment or send a payment.</p>

<p>You can specify <code>%s</code> as an argument which will be used to parse the transaction id.</p>

<h2>Bitcoind WalletNotify TransactionID Example</h2>

<p>To see what walletnotify does, in my <code>bitcoin.conf</code> I had a basic script to write a entry every time I receive a payment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat ~/.bitcoin/bitcoin.conf
</span><span class='line'>...
</span><span class='line'>walletnotify=/bin/notify.sh %s %w</span></code></pre></td></tr></table></div></figure>


<p>And in my <code>/bin/notify.sh</code> script I have this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/usr/bin/env bash
</span><span class='line'>transaction_id=$1
</span><span class='line'>
</span><span class='line'># writing to log
</span><span class='line'>echo "[$(date +%FT%T)] event for txid $transaction_id" &gt;&gt; /var/log/bitcoin-notify.log</span></code></pre></td></tr></table></div></figure>


<p>I have executable permissions for the script:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod +x /bin/notify.sh</span></code></pre></td></tr></table></div></figure>


<p>When a payment was made, my logfile showed the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[2021-08-04T12:21:43] event for txid xxxxxx5d92f729ed77xxxxxx2cbccedxxxxa7a03a801xxxxxxx33a41c1xxxxxd2 </span></code></pre></td></tr></table></div></figure>


<h2>Capturing the wallet name in walletnotify</h2>

<p>In bitcoin-core we wave wallets, and in a wallet we have one or more bitcoin addresses, as can be seen below for wallets:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -u "bitcoin:${bpass}" -d '{"jsonrpc": "1.0", "id": "curl", "method": "listwallets", "params": []}' -H 'content-type: text/plain;' http://127.0.0.1:18332/
</span><span class='line'>{"result":["rpi01-main", "rpi01-secondary"],"error":null,"id":"curl"}</span></code></pre></td></tr></table></div></figure>


<p>and to get the addresses for that wallet:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -u "bitcoin:${bpass}" -d '{"jsonrpc": "1.0", "id": "curl", "method": "getaddressesbylabel", "params": [""]}' -H 'content-type: text/plain;' http://127.0.0.1:18332/wallet/rpi01-main
</span><span class='line'>{"result":{"txxxxxmefmcpq98xxxxxxx80gvug2fe97xxxxxx8yv":{"purpose":"receive"}},"error":null,"id":"curl"}</span></code></pre></td></tr></table></div></figure>


<p>I had to figure out how to capture the wallet name as well as the transaction id, as I thought its not possible until I stumbled upon a post which mentioned from bitcoind 0.20:</p>

<blockquote><p>The -walletnotify configuration parameter will now replace any %w in its argument with the name of the wallet generating the notification.</p></blockquote>

<p>Which was merged by this PR:
- <a href="https://github.com/bitcoin/bitcoin/pull/13339">https://github.com/bitcoin/bitcoin/pull/13339</a></p>

<p>So first to verify that bitcoind is newer than mentioned:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>/usr/local/bin/bitcoind -version
</span><span class='line'>Bitcoin Core version v0.21.1
</span></code></pre></td></tr></table></div></figure>


<p>Updated the <code>walletnotify</code> config in <code>bitcoin.conf</code> to include <code>%w</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /home/bitcoin/.bitcoin/bitcoin.conf <span class="p">|</span> grep wallet
</span><span class='line'><span class="nv">walletnotify</span><span class="o">=</span>/bin/notify.sh %s %w
</span></code></pre></td></tr></table></div></figure>


<p>Then in the <code>notify.sh</code> script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'><span class="nv">transaction_id</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="nv">wallet_name</span><span class="o">=</span><span class="nv">$2</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;[$(date +%FT%T)] $transaction_id $wallet_name&quot;</span> &gt;&gt; /var/log/bitcoin-notify.log
</span></code></pre></td></tr></table></div></figure>


<p>And then restart bitcoind:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo systemctl restart bitcoind
</span></code></pre></td></tr></table></div></figure>


<p>When a transaction occurred, I could see the transaction id with the corresponding wallet name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tail -f /var/log/bitcoin-notify.log
</span><span class='line'><span class="o">[</span>2021-08-04T12:31:20<span class="o">]</span> fxxxxxxxxxxxxxxxxxxxxxxx2cbcced28ea26fhkxxxxhjn01f33a41c12f8xxx8 rpi01-main
</span></code></pre></td></tr></table></div></figure>


<h2>Thanks</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS EC2 Linux - Warning: Setlocale: LC_CTYPE: Cannot Change Locale UTF-8]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/08/02/aws-ec2-linux-warning-setlocale-lc-ctype-cannot-change-locale-utf-8/"/>
    <updated>2021-08-02T02:40:53-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/08/02/aws-ec2-linux-warning-setlocale-lc-ctype-cannot-change-locale-utf-8</id>
    <content type="html"><![CDATA[<p>On Amazon Linux EC2 Instances, I noticed the following error when SSH onto them:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-bash: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8): No such file or directory</span></code></pre></td></tr></table></div></figure>


<p>To resolve, add the following to the <code>/etc/environment</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/environment
</span><span class='line'>LANG=en_US.utf-8
</span><span class='line'>LC_ALL=en_US.utf-8</span></code></pre></td></tr></table></div></figure>


<p>Logout and log back in and it should be resolved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Task Runner With YAML Config Written in Go]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/08/01/task-runner-with-yaml-config-written-in-go/"/>
    <updated>2021-08-01T06:11:54-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/08/01/task-runner-with-yaml-config-written-in-go</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/ruanbekker-header-photo.png" alt="" /></p>

<p><a href="https://taskfile.dev/">Task</a> (aka Taskfile) is a task runner written in <a href="https://golang.org/">Go</a>, which is similar to GNU Make, but in my opinion is a lot easier to use as you specify your tasks in yaml.</p>

<h2>What to expect</h2>

<p>In this post we will go through a quick demonstration using Task, how to install Task, as well as a couple of basic examples to get you up and running with Task.</p>

<h2>Install</h2>

<p>For mac, installing task::</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install go-task/tap/go-task
</span></code></pre></td></tr></table></div></figure>


<p>For linux, installing task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sh -c <span class="s2">&quot;$(curl --location https://taskfile.dev/install.sh)&quot;</span> -- -d -b /usr/local/bin
</span></code></pre></td></tr></table></div></figure>


<p>Or manual installation for arm as an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">pushd</span> /tmp
</span><span class='line'><span class="nv">$ </span>wget https://github.com/go-task/task/releases/download/v3.7.0/task_linux_arm.tar.gz
</span><span class='line'><span class="nv">$ </span>tar -xvf task_linux_arm.tar.gz
</span><span class='line'><span class="nv">$ </span>sudo mv task /usr/local/bin/task
</span><span class='line'><span class="nv">$ </span>sudo chmod +x /usr/local/bin/task
</span><span class='line'><span class="nv">$ </span><span class="nb">popd</span>
</span></code></pre></td></tr></table></div></figure>


<p>Verify that task is installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>task --version
</span><span class='line'>Task version: v3.7.0
</span></code></pre></td></tr></table></div></figure>


<p>For more information check the installation page:
- <a href="https://taskfile.dev/#/installation">https://taskfile.dev/#/installation</a></p>

<h2>Usage</h2>

<p>Task uses a default config file: <code>Taskfile.yml</code> in the current working directory where you can provide context on what your tasks should do.</p>

<p>To generate a <code>Taskfile.yml</code> with example config, task gives us a <code>--init</code> flag to generate a sample.</p>

<p>For a basic hello-world example, our task <code>helloworld</code> will echo out <code>hello, world!</code>. To generate the sample code, run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>task --init
</span></code></pre></td></tr></table></div></figure>


<p>Then update the config, to the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&#39;3&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">helloworld</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">desc</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">prints out hello world message</span>
</span><span class='line'>    <span class="l-Scalar-Plain">cmds</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;hello, world!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To demonstrate what the config means:</p>

<ul>
<li><code>tasks</code>: refers to the list of tasks</li>
<li><code>helloworld</code>: is the task name</li>
<li><code>desc</code>: describes the task, useful for listing tasks</li>
<li><code>cmds</code>: the commands that the task will execute</li>
</ul>


<p>To list all our tasks for our taskfile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>task --list
</span><span class='line'>task: Available tasks <span class="k">for</span> this project:
</span><span class='line'>* helloworld:     prints out hello world message
</span></code></pre></td></tr></table></div></figure>


<p>Which we call using the application <code>task</code> with the argument of the task name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>task helloworld
</span><span class='line'>task: <span class="o">[</span>helloworld<span class="o">]</span> <span class="nb">echo</span> <span class="s2">&quot;hello, world!&quot;</span>
</span><span class='line'>hello, world!
</span></code></pre></td></tr></table></div></figure>


<p>We can also reduce the output verbosity using <code>silent</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&#39;3&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">helloworld</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">desc</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">prints out hello world message</span>
</span><span class='line'>    <span class="l-Scalar-Plain">cmds</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;hello, world!&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">silent</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which will result in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>task helloworld
</span><span class='line'>hello, world!
</span></code></pre></td></tr></table></div></figure>


<p>For a example using environment variables, we can use it in two ways:</p>

<ul>
<li>per task</li>
<li>globally, across all tasks</li>
</ul>


<p>For using environment variables per task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&#39;3&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">helloworld</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">cmds</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;hello, $WORD!&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">env</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">WORD</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">world</span>
</span></code></pre></td></tr></table></div></figure>


<p>Results in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>task helloworld
</span><span class='line'>task: <span class="o">[</span>helloworld<span class="o">]</span> <span class="nb">echo</span> <span class="s2">&quot;hello, $WORD!&quot;</span>
</span><span class='line'>hello, world!
</span></code></pre></td></tr></table></div></figure>


<p>For using environment variables globally across all tasks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&#39;3&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">env</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">WORD</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">world</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">helloworld</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">cmds</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;hello, $WORD!&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">env</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">GREETING</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hello</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">byeworld</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">cmds</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;$GREETING, $WORD!&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">env</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">GREETING</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bye</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running our first task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>task helloworld
</span><span class='line'>task: <span class="o">[</span>helloworld<span class="o">]</span> <span class="nb">echo</span> <span class="s2">&quot;hello, $WORD!&quot;</span>
</span><span class='line'>hello, world!
</span></code></pre></td></tr></table></div></figure>


<p>And running our second task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>task byeworld
</span><span class='line'>task: <span class="o">[</span>byeworld<span class="o">]</span> <span class="nb">echo</span> <span class="s2">&quot;$GREETING, $WORD!&quot;</span>
</span><span class='line'>bye, world!
</span></code></pre></td></tr></table></div></figure>


<p>To store your environment variables in a <code>.env</code> file, you can specify it as the following in your <code>Taskfile.yml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&#39;3&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">dotenv</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&#39;.env&#39;</span><span class="p-Indicator">]</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">helloworld</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">cmds</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;hello, $WORD!&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">env</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">GREETING</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hello</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">byeworld</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">cmds</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;$GREETING, $WORD!&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">env</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">GREETING</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bye</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in your <code>.env</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">WORD=world</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you should see your environment variables referenced from the <code>.env</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ task helloworld</span>
</span><span class='line'><span class="l-Scalar-Plain">task</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">helloworld</span><span class="p-Indicator">]</span> <span class="l-Scalar-Plain">echo &quot;hello, $WORD!&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">hello, world!</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also reference config using <code>vars</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&#39;3&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">vars</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">GREETING</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Hello, World!</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">default</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">desc</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">prints out a message</span>
</span><span class='line'>    <span class="l-Scalar-Plain">cmds</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case our task name is <code>default</code>, therefore we can only run <code>task</code> without any arguments, as default with be the default task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ task</span>
</span><span class='line'><span class="l-Scalar-Plain">task</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">default</span><span class="p-Indicator">]</span> <span class="l-Scalar-Plain">echo &quot;Hello, World!&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">Hello, World!</span>
</span></code></pre></td></tr></table></div></figure>


<p>To run both tasks with one command, you can specify dependencies, so if we define a task with zero commands but just dependencies, it will call those tasks and execute them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&#39;3&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">env</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">WORD</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">world</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">helloworld</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">cmds</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;hello, $WORD!&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">env</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">GREETING</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hello</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">byeworld</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">cmds</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;$GREETING, $WORD!&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">env</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">GREETING</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bye</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">all</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">deps</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">helloworld</span><span class="p-Indicator">,</span> <span class="nv">byeworld</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So when we run the <code>all</code> task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>task all
</span><span class='line'>task: <span class="o">[</span>helloworld<span class="o">]</span> <span class="nb">echo</span> <span class="s2">&quot;hello, $WORD!&quot;</span>
</span><span class='line'>hello, world!
</span><span class='line'>task: <span class="o">[</span>byeworld<span class="o">]</span> <span class="nb">echo</span> <span class="s2">&quot;$GREETING, $WORD!&quot;</span>
</span><span class='line'>bye, world!
</span></code></pre></td></tr></table></div></figure>


<p>For more usage examples, have a look at their documentation:
- <a href="https://taskfile.dev/#/usage">https://taskfile.dev/#/usage</a></p>

<h2>Thanks</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Logging With Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/07/31/basic-logging-with-python/"/>
    <updated>2021-07-31T04:17:24-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/07/31/basic-logging-with-python</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/ruanbekker-header-photo.png" alt="" /></p>

<p>I&rsquo;m trying to force myself to move away from using the <code>print()</code> function as I&rsquo;m pretty much using print all the time to cater for logging, and using the <code>logging</code> package instead.</p>

<p>This is a basic example of using logging in a basic python app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">logging</span>
</span><span class='line'>
</span><span class='line'><span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span>
</span><span class='line'>    <span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">INFO</span><span class="p">,</span>
</span><span class='line'>    <span class="n">format</span><span class="o">=</span><span class="s">&quot;</span><span class="si">%(asctime)s</span><span class="s"> [</span><span class="si">%(levelname)s</span><span class="s">] </span><span class="si">%(name)s</span><span class="s"> </span><span class="si">%(message)s</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">handlers</span><span class="o">=</span><span class="p">[</span>
</span><span class='line'>        <span class="n">logging</span><span class="o">.</span><span class="n">StreamHandler</span><span class="p">()</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">messagestring</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;info&#39;</span><span class="p">:</span> <span class="s">&#39;info message&#39;</span><span class="p">,</span> <span class="s">&#39;warn&#39;</span><span class="p">:</span> <span class="s">&#39;this is a warning&#39;</span><span class="p">,</span> <span class="s">&#39;err&#39;</span><span class="p">:</span> <span class="s">&#39;this is a error&#39;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="s">&#39;thisapp&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;message: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">messagestring</span><span class="p">[</span><span class="s">&#39;info&#39;</span><span class="p">]))</span>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span><span class="s">&#39;message: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">messagestring</span><span class="p">[</span><span class="s">&#39;warn&#39;</span><span class="p">]))</span>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s">&#39;message: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">messagestring</span><span class="p">[</span><span class="s">&#39;err&#39;</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>When running this example, this is the output that you will see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python app.py
</span><span class='line'>2021-07-19 13:07:43,647 <span class="o">[</span>INFO<span class="o">]</span> thisapp message: info message
</span><span class='line'>2021-07-19 13:07:43,647 <span class="o">[</span>WARNING<span class="o">]</span> thisapp message: this is a warning
</span><span class='line'>2021-07-19 13:07:43,647 <span class="o">[</span>ERROR<span class="o">]</span> thisapp message: this is a error
</span></code></pre></td></tr></table></div></figure>


<p>More more info on this package, see it&rsquo;s documentation:
- <a href="https://docs.python.org/3/library/logging.html">https://docs.python.org/3/library/logging.html</a></p>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Difference With ECS Task and Execution IAM Roles on AWS]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/07/31/difference-with-ecs-task-and-execution-iam-roles-on-aws/"/>
    <updated>2021-07-31T03:37:34-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/07/31/difference-with-ecs-task-and-execution-iam-roles-on-aws</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/ruanbekker-header-photo.png" alt="" /></p>

<p>In this post we will look at what the difference is between the <a href="https://docs.aws.amazon.com/AmazonECS/latest/userguide/task-iam-roles.html">AWS ECS Task Execution IAM Role</a> and the <a href="https://docs.aws.amazon.com/AmazonECS/latest/userguide/task-iam-roles.html">IAM Role for Tasks</a> and give a example policy to demonstrate.</p>

<h2>ECS Task Execution Role</h2>

<p>The ECS Execution Role is used by the ecs-agent which runs on ECS and is responsible for:
- Pulling down docker images from ECR
- Fetching the SSM Parameters from SSM for your Task (Secrets and LogConfigurations)
- Writing Logs to CloudWatch</p>

<p>The IAM Role has been configured that the Trusted Identity is ecs so only ECS is allowed to assume credentials from the IAM Policy that is associated to the Role.</p>

<p>The trusted identity in the IAM Role to be ecs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Principal&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Service&quot;</span><span class="p">:</span> <span class="s2">&quot;ecs-tasks.amazonaws.com&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="s2">&quot;sts:AssumeRole&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and the policy will look like this more or less for a example service, I am demonstrating my-dev-service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;ecr:GetAuthorizationToken&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;ecr:BatchCheckLayerAvailability&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;ecr:GetDownloadUrlForLayer&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;ecr:BatchGetImage&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;logs:CreateLogStream&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;logs:PutLogEvents&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;SSMGetParameters&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;ssm:GetParameter&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="s2">&quot;arn:aws:ssm:eu-west-1:*:parameter/my-service/dev/*&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;KMSDecryptParametersWithKey&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;kms:GetPublicKey&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;kms:Decrypt&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;kms:GenerateDataKey&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;kms:DescribeKey&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the ECS Task Definition the role arn is specified as <code>"executionRoleArn"</code> in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;family&quot;</span><span class="p">:</span> <span class="s2">&quot;my-dev-service&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;executionRoleArn&quot;</span><span class="p">:</span><span class="s2">&quot;arn:aws:iam::000000000000:role/ecs-exec-role&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;taskRoleArn&quot;</span><span class="p">:</span><span class="s2">&quot;arn:aws:iam::000000000000:role/ecs-task-role&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;containerDefinitions&quot;</span><span class="p">:</span> <span class="p">[]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ECS Task Role</h2>

<p>The ECS Task Role is used by the service that is deployed to ECS, so this will be your application requiring access to SQS as an example</p>

<p>Same as before, we set the trusted identity in the IAM Role to be ecs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Principal&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Service&quot;</span><span class="p">:</span> <span class="s2">&quot;ecs-tasks.amazonaws.com&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="s2">&quot;sts:AssumeRole&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So only the ECS tasks using the role is allowed to assume credentials from the IAM Role, and the policy associated to the role, can look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;AllowDevSQS&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;sqs:GetQueueUrl&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;sqs:ReceiveMessage&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;sqs:SendMessage&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;sqs:ChangeMessageVisibility&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;arn:aws:sqs:eu-west-1:000000000000:dev-pending-queue&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;arn:aws:sqs:eu-west-1:000000000000:dev-confirmed-queue&quot;</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The role arn will be specified in <code>"taskRoleArn"</code> from the following in the ECS Task Definition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;family&quot;</span><span class="p">:</span> <span class="s2">&quot;my-dev-service&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;executionRoleArn&quot;</span><span class="p">:</span><span class="s2">&quot;arn:aws:iam::000000000000:role/ecs-exec-role&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;taskRoleArn&quot;</span><span class="p">:</span><span class="s2">&quot;arn:aws:iam::000000000000:role/ecs-task-role&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;containerDefinitions&quot;</span><span class="p">:</span> <span class="p">[]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Application Code</h2>

<p>In your application you don’t need to reference any aws access keys as the role will assume credentials for you by the SDK, with python a short example will be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="n">sqs</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">region_name</span><span class="o">=</span><span class="s">&#39;eu-west-1&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s">&#39;sqs&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Thanks</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Java 11 and Maven on Ubuntu Linux]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/07/12/install-java-11-and-maven-on-ubuntu-linux/"/>
    <updated>2021-07-12T02:36:32-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/07/12/install-java-11-and-maven-on-ubuntu-linux</id>
    <content type="html"><![CDATA[<p>In this short tutorial I will show you how to prepare your environment for Java 11 and Maven on Ubuntu for Linux.</p>

<h2>Install</h2>

<p>Update your package manager and install OpenJDK 11:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt update
</span><span class='line'>sudo apt install openjdk-11-jdk -y
</span></code></pre></td></tr></table></div></figure>


<p>Verify that Java is installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>java -version
</span><span class='line'>openjdk version <span class="s2">&quot;11.0.11&quot;</span> 2021-04-20
</span><span class='line'>OpenJDK Runtime Environment <span class="o">(</span>build 11.0.11+9-Ubuntu-0ubuntu2.20.04<span class="o">)</span>
</span><span class='line'>OpenJDK 64-Bit Server VM <span class="o">(</span>build 11.0.11+9-Ubuntu-0ubuntu2.20.04, mixed mode, sharing<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once Java is installed, we can install Maven, first switch to the root user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo su
</span></code></pre></td></tr></table></div></figure>


<p>I will be using maven version <code>3.6.2</code>, so adjust accordingly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ MAVEN_HOME</span><span class="o">=</span><span class="s2">&quot;/opt/maven&quot;</span>
</span><span class='line'><span class="nv">$ MAVEN_VERSION</span><span class="o">=</span>3.6.3
</span><span class='line'><span class="nv">$ MAVEN_CONFIG_HOME</span><span class="o">=</span><span class="s2">&quot;/root/.m2&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the directories, then download maven and extract:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir -p <span class="nv">$MAVEN_HOME</span>
</span><span class='line'><span class="nv">$ </span>curl -LSso /var/tmp/apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz https://apache.org/dist/maven/maven-3/<span class="nv">$MAVEN_VERSION</span>/binaries/apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz
</span><span class='line'><span class="nv">$ </span>tar xzvf /var/tmp/apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz -C <span class="nv">$MAVEN_HOME</span> --strip-components<span class="o">=</span>1
</span><span class='line'><span class="nv">$ </span>rm /var/tmp/apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz
</span><span class='line'><span class="nv">$ </span>update-alternatives --install /usr/bin/mvn mvn /opt/maven/bin/mvn 10000
</span><span class='line'><span class="nv">$ </span>mkdir -p <span class="nv">$MAVEN_CONFIG_HOME</span>
</span></code></pre></td></tr></table></div></figure>


<p>Set the environment variables for maven:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /etc/profile.d/custom.sh
</span><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">export </span><span class="nv">MAVEN_HOME</span><span class="o">=</span><span class="s2">&quot;/opt/maven&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">MAVEN_VERSION</span><span class="o">=</span>3.6.3
</span><span class='line'><span class="nb">export </span><span class="nv">MAVEN_CONFIG_HOME</span><span class="o">=</span><span class="s2">&quot;/root/.m2&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then make the file executable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>chmod +x /etc/profile.d/custom.sh
</span></code></pre></td></tr></table></div></figure>


<p>Verify that maven is installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mvn -version
</span><span class='line'>Apache Maven 3.6.3 <span class="o">(</span>cecedd343002696d0abb50b32b541b8a6ba2883f<span class="o">)</span>
</span><span class='line'>Maven home: /opt/maven
</span><span class='line'>Java version: 11.0.11, vendor: Ubuntu, runtime: /usr/lib/jvm/java-11-openjdk-amd64
</span><span class='line'>Default locale: en, platform encoding: UTF-8
</span><span class='line'>OS name: <span class="s2">&quot;linux&quot;</span>, version: <span class="s2">&quot;5.4.0-1041-aws&quot;</span>, arch: <span class="s2">&quot;amd64&quot;</span>, family: <span class="s2">&quot;unix&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Crypto Digibyte Full Node on Linux]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/05/03/setup-a-crypto-digibyte-full-node-on-linux/"/>
    <updated>2021-05-03T17:14:49-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/05/03/setup-a-crypto-digibyte-full-node-on-linux</id>
    <content type="html"><![CDATA[<p><img src="https://upload.wikimedia.org/wikipedia/en/8/8f/DigiByte_logo.svg" alt="" /></p>

<p>In this tutorial I will show you how to setup a digibyte (DGB) Full Node on Linux and show you how to interact with your wallet and the blockchain.</p>

<h2>What is a Full Node</h2>

<p>By running a Full Node, you contribute by helping to fully validate transactions and blocks. Almost all full nodes also help the network by accepting transactions and blocks from other full nodes, validating those transactions and blocks and then relaying them to other full nodes. Therefore you are contributing to maintaining the consensus of the blockchain.</p>

<h2>Hardware Requirements</h2>

<p>In order to run a full digibyte node you will need a server that is preferrably online 24/7 and that you have an uncapped connection as at the time of writing the digibyte blockchain is about 25GB in size but increases over time. I also used a server with 2vCPU&rsquo;s and 4GB of memory.</p>

<h2>Setup the Pre-Requisites</h2>

<p>First create the user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>useradd -G sudo digibyte -m -s /bin/bash
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;digibyte ALL=(ALL:ALL) NOPASSWD: ALL&quot;</span> <span class="p">|</span> sudo tee /etc/sudoers.d/no-sudo-password-for-digibyte
</span></code></pre></td></tr></table></div></figure>


<p>Create the configuration directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir -p /etc/digibyte /var/lib/digibyte
</span></code></pre></td></tr></table></div></figure>


<p>Create the digibyte configuration file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat <span class="s">&lt;&lt;EOF &gt; /etc/digibyte/digibyte.conf</span>
</span><span class='line'><span class="s">daemon=1</span>
</span><span class='line'><span class="s">maxconnections=300</span>
</span><span class='line'><span class="s">disablewallet=0</span>
</span><span class='line'><span class="s">rpcuser=jsonrpc</span>
</span><span class='line'><span class="s">rpcpassword=$(openssl rand -base64 18)</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Download the Software</h2>

<p>Get the <a href="https://github.com/DigiByte-Core/digibyte/releases">latest</a> release, but at the time of writing v7.17.2 is the latest:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget https://github.com/DigiByte-Core/digibyte/releases/download/v7.17.2/digibyte-7.17.2-x86_64-linux-gnu.tar.gz
</span><span class='line'><span class="nv">$ </span>tar -xf digibyte-7.17.2-x86_64-linux-gnu.tar.gz
</span><span class='line'><span class="nv">$ </span>mv digibyte-7.17.2 /usr/local/digibyte-7.17.2
</span></code></pre></td></tr></table></div></figure>


<p>Then symbolic link the version directory to digibyte:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ln -s /usr/local/digibyte-7.17.2 /usr/local/digibyte
</span></code></pre></td></tr></table></div></figure>


<h2>SystemD</h2>

<p>Create the systemd unit file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat <span class="s">&lt;&lt;EOF &gt; /etc/systemd/system/digibyted.service</span>
</span><span class='line'><span class="s">[Unit]</span>
</span><span class='line'><span class="s">Description=DigiByte&#39;s distributed currency daemon</span>
</span><span class='line'><span class="s">After=network.target</span>
</span><span class='line'>
</span><span class='line'><span class="s">[Service]</span>
</span><span class='line'><span class="s">User=digibyte</span>
</span><span class='line'><span class="s">Group=digibyte</span>
</span><span class='line'>
</span><span class='line'><span class="s">Type=forking</span>
</span><span class='line'><span class="s">PIDFile=/etc/digibyte/digibyted.pid</span>
</span><span class='line'><span class="s">ExecStart=/usr/local/digibyte/bin/digibyted -daemon -pid=/etc/digibyte/digibyted.pid \</span>
</span><span class='line'><span class="s">  -conf=/etc/digibyte/digibyte.conf -datadir=/var/lib/digibyte -deprecatedrpc=accounts </span>
</span><span class='line'>
</span><span class='line'><span class="s">Restart=always</span>
</span><span class='line'><span class="s">PrivateTmp=true</span>
</span><span class='line'><span class="s">TimeoutStopSec=60s</span>
</span><span class='line'><span class="s">TimeoutStartSec=2s</span>
</span><span class='line'><span class="s">StartLimitInterval=120s</span>
</span><span class='line'><span class="s">StartLimitBurst=5</span>
</span><span class='line'>
</span><span class='line'><span class="s">[Install]</span>
</span><span class='line'><span class="s">WantedBy=multi-user.target</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>Change the ownerships to digibyte:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>chown -R digibyte:digibyte /etc/digibyte /var/lib/digibyte
</span></code></pre></td></tr></table></div></figure>


<p>Enable and start the service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>systemctl <span class="nb">enable </span>digibyted.service
</span><span class='line'><span class="nv">$ </span>systemctl start digibyted.service
</span></code></pre></td></tr></table></div></figure>


<p>Check the log:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tail -f /var/lib/digibyte/debug.log
</span></code></pre></td></tr></table></div></figure>


<h2>Interact with the Node</h2>

<p>Check the uptime:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST -H <span class="s1">&#39;Content-Type: application/json&#39;</span> -u <span class="s2">&quot;jsonrpc:$PASSWORD&quot;</span> http://localhost:14022 -d <span class="s1">&#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;: &quot;curl&quot;, &quot;method&quot;: &quot;uptime&quot;, &quot;params&quot;: []}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check the wallet address:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST -H <span class="s1">&#39;Content-Type: application/json&#39;</span> -u <span class="s2">&quot;jsonrpc:$PASSWORD&quot;</span> http://localhost:14022 -d <span class="s1">&#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;: &quot;curl&quot;, &quot;method&quot;: &quot;getaccountaddress&quot;, &quot;params&quot;: []}&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;result&quot;</span>:<span class="s2">&quot;D7ZznMe4NyEkXd6zA6MB3GYXiAURo64hNs&quot;</span>,<span class="s2">&quot;error&quot;</span>:null,<span class="s2">&quot;id&quot;</span>:<span class="s2">&quot;curl&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Get the account balance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST -H <span class="s1">&#39;Content-Type: application/json&#39;</span> -u <span class="s2">&quot;jsonrpc:$PASSWORD&quot;</span> http://localhost:14022 -d <span class="s1">&#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;: &quot;curl&quot;, &quot;method&quot;: &quot;getbalance&quot;, &quot;params&quot;: []}&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;result&quot;</span>:0.00000000,<span class="s2">&quot;error&quot;</span>:null,<span class="s2">&quot;id&quot;</span>:<span class="s2">&quot;curl&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the digibyte-cli:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>/usr/local/digibyte/bin/digibyte-cli -getinfo
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;version&quot;</span>: 7170200,
</span><span class='line'>  <span class="s2">&quot;protocolversion&quot;</span>: 70017,
</span><span class='line'>  <span class="s2">&quot;walletversion&quot;</span>: 169900,
</span><span class='line'>  <span class="s2">&quot;balance&quot;</span>: 0.00000000,
</span><span class='line'>  <span class="s2">&quot;blocks&quot;</span>: 183019,
</span><span class='line'>  <span class="s2">&quot;timeoffset&quot;</span>: 0,
</span><span class='line'>  <span class="s2">&quot;connections&quot;</span>: 8,
</span><span class='line'>  <span class="s2">&quot;proxy&quot;</span>: <span class="s2">&quot;&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;difficulty&quot;</span>: null,
</span><span class='line'>  <span class="s2">&quot;testnet&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>  <span class="s2">&quot;keypoololdest&quot;</span>: 1619558662,
</span><span class='line'>  <span class="s2">&quot;keypoolsize&quot;</span>: 1000,
</span><span class='line'>  <span class="s2">&quot;paytxfee&quot;</span>: 0.00000000,
</span><span class='line'>  <span class="s2">&quot;relayfee&quot;</span>: 0.00001000,
</span><span class='line'>  <span class="s2">&quot;warnings&quot;</span>: <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Making a Transaction to my Wallet</h2>

<p>Let&rsquo;s make a transaction to my wallet node from a crypto currency exchange where I have digibyte, so first to get the wallet address where we would like to deposit the crypto currency:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST -H <span class="s1">&#39;Content-Type: application/json&#39;</span> -u <span class="s2">&quot;jsonrpc:$PASSWORD&quot;</span> http://localhost:14022 -d <span class="s1">&#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;: &quot;curl&quot;, &quot;method&quot;: &quot;getaccountaddress&quot;, &quot;params&quot;: []}&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;result&quot;</span>:<span class="s2">&quot;D7ZznMe4NyEkXd6zA6MB3GYXiAURo64hNs&quot;</span>,<span class="s2">&quot;error&quot;</span>:null,<span class="s2">&quot;id&quot;</span>:<span class="s2">&quot;curl&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>From a exchange where you have DGB, withdraw to the address DN8RMAUz2yHGW1PuuLtiSkiTZARzMJ4L2A which is your wallet on the node (ensure you have enough to cover the transaction fee).</p>

<p>Once the transaction has enough confirmations, have a look at your wallet balance, and you will see the 5 DGB that I sent to my wallet can be seen:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -H <span class="s1">&#39;Content-Type: application/json&#39;</span> -u <span class="s2">&quot;jsonrpc:$PASSWORD&quot;</span> http://localhost:14022 -d <span class="s1">&#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;: &quot;curl&quot;, &quot;method&quot;: &quot;getbalance&quot;, &quot;params&quot;: [&quot;&quot;]}&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;result&quot;</span>:5.00000000,<span class="s2">&quot;error&quot;</span>:null,<span class="s2">&quot;id&quot;</span>:<span class="s2">&quot;curl&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve setup a software wallet on my pc, and from DGB I selected receive and copied my DGB software wallet address, now I would like to transfer my funds from my node wallet to my software wallet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -H <span class="s1">&#39;Content-Type: application/json&#39;</span> -u <span class="s2">&quot;jsonrpc:$PASSWORD&quot;</span> http://localhost:14022 -d <span class="s1">&#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curl&quot;, &quot;method&quot;: &quot;sendtoaddress&quot;, &quot;params&quot;: [&quot;DTqHG9KA3oQAywq18gpBknxHXHZviyYdvS&quot;, 5.0, &quot;donation&quot;, &quot;happy bday&quot;] }&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;result&quot;</span>:null,<span class="s2">&quot;error&quot;</span>:<span class="o">{</span><span class="s2">&quot;code&quot;</span>:-4,<span class="s2">&quot;message&quot;</span>:<span class="s2">&quot;Error: This transaction requires a transaction fee of at least 0.0004324&quot;</span><span class="o">}</span>,<span class="s2">&quot;id&quot;</span>:<span class="s2">&quot;curl&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see I don&rsquo;t have enough in my nodes wallet to make the transaction, therefore I need to keep the transaction cost in consideration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python3 -c <span class="s1">&#39;print(5.0-0.0004324)&#39;</span>
</span><span class='line'>4.9995676
</span></code></pre></td></tr></table></div></figure>


<p>So let&rsquo;s send <code>4.998</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -H <span class="s1">&#39;Content-Type: application/json&#39;</span> -u <span class="s2">&quot;jsonrpc:$PASSWORD&quot;</span> http://localhost:14022 -d <span class="s1">&#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curl&quot;, &quot;method&quot;: &quot;sendtoaddress&quot;, &quot;params&quot;: [&quot;DTqHG9KA3oQAywq18gpBknxHXHZviyYdvS&quot;, 4.998, &quot;donation&quot;, &quot;happy bday&quot;] }&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;result&quot;</span>:<span class="s2">&quot;260e49b72f17f42f5a6c858e5403e23b5382000650997292e7e79f1535f5c4d0&quot;</span>,<span class="s2">&quot;error&quot;</span>:null,<span class="s2">&quot;id&quot;</span>:<span class="s2">&quot;curl&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see we are getting back a transaction id which we can use later to check up on. A couple of seconds later I received a notification on my software wallet that my funds were received:</p>

<p><img src="https://user-images.githubusercontent.com/567298/116690769-2aae2880-a9ba-11eb-8735-3fd1f0cc9ece.png" alt="" /></p>

<p>First, using our software wallet&rsquo;s address we can look it up:
- <a href="https://digiexplorer.info/address/DTqHG9KA3oQAywq18gpBknxHXHZviyYdvS">https://digiexplorer.info/address/DTqHG9KA3oQAywq18gpBknxHXHZviyYdvS</a></p>

<p>And it should look like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/116691497-29313000-a9bb-11eb-962d-0427a560718a.png" alt="" /></p>

<p>We can also lookup the transaction id:
- <a href="https://digiexplorer.info/tx/260e49b72f17f42f5a6c858e5403e23b5382000650997292e7e79f1535f5c4d0">https://digiexplorer.info/tx/260e49b72f17f42f5a6c858e5403e23b5382000650997292e7e79f1535f5c4d0</a></p>

<p>And it should look like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/116691773-9ba21000-a9bb-11eb-978e-58be3a8be045.png" alt="" /></p>

<h2>Resources</h2>

<p>RPC Docs:
- <a href="https://developer.bitcoin.org/reference/rpc/index.html">https://developer.bitcoin.org/reference/rpc/index.html</a>
- <a href="https://chainquery.com/bitcoin-cli">https://chainquery.com/bitcoin-cli</a></p>

<p>Digibyte Config:
- <a href="https://github.com/digibyte/digibyte/blob/master/contrib/debian/examples/digibyte.conf">https://github.com/digibyte/digibyte/blob/master/contrib/debian/examples/digibyte.conf</a></p>

<p>REST Config:
- <a href="https://github.com/digibyte/digibyte/blob/master/doc/REST-interface.md">https://github.com/digibyte/digibyte/blob/master/doc/REST-interface.md</a></p>

<p>Resources:
- <a href="https://digibytewallets.com/">https://digibytewallets.com/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Concourse CI V6 on Ubuntu 20.04]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/04/06/install-concourse-ci-v6-on-ubuntu-20-dot-04/"/>
    <updated>2021-04-06T17:56:38-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/04/06/install-concourse-ci-v6-on-ubuntu-20-dot-04</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/gzkdu9.jpg?nocache=1511644783495" alt="" /></p>

<p>Concourse is a Pipeline Based Continious Integration system written in Go</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://concourse-ci.org/">https://concourse-ci.org/</a></li>
<li><a href="https://github.com/concourse/concourse">https://github.com/concourse/concourse</a></li>
<li><a href="https://github.com/starkandwayne/concourse-tutorial">https://github.com/starkandwayne/concourse-tutorial</a></li>
</ul>


<h2>Older Version</h2>

<p>An older version is available:</p>

<ul>
<li><a href="https://blog.ruanbekker.com/blog/2017/11/07/setup-a-concourse-ci-server-on-ubuntu-16/">Setup Concourse CI v4 on Ubuntu 16.04</a></li>
</ul>


<h2>What is Concourse CI:</h2>

<p>Concourse CI is a Continious Integration Platform. Concourse enables you to construct pipelines with a yaml configuration that can consist out of 3 core concepts, tasks, resources, and jobs that compose them. For more information about this have a look at their <a href="https://concourse.ci/concepts.html">docs</a></p>

<h2>What will we be doing today</h2>

<p>We will setup a Concourse CI Server v6.7.6 (web and worker) on Ubuntu 20.04 and run the traditional <code>Hello, World</code> pipeline</p>

<h2>Setup the Server:</h2>

<p>Concourse needs <code>PostgresSQL</code> server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt update <span class="o">&amp;&amp;</span> apt upgrade -y
</span><span class='line'><span class="nv">$ </span>apt install postgresql postgresql-contrib -y
</span><span class='line'><span class="nv">$ </span>systemctl <span class="nb">enable </span>postgresql
</span></code></pre></td></tr></table></div></figure>


<p>Create the Database and User for Concourse on Postgres:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo -u postgres createuser concourse
</span><span class='line'><span class="nv">$ </span>sudo -u postgres createdb --owner<span class="o">=</span>concourse atc
</span></code></pre></td></tr></table></div></figure>


<p>Download the Concourse and Fly Cli Binaries:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget https://github.com/concourse/concourse/releases/download/v6.7.6/concourse-6.7.6-linux-amd64.tgz
</span><span class='line'><span class="nv">$ </span>wget https://github.com/concourse/concourse/releases/download/v6.7.6/fly-6.7.6-linux-amd64.tgz
</span><span class='line'><span class="nv">$ </span>tar -xvf concourse-6.7.6-linux-amd64.tgz -C /usr/local/
</span><span class='line'><span class="nv">$ </span>tar -xvf fly-6.7.6-linux-amd64.tgz
</span><span class='line'><span class="nv">$ </span>mv fly /usr/bin/fly
</span><span class='line'><span class="nv">$ </span>rm -rf concourse-6.7.6-linux-amd64.tgz fly-6.7.6-linux-amd64.tgz
</span></code></pre></td></tr></table></div></figure>


<p>Create the Encryption Keys:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir /etc/concourse
</span><span class='line'><span class="nv">$ </span>ssh-keygen -t rsa -q -N <span class="s1">&#39;&#39;</span> -f /etc/concourse/tsa_host_key
</span><span class='line'><span class="nv">$ </span>ssh-keygen -t rsa -q -N <span class="s1">&#39;&#39;</span> -f /etc/concourse/worker_key
</span><span class='line'><span class="nv">$ </span>ssh-keygen -t rsa -q -N <span class="s1">&#39;&#39;</span> -f /etc/concourse/session_signing_key
</span><span class='line'><span class="nv">$ </span>cp /etc/concourse/worker_key.pub /etc/concourse/authorized_worker_keys
</span></code></pre></td></tr></table></div></figure>


<p>Concourse Web Process Configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /etc/concourse/web_environment
</span><span class='line'>
</span><span class='line'><span class="nv">PATH</span><span class="o">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/concourse/bin
</span><span class='line'><span class="nv">CONCOURSE_ADD_LOCAL_USER</span><span class="o">=</span>ruan:pass
</span><span class='line'><span class="nv">CONCOURSE_SESSION_SIGNING_KEY</span><span class="o">=</span>/etc/concourse/session_signing_key
</span><span class='line'><span class="nv">CONCOURSE_TSA_HOST_KEY</span><span class="o">=</span>/etc/concourse/tsa_host_key
</span><span class='line'><span class="nv">CONCOURSE_TSA_AUTHORIZED_KEYS</span><span class="o">=</span>/etc/concourse/authorized_worker_keys
</span><span class='line'><span class="nv">CONCOURSE_POSTGRES_HOST</span><span class="o">=</span>127.0.0.1
</span><span class='line'><span class="nv">CONCOURSE_POSTGRES_USER</span><span class="o">=</span>concourse
</span><span class='line'><span class="nv">CONCOURSE_POSTGRES_PASSWORD</span><span class="o">=</span>concourse
</span><span class='line'><span class="nv">CONCOURSE_POSTGRES_DATABASE</span><span class="o">=</span>atc
</span><span class='line'><span class="nv">CONCOURSE_MAIN_TEAM_LOCAL_USER</span><span class="o">=</span>ruan
</span><span class='line'><span class="nv">CONCOURSE_EXTERNAL_URL</span><span class="o">=</span>http://10.20.30.40:8080 <span class="c"># replace this with your ip address</span>
</span></code></pre></td></tr></table></div></figure>


<p>Concourse Worker Process Configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /etc/concourse/worker_environment
</span><span class='line'>
</span><span class='line'><span class="nv">PATH</span><span class="o">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/concourse/bin
</span><span class='line'><span class="nv">CONCOURSE_WORK_DIR</span><span class="o">=</span>/var/lib/concourse
</span><span class='line'><span class="nv">CONCOURSE_TSA_HOST</span><span class="o">=</span>127.0.0.1:2222
</span><span class='line'><span class="nv">CONCOURSE_TSA_PUBLIC_KEY</span><span class="o">=</span>/etc/concourse/tsa_host_key.pub
</span><span class='line'><span class="nv">CONCOURSE_TSA_WORKER_PRIVATE_KEY</span><span class="o">=</span>/etc/concourse/worker_key
</span><span class='line'><span class="nv">CONCOURSE_GARDEN_DNS_SERVER</span><span class="o">=</span>8.8.8.8
</span></code></pre></td></tr></table></div></figure>


<p>Create a Concourse user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir /var/lib/concourse
</span><span class='line'><span class="nv">$ </span>sudo adduser --system --group concourse
</span><span class='line'><span class="nv">$ </span>sudo chown -R concourse:concourse /etc/concourse /var/lib/concourse
</span><span class='line'><span class="nv">$ </span>sudo chmod <span class="m">600</span> /etc/concourse/*_environment
</span></code></pre></td></tr></table></div></figure>


<p>Create SystemD Unit Files, first for the Web Service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /etc/systemd/system/concourse-web.service
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Unit<span class="o">]</span>
</span><span class='line'><span class="nv">Description</span><span class="o">=</span>Concourse CI web process <span class="o">(</span>ATC and TSA<span class="o">)</span>
</span><span class='line'><span class="nv">After</span><span class="o">=</span>postgresql.service
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Service<span class="o">]</span>
</span><span class='line'><span class="nv">User</span><span class="o">=</span>concourse
</span><span class='line'><span class="nv">Restart</span><span class="o">=</span>on-failure
</span><span class='line'><span class="nv">EnvironmentFile</span><span class="o">=</span>/etc/concourse/web_environment
</span><span class='line'><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/concourse web
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Install<span class="o">]</span>
</span><span class='line'><span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</span></code></pre></td></tr></table></div></figure>


<p>Then the SystemD Unit File for the Worker Service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /etc/systemd/system/concourse-worker.service
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Unit<span class="o">]</span>
</span><span class='line'><span class="nv">Description</span><span class="o">=</span>Concourse CI worker process
</span><span class='line'><span class="nv">After</span><span class="o">=</span>concourse-web.service
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Service<span class="o">]</span>
</span><span class='line'><span class="nv">User</span><span class="o">=</span>root
</span><span class='line'><span class="nv">Restart</span><span class="o">=</span>on-failure
</span><span class='line'><span class="nv">EnvironmentFile</span><span class="o">=</span>/etc/concourse/worker_environment
</span><span class='line'><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/concourse worker
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Install<span class="o">]</span>
</span><span class='line'><span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</span></code></pre></td></tr></table></div></figure>


<p>Create a postgres password for the concourse user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /home/concourse/
</span><span class='line'><span class="nv">$ </span>sudo -u concourse psql atc
</span><span class='line'><span class="nv">atc</span><span class="o">=</span>&gt; ALTER USER concourse WITH PASSWORD <span class="s1">&#39;concourse&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">atc</span><span class="o">=</span>&gt; <span class="se">\q</span>
</span></code></pre></td></tr></table></div></figure>


<p>Start and Enable the Services:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>systemctl start concourse-web concourse-worker
</span><span class='line'><span class="nv">$ </span>systemctl <span class="nb">enable </span>concourse-web concourse-worker postgresql
</span><span class='line'><span class="nv">$ </span>systemctl status concourse-web concourse-worker
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>systemctl is-active concourse-worker concourse-web
</span><span class='line'>active
</span><span class='line'>active
</span></code></pre></td></tr></table></div></figure>


<p>The listening ports should more or less look like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>netstat -tulpn
</span><span class='line'>
</span><span class='line'>Active Internet connections <span class="o">(</span>only servers<span class="o">)</span>
</span><span class='line'>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.1:7777          0.0.0.0:*               LISTEN      4530/concourse
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.1:7788          0.0.0.0:*               LISTEN      4530/concourse
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.1:8079          0.0.0.0:*               LISTEN      4525/concourse
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:22              0.0.0.0:*               LISTEN      1283/sshd
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.1:5432          0.0.0.0:*               LISTEN      4047/postgres
</span><span class='line'>tcp6       <span class="m">0</span>      <span class="m">0</span> :::36159                :::*                    LISTEN      4525/concourse
</span><span class='line'>tcp6       <span class="m">0</span>      <span class="m">0</span> :::46829                :::*                    LISTEN      4525/concourse
</span><span class='line'>tcp6       <span class="m">0</span>      <span class="m">0</span> :::2222                 :::*                    LISTEN      4525/concourse
</span><span class='line'>tcp6       <span class="m">0</span>      <span class="m">0</span> :::8080                 :::*                    LISTEN      4525/concourse
</span><span class='line'>tcp6       <span class="m">0</span>      <span class="m">0</span> :::22                   :::*                    LISTEN      1283/sshd
</span><span class='line'>udp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:68              0.0.0.0:*                           918/dhclient
</span><span class='line'>udp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:42165           0.0.0.0:*                           4530/concourse
</span></code></pre></td></tr></table></div></figure>


<h2>Client Side:</h2>

<p>I will be using a the Fly cli from a Mac, so first we need to download the fly-cli for Mac:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget https://github.com/concourse/concourse/releases/download/v6.7.6/fly-6.7.6-darwin-amd64.tgz
</span><span class='line'><span class="nv">$ </span>tar -xvf fly-6.7.6-darwin-amd64.tgz
</span><span class='line'><span class="nv">$ </span>sudo mv fly /usr/local/bin/fly
</span><span class='line'><span class="nv">$ </span>rm -rf fly-6.7.6-darwin-amd64.tgz
</span></code></pre></td></tr></table></div></figure>


<p>Next, we need to setup our Concourse Target by Authenticating against our Concourse Endpoint, lets setup our target with the name <code>ci</code>, and make sure to replace the ip address with the ip of your concourse server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci login -c http://10.20.30.40:8080
</span><span class='line'>logging in to team <span class="s1">&#39;main&#39;</span>
</span><span class='line'>
</span><span class='line'>navigate to the following URL in your browser:
</span><span class='line'>
</span><span class='line'>  http://10.20.30.40:8080/login?fly_port<span class="o">=</span>42181
</span><span class='line'>
</span><span class='line'>or enter token manually <span class="o">(</span>input hidden<span class="o">)</span>:
</span><span class='line'>target saved
</span></code></pre></td></tr></table></div></figure>


<p>Lets list our targets:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly targets
</span><span class='line'>name  url                        team  expiry
</span><span class='line'>ci    http://10.20.30.40:8080    main  Wed, <span class="m">08</span> Nov <span class="m">2021</span> 15:32:59 UTC
</span></code></pre></td></tr></table></div></figure>


<p>Listing Registered Workers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci workers
</span><span class='line'>name              containers  platform  tags  team  state    version
</span><span class='line'>10.20.30.40       <span class="m">0</span>           linux     none  none  running  1.2
</span></code></pre></td></tr></table></div></figure>


<p>Listing Active Containers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci containers
</span><span class='line'>handle                                worker            pipeline     job            build <span class="c">#  build id  type   name                  attempt</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Hello World Pipeline:</h2>

<p>Let&rsquo;s create a basic pipeline, that will print out <code>Hello, World!</code>:</p>

<p>Our <code>hello-world.yml</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">jobs</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-job</span>
</span><span class='line'>  <span class="l-Scalar-Plain">plan</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">task</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">say-hello</span>
</span><span class='line'>    <span class="l-Scalar-Plain">config</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">platform</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linux</span>
</span><span class='line'>      <span class="l-Scalar-Plain">image_resource</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker-image</span>
</span><span class='line'>        <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">repository</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">alpine</span>
</span><span class='line'>          <span class="l-Scalar-Plain">tag</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">edge</span>
</span><span class='line'>      <span class="l-Scalar-Plain">run</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/bin/sh</span>
</span><span class='line'>        <span class="l-Scalar-Plain">args</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">-c</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="p-Indicator">|</span>
</span><span class='line'>          <span class="no">echo &quot;=============&quot;</span>
</span><span class='line'>          <span class="no">echo &quot;Hello, World!&quot;</span>
</span><span class='line'>          <span class="no">echo &quot;=============&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Applying the configuration to our pipeline:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci <span class="nb">set</span>-pipeline -p yeeehaa -c hello-world.yml
</span><span class='line'><span class="nb">jobs</span>:
</span><span class='line'>  job my-job has been added:
</span><span class='line'>    name: my-job
</span><span class='line'>    plan:
</span><span class='line'>    - task: say-hello
</span><span class='line'>      config:
</span><span class='line'>        platform: linux
</span><span class='line'>        image_resource:
</span><span class='line'>          <span class="nb">type</span>: docker-image
</span><span class='line'>          <span class="nb">source</span>:
</span><span class='line'>            repository: alpine
</span><span class='line'>            tag: edge
</span><span class='line'>        run:
</span><span class='line'>          path: /bin/sh
</span><span class='line'>          args:
</span><span class='line'>          - -c
</span><span class='line'>          - <span class="p">|</span>
</span><span class='line'>            <span class="nb">echo</span> <span class="s2">&quot;=============&quot;</span>
</span><span class='line'>            <span class="nb">echo</span> <span class="s2">&quot;Hello, World!&quot;</span>
</span><span class='line'>            <span class="nb">echo</span> <span class="s2">&quot;=============&quot;</span>
</span><span class='line'>
</span><span class='line'>apply configuration? <span class="o">[</span>yN<span class="o">]</span>: y
</span><span class='line'>pipeline created!
</span><span class='line'>you can view your pipeline here: http://10.20.30.40:8080/teams/main/pipelines/yeeehaa
</span><span class='line'>
</span><span class='line'>the pipeline is currently paused. to unpause, either:
</span><span class='line'>  - run the unpause-pipeline <span class="nb">command</span>
</span><span class='line'>  - click play next to the pipeline in the web ui
</span></code></pre></td></tr></table></div></figure>


<p>We can browse to the WebUI to unpause the pipeline, but since I like to do everything on cli as far as possible, I will unpause the pipeline via cli:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci unpause-pipeline -p yeeehaa
</span><span class='line'>unpaused <span class="s1">&#39;yeeehaa&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now our Pipeline is unpaused, but since we did not specify any triggers, we need to manually trigger the pipeline to run, you can either via the WebUI, select your pipeline which in this case will be named <code>yeeehaa</code> and then select the job, which will be <code>my-job</code> then hit the <code>+</code> sign, which will trigger the pipeline.</p>

<p>I will be using the cli:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci trigger-job --job yeeehaa/my-job
</span><span class='line'>started yeeehaa/my-job <span class="c">#1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Via the WebUI on <code>http://10.20.30.40:8080/teams/main/pipelines/yeeehaa/jobs/my-job/builds/1</code> you should see the <code>Hello, World!</code> output, or via the cli, we also have the option to see the output, so let&rsquo;s trigger it again, but this time passing the <code>--watch</code> flag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci trigger-job --job yeeehaa/my-job --watch
</span><span class='line'>started yeeehaa/my-job <span class="c">#2</span>
</span><span class='line'>
</span><span class='line'>initializing
</span><span class='line'>running /bin/sh -c <span class="nb">echo</span> <span class="s2">&quot;=============&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Hello, World!&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;=============&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">=============</span>
</span><span class='line'>Hello, World!
</span><span class='line'><span class="o">=============</span>
</span><span class='line'>succeeded
</span></code></pre></td></tr></table></div></figure>


<p>Listing our Workers and Containers again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci workers
</span><span class='line'>name              containers  platform  tags  team  state    version
</span><span class='line'>10.20.30.40       <span class="m">2</span>           linux     none  none  running  1.2
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>fly -t ci containers
</span><span class='line'>handle                                worker            pipeline     job         build <span class="c">#  build id  type   name           attempt</span>
</span><span class='line'>36982955-54fd-4c1b-57b8-216486c58db8  10.20.30.40       yeeehaa      my-job      <span class="m">2</span>        <span class="m">729</span>       task   say-hello      n/a
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wireguard VPN With Unbound ADS Blocking DNS]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/03/10/wireguard-vpn-with-unbound-ads-blocking-dns/"/>
    <updated>2021-03-10T00:59:51-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/03/10/wireguard-vpn-with-unbound-ads-blocking-dns</id>
    <content type="html"><![CDATA[<p>In this tutorial we will setup a Wireguard VPN with Unbound DNS Server with some additional configuration to block ads for any clients using the DNS Server while connected to the VPN.</p>

<p>A massive thank you to <a href="https://github.com/complexorganizations/wireguard-manager/blob/main/wireguard-server.sh">complexorganizations</a> for providing the source where this tuturial is based off.</p>

<h2>Install Packages</h2>

<p>I will be using Debian Buster for this installation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update
</span><span class='line'>$ apt upgrade -y
</span><span class='line'>$ apt update && apt install iptables curl coreutils bc jq sed e2fsprogs -y
</span><span class='line'>$ apt install linux-headers-"$(uname -r)" -y</span></code></pre></td></tr></table></div></figure>


<p>I want to disable IPv6, in my case I had to apply a couple of kernel parameter tweaks:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo net.ipv6.conf.all.disable_ipv6 = 1 &gt; /etc/sysctl.d/70-disable-ipv6.conf
</span><span class='line'>$ echo "net.ipv6.conf.$(ip -4 route ls | grep default | grep -Po '(?&lt;=dev )(\S+)' | head -1).disable_ipv6 = 1" &gt;&gt; /etc/sysctl.d/70-disable-ipv6.conf
</span><span class='line'>$ echo 'net.ipv4.ip_forward = 1' &gt; /etc/sysctl.d/60-enable-ip-forwarding.conf
</span><span class='line'>$ sysctl -p -f /etc/sysctl.d/70-disable-ipv6.conf
</span><span class='line'>$ sysctl -p -f /etc/sysctl.d/60-enable-ip-forwarding.conf</span></code></pre></td></tr></table></div></figure>


<h2>Environment Variables</h2>

<p>A couple of environment variables that we will reference during our installation, tweak where your setup differs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export NPROC=$(nproc)
</span><span class='line'>$ export SERVER_HOST=$(curl -s -4 ifconfig.co)
</span><span class='line'>$ export SERVER_PORT="51820"
</span><span class='line'>$ export MTU_CHOICE="1280"
</span><span class='line'>$ export NAT_CHOICE="25"
</span><span class='line'>$ export IPV4_SUBNET="10.7.0.0/24"
</span><span class='line'>$ export PRIVATE_SUBNET_V4=${IPV4_SUBNET}
</span><span class='line'>$ export GATEWAY_ADDRESS_V4="${PRIVATE_SUBNET_V4::-4}1"
</span><span class='line'>$ export PRIVATE_SUBNET_MASK_V4=$(echo "$PRIVATE_SUBNET_V4" | cut -d "/" -f 2)
</span><span class='line'>$ export CLIENT_DNS="$GATEWAY_ADDRESS_V4"
</span><span class='line'>$ export CLIENT_ALLOWED_IP="0.0.0.0/0"</span></code></pre></td></tr></table></div></figure>


<h2>Unbound Installation</h2>

<p>Download the unbound <code>root.hints</code> file from internic:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl https://www.internic.net/domain/named.cache --create-dirs -o /etc/unbound/root.hints</span></code></pre></td></tr></table></div></figure>


<p>Generate the <code>/etc/unbound/unbound.conf</code> config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo "include: \"/etc/unbound/unbound.conf.d/*.conf\"
</span><span class='line'>server:
</span><span class='line'>    num-threads: $NPROC
</span><span class='line'>    verbosity: 1
</span><span class='line'>    root-hints: /etc/unbound/root.hints
</span><span class='line'>    # auto-trust-anchor-file: /var/lib/unbound/root.key
</span><span class='line'>    interface: 0.0.0.0
</span><span class='line'>    interface: ::0
</span><span class='line'>    max-udp-size: 3072
</span><span class='line'>    access-control: 0.0.0.0/0                 refuse
</span><span class='line'>    access-control: $PRIVATE_SUBNET_V4               allow
</span><span class='line'>    access-control: 127.0.0.1                 allow
</span><span class='line'>    private-address: $PRIVATE_SUBNET_V4
</span><span class='line'>    hide-identity: yes
</span><span class='line'>    hide-version: yes
</span><span class='line'>    harden-glue: yes
</span><span class='line'>    harden-dnssec-stripped: yes
</span><span class='line'>    harden-referral-path: yes
</span><span class='line'>    unwanted-reply-threshold: 10000000
</span><span class='line'>    val-log-level: 1
</span><span class='line'>    cache-min-ttl: 1800
</span><span class='line'>    cache-max-ttl: 14400
</span><span class='line'>    prefetch: yes
</span><span class='line'>    qname-minimisation: yes
</span><span class='line'>    prefetch-key: yes
</span><span class='line'>    forward-zone:
</span><span class='line'>        name: \".\"
</span><span class='line'>        forward-addr: 1.1.1.1
</span><span class='line'>        forward-addr: 8.8.8.8" &gt;&gt; /etc/unbound/unbound.conf</span></code></pre></td></tr></table></div></figure>


<p>Download the host entries for all the ad servers which we will block:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/social/hosts -o /tmp/adblocking_hosts</span></code></pre></td></tr></table></div></figure>


<p>Include the ads configuration in <code>/etc/unbound/unbound.d/ads.conf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo "server:" &gt; /etc/unbound/unbound.conf.d/ads.conf
</span><span class='line'>$ cat /etc/unbound/adblocking_hosts | grep '^0\.0\.0\.0' | awk '{print "    local-zone: \""$2"\" redirect\n    local-data: \""$2" A 0.0.0.0\""}' &gt;&gt; /etc/unbound/unbound.conf.d/ads.conf</span></code></pre></td></tr></table></div></figure>


<p>Update the VPN Server&rsquo;s nameserver configuration to unbound:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chattr -i /etc/resolv.conf
</span><span class='line'>$ mv /etc/resolv.conf /etc/resolv.conf.old
</span><span class='line'>$ echo "nameserver 127.0.0.1" &gt;&gt;/etc/resolv.conf
</span><span class='line'>$ chattr +i /etc/resolv.conf</span></code></pre></td></tr></table></div></figure>


<p>Enable and Restart Unbound:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl enable unbound
</span><span class='line'>$ systemctl restart unbound</span></code></pre></td></tr></table></div></figure>


<p>Test if DNS Resolution works:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ dig google.com</span></code></pre></td></tr></table></div></figure>


<h2>Wireguard Installation</h2>

<p>Include the sources and install wireguard and its dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo "deb http://deb.debian.org/debian/ unstable main" &gt;&gt;/etc/apt/sources.list.d/unstable.list
</span><span class='line'>$ echo -e "Package: *\nPin: release a=unstable\nPin-Priority: 90"  &gt;&gt;/etc/apt/preferences.d/limit-unstable
</span><span class='line'>$ apt update
</span><span class='line'>$ apt install wireguard qrencode haveged ifupdown -y</span></code></pre></td></tr></table></div></figure>


<p>Set the environment variables and tweak where you need to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export SERVER_PRIVKEY=$(wg genkey)
</span><span class='line'>$ export SERVER_PUBKEY=$(echo "$SERVER_PRIVKEY" | wg pubkey)
</span><span class='line'>$ export CLIENT_NAME="ruan-pc"
</span><span class='line'>$ export CLIENT_PRIVKEY=$(wg genkey)
</span><span class='line'>$ export CLIENT_PUBKEY=$(echo "$CLIENT_PRIVKEY" | wg pubkey)
</span><span class='line'>$ export CLIENT_ADDRESS_V4="${PRIVATE_SUBNET_V4::-4}3"
</span><span class='line'>$ export PRESHARED_KEY=$(wg genpsk)
</span><span class='line'>$ export WIREGUARD_PUB_NIC="wg0"
</span><span class='line'>$ export PEER_PORT=$(shuf -i1024-65535 -n1)
</span><span class='line'>$ export WG_CONFIG="/etc/wireguard/$WIREGUARD_PUB_NIC.conf"</span></code></pre></td></tr></table></div></figure>


<p>Create the wireguard clients directory and create the config filename:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p /etc/wireguard/clients
</span><span class='line'>$ touch $WG_CONFIG && chmod 600 $WG_CONFIG</span></code></pre></td></tr></table></div></figure>


<p>Create the wireguard server config content and write it to the config file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo "# $PRIVATE_SUBNET_V4 $SERVER_HOST:$SERVER_PORT $SERVER_PUBKEY $CLIENT_DNS $MTU_CHOICE $NAT_CHOICE $CLIENT_ALLOWED_IP
</span><span class='line'>[Interface]
</span><span class='line'>Address = $GATEWAY_ADDRESS_V4/$PRIVATE_SUBNET_MASK_V4
</span><span class='line'>ListenPort = $SERVER_PORT
</span><span class='line'>PrivateKey = $SERVER_PRIVKEY
</span><span class='line'>PostUp = iptables -A FORWARD -i $WIREGUARD_PUB_NIC -o $SERVER_PUB_NIC -j ACCEPT; iptables -t nat -A POSTROUTING -o $SERVER_PUB_NIC -j MASQUERADE; iptables -A INPUT -s $PRIVATE_SUBNET_V4 -p udp -m udp --dport 53 -m conntrack --ctstate NEW -j ACCEPT
</span><span class='line'>PostDown = iptables -D FORWARD -i $WIREGUARD_PUB_NIC  -o $SERVER_PUB_NIC -j ACCEPT; iptables -t nat -D POSTROUTING -o $SERVER_PUB_NIC -j MASQUERADE; iptables -D INPUT -s $PRIVATE_SUBNET_V4 -p udp -m udp --dport 53 -m conntrack --ctstate NEW -j ACCEPT
</span><span class='line'>SaveConfig = false
</span><span class='line'># $CLIENT_NAME start
</span><span class='line'>[Peer]
</span><span class='line'>PublicKey = $CLIENT_PUBKEY
</span><span class='line'>PresharedKey = $PRESHARED_KEY
</span><span class='line'>AllowedIPs = $CLIENT_ADDRESS_V4/32
</span><span class='line'># $CLIENT_NAME end &gt;&gt;" &gt;&gt; $WG_CONFIG</span></code></pre></td></tr></table></div></figure>


<p>Create the client config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo "# $CLIENT_NAME
</span><span class='line'>[Interface]
</span><span class='line'>Address = $CLIENT_ADDRESS_V4/$PRIVATE_SUBNET_MASK_V4
</span><span class='line'>DNS = $CLIENT_DNS
</span><span class='line'>ListenPort = $PEER_PORT
</span><span class='line'>MTU = $MTU_CHOICE
</span><span class='line'>PrivateKey = $CLIENT_PRIVKEY
</span><span class='line'>[Peer]
</span><span class='line'>AllowedIPs = $CLIENT_ALLOWED_IP
</span><span class='line'>Endpoint = $SERVER_HOST:$SERVER_PORT
</span><span class='line'>PersistentKeepalive = $NAT_CHOICE
</span><span class='line'>PresharedKey = $PRESHARED_KEY
</span><span class='line'>PublicKey = $SERVER_PUBKEY" &gt;&gt; /etc/wireguard/clients/"$CLIENT_NAME"-$WIREGUARD_PUB_NIC.conf</span></code></pre></td></tr></table></div></figure>


<p>Restart and Enable Wireguard:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl enable wg-quick@$WIREGUARD_PUB_NIC
</span><span class='line'>$ systemctl restart wg-quick@$WIREGUARD_PUB_NIC</span></code></pre></td></tr></table></div></figure>


<h2>Connect your Client</h2>

<p>Head over to <a href="https://www.wireguard.com/install/">Wireguard.com</a> and install the client of your choice then generate a QR Code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ qrencode -t ansiutf8 -l L &lt;/etc/wireguard/clients/"$CLIENT_NAME"-$WIREGUARD_PUB_NIC.conf</span></code></pre></td></tr></table></div></figure>


<p>Configure your client and connect to the VPN, after the connection has been established you can have a look on the server for connection details with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wg show</span></code></pre></td></tr></table></div></figure>


<p>Once connected head over to a website with ads, such as <a href="https://www.speedtest.net/">https://www.speedtest.net/</a> and you should see no ads.</p>

<h2>Thanks</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH Using AWS SSM Session Manager]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/03/10/ssh-using-aws-ssm-session-manager/"/>
    <updated>2021-03-10T00:52:54-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/03/10/ssh-using-aws-ssm-session-manager</id>
    <content type="html"><![CDATA[<p>You can use SSM Session Manager to connect to your EC2 instances, as long as your EC2 instance has the associated IAM Role which includes the AmazonSSMManagedInstanceCore managed policy.</p>

<h2>AWS EC2 Console</h2>

<p>Head over to &ldquo;Connect&rdquo; and select &ldquo;Session Manager&rdquo;:</p>

<p><img src="https://user-images.githubusercontent.com/567298/103775580-e8da2a80-5036-11eb-9e00-0fd9b4d9d467.png" alt="image" /></p>

<p>You should get a shell:</p>

<p><img src="https://user-images.githubusercontent.com/567298/103775597-f2639280-5036-11eb-8101-768f1c81108a.png" alt="image" /></p>

<h2>AWS CLI</h2>

<p>You can also use the CLI:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aws --profile prod ssm start-session --target i-0ebba722b102179b6</span></code></pre></td></tr></table></div></figure>


<p>If you get this error:</p>

<p><img src="https://user-images.githubusercontent.com/567298/103775625-ff808180-5036-11eb-88dc-be8fde3586ad.png" alt="image" /></p>

<p>Head over to:</p>

<p><a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html">https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html</a></p>

<p>Install the session manager plugin, for Mac:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/mac/sessionmanager-bundle.zip" -o "sessionmanager-bundle.zip"
</span><span class='line'>$ unzip sessionmanager-bundle.zip
</span><span class='line'>$ sudo ./sessionmanager-bundle/install -i /usr/local/sessionmanagerplugin -b /usr/local/bin/session-manager-plugin
</span><span class='line'>$ rm -rf sessionmanager-bundle</span></code></pre></td></tr></table></div></figure>


<p>After installation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws --profile prod ssm start-session --target i-0ebba722b102179b6
</span><span class='line'>Starting session with SessionId: ruan.bekker-0b07cbbe261885ad3
</span><span class='line'>
</span><span class='line'>sh-4.2$ sudo su - ec2-user
</span><span class='line'>Last login: Wed Jan  6 12:55:03 UTC 2021 on pts/0
</span><span class='line'>[ec2-user@ip-172-31-23-246 ~]$</span></code></pre></td></tr></table></div></figure>


<p>Note: when you are using ssm session manager you don’t require security groups or a direct routable network to your instance.</p>

<h2>Bash Functions FTW</h2>

<p>You can implement this into a bash function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat ~/.functions.aws
</span><span class='line'>aws-ssh(){
</span><span class='line'>  instance_name=${1}
</span><span class='line'>  instance_id=$(aws --profile prod ec2 describe-instances --filter "Name=tag:Name,Values=${instance_name}" --query "Reservations[].Instances[?State.Name == 'running'].InstanceId[]" --output text)
</span><span class='line'>  aws --profile prod ssm start-session --target ${instance_id}
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>$ aws-ssh ssm-session-manager-ssh-test2
</span><span class='line'>Starting session with SessionId: ruan.bekker-04daf56c5f3668790
</span><span class='line'>sh-4.2$</span></code></pre></td></tr></table></div></figure>


<p>If you have your own SSH key, you can use this ~/.ssh/config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># AWS SSM Session Manager
</span><span class='line'>Host i-*
</span><span class='line'>    ProxyCommand sh -c "aws --profile prod ssm start-session --target %h --document-name AWS-StartSSHSession --parameters 'portNumber=%p'"</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -i ~/.ssh/infra.pem ec2-user@i-0ebba722b102179b6
</span><span class='line'>Warning: Permanently added 'i-0ebba722b102179b6' (ECDSA) to the list of known hosts.
</span><span class='line'>Last login: Wed Jan  6 13:04:03 2021
</span><span class='line'>
</span><span class='line'>       __|  __|_  )
</span><span class='line'>       _|  (     /   Amazon Linux 2 AMI
</span><span class='line'>      ___|\___|___|
</span><span class='line'>
</span><span class='line'>https://aws.amazon.com/amazon-linux-2/
</span><span class='line'>[ec2-user@ip-172-31-23-246 ~]$</span></code></pre></td></tr></table></div></figure>


<h2>Related:</h2>

<ul>
<li><a href="https://aws.amazon.com/blogs/mt/amazon-ec2-instance-port-forwarding-with-aws-systems-manager/">https://aws.amazon.com/blogs/mt/amazon-ec2-instance-port-forwarding-with-aws-systems-manager/</a></li>
<li><a href="https://aws.amazon.com/blogs/aws/new-port-forwarding-using-aws-system-manager-sessions-manager/">https://aws.amazon.com/blogs/aws/new-port-forwarding-using-aws-system-manager-sessions-manager/</a></li>
</ul>


<h2>Thanks</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bypass the Medium Paywall System]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/03/10/bypass-the-medium-paywall-system/"/>
    <updated>2021-03-10T00:45:54-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/03/10/bypass-the-medium-paywall-system</id>
    <content type="html"><![CDATA[<p>Do you like reading stories on medium.com but not a big fan of the paywall system?</p>

<p><img src="https://user-images.githubusercontent.com/567298/108808924-6ab6f080-75b0-11eb-961f-25327551725f.png" alt="image" /></p>

<p>Copy the link, DM yourself on twitter and paste the link:</p>

<p><img src="https://user-images.githubusercontent.com/567298/108809014-9e921600-75b0-11eb-8c01-18da23d43793.png" alt="image" /></p>

<p>Click on the pasted link, and enjoy:</p>

<p><img src="https://user-images.githubusercontent.com/567298/108809056-b2d61300-75b0-11eb-8eeb-38f99118bb17.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generate Grafana Loki Log Links From Metric Label Values]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/03/10/generate-grafana-loki-log-links-from-metric-label-values/"/>
    <updated>2021-03-10T00:34:04-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/03/10/generate-grafana-loki-log-links-from-metric-label-values</id>
    <content type="html"><![CDATA[<p>In this tutorial we will generate Loki Log links from selected dropdown template variables in a Grafana Dashboard.</p>

<h2>Context</h2>

<p>To give more context, we have a Grafana Dashboard with all our services, and when you select that service you see all the metrics of that service, now if you want to see the logs of that service, the selected label values will be parsed to a log link which you can click and it will take you to the Loki Explorer and parse the label values to the log link, so your logql will already be generated for you.</p>

<p>In order to achieve this, our metrics and logs need to share the same labels and label values (environment, container_name) etc.</p>

<h2>Dashboard Variables</h2>

<p>First we have our environment variable:</p>

<p><img src="https://user-images.githubusercontent.com/567298/109668240-a6862300-7b79-11eb-85ce-d381edfbe78e.png" alt="image" /></p>

<p>And here we have our service variable:</p>

<p><img src="https://user-images.githubusercontent.com/567298/109668438-dc2b0c00-7b79-11eb-9b17-629e9b1716a9.png" alt="image" /></p>

<p>Then for our container_name we have:</p>

<p><img src="https://user-images.githubusercontent.com/567298/109668632-05e43300-7b7a-11eb-97a0-8ff81f0c929c.png" alt="image" /></p>

<p>Notice the <code>/^(.*?)-[0-9]/</code> thats just to strip the end, if we remove it it will be:</p>

<p><img src="https://user-images.githubusercontent.com/567298/109668778-27451f00-7b7a-11eb-976f-a7d0b473cd1b.png" alt="image" /></p>

<h2>Grafana Dashboard</h2>

<p>Now when we select the environment, service, we get presented with a Loki LogURL:</p>

<p><img src="https://user-images.githubusercontent.com/567298/109668970-552a6380-7b7a-11eb-8c72-b284cf0f5eec.png" alt="image" /></p>

<p>If we look at our dashboard links, under the dashboard settings:</p>

<p><img src="https://user-images.githubusercontent.com/567298/109669065-6b382400-7b7a-11eb-8a29-34b492fef327.png" alt="image" /></p>

<p>The Logs Uri is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://grafana.mydomain.com/explore?orgId=1&left=%5B%22now-1h%22,%22now%22,%22Loki%22,%7B%22expr%22:%22%7Bcontainer_name%3D~%5C%22.*$container_name.*%5C%22%7D%22%7D,%7B%22mode%22:%22Logs%22%7D,%7B%22ui%22:%5Btrue,true,true,%22none%22%5D%7D%5D</span></code></pre></td></tr></table></div></figure>


<p>Now when we select our label values from the dropdown for our service and we follow the link we will get:</p>

<p><img src="https://user-images.githubusercontent.com/567298/109669297-a33f6700-7b7a-11eb-8205-f021467af751.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualize Weather Data With Grafana and the DHT22 Sensor]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/03/10/visualize-weather-data-with-grafana-and-the-dht22-sensor/"/>
    <updated>2021-03-10T00:06:31-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/03/10/visualize-weather-data-with-grafana-and-the-dht22-sensor</id>
    <content type="html"><![CDATA[<p>In this tutorial, we will connect the <a href="https://learn.adafruit.com/dht">DHT22</a> sensor to the Raspberry Pi Zero via the GPIO pins to measure temperature and humidity and visualize it with Grafana.</p>

<p><em>Note</em>: This post was originally posted on my <a href="https://blog.pistack.co.za/monitor-temperature-with-the-dht22-sensor-on-the-raspberry-pi/">RaspberryPi Blog</a></p>

<p>Then we will write a Python exporter for prometheus to expose our metrics so that we can visualize it in Grafana.</p>

<h2>The Endgoal</h2>

<p><img src="https://user-images.githubusercontent.com/30043398/104296987-fd9d3f00-54ca-11eb-8623-f3fd4a63e3cc.png" alt="image" /></p>

<h2>The Hardware</h2>

<p>This is how the sensor looks like (I got it from <a href="https://www.communica.co.za/products/bmt-temp-humd-snsr-dht22-on-pcb">Communica</a>)</p>

<p><img src="https://user-images.githubusercontent.com/567298/103872941-ba605c00-50d7-11eb-9f60-531995a185e6.png" alt="image" /></p>

<h2>Connecting the Sensor</h2>

<p>You can use the following graphic to connect your sensor to your raspberry pi:</p>

<p><img src="https://user-images.githubusercontent.com/567298/103873892-27c0bc80-50d9-11eb-9c41-3f3b2ff5aee2.png" alt="image" /></p>

<h2>Installing Software</h2>

<p>To install the required software, we will be using pip:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip3 install Adafruit_DHT --user</span></code></pre></td></tr></table></div></figure>


<p>Once we installed the software we can configure it</p>

<h2>Interact with the Sensor</h2>

<p>Enter your python interpreter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python3
</span><span class='line'>&gt;&gt;&gt;</span></code></pre></td></tr></table></div></figure>


<p>Then import the library, and get the current temperature and humidity:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; import Adafruit_DHT as dht
</span><span class='line'>&gt;&gt;&gt; humidity, temperature = dht.read_retry(dht.DHT22, 4)
</span><span class='line'>&gt;&gt;&gt; humidity = format(humidity, ".2f") + "%"
</span><span class='line'>&gt;&gt;&gt; humidity
</span><span class='line'>'47.20%'
</span><span class='line'>&gt;&gt;&gt; temperature = format(temperature, ".2f") + "C"
</span><span class='line'>&gt;&gt;&gt; temperature
</span><span class='line'>'29.10C'</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s create a python script for it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat temps.py
</span><span class='line'>#!/usr/bin/env python3
</span><span class='line'>
</span><span class='line'>import Adafruit_DHT as dht_sensor
</span><span class='line'>import time
</span><span class='line'>
</span><span class='line'>def get_temperature_readings():
</span><span class='line'>    humidity, temperature = dht_sensor.read_retry(dht_sensor.DHT22, 4)
</span><span class='line'>    humidity = format(humidity, ".2f") + "%"
</span><span class='line'>    temperature = format(temperature, ".2f") + "C"
</span><span class='line'>    return {"temperature": temperature, "humidity": humidity}
</span><span class='line'>
</span><span class='line'>while True:
</span><span class='line'>    print(get_temperature_readings())
</span><span class='line'>    time.sleep(30)</span></code></pre></td></tr></table></div></figure>


<p>And run it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python3 temps.py
</span><span class='line'>{'temperature': '28.00C', 'humidity': '47.40%'}
</span><span class='line'>{'temperature': '28.00C', 'humidity': '47.30%'}
</span><span class='line'>{'temperature': '28.00C', 'humidity': '47.70%'}
</span><span class='line'>{'temperature': '28.00C', 'humidity': '47.40%'}
</span><span class='line'>{'temperature': '28.00C', 'humidity': '47.60%'}</span></code></pre></td></tr></table></div></figure>


<h2>Visualize with Grafana</h2>

<p>Let&rsquo;s visualize our data with Grafana. For this, we need to write an exporter so that Prometheus can scrape the data.</p>

<p>Let&rsquo;s create a python flask application with the prometheus client library for python to expose the metrics to prometheus with a <code>/metrics</code> endpoint.</p>

<p>Note: I have used <a href="https://openweathermap.org/api">OpenWeatherMap</a>&rsquo;s API to get the outside temperature for my location.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat flask_temps.py
</span><span class='line'>#!/usr/bin/env python3
</span><span class='line'>
</span><span class='line'>import Adafruit_DHT as dht_sensor
</span><span class='line'>import time
</span><span class='line'>from flask import Flask, Response
</span><span class='line'>from prometheus_client import Counter, Gauge, start_http_server, generate_latest
</span><span class='line'>import requests
</span><span class='line'>
</span><span class='line'>params = {"lat": "-xx.xxxxx", "lon": "xx.xxxx", "units": "metric", "appid": "your-api-key"}
</span><span class='line'>baseurl = "https://api.openweathermap.org/data/2.5/weather"
</span><span class='line'>content_type = str('text/plain; version=0.0.4; charset=utf-8')
</span><span class='line'>
</span><span class='line'>def get_temperature_readings():
</span><span class='line'>    humidity, temperature = dht_sensor.read_retry(dht_sensor.DHT22, 4)
</span><span class='line'>    humidity = format(humidity, ".2f")
</span><span class='line'>    temperature = format(temperature, ".2f")
</span><span class='line'>    outside_temp = get_outside_weather()
</span><span class='line'>    if all(v is not None for v in [humidity, temperature, outside_temp]):
</span><span class='line'>        response = {"temperature": temperature, "humidity": humidity, "outside_temp": outside_temp}
</span><span class='line'>        return response
</span><span class='line'>    else:
</span><span class='line'>        time.sleep(0.2)
</span><span class='line'>        humidity, temperature = dht_sensor.read_retry(dht_sensor.DHT22, 4)
</span><span class='line'>        humidity = format(humidity, ".2f")
</span><span class='line'>        temperature = format(temperature, ".2f")
</span><span class='line'>        outside_temp = get_outside_weather()
</span><span class='line'>        response = {"temperature": temperature, "humidity": humidity, "outside_temp": outside_temp}
</span><span class='line'>        return response
</span><span class='line'>
</span><span class='line'>def get_outside_weather():
</span><span class='line'>    response = requests.get(baseurl, params=params)
</span><span class='line'>    temp = response.json()['main']['temp']
</span><span class='line'>    return temp
</span><span class='line'>
</span><span class='line'>app = Flask(__name__)
</span><span class='line'>
</span><span class='line'>current_humidity = Gauge(
</span><span class='line'>        'current_humidity',
</span><span class='line'>        'the current humidity percentage, this is a gauge as the value can increase or decrease',
</span><span class='line'>        ['room']
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>current_temperature = Gauge(
</span><span class='line'>        'current_temperature',
</span><span class='line'>        'the current temperature in celsius, this is a gauge as the value can increase or decrease',
</span><span class='line'>        ['room']
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>current_temperature_outside = Gauge(
</span><span class='line'>        'current_temperature_outside',
</span><span class='line'>        'the current outside temperature in celsius, this is a gauge as the value can increase or decrease',
</span><span class='line'>        ['location']
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>@app.route('/metrics')
</span><span class='line'>def metrics():
</span><span class='line'>    metrics = get_temperature_readings()
</span><span class='line'>    current_humidity.labels('study').set(metrics['humidity'])
</span><span class='line'>    current_temperature.labels('study').set(metrics['temperature'])
</span><span class='line'>    current_temperature_outside.labels('za_ct').set(metrics['outside_temp'])
</span><span class='line'>    return Response(generate_latest(), mimetype=content_type)
</span><span class='line'>
</span><span class='line'>if __name__ == '__main__':
</span><span class='line'>    app.run(host='0.0.0.0', port=5000)</span></code></pre></td></tr></table></div></figure>


<p>Then install the flask and prometheus_client package:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python3 -m pip install flask prometheus_client --user</span></code></pre></td></tr></table></div></figure>


<p>When you run the program, you should be able to retrieve metrics from the exporter by making a request on port 5000 on the <code>/metrics</code> request path:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5000/metrics
</span><span class='line'># HELP python_gc_objects_collected_total Objects collected during gc
</span><span class='line'># TYPE python_gc_objects_collected_total counter
</span><span class='line'>python_gc_objects_collected_total{generation="0"} 646.0
</span><span class='line'>python_gc_objects_collected_total{generation="1"} 129.0
</span><span class='line'>python_gc_objects_collected_total{generation="2"} 0.0
</span><span class='line'># HELP python_gc_objects_uncollectable_total Uncollectable object found during GC
</span><span class='line'># TYPE python_gc_objects_uncollectable_total counter
</span><span class='line'>python_gc_objects_uncollectable_total{generation="0"} 0.0
</span><span class='line'>python_gc_objects_uncollectable_total{generation="1"} 0.0
</span><span class='line'>python_gc_objects_uncollectable_total{generation="2"} 0.0
</span><span class='line'># HELP python_gc_collections_total Number of times this generation was collected
</span><span class='line'># TYPE python_gc_collections_total counter
</span><span class='line'>python_gc_collections_total{generation="0"} 104.0
</span><span class='line'>python_gc_collections_total{generation="1"} 9.0
</span><span class='line'>python_gc_collections_total{generation="2"} 0.0
</span><span class='line'># HELP python_info Python platform information
</span><span class='line'># TYPE python_info gauge
</span><span class='line'>python_info{implementation="CPython",major="3",minor="7",patchlevel="3",version="3.7.3"} 1.0
</span><span class='line'># HELP process_virtual_memory_bytes Virtual memory size in bytes.
</span><span class='line'># TYPE process_virtual_memory_bytes gauge
</span><span class='line'>process_virtual_memory_bytes 4.4761088e+07
</span><span class='line'># HELP process_resident_memory_bytes Resident memory size in bytes.
</span><span class='line'># TYPE process_resident_memory_bytes gauge
</span><span class='line'>process_resident_memory_bytes 2.7267072e+07
</span><span class='line'># HELP process_start_time_seconds Start time of the process since unix epoch in seconds.
</span><span class='line'># TYPE process_start_time_seconds gauge
</span><span class='line'>process_start_time_seconds 1.61044381853e+09
</span><span class='line'># HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.
</span><span class='line'># TYPE process_cpu_seconds_total counter
</span><span class='line'>process_cpu_seconds_total 5.86
</span><span class='line'># HELP process_open_fds Number of open file descriptors.
</span><span class='line'># TYPE process_open_fds gauge
</span><span class='line'>process_open_fds 6.0
</span><span class='line'># HELP process_max_fds Maximum number of open file descriptors.
</span><span class='line'># TYPE process_max_fds gauge
</span><span class='line'>process_max_fds 1024.0
</span><span class='line'># HELP current_humidity the current humidity percentage, this is a gauge as the value can increase or decrease
</span><span class='line'># TYPE current_humidity gauge
</span><span class='line'>current_humidity{room="study"} 47.0
</span><span class='line'># HELP current_temperature the current temperature in celsius, this is a gauge as the value can increase or decrease
</span><span class='line'># TYPE current_temperature gauge
</span><span class='line'>current_temperature{room="study"} 25.7
</span><span class='line'># HELP current_temperature_outside the current outside temperature in celsius, this is a gauge as the value can increase or decrease
</span><span class='line'># TYPE current_temperature_outside gauge
</span><span class='line'>current_temperature_outside{location="za_ct"} 27.97</span></code></pre></td></tr></table></div></figure>


<p>Now to configure our prometheus scrape config to scrape our endpoint:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/prometheus/prometheus.yml
</span><span class='line'>...
</span><span class='line'>scrape_configs:
</span><span class='line'>  - job_name: 'temperature-exporter'
</span><span class='line'>    scrape_interval: 15s
</span><span class='line'>    static_configs:
</span><span class='line'>    - targets: ['192.168.0.5:5000']
</span><span class='line'>      labels:
</span><span class='line'>        instance: 'pi-zero'
</span><span class='line'>        room: 'study'</span></code></pre></td></tr></table></div></figure>


<p>Then restart prometheus and head over to Grafana.</p>

<p>We will be adding a new panel with a graph visualization, and from our prometheus datasource, we will be referencing the 2 metrics (different from the screenshot):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>current_humidity{room="study"} 47.0
</span><span class='line'>current_temperature{room="study"} 25.7
</span><span class='line'>current_temperature_outside{location="za_ct"} 27.97</span></code></pre></td></tr></table></div></figure>


<p>As can be seen below:</p>

<p><img src="https://user-images.githubusercontent.com/567298/103987136-a169b080-5194-11eb-8a61-6d36f45caf5c.png" alt="image" /></p>

<p>After a bit of customization, you can get something more or less like this:</p>

<p><img src="https://user-images.githubusercontent.com/30043398/104296987-fd9d3f00-54ca-11eb-8623-f3fd4a63e3cc.png" alt="image" /></p>

<h2>Thank You</h2>

<p>Thanks for reading, if you like my content feel free to visit my website <strong><a href="https://ruan.dev">ruan.dev</a></strong> or follow me on Twitter <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CICD With DroneCI and Gitea Using Docker Compose]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/03/09/cicd-with-droneci-and-gitea-using-docker-compose/"/>
    <updated>2021-03-09T01:10:10-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/03/09/cicd-with-droneci-and-gitea-using-docker-compose</id>
    <content type="html"><![CDATA[<p>In this post we wil set up a drone-ci and gitea stack using docker-compose and then running a test pipeline.</p>

<p>I have posted a few times about this topic, but this post will be used when I create other examples and wanting to use this post for the ones not having the stack booted yet.</p>

<h2>The Source Code</h2>

<p>All the code will be in my <a href="https://github.com/ruanbekker/drone-gitea-on-docker">github repository</a>.</p>

<p>For our <code>docker-compose.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>version: '3.6'
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  gitea:
</span><span class='line'>    container_name: gitea
</span><span class='line'>    image: gitea/gitea:${GITEA_VERSION:-1.10.6}
</span><span class='line'>    restart: unless-stopped
</span><span class='line'>    environment:
</span><span class='line'>      # https://docs.gitea.io/en-us/install-with-docker/#environments-variables
</span><span class='line'>      - APP_NAME="Gitea"
</span><span class='line'>      - USER_UID=1000
</span><span class='line'>      - USER_GID=1000
</span><span class='line'>      - RUN_MODE=prod
</span><span class='line'>      - DOMAIN=${IP_ADDRESS}
</span><span class='line'>      - SSH_DOMAIN=${IP_ADDRESS}
</span><span class='line'>      - HTTP_PORT=3000
</span><span class='line'>      - ROOT_URL=http://${IP_ADDRESS}:3000
</span><span class='line'>      - SSH_PORT=222
</span><span class='line'>      - SSH_LISTEN_PORT=22
</span><span class='line'>      - DB_TYPE=sqlite3
</span><span class='line'>    ports:
</span><span class='line'>      - "3000:3000"
</span><span class='line'>      - "222:22"
</span><span class='line'>    networks:
</span><span class='line'>      - cicd_net
</span><span class='line'>    volumes:
</span><span class='line'>      - ./gitea:/data
</span><span class='line'>
</span><span class='line'>  drone:
</span><span class='line'>    container_name: drone
</span><span class='line'>    image: drone/drone:${DRONE_VERSION:-1.6.4}
</span><span class='line'>    restart: unless-stopped
</span><span class='line'>    depends_on:
</span><span class='line'>      - gitea
</span><span class='line'>    environment:
</span><span class='line'>      # https://docs.drone.io/server/provider/gitea/
</span><span class='line'>      - DRONE_DATABASE_DRIVER=sqlite3
</span><span class='line'>      - DRONE_DATABASE_DATASOURCE=/data/database.sqlite
</span><span class='line'>      - DRONE_GITEA_SERVER=http://${IP_ADDRESS}:3000/
</span><span class='line'>      - DRONE_GIT_ALWAYS_AUTH=false
</span><span class='line'>      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
</span><span class='line'>      - DRONE_SERVER_PROTO=http
</span><span class='line'>      - DRONE_SERVER_HOST=${IP_ADDRESS}:3001
</span><span class='line'>      - DRONE_TLS_AUTOCERT=false
</span><span class='line'>      - DRONE_USER_CREATE=${DRONE_USER_CREATE}
</span><span class='line'>      - DRONE_GITEA_CLIENT_ID=${DRONE_GITEA_CLIENT_ID}
</span><span class='line'>      - DRONE_GITEA_CLIENT_SECRET=${DRONE_GITEA_CLIENT_SECRET}
</span><span class='line'>    ports:
</span><span class='line'>      - "3001:80"
</span><span class='line'>      - "9001:9000"
</span><span class='line'>    networks:
</span><span class='line'>      - cicd_net
</span><span class='line'>    volumes:
</span><span class='line'>      - /var/run/docker.sock:/var/run/docker.sock
</span><span class='line'>      - ./drone:/data
</span><span class='line'>
</span><span class='line'>  drone-runner:
</span><span class='line'>    container_name: drone-runner
</span><span class='line'>    image: drone/drone-runner-docker:${DRONE_RUNNER_VERSION:-1}
</span><span class='line'>    restart: unless-stopped
</span><span class='line'>    depends_on:
</span><span class='line'>      - drone
</span><span class='line'>    environment:
</span><span class='line'>      # https://docs.drone.io/runner/docker/installation/linux/
</span><span class='line'>      # https://docs.drone.io/server/metrics/
</span><span class='line'>      - DRONE_RPC_PROTO=http
</span><span class='line'>      - DRONE_RPC_HOST=drone
</span><span class='line'>      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
</span><span class='line'>      - DRONE_RUNNER_NAME="${HOSTNAME}-runner"
</span><span class='line'>      - DRONE_RUNNER_CAPACITY=2
</span><span class='line'>      - DRONE_RUNNER_NETWORKS=cicd_net
</span><span class='line'>      - DRONE_DEBUG=false
</span><span class='line'>      - DRONE_TRACE=false
</span><span class='line'>    ports:
</span><span class='line'>      - "3002:3000"
</span><span class='line'>    networks:
</span><span class='line'>      - cicd_net
</span><span class='line'>    volumes:
</span><span class='line'>      - /var/run/docker.sock:/var/run/docker.sock
</span><span class='line'>
</span><span class='line'>networks:
</span><span class='line'>  cicd_net:
</span><span class='line'>    name: cicd_net</span></code></pre></td></tr></table></div></figure>


<p>Our <code>boot.sh</code> which we will use to override environment variables:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/usr/bin/env bash
</span><span class='line'>
</span><span class='line'>export HOSTNAME=$(hostname)
</span><span class='line'>export DRONE_VERSION=1.10.1
</span><span class='line'>export DRONE_RUNNER_VERSION=1.6.3
</span><span class='line'>export GITEA_VERSION=1.13
</span><span class='line'>export IP_ADDRESS=192.168.0.6
</span><span class='line'>export MINIO_ACCESS_KEY="EXAMPLEKEY"
</span><span class='line'>export MINIO_SECRET_KEY="EXAMPLESECRET"
</span><span class='line'>export GITEA_ADMIN_USER="example"
</span><span class='line'>export DRONE_RPC_SECRET="$(echo ${HOSTNAME} | openssl dgst -md5 -hex)"
</span><span class='line'>export DRONE_USER_CREATE="username:${GITEA_ADMIN_USER},machine:false,admin:true,token:${DRONE_RPC_SECRET}"
</span><span class='line'>export DRONE_GITEA_CLIENT_ID=""
</span><span class='line'>export DRONE_GITEA_CLIENT_SECRET=""
</span><span class='line'>docker-compose up -d
</span><span class='line'>
</span><span class='line'>echo ""
</span><span class='line'>echo "Gitea: http://${IP_ADDRESS}:3000/"
</span><span class='line'>echo "Drone: http://${IP_ADDRESS}:3001/"</span></code></pre></td></tr></table></div></figure>


<h2>Deploy the Stack</h2>

<p>Set the following in your <code>boot.sh</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IP_ADDRESS=192.168.0.6       -&gt; either reachable dns or ip address which will be your clone address and ui addresses.
</span><span class='line'>GITEA_ADMIN_USER="giteauser" -&gt; will be the user you register with in drone</span></code></pre></td></tr></table></div></figure>


<p>Now boot the stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bash boot.sh</span></code></pre></td></tr></table></div></figure>


<p><em>Note</em>: Theres a <a href="https://github.com/go-gitea/gitea/issues/7702">current issue</a> where webhooks get fired twice, if you see that just restart gitea with <code>docker restart gitea</code>.</p>

<ul>
<li><p>Head over to: <code>http://${IP_ADDRESS}:3000/user/settings/applications</code> and create a new OAuth2 Application and set the Redirect URI to <code>http://${IP_ADDRESS}:3001/login</code></p></li>
<li><p>Capture the client id and client secret and populate them in the <code>boot.sh</code> in <code>DRONE_GITEA_CLIENT_ID</code> and <code>DRONE_GITEA_CLIENT_SECRET</code> and run <code>bash boot.sh</code> again. This will give drone the correct credentials in order to authenticate with gitea.</p></li>
<li><p>Now when you head over to <code>http://${IP_ADDRESS}:3001/</code> you will be asked to authorize the application and you should be able to access drone.</p></li>
</ul>


<h2>Drone CLI</h2>

<p>Install Drone CLI:
- <a href="https://docs.drone.io/cli/install/">https://docs.drone.io/cli/install/</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -L https://github.com/drone/drone-cli/releases/latest/download/drone_darwin_amd64.tar.gz | tar zx
</span><span class='line'>$ sudo mv drone /usr/local/bin/drone
</span><span class='line'>$ chmod +x /usr/local/bin/drone</span></code></pre></td></tr></table></div></figure>


<p>Get your Drone Token:
- <a href="http://$">http://$</a>{IP_ADDRESS}:3001/account</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export DRONE_SERVER=http://${IP_ADDRESS}:3001
</span><span class='line'>$ export DRONE_TOKEN=one-from-the-account-page
</span><span class='line'>drone info</span></code></pre></td></tr></table></div></figure>


<h2>Build your first pipeline</h2>

<p>Create a test repo in gitea:</p>

<p><img src="https://user-images.githubusercontent.com/567298/110296470-0ad23800-7ffb-11eb-8428-af49d0ebd62d.png" alt="image" /></p>

<p>Commit a <code>.drone.yml</code> file for drone:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kind: pipeline
</span><span class='line'>type: docker
</span><span class='line'>name: hello-world
</span><span class='line'>
</span><span class='line'>trigger:
</span><span class='line'>  branch:
</span><span class='line'>    - master
</span><span class='line'>  event:
</span><span class='line'>    - push
</span><span class='line'>
</span><span class='line'>steps:
</span><span class='line'>  - name: say-hello
</span><span class='line'>    image: busybox
</span><span class='line'>    commands:
</span><span class='line'>      - echo hello-world</span></code></pre></td></tr></table></div></figure>


<p>Head over to drone and sync your repositories:</p>

<p><img src="https://user-images.githubusercontent.com/567298/110296425-00b03980-7ffb-11eb-9216-76725a62c09e.png" alt="image" /></p>

<p>Activate your repository:</p>

<p><img src="https://user-images.githubusercontent.com/567298/110296623-3523f580-7ffb-11eb-805f-db5db4dab0cb.png" alt="image" /></p>

<p>Push a commit to master and see your pipeline running:</p>

<p><img src="https://user-images.githubusercontent.com/567298/110296747-584ea500-7ffb-11eb-9909-259641a663aa.png" alt="image" /></p>

<h2>More Examples</h2>

<p>For more examples view my example section on the github repository:
- <a href="https://github.com/ruanbekker/drone-gitea-on-docker#more-examples">https://github.com/ruanbekker/drone-gitea-on-docker#more-examples</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ship Your Docker Logs to Loki Using Fluentbit]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/02/26/ship-your-docker-logs-to-loki-using-fluentbit/"/>
    <updated>2021-02-26T15:26:34-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/02/26/ship-your-docker-logs-to-loki-using-fluentbit</id>
    <content type="html"><![CDATA[<p>In this tutorial, I will show you how to ship your docker containers logs to <a href="https://grafana.com/oss/loki/">Grafana Loki</a> via <a href="https://fluentbit.io/">Fluent Bit</a>.</p>

<h2>Grafana and Loki</h2>

<p>First we need to get Grafana and Loki up and running and we will be using docker and docker-compose to do that.</p>

<p>Our <code>docker-compose-loki.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>version: "3.7"
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  grafana:
</span><span class='line'>    image: grafana/grafana:7.4.2
</span><span class='line'>    container_name: 'grafana'
</span><span class='line'>    restart: unless-stopped
</span><span class='line'>    volumes:
</span><span class='line'>      - ./data/grafana/data:/var/lib/grafana
</span><span class='line'>      - ./configs/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
</span><span class='line'>    networks:
</span><span class='line'>      - public
</span><span class='line'>    ports:
</span><span class='line'>      - 3000:3000
</span><span class='line'>    depends_on:
</span><span class='line'>      - loki
</span><span class='line'>    logging:
</span><span class='line'>      driver: "json-file"
</span><span class='line'>      options:
</span><span class='line'>        max-size: "1m"  
</span><span class='line'>  
</span><span class='line'>  loki:
</span><span class='line'>    image: grafana/loki:2.1.0
</span><span class='line'>    container_name: loki
</span><span class='line'>    command: -config.file=/mnt/loki-local-config.yaml
</span><span class='line'>    user: root
</span><span class='line'>    restart: unless-stopped
</span><span class='line'>    volumes:
</span><span class='line'>      - ./data/loki/data:/tmp/loki
</span><span class='line'>      - ./configs/loki/loki.yml:/mnt/loki-local-config.yaml
</span><span class='line'>    ports:
</span><span class='line'>      - 3100:3100
</span><span class='line'>    networks:
</span><span class='line'>      - public
</span><span class='line'>    logging:
</span><span class='line'>      driver: "json-file"
</span><span class='line'>      options:
</span><span class='line'>        max-size: "1m"
</span><span class='line'>
</span><span class='line'>networks:
</span><span class='line'>  public:
</span><span class='line'>    name: public</span></code></pre></td></tr></table></div></figure>


<p>We are referencing 2 config files, first our loki datasource defined by <code>./configs/grafana/datasource.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apiVersion: 1
</span><span class='line'>
</span><span class='line'>datasources:
</span><span class='line'>- name: loki
</span><span class='line'>  type: loki
</span><span class='line'>  access: proxy
</span><span class='line'>  orgId: 1
</span><span class='line'>  url: http://loki:3100
</span><span class='line'>  basicAuth: false
</span><span class='line'>  isDefault: true
</span><span class='line'>  version: 1
</span><span class='line'>  editable: true</span></code></pre></td></tr></table></div></figure>


<p>And our second config is our loki config <code>./configs/loki/loki.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>auth_enabled: false
</span><span class='line'>
</span><span class='line'>server:
</span><span class='line'>  http_listen_port: 3100
</span><span class='line'>
</span><span class='line'>ingester:
</span><span class='line'>  lifecycler:
</span><span class='line'>    address: 127.0.0.1
</span><span class='line'>    ring:
</span><span class='line'>      kvstore:
</span><span class='line'>        store: inmemory
</span><span class='line'>      replication_factor: 1
</span><span class='line'>    final_sleep: 0s
</span><span class='line'>  chunk_idle_period: 5m
</span><span class='line'>  chunk_retain_period: 30s
</span><span class='line'>  max_transfer_retries: 0
</span><span class='line'>
</span><span class='line'>schema_config:
</span><span class='line'>  configs:
</span><span class='line'>    - from: 2018-04-15
</span><span class='line'>      store: boltdb
</span><span class='line'>      object_store: filesystem
</span><span class='line'>      schema: v11
</span><span class='line'>      index:
</span><span class='line'>        prefix: index_
</span><span class='line'>        period: 168h
</span><span class='line'>
</span><span class='line'>storage_config:
</span><span class='line'>  boltdb:
</span><span class='line'>    directory: /tmp/loki/index
</span><span class='line'>
</span><span class='line'>  filesystem:
</span><span class='line'>    directory: /tmp/loki/chunks
</span><span class='line'>
</span><span class='line'>limits_config:
</span><span class='line'>  enforce_metric_name: false
</span><span class='line'>  reject_old_samples: true
</span><span class='line'>  reject_old_samples_max_age: 168h
</span><span class='line'>
</span><span class='line'>chunk_store_config:
</span><span class='line'>  max_look_back_period: 0s
</span><span class='line'>
</span><span class='line'>table_manager:
</span><span class='line'>  retention_deletes_enabled: false
</span><span class='line'>  retention_period: 0s</span></code></pre></td></tr></table></div></figure>


<p>Once you have everything in place, boot the grafana and loki containers:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose -f docker-compose-loki.yml up -d</span></code></pre></td></tr></table></div></figure>


<h2>Fluent Bit</h2>

<p>Next we need to boot our log processor and forwarder, fluent bit. In our <code>docker-compose-fluentbit.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>version: "3.7"
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  fluent-bit:
</span><span class='line'>    image: grafana/fluent-bit-plugin-loki:latest
</span><span class='line'>    container_name: fluent-bit
</span><span class='line'>    environment:
</span><span class='line'>      - LOKI_URL=http://loki:3100/loki/api/v1/push
</span><span class='line'>    volumes:
</span><span class='line'>      - ./fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
</span><span class='line'>    ports:
</span><span class='line'>      - "24224:24224"
</span><span class='line'>      - "24224:24224/udp"
</span><span class='line'>    networks:
</span><span class='line'>      - public
</span><span class='line'>
</span><span class='line'>networks:
</span><span class='line'>  public:
</span><span class='line'>    name: public</span></code></pre></td></tr></table></div></figure>


<p>And as you can see we are referencing a config <code>./configs/fluentbit/fluent-bit.conf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[INPUT]
</span><span class='line'>    Name        forward
</span><span class='line'>    Listen      0.0.0.0
</span><span class='line'>    Port        24224
</span><span class='line'>[Output]
</span><span class='line'>    Name grafana-loki
</span><span class='line'>    Match *
</span><span class='line'>    Url ${LOKI_URL}
</span><span class='line'>    RemoveKeys source,container_id
</span><span class='line'>    Labels {job="fluent-bit"}
</span><span class='line'>    LabelKeys container_name
</span><span class='line'>    BatchWait 1s
</span><span class='line'>    BatchSize 1001024
</span><span class='line'>    LineFormat json
</span><span class='line'>    LogLevel info</span></code></pre></td></tr></table></div></figure>


<p>Once you have your configs in place, boot fluent-bit:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose -f docker-compose-fluentbit.yml up -d</span></code></pre></td></tr></table></div></figure>


<h2>Nginx App</h2>

<p>Now to configure our docker container to ship its logs to fluent-bit, which will forward the logs to Loki.</p>

<p>In our <code>docker-compose-app.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>version: "3"
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  nginx-json:
</span><span class='line'>    image: ruanbekker/nginx-demo:json
</span><span class='line'>    container_name: nginx-app
</span><span class='line'>    ports:
</span><span class='line'>      - 8080:80
</span><span class='line'>    logging:
</span><span class='line'>      driver: fluentd
</span><span class='line'>      options:
</span><span class='line'>        fluentd-address: 127.0.0.1:24224</span></code></pre></td></tr></table></div></figure>


<p>The fluent-bit container listens on port 24224 locally on our docker host and is not reachable via its container network, so let&rsquo;s boot our application:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose -f docker-compose-app.yml up -d</span></code></pre></td></tr></table></div></figure>


<p>Once our application is up, let&rsquo;s make a request to our nginx-app:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:8080/
</span><span class='line'>ok</span></code></pre></td></tr></table></div></figure>


<p>Now head over to Grafana at <a href="http://localhost:3000/explore">http://localhost:3000/explore</a> and query: <code>{job="fluent-bit", container_name="/nginx-app"}</code> and you should see something like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/109366000-03908900-789b-11eb-952e-36ff23657517.png" alt="image" /></p>

<p>Beautiful right? I know.</p>

<h2>Github Repo</h2>

<p>The source code for this can be found on:</p>

<ul>
<li><a href="https://github.com/ruanbekker/docker-logging-loki-fuentbit">https://github.com/ruanbekker/docker-logging-loki-fuentbit</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Arduino and Setup the NodeMCU ESP32]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/01/31/installing-arduino-and-setup-the-nodemcu-esp32/"/>
    <updated>2021-01-31T11:33:31-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/01/31/installing-arduino-and-setup-the-nodemcu-esp32</id>
    <content type="html"><![CDATA[<p>A couple of weeks ago I got myself the <a href="">NodeMCU ESP32 Development Board</a>:</p>

<p><img src="https://user-images.githubusercontent.com/567298/106391027-f5626080-63f3-11eb-9dca-5efce53fbf80.png" alt="image" /></p>

<p>If you want to view more in-depth specs about the board you can have a look at the <a href="https://www.espressif.com/sites/default/files/documentation/esp32_datasheet_en.pdf">ESP32 Datasheet</a>, but in short it has:</p>

<ul>
<li>ESP32-D0WDQ6 Processor</li>
<li>WiFi with frequency range of 2.4G ~ 2.5G (2400M ~ 2483.5M)</li>
<li>Bluetooth 4.2</li>
<li>32Mbit built in Flash</li>
<li>2x19pin extension headers, breakout all the I/O pins of the module</li>
<li>2x keys, used as reset or user-defined</li>
</ul>


<h2>About this Tutorial</h2>

<p>In this tutorial we will download and install Arduino and how to setup our ESP32 Board, then just running a basic hello world application</p>

<h2>Installing Arduino</h2>

<p>Head over to <a href="https://www.arduino.cc/en/software">arduino.cc/en/software</a> and download arduino for your operating system.</p>

<p>Once installed you can reference <a href="https://github.com/espressif/arduino-esp32">arduino-esp32</a> for your operating system, but in general you will open the Arduino application, select Preferences and provide the following link on the &ldquo;Additional Boards Manager URL&rdquo;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json</span></code></pre></td></tr></table></div></figure>


<p>Hit OK, then select Tools, Board, Board Manager, then search for &ldquo;esp32&rdquo;, then install esp32 by Espressif Systems:</p>

<p><img width="800" alt="image" src="https://user-images.githubusercontent.com/567298/106391354-8c7be800-63f5-11eb-852d-d472fe3624e9.png"></p>

<p>Then make sure to select the board by navigating to Tools, Board, ESP32 Arduino, ESP32 Dev Module:</p>

<p><img width="1110" alt="image" src="https://user-images.githubusercontent.com/567298/106391458-06ac6c80-63f6-11eb-8a0b-eed0ae7e786b.png"></p>

<p>Select the upload rate from Tools, Upload Rate to 115200 and select the serial port, from mine it is Tools, Port, usb-serial-0001 (your&rsquo;s might differ)</p>

<h2>Hello World Application</h2>

<p>Now that we have Arduino installed and our board configured, let&rsquo;s write a hello world application, from the input text section:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void setup() {
</span><span class='line'>  Serial.begin(115200);
</span><span class='line'>  Serial.println("Setup done");
</span><span class='line'>  delay(5000);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void loop() {
</span><span class='line'>  Serial.println("Hello, World");
</span><span class='line'>  delay(1000);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>From the setup function we set the baud rate and print a line then sleep for 5 seconds, once that is done we call the loop function which will print &ldquo;Hello, World&rdquo; and sleep for 1 second, and that will loop indefinitely.</p>

<p>Once you are done, save your sketch and upload it to the board by either selecting the upload button or from Sketch, Upload.</p>

<p>When the code has been compiled the device will reset and you can open the serial monitor, by selecting Tools, Serial Monitor:</p>

<p><img width="936" alt="image" src="https://user-images.githubusercontent.com/567298/106391690-47f14c00-63f7-11eb-85bf-227f1ac5f92a.png"></p>

<h2>Thank You</h2>

<p>Thank you for reading.</p>
]]></content>
  </entry>
  
</feed>
