<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2019-05-07T16:29:43-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use the Vault API to Provision App Keys and Create KV Pairs]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/07/use-the-vault-api-to-provision-app-keys-and-create-kv-pairs/"/>
    <updated>2019-05-07T16:23:10-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/07/use-the-vault-api-to-provision-app-keys-and-create-kv-pairs</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57256060-f1a27e00-7055-11e9-9a05-77d3fdd6c76f.png" alt="" /></p>

<p>In this tutorial we will use Vault API to create a user and allow that user to write/read key/value pairs from a given path.</p>

<p>Related Posts:</p>

<ul>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/06/setup-hashicorp-vault-server-on-docker-and-cli-guide/">Setup a Vault Server on Docker</a></li>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/06/setup-hashicorp-vault-server-on-docker-and-cli-guide/">Getting Started with the Vault CLI</a></li>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/07/persist-vault-data-with-amazon-s3-as-a-storage-backend/">Use the S3 Storage Backend to Persist Data</a></li>
</ul>


<h2>Credentials / Authentication</h2>

<p>Export Vault Root Tokens:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export ROOT_TOKEN="$(cat ~/.vault-token)"
</span><span class='line'>$ export VAULT_TOKEN=${ROOT_TOKEN}</span></code></pre></td></tr></table></div></figure>


<p>Check the vault status:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET -H "X-Vault-Token: ${VAULT_TOKEN}" http://127.0.0.1:8200/v1/sys/health | jq
</span><span class='line'>{
</span><span class='line'>  "initialized": true,
</span><span class='line'>  "sealed": false,
</span><span class='line'>  "standby": false,
</span><span class='line'>  "performance_standby": false,
</span><span class='line'>  "replication_performance_mode": "disabled",
</span><span class='line'>  "replication_dr_mode": "disabled",
</span><span class='line'>  "server_time_utc": 1554652468,
</span><span class='line'>  "version": "1.1.0",
</span><span class='line'>  "cluster_name": "vault-cluster-bfb00cd7",
</span><span class='line'>  "cluster_id": "dc1dc9a6-xx-xx-xx-a2870f475e7a"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Do a lookup for the root user:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET -H "X-Vault-Token: ${VAULT_TOKEN}" http://127.0.0.1:8200/v1/auth/token/lookup-self | jq
</span><span class='line'>{
</span><span class='line'>  "request_id": "69a19f66-5bad-3af2-81a5-81ca24e50b02",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 0,
</span><span class='line'>  "data": {
</span><span class='line'>    "accessor": "A7Xkik1ebWpUfzqNrvADmQ08",
</span><span class='line'>    "creation_time": 1554651149,
</span><span class='line'>    "creation_ttl": 0,
</span><span class='line'>    "display_name": "root",
</span><span class='line'>    "entity_id": "",
</span><span class='line'>    "expire_time": null,
</span><span class='line'>    "explicit_max_ttl": 0,
</span><span class='line'>    "id": "s.po8HkMdCnnAerlCAeHGGGszQ",
</span><span class='line'>    "meta": null,
</span><span class='line'>    "num_uses": 0,
</span><span class='line'>    "orphan": true,
</span><span class='line'>    "path": "auth/token/root",
</span><span class='line'>    "policies": [
</span><span class='line'>      "root"
</span><span class='line'>    ],
</span><span class='line'>    "ttl": 0,
</span><span class='line'>    "type": "service"
</span><span class='line'>  },
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Create the Roles</h2>

<p>Create the AppRole:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XPOST -H "X-Vault-Token: ${VAULT_TOKEN}" -d '{"type": "approle"}' http://127.0.0.1:8200/v1/sys/auth/approle | jq
</span><span class='line'>$ curl -s -XGET -H "X-Vault-Token: ${VAULT_TOKEN}" http://127.0.0.1:8200/v1/sys/auth | jq
</span><span class='line'>{
</span><span class='line'>  "token/": {
</span><span class='line'>    "accessor": "auth_token_31f2381e",
</span><span class='line'>    "config": {
</span><span class='line'>      "default_lease_ttl": 0,
</span><span class='line'>      "force_no_cache": false,
</span><span class='line'>      "max_lease_ttl": 0,
</span><span class='line'>      "token_type": "default-service"
</span><span class='line'>    },
</span><span class='line'>    "description": "token based credentials",
</span><span class='line'>    "local": false,
</span><span class='line'>    "options": null,
</span><span class='line'>    "seal_wrap": false,
</span><span class='line'>    "type": "token"
</span><span class='line'>  },
</span><span class='line'>  "approle/": {
</span><span class='line'>    "accessor": "auth_approle_d542dcad",
</span><span class='line'>    "config": {
</span><span class='line'>      "default_lease_ttl": 0,
</span><span class='line'>      "force_no_cache": false,
</span><span class='line'>      "max_lease_ttl": 0,
</span><span class='line'>      "token_type": "default-service"
</span><span class='line'>    },
</span><span class='line'>    "description": "",
</span><span class='line'>    "local": false,
</span><span class='line'>    "options": {},
</span><span class='line'>    "seal_wrap": false,
</span><span class='line'>    "type": "approle"
</span><span class='line'>  },
</span><span class='line'>  "request_id": "20554948-b8e0-4254-f21d-f9ad25f1e5d5",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 0,
</span><span class='line'>  "data": {
</span><span class='line'>    "approle/": {
</span><span class='line'>      "accessor": "auth_approle_d542dcad",
</span><span class='line'>      "config": {
</span><span class='line'>        "default_lease_ttl": 0,
</span><span class='line'>        "force_no_cache": false,
</span><span class='line'>        "max_lease_ttl": 0,
</span><span class='line'>        "token_type": "default-service"
</span><span class='line'>      },
</span><span class='line'>      "description": "",
</span><span class='line'>      "local": false,
</span><span class='line'>      "options": {},
</span><span class='line'>      "seal_wrap": false,
</span><span class='line'>      "type": "approle"
</span><span class='line'>    },
</span><span class='line'>    "token/": {
</span><span class='line'>      "accessor": "auth_token_31f2381e",
</span><span class='line'>      "config": {
</span><span class='line'>        "default_lease_ttl": 0,
</span><span class='line'>        "force_no_cache": false,
</span><span class='line'>        "max_lease_ttl": 0,
</span><span class='line'>        "token_type": "default-service"
</span><span class='line'>      },
</span><span class='line'>      "description": "token based credentials",
</span><span class='line'>      "local": false,
</span><span class='line'>      "options": null,
</span><span class='line'>      "seal_wrap": false,
</span><span class='line'>      "type": "token"
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Create the test policy:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XPOST -H "X-Vault-Token: ${VAULT_TOKEN}" -d '{"policy": "{\"name\": \"test\", \"path\": {\"secret/*\": {\"policy\": \"write\"}}}"}' http://127.0.0.1:8200/v1/sys/policy/test
</span><span class='line'>$ curl -s -XGET -H "X-Vault-Token: ${VAULT_TOKEN}" http://127.0.0.1:8200/v1/sys/policy/test | jq
</span><span class='line'>{
</span><span class='line'>  "name": "test",
</span><span class='line'>  "rules": "{\"name\": \"test\", \"path\": {\"secret/*\": {\"policy\": \"write\"}}}",
</span><span class='line'>  "request_id": "e4f55dc0-575f-ead9-48f6-43154153889a",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 0,
</span><span class='line'>  "data": {
</span><span class='line'>    "name": "test",
</span><span class='line'>    "rules": "{\"name\": \"test\", \"path\": {\"secret/*\": {\"policy\": \"write\"}}}"
</span><span class='line'>  },
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Attach the policy to the approle:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XPOST -H "X-Vault-Token: ${VAULT_TOKEN}" -d '{"policies": "test"}' http://127.0.0.1:8200/v1/auth/approle/role/app
</span><span class='line'>$ curl -s -XGET -H "X-Vault-Token: ${VAULT_TOKEN}" 'http://127.0.0.1:8200/v1/auth/approle/role?list=true' | jq .
</span><span class='line'>{
</span><span class='line'>  "request_id": "e645cad9-9010-4299-0e6b-0baf6d9194b8",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 0,
</span><span class='line'>  "data": {
</span><span class='line'>    "keys": [
</span><span class='line'>      "app"
</span><span class='line'>    ]
</span><span class='line'>  },
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Enable the kv store:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H "X-Vault-Token: ${VAULT_TOKEN}" -XPOST --data '{"type": "kv", "description": "my key value store", "config": {"force_no_cache": true}}' http://127.0.0.1:8200/v1/sys/mounts/secret</span></code></pre></td></tr></table></div></figure>


<h2>Create the User Credentials</h2>

<p>Get the role_id:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET -H "X-Vault-Token: ${VAULT_TOKEN}" http://127.0.0.1:8200/v1/auth/approle/role/app/role-id | jq
</span><span class='line'>{
</span><span class='line'>  "request_id": "e803a1bf-a492-dad7-68db-bb1506752e03",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 0,
</span><span class='line'>  "data": {
</span><span class='line'>    "role_id": "3e365c72-7aad-f4e4-521c-d7cf0dd83c0f"
</span><span class='line'>  },
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Create the secret_id:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XPOST -H "X-Vault-Token: ${VAULT_TOKEN}" http://127.0.0.1:8200/v1/auth/approle/role/app/secret-id | jq
</span><span class='line'>{
</span><span class='line'>  "request_id": "b56d20c0-ff8a-a1fe-4d5f-42e57b625b83",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 0,
</span><span class='line'>  "data": {
</span><span class='line'>    "secret_id": "5eecfe29-d6e1-50e6-7a70-04c6bea42b76",
</span><span class='line'>    "secret_id_accessor": "2fa80586-32b9-1c6f-fe1d-7c547e5403e5"
</span><span class='line'>  },
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Create the token with the role_id and secret_id:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XPOST -d '{"role_id": "3e365c72-7aad-f4e4-521c-d7cf0dd83c0f","secret_id": "5eecfe29-d6e1-50e6-7a70-04c6bea42b76"}' http://127.0.0.1:8200/v1/auth/approle/login | jq
</span><span class='line'>{
</span><span class='line'>  "request_id": "82470940-ef09-bcbb-f7a0-bdf085b4f47b",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 0,
</span><span class='line'>  "data": null,
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": {
</span><span class='line'>    "client_token": "s.7EtwtRGsZWOtkqcMvj3UMLP0",
</span><span class='line'>    "accessor": "2TPL1vg5IZXgVF6Xf1RRzbmL",
</span><span class='line'>    "policies": [
</span><span class='line'>      "default",
</span><span class='line'>      "test"
</span><span class='line'>    ],
</span><span class='line'>    "token_policies": [
</span><span class='line'>      "default",
</span><span class='line'>      "test"
</span><span class='line'>    ],
</span><span class='line'>    "metadata": {
</span><span class='line'>      "role_name": "app"
</span><span class='line'>    },
</span><span class='line'>    "lease_duration": 2764800,
</span><span class='line'>    "renewable": true,
</span><span class='line'>    "entity_id": "d5051b01-b7ce-626c-a9f4-e1663f8c23e8",
</span><span class='line'>    "token_type": "service",
</span><span class='line'>    "orphan": true
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Create KV Pairs with New User</h2>

<p>Export the user auth with the received token:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export APP_TOKEN=s.7EtwtRGsZWOtkqcMvj3UMLP0
</span><span class='line'>$ export VAULT_TOKEN=$APP_TOKEN</span></code></pre></td></tr></table></div></figure>


<p>Verify if you can lookup your own info:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET -H "X-Vault-Token: ${VAULT_TOKEN}" http://127.0.0.1:8200/v1/auth/token/lookup-self | jq
</span><span class='line'>{
</span><span class='line'>  "request_id": "2e69cd68-8668-3159-6440-c430cb61d2e6",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 0,
</span><span class='line'>  "data": {
</span><span class='line'>    "accessor": "2TPL1vg5IZXgVF6Xf1RRzbmL",
</span><span class='line'>    "creation_time": 1554651882,
</span><span class='line'>    "creation_ttl": 2764800,
</span><span class='line'>    "display_name": "approle",
</span><span class='line'>    "entity_id": "d5051b01-b7ce-626c-a9f4-e1663f8c23e8",
</span><span class='line'>    "expire_time": "2019-05-09T15:44:42.1013993Z",
</span><span class='line'>    "explicit_max_ttl": 0,
</span><span class='line'>    "id": "s.7EtwtRGsZWOtkqcMvj3UMLP0",
</span><span class='line'>    "issue_time": "2019-04-07T15:44:42.1013788Z",
</span><span class='line'>    "meta": {
</span><span class='line'>      "role_name": "app"
</span><span class='line'>    },
</span><span class='line'>    "num_uses": 0,
</span><span class='line'>    "orphan": true,
</span><span class='line'>    "path": "auth/approle/login",
</span><span class='line'>    "policies": [
</span><span class='line'>      "default",
</span><span class='line'>      "test"
</span><span class='line'>    ],
</span><span class='line'>    "renewable": true,
</span><span class='line'>    "ttl": 2764556,
</span><span class='line'>    "type": "service"
</span><span class='line'>  },
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Create a KV pair:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XPOST -H "X-Vault-Token: ${VAULT_TOKEN}" -d '{"app_password": "secret123"}' http://127.0.0.1:8200/v1/secret/app01/app_password</span></code></pre></td></tr></table></div></figure>


<p>Read the secret from KV pair:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET -H "X-Vault-Token: ${VAULT_TOKEN}" http://127.0.0.1:8200/v1/secret/app01/app_password | jq
</span><span class='line'>{
</span><span class='line'>  "request_id": "70d5f16d-2abb-fcfd-063f-0e21d9cef8fd",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 2764800,
</span><span class='line'>  "data": {
</span><span class='line'>    "app_password": "secret123"
</span><span class='line'>  },
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Try to write outside the allowed path:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XPOST -H "X-Vault-Token: ${VAULT_TOKEN}" -d '{"app_password": "secret123"}' http://127.0.0.1:8200/v1/secrets/app01/app_password
</span><span class='line'>{"errors":["1 error occurred:\n\t* permission denied\n\n"]}</span></code></pre></td></tr></table></div></figure>


<h2>Resources:</h2>

<ul>
<li><a href="https://www.vaultproject.io/api/system/audit.html">https://www.vaultproject.io/api/system/audit.html</a></li>
<li><a href="https://learn.hashicorp.com/vault/getting-started/apis">https://learn.hashicorp.com/vault/getting-started/apis</a></li>
<li><a href="https://www.hashicorp.com/resources/getting-vault-enterprise-installed-running">https://www.hashicorp.com/resources/getting-vault-enterprise-installed-running</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Persist Vault Data With Amazon S3 as a Storage Backend]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/07/persist-vault-data-with-amazon-s3-as-a-storage-backend/"/>
    <updated>2019-05-07T16:01:45-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/07/persist-vault-data-with-amazon-s3-as-a-storage-backend</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57256060-f1a27e00-7055-11e9-9a05-77d3fdd6c76f.png" alt="" /></p>

<p>In a previous post we have set up <a href="https://blog.ruanbekker.com/blog/2019/05/06/setup-hashicorp-vault-server-on-docker-and-cli-guide/">the vault server on docker</a>, but using a file backend to persist our data.</p>

<p>In this tutorial we will configure vault to use <a href="https://www.vaultproject.io/docs/configuration/storage/s3.html">amazon s3 as a storage backend</a> to persist our data for vault.</p>

<h2>Provision S3 Bucket</h2>

<p>Create the S3 Bucket where our data will reside:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws s3 mb --region=eu-west-1 s3://somename-vault-backend</span></code></pre></td></tr></table></div></figure>


<h2>Vault Config</h2>

<p>Create the vault config, where we will provide details about our storage backend and configuration for the vault server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim volumes/config/s3vault.json</span></code></pre></td></tr></table></div></figure>


<p>Populate the config file with the following details, you will just need to provide your own credentials:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;backend&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;s3&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;region&quot;</span><span class="p">:</span> <span class="s2">&quot;eu-west-1&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;access_key&quot;</span><span class="p">:</span> <span class="s2">&quot;ACCESS_KEY&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;secret_key&quot;</span><span class="p">:</span> <span class="s2">&quot;SECRET_KEY&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;bucket&quot;</span><span class="p">:</span> <span class="s2">&quot;somename-vault-backend&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;listener&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;tcp&quot;</span><span class="p">:{</span>
</span><span class='line'>      <span class="nt">&quot;address&quot;</span><span class="p">:</span> <span class="s2">&quot;0.0.0.0:8200&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;tls_disable&quot;</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;ui&quot;</span><span class="p">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Docker Compose</h2>

<p>As we are using docker to deploy our vault server, our docker-compose.yml:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$</span> <span class="err">cat</span> <span class="err">&gt;</span> <span class="err">docker-compose.yml</span> <span class="err">&lt;&lt;</span> <span class="err">EOF</span>
</span><span class='line'><span class="err">version:</span> <span class="err">&#39;</span><span class="mi">2</span><span class="err">&#39;</span>
</span><span class='line'><span class="err">services:</span>
</span><span class='line'>  <span class="err">vault:</span>
</span><span class='line'>    <span class="err">image:</span> <span class="err">vault</span>
</span><span class='line'>    <span class="err">container_name:</span> <span class="err">vault</span>
</span><span class='line'>    <span class="err">ports:</span>
</span><span class='line'>      <span class="err">-</span> <span class="s2">&quot;8200:8200&quot;</span>
</span><span class='line'>    <span class="err">restart:</span> <span class="err">always</span>
</span><span class='line'>    <span class="err">volumes:</span>
</span><span class='line'>      <span class="err">-</span> <span class="err">./volumes/logs:/vault/logs</span>
</span><span class='line'>      <span class="err">-</span> <span class="err">./volumes/file:/vault/file</span>
</span><span class='line'>      <span class="err">-</span> <span class="err">./volumes/config:/vault/config</span>
</span><span class='line'>    <span class="err">cap_add:</span>
</span><span class='line'>      <span class="err">-</span> <span class="err">IPC_LOCK</span>
</span><span class='line'>    <span class="err">entrypoint:</span> <span class="err">vault</span> <span class="err">server</span> <span class="err">-config=/vault/config/s</span><span class="mi">3</span><span class="err">vault.json</span>
</span><span class='line'><span class="err">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>Deploy the vault server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$</span> <span class="err">docker-compose</span> <span class="err">up</span>
</span></code></pre></td></tr></table></div></figure>


<p>Go ahead and create some secrets, then deploy the docker container on another host to test out the data persistence.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Prometheus and Node Exporter on Ubuntu for Epic Monitoring]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/"/>
    <updated>2019-05-07T09:55:37-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57307750-696bb980-70e5-11e9-9b0b-73ad88bde6a3.png" alt="image" /></p>

<p><a href="https://prometheus.io/">Prometheus</a> is one of those awesome open source monitoring services that I simply cannot live without. Prometheus is a Time Series Database that collects metrics from services using it&rsquo;s exporters functionality. Prometheus has its own query language called PromQL and makes graphing epic visualiztions with services such as Grafana a breeze.</p>

<h2>What are we doing today</h2>

<p>We will install the <code>prometheus</code> service and set up <code>node_exporter</code> to consume node related metrics such as cpu, memory, io etc that will be scraped by the exporter configuration on prometheus, which then gets pushed into prometheus&rsquo;s time series database. Which can then be used by services such as Grafana to visualize the data.</p>

<p>Other exporters is also available, such as: <code>haproxy_exporter</code>, <code>blackbox_exporter</code> etc, then you also get <code>pushgateway</code> which is used to push data to, and then your exporter configuration scrapes the data from the pushgateway endpoint. In a later tutorial, we will set up push gateway as well.</p>

<h2>Install Prometheus</h2>

<p>First, let&rsquo;s provision our dedicated system users for prometheus and node exporter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ useradd --no-create-home --shell /bin/false prometheus
</span><span class='line'>$ useradd --no-create-home --shell /bin/false node_exporter</span></code></pre></td></tr></table></div></figure>


<p>Create the directories for it&rsquo;s system files:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir /etc/prometheus
</span><span class='line'>$ mkdir /var/lib/prometheus</span></code></pre></td></tr></table></div></figure>


<p>Apply the permissions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chown prometheus:prometheus /etc/prometheus
</span><span class='line'>$ chown prometheus:prometheus /var/lib/prometheus</span></code></pre></td></tr></table></div></figure>


<p>Next, update your system:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update && apt upgrade -y</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s install prometheus, head over to <a href="https://prometheus.io/download/">https://prometheus.io/download/</a> and get the latest version of prometheus:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://github.com/prometheus/prometheus/releases/download/v2.8.0/prometheus-2.8.0.linux-amd64.tar.gz
</span><span class='line'>$ tar -xf prometheus-2.8.0.linux-amd64.tar.gz
</span><span class='line'>$ cp prometheus-2.8.0.linux-amd64/prometheus /usr/local/bin/
</span><span class='line'>$ cp prometheus-2.8.0.linux-amd64/promtool /usr/local/bin/
</span><span class='line'>$ chown prometheus:prometheus /usr/local/bin/prometheus
</span><span class='line'>$ chown prometheus:prometheus /usr/local/bin/promtool
</span><span class='line'>$ cp -r prometheus-2.8.0.linux-amd64/consoles /etc/prometheus/
</span><span class='line'>$ cp -r prometheus-2.8.0.linux-amd64/console_libraries /etc/prometheus/
</span><span class='line'>$ chown -R prometheus:prometheus /etc/prometheus/consoles
</span><span class='line'>$ chown -R prometheus:prometheus /etc/prometheus/console_libraries
</span><span class='line'>$ rm -rf prometheus-2.8.0.linux-amd64*</span></code></pre></td></tr></table></div></figure>


<h2>Configure Prometheus</h2>

<p>We need to tell prometheus to scrape itself in order to get prometheus performance data, edit the prometheus configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/prometheus/prometheus.yml</span></code></pre></td></tr></table></div></figure>


<p>And add a scrape config: Set the interval on when it needs to scrap, the job name which will be in your metric and the endpoint which it needs to scrape:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global:
</span><span class='line'>  scrape_interval: 15s
</span><span class='line'>
</span><span class='line'>scrape_configs:
</span><span class='line'>  - job_name: 'prometheus'
</span><span class='line'>    scrape_interval: 5s
</span><span class='line'>    static_configs:
</span><span class='line'>      - targets: ['localhost:9090']</span></code></pre></td></tr></table></div></figure>


<p>Apply permissions to the configured file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chown prometheus:prometheus /etc/prometheus/prometheus.yml</span></code></pre></td></tr></table></div></figure>


<p>Next, we need to define a systemd unit file so we can control the daemon using systemd:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/systemd/system/prometheus.service</span></code></pre></td></tr></table></div></figure>


<p>The config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'>Description=Prometheus
</span><span class='line'>Wants=network-online.target
</span><span class='line'>After=network-online.target
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>User=prometheus
</span><span class='line'>Group=prometheus
</span><span class='line'>Type=simple
</span><span class='line'>ExecStart=/usr/local/bin/prometheus \
</span><span class='line'>    --config.file /etc/prometheus/prometheus.yml \
</span><span class='line'>    --storage.tsdb.path /var/lib/prometheus/ \
</span><span class='line'>    --web.console.templates=/etc/prometheus/consoles \
</span><span class='line'>    --web.console.libraries=/etc/prometheus/console_libraries
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=multi-user.target</span></code></pre></td></tr></table></div></figure>


<p>Since we created a new systemd unit file, we need to reload the systemd daemon, then start the service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl daemon-reload
</span><span class='line'>$ systemctl start prometheus</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s look at the status to see if everything works as expected:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl status prometheus
</span><span class='line'>prometheus.service - Prometheus
</span><span class='line'>   Loaded: loaded (/etc/systemd/system/prometheus.service; disabled; vendor preset: enabled)
</span><span class='line'>   Active: active (running) since Tue 2019-03-26 11:59:10 UTC; 6s ago
</span><span class='line'> Main PID: 16374 (prometheus)
</span><span class='line'>    Tasks: 9 (limit: 4704)
</span><span class='line'>   CGroup: /system.slice/prometheus.service
</span><span class='line'>           └─16374 /usr/local/bin/prometheus --config.file /etc/prometheus/prometheus.yml --storage.tsdb.path /var/lib/prometheus/ --web.console.templates=/etc/prometheus/consoles --web.console.libraries=
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>Mar 26 11:59:10 ip-172-31-41-126 prometheus[16374]: level=info ts=2019-03-26T11:59:10.893770598Z caller=main.go:655 msg="TSDB started"</span></code></pre></td></tr></table></div></figure>


<p>Seems legit! Enable the service on startup:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl enable prometheus</span></code></pre></td></tr></table></div></figure>


<h2>Install Node Exporter</h2>

<p>Now since we have prometheus up and running, we can start adding exporters to publish data into our prometheus time series database. As mentioned before, with node exporter, we will allow prometheus to scrape the node exporter endpoint to consume metrics about the node:</p>

<p>You will find the latest version from their website, which I have added at the top of this post.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://github.com/prometheus/node_exporter/releases/download/v0.17.0/node_exporter-0.17.0.linux-amd64.tar.gz
</span><span class='line'>$ tar -xf node_exporter-0.17.0.linux-amd64.tar.gz
</span><span class='line'>$ cp node_exporter-0.17.0.linux-amd64/node_exporter /usr/local/bin
</span><span class='line'>$ chown node_exporter:node_exporter /usr/local/bin/node_exporter
</span><span class='line'>$ rm -rf node_exporter-0.17.0.linux-amd64*</span></code></pre></td></tr></table></div></figure>


<p>Create the systemd unit file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/systemd/system/node_exporter.service</span></code></pre></td></tr></table></div></figure>


<p>Apply this configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'>Description=Node Exporter
</span><span class='line'>Wants=network-online.target
</span><span class='line'>After=network-online.target
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>User=node_exporter
</span><span class='line'>Group=node_exporter
</span><span class='line'>Type=simple
</span><span class='line'>ExecStart=/usr/local/bin/node_exporter
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=multi-user.target</span></code></pre></td></tr></table></div></figure>


<p>Reload the systemd daemon and start node exporter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl daemon-reload
</span><span class='line'>$ systemctl start node_exporter</span></code></pre></td></tr></table></div></figure>


<p>Look at the status:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ node_exporter.service - Node Exporter
</span><span class='line'>   Loaded: loaded (/etc/systemd/system/node_exporter.service; disabled; vendor preset: enabled)
</span><span class='line'>   Active: active (running) since Tue 2019-03-26 12:01:39 UTC; 5s ago
</span><span class='line'> Main PID: 16474 (node_exporter)
</span><span class='line'>    Tasks: 4 (limit: 4704)
</span><span class='line'>   CGroup: /system.slice/node_exporter.service
</span><span class='line'>           └─16474 /usr/local/bin/node_exporter
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>Mar 26 12:01:39 ip-172-31-41-126 node_exporter[16474]: time="2019-03-26T12:01:39Z" level=info msg="Listening on :9100" source="node_exporter.go:111"</span></code></pre></td></tr></table></div></figure>


<p>If everything looks good, enable the service on boot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl enable node_exporter</span></code></pre></td></tr></table></div></figure>


<h2>Configure Node Exporter</h2>

<p>Now that we have node exporter running, we need to tell prometheus how to scrape node exporter, so that the node related metrics can end up into prometheus. Edit the prometheus config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/prometheus/prometheus.yml</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m providing the full config, but the config is the last section, where you can see the jobname is node_exporter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global:
</span><span class='line'>  scrape_interval: 15s
</span><span class='line'>
</span><span class='line'>scrape_configs:
</span><span class='line'>  - job_name: 'prometheus'
</span><span class='line'>    scrape_interval: 5s
</span><span class='line'>    static_configs:
</span><span class='line'>      - targets: ['localhost:9090']
</span><span class='line'>
</span><span class='line'>  - job_name: 'node_exporter'
</span><span class='line'>    scrape_interval: 5s
</span><span class='line'>    static_configs:
</span><span class='line'>      - targets: ['localhost:9100']</span></code></pre></td></tr></table></div></figure>


<p>Once the config is saved, restart prometheus and have a look at the status if everything is going as expected:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart prometheus
</span><span class='line'>$ systemctl status prometheus</span></code></pre></td></tr></table></div></figure>


<h2>Nginx Reverse Proxy</h2>

<p>Let&rsquo;s add a layer of security and front our setup with a nginx reverse proxy, so that we don&rsquo;t have to access prometheus on high ports and we have the option to enable basic http authentication. Install nginx:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt install nginx apache2-utils -y</span></code></pre></td></tr></table></div></figure>


<p>Create the authentication file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ htpasswd -c /etc/nginx/.htpasswd admin</span></code></pre></td></tr></table></div></figure>


<p>Create the nginx site configuration, this will tel nginx to route connections on port 80, to reverse proxy to localhost, port 9090, if authenticated:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rm /etc/nginx/sites-enabled/default
</span><span class='line'>$ vim /etc/nginx/sites-enabled/prometheus.conf</span></code></pre></td></tr></table></div></figure>


<p>And this is the config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen 80 default_server;
</span><span class='line'>    listen [::]:80 default_server;
</span><span class='line'>    root /var/www/html;
</span><span class='line'>    index index.html index.htm index.nginx-debian.html;
</span><span class='line'>    server_name _;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>            auth_basic "Prometheus Auth";
</span><span class='line'>            auth_basic_user_file /etc/nginx/.htpasswd;
</span><span class='line'>            proxy_pass http://localhost:9090;
</span><span class='line'>            proxy_http_version 1.1;
</span><span class='line'>            proxy_set_header Upgrade $http_upgrade;
</span><span class='line'>            proxy_set_header Connection 'upgrade';
</span><span class='line'>            proxy_set_header Host $host;
</span><span class='line'>            proxy_cache_bypass $http_upgrade;
</span><span class='line'>        }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Reload nginx configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl reload nginx</span></code></pre></td></tr></table></div></figure>


<h2>Access the Beauty of Prometheus Land!</h2>

<p>Once you have authenticated, head over to status, here you will see status info such as your targets, this wil be the endpoints that prometheus is scraping:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57307130-4b518980-70e4-11e9-9f16-4665427fba1f.png" alt="image" /></p>

<p>From the main screen, let&rsquo;s dive into some queries using <a href="https://prometheus.io/docs/prometheus/latest/querying/basics/">PromQL</a>. Also see my <a href="https://github.com/ruanbekker/awesome-list/blob/master/cheatsheets/PROMETHEUS.md">Prometheus Cheatsheet</a>.</p>

<p>For the first query, we want to see the available memory of this node in bytes (<code>node_memory_MemAvailable_bytes</code>):</p>

<p><img src="https://user-images.githubusercontent.com/567298/57307338-aa170300-70e4-11e9-9022-e02a4d1d64cf.png" alt="image" /></p>

<p>Now since the value is in bytes, let&rsquo;s convert the value to MB, (<code>node_memory_MemAvailable_bytes/1024/1024</code>)</p>

<p><img src="https://user-images.githubusercontent.com/567298/57307421-d468c080-70e4-11e9-8bd3-425803cb805c.png" alt="image" /></p>

<p>Let&rsquo;s say we want to see the average memory available in 5 minute buckets:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57307504-feba7e00-70e4-11e9-952f-a7ba12eba6a8.png" alt="image" /></p>

<p>That&rsquo;s a few basic ones, but feel free to checkout my <a href="https://github.com/ruanbekker/awesome-list/blob/master/cheatsheets/PROMETHEUS.md">Prometheus Cheatsheet</a> for other examples. I update them as I find more queries.</p>

<h2>Thanks</h2>

<p>Hope this was informative. I am planning to publish a post on visualizing prometheus data with Grafana (which is EPIC!) and installing Pushgateway for custom integrations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Fix the Following Signatures Couldnt Be Verified Because the Public Key Is Not Available With Apt]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/07/how-to-fix-the-following-signatures-couldnt-be-verified-because-the-public-key-is-not-available-with-apt/"/>
    <updated>2019-05-07T06:16:31-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/07/how-to-fix-the-following-signatures-couldnt-be-verified-because-the-public-key-is-not-available-with-apt</id>
    <content type="html"><![CDATA[<p>I was trying to install grafana on ubuntu when I got faced with: &ldquo;the following signatures couldn&rsquo;t be verified because the public key is not available&rdquo; error as seen below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"
</span><span class='line'>Hit:1 http://eu-west-1.ec2.archive.ubuntu.com/ubuntu bionic InRelease
</span><span class='line'>Get:2 http://eu-west-1.ec2.archive.ubuntu.com/ubuntu bionic-updates InRelease [88.7 kB]
</span><span class='line'>Get:3 http://eu-west-1.ec2.archive.ubuntu.com/ubuntu bionic-backports InRelease [74.6 kB]
</span><span class='line'>Get:4 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB]
</span><span class='line'>Get:5 http://eu-west-1.ec2.archive.ubuntu.com/ubuntu bionic-backports/universe Sources [2068 B]
</span><span class='line'>Get:6 http://eu-west-1.ec2.archive.ubuntu.com/ubuntu bionic-backports/universe amd64 Packages [3492 B]
</span><span class='line'>Get:7 https://packages.grafana.com/oss/deb stable InRelease [12.1 kB]
</span><span class='line'>Err:7 https://packages.grafana.com/oss/deb stable InRelease
</span><span class='line'>  The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 8C8C34C524098CB6
</span><span class='line'>Reading package lists... Done</span></code></pre></td></tr></table></div></figure>


<p>In order to continue, we need to import the trusted key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt-key adv --keyserver keyserver.ubuntu.com --recv-keys  8C8C34C524098CB6
</span><span class='line'>Executing: /tmp/apt-key-gpghome.9xlwQh2M06/gpg.1.sh --keyserver keyserver.ubuntu.com --recv-keys 8C8C34C524098CB6
</span><span class='line'>gpg: key 8C8C34C524098CB6: public key "Grafana &lt;info@grafana.com&gt;" imported
</span><span class='line'>gpg: Total number processed: 1
</span><span class='line'>gpg:               imported: 1</span></code></pre></td></tr></table></div></figure>


<p>Now that the key has been imported, we can update and continue:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update
</span><span class='line'>Hit:1 http://eu-west-1.ec2.archive.ubuntu.com/ubuntu bionic InRelease
</span><span class='line'>Hit:2 http://eu-west-1.ec2.archive.ubuntu.com/ubuntu bionic-updates InRelease
</span><span class='line'>Hit:3 http://eu-west-1.ec2.archive.ubuntu.com/ubuntu bionic-backports InRelease
</span><span class='line'>Hit:4 http://security.ubuntu.com/ubuntu bionic-security InRelease
</span><span class='line'>Get:5 https://packages.grafana.com/oss/deb stable InRelease [12.1 kB]
</span><span class='line'>Get:6 https://packages.grafana.com/oss/deb stable/main amd64 Packages [10.8 kB]
</span><span class='line'>Fetched 22.9 kB in 1s (32.7 kB/s)
</span><span class='line'>Reading package lists... Done</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Hashicorp Vault Server on Docker and a Getting Started CLI Guide]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/06/setup-hashicorp-vault-server-on-docker-and-cli-guide/"/>
    <updated>2019-05-06T16:49:09-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/06/setup-hashicorp-vault-server-on-docker-and-cli-guide</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57256060-f1a27e00-7055-11e9-9a05-77d3fdd6c76f.png" alt="" /></p>

<p>Vault is one of Hashicorp&rsquo;s awesome services, which enables you to centrally store, access and distribute dynamic secrets such as tokens, passwords, certificates and encryption keys.</p>

<h2>What will we be doing today</h2>

<p>We will setup a Vault Server on Docker and demonstrate a getting started guide with the Vault CLI to Initialize the Vault, Create / Use and Manage Secrets.</p>

<p>For related posts:</p>

<ul>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/07/persist-vault-data-with-amazon-s3-as-a-storage-backend/">Persist Vault Data with Amazon S3 as a Storage Backend</a></li>
</ul>


<h2>Setting up the Vault Server</h2>

<p>Create the directory structure:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ touch docker-compose.yml
</span><span class='line'>$ mkdir -p volumes/{config,file,logs}</span></code></pre></td></tr></table></div></figure>


<p>Populate the vault config <code>vault.json</code>. (As you can see the config is local, in the next couple of posts, I will show how to persist this config to Amazon S3)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat &gt; volumes/config/vault.json &lt;&lt; EOF
</span><span class='line'>{
</span><span class='line'>  "backend": {
</span><span class='line'>    "file": {
</span><span class='line'>      "path": "/vault/file"
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  "listener": {
</span><span class='line'>    "tcp":{
</span><span class='line'>      "address": "0.0.0.0:8200",
</span><span class='line'>      "tls_disable": 1
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  "ui": true
</span><span class='line'>}
</span><span class='line'>EOF</span></code></pre></td></tr></table></div></figure>


<p>Populate the <code>docker-compose.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat &gt; docker-compose.yml &lt;&lt; EOF
</span><span class='line'>version: '2'
</span><span class='line'>services:
</span><span class='line'>  vault:
</span><span class='line'>    image: vault
</span><span class='line'>    container_name: vault
</span><span class='line'>    ports:
</span><span class='line'>      - "8200:8200"
</span><span class='line'>    restart: always
</span><span class='line'>    volumes:
</span><span class='line'>      - ./volumes/logs:/vault/logs
</span><span class='line'>      - ./volumes/file:/vault/file
</span><span class='line'>      - ./volumes/config:/vault/config
</span><span class='line'>    cap_add:
</span><span class='line'>      - IPC_LOCK
</span><span class='line'>    entrypoint: vault server -config=/vault/config/vault.json
</span><span class='line'>EOF</span></code></pre></td></tr></table></div></figure>


<p>Start the Vault Server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose up</span></code></pre></td></tr></table></div></figure>


<p>The UI is available at <a href="http://localhost:8200/ui">http://localhost:8200/ui</a> and the api at <a href="http://localhost:8200">http://localhost:8200</a></p>

<h2>Interacting with the Vault CLI</h2>

<p>I will demonstrate how to use the Vault CLI to interact with Vault. Let&rsquo;s start by installing the vault cli tools, I am using mac, so I will be using brew:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install vault</span></code></pre></td></tr></table></div></figure>


<p>Set environment variables:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export VAULT_ADDR='http://127.0.0.1:8200'</span></code></pre></td></tr></table></div></figure>


<h2>Initialize the Vault Cluster:</h2>

<p>Initialize new vault cluster with 6 key shares:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault operator init -key-shares=6 -key-threshold=3
</span><span class='line'>Unseal Key 1: RntjR...DQv
</span><span class='line'>Unseal Key 2: 7E1bG...0LL+
</span><span class='line'>Unseal Key 3: AEuhl...A1NO
</span><span class='line'>Unseal Key 4: bZU76...FMGl
</span><span class='line'>Unseal Key 5: DmEjY...n7Hk
</span><span class='line'>Unseal Key 6: pC4pK...XbKb
</span><span class='line'>
</span><span class='line'>Initial Root Token: s.F0JGq..98s2U
</span><span class='line'>
</span><span class='line'>Vault initialized with 10 key shares and a key threshold of 3. Please
</span><span class='line'>securely distribute the key shares printed above. When the Vault is re-sealed,
</span><span class='line'>restarted, or stopped, you must supply at least 3 of these keys to unseal it
</span><span class='line'>before it can start servicing requests.
</span><span class='line'>
</span><span class='line'>Vault does not store the generated master key. Without at least 3 key to
</span><span class='line'>reconstruct the master key, Vault will remain permanently sealed!
</span><span class='line'>
</span><span class='line'>It is possible to generate new unseal keys, provided you have a quorum of
</span><span class='line'>existing unseal keys shares. See "vault operator rekey" for more information.</span></code></pre></td></tr></table></div></figure>


<p>In order to unseal the vault cluster, we need to supply it with 3 key shares:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault operator unseal RntjR...DQv
</span><span class='line'>$ vault operator unseal bZU76...FMGl
</span><span class='line'>$ vault operator unseal pC4pK...XbKb</span></code></pre></td></tr></table></div></figure>


<p>Ensure the vault is unsealed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault status -format=json
</span><span class='line'>{
</span><span class='line'>  "type": "shamir",
</span><span class='line'>  "initialized": true,
</span><span class='line'>  "sealed": false,
</span><span class='line'>  "t": 3,
</span><span class='line'>  "n": 5,
</span><span class='line'>  "progress": 0,
</span><span class='line'>  "nonce": "",
</span><span class='line'>  "version": "1.1.0",
</span><span class='line'>  "migration": false,
</span><span class='line'>  "cluster_name": "vault-cluster-dca2b572",
</span><span class='line'>  "cluster_id": "469c2f1d-xx-xx-xx-03bfc497c883",
</span><span class='line'>  "recovery_seal": false
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Authenticate against the vault:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault login s.tdlEqsfzGbePVlke5hTpr9Um
</span><span class='line'>Success! You are now authenticated. The token information displayed below
</span><span class='line'>is already stored in the token helper. You do NOT need to run "vault login"
</span><span class='line'>again. Future Vault requests will automatically use this token.</span></code></pre></td></tr></table></div></figure>


<p>Using the cli your auth token will be saved locally at <code>~/.vault-token</code>.</p>

<p>Enable the secret kv engine:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault secrets enable -version=1 -path=secret kv</span></code></pre></td></tr></table></div></figure>


<h2>Create and Read Secrets</h2>

<p>Write a secret to the path enabled above:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv put secret/my-app/password password=123</span></code></pre></td></tr></table></div></figure>


<p>List your secrets:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv list secret/
</span><span class='line'>Keys
</span><span class='line'>----
</span><span class='line'>my-app/</span></code></pre></td></tr></table></div></figure>


<p>Read the secret (defaults in table format):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv get secret/my-app/password
</span><span class='line'>Key                 Value
</span><span class='line'>---                 -----
</span><span class='line'>refresh_interval    768h
</span><span class='line'>password            123</span></code></pre></td></tr></table></div></figure>


<p>Read the secret in json format:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv get --format=json secret/my-app/password
</span><span class='line'>{
</span><span class='line'>  "request_id": "0249c878-7432-9555-835a-89b275fca32o",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "lease_duration": 2764800,
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "data": {
</span><span class='line'>    "password": "123"
</span><span class='line'>  },
</span><span class='line'>  "warnings": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Read only the password value in the secret:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv get -field=password secret/my-app/password
</span><span class='line'>123</span></code></pre></td></tr></table></div></figure>


<h2>Key with Multiple Secrets</h2>

<p>Create a key with multiple secrets:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv put secret/reminders/app db_username=db.ruanbekker.com username=root password=secret</span></code></pre></td></tr></table></div></figure>


<p>Read all the secrets:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv get --format=json secret/reminders/app
</span><span class='line'>{
</span><span class='line'>  "request_id": "0144c878-7532-9555-835a-8cb275fca3dd",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "lease_duration": 2764800,
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "data": {
</span><span class='line'>    "db_username": "db.ruanbekker.com",
</span><span class='line'>    "password": "secret",
</span><span class='line'>    "username": "root"
</span><span class='line'>  },
</span><span class='line'>  "warnings": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Read only the username field in the key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv get -field=username secret/reminders/app
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<p>Delete the secret:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv delete secret/reminders</span></code></pre></td></tr></table></div></figure>


<h2>Versioning</h2>

<p>Create a key and set the metadata to max of 5 versions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv metadata put -max-versions=5 secret/fooapp/appname</span></code></pre></td></tr></table></div></figure>


<p>Get the metadata of the key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv metadata get secret/fooapp/appname
</span><span class='line'>======= Metadata =======
</span><span class='line'>Key                Value
</span><span class='line'>---                -----
</span><span class='line'>cas_required       false
</span><span class='line'>created_time       2019-04-07T12:35:54.355411Z
</span><span class='line'>current_version    0
</span><span class='line'>max_versions       5
</span><span class='line'>oldest_version     0
</span><span class='line'>updated_time       2019-04-07T12:35:54.355411Z</span></code></pre></td></tr></table></div></figure>


<p>Write a secret <code>appname</code> to our key: <code>secret/fooapp/appname</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv put secret/fooapp/appname appname=app1
</span><span class='line'>Key              Value
</span><span class='line'>---              -----
</span><span class='line'>created_time     2019-04-07T12:36:41.7577102Z
</span><span class='line'>deletion_time    n/a
</span><span class='line'>destroyed        false
</span><span class='line'>version          1</span></code></pre></td></tr></table></div></figure>


<p>Overwrite the key with a couple of requests:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv put secret/fooapp/appname appname=app2
</span><span class='line'>$ vault kv put secret/fooapp/appname appname=app3</span></code></pre></td></tr></table></div></figure>


<p>Read the current value:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv get -field=appname secret/fooapp/appname
</span><span class='line'>app3</span></code></pre></td></tr></table></div></figure>


<p>Get the version=2 value of this file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv get -field=appname -version=2 secret/fooapp/appname
</span><span class='line'>app2</span></code></pre></td></tr></table></div></figure>


<h2>Thanks</h2>

<p>Thanks for reading, hope this was informative. Have a look at <a href="https://www.vaultproject.io">Hashicorp&rsquo;s Vault Documentation</a> for more information on the project. I will post more posts on Vault under the <a href="https://blog.ruanbekker.com/blog/categories/vault">#vault</a> category.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Concourse CI to Deploy to Docker Swarm]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/04/using-concourse-ci-to-deploy-to-docker-swarm/"/>
    <updated>2019-05-04T17:11:17-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/04/using-concourse-ci-to-deploy-to-docker-swarm</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/gzkdu9.jpg?nocache=1511644783495" alt="" /></p>

<p>In this tutorial we will use Concourse to Deploy our application to Docker Swarm.</p>

<h2>The Flow</h2>

<ul>
<li>Our application code resides on Github</li>
<li>The pipeline triggers when a commit is pushed to the master branch</li>
<li>The pipeline will automatically deploy to the staging environment</li>
<li>The pipeline requires a manual trigger to deploy to prod</li>
<li>Note: Staging and Prod on the same swarm for demonstration</li>
</ul>


<p>The code for this tutorial is available on my <strong><a href="https://github.com/ruanbekker/concourse-swarm-app-demo">github repository</a></strong></p>

<h2>Application Structure</h2>

<p>The application structure for our code looks like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57184912-1d412f00-6ec3-11e9-85e9-6517d83e96e8.png" alt="" /></p>

<h2>Pipeline Walktrough</h2>

<p>Our <code>ci/pipeline.yml</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">resources</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git</span>
</span><span class='line'>    <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">uri</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git@github.com:ruanbekker/concourse-swarm-app-demo.git</span>
</span><span class='line'>      <span class="l-Scalar-Plain">branch</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">master</span>
</span><span class='line'>      <span class="l-Scalar-Plain">private_key</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((github_private_key))</span>
</span><span class='line'>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo-staging</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git</span>
</span><span class='line'>    <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">uri</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git@github.com:ruanbekker/concourse-swarm-app-demo.git</span>
</span><span class='line'>      <span class="l-Scalar-Plain">branch</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">master</span>
</span><span class='line'>      <span class="l-Scalar-Plain">private_key</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((github_private_key))</span>
</span><span class='line'>      <span class="l-Scalar-Plain">paths</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">config/staging/*</span>
</span><span class='line'>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo-prod</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git</span>
</span><span class='line'>    <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">uri</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git@github.com:ruanbekker/concourse-swarm-app-demo.git</span>
</span><span class='line'>      <span class="l-Scalar-Plain">branch</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">master</span>
</span><span class='line'>      <span class="l-Scalar-Plain">private_key</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((github_private_key))</span>
</span><span class='line'>      <span class="l-Scalar-Plain">paths</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">config/prod/*</span>
</span><span class='line'>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack-alert</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack-notification</span>
</span><span class='line'>    <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((slack_notification_url))</span>
</span><span class='line'>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-staging</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">semver</span>
</span><span class='line'>    <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git</span>
</span><span class='line'>      <span class="l-Scalar-Plain">uri</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git@github.com:ruanbekker/concourse-swarm-app-demo.git</span>
</span><span class='line'>      <span class="l-Scalar-Plain">private_key</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((github_private_key))</span>
</span><span class='line'>      <span class="l-Scalar-Plain">file</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-staging</span>
</span><span class='line'>      <span class="l-Scalar-Plain">branch</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-staging</span>
</span><span class='line'>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-prod</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">semver</span>
</span><span class='line'>    <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git</span>
</span><span class='line'>      <span class="l-Scalar-Plain">uri</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git@github.com:ruanbekker/concourse-swarm-app-demo.git</span>
</span><span class='line'>      <span class="l-Scalar-Plain">private_key</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((github_private_key))</span>
</span><span class='line'>      <span class="l-Scalar-Plain">file</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-prod</span>
</span><span class='line'>      <span class="l-Scalar-Plain">branch</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-prod</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">resource_types</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack-notification</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker-image</span>
</span><span class='line'>    <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">repository</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cfcommunity/slack-notification-resource</span>
</span><span class='line'>      <span class="l-Scalar-Plain">tag</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">v1.3.0</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">jobs</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bump-staging-version</span>
</span><span class='line'>    <span class="l-Scalar-Plain">plan</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo-staging</span>
</span><span class='line'>      <span class="l-Scalar-Plain">trigger</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-staging</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">put</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-staging</span>
</span><span class='line'>      <span class="l-Scalar-Plain">params</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">bump</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">major</span>
</span><span class='line'>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bump-prod-version</span>
</span><span class='line'>    <span class="l-Scalar-Plain">plan</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo-prod</span>
</span><span class='line'>      <span class="l-Scalar-Plain">trigger</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-prod</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">put</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-prod</span>
</span><span class='line'>      <span class="l-Scalar-Plain">params</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">bump</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">major</span>
</span><span class='line'>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">deploy-staging</span>
</span><span class='line'>    <span class="l-Scalar-Plain">plan</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo-staging</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-staging</span>
</span><span class='line'>      <span class="l-Scalar-Plain">passed</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">bump-staging-version</span>
</span><span class='line'>      <span class="l-Scalar-Plain">trigger</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">task</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">deploy-staging</span>
</span><span class='line'>      <span class="l-Scalar-Plain">params</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">DOCKER_SWARM_HOSTNAME</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_swarm_staging_host))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">DOCKER_SWARM_KEY</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_swarm_key))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">DOCKER_HUB_USER</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_hub_user))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">DOCKER_HUB_PASSWORD</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_hub_password))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">SERVICE_NAME</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">app-staging</span>
</span><span class='line'>        <span class="l-Scalar-Plain">SWARM</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">staging</span>
</span><span class='line'>        <span class="l-Scalar-Plain">ENVIRONMENT</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">staging</span>
</span><span class='line'>        <span class="l-Scalar-Plain">AWS_ACCESS_KEY_ID</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((aws_access_key_id))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">AWS_SECRET_ACCESS_KEY</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((aws_secret_access_key))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">AWS_DEFAULT_REGION</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((aws_region))</span>
</span><span class='line'>      <span class="l-Scalar-Plain">config</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">platform</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linux</span>
</span><span class='line'>        <span class="l-Scalar-Plain">image_resource</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker-image</span>
</span><span class='line'>          <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">repository</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rbekker87/build-tools</span>
</span><span class='line'>            <span class="l-Scalar-Plain">tag</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">latest</span>
</span><span class='line'>            <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_hub_user))</span>
</span><span class='line'>            <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_hub_password))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">inputs</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo-staging</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-staging</span>
</span><span class='line'>        <span class="l-Scalar-Plain">run</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/bin/sh</span>
</span><span class='line'>          <span class="l-Scalar-Plain">args</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">-c</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">|</span>
</span><span class='line'>              <span class="no">./main-repo/ci/scripts/deploy.sh</span>
</span><span class='line'>      <span class="l-Scalar-Plain">on_failure</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">put</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack-alert</span>
</span><span class='line'>        <span class="l-Scalar-Plain">params</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">channel</span><span class="p-Indicator">:</span> <span class="s">&#39;#system_events&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="s">&#39;concourse&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">icon_emoji</span><span class="p-Indicator">:</span> <span class="s">&#39;:concourse:&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">silent</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>          <span class="l-Scalar-Plain">text</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>            <span class="no">*$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME* ($BUILD_NAME) FAILED :rage: - TestApp Deploy to staging-swarm failed</span>
</span><span class='line'>            <span class="no">http://ci.example.local/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME</span>
</span><span class='line'>      <span class="l-Scalar-Plain">on_success</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">put</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack-alert</span>
</span><span class='line'>        <span class="l-Scalar-Plain">params</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">channel</span><span class="p-Indicator">:</span> <span class="s">&#39;#system_events&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="s">&#39;concourse&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">icon_emoji</span><span class="p-Indicator">:</span> <span class="s">&#39;:concourse:&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">silent</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>          <span class="l-Scalar-Plain">text</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>            <span class="no">*$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME* ($BUILD_NAME) SUCCESS :aww_yeah: - TestApp Deploy to staging-swarm succeeded</span>
</span><span class='line'>            <span class="no">http://ci.example.local/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME</span>
</span><span class='line'>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">deploy-prod</span>
</span><span class='line'>    <span class="l-Scalar-Plain">plan</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo-prod</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-prod</span>
</span><span class='line'>      <span class="l-Scalar-Plain">passed</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">bump-prod-version</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">task</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">deploy-prod</span>
</span><span class='line'>      <span class="l-Scalar-Plain">params</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">DOCKER_SWARM_HOSTNAME</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_swarm_prod_host))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">DOCKER_SWARM_KEY</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_swarm_key))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">DOCKER_HUB_USER</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_hub_user))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">DOCKER_HUB_PASSWORD</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_hub_password))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">SERVICE_NAME</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">app-prod</span>
</span><span class='line'>        <span class="l-Scalar-Plain">SWARM</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">prod</span>
</span><span class='line'>        <span class="l-Scalar-Plain">ENVIRONMENT</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">production</span>
</span><span class='line'>        <span class="l-Scalar-Plain">AWS_ACCESS_KEY_ID</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((aws_access_key_id))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">AWS_SECRET_ACCESS_KEY</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((aws_secret_access_key))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">AWS_DEFAULT_REGION</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((aws_region))</span>
</span><span class='line'>      <span class="l-Scalar-Plain">config</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">platform</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linux</span>
</span><span class='line'>        <span class="l-Scalar-Plain">image_resource</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker-image</span>
</span><span class='line'>          <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">repository</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rbekker87/build-tools</span>
</span><span class='line'>            <span class="l-Scalar-Plain">tag</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">latest</span>
</span><span class='line'>            <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_hub_user))</span>
</span><span class='line'>            <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_hub_password))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">inputs</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo-prod</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-prod</span>
</span><span class='line'>        <span class="l-Scalar-Plain">run</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/bin/sh</span>
</span><span class='line'>          <span class="l-Scalar-Plain">args</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">-c</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">|</span>
</span><span class='line'>              <span class="no">./main-repo/ci/scripts/deploy.sh</span>
</span><span class='line'>      <span class="l-Scalar-Plain">on_failure</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">put</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack-alert</span>
</span><span class='line'>        <span class="l-Scalar-Plain">params</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">channel</span><span class="p-Indicator">:</span> <span class="s">&#39;#system_events&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="s">&#39;concourse&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">icon_emoji</span><span class="p-Indicator">:</span> <span class="s">&#39;:concourse:&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">silent</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>          <span class="l-Scalar-Plain">text</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>            <span class="no">*$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME* ($BUILD_NAME) FAILED :rage: - TestApp Deploy to prod-swarm failed</span>
</span><span class='line'>            <span class="no">http://ci.example.local/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME</span>
</span><span class='line'>      <span class="l-Scalar-Plain">on_success</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">put</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack-alert</span>
</span><span class='line'>        <span class="l-Scalar-Plain">params</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">channel</span><span class="p-Indicator">:</span> <span class="s">&#39;#system_events&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="s">&#39;concourse&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">icon_emoji</span><span class="p-Indicator">:</span> <span class="s">&#39;:concourse:&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">silent</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>          <span class="l-Scalar-Plain">text</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>            <span class="no">*$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME* ($BUILD_NAME) SUCCESS :aww_yeah: - TestApp Deploy to prod-swarm succeeded</span>
</span><span class='line'>            <span class="no">http://ci.example.local/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our <code>ci/credentials.yml</code> which will hold all our secret info, which will remain local:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yourdockerusername</span>
</span><span class='line'><span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yourdockerpassword</span>
</span><span class='line'><span class="l-Scalar-Plain">docker_swarm_prod_host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10.20.30.40</span>
</span><span class='line'><span class="nn">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first step of our deploy will invoke a shell script that will establish a ssh tunnel to the docker host, mounting the docker socket to a tcp local port, then exporting the docker host port to the tunneled port, <code>ci/scripts/deploy.sh</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1">#!/usr/bin/env sh</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">export DOCKER_HOST=&quot;localhost:2376&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">echo &quot;${DOCKER_SWARM_KEY}&quot; | sed -e &#39;s/\(KEY-----\)\s/\1\n/g; s/\s\(-----END\)/\n\1/g&#39; | sed -e &#39;2s/\s\+/\n/g&#39; &gt; key.pem</span>
</span><span class='line'><span class="l-Scalar-Plain">chmod 600 key.pem</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">screen -S \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sshtunnel -m -d sh -c \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&quot;ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -i ./key.pem -NL localhost:2376:/var/run/docker.sock root@$DOCKER_SWARM_HOSTNAME&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">sleep 5</span>
</span><span class='line'><span class="l-Scalar-Plain">docker login -u &quot;${DOCKER_HUB_USER}&quot; -p &quot;${DOCKER_HUB_PASSWORD}&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">docker stack deploy --prune -c ./main-repo/ci/docker/docker-compose.${ENVIRONMENT}.yml $SERVICE_NAME --with-registry-auth</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">if [ $? != &quot;0&quot; ]</span>
</span><span class='line'>  <span class="l-Scalar-Plain">then</span>
</span><span class='line'>    <span class="l-Scalar-Plain">echo &quot;deploy failure for</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">$SERVICE_NAME&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">screen -S sshtunnel -X quit</span>
</span><span class='line'>    <span class="l-Scalar-Plain">exit 1</span>
</span><span class='line'>  <span class="l-Scalar-Plain">else</span>
</span><span class='line'>    <span class="l-Scalar-Plain">set -x</span>
</span><span class='line'>    <span class="l-Scalar-Plain">echo &quot;deploy success for</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">$SERVICE_NAME&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">screen -S sshtunnel -X quit</span>
</span><span class='line'><span class="l-Scalar-Plain">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>The deploy script references the docker-compose files, first our <code>ci/docker/docker-compose.staging.yml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&quot;3.4&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">web</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ruanbekker/web-center-name</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">APP_ENVIRONMENT=Staging</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">81:5000</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">web_net</span>
</span><span class='line'>    <span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">mode</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">replicated</span>
</span><span class='line'>      <span class="l-Scalar-Plain">replicas</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">web_net</span><span class="p-Indicator">:</span> <span class="p-Indicator">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, our docker-compose for production, <code>ci/docker/docker-compose.production.yml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&quot;3.4&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">web</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ruanbekker/web-center-name</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">APP_ENVIRONMENT=Production</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">80:5000</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">web_net</span>
</span><span class='line'>    <span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">mode</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">replicated</span>
</span><span class='line'>      <span class="l-Scalar-Plain">replicas</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">web_net</span><span class="p-Indicator">:</span> <span class="p-Indicator">{}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Set the Pipeline in Concourse</h2>

<p>Create 2 branches in your github repository for versioning: <code>version-staging</code> and <code>version-prod</code>, then logon to concourse and save the target:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ fly -t ci login -n main -c http://&lt;concourse-ip&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Set the pipeline, point the config, local variables definition and name the pipeline:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ fly -t ci sp -n main -c ci/pipeline.yml -p &lt;pipeline-name&gt; -l ci/&lt;variables&gt;.yml</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will find that the pipeline will look like below and that it will be in a paused state:</p>

<p><img src="https://user-images.githubusercontent.com/567298/54060759-96dfd800-4206-11e9-9236-e3b86783417c.png" alt="" /></p>

<p>Unpause the pipeline:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ fly -t ci up -p swarm-demo</span>
</span></code></pre></td></tr></table></div></figure>


<p>The pipeline should kick-off automatically due to the trigger that is set to true:</p>

<p><img src="https://user-images.githubusercontent.com/567298/54060811-cbec2a80-4206-11e9-8de7-a0b308f20cef.png" alt="" /></p>

<p>Deployed automatically to staging, prod is a manual trigger:</p>

<p><img src="https://user-images.githubusercontent.com/567298/54060991-8e3bd180-4207-11e9-9726-2c01ca10d24a.png" alt="" /></p>

<h2>Testing our Application</h2>

<p>For demonstration purposes we have deployed staging on port 81 and production on port 80.</p>

<p>Testing Staging on <a href="http://">http://</a><swarm-ip>:81/</p>

<p><img src="https://user-images.githubusercontent.com/567298/57185377-73fe3700-6eca-11e9-91d3-953e754cbde9.png" alt="" /></p>

<p>Testing Production on <a href="http://">http://</a><swarm-ip>:80/</p>

<p><img src="https://user-images.githubusercontent.com/567298/57185383-8d06e800-6eca-11e9-8cff-c3a665f9f377.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using MongoDB Inside Drone CI Services for Unit Testing]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/04/using-mongodb-inside-drone-ci-services-for-unit-testing/"/>
    <updated>2019-05-04T14:52:37-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/04/using-mongodb-inside-drone-ci-services-for-unit-testing</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57184017-4b1f7700-6eb5-11e9-886d-4b811687221a.png" alt="" /></p>

<p>Another nice thing about Drone CI is the &ldquo;Services&rdquo; configuration within your pipeline. At times your unit or integration testing steps might be dependent of a database such as MongoDB, MySQL etc.</p>

<p>Drone allows you to spin up a ephemeral database service such as MongoDB using a Docker container as the fist step within your pipeline, defined in the services section. This step will always run first.</p>

<p>The service container will be reachable via the configured container name as its hostname. Keep note that if you run multiple paralel jobs that the service container will only be reachable from the container where the mongodb container is running.</p>

<h2>What are we doing today</h2>

<p>We will setup a really basic (and a bit useless) pipeline that will spin up a mongodb service container, use a step to write random data to mongodb and a step that reads data from mongodb.</p>

<p>For demonstration purposes, the data is really random but more focused on the service section.</p>

<p>All the source code for this demonstration is available on my <strong><a href="https://github.com/ruanbekker/demo-drone-mongodb-tests">github repository</a></strong></p>

<h2>Our Drone Pipeline</h2>

<p>First we define our service, mongodb. Once the mongodb service is running, we will have our build step, our step that runs the mongodb version against our database, write data into our mongodb database, then read the data from mongodb, then the last step running a shell command with the date.</p>

<p>Our <code>.drone.yml</code> pipeline definition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pipeline</span>
</span><span class='line'><span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongotests</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongo</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongo:4</span>
</span><span class='line'>  <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span> <span class="nv">--smallfiles</span> <span class="p-Indicator">]</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">27017</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">steps</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">build-step</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">alpine</span>
</span><span class='line'>  <span class="l-Scalar-Plain">commands</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;this should be a step that does something&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongodb-return-version</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongo:4</span>
</span><span class='line'>  <span class="l-Scalar-Plain">commands</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">date</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mongo --host mongo --eval &quot;db.version()&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongodb-test-writes</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongo:4</span>
</span><span class='line'>  <span class="l-Scalar-Plain">commands</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">date</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">sh scripts/write_mongo.sh</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongodb-test-reads</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongo:4</span>
</span><span class='line'>  <span class="l-Scalar-Plain">commands</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">date</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">sh scripts/read_mongo.sh</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">last-step</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">alpine</span>
</span><span class='line'>  <span class="l-Scalar-Plain">commands</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;completed at $(date)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our scripts referenced in our steps:</p>

<p>The first will be our script that write random data into mongodb, <code>scripts/write_mongo.sh</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nb">set</span> -ex
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;start writing&quot;</span>
</span><span class='line'>mongo mongo:27017/mydb scripts/write.js
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;done writing&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are referencing a <code>scripts/write.js</code> file which is a function that randomizes data and generates a 1000 documents to write to mongodb:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">txs</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&lt;</span> <span class="mi">1000</span> <span class="p">;</span> <span class="nx">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">transaction_types</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;credit card&quot;</span><span class="p">,</span> <span class="s2">&quot;cash&quot;</span><span class="p">,</span> <span class="s2">&quot;account&quot;</span><span class="p">];</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">store_names</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;edgards&quot;</span><span class="p">,</span> <span class="s2">&quot;cna&quot;</span><span class="p">,</span> <span class="s2">&quot;makro&quot;</span><span class="p">,</span> <span class="s2">&quot;picknpay&quot;</span><span class="p">,</span> <span class="s2">&quot;checkers&quot;</span><span class="p">];</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">random_transaction_type</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span> <span class="o">-</span> <span class="mi">0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="o">+</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">random_store_name</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="mi">4</span> <span class="o">-</span> <span class="mi">0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="o">+</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'> <span class="nx">txs</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span><span class='line'>   <span class="nx">transaction</span><span class="o">:</span> <span class="s1">&#39;tx_&#39;</span> <span class="o">+</span> <span class="nx">x</span><span class="p">,</span>
</span><span class='line'>   <span class="nx">transaction_price</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="mi">1000</span><span class="p">),</span>
</span><span class='line'>   <span class="nx">transaction_type</span><span class="o">:</span> <span class="nx">transaction_types</span><span class="p">[</span><span class="nx">random_transaction_type</span><span class="p">],</span>
</span><span class='line'>   <span class="nx">store_name</span><span class="o">:</span> <span class="nx">store_names</span><span class="p">[</span><span class="nx">random_store_name</span><span class="p">]</span>
</span><span class='line'>   <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">mycollection</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="nx">txs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our script that will read data from mongodb, <code>scripts/read_mongo.sh</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">#</span><span class="o">!</span><span class="err">/bin/sh</span>
</span><span class='line'><span class="nx">set</span> <span class="o">-</span><span class="nx">ex</span>
</span><span class='line'><span class="nx">echo</span> <span class="s2">&quot;start reading&quot;</span>
</span><span class='line'><span class="nx">mongo</span> <span class="nx">mongo</span><span class="o">:</span><span class="mi">27017</span><span class="o">/</span><span class="nx">mydb</span> <span class="o">&lt;&lt;</span><span class="nx">EOF</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">mycollection</span><span class="p">.</span><span class="nx">find</span><span class="p">().</span><span class="nx">count</span><span class="p">();</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">mycollection</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">transaction_price</span><span class="o">:</span> <span class="p">{</span> <span class="err">\</span><span class="nx">$gt</span><span class="o">:</span> <span class="mi">990</span><span class="p">}}).</span><span class="nx">forEach</span><span class="p">(</span> <span class="nx">printjson</span> <span class="p">);</span>
</span><span class='line'><span class="nx">EOF</span>
</span><span class='line'><span class="nx">echo</span> <span class="s2">&quot;done reading&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>README.md</code> to include the build status:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">##</span> <span class="nx">project</span><span class="o">-</span><span class="nx">name</span> <span class="o">!</span><span class="p">[](</span><span class="nx">https</span><span class="o">:</span><span class="c1">//cloud.drone.io/api/badges/&lt;user-name&gt;/&lt;project-name&gt;/status.svg?branch=master)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once your source code is set in github, enable the repository on drone and push to github to trigger the build.</p>

<h2>Demo and Screenshots</h2>

<p>After pushing to github to trigger the build, heading over to drone, I can see that mongodb is running and our step has completed that executes the <code>db.version()</code> against mongodb:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57183883-317d3000-6eb3-11e9-9aa0-7dd729514033.png" alt="" /></p>

<p>Next our step executes to write the random data into mongodb:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57183911-989ae480-6eb3-11e9-942a-a9c1af191b7f.png" alt="" /></p>

<p>After the data has been written to mongodb, our next step will read the number of documents from mongodb, and also run a query for transaction prices more than 990:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57183917-bc5e2a80-6eb3-11e9-802d-87e268b2fc43.png" alt="" /></p>

<p>Once that has completed, we will have a shell command returning the time when the last step completed:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57183934-fa5b4e80-6eb3-11e9-9eb3-e58248e2286c.png" alt="" /></p>

<h2>Resources</h2>

<ul>
<li><a href="https://cloud.drone.io">Drone Hosted Service</a></li>
<li><a href="https://docs.drone.io/user-guide/pipeline/services/">Drone Services Documentation</a></li>
<li><a href="https://github.com/ruanbekker/demo-drone-mongodb-tests">Github Repository</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Queries Failing via Beeline Due to Anonymous User]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/28/queries-failing-via-beeline-due-to-anonymous-user/"/>
    <updated>2019-04-28T12:25:12-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/28/queries-failing-via-beeline-due-to-anonymous-user</id>
    <content type="html"><![CDATA[<p>Beeline Error: <code>FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.tez.TezTask (state=08S01,code=1)</code></p>

<h2>Issue:</h2>

<p>Some time ago, I assisted a customer who was trying to do a select count(*) via beeline and failed with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[hadoop@ip-10-10-9-226 ~]$ beeline -u jdbc:hive2://nn-emr.sysint.dxone.local:10000/default --silent=true --outputformat=csv2 -e "select count(*) from basetables_rms.rms_site"
</span><span class='line'>19/04/26 06:41:15 [main]: WARN jdbc.HiveConnection: Request to set autoCommit to false; Hive does not support autoCommit=false.
</span><span class='line'>Error: Error while processing statement: FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.tez.TezTask (state=08S01,code=1)</span></code></pre></td></tr></table></div></figure>


<p>When reproducing this I found a jira: <a href="https://issues.apache.org/jira/browse/HIVE-14631">https://issues.apache.org/jira/browse/HIVE-14631</a> which related to the same issue and the workaround was to switch your execution engine to mapreduce. By doing that, it worked, but wanted a better resolution for the customer.</p>

<h2>Debugging:</h2>

<p>When setting enabling debugging, I found that the error is related to permissions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ beeline  -u jdbc:hive2://172.31.31.247:10000/default --silent=false --outputformat=csv2 -e "select count(*) from testdb.users"
</span><span class='line'>Connecting to jdbc:hive2://172.31.31.247:10000/default
</span><span class='line'>Connected to: Apache Hive (version 2.1.1-amzn-0)
</span><span class='line'>Driver: Hive JDBC (version 2.1.1-amzn-0)
</span><span class='line'>19/04/26 10:24:01 [main]: WARN jdbc.HiveConnection: Request to set autoCommit to false; Hive does not support autoCommit=false.
</span><span class='line'>...
</span><span class='line'>ERROR : Failed to execute tez graph.
</span><span class='line'>org.apache.hadoop.security.AccessControlException: Permission denied: user=anonymous, access=WRITE, inode="/user/anonymous":hdfs:hadoop:drwxr-xr-x</span></code></pre></td></tr></table></div></figure>


<p>So it seems that when the client (anonymous) is trying to copy the hive execution jar to is home path in HDFS, in this case (/home/anonymous/.hiveJars/) it fails due to permissions.</p>

<h2>Resolution:</h2>

<p>By passing the hadoop user, I was able to get the expected results:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ beeline -n hadoop -u jdbc:hive2://172.31.31.247:10000/default --silent=false --outputformat=csv2 -e "select count(*) from testdb.users"
</span><span class='line'>INFO  : Completed executing command(queryId=hive_20190426103246_33253d86-3ebc-462f-a5a1-f01877dd00a8); Time taken: 17.08 seconds
</span><span class='line'>INFO  : OK
</span><span class='line'>c0
</span><span class='line'>1
</span><span class='line'>1 row selected (17.282 seconds)</span></code></pre></td></tr></table></div></figure>


<p>Listing the mentioned jar:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hdfs dfs -ls /user/hadoop/.hiveJars/
</span><span class='line'>Found 1 items
</span><span class='line'>-rw-r--r--   1 hadoop hadoop   32447131 2019-04-26 09:51 /user/hadoop/.hiveJars/hive-exec-2.1.1-amzn-0-ac46be4721493d9e62fd1b132ecee3d20fd283680edbc0cfa9809c656a493469.jar</span></code></pre></td></tr></table></div></figure>


<p>Hope this might help someone facing the same issue</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Drone CI to Build a Jekyll Site and Deploy to Docker Swarm]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/23/using-drone-ci-to-build-a-jekyll-site-and-deploy-to-docker-swarm/"/>
    <updated>2019-04-23T17:57:02-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/23/using-drone-ci-to-build-a-jekyll-site-and-deploy-to-docker-swarm</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/56618556-3de7ca00-6623-11e9-995f-c22792f0ab21.png" alt="image" /></p>

<p>CICD Pipelines! &lt;3</p>

<p>In this post I will show you how to setup a cicd pipeline using drone to build a jekyll site and deploy to docker swarm.</p>

<h2>Environment Overview</h2>

<p><strong>Jekyll&rsquo;s Codebase</strong>: Our code will be hosted on Github (I will demonstrate how to set it up from scratch)</p>

<p><strong>Secret Store</strong>: Our secrets such as ssh key, swarm host address etc will be stored in drones secrets manager</p>

<p><strong>Docker Swarm</strong>: Docker Swarm has Traefik as a HTTP Loadbalancer</p>

<p><strong>Drone Server and Agent</strong>: If you dont have drone, you can setup <a href="https://blog.ruanbekker.com/blog/2019/04/18/setup-a-drone-cicd-environment-on-docker-with-letsencrypt/">drone server and agent on docker</a> or have a look at <a href="https://cloud.drone.io">cloud.drone.io</a></p>

<p><strong>Workflow:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* Whenever a push to master is receive on github, the pipeline will be triggered
</span><span class='line'>* The content from our github repository will be cloned to the agent on a container
</span><span class='line'>* Jekyll will build and the output will be transferred to docker swarm using rsync
</span><span class='line'>* The docker-compose.yml will be transferred to the docker swarm host using scp
</span><span class='line'>* A docker stack deploy is ran via ssh</span></code></pre></td></tr></table></div></figure>


<h2>Install Jekyll Locally</h2>

<p>Install Jekyll locally, as we will use it to create the initial site. I am using a mac, so I will be using <code>brew</code>. For other operating systems, have a look at <a href="https://jekyllrb.com/docs/installation/">this post</a>.</p>

<p>I will be demonstrating with a weightloss blog as an example.</p>

<p>Install jekyll:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install jekyll</span></code></pre></td></tr></table></div></figure>


<p>Go ahead and create a new site which will host the data for your jekyll site:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ jekyll new blog-weightloss</span></code></pre></td></tr></table></div></figure>


<h2>Create a Github Repository</h2>

<p>First we need to create an empty github repository, in my example it was <code>github.com/ruanbekker/blog-weightloss.git</code>. Once you create the repo change into the directory created by the <code>jekyll new</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd blog-weightloss</span></code></pre></td></tr></table></div></figure>


<p>Now initialize git, set the remote, add the jekyll data and push to github:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git init
</span><span class='line'>$ git remote add origin git@github.com:ruanbekker/blog-weightloss.git # &lt;== change to your repository
</span><span class='line'>$ git add .
</span><span class='line'>$ git commit -m "first commit"
</span><span class='line'>$ git push origin master</span></code></pre></td></tr></table></div></figure>


<p>You should see your data on your github repository.</p>

<h2>Create Secrets on Drone</h2>

<p>Logon to the Drone UI, sync repositories, activate the new repository and head over to settings where you will find the secrets section.</p>

<p>Add the following secrets:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Secret Name: swarm_host
</span><span class='line'>Secret Value: ip address of your swarm
</span><span class='line'>
</span><span class='line'>Secret Name: swarm_key
</span><span class='line'>Secret Value: contents of your private ssh key
</span><span class='line'>
</span><span class='line'>Secret Name: swarm_user
</span><span class='line'>Secret Value: the user that is allowed to ssh</span></code></pre></td></tr></table></div></figure>


<p>You should see the following:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56619871-5c4fc480-6627-11e9-8820-c9d4ddff698c.png" alt="image" /></p>

<h2>Add the Drone Config</h2>

<p>Drone looks from a <code>.drone.yml</code> file in the root directory for instructions on how to do its tasks. Lets go ahead and declare our pipeline:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim .drone.yml</span></code></pre></td></tr></table></div></figure>


<p>And populate the drone config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pipeline:
</span><span class='line'>  jekyll-build:
</span><span class='line'>    image: jekyll/jekyll:latest
</span><span class='line'>    commands:
</span><span class='line'>      - touch Gemfile.lock
</span><span class='line'>      - chmod a+w Gemfile.lock
</span><span class='line'>      - chown -R jekyll:jekyll /drone
</span><span class='line'>      - gem update --system
</span><span class='line'>      - gem install bundler
</span><span class='line'>      - bundle install
</span><span class='line'>      - bundle exec jekyll build
</span><span class='line'>
</span><span class='line'>  transfer-build:
</span><span class='line'>    image: drillster/drone-rsync
</span><span class='line'>    hosts:
</span><span class='line'>      from_secret: swarm_host
</span><span class='line'>    key:
</span><span class='line'>      from_secret: swarm_key
</span><span class='line'>    user:
</span><span class='line'>      from_secret: swarm_user
</span><span class='line'>    source: ./*
</span><span class='line'>    target: ~/my-weightloss-blog.com
</span><span class='line'>    recursive: true
</span><span class='line'>    delete: true
</span><span class='line'>    when:
</span><span class='line'>      branch: [master]
</span><span class='line'>      event: [push]
</span><span class='line'>
</span><span class='line'>  transfer-compose:
</span><span class='line'>    image: appleboy/drone-scp
</span><span class='line'>    host:
</span><span class='line'>      from_secret: swarm_host
</span><span class='line'>    username:
</span><span class='line'>      from_secret: swarm_user
</span><span class='line'>    key:
</span><span class='line'>      from_secret: swarm_key
</span><span class='line'>    target: /root/my-weightloss-blog.com
</span><span class='line'>    source:
</span><span class='line'>      - docker-compose.yml
</span><span class='line'>    when:
</span><span class='line'>      branch: [master]
</span><span class='line'>      event: [push]
</span><span class='line'>
</span><span class='line'>  deploy-jekyll-to-swarm:
</span><span class='line'>    image: appleboy/drone-ssh
</span><span class='line'>    host:
</span><span class='line'>      from_secret: swarm_host
</span><span class='line'>    username:
</span><span class='line'>      from_secret: swarm_user
</span><span class='line'>    key:
</span><span class='line'>      from_secret: swarm_key
</span><span class='line'>    port: 22
</span><span class='line'>    script:
</span><span class='line'>      - docker stack deploy --prune -c /root/my-weightloss-blog.com/docker-compose.yml apps
</span><span class='line'>    when:
</span><span class='line'>      branch: [master]
</span><span class='line'>      event: [push]</span></code></pre></td></tr></table></div></figure>


<h2>Notifications?</h2>

<p>If you want to be notified about your builds, you can add a slack notification step as the last step.</p>

<p>To do that, create a new webhook integration, you can <a href="https://blog.ruanbekker.com/blog/2019/04/18/setup-a-slack-webhook-for-sending-messages-from-applications/">follow this post for a step by step guide</a>. After you have the webhook, go to secrets and create a <code>slack_webhook</code> secret.</p>

<p>Then apply the notification step as shown below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  notify-via-slack:
</span><span class='line'>    image: plugins/slack
</span><span class='line'>    webhook:
</span><span class='line'>      from_secret: slack_webhook
</span><span class='line'>    channel: system_events
</span><span class='line'>    template: &gt;
</span><span class='line'>      
</span><span class='line'>        [DRONE CI]: ** : /
</span><span class='line'>        ( -  | )
</span><span class='line'>
</span><span class='line'>      
</span><span class='line'>        [DRONE CI]: ** : /
</span><span class='line'>        ( -  | )
</span><span class='line'>      </span></code></pre></td></tr></table></div></figure>


<p>Based on the status, you should get a notification similar like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56622206-6e356580-662f-11e9-8d93-286c9c126d24.png" alt="image" /></p>

<h2>Add the Docker Compose</h2>

<p>Next we need to declare our docker compose file which is needed to deploy our jekyll service to the swarm:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim docker-compose.yml</span></code></pre></td></tr></table></div></figure>


<p>And populate this info (just change the values for your own environment/settings):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&#39;3.5&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">myweightlossblog</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ruanbekker/jekyll:contrast</span>
</span><span class='line'>    <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">jekyll serve --watch --force_polling --verbose</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">appnet</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/root/my-weightloss-blog.com:/srv/jekyll</span>
</span><span class='line'>    <span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">mode</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">replicated</span>
</span><span class='line'>      <span class="l-Scalar-Plain">replicas</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>      <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&quot;traefik.backend.loadbalancer.sticky=false&quot;</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&quot;traefik.backend.loadbalancer.swarm=true&quot;</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&quot;traefik.backend=myweightlossblog&quot;</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&quot;traefik.docker.network=appnet&quot;</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&quot;traefik.entrypoints=https&quot;</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&quot;traefik.frontend.passHostHeader=true&quot;</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&quot;traefik.frontend.rule=Host:www.my-weightloss-blog.com,my-weightloss-blog.com&quot;</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&quot;traefik.port=4000&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">update_config</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">parallelism</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2</span>
</span><span class='line'>        <span class="l-Scalar-Plain">delay</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10s</span>
</span><span class='line'>      <span class="l-Scalar-Plain">restart_policy</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">condition</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">on-failure</span>
</span><span class='line'>      <span class="l-Scalar-Plain">placement</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">constraints</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">node.role == manager</span>
</span><span class='line'><span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">appnet</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">external</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Push to Github</h2>

<p>Now we need to push our <code>.drone.yml</code> and <code>docker-compose.yml</code> to github. Since the repository is activated on drone, any push to master will trigger the pipeline, so after this push we should go to drone to look at our pipeline running.</p>

<p>Add the untracked files and push to github:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ git add .drone.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">$ git add docker-compose.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">$ git commit -m &quot;add drone and docker config&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">$ git push origin master</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you head over to your drone ui, you should see your pipeline output which will look more or less like this (just look how pretty it is! :D )</p>

<p><img src="https://user-images.githubusercontent.com/567298/56620236-91a8e200-6628-11e9-9278-38e3305fdcd7.png" alt="image" /></p>

<h2>Test Jekyll</h2>

<p>If your deployment has completed you should be able to access your application on the configured domain. A screenshot of my response when accessing Jekyll:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56620280-af764700-6628-11e9-9d4f-c2592e6cf561.png" alt="image" /></p>

<p>Absolutely Amazingness! I really love drone!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Blog With Hugo]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/23/setup-a-blog-with-hugo/"/>
    <updated>2019-04-23T05:41:10-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/23/setup-a-blog-with-hugo</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/30043398/56571367-13632600-65bd-11e9-816e-a18785233e38.png" alt="image" /></p>

<p>In this post we will setup a blog on <a href="https://gohugo.io">hugo</a> and using the theme <a href="https://github.com/mismith0227/hugo_theme_pickles">pickles</a>.</p>

<h2>What is Hugo</h2>

<p>Hugo is a Open-Source Static Site Generator which runs on Golang.</p>

<h2>Installing Hugo</h2>

<p>Im using a mac so I will be installing hugo with brew, for other operating systems, you can have a look at <a href="https://gohugo.io/getting-started/installing/">their documentation</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install hugo</span></code></pre></td></tr></table></div></figure>


<p>Create your new site:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hugo new site myblog</span></code></pre></td></tr></table></div></figure>


<h2>Install a Theme</h2>

<p>We will use a 3rd party theme, go ahead and install the pickles theme:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone -b release https://github.com/mismith0227/hugo_theme_pickles themes/pickles</span></code></pre></td></tr></table></div></figure>


<h2>Custom Syntax Highlighting</h2>

<p>Generate syntax highlight css, for a list of other styles <a href="https://help.farbox.com/pygments.html">see this post</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p static/css
</span><span class='line'>$ hugo gen chromastyles --style=colorful &gt; static/css/syntax.css</span></code></pre></td></tr></table></div></figure>


<p>Append this below <code>style.css</code> in <code>themes/pickles/layouts/partials/head.html</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;link rel="stylesheet" href="http://blog.ruanbekker.com/css/syntax.css"/&gt;</span></code></pre></td></tr></table></div></figure>


<p>set pygments settings in <code>config.toml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>baseURL = "http://example.org/"
</span><span class='line'>languageCode = "en-us"
</span><span class='line'>pygmentsCodeFences = true
</span><span class='line'>pygmentsUseClasses = true
</span><span class='line'>title = "My Hugo Site"</span></code></pre></td></tr></table></div></figure>


<h2>Create your First Blogpost</h2>

<p>Create your first post:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hugo new posts/my-first-post.md
</span><span class='line'>/Users/ruan/myblog/content/posts/my-first-post.md created</span></code></pre></td></tr></table></div></figure>


<p>Populate your page with some data:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>title: "My First Post"
</span><span class='line'>date: 2019-04-23T09:39:23+02:00
</span><span class='line'>description: This is an introduction post to showcase Hugo.
</span><span class='line'>slug: hello-world-my-first-post
</span><span class='line'>categories:
</span><span class='line'>- hugo
</span><span class='line'>- blog
</span><span class='line'>tags:
</span><span class='line'>- helloworld
</span><span class='line'>- hugo
</span><span class='line'>- blog
</span><span class='line'>draft: false
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'>![](https://hugo-simple-blog.work/images/uploads/gopher_hugo.png)
</span><span class='line'>
</span><span class='line'>Hello world and welcome to my first post
</span><span class='line'>
</span><span class='line'>## New Beginning
</span><span class='line'>
</span><span class='line'>This is a new beginning on my blog on hugo and this seems pretty cool so im adding random text here because I dont know **what** to add here. So im adding a lot more random text here.
</span><span class='line'>
</span><span class='line'>This is another test.
</span><span class='line'>
</span><span class='line'>## Code
</span><span class='line'>
</span><span class='line'>This is python code:
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>from random import randint
</span><span class='line'>from faker import Fake
</span><span class='line'>randint(1, 2)
</span><span class='line'>
</span><span class='line'>destFile = "largedataset-" + timestart + ".txt"
</span><span class='line'>file_object = open(destFile,"a")
</span><span class='line'>file_object.write("uuid" + "," + "username" + "," + "name" + "," + "country" + "\n")
</span><span class='line'>
</span><span class='line'>def create_names(fake):
</span><span class='line'>    for x in range(numberRuns):
</span><span class='line'>        genUname = fake.slug()
</span><span class='line'>        genName =  fake.first_name()
</span><span class='line'>        genCountry = fake.country()
</span><span class='line'>file_object.write(genUname + "," + genName + "," + genCountry + "\n")
</span><span class='line'>..
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>This is bash code:
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#!/usr/bin/env bash
</span><span class='line'>var="ruan"
</span><span class='line'>echo "Hello, ${var}"
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>## Tweets
</span><span class='line'>
</span><span class='line'>This is one of my tweets, see [configuration](https://gohugo.io/content-management/shortcodes/#highlight) for more shortcodes:
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>## Tables
</span><span class='line'>
</span><span class='line'>This is a table:
</span><span class='line'>
</span><span class='line'>|**id**    |**name**|**surname**|**age**| **city**     |
</span><span class='line'>|----------|--------|-----------|-------|--------------|
</span><span class='line'>|20-1232091|ruan    |bekker     |32     |cape town     |
</span><span class='line'>|20-2531020|stefan  |bester     |32     |kroonstad     |
</span><span class='line'>|20-4835056|michael |le roux    |35     |port elizabeth|
</span><span class='line'>
</span><span class='line'>## Lists
</span><span class='line'>
</span><span class='line'>This is a list:
</span><span class='line'>
</span><span class='line'>* one
</span><span class='line'>* two
</span><span class='line'>* [three](https://example.com)
</span><span class='line'>
</span><span class='line'>This is another list:
</span><span class='line'>
</span><span class='line'>1. one
</span><span class='line'>2. two
</span><span class='line'>3. [three](https://example.com)
</span><span class='line'>
</span><span class='line'>## Images
</span><span class='line'>
</span><span class='line'>This is an embedded photo:
</span><span class='line'>
</span><span class='line'>![](https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500)</span></code></pre></td></tr></table></div></figure>


<h2>Run the Server</h2>

<p>You can set the flags in your main config as well. Go ahead and run the server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hugo server \
</span><span class='line'>  --baseURL "http://localhost/" \
</span><span class='line'>  --themesDir=themes --theme=pickles \
</span><span class='line'>  --bind=0.0.0.0 --port=8080 --appendPort=true \
</span><span class='line'>  --buildDrafts --watch --environment production</span></code></pre></td></tr></table></div></figure>


<h2>Screenshots</h2>

<p>When you access your blog on port 8080 you should see your post. Some screenshots below:</p>

<p><img width="1227" alt="image" src="https://user-images.githubusercontent.com/30043398/56570645-9e432100-65bb-11e9-9ea4-dd89be65bed4.png"></p>

<p><img width="1143" alt="image" src="https://user-images.githubusercontent.com/30043398/56570670-aac77980-65bb-11e9-830d-4424e6d92beb.png"></p>

<p><img width="1110" alt="image" src="https://user-images.githubusercontent.com/30043398/56570707-b74bd200-65bb-11e9-8df2-8aa1372e2922.png"></p>

<p><img width="1196" alt="image" src="https://user-images.githubusercontent.com/30043398/56570734-c16dd080-65bb-11e9-92fc-55c7ace373e8.png"></p>

<h2>References:</h2>

<ul>
<li><a href="https://gohugo.io/getting-started/installing/">https://gohugo.io/getting-started/installing/</a></li>
<li><a href="https://gohugo.io/content-management/syntax-highlighting/">https://gohugo.io/content-management/syntax-highlighting/</a></li>
<li><a href="https://willschenk.com/articles/2018/building-a-hugo-site/">https://willschenk.com/articles/2018/building-a-hugo-site/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Drone CICD Environment on Docker With Letsencrypt]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/18/setup-a-drone-cicd-environment-on-docker-with-letsencrypt/"/>
    <updated>2019-04-18T12:53:49-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/18/setup-a-drone-cicd-environment-on-docker-with-letsencrypt</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/56378979-ed313500-620e-11e9-9ac0-4fcd1df803e8.png" alt="drone-ci" /></p>

<h2>What is Drone?</h2>

<p>Drone is a self-service continuous delivery platform which can be used for CICD pipelines, devopsy stuff which is really awesome.</p>

<p>With Configuration as Code, Pipelines are configured with a simple, easy‑to‑read file that you commit to your git repository such as github, gitlab, gogs, gitea etc.</p>

<p>Each Pipeline step is executed inside an isolated Docker container that is automatically downloaded at runtime, if not found in cache.</p>

<h2>Show me pipelines!</h2>

<p>A pipeline can look as easy as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pipeline</span>
</span><span class='line'><span class="l-Scalar-Plain">steps</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">test</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">node</span>
</span><span class='line'>  <span class="l-Scalar-Plain">commands</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">npm install</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">npm test</span>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">database</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mysql</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">3306</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Open for Testing!</h2>

<p>I have enabled public access, so please go ahead and launch your cicd pipelines on my drone setup as I want to test the stability of it:</p>

<p>==> <a href="https://drone.rbkr.xyz/">https://drone.rbkr.xyz/</a></p>

<h2>What are we doing?</h2>

<p>We will deploy a drone server which is responsible for the actual server and 2 drone agents which will receive instructions from the server whenever steps need to be executed. Steps run on agents.</p>

<h2>Deploy the Servers</h2>

<p>I&rsquo;m using VULTR to deploy 3 nodes on coreos, 1 drone server and 2 drone agents as seen below:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56371668-d0403600-61fd-11e9-8396-01c07c136518.png" alt="image" /></p>

<p>Documentation:
<a href="https://docs.drone.io/installation/github/multi-machine/">https://docs.drone.io/installation/github/multi-machine/</a>
<a href="https://github.com/settings/developers">https://github.com/settings/developers</a></p>

<p>We will use Github for version control and to delegate auth, therefore we need to register a new application on Github.</p>

<p>Register New Application on Github at <a href="https://github.com/settings/developer">https://github.com/settings/developer</a> :</p>

<p><img src="https://user-images.githubusercontent.com/567298/56375985-22398980-6207-11e9-911d-9595f8f85db9.png" alt="register-application" /></p>

<p>Get your Drone-Server Host Endpoint, and update the fields:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56374721-287a3680-6204-11e9-837f-a7751651c29a.png" alt="image" /></p>

<p>You will receive a Github Client ID, Secret which we will need later, which will look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">Client ID</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">xx</span>
</span><span class='line'><span class="l-Scalar-Plain">Client Secret</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">yyy</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generate the shared secret which will be used on the server and agent:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ openssl rand -hex 16</span>
</span><span class='line'><span class="l-Scalar-Plain">eb83xxe19a3497f597f53044250df6yy</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the Startup Script for Drone Server, which will just be a docker container running in detached mode. Note that you should use your own domain at <code>SERVER_HOST</code> and if you want to issue an certificate automatically keep <code>DRONE_TLS_AUTOCERT</code> to true.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ cat &gt; start_drone-server.sh &lt;&lt; EOF</span>
</span><span class='line'><span class="l-Scalar-Plain">#!/usr/bin/env bash</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">set -ex</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">GITHUB_CLIENT_ID=xx</span>
</span><span class='line'><span class="l-Scalar-Plain">GITHUB_CLIENT_SECRET=yyy</span>
</span><span class='line'><span class="l-Scalar-Plain">SHARED_SECRET=eb83xxe19a3497f597f53044250df6yy</span>
</span><span class='line'><span class="l-Scalar-Plain">SERVER_HOST=drone.yourdomain.com</span>
</span><span class='line'><span class="l-Scalar-Plain">SERVER_PROTOCOL=https</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">docker run \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--volume=/var/run/docker.sock:/var/run/docker.sock \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--volume=/var/lib/drone:/data \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_GITHUB_SERVER=https://github.com \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID} \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET} \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_AGENTS_ENABLED=true \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_RPC_SECRET=${SHARED_SECRET} \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_SERVER_HOST=${SERVER_HOST} \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_SERVER_PROTO=${SERVER_PROTOCOL} \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_TLS_AUTOCERT=true \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_USER_CREATE=username:&lt;your-github-username&gt;,admin:true \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--publish=80:80 \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--publish=443:443 \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--restart=always \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--detach=true \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--name=drone \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">drone/drone:1</span>
</span><span class='line'><span class="l-Scalar-Plain">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the startup script for the drone agent, note that this script needs to be placed on the agent nodes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ cat &gt; start_drone-agent.sh &lt;&lt; EOF</span>
</span><span class='line'><span class="l-Scalar-Plain">#!/usr/bin/env bash</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">set -ex</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">SHARED_SECRET=eb83xxe19a3497f597f53044250df6yy</span>
</span><span class='line'><span class="l-Scalar-Plain">AGENT_SERVER_HOST=https://drone.yourdomain.com</span>
</span><span class='line'><span class="l-Scalar-Plain">SERVER_PROTOCOL=https</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">docker run \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--volume=/var/run/docker.sock:/var/run/docker.sock \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_RPC_SERVER=${AGENT_SERVER_HOST} \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_RPC_SECRET=${SHARED_SECRET} \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_RUNNER_CAPACITY=2 \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_RUNNER_NAME=${HOSTNAME} \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--restart=always \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--detach=true \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--name=drone-agent-02 \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">drone/agent:1</span>
</span><span class='line'><span class="l-Scalar-Plain">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>Logon to the server node and start the drone server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ bash start_drone-agent.sh</span>
</span></code></pre></td></tr></table></div></figure>


<p>Login to the agent nodes and start the agents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ bash start_drone-agent.sh</span>
</span></code></pre></td></tr></table></div></figure>


<p>The server should show that it&rsquo;s listening on port 80 and 443:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker ps</span>
</span><span class='line'><span class="l-Scalar-Plain">CONTAINER ID        IMAGE               COMMAND               CREATED             STATUS              PORTS                                      NAMES</span>
</span><span class='line'><span class="l-Scalar-Plain">8ea70fc7b967        drone/drone:1       &quot;/bin/drone-server&quot;   12 minutes ago      Up 12 minutes       0.0.0.0:80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp   drone</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Access Drone</h2>

<p>Access your Drone instance on port 80 eg. <a href="http://drone.yourdomain.com">http://drone.yourdomain.com</a> you should be automatically redirected to port 443, which should direct you to a login page, which will look like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56375632-5eb8b580-6206-11e9-9ae8-92b2cd29abec.png" alt="drone-authorize" /></p>

<p>Login with your github account and allow drone some time to sync your repositories:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56373131-9e7c9e80-6200-11e9-83ce-e486b399468e.png" alt="image" /></p>

<h2>Add drone config to your repository:</h2>

<p>Clone this repository: <a href="https://github.com/ruanbekker/drone-ci-testing">https://github.com/ruanbekker/drone-ci-testing</a> which will contain the <code>.drone.yml</code> config which drone gets its instructions from.</p>

<p>Select a repository to activate, (drone-ci-testing in this case) head over to settings:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56373298-f1565600-6200-11e9-8262-ac3162fed4f2.png" alt="image" /></p>

<p>Adding secret:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56373209-c5d36b80-6200-11e9-90de-68c131480672.png" alt="image" /></p>

<p>Add more secrets:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56373443-3da19600-6201-11e9-85a9-083bfcbd604a.png" alt="image" /></p>

<p>Your build list should be empty:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56373533-6fb2f800-6201-11e9-8fa0-ab05e546c36e.png" alt="image" /></p>

<h2>Trigger a Build</h2>

<p>Edit any of the files in the clone repository and you should see your build running:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56374465-85c1b800-6203-11e9-8542-acd1d5729447.png" alt="image" /></p>

<p>When your build has completed:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56374511-a25df000-6203-11e9-9eb8-d94a777a8b4a.png" alt="image" /></p>

<p>You can also find out where the step ran:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56374667-084a7780-6204-11e9-9c5b-6672f6882411.png" alt="image" /></p>

<p>Run a couple of tests:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56376356-e3f09a00-6207-11e9-8ca0-16e06e7c0379.png" alt="image" /></p>

<p>Get notified via slack:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56376376-eeab2f00-6207-11e9-9af9-194cb5a3023b.png" alt="image" /></p>

<h2>Debugging</h2>

<p>If your build fails, its most likely that you need the <code>slack_webhook</code> secret. You can remove the slack step which shouldhelp you get going with drone.</p>

<h2>More on Drone</h2>

<p>Have a look at <a href="https://github.com/ruanbekker/drone-ci-testing/blob/master/README.md">this document</a> for more examples or have a look at their <a href="https://docs.drone.io/">documentation</a> as well as their extensive list of <a href="http://plugins.drone.io/">plugins</a> and their <a href="https://docs.drone.io/installation/github/multi-machine/">setup documentation</a> to become familiar with their configuration.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Slack Webhook for Sending Messages From Applications]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/18/setup-a-slack-webhook-for-sending-messages-from-applications/"/>
    <updated>2019-04-18T06:07:42-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/18/setup-a-slack-webhook-for-sending-messages-from-applications</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/56354543-55165a00-61d4-11e9-9101-f979dcb4cdb3.png" alt="slack" /></p>

<p>Slack is amazing and I cant live without it.</p>

<p>We can also use custom webhook integrations to allow applications to notify us via slack in response of events.</p>

<h2>What we will be doing</h2>

<p>We will be configuring a custom slack webhook integration and test out the api to show you how easy it is to use it to inform us via slack, whenever something is happening.</p>

<h2>Configuration</h2>

<p>Head over to:
- <a href="https://">https://</a>{your-team}.slack.com/apps/manage/custom-integrations</p>

<p>Select Incoming Webhooks:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56352324-49746480-61cf-11e9-8dd2-e4482fc16f9e.png" alt="" /></p>

<p>Select Add Configuration:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56352369-6ad55080-61cf-11e9-9d98-4193a7aeb321.png" alt="" /></p>

<p>Select the channel it should post to:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56352447-90625a00-61cf-11e9-8f94-098b2c088159.png" alt="" /></p>

<p>Select Add Incoming Webhook Integration.</p>

<p>Save the webhook url that will look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://hooks.slack.com/services/ABCDEFGHI/ZXCVBNMAS/AbCdEfGhJiKlOpRQwErTyUiO</span></code></pre></td></tr></table></div></figure>


<p>You can then further configure the integration.</p>

<h2>Sending Messages</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -XPOST -d 'payload={"channel": "#system_events", "username": "My-WebhookBot", "text": "This is posted to #general and comes from a bot named &lt;https://alert-system.com/alerts/1234|webhookbot&gt; for details!", "icon_emoji": ":borat:"}' https://hooks.slack.com/services/xx/xx/xx</span></code></pre></td></tr></table></div></figure>


<p>Will result in:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56353019-be946980-61d0-11e9-874c-56074b8d2da7.png" alt="image" /></p>

<p>Message Attachment, Error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -XPOST -d 'payload={"channel": "#system_events", "username": "My-WebhookBot", "text": "*Incoming Alert!*", "icon_emoji": ":borat:", "attachments":[{"fallback":"New open task [Urgent]: &lt;http://url_to_task|Test out Slack message attachments&gt;","pretext":"New open task [Urgent]: &lt;http://url_to_task|Test out Slack message attachments&gt;","color":"#D00000","fields":[{"title":"Notes","value":"This is much easier than I thought it would be.","short":false}]}]}}' https://hooks.slack.com/services/xx/xx/xx</span></code></pre></td></tr></table></div></figure>


<p>Results in:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56353534-df10f380-61d1-11e9-92f5-f14a75c19049.png" alt="image" /></p>

<p>Message Attachment, OK:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -XPOST -d 'payload={"channel": "#system_events", "username": "My-WebhookBot", "text": "*Status Update:*", "icon_emoji": ":borat:", "attachments":[{"fallback":"New open task has been closed [OK]: &lt;http://url_to_task|Test out Slack message attachments&gt;","pretext":"Task has been closed [OK]: &lt;http://url_to_task|Test out Slack message attachments&gt;","color":"#28B463","fields":[{"title":"Notes","value":"The error has been resolved and the status is OK","short":false}]}]}}' https://hooks.slack.com/services/xx/xx/xx</span></code></pre></td></tr></table></div></figure>


<p>Results in:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56353591-f819a480-61d1-11e9-8810-3586f56dd0f3.png" alt="image" /></p>

<h2>Join my Slack</h2>

<p>If you want to join my slack workspace, use <a href="https://join.slack.com/t/linux-hackers/shared_invite/enQtNjE0NDMzODI1OTI2LTFhYTRkNTQxYzAyMjQwNTNhMmE5ZmZkYjU2MDg2NGFlOTYyNmM2MjdkMzg1NTMwOTM0MGY1MjVmMTdhYjkxZTk">this invite link</a></p>

<h2>Resources:</h2>

<ul>
<li><a href="https://htmlcolorcodes.com/">https://htmlcolorcodes.com/</a></li>
<li><a href="https://api.slack.com/docs/message-attachments">https://api.slack.com/docs/message-attachments</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB Examples With Golang]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/17/mongodb-examples-with-golang/"/>
    <updated>2019-04-17T08:51:35-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/17/mongodb-examples-with-golang</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55478904-236e9200-561d-11e9-9382-f31b25a9ae03.png" alt="" /></p>

<p>While looking into working with mongodb using golang, I found it quite frustrating getting it up and running and decided to make a quick post about it.</p>

<h2>What are we doing?</h2>

<p>Examples using the golang driver for mongodb to connect, read, update and delete documents from mongodb.</p>

<h2>Environment:</h2>

<p>Provision a mongodb server in docker:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker network create container-net
</span><span class='line'>$ docker run -itd --name mongodb --network container-net -p 27017:27017 ruanbekker/mongodb</span></code></pre></td></tr></table></div></figure>


<p>Drop into a golang environment using docker:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run -it golang:alpine sh</span></code></pre></td></tr></table></div></figure>


<p>Get the dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apk add --no-cache git</span></code></pre></td></tr></table></div></figure>


<p>Change to your project path:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir $GOPATH/src/myapp
</span><span class='line'>$ cd $GOPATH/src/myapp</span></code></pre></td></tr></table></div></figure>


<p>Download the golang mongodb driver:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go get go.mongodb.org/mongo-driver</span></code></pre></td></tr></table></div></figure>


<h2>Connecting to MongoDB in Golang</h2>

<p>First example will be to connect to your mongodb instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;context&quot;</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>    <span class="s">&quot;log&quot;</span>
</span><span class='line'>    <span class="s">&quot;go.mongodb.org/mongo-driver/mongo&quot;</span>
</span><span class='line'>    <span class="s">&quot;go.mongodb.org/mongo-driver/bson&quot;</span>
</span><span class='line'>    <span class="s">&quot;go.mongodb.org/mongo-driver/mongo/options&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Name</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nx">Age</span>  <span class="kt">int</span>
</span><span class='line'>    <span class="nx">City</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">clientOptions</span> <span class="o">:=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Client</span><span class="p">().</span><span class="nx">ApplyURI</span><span class="p">(</span><span class="s">&quot;mongodb://mongodb:27017&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mongo</span><span class="p">.</span><span class="nx">Connect</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">TODO</span><span class="p">(),</span> <span class="nx">clientOptions</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">err</span> <span class="p">=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Ping</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">TODO</span><span class="p">(),</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Connected to MongoDB!&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running our app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go run main.go
</span><span class='line'>Connected to MongoDB!
</span></code></pre></td></tr></table></div></figure>


<h2>Writing to MongoDB with Golang</h2>

<p>Let&rsquo;s insert a single document to MongoDB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">..</span>
</span><span class='line'>    <span class="nx">collection</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Database</span><span class="p">(</span><span class="s">&quot;mydb&quot;</span><span class="p">).</span><span class="nx">Collection</span><span class="p">(</span><span class="s">&quot;persons&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">ruan</span> <span class="o">:=</span> <span class="nx">Person</span><span class="p">{</span><span class="s">&quot;Ruan&quot;</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="s">&quot;Cape Town&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">insertResult</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">collection</span><span class="p">.</span><span class="nx">InsertOne</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">TODO</span><span class="p">(),</span> <span class="nx">ruan</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Inserted a Single Document: &quot;</span><span class="p">,</span> <span class="nx">insertResult</span><span class="p">.</span><span class="nx">InsertedID</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running it will produce:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go run main.go
</span><span class='line'>Connected to MongoDB!
</span><span class='line'>Inserted a single document:  ObjectID<span class="o">(</span><span class="s2">&quot;5cb717dcf597b4411252341f&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Writing more than one document:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>func main<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    ..
</span><span class='line'>    collection :<span class="o">=</span> client.Database<span class="o">(</span><span class="s2">&quot;mydb&quot;</span><span class="o">)</span>.Collection<span class="o">(</span><span class="s2">&quot;persons&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    ruan :<span class="o">=</span> Person<span class="o">{</span><span class="s2">&quot;Ruan&quot;</span>, 34, <span class="s2">&quot;Cape Town&quot;</span><span class="o">}</span>
</span><span class='line'>    james :<span class="o">=</span> Person<span class="o">{</span><span class="s2">&quot;James&quot;</span>, 32, <span class="s2">&quot;Nairobi&quot;</span><span class="o">}</span>
</span><span class='line'>    frankie :<span class="o">=</span> Person<span class="o">{</span><span class="s2">&quot;Frankie&quot;</span>, 31, <span class="s2">&quot;Nairobi&quot;</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    trainers :<span class="o">=</span> <span class="o">[]</span>interface<span class="o">{}{</span>james, frankie<span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    insertManyResult, err :<span class="o">=</span> collection.InsertMany<span class="o">(</span>context.TODO<span class="o">()</span>, trainers<span class="o">)</span>
</span><span class='line'>    <span class="k">if</span> err !<span class="o">=</span> nil <span class="o">{</span>
</span><span class='line'>      log.Fatal<span class="o">(</span>err<span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>    fmt.Println<span class="o">(</span><span class="s2">&quot;Inserted multiple documents: &quot;</span>, insertManyResult.InsertedIDs<span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will output in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go run main.go
</span><span class='line'>Inserted Multiple Documents:  <span class="o">[</span>ObjectID<span class="o">(</span><span class="s2">&quot;5cb717dcf597b44112523420&quot;</span><span class="o">)</span> ObjectID<span class="o">(</span><span class="s2">&quot;5cb717dcf597b44112523421&quot;</span><span class="o">)]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Updating Documents in MongoDB using Golang</h2>

<p>Updating Frankie&rsquo;s age:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>func main<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    ..
</span><span class='line'>    filter :<span class="o">=</span> bson.D<span class="o"></span>
</span><span class='line'>    update :<span class="o">=</span> bson.D<span class="o">{</span>
</span><span class='line'>        <span class="o">{</span><span class="s2">&quot;$inc&quot;</span>, bson.D<span class="o">{</span>
</span><span class='line'>            <span class="o">{</span><span class="s2">&quot;age&quot;</span>, 1<span class="o">}</span>,
</span><span class='line'>        <span class="o">}}</span>,
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    updateResult, err :<span class="o">=</span> collection.UpdateOne<span class="o">(</span>context.TODO<span class="o">()</span>, filter, update<span class="o">)</span>
</span><span class='line'>    <span class="k">if</span> err !<span class="o">=</span> nil <span class="o">{</span>
</span><span class='line'>      log.Fatal<span class="o">(</span>err<span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>    fmt.Printf<span class="o">(</span><span class="s2">&quot;Matched %v documents and updated %v documents.\n&quot;</span>, updateResult.MatchedCount, updateResult.ModifiedCount<span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running that will update Frankie&rsquo;s age:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go run main.go
</span><span class='line'>Matched <span class="m">1</span> documents and updated <span class="m">1</span> documents.
</span></code></pre></td></tr></table></div></figure>


<h2>Reading Data from MongoDB</h2>

<p>Reading the data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">funct</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">..</span>
</span><span class='line'>    <span class="nx">filter</span> <span class="o">:=</span> <span class="nx">bson</span><span class="p">.</span><span class="nx">D</span><span class="p"></span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">result</span> <span class="nx">Trainer</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">err</span> <span class="p">=</span> <span class="nx">collection</span><span class="p">.</span><span class="nx">FindOne</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">TODO</span><span class="p">(),</span> <span class="nx">filter</span><span class="p">).</span><span class="nx">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">result</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Found a single document: %+v\n&quot;</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">findOptions</span> <span class="o">:=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Find</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">findOptions</span><span class="p">.</span><span class="nx">SetLimit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go run main.go
</span><span class='line'>Found a single document: <span class="o">{</span>Name:Frankie Age:32 City:Nairobi<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finding multiple documents and returning the cursor</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">..</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">results</span> <span class="p">[]</span><span class="o">*</span><span class="nx">Trainer</span>
</span><span class='line'>  <span class="nx">cur</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">collection</span><span class="p">.</span><span class="nx">Find</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">TODO</span><span class="p">(),</span> <span class="nx">bson</span><span class="p">.</span><span class="nx">D</span><span class="p">,</span> <span class="nx">findOptions</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">cur</span><span class="p">.</span><span class="nx">Next</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">TODO</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">elem</span> <span class="nx">Trainer</span>
</span><span class='line'>      <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cur</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">elem</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">results</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">results</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">elem</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cur</span><span class="p">.</span><span class="nx">Err</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">cur</span><span class="p">.</span><span class="nx">Close</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">TODO</span><span class="p">())</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Found multiple documents (array of pointers): %+v\n&quot;</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running the example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="err">$</span> <span class="k">go</span> <span class="nx">run</span> <span class="nx">main</span><span class="p">.</span><span class="k">go</span>
</span><span class='line'><span class="nx">Found</span> <span class="nx">multiple</span> <span class="nx">documents</span> <span class="p">(</span><span class="nx">array</span> <span class="nx">of</span> <span class="nx">pointers</span><span class="p">):</span> <span class="p">[</span><span class="mh">0xc0001215c0</span> <span class="mh">0xc0001215f0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Deleting Data from MongoDB:</h2>

<p>Deleting our data and closing the connection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="p">..</span>
</span><span class='line'>    <span class="nx">deleteResult</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">collection</span><span class="p">.</span><span class="nx">DeleteMany</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">TODO</span><span class="p">(),</span> <span class="nx">bson</span><span class="p">.</span><span class="nx">D</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Deleted %v documents in the trainers collection\n&quot;</span><span class="p">,</span> <span class="nx">deleteResult</span><span class="p">.</span><span class="nx">DeletedCount</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">err</span> <span class="p">=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Disconnect</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">TODO</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Connection to MongoDB closed.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running the example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go run main.go
</span><span class='line'>Deleted <span class="m">3</span> documents in the trainers collection
</span><span class='line'>Connection to MongoDB closed.
</span></code></pre></td></tr></table></div></figure>


<p>The code for this example can be found at <a href="https://github.com/ruanbekker/code-examples/blob/master/mongodb/golang/examples.go">github.com/ruanbekker/code-examples/mongodb/golang/examples.go</a></p>

<h2>Resources:</h2>

<ul>
<li><a href="https://www.mongodb.com/blog/post/mongodb-go-driver-tutorial">https://www.mongodb.com/blog/post/mongodb-go-driver-tutorial</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL Inner Joins Examples With SQLite]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/06/sql-inner-joins-examples-with-sqlite/"/>
    <updated>2019-04-06T15:47:38-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/06/sql-inner-joins-examples-with-sqlite</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55704774-53cb7d00-59dd-11e9-9f43-65ec3aa857b5.png" alt="sqlite" /></p>

<h2>Overview</h2>

<p>In this tutorial we will get started with sqlite and use inner joins to query data from multiple tables to answer specific use case needs.</p>

<h2>Connecting to your Sqlite Database</h2>

<p>Connecting to your database uses the argument to the target database. You can use additional flags to set the properties that you want to enable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="err">$</span> <span class="n">sqlite3</span> <span class="o">-</span><span class="n">header</span> <span class="o">-</span><span class="k">column</span> <span class="n">mydatabase</span><span class="p">.</span><span class="n">db</span>
</span></code></pre></td></tr></table></div></figure>


<p>or you can specify the additional options to your config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat &gt; ~/.sqliterc <span class="s">&lt;&lt; EOF</span>
</span><span class='line'><span class="s">.mode column</span>
</span><span class='line'><span class="s">.headers on</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then connecting to your database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sqlite3 mydatabase.db
</span><span class='line'>-- Loading resources from /Users/ruan/.sqliterc
</span><span class='line'>SQLite version 3.16.0 2016-11-04 19:09:39
</span><span class='line'>Enter <span class="s2">&quot;.help&quot;</span> <span class="k">for</span> usage hints.
</span><span class='line'>sqlite&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>Create the Tables</h2>

<p>Create the <code>users</code> table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">create</span> <span class="k">table</span> <span class="n">users</span> <span class="p">(</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="n">id</span> <span class="nb">INT</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">surname</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">city</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="n">age</span> <span class="nb">INT</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">credit_card_num</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">job_position</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the <code>transactions</code> table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">create</span> <span class="k">table</span> <span class="n">transactions</span> <span class="p">(</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="n">credit_card_num</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">transaction_id</span> <span class="nb">INT</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">shop_name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="n">product_name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">spent_total</span> <span class="nb">DECIMAL</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">purchase_option</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can view the tables using <code>.tables</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="p">.</span><span class="n">tables</span>
</span><span class='line'><span class="n">transactions</span>  <span class="n">users</span>
</span></code></pre></td></tr></table></div></figure>


<p>And view the schema of the tables using <code>.schema &lt;table-name&gt;</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="p">.</span><span class="k">schema</span> <span class="n">users</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">users</span> <span class="p">(</span>
</span><span class='line'><span class="n">id</span> <span class="nb">INT</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">surname</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">city</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span>
</span><span class='line'><span class="n">age</span> <span class="nb">INT</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">credit_card_num</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">job_position</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Write to Sqlite Database</h2>

<p>Now we will populate data to our tables. Insert a record to our users table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">users</span> <span class="k">values</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;ruan&#39;</span><span class="p">,</span> <span class="s1">&#39;bekker&#39;</span><span class="p">,</span> <span class="s1">&#39;cape town&#39;</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="s1">&#39;2345-8970-6712-4352&#39;</span><span class="p">,</span> <span class="s1">&#39;devops&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Insert a record to our transactions table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">transactions</span> <span class="k">values</span><span class="p">(</span><span class="s1">&#39;2345-8970-6712-4352&#39;</span><span class="p">,</span> <span class="mi">981623</span><span class="p">,</span> <span class="s1">&#39;spaza01&#39;</span><span class="p">,</span> <span class="s1">&#39;burger&#39;</span><span class="p">,</span> <span class="mi">101</span><span class="p">.</span><span class="mi">02</span><span class="p">,</span> <span class="s1">&#39;credit_card&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Read from the Sqlite Database</h2>

<p>Read the data from the users table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span><span class="p">;</span>
</span><span class='line'><span class="n">id</span>          <span class="n">name</span>        <span class="n">surname</span>     <span class="n">city</span>        <span class="n">age</span>         <span class="n">credit_card_num</span>      <span class="n">job_position</span>
</span><span class='line'><span class="c1">----------  ----------  ----------  ----------  ----------  -------------------  ------------</span>
</span><span class='line'><span class="mi">1</span>           <span class="n">ruan</span>        <span class="n">bekker</span>      <span class="n">cape</span> <span class="n">town</span>   <span class="mi">31</span>          <span class="mi">2345</span><span class="o">-</span><span class="mi">8970</span><span class="o">-</span><span class="mi">6712</span><span class="o">-</span><span class="mi">4352</span>  <span class="n">devops</span>
</span></code></pre></td></tr></table></div></figure>


<p>Read the data from the transactions table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">transactions</span><span class="p">;</span>
</span><span class='line'><span class="n">credit_card_num</span>      <span class="n">transaction_id</span>  <span class="n">shop_name</span>   <span class="n">product_name</span>  <span class="n">spent_total</span>  <span class="n">purchase_option</span>
</span><span class='line'><span class="c1">-------------------  --------------  ----------  ------------  -----------  ---------------</span>
</span><span class='line'><span class="mi">2345</span><span class="o">-</span><span class="mi">8970</span><span class="o">-</span><span class="mi">6712</span><span class="o">-</span><span class="mi">4352</span>  <span class="mi">981623</span>          <span class="n">spaza01</span>     <span class="n">burger</span>        <span class="mi">101</span><span class="p">.</span><span class="mi">02</span>       <span class="n">credit_card</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Inner Joins with Sqlite</h2>

<p>This is where stuff gets interesting.</p>

<p>Let&rsquo;s say you want to join data from 2 tables, in this example we have a table with our userdata and a table with transaction data.</p>

<p>Say we want to see the user&rsquo;s name, transaction id, the product they purchased and the total amount spent, we will make use of inner joins.</p>

<p>Example looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">select</span> <span class="n">a</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">transaction_id</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">product_name</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">spent_total</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">from</span> <span class="n">users</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">as</span> <span class="n">a</span> <span class="k">inner</span> <span class="k">join</span> <span class="n">transactions</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">as</span> <span class="n">b</span> <span class="k">on</span> <span class="n">a</span><span class="p">.</span><span class="n">credit_card_num</span> <span class="o">=</span> <span class="n">b</span><span class="p">.</span><span class="n">credit_card_num</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">where</span> <span class="n">a</span><span class="p">.</span><span class="n">credit_card_num</span> <span class="o">=</span> <span class="s1">&#39;2345-8970-6712-4352&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">name</span>        <span class="n">transaction_id</span>  <span class="n">product_name</span>  <span class="n">spent_total</span>
</span><span class='line'><span class="c1">----------  --------------  ------------  -----------</span>
</span><span class='line'><span class="n">ruan</span>        <span class="mi">981623</span>          <span class="n">burger</span>         <span class="mi">101</span><span class="p">.</span><span class="mi">02</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s say you dont know the credit_card number but you would like to do a lookup the credit card number via the user&rsquo;s id, then pass the value to the where statement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">select</span> <span class="n">a</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">transaction_id</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">product_name</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">spent_total</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">from</span> <span class="n">users</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">as</span> <span class="n">a</span> <span class="k">inner</span> <span class="k">join</span> <span class="n">transactions</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">as</span> <span class="n">b</span> <span class="k">on</span> <span class="n">a</span><span class="p">.</span><span class="n">credit_card_num</span> <span class="o">=</span> <span class="n">b</span><span class="p">.</span><span class="n">credit_card_num</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">where</span> <span class="n">a</span><span class="p">.</span><span class="n">credit_card_num</span> <span class="o">=</span> <span class="p">(</span><span class="k">select</span> <span class="n">credit_card_num</span> <span class="k">from</span> <span class="n">users</span> <span class="k">where</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">name</span>        <span class="n">transaction_id</span>  <span class="n">product_name</span>  <span class="n">spent_total</span>
</span><span class='line'><span class="c1">----------  --------------  ------------  -----------</span>
</span><span class='line'><span class="n">ruan</span>        <span class="mi">981623</span>          <span class="n">burger</span>         <span class="mi">101</span><span class="p">.</span><span class="mi">02</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s create another table called <code>products</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">create</span> <span class="k">table</span> <span class="n">products</span> <span class="p">(</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="n">product_id</span> <span class="nb">INTEGER</span><span class="p">(</span><span class="mi">18</span><span class="p">),</span> <span class="n">product_name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="n">product_category</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">product_price</span> <span class="nb">DECIMAL</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Write a record with product data to the table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">products</span> <span class="k">values</span><span class="p">(</span><span class="mi">0231</span><span class="p">,</span> <span class="s1">&#39;burger&#39;</span><span class="p">,</span> <span class="s1">&#39;fast foods&#39;</span><span class="p">,</span> <span class="mi">101</span><span class="p">.</span><span class="mi">02</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, lets say the question will be that we need to display the users name, credit card number, product name as well as the product category and products price, by only giving you the credit card number</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">select</span> <span class="n">a</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">credit_card_num</span><span class="p">,</span> <span class="k">c</span><span class="p">.</span><span class="n">product_name</span><span class="p">,</span> <span class="k">c</span><span class="p">.</span><span class="n">product_category</span><span class="p">,</span> <span class="k">c</span><span class="p">.</span><span class="n">product_price</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">from</span> <span class="n">users</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">as</span> <span class="n">a</span> <span class="k">inner</span> <span class="k">join</span> <span class="n">transactions</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">as</span> <span class="n">b</span> <span class="k">on</span> <span class="n">a</span><span class="p">.</span><span class="n">credit_card_num</span> <span class="o">=</span> <span class="n">b</span><span class="p">.</span><span class="n">credit_card_num</span> <span class="k">inner</span> <span class="k">join</span> <span class="n">products</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">as</span> <span class="k">c</span> <span class="k">on</span> <span class="n">b</span><span class="p">.</span><span class="n">product_name</span> <span class="o">=</span> <span class="k">c</span><span class="p">.</span><span class="n">product_name</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">where</span> <span class="n">a</span><span class="p">.</span><span class="n">credit_card_num</span> <span class="o">=</span> <span class="s1">&#39;2345-8970-6712-4352&#39;</span> <span class="k">and</span> <span class="k">c</span><span class="p">.</span><span class="n">product_name</span> <span class="o">=</span> <span class="s1">&#39;burger&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">name</span>        <span class="n">credit_card_num</span>      <span class="n">product_name</span>  <span class="n">product_category</span>   <span class="n">product_price</span>
</span><span class='line'><span class="c1">----------  -------------------  ------------  -----------------  -------------</span>
</span><span class='line'><span class="n">ruan</span>        <span class="mi">2345</span><span class="o">-</span><span class="mi">8970</span><span class="o">-</span><span class="mi">6712</span><span class="o">-</span><span class="mi">4352</span>  <span class="n">burger</span>        <span class="n">fast</span> <span class="n">foods</span>         <span class="mi">101</span><span class="p">.</span><span class="mi">02</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Elasticsearch With Ansible Tutorial]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/06/install-elasticsearch-with-ansible-tutorial/"/>
    <updated>2019-04-06T15:45:09-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/06/install-elasticsearch-with-ansible-tutorial</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55700285-f3cdda00-59ce-11e9-9c00-a05b9d469e23.png" alt="" /></p>

<p>In this tutorial we will install a elasticsearch cluster with ansible (well rather a node)</p>

<p>Our inventory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat inventory.ini
</span><span class='line'>[newes]
</span><span class='line'>esnewnode
</span><span class='line'>
</span><span class='line'>[newes:vars]
</span><span class='line'>ansible_python_interpreter=/usr/bin/python3</span></code></pre></td></tr></table></div></figure>


<p>Our playbook to bootstrap our nodes with Python:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat bootstrap-python.yml
</span><span class='line'>---
</span><span class='line'>- hosts: newes
</span><span class='line'>  gather_facts: False
</span><span class='line'>
</span><span class='line'>  tasks:
</span><span class='line'>  - name: install python
</span><span class='line'>    raw: test -e /usr/bin/python || ( apt update && apt install python -y )</span></code></pre></td></tr></table></div></figure>


<p>Our playbook to provision users:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat provision-users.yml
</span><span class='line'>---
</span><span class='line'># Provisions User on Nodes
</span><span class='line'># Setup Passwordless SSH from Jumpbox
</span><span class='line'># Install Packages using APT
</span><span class='line'>- name: bootstrap python
</span><span class='line'>  hosts: newes
</span><span class='line'>  roles:
</span><span class='line'>    - bootstrap-python
</span><span class='line'>
</span><span class='line'>- name: setup pre-requisites
</span><span class='line'>  hosts: newes
</span><span class='line'>  roles:
</span><span class='line'>    - create-sudo-user
</span><span class='line'>    - install-modules
</span><span class='line'>    - configure-hosts-file
</span><span class='line'>
</span><span class='line'>#- name: setup ruan user on the nodes
</span><span class='line'>#  become: yes
</span><span class='line'>#  become_user: ruan
</span><span class='line'>#  hosts: admin
</span><span class='line'>#  roles:
</span><span class='line'>#    - configure-admin
</span><span class='line'>
</span><span class='line'>- name: copy public key to nodes
</span><span class='line'>  become: yes
</span><span class='line'>  become_user: ruan
</span><span class='line'>  hosts: newes
</span><span class='line'>  roles:
</span><span class='line'>    - copy-keys
</span><span class='line'>
</span><span class='line'>- name: install elasticsearch
</span><span class='line'>  hosts: newes
</span><span class='line'>  roles:
</span><span class='line'>    - elasticsearch</span></code></pre></td></tr></table></div></figure>


<p>Our roles that will be included in our playbooks from above:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat roles/create-sudo-user/tasks/main.yml
</span><span class='line'>---
</span><span class='line'>- name: Create Sudo User
</span><span class='line'>  user: name=ruan
</span><span class='line'>        groups=sudo
</span><span class='line'>        shell=/bin/bash
</span><span class='line'>        generate_ssh_key=no
</span><span class='line'>        state=present
</span><span class='line'>
</span><span class='line'>- name: Set Passwordless SSH Access for ruan user
</span><span class='line'>  copy: src=sudoers
</span><span class='line'>        dest=/etc/sudoers.d
</span><span class='line'>        mode=0440</span></code></pre></td></tr></table></div></figure>


<p>Sudoers file for the create sudo role:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat roles/create-sudo-user/files/sudoers
</span><span class='line'>ruan ALL=(ALL) NOPASSWD:ALL</span></code></pre></td></tr></table></div></figure>


<p>The role to install all the apt packages:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat roles/install-modules/tasks/main.yml
</span><span class='line'>---
</span><span class='line'>- name: Install Packages
</span><span class='line'>  apt: name= state=latest update_cache=yes
</span><span class='line'>  with_items:
</span><span class='line'>    - apt-transport-https
</span><span class='line'>    - ntp
</span><span class='line'>    - python
</span><span class='line'>    - tcpdump
</span><span class='line'>    - wget
</span><span class='line'>    - openssl
</span><span class='line'>    - curl</span></code></pre></td></tr></table></div></figure>


<p>Role to configure hosts file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat roles/configure-hosts-file/tasks/main.yml
</span><span class='line'>---
</span><span class='line'>- name: Configure Hosts File
</span><span class='line'>  lineinfile: path=/etc/hosts regexp='.*$' line=" " state=present
</span><span class='line'>  when: hostvars[item].ansible_default_ipv4.address is defined
</span><span class='line'>  with_items: ""</span></code></pre></td></tr></table></div></figure>


<p>The role to copy the ssh keys:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat roles/copy-keys/tasks/main.yml
</span><span class='line'>---
</span><span class='line'>- name: Copy Public Key to Other Hosts
</span><span class='line'>  become: true
</span><span class='line'>  become_user: ruan
</span><span class='line'>  copy:
</span><span class='line'>    src: /tmp/id_rsa.pub
</span><span class='line'>    dest: /tmp/id_rsa.pub
</span><span class='line'>    mode: 0644
</span><span class='line'>- name: Append Public key in authorized_keys file
</span><span class='line'>  authorized_key:
</span><span class='line'>    user: ruan
</span><span class='line'>    state: present
</span><span class='line'>    key: ""</span></code></pre></td></tr></table></div></figure>


<p>The role to install elasticsearch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat roles/elasticsearch/tasks/main.yml
</span><span class='line'>---
</span><span class='line'>- name: get apt repo key
</span><span class='line'>  apt_key:
</span><span class='line'>    url: https://artifacts.elastic.co/GPG-KEY-elasticsearch
</span><span class='line'>    state: present
</span><span class='line'>
</span><span class='line'>- name: install apt repo
</span><span class='line'>  apt_repository:
</span><span class='line'>    repo: deb https://artifacts.elastic.co/packages/6.x/apt stable main
</span><span class='line'>    state: present
</span><span class='line'>    filename: elastic-6.x.list
</span><span class='line'>    update_cache: yes
</span><span class='line'>
</span><span class='line'>- name: install java
</span><span class='line'>  apt:
</span><span class='line'>    name: openjdk-8-jre
</span><span class='line'>    state: present
</span><span class='line'>    update_cache: yes
</span><span class='line'>
</span><span class='line'>- name: install elasticsearch
</span><span class='line'>  apt:
</span><span class='line'>    name: elasticsearch
</span><span class='line'>    state: present
</span><span class='line'>    update_cache: yes
</span><span class='line'>
</span><span class='line'>- name: reload systemd config
</span><span class='line'>  systemd: daemon_reload=yes
</span><span class='line'>
</span><span class='line'>- name: enable service elasticsearch and ensure it is not masked
</span><span class='line'>  systemd:
</span><span class='line'>    name: elasticsearch
</span><span class='line'>    enabled: yes
</span><span class='line'>    masked: no
</span><span class='line'>
</span><span class='line'>- name: ensure elasticsearch is running
</span><span class='line'>  systemd: state=started name=elasticsearch</span></code></pre></td></tr></table></div></figure>


<h2>Deploy Elasticsearch</h2>

<p>Bootstrap python then deploy elasticsearch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ansible-playbook -i inventory.ini -u root bootstrap-python.yml
</span><span class='line'>$ ansible-playbook -i inventory.ini -u root provision-users.yml</span></code></pre></td></tr></table></div></figure>


<p>Test out elasticsearch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://127.0.0.1:9200/
</span><span class='line'>{
</span><span class='line'>  "name" : "Z52AEZ7",
</span><span class='line'>  "cluster_name" : "elasticsearch",
</span><span class='line'>  "cluster_uuid" : "fUiYVjsSQpCbo9QKEiuvaA",
</span><span class='line'>  "version" : {
</span><span class='line'>    "number" : "6.3.0",
</span><span class='line'>    "build_flavor" : "default",
</span><span class='line'>    "build_type" : "deb",
</span><span class='line'>    "build_hash" : "424e937",
</span><span class='line'>    "build_date" : "2018-06-11T23:38:03.357887Z",
</span><span class='line'>    "build_snapshot" : false,
</span><span class='line'>    "lucene_version" : "7.3.1",
</span><span class='line'>    "minimum_wire_compatibility_version" : "5.6.0",
</span><span class='line'>    "minimum_index_compatibility_version" : "5.0.0"
</span><span class='line'>  },
</span><span class='line'>  "tagline" : "You Know, for Search"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch Templates Tutorial]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/06/elasticsearch-templates-tutorial/"/>
    <updated>2019-04-06T15:41:53-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/06/elasticsearch-templates-tutorial</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/53352581-b3892f80-392b-11e9-9532-5db5cbfc8f1c.jpg" alt="elasticsearch" /></p>

<p>Elasticsearch Index templates allow you to define templates that will automatically be applied on index creation time. The templates can include both settings and mappings..</p>

<h2>What are we doing?</h2>

<p>We want to create a template on how we would a target index to look like. It should consist of 1 primary shard and 2 replica shards and we want to update the mapping that we can make use of text and keyword string fields.</p>

<p>So then whenever we create an index which matches our template, the template will be applied on index creation.</p>

<h2>String Fields</h2>

<p>We will make use of the following string fields in our mappings which will be included in our templates:</p>

<p><strong>Text</strong>:</p>

<p>A field to index full-text values, such as the body of an email or the description of a product. These fields are analyzed, that is they are passed through an analyzer to convert the string into a list of individual terms before being indexed. The analysis process allows Elasticsearch to search for individual words within each full text field</p>

<p><strong>Keyword"</strong>:</p>

<p>A field to index structured content such as email addresses, hostnames, status codes, zip codes or tags.</p>

<p>They are typically used for filtering (Find me all blog posts where status is published), for sorting, and for aggregations. Keyword fields are only searchable by their exact value</p>

<h2>Note about templates:</h2>

<p>Couple of things to keep in mind:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. Templates gets referenced on index creation and does not affect existing indexes
</span><span class='line'>2. When you update a template, you need to specify the exact template, the payload overwrites the whole template</span></code></pre></td></tr></table></div></figure>


<p>View your current templates in your cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET http://localhost:9200/_cat/templates?v
</span><span class='line'>name                          index_patterns             order      version
</span><span class='line'>.monitoring-kibana            [.monitoring-kibana-6-*]   0          6020099
</span><span class='line'>filebeat-6.3.1                [filebeat-6.3.1-*]         1</span></code></pre></td></tr></table></div></figure>


<p>Create the template <code>foobar_docs</code> which will match any indexes matching <code>foo-*</code> and <code>bar-*</code> which will inherit index settings of 1 primary shards and 2 replica shards and also apply a mapping template shown below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H 'Content-Type: application/json' -XPUT http://localhost:9200/_template/foobar_docs -d '
</span><span class='line'>{
</span><span class='line'>  "index_patterns": [
</span><span class='line'>    "foo-*", "bar-*"
</span><span class='line'>  ], 
</span><span class='line'>  "settings": {
</span><span class='line'>    "number_of_shards": 1, 
</span><span class='line'>    "number_of_replicas": 2
</span><span class='line'>  }, 
</span><span class='line'>  "mappings": {
</span><span class='line'>    "type1": {
</span><span class='line'>      "_source": {"enabled": true}, 
</span><span class='line'>      "properties": {"created_at": {"type": "date"}, 
</span><span class='line'>      "title": {"type": "text"}, 
</span><span class='line'>      "status": {"type": "keyword"}, 
</span><span class='line'>      "content": {"type":"text"}, 
</span><span class='line'>      "first_name": {"type": "keyword"}, 
</span><span class='line'>      "last_name": {"type": "keyword"}, 
</span><span class='line'>      "age": {"type":"integer"}, 
</span><span class='line'>      "registered": {"type": "boolean"}
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}'
</span><span class='line'>{"acknowledged":true}</span></code></pre></td></tr></table></div></figure>


<p>View the template from the api:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET http://localhost:9200/_cat/templates/foobar_docs?v
</span><span class='line'>name        index_patterns order version
</span><span class='line'>foobar_docs [foo-*, bar-*] 0</span></code></pre></td></tr></table></div></figure>


<p>Create a index that will match the templates definition:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H 'Content-Type: application/json' -XPUT http://localhost:9200/test-2018.07.20
</span><span class='line'>{"acknowledged":true,"shards_acknowledged":true,"index":"test-2018.07.20"}</span></code></pre></td></tr></table></div></figure>


<p>Verify that the index has been created:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET http://localhost:9200/_cat/indices/test-2018.07.20?v
</span><span class='line'>health status index           uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>green  open   test-2018.07.20 -5XOfl0GTEGeHycTwL51vQ   5   1          0            0        2kb          1.1kb</span></code></pre></td></tr></table></div></figure>


<p>We can also inspect the template like shown below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET http://localhost:9200/_template/foobar_docs?pretty
</span><span class='line'>{
</span><span class='line'>  "foobar_docs" : {
</span><span class='line'>    "order" : 0,
</span><span class='line'>    "index_patterns" : [
</span><span class='line'>      "foo-*",
</span><span class='line'>      "bar-*"
</span><span class='line'>    ],
</span><span class='line'>    "settings" : {
</span><span class='line'>      "index" : {
</span><span class='line'>        "number_of_shards" : "1",
</span><span class='line'>        "number_of_replicas" : "2"
</span><span class='line'>      }
</span><span class='line'>    },
</span><span class='line'>    "mappings" : {
</span><span class='line'>      "type1" : {
</span><span class='line'>        "_source" : {
</span><span class='line'>          "enabled" : true
</span><span class='line'>        },
</span><span class='line'>        "properties" : {
</span><span class='line'>          "created_at" : {
</span><span class='line'>            "type" : "date"
</span><span class='line'>          },
</span><span class='line'>          "title" : {
</span><span class='line'>            "type" : "text"
</span><span class='line'>          },
</span><span class='line'>          "status" : {
</span><span class='line'>            "type" : "keyword"
</span><span class='line'>          },
</span><span class='line'>          "content" : {
</span><span class='line'>            "type" : "text"
</span><span class='line'>          },
</span><span class='line'>          "first_name" : {
</span><span class='line'>            "type" : "keyword"
</span><span class='line'>          },
</span><span class='line'>          "last_name" : {
</span><span class='line'>            "type" : "keyword"
</span><span class='line'>          },
</span><span class='line'>          "age" : {
</span><span class='line'>            "type" : "integer"
</span><span class='line'>          },
</span><span class='line'>          "registered" : {
</span><span class='line'>            "type" : "boolean"
</span><span class='line'>          }
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    },
</span><span class='line'>    "aliases" : { }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Ingest a document to your index:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H 'Content-Type: application/json' -XPOST http://localhost:9200/foo-2018.07.20/type1/ -d '
</span><span class='line'>{
</span><span class='line'>  "title": "this is a post", 
</span><span class='line'>  "status": "active", 
</span><span class='line'>  "content": "introduction post", 
</span><span class='line'>  "first_name": "ruan", 
</span><span class='line'>  "last_name": "bekker", 
</span><span class='line'>  "age": "31", 
</span><span class='line'>  "registered": "true"
</span><span class='line'>}'</span></code></pre></td></tr></table></div></figure>


<p>Run a search against your elasticsearch index to view the data:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET http://localhost:9200/foo-2018.07.20/_search?pretty
</span><span class='line'>{
</span><span class='line'>  "took" : 1,
</span><span class='line'>  "timed_out" : false,
</span><span class='line'>  "_shards" : {
</span><span class='line'>    "total" : 1,
</span><span class='line'>    "successful" : 1,
</span><span class='line'>    "skipped" : 0,
</span><span class='line'>    "failed" : 0
</span><span class='line'>  },
</span><span class='line'>  "hits" : {
</span><span class='line'>    "total" : 1,
</span><span class='line'>    "max_score" : 1.0,
</span><span class='line'>    "hits" : [
</span><span class='line'>      {
</span><span class='line'>        "_index" : "foo-2018.07.20",
</span><span class='line'>        "_type" : "type1",
</span><span class='line'>        "_id" : "ZYfotmQB9mQGWzJT7W2y",
</span><span class='line'>        "_score" : 1.0,
</span><span class='line'>        "_source" : {
</span><span class='line'>          "title" : "this is a post",
</span><span class='line'>          "status" : "active",
</span><span class='line'>          "content" : "introduction post",
</span><span class='line'>          "first_name" : "ruan",
</span><span class='line'>          "last_name" : "bekker",
</span><span class='line'>          "age" : "31",
</span><span class='line'>          "registered" : "true"
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    ]
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Create another document:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H 'Content-Type: application/json' -XPOST http://localhost:9200/foo-2018.07.20/type1/ -d '
</span><span class='line'>{
</span><span class='line'>  "created_at": 1532077144, 
</span><span class='line'>  "title": "this is a another post", 
</span><span class='line'>  "status": "ae", 
</span><span class='line'>  "content": "introduction post", 
</span><span class='line'>  "first_name": "stefan", 
</span><span class='line'>  "last_name": "bester", 
</span><span class='line'>  "age": 34, 
</span><span class='line'>  "registered": "true"
</span><span class='line'>}'</span></code></pre></td></tr></table></div></figure>


<p>As you guessed, executing another search against elasticsearch shows us both documents:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET http://localhost:9200/foo-2018.07.20/_search?pretty
</span><span class='line'>{
</span><span class='line'>  "took" : 0,
</span><span class='line'>  "timed_out" : false,
</span><span class='line'>  "_shards" : {
</span><span class='line'>    "total" : 1,
</span><span class='line'>    "successful" : 1,
</span><span class='line'>    "skipped" : 0,
</span><span class='line'>    "failed" : 0
</span><span class='line'>  },
</span><span class='line'>  "hits" : {
</span><span class='line'>    "total" : 2,
</span><span class='line'>    "max_score" : 1.0,
</span><span class='line'>    "hits" : [
</span><span class='line'>      {
</span><span class='line'>        "_index" : "foo-2018.07.20",
</span><span class='line'>        "_type" : "type1",
</span><span class='line'>        "_id" : "ZYfotmQB9mQGWzJT7W2y",
</span><span class='line'>        "_score" : 1.0,
</span><span class='line'>        "_source" : {
</span><span class='line'>          "title" : "this is a post",
</span><span class='line'>          "status" : "active",
</span><span class='line'>          "content" : "introduction post",
</span><span class='line'>          "first_name" : "ruan",
</span><span class='line'>          "last_name" : "bekker",
</span><span class='line'>          "age" : "31",
</span><span class='line'>          "registered" : "true"
</span><span class='line'>        }
</span><span class='line'>      },
</span><span class='line'>      {
</span><span class='line'>        "_index" : "foo-2018.07.20",
</span><span class='line'>        "_type" : "type1",
</span><span class='line'>        "_id" : "rofrtmQB9mQGWzJTxnvp",
</span><span class='line'>        "_score" : 1.0,
</span><span class='line'>        "_source" : {
</span><span class='line'>          "created_at" : 1532077144,
</span><span class='line'>          "title" : "this is a another post",
</span><span class='line'>          "status" : "active",
</span><span class='line'>          "content" : "introduction post",
</span><span class='line'>          "first_name" : "stefan",
</span><span class='line'>          "last_name" : "bester",
</span><span class='line'>          "age" : 34,
</span><span class='line'>          "registered" : "true"
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    ]
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s run a search query for any documents matching people with the age between <strong>30</strong> and <strong>40</strong>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H 'Content-Type: application/json' -XGET http://localhost:9200/foo-2018.07.20/_search?pretty -d '{"query": {"range": {"age": {"gte": 30, "lte": 40}}}}'
</span><span class='line'>{
</span><span class='line'>  "took" : 2,
</span><span class='line'>  "timed_out" : false,
</span><span class='line'>  "_shards" : {
</span><span class='line'>    "total" : 1,
</span><span class='line'>    "successful" : 1,
</span><span class='line'>    "skipped" : 0,
</span><span class='line'>    "failed" : 0
</span><span class='line'>  },
</span><span class='line'>  "hits" : {
</span><span class='line'>    "total" : 2,
</span><span class='line'>    "max_score" : 1.0,
</span><span class='line'>    "hits" : [
</span><span class='line'>      {
</span><span class='line'>        "_index" : "foo-2018.07.20",
</span><span class='line'>        "_type" : "type1",
</span><span class='line'>        "_id" : "ZYfotmQB9mQGWzJT7W2y",
</span><span class='line'>        "_score" : 1.0,
</span><span class='line'>        "_source" : {
</span><span class='line'>          "title" : "this is a post",
</span><span class='line'>          "status" : "active",
</span><span class='line'>          "content" : "introduction post",
</span><span class='line'>          "first_name" : "ruan",
</span><span class='line'>          "last_name" : "bekker",
</span><span class='line'>          "age" : "31",
</span><span class='line'>          "registered" : "true"
</span><span class='line'>        }
</span><span class='line'>      },
</span><span class='line'>      {
</span><span class='line'>        "_index" : "foo-2018.07.20",
</span><span class='line'>        "_type" : "type1",
</span><span class='line'>        "_id" : "rofrtmQB9mQGWzJTxnvp",
</span><span class='line'>        "_score" : 1.0,
</span><span class='line'>        "_source" : {
</span><span class='line'>          "created_at" : 1532077144,
</span><span class='line'>          "title" : "this is a another post",
</span><span class='line'>          "status" : "active",
</span><span class='line'>          "content" : "introduction post",
</span><span class='line'>          "first_name" : "stefan",
</span><span class='line'>          "last_name" : "bester",
</span><span class='line'>          "age" : 34,
</span><span class='line'>          "registered" : "true"
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    ]
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Search for people with the age between <strong>32</strong> and <strong>40</strong>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H 'Content-Type: application/json' -XGET http://localhost:9200/foo-2018.07.20/_search?pretty -d '{"query": {"range": {"age": {"gte": 32, "lte": 40}}}}'
</span><span class='line'>{
</span><span class='line'>  "took" : 1,
</span><span class='line'>  "timed_out" : false,
</span><span class='line'>  "_shards" : {
</span><span class='line'>    "total" : 1,
</span><span class='line'>    "successful" : 1,
</span><span class='line'>    "skipped" : 0,
</span><span class='line'>    "failed" : 0
</span><span class='line'>  },
</span><span class='line'>  "hits" : {
</span><span class='line'>    "total" : 1,
</span><span class='line'>    "max_score" : 1.0,
</span><span class='line'>    "hits" : [
</span><span class='line'>      {
</span><span class='line'>        "_index" : "foo-2018.07.20",
</span><span class='line'>        "_type" : "type1",
</span><span class='line'>        "_id" : "rofrtmQB9mQGWzJTxnvp",
</span><span class='line'>        "_score" : 1.0,
</span><span class='line'>        "_source" : {
</span><span class='line'>          "created_at" : 1532077144,
</span><span class='line'>          "title" : "this is a another post",
</span><span class='line'>          "status" : "active",
</span><span class='line'>          "content" : "introduction post",
</span><span class='line'>          "first_name" : "stefan",
</span><span class='line'>          "last_name" : "bester",
</span><span class='line'>          "age" : 34,
</span><span class='line'>          "registered" : "true"
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    ]
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s say we want to update our template with <code>refresh_interval</code>, primary shards of 2 and replicas of 1 settings:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H 'Content-Type: application/json' -XPUT http://localhost:9200/_template/foobar_docs -d '
</span><span class='line'>{
</span><span class='line'>  "index_patterns": ["foo-*", "bar-*"], 
</span><span class='line'>  "settings": {"number_of_shards": 2, "number_of_replicas": 1, "refresh_interval": "15s"}
</span><span class='line'>}'</span></code></pre></td></tr></table></div></figure>


<p>View the template, as you can see the target template will look exactly like the data body that we are posting to the template api:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET http://localhost:9200/_template/foobar_docs?pretty
</span><span class='line'>{
</span><span class='line'>  "foobar_docs" : {
</span><span class='line'>    "order" : 0,
</span><span class='line'>    "index_patterns" : [
</span><span class='line'>      "foo-*",
</span><span class='line'>      "bar-*"
</span><span class='line'>    ],
</span><span class='line'>    "settings" : {
</span><span class='line'>      "index" : {
</span><span class='line'>        "number_of_shards" : "2",
</span><span class='line'>        "number_of_replicas" : "1",
</span><span class='line'>        "refresh_interval" : "15s"
</span><span class='line'>      }
</span><span class='line'>    },
</span><span class='line'>    "mappings" : { },
</span><span class='line'>    "aliases" : { }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>View our current index, as you can see the index is unaffected of the template change as only new indexes will retrieve the update of the template:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET http://localhost:9200/_cat/indices/foo-2018.07.20?v
</span><span class='line'>health status index          uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>yellow open   foo-2018.07.20 ol1pGugrQCKd0xES4R6oFg   1   2          2            0     20.4kb         10.2kb</span></code></pre></td></tr></table></div></figure>


<p>Create a new index to verify that the template&rsquo;s config is pulled into the new index:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H 'Content-Type: application/json' -XPUT http://localhost:9200/foo-2018.07.20-new</span></code></pre></td></tr></table></div></figure>


<p>View the elasticsearch indexes to verify the behavior:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET http://localhost:9200/_cat/indices/foo-2018.07.*?v
</span><span class='line'>health status index              uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>yellow open   foo-2018.07.20     ol1pGugrQCKd0xES4R6oFg   1   2          2            0     20.4kb         10.2kb
</span><span class='line'>green  open   foo-2018.07.20-new g6Ii8jtKRFa1zDVB2IsDBQ   2   1          0            0       920b           460b</span></code></pre></td></tr></table></div></figure>


<p>Delete the indexes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XDELETE http://localhost:9200/foo-*
</span><span class='line'>{"acknowledged":true}</span></code></pre></td></tr></table></div></figure>


<p>Delete the templates:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XDELETE 'http://localhost:9200/_template/foobar_docs'
</span><span class='line'>{"acknowledged":true}</span></code></pre></td></tr></table></div></figure>


<p>Verify that the templates are gone:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET http://localhost:9200/_cat/templates/foobar_docs?v
</span><span class='line'>name index_patterns order version</span></code></pre></td></tr></table></div></figure>


<h2>Resources:</h2>

<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html</a>
<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.3/mapping-types.html">https://www.elastic.co/guide/en/elasticsearch/reference/6.3/mapping-types.html</a>
<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reindex Your Elasticsearch Indexes Tutorial]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/06/reindex-your-elasticsearch-indexes-tutorial/"/>
    <updated>2019-04-06T15:37:18-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/06/reindex-your-elasticsearch-indexes-tutorial</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/53352581-b3892f80-392b-11e9-9532-5db5cbfc8f1c.jpg" alt="" /></p>

<p>At times you may find that the indexes in your cluster are not queried that often but you still want them around. But you also want to reduce the resource footprint by reducing the number of shards, and perhaps increase the refresh interval.</p>

<p>For refresh interval, if new data comes in and we dont care to have it available near real time, we can set the refresh interval for example to 60 seconds, so the index will only have the data available every 60 seconds. (default: 1s)</p>

<h2>Reindexing Elasticsearch Indexes</h2>

<p>In this example we will use the scenario where we have daily indexes with 5 primary shards and 1 set of replicas and we would like to create a weekly index with 1 primary shard, 1 replica and the refresh interval of 60 seconds, and reindex the previous weeks data into our weekly index.</p>

<p>Create the target weekly index with the mentioned configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H "Content-Type: application/json" -XPUT 'http://127.0.0.1:9200/my-index-2019.01.01-07' -d '
</span><span class='line'>{
</span><span class='line'>  "settings": {
</span><span class='line'>      "number_of_shards": "1",
</span><span class='line'>      "number_of_replicas": "1",
</span><span class='line'>      "refresh_interval" : "60s"
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>'</span></code></pre></td></tr></table></div></figure>


<p>Ensure the index exist:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET 'http://127.0.0.1:9200/_cat/indices/my-index-2019.01.01*?v'
</span><span class='line'>health status index                    uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>green  open   my-index-2019.01.01      wbFEJCApSpSlbOXzb1Tjxw   5   1      22007            0      6.6mb          3.2mb
</span><span class='line'>green  open   my-index-2019.01.02      cbDmJR7pbpRT3O2x46fj20   5   1      28031            0      7.2mb          3.4mb
</span><span class='line'>..
</span><span class='line'>green  open   my-index-2019.01.01-07   mJR7pJ9O4T3O9jzyI943ca   1   1          0            0       466b           233b</span></code></pre></td></tr></table></div></figure>


<p>Create the reindex job, specify the source indexes and the destination index where the data must be reindexed to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -H 'Content-Type: application/json' -XPOST 'http://127.0.0.1:9200/_reindex' -d '
</span><span class='line'>{
</span><span class='line'>  "source": {
</span><span class='line'>      "index": [
</span><span class='line'>          "my-index-2019.01.01",
</span><span class='line'>          "my-index-2019.01.02",
</span><span class='line'>          "my-index-2019.01.03",
</span><span class='line'>          "my-index-2019.01.04",
</span><span class='line'>          "my-index-2019.01.05",
</span><span class='line'>          "my-index-2019.01.06",
</span><span class='line'>          "my-index-2019.01.07"
</span><span class='line'>      ]
</span><span class='line'>  },
</span><span class='line'>  "dest": {
</span><span class='line'>      "index": "my-index-2019.01.01-07"
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>'</span></code></pre></td></tr></table></div></figure>


<p>You can use the tasks api to monitor the progress:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET 'http://127.0.0.1:9200/_cat/tasks?'
</span><span class='line'>indices:data/write/bulk        -3MIFskURPKxd1tg8P2j0w:912621270 -                                transport 1538459598188 22:53:18 3.1ms       x.x.x.x -3MIFsk
</span><span class='line'>indices:data/write/bulk[s]     -3MIFskURPKxd1tg8P2j0w:912621271 -3MIFskURPKxd1tg8P2j0w:816648230 transport 1538459598188 22:53:18 3.1ms       x.x.x.x -3MIFsk</span></code></pre></td></tr></table></div></figure>


<p>You manipulate the output of the tasks api by either fetching specific actions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET 'http://127.0.0.1:9200/_tasks?actions=*data/write/reindex&detailed&pretty'</span></code></pre></td></tr></table></div></figure>


<p>Or viewing detailed output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET 'http://127.0.0.1:9200/_cat/tasks?detailed' | grep 'indices:data/write/reindex'
</span><span class='line'>indices:data/write/reindex     IvoqWoUqSgGCQ0ELG21nhg:740560815 -                                transport 1538462294714 23:38:14 1.7m        x.x.x.x IvoqWoU reindex from [my-index-2019.01.01] to [my-index-2019.01.01-07]</span></code></pre></td></tr></table></div></figure>


<p>Or you could get the json response:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET 'http://127.0.0.1:9200/_tasks?actions=*data/write/reindex&detailed&pretty'
</span><span class='line'>{
</span><span class='line'>  "nodes" : {
</span><span class='line'>    "xx" : {
</span><span class='line'>      "name" : "xx",
</span><span class='line'>      "roles" : [ "data", "ingest" ],
</span><span class='line'>      "tasks" : {
</span><span class='line'>        "xx:876452606" : {
</span><span class='line'>          "node" : "xx",
</span><span class='line'>          "id" : 776452606,
</span><span class='line'>          "type" : "transport",
</span><span class='line'>          "action" : "indices:data/write/reindex",
</span><span class='line'>          "status" : {
</span><span class='line'>            "total" : 4785475,
</span><span class='line'>            "updated" : 0,
</span><span class='line'>            "created" : 234000,
</span><span class='line'>            "deleted" : 0,
</span><span class='line'>            "batches" : 235,
</span><span class='line'>            "version_conflicts" : 0,
</span><span class='line'>            "noops" : 0,
</span><span class='line'>            "retries" : {
</span><span class='line'>              "bulk" : 0,
</span><span class='line'>              "search" : 0
</span><span class='line'>            },
</span><span class='line'>            "throttled_millis" : 0,
</span><span class='line'>            "requests_per_second" : -1.0,
</span><span class='line'>            "throttled_until_millis" : 0
</span><span class='line'>          },
</span><span class='line'>          "description" : "reindex from [my-index-2019.01.07] to [my-index-2019.01.01-07]",
</span><span class='line'>          "start_time_in_millis" : 1538462901120,
</span><span class='line'>          "running_time_in_nanos" : 64654161339,
</span><span class='line'>          "cancellable" : true
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Anyways, moving along. Reindex jobs will always be listed as a <code>data/write/reindex</code> action, so we can count the output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET 'http://127.0.0.1:9200/_cat/tasks?'  | grep 'data/write/reindex' | wc -l</span></code></pre></td></tr></table></div></figure>


<p>If the response is 0 then all the tasks completed and we can have a look at our index again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET 'http://127.0.0.1:9200/_cat/indices/my-index-2019.01.0*?v'
</span><span class='line'>health status index                    uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>green  open   my-index-2019.01.01      wbFEJCApSpSlbOXzb1Tjxw   5   1      22007            0      6.6mb          3.2mb
</span><span class='line'>green  open   my-index-2019.01.02      cbDmJR7pbpRT3O2x46fj20   5   1      28031            0      7.2mb          3.4mb
</span><span class='line'>..
</span><span class='line'>green  open   my-index-2019.01.01-07   mJR7pJ9O4T3O9jzyI943ca   1   1     322007            0     45.9mb         22.9mb</span></code></pre></td></tr></table></div></figure>


<p>Now that we can verify that the reindex tasks finished and we can see the aggregated result in our target index, we can delete our source indexes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XDELETE 'http://127.0.0.1:9200/my-index-2019.01.01,my-index-2019.01.02,my-index-2019.01.03,my-index-2019.01.04,my-index-2019.01.05,my-index-2019.01.06,my-index-2019.01.07'</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shrink Your Elasticsearch Index by Reducing the Shard Count With the Shards API]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/06/shrink-your-elasticsearch-index-by-reducing-the-shard-count-with-the-shards-api/"/>
    <updated>2019-04-06T15:33:48-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/06/shrink-your-elasticsearch-index-by-reducing-the-shard-count-with-the-shards-api</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/53352581-b3892f80-392b-11e9-9532-5db5cbfc8f1c.jpg" alt="elasticsearch" /></p>

<p>Resize your Elasticsearch Index with fewer Primary Shards by using the Shrink API.</p>

<p>In Elasticsearch, every index consists of multiple shards and every shard in your elasticsearch cluster contributes to the usage of your cpu, memory, file descriptors etc. This definitely helps for performance in parallel processing. As for an example with time series data, you would write and read a lot to an index with ie the current date.</p>

<p>If that index drops in requests and only read from the index every now and then, we dont need that many shards anymore and if we have multiple indexes, they may build up and take up unessacary compute power.</p>

<p>For a scenario where we want to reduce the size of our indexes, we can use the Shrink API to reduce the number of primary shards.</p>

<h2>The Shrink API</h2>

<p>The shrink index API allows you to shrink an existing index into a new index with fewer primary shards. The requested number of primary shards in the target index must be a factor of the number of shards in the source index. For example an index with 8 primary shards can be shrunk into 4, 2 or 1 primary shards or an index with 15 primary shards can be shrunk into 5, 3 or 1. If the number of shards in the index is a prime number it can only be shrunk into a single primary shard. Before shrinking, a (primary or replica) copy of every shard in the index must be present on the same node.</p>

<p>Steps on Shrinking:</p>

<p>Create the target index with the same definition as the source index, but with a smaller number of primary shards.
Then it hard-links segments from the source index into the target index.
Finally, it recovers the target index as though it were a closed index which had just been re-opened.</p>

<h2>Reduce the Primary Shards of an Index.</h2>

<p>As you may know, you can only set the Primary Shards on Index Creation time and Replica Shards you can set on the fly.</p>

<p>In this example we have a source index: <code>my-index-2019.01.10</code> with 5 primary shards and 1 replica shard, which gives us 10 shards for that index, that we would like to shrink to an index named: <code>archive_my-index-2019.01.10</code> with 1 primary shard and 1 replica shard, which will give us 2 shards for that index.</p>

<p>Have a look at your index:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET "http://127.0.0.1:9200/_cat/indices/my-index-2019.01.*?v"
</span><span class='line'>health status index                                     uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>green  open   my-index-2019.01.10                       xAijUTSevXirdyTZTN3cuA   5   1   80795533            0      5.9gb          2.9gb
</span><span class='line'>green  open   my-index-2019.01.11                       yb8Cjy9eQwqde8mJhR_vlw   5   5   80590481            0      5.7gb          2.8gb
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>And have a look at the nodes, as we will relocate the shards to a specific node:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://127.0.0.1:9200/_cat/nodes?v
</span><span class='line'>ip            heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name
</span><span class='line'>x.x.x.x             8          98   0    0.04    0.03     0.01 m         -      3E9yp60
</span><span class='line'>x.x.x.x            65          99   4    0.43    0.23     0.36 di        -      znFrs18</span></code></pre></td></tr></table></div></figure>


<p>In this demonstration we only have 2 nodes with a replication factor of 1, which means a index&rsquo;s shards will always reside on both nodes. In a case with more nodes, we need to ensure that we choose a node where a primary index reside on.</p>

<p>Look at the shards api, by passing the index name to get the index to shard allocation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://127.0.0.1:9200/_cat/shards/my-index-2019.01.10?v'
</span><span class='line'>index               shard prirep state   docs  store ip       node
</span><span class='line'>my-index-2019.01.10 2     p      STARTED  193  101mb x.x.x.x  Lq9P7eP
</span><span class='line'>my-index-2019.01.10 2     r      STARTED  193  101mb x.x.x.x  F5edOwK
</span><span class='line'>my-index-2019.01.10 4     p      STARTED  197  101mb x.x.x.x  Lq9P7eP
</span><span class='line'>my-index-2019.01.10 4     r      STARTED  197  101mb x.x.x.x  F5edOwK
</span><span class='line'>my-index-2019.01.10 3     r      STARTED  184  101mb x.x.x.x  Lq9P7eP
</span><span class='line'>my-index-2019.01.10 3     p      STARTED  184  101mb x.x.x.x  F5edOwK
</span><span class='line'>my-index-2019.01.10 1     r      STARTED  180  101mb x.x.x.x  Lq9P7eP
</span><span class='line'>my-index-2019.01.10 1     p      STARTED  180  101mb x.x.x.x  F5edOwK
</span><span class='line'>my-index-2019.01.10 0     p      STARTED  187  101mb x.x.x.x  Lq9P7eP
</span><span class='line'>my-index-2019.01.10 0     r      STARTED  187  101mb x.x.x.x  F5edOwK</span></code></pre></td></tr></table></div></figure>


<p>Create the target index:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XPUT -H 'Content-Type: application/json' http://127.0.0.1:9200/archive_my-index-2019.01.10 -d '
</span><span class='line'>{
</span><span class='line'>  "settings": {
</span><span class='line'>      "number_of_shards": "1",
</span><span class='line'>      "number_of_replicas": "1"
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>'</span></code></pre></td></tr></table></div></figure>


<p>Set the index as read only and relocate every copy of shard to node we indentified in a previous step:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XPUT -H 'Content-Type: application/json' http://127.0.0.1:9200/my-index-2019.01.10/_settings -d '
</span><span class='line'>{
</span><span class='line'>  "settings": {
</span><span class='line'>      "index.routing.allocation.require._name": "Lq9P7eP",
</span><span class='line'>      "index.blocks.write": true
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>'</span></code></pre></td></tr></table></div></figure>


<p>Now shrink the source index (my-index-2019.01.10) to the target index (archive_my-index-2019.01.10):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XPOST -H 'Content-Type: application/json' http://127.0.0.1:9200/my-index-2019.01.10/_shrink/archive_my-index-2019.01.10</span></code></pre></td></tr></table></div></figure>


<p>You can monitor the progress by using the Recovery API:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET "http://127.0.0.1:9200/_cat/recovery/my-index-2019.01.10?human&detailed=true"
</span><span class='line'>my-index-2019.01.10 0 23.3s peer done x.x.x.x  F5edOwK x.x.x.x Lq9P7eP n/a n/a 15 15 100.0% 15 635836677 635836677 100.0% 635836677 0 0 100.0%
</span><span class='line'>my-index-2019.01.10 1 22s   peer done x.x.x.x  Lq9P7eP x.x.x.x Lq9P7eP n/a n/a 15 15 100.0% 15 636392649 636392649 100.0% 636392649 0 0 100.0%
</span><span class='line'>my-index-2019.01.10 2 19.6s peer done x.x.x.x  F5edOwK x.x.x.x Lq9P7eP n/a n/a 15 15 100.0% 15 636809671 636809671 100.0% 636809671 0 0 100.0%
</span><span class='line'>my-index-2019.01.10 3 21.5s peer done x.x.x.x  Lq9P7eP x.x.x.x Lq9P7eP n/a n/a 15 15 100.0% 15 636378870 636378870 100.0% 636378870 0 0 100.0%
</span><span class='line'>my-index-2019.01.10 4 23.3s peer done x.x.x.x F5edOwK- x.x.x.x Lq9P7eP n/a n/a 15 15 100.0% 15 636545756 636545756 100.0% 636545756 0 0 100.0%</span></code></pre></td></tr></table></div></figure>


<p>You can also pass aliases as your table columns for output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET "http://127.0.0.1:9200/_cat/recovery/my-index-2019.01.10?v&detailed=true&h=index,shard,time,ty,st,shost,thost,f,fp,b,bp"
</span><span class='line'>index                            shard time  ty   st   shost         thost        f  fp     b         bp
</span><span class='line'>my-index-2019.01.10              0     23.3s peer done x.x.x.x x.x.x.x 15 100.0% 635836677 100.0%
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>When the job is done, have a look at your indexes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET "http://127.0.0.1:9200/_cat/indices/*my-index-2019.01.10?v"
</span><span class='line'>health status index                                     uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>green  open   archive_my-index-2019.01.10               PAijUTSeRvirdyTZTN3cuA   1   1   80795533            0      5.9gb          2.9gb
</span><span class='line'>green  open   my-index-2019.01.10                       Cb8Cjy9CQwqde8mJhR_vlw   5   1   80795533            0      2.9gb          2.9gb</span></code></pre></td></tr></table></div></figure>


<p>Remove the block on your old index in order to make it writable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XPUT -H 'Content-Type: application/json' http://127.0.0.1:9200/my-index-2019.01.10/_settings" -d '
</span><span class='line'>{
</span><span class='line'>  "settings": {
</span><span class='line'>      "index.routing.allocation.require._name": null,
</span><span class='line'>      "index.blocks.write": null
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>'</span></code></pre></td></tr></table></div></figure>


<p>Delete the old index:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XDELETE -H 'Content-Type: application/json' http://127.0.0.1:9200/my-index-2019.01.10</span></code></pre></td></tr></table></div></figure>


<p>Note:, On AWS Elasticsearch Service, if you dont remove the block and you trigger a redeployment, you will end up with something like this. Shard may still be constraint to a node.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET ${ES_HOST/_cat/allocation?v
</span><span class='line'>shards disk.indices disk.used disk.avail disk.total disk.percent host          ip  node
</span><span class='line'>     0           0b    51.2gb    956.5gb   1007.8gb            5 x.x.x.x  x.x.x.x  ap9Mx1R
</span><span class='line'>     1        3.6gb    54.9gb    952.8gb   1007.8gb            5 x.x.x.x  x.x.x.x  PqmoQpN   &lt;-----------
</span><span class='line'>     0           0b    51.2gb    956.5gb   1007.8gb            5 x.x.x.x  x.x.x.x  5p7x4Lc
</span><span class='line'>     0           0b    51.2gb    956.5gb   1007.8gb            5 x.x.x.x  x.x.x.x  c8kniP3
</span><span class='line'>     0           0b    51.2gb    956.5gb   1007.8gb            5 x.x.x.x  x.x.x.x  jPwlwsD
</span><span class='line'>     0           0b    51.2gb    956.5gb   1007.8gb            5 x.x.x.x  x.x.x.x  ljos4mu
</span><span class='line'>   481      904.1gb   990.3gb    521.3gb      1.4tb           65 x.x.x.x  x.x.x.x  qAF-gIU
</span><span class='line'>   481      820.2gb   903.6gb    608.1gb      1.4tb           59 x.x.x.x  x.x.x.x  dR3sNwA
</span><span class='line'>   481      824.6gb   909.1gb    602.6gb      1.4tb           60 x.x.x.x  x.x.x.x  fvL4A9X
</span><span class='line'>   481      792.7gb   876.5gb    635.2gb      1.4tb           57 x.x.x.x  x.x.x.x  lk4svht
</span><span class='line'>   481      779.2gb   864.4gb    647.3gb      1.4tb           57 x.x.x.x  x.x.x.x  uLsej9m
</span><span class='line'>     0           0b    51.2gb    956.5gb   1007.8gb            5 x.x.x.x  x.x.x.x  yM4Ka9l</span></code></pre></td></tr></table></div></figure>


<h2>Resources:</h2>

<ul>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shrink-index.html">https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shrink-index.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self Hosted Git and CICD Platform With Gitea and Drone on Docker]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/04/self-hosted-git-and-cicd-platform-with-gitea-and-drone-on-docker/"/>
    <updated>2019-04-04T17:57:16-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/04/self-hosted-git-and-cicd-platform-with-gitea-and-drone-on-docker</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55591102-f57c7100-5734-11e9-96cf-8a60d091a769.png" alt="" /></p>

<p>Both gitea and drone is built on golang runs on multiple platforms including a raspberry pi and its super lightweight. Oh yes, and its awesome!</p>

<p>In this tutorial we will see how we can implement our own git service and cicd platform by setting up gitea and drone on docker and commit a python flask application to gitea and build a pipeline on drone.</p>

<h2>Some definition</h2>

<p><strong>Gitea</strong>: will be your self hosted git server</p>

<p><strong>Drone Server</strong>: will be server being responsible for the web service, repositories, secrets, users, etc.</p>

<p><strong>Drone Agent</strong>: will be the workers that runs your builds, jobs etc.</p>

<h2>Server Confguration</h2>

<p>We will change our host&rsquo;s ssh port to something else as our git server&rsquo;s ssh method will be listening on port 22 and we would like to add our ssh key to gitea so that we can commit to our git server via ssh.</p>

<p>Change your server&rsquo;s ssh port to 2222, by opening <code>/etc/ssh/sshd_config</code> and edit the port to <code>2222</code> then restart sshd with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ /etc/init.d/sshd restart</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Your ssh connection will still be established, but you can exit and ssh to your server by specifying the new port:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -p 2222 user@host</span></code></pre></td></tr></table></div></figure>


<h2>Pre-Requirements</h2>

<p>Make sure you have <a href="https://docs.docker.com/install/">docker and docker-compose</a> installed</p>

<h2>Deploy Gitea and Drone</h2>

<p>Below is the docker-compose file for our deployment. Note that we are running a postgres database which gitea will be configured on, you can also use other databases like mysql, sqlite etc. Visit their <a href="https://docs.gitea.io/en-us/">documentation</a> for more info.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&quot;2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gitea-app</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">gitea/gitea:latest</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">gitea-app</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">USER_UID=1000</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">USER_GID=1000</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ROOT_URL=http://gitea:3000</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">SSH_DOMAIN=mydomain.com</span>
</span><span class='line'>    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">always</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./volumes/gitea_app:/data</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&quot;3000:3000&quot;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&quot;22:22&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">appnet</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">gitea-db</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">postgres:alpine</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">gitea-db</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">5440:5432</span>
</span><span class='line'>    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">always</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./volumes/gitea_db:/var/lib/postgresql/data</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">POSTGRES_USER=postgres</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">POSTGRES_PASSWORD=postgres</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">POSTGRES_DB=gitea</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">appnet</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">drone-server</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">drone/drone:0.8</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">drone-server</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">80:8000</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">9000</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./volumes/drone:/var/lib/drone/</span>
</span><span class='line'>    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">always</span>
</span><span class='line'>    <span class="l-Scalar-Plain">depends_on</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">gitea</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DRONE_OPEN=true</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DRONE_HOST=http://drone-server:8000</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DRONE_GITEA=true</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DRONE_GITEA_URL=http://gitea:3000</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DRONE_SECRET=secret</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DRONE_NETWORK=appnet</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">appnet</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">drone-agent</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">drone/agent:0.8</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">drone-agent</span>
</span><span class='line'>    <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">agent</span>
</span><span class='line'>    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">always</span>
</span><span class='line'>    <span class="l-Scalar-Plain">depends_on</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">drone-server</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/var/run/docker.sock:/var/run/docker.sock</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DRONE_SERVER=drone-server:9000</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DRONE_SECRET=secret</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">appnet</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gitea-app</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gitea-db</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">appnet</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">external</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the volumes path:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ mkdir volumes</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the external network:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker network create appnet</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some key configuration,</p>

<p>Our <code>SSH_DOMAIN</code> will be the domain that gets used for things like cloning a repository. When you register your gitea account, you will use the same credentials to logon to drone.</p>

<p>Deploy your stack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker-compose up -d</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Register on Gitea</h2>

<p>When your deployment is done, access your gitea server which should be available on <code>http://your-docker-ip:3000/</code> complete the registration, if you decide to go with postgres your username/password will be <code>postgres</code> and your host will be <code>gitea-db:5432</code>.</p>

<p>Make sure to complete the administrator account to get your admin credentials.</p>

<h2>Setup SSH Key and Repo</h2>

<p>Generate a ssh key that you will use for communicating to git over ssh. If you have already have an ssh key you can skip this step.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh-keygen -t rsa
</span><span class='line'><span class="c"># use the defaults</span>
</span></code></pre></td></tr></table></div></figure>


<p>Login on gitea, once you are logged in, head over to profile / settings / ssh keys: <code>http://your-docker-ip:3000/user/settings/keys</code>.</p>

<p>Add a new ssh key, go back to your terminal and copy the public key which we will provide to gitea:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat ~/.ssh/id_rsa.pub
</span><span class='line'>&lt;copy the contents to your clipboard&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Paste your public key and provide a descriptive title.</p>

<p>Head back to your dashboard and create your first repository:</p>

<p><img width="1277" alt="image" src="https://user-images.githubusercontent.com/567298/55589336-49388b80-5730-11e9-8ae5-2589fea7e2b2.png"></p>

<p>It should look more or less like this:</p>

<p><img width="1007" alt="image" src="https://user-images.githubusercontent.com/567298/55589473-9583cb80-5730-11e9-8124-3bdedc221a70.png"></p>

<h2>Enable Repo on Drone</h2>

<p>Head over to drone and select the repositores on the right hand side <a href="http://">http://</a><your-docker-ip>:80/account/repos and enable your repository by toggline the selector, it should look more or less like this:</p>

<p><img width="1275" alt="image" src="https://user-images.githubusercontent.com/567298/55589614-f3b0ae80-5730-11e9-9358-54a6be611198.png"></p>

<p>Once its enabled head back to gitea.</p>

<h2>Clone the repository</h2>

<p>On your repository select ssh and copy the ssh link for your repository:</p>

<p><img width="974" alt="image" src="https://user-images.githubusercontent.com/567298/55589710-3b373a80-5731-11e9-956b-c921c42e6a2d.png"></p>

<p>Then from your terminal add your private ssh key to your ssh agent and clone the repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">eval</span> <span class="k">$(</span>ssh-agent<span class="k">)</span>
</span><span class='line'><span class="nv">$ </span>ssh-add ~/.ssh/id_rsa
</span><span class='line'><span class="nv">$ </span>git clone git@your-docker-ip:your-user/your-repo.git
</span></code></pre></td></tr></table></div></figure>


<h2>Add Example Python Flask app to git</h2>

<p>I will use a basic python flask application with some tests.</p>

<p>Let&rsquo;s first add our pipeline definition for drone, so that drone understands how the pipeline should be run when gitea receives a commit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>touch .drone.yml
</span></code></pre></td></tr></table></div></figure>


<p>Our pipeline:</p>

<figure class='code'><figcaption><span>.drone.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">pipeline</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">build</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">python:3.5.1-alpine</span>
</span><span class='line'>    <span class="l-Scalar-Plain">commands</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">pip install --upgrade pip setuptools wheel</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">pip wheel -r requirements.txt --wheel-dir=wheeldir --find-links=wheeldir</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">pip install --no-index --find-links=wheeldir -r requirements.txt</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">flake8 app</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mkdir -p coverage</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">nosetests -v tests/</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lets add that to git:</p>

<figure class='code'><figcaption><span>.drone.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ git add .drone.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">$ git commit -m &quot;initial add of our pipeline&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">$ git push origin master</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our drone file should be in git, now our requirements dependency file for python:</p>

<figure class='code'><figcaption><span>requirements.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>flask
</span><span class='line'>nose
</span><span class='line'>flake8
</span></code></pre></td></tr></table></div></figure>


<p>Our blank file to make our application a module:</p>

<figure class='code'><figcaption><span>requirements.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir app
</span><span class='line'><span class="nv">$ </span>touch app/__init__.py
</span></code></pre></td></tr></table></div></figure>


<p>And our flask app:</p>

<figure class='code'><figcaption><span>app/app.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">hello</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Hello, World!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our tests directory and our python init file:</p>

<figure class='code'><figcaption><span>app/app.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">mkdir</span> <span class="n">tests</span>
</span><span class='line'><span class="err">$</span> <span class="n">touch</span> <span class="n">tests</span><span class="o">/</span><span class="n">__init__</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have all our files ready, commit and push to git:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;add python app&quot;</span>
</span><span class='line'><span class="nv">$ </span>git push origin master
</span></code></pre></td></tr></table></div></figure>


<h2>Look at Drone Running</h2>

<p>Head over to drone and look at the builds, you should see your build running at <code>http://&lt;docker-ip&gt;:80/&lt;user&gt;/&lt;repo-name&gt;</code>:</p>

<p><img width="1269" alt="image" src="https://user-images.githubusercontent.com/567298/55590369-f8766200-5732-11e9-82fb-2bda2c8ad40a.png"></p>

<p>If everything ran as expected you should see that it passed.</p>

<h2>Build Status Badges</h2>

<p>You can also include the build status badges from drone which will look like:</p>

<p><img width="1032" alt="image" src="https://user-images.githubusercontent.com/567298/55590552-82bec600-5733-11e9-91f2-a65c5a94fac5.png"></p>

<p>You can use the drone api: <code>http://drone-ip:80/api/badges/&lt;your-user&gt;/&lt;your-repo&gt;/status.svg</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>!<span class="o">[</span>Build Status<span class="o">](</span>http://your-ip/api/badges/your-user/your-repo/status.svg<span class="o">)</span>
</span><span class='line'><span class="o">[</span>!<span class="o">[](</span>https://images.microbadger.com/badges/image/gitea/gitea.svg<span class="o">)](</span>https://microbadger.com/images/gitea/gitea <span class="s2">&quot;Get your own image badge on microbadger.com&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">[</span>!<span class="o">[</span>GitHub release<span class="o">](</span>https://img.shields.io/github/release/go-gitea/gitea.svg<span class="o">)](</span>https://github.com/go-gitea/gitea/releases/latest<span class="o">)</span>
</span><span class='line'><span class="o">[</span>!<span class="o">[</span>Help Contribute to Open Source<span class="o">](</span>https://www.codetriage.com/go-gitea/gitea/badges/users.svg<span class="o">)](</span>https://www.codetriage.com/go-gitea/gitea<span class="o">)</span>
</span><span class='line'><span class="o">[</span>!<span class="o">[</span>Become a backer/sponsor of gitea<span class="o">](</span>https://opencollective.com/gitea/tiers/backer/badge.svg?label<span class="o">=</span>backer<span class="p">&amp;</span><span class="nv">color</span><span class="o">=</span>brightgreen<span class="o">)](</span>https://opencollective.com/gitea<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Overall gitea and drone is really amazing and quite impressed with it, especially from the low memory footprint and that its so easy to work with.</p>

<h2>Resources</h2>

<p>Have a look at this for more resources:</p>

<p><strong>Docs:</strong></p>

<ul>
<li><a href="https://github.com/drone/drone">https://github.com/drone/drone</a></li>
<li><a href="http://plugins.drone.io/drone-plugins/drone-docker/">http://plugins.drone.io/drone-plugins/drone-docker/</a></li>
<li><a href="https://docs.drone.io/reference/server/drone-user-create/">https://docs.drone.io/reference/server/drone-user-create/</a></li>
<li><a href="https://docs.gitea.io/en-us/install-with-docker/">https://docs.gitea.io/en-us/install-with-docker/</a></li>
</ul>


<p><strong>Examples:</strong></p>

<ul>
<li><a href="https://hackernoon.com/build-your-own-ci-cd-pipeline-with-drone-e43d7190989b">https://hackernoon.com/build-your-own-ci-cd-pipeline-with-drone-e43d7190989b</a></li>
<li><a href="https://github.com/drone-demos/drone-with-python">https://github.com/drone-demos/drone-with-python</a></li>
<li><a href="https://github.com/drone/awesome-drone">https://github.com/drone/awesome-drone</a></li>
<li><a href="https://github.com/juliantellez/drone-ci-pipeline">https://github.com/juliantellez/drone-ci-pipeline</a></li>
<li><a href="https://github.com/sguter90/docker-compose-gitea">https://github.com/sguter90/docker-compose-gitea</a></li>
<li><a href="https://gist.github.com/joffilyfe/1a99250cb74bb75e29cbe8d6ca8ceedb">https://gist.github.com/joffilyfe/1a99250cb74bb75e29cbe8d6ca8ceedb</a></li>
<li><a href="https://florian-latifi.at/2018/02/21/using-drone-to-build-and-deploy-a-jekyll-site/">https://florian-latifi.at/2018/02/21/using-drone-to-build-and-deploy-a-jekyll-site/</a></li>
<li><a href="https://angristan.xyz/host-your-own-ci-cd-server-with-drone/">https://angristan.xyz/host-your-own-ci-cd-server-with-drone/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Small Golang Docker Containers]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/03/build-small-golang-docker-containers/"/>
    <updated>2019-04-03T08:24:08-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/03/build-small-golang-docker-containers</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55478306-aabb0600-561b-11e9-9cc6-730fadb4beeb.png" alt="" /></p>

<p>In this tutorial I will show you how to build really small docker containers for golang applications. And I mean the difference between 310MB down to 2MB</p>

<h2>But Alpine..</h2>

<p>So we thinking lets go with alpine right? Yeah sure lets build a small, app running on go with alpine.</p>

<p>Our application code:</p>

<figure class='code'><figcaption><span>app.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;math/rand&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">lekkewords</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;dog&quot;</span><span class="p">,</span> <span class="s">&quot;cat&quot;</span><span class="p">,</span> <span class="s">&quot;fish&quot;</span><span class="p">,</span> <span class="s">&quot;giraffe&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;moo&quot;</span><span class="p">,</span> <span class="s">&quot;spider&quot;</span><span class="p">,</span> <span class="s">&quot;lion&quot;</span><span class="p">,</span> <span class="s">&quot;apple&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;tree&quot;</span><span class="p">,</span> <span class="s">&quot;moon&quot;</span><span class="p">,</span> <span class="s">&quot;snake&quot;</span><span class="p">,</span> <span class="s">&quot;mountain lion&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;trooper&quot;</span><span class="p">,</span> <span class="s">&quot;burger&quot;</span><span class="p">,</span> <span class="s">&quot;nasa&quot;</span><span class="p">,</span> <span class="s">&quot;yes&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">rand</span><span class="p">.</span><span class="nx">Seed</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">UnixNano</span><span class="p">())</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">zelength</span> <span class="kt">int</span> <span class="p">=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">lekkewords</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">indexnum</span> <span class="kt">int</span> <span class="p">=</span> <span class="nx">rand</span><span class="p">.</span><span class="nx">Intn</span><span class="p">(</span><span class="nx">zelength</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">word</span> <span class="o">:=</span> <span class="nx">lekkewords</span><span class="p">[</span><span class="nx">indexnum</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Number of words:&quot;</span><span class="p">,</span> <span class="nx">zelength</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Selected index number:&quot;</span><span class="p">,</span> <span class="nx">indexnum</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Selected word is:&quot;</span><span class="p">,</span> <span class="nx">word</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our Dockerfile:</p>

<figure class='code'><figcaption><span>Dockerfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='docker'><span class='line'><span class="k">FROM</span> golang:alpine
</span><span class='line'>
</span><span class='line'><span class="k">WORKDIR</span> <span class="nv">$GOPATH</span>/src/mylekkepackage/mylekkeapp/
</span><span class='line'>COPY app.go .
</span><span class='line'><span class="k">RUN</span> go build -o /go/app
</span><span class='line'>
</span><span class='line'><span class="k">CMD</span> <span class="o">[</span><span class="s2">&quot;/go/app&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s package our app to an image:</p>

<figure class='code'><figcaption><span>Dockerfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='docker'><span class='line'>❯ docker build -t mygolangapp:using-alpine .
</span></code></pre></td></tr></table></div></figure>


<p>Inspect the size of our image, as you can see it being <strong>310MB</strong></p>

<figure class='code'><figcaption><span>Dockerfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='docker'><span class='line'>❯ docker images <span class="s2">&quot;mygolangapp:*&quot;</span>
</span><span class='line'>REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE
</span><span class='line'>mygolangapp         using-alpine        eea1d7bde218        About a minute ago   310MB
</span></code></pre></td></tr></table></div></figure>


<p>Just make sure it actually works:</p>

<figure class='code'><figcaption><span>Dockerfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='docker'><span class='line'>❯ docker run mygolangapp:using-alpine
</span><span class='line'>Number of words: <span class="m">16</span>
</span><span class='line'>Selected index number: <span class="m">11</span>
</span><span class='line'>Selected word is: mountain lion
</span></code></pre></td></tr></table></div></figure>


<p>But for something just returning random selected text, 310MB is a bit crazy.</p>

<h2>Multi Stage Builds</h2>

<p>As Go binaries are self-contained, we can make use of docker&rsquo;s multi stage builds, where we can build our application on alpine and use the binary on a scratch image:</p>

<p>Our multi stage Dockerfile:</p>

<figure class='code'><figcaption><span>Dockerfile.mult</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='docker'><span class='line'><span class="k">FROM</span> golang:alpine AS builder
</span><span class='line'>
</span><span class='line'><span class="k">WORKDIR</span> <span class="nv">$GOPATH</span>/src/mylekkepackage/mylekkeapp/
</span><span class='line'>COPY app.go .
</span><span class='line'><span class="k">RUN</span> go build -o /go/app
</span><span class='line'>
</span><span class='line'><span class="k">FROM</span> scratch
</span><span class='line'>
</span><span class='line'>COPY --from<span class="o">=</span>builder /go/app /go/app
</span><span class='line'>
</span><span class='line'><span class="k">CMD</span> <span class="o">[</span><span class="s2">&quot;/go/app&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Build it:</p>

<figure class='code'><figcaption><span>Dockerfile.mult</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='docker'><span class='line'>❯ docker build -t mygolangapp:using-multistage -f Dockerfile.multi .
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the image is only <strong>2.01MB</strong>, say w000t!</p>

<figure class='code'><figcaption><span>Dockerfile.mult</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='docker'><span class='line'>❯ docker images <span class="s2">&quot;mygolangapp:*&quot;</span>
</span><span class='line'>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
</span><span class='line'>mygolangapp         using-multistage    31474c61ba5b        <span class="m">15</span> seconds ago      2.01MB
</span><span class='line'>mygolangapp         using-alpine        eea1d7bde218        <span class="m">2</span> minutes ago       310MB
</span></code></pre></td></tr></table></div></figure>


<p>Run the app:</p>

<figure class='code'><figcaption><span>Dockerfile.mult</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='docker'><span class='line'>❯ docker run mygolangapp:using-multistage
</span><span class='line'>Number of words: <span class="m">16</span>
</span><span class='line'>Selected index number: <span class="m">5</span>
</span><span class='line'>Selected word is: spider
</span></code></pre></td></tr></table></div></figure>


<h2>Resources</h2>

<p>Source code for this demonstration can be found at <a href="https://github.com/ruanbekker/golang-build-small-images">github.com/ruanbekker/golang-build-small-images</a></p>

<p><img src="https://user-images.githubusercontent.com/567298/55478904-236e9200-561d-11e9-9382-f31b25a9ae03.png" alt="" /></p>
]]></content>
  </entry>
  
</feed>
