<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2019-09-14T13:16:41+02:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running vs Code in Your Browser With Docker]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/09/14/running-vs-code-in-your-browser-with-docker/"/>
    <updated>2019-09-14T12:56:05+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/09/14/running-vs-code-in-your-browser-with-docker</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/64907374-cc9fd500-d6f1-11e9-87f0-3cae18f02c8d.png" alt="vscode" /></p>

<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <a href="https://github.com/bekkerstacks/traefik"><img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /></a></p>

<p><a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @ruanbekker</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>Today we will setup a Visual Studio Code instance running on Docker, so that you can access VSCode via the web browser.</p>

<h2>VSCode in Docker</h2>

<p>The work directory will be under <code>code</code> and the application will store its data under <code>data</code>. Lets go ahead and create them:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir demo/{code,data}
</span><span class='line'>cd demo</span></code></pre></td></tr></table></div></figure>


<p>Run the vscode container:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run --rm --name vscode \
</span><span class='line'>  -it -p 8443:8443 -p 8888:8888 \
</span><span class='line'>  -v $(pwd)/data:/data -v $(pwd)/code:/code \
</span><span class='line'>ruanbekker/vscode:python-3.7</span></code></pre></td></tr></table></div></figure>


<p>The password that you require on login will be prompted in the output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INFO  code-server v1.1156-vsc1.33.1
</span><span class='line'>INFO  Additional documentation: http://github.com/cdr/code-server
</span><span class='line'>INFO  Initializing {"data-dir":"/data","extensions-dir":"/data/extensions","working-dir":"/code","log-dir":"/root/.cache/code-server/logs/20190914105631217"}
</span><span class='line'>INFO  Starting shared process [1/5]...
</span><span class='line'>INFO  Starting webserver... {"host":"0.0.0.0","port":8443}
</span><span class='line'>INFO
</span><span class='line'>INFO  Password: 4b050c4fa0ef109d53c10d9f
</span><span class='line'>INFO
</span><span class='line'>INFO  Started (click the link below to open):
</span><span class='line'>INFO  https://localhost:8443/
</span><span class='line'>INFO  Connected to shared process</span></code></pre></td></tr></table></div></figure>


<p>Access vscode on <code>https://localhost:8443/</code> and after you accepted the self-signed certificate warning, you will be presented with the login page:</p>

<p><img width="775" alt="image" src="https://user-images.githubusercontent.com/567298/64907196-89dcfd80-d6ef-11e9-82ac-09196c926f82.png"></p>

<p>After you have logged a example of creating a python file will look like this:</p>

<p><img width="898" alt="image" src="https://user-images.githubusercontent.com/567298/64907240-02dc5500-d6f0-11e9-8443-cc1778b0de86.png"></p>

<p>The source code for this docker image can be found at <a href="https://github.com/ruanbekker/dockerfiles/tree/master/vscode">https://github.com/ruanbekker/dockerfiles/tree/master/vscode</a> .</p>

<h2>Different versions</h2>

<p>Currently I have only <a href="https://hub.docker.com/r/ruanbekker/vscode/tags">python available on docker hub</a> with the requests and flask packages available. But you can fork the repository and add the upstream or packages of your choice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expire Objects in AWS S3 Automatically After 30 Days]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/09/12/expire-objects-in-aws-s3-automatically-after-30-days/"/>
    <updated>2019-09-12T22:37:11+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/09/12/expire-objects-in-aws-s3-automatically-after-30-days</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/aws-logo.png" alt="" /></p>

<p>In AWS S3 you can make use of lifecycle policies to manage the lifetime of your objects stored in S3.</p>

<p>In this tutorial, I will show you how to delete objects automatically from S3 after 30 days.</p>

<h2>Navigate to your Bucket</h2>

<p>Head over to your AWS S3 bucket where you want to delete objects after they have been stored for 30 days:</p>

<p><img width="1039" alt="0400F9CB-9223-4FDF-8FA5-D0BC1FA8EB71" src="https://user-images.githubusercontent.com/567298/64819546-c3f2b600-d5ae-11e9-93ba-13777e9b02b0.png"></p>

<h2>Lifecycle Policies</h2>

<p>Select &ldquo;Management&rdquo; and click on &ldquo;Add lifecycle rule&rdquo;:</p>

<p><img width="701" alt="9BB26C7C-F251-45C4-AE44-A34459BD0F4B" src="https://user-images.githubusercontent.com/567298/64819628-f00e3700-d5ae-11e9-9740-8aa3608163a7.png"></p>

<p>Set a rule name of choice and you have the option to provide a prefix if you want to delete objects based on a specific prefix. I will leave this blank as I want to delete objects in the root level of the bucket. Head to next on the following section:</p>

<p><img width="700" alt="AEF8B151-3FA8-454F-AC71-778A531BD1EE" src="https://user-images.githubusercontent.com/567298/64819785-58f5af00-d5af-11e9-8485-fb0dca3a02ac.png"></p>

<p>From the &ldquo;Transitions&rdquo; section, configure the transition section, by selecting to expire the current version of the object after 30 days:</p>

<p><img width="701" alt="2B395671-A4C0-4E5A-82E7-00EE6579DB5A" src="https://user-images.githubusercontent.com/567298/64819851-7c205e80-d5af-11e9-98d7-7e1dd09bcfef.png"></p>

<p>Review the configuration:</p>

<p><img width="705" alt="F7F8E800-62FF-4156-B506-5FB9BCC148E0" src="https://user-images.githubusercontent.com/567298/64819869-893d4d80-d5af-11e9-8034-8a2e3a8939f8.png"></p>

<p>When you select &ldquo;Save&rdquo;, you should be returned to the following section:</p>

<p><img width="1041" alt="8421EBCE-9503-4259-92AA-DB66C6F532AF" src="https://user-images.githubusercontent.com/567298/64819895-99edc380-d5af-11e9-84b4-7f4cc69cfd2e.png"></p>

<h2>Housecleaning on your S3 Bucket</h2>

<p>Now 30 days after you created objects on AWS S3, they will be deleted.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reindex Elasticsearch Indices With Logstash]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/09/08/reindex-elasticsearch-indices-with-logstash/"/>
    <updated>2019-09-08T13:00:59+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/09/08/reindex-elasticsearch-indices-with-logstash</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/59209960-ca872100-8bac-11e9-8672-8c6af502afe0.png" alt="logstash" /></p>

<p>In this tutorial I will show you how to reindex daily indices to a monthly index on Elasticsearch using Logstash</p>

<h2>Use Case</h2>

<p>In this scenario we have filebeat indices which have a low document count and would like to aggregate the daily indices into a bigger index, which will be a monthly index. So reindexing from <code>"filebeat-2019.08.*"</code> to <code>"filebeat-monthly-2019.08"</code>.</p>

<h2>Overview of our Setup</h2>

<p>Here we can see all the indices that we would like to read from"</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl 10.37.117.130:9200/_cat/indices/filebeat-2019.08.*?v
</span><span class='line'>health status index               uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>green  open   filebeat-2019.08.28 qoKiHUjQT5eNVF_wjLi9fA   5   1         17            0    295.4kb        147.7kb
</span><span class='line'>green  open   filebeat-2019.08.27 8PWngqFdRPKLEnrCCiw6xA   5   1        301            0    900.9kb          424kb
</span><span class='line'>green  open   filebeat-2019.08.29 PiG2ma8zSbSt6sSg7soYPA   5   1         24            0    400.2kb          196kb
</span><span class='line'>green  open   filebeat-2019.08.31 XSWZvqQDR0CugD23y6_iaA   5   1         27            0    451.5kb        222.1kb
</span><span class='line'>green  open   filebeat-2019.08.30 u_Hr9fA5RtOtpabNGUmSpw   5   1         18            0    326.1kb          163kb</span></code></pre></td></tr></table></div></figure>


<p>I have 3 nodes in my elasticsearch cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl 10.37.117.130:9200/_cat/nodes?v
</span><span class='line'>ip            heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name
</span><span class='line'>10.37.117.132           56          56   5    0.47    0.87     1.10 mdi       -      elasticsearch-01
</span><span class='line'>10.37.117.130           73          56   4    0.47    0.87     1.10 mdi       -      elasticsearch-03
</span><span class='line'>10.37.117.199           29          56   4    0.47    0.87     1.10 mdi       *      elasticsearch-02</span></code></pre></td></tr></table></div></figure>


<p>As elasticsearch create 5 primary shards by default, I want to override this behavior to creating 3 primary shards. I will be using a template, so whenever a index get created with the index pattern `&ldquo;<em>-monthly-</em>&rdquo;, it will apply the settings to create 3 primary shards and 1 replica shards:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H 'Content-Type: application/json' -XPUT 10.37.117.130:9200/_template/monthly -d '
</span><span class='line'>{"index_patterns": ["*-monthly-*"], "order": -1, "settings": {"number_of_shards": "3", "number_of_replicas": "1"}}
</span><span class='line'>'</span></code></pre></td></tr></table></div></figure>


<h2>Logstash Configuration</h2>

<p>Our logstash configuration which we will use, will read from elasticsearch and the index pattern which we want to read from. Then our ouput configuration instructs where to write the data to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /tmp/logstash/logstash.conf
</span><span class='line'>input {
</span><span class='line'>  elasticsearch {
</span><span class='line'>    hosts =&gt; [ "http://10.37.117.132:9200" ]
</span><span class='line'>    index =&gt; "filebeat-2019.08.*"
</span><span class='line'>    size =&gt; 500
</span><span class='line'>    scroll =&gt; "5m"
</span><span class='line'>    docinfo =&gt; true
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>output {
</span><span class='line'>  elasticsearch {
</span><span class='line'>    hosts =&gt; ["http://10.37.117.199:9200"]
</span><span class='line'>    index =&gt; "filebeat-monthly-2019.08"
</span><span class='line'>    document_id =&gt; "%{[@metadata][_id]}"
</span><span class='line'>  }
</span><span class='line'>  stdout {
</span><span class='line'>    codec =&gt; "dots"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Reindex the Data</h2>

<p>I will be using docker to run logstash, and map the configuration to the configuration directory inside the container:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo docker run --rm -it -v /tmp/logstash:/usr/share/logstash/pipeline docker.elastic.co/logstash/logstash-oss:6.2.4
</span><span class='line'>[2019-09-08T10:57:36,170][INFO ][logstash.pipeline        ] Pipeline started successfully {:pipeline_id=&gt;"main", :thread=&gt;"#&lt;Thread:0x7db57d5f run&gt;"}
</span><span class='line'>[2019-09-08T10:57:36,325][INFO ][logstash.agent           ] Pipelines running {:count=&gt;1, :pipelines=&gt;["main"]}
</span><span class='line'>...
</span><span class='line'>[2019-09-08T10:57:39,359][INFO ][logstash.pipeline        ] Pipeline has terminated {:pipeline_id=&gt;"main", :thread=&gt;"#&lt;Thread:0x7db57d5f run&gt;"}</span></code></pre></td></tr></table></div></figure>


<p>Review that the data was reindexed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl 10.37.117.130:9200/_cat/indices/*filebeat-*08*?v
</span><span class='line'>health status index                    uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>green  open   filebeat-2019.08.28      qoKiHUjQT5eNVF_wjLi9fA   5   1         17            0    295.4kb        147.7kb
</span><span class='line'>green  open   filebeat-2019.08.29      PiG2ma8zSbSt6sSg7soYPA   5   1         24            0    400.2kb          196kb
</span><span class='line'>green  open   filebeat-2019.08.30      u_Hr9fA5RtOtpabNGUmSpw   5   1         18            0    326.1kb          163kb
</span><span class='line'>green  open   filebeat-2019.08.27      8PWngqFdRPKLEnrCCiw6xA   5   1        301            0    900.9kb          424kb
</span><span class='line'>green  open   filebeat-2019.08.31      XSWZvqQDR0CugD23y6_iaA   5   1         27            0    451.5kb        222.1kb
</span><span class='line'>green  open   filebeat-monthly-2019.08 VZD8iDjfTfeyP-SWB9l2Pg   3   1        387            0    577.8kb        274.7kb</span></code></pre></td></tr></table></div></figure>


<p>Once we are happy with what we are seeing, we can delete the source data:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XDELETE "10.37.117.130:9200/filebeat-2019.08.*"
</span><span class='line'>{"acknowledged":true}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy a Monitoring Stack on Docker Swarm With Grafana and Prometheus]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/09/05/deploy-a-monitoring-stack-on-docker-swarm-with-grafana-and-prometheus/"/>
    <updated>2019-09-05T00:07:52+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/09/05/deploy-a-monitoring-stack-on-docker-swarm-with-grafana-and-prometheus</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57307750-696bb980-70e5-11e9-9b0b-73ad88bde6a3.png" alt="" /></p>

<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <a href="https://github.com/bekkerstacks/traefik"><img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /></a></p>

<p><a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @ruanbekker</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>In this tutorial we will deploy a monitoring stack to docker swarm, that includes Grafana, Prometheus, Node-Exporter, cAdvisor and Alertmanager.</p>

<p>If you are looking for more information on Prometheus, have a look at my other <a href="https://blog.ruanbekker.com/blog/categories/prometheus/">Prometheus and Monitoring</a> blog posts.</p>

<h2>What you will get out of this</h2>

<p>Once you deployed the stacks, you will have the following:</p>

<ul>
<li>Access Grafana through Traefik reverse proxy</li>
<li>Node-Exporter to expose node level metrics</li>
<li>cAdvisor to expose container level metrics</li>
<li>Prometheus to scrape the exposed entpoints and ingest it into Prometheus</li>
<li>Prometheus for your Timeseries Database</li>
<li>Alertmanager for firing alerts on configured rules</li>
</ul>


<p>The compose file that I will provide will have pre-populated dashboards</p>

<h2>Deploy Traefik</h2>

<p>Get the traefik stack sources:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/bekkerstacks/traefik
</span><span class='line'>$ pushd traefik</span></code></pre></td></tr></table></div></figure>


<p>Have a look at <a href="https://github.com/bekkerstacks/traefik/wiki/Deploy-Traefik-in-HTTPS-Mode">HTTPS Mode</a> if you want to deploy traefik on HTTPS, as I will use HTTP in this demonstration.</p>

<p>Set your domain and deploy the stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ DOMAIN=localhost PROTOCOL=http bash deploy.sh
</span><span class='line'>
</span><span class='line'>Username for Traefik UI: demo
</span><span class='line'>Password for Traefik UI: 
</span><span class='line'>deploying traefik stack in http mode
</span><span class='line'>Creating network public
</span><span class='line'>Creating config proxy_traefik_htpasswd
</span><span class='line'>Creating service proxy_traefik
</span><span class='line'>Traefik UI is available at:
</span><span class='line'>- http://traefik.localhost</span></code></pre></td></tr></table></div></figure>


<p>Your traefik service should be running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker service ls
</span><span class='line'>ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
</span><span class='line'>0wga71zbx1pe        proxy_traefik       replicated          1/1                 traefik:1.7.14      *:80-&gt;80/tcp</span></code></pre></td></tr></table></div></figure>


<p>Switch back to the previous directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ popd</span></code></pre></td></tr></table></div></figure>


<h2>Deploy the Monitoring Stack</h2>

<p>Get the sources:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/bekkerstacks/monitoring-cpang
</span><span class='line'>$ pushd monitoring-cpang</span></code></pre></td></tr></table></div></figure>


<p>If you want to deploy the stack with no pre-configured dashboards, you would need to use <code>./docker-compose.html</code>, but in this case we will deploy the stack with pre-configured dashboards.</p>

<p>Set the domain and deploy the stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker stack deploy -c alt_versions/docker-compose_http_with_dashboards.yml mon
</span><span class='line'>
</span><span class='line'>Creating network private
</span><span class='line'>Creating config mon_grafana_config_datasource
</span><span class='line'>Creating config mon_grafana_dashboard_prometheus
</span><span class='line'>Creating config mon_grafana_dashboard_docker
</span><span class='line'>Creating config mon_grafana_dashboard_nodes
</span><span class='line'>Creating config mon_grafana_dashboard_blackbox
</span><span class='line'>Creating config mon_alertmanager_config
</span><span class='line'>Creating config mon_prometheus_config
</span><span class='line'>Creating config mon_prometheus_rules
</span><span class='line'>Creating service mon_blackbox-exporter
</span><span class='line'>Creating service mon_alertmanager
</span><span class='line'>Creating service mon_prometheus
</span><span class='line'>Creating service mon_grafana
</span><span class='line'>Creating service mon_cadvisor
</span><span class='line'>Creating service mon_node-exporter</span></code></pre></td></tr></table></div></figure>


<p>The endpoints is configured as <code>${service_name}.${DOMAIN}</code> so you will be able to access grafana on <code>http://grafana.localhost</code> as showed in my use-case.</p>

<p>Use <code>docker stack services mon</code> to see if all the tasks has checked into its desired count then access grafana on <code>http://grafana.${DOMAIN}</code></p>

<h2>Accessing Grafana</h2>

<p>Access Grafana on <code>http://grafana.${DOMAIN}</code> and logon with the user admin and the password admin:</p>

<p><img src="https://user-images.githubusercontent.com/50801771/64292266-4d303a00-cf6a-11e9-8a49-2ae05b1ed5c6.png" alt="image" /></p>

<p>You will be asked to reset the password:</p>

<p><img src="https://user-images.githubusercontent.com/50801771/64292291-5f11dd00-cf6a-11e9-8049-2abdbb0164f6.png" alt="image" /></p>

<p>You will then be directed to the ui:</p>

<p><img src="https://user-images.githubusercontent.com/50801771/64292317-705ae980-cf6a-11e9-928b-60b5dec7ea09.png" alt="image" /></p>

<p>From the top, when you list dashboards, you will see the 3 dashboards that was pre-configured:</p>

<p><img src="https://user-images.githubusercontent.com/50801771/64292334-7b157e80-cf6a-11e9-92c6-9e0698815ba7.png" alt="image" /></p>

<p>When looking at the Swarm Nodes Dashboard:</p>

<p><img src="https://user-images.githubusercontent.com/50801771/64297086-82da2080-cf74-11e9-8060-f0193bfaeb13.png" alt="image" /></p>

<p>The Swarm Services Dashboard:</p>

<p><img src="https://user-images.githubusercontent.com/50801771/64297656-a8ffc080-cf74-11e9-88a2-b4cec295aed5.png" alt="image" /></p>

<h2>Exploring Metrics in Prometheus</h2>

<p>Access prometheus on <code>http://prometheus.${DOMAIN}</code> and from the search input, you can start exploring though all the metrics that is available in prometheus:</p>

<p><img src="https://user-images.githubusercontent.com/50801771/64298324-74403900-cf75-11e9-99b7-559b02ef67b7.png" alt="image" /></p>

<p>If we search for <code>node_load15</code> and select graph, we can have a quick look on how the 15 minute load average looks like for the node where the stack is running on:</p>

<p><img src="https://user-images.githubusercontent.com/50801771/64298454-e31d9200-cf75-11e9-89bb-b6fe94470166.png" alt="image" /></p>

<p>Having a look at the alerts section:</p>

<p><img src="https://user-images.githubusercontent.com/50801771/64299172-7657c700-cf78-11e9-97bd-143e5fe87941.png" alt="image" /></p>

<h2>Resources</h2>

<p>For more information and configuration on the stack that we use, have a look at the wiki:
- <a href="https://github.com/bekkerstacks/monitoring-cpang/wiki">https://github.com/bekkerstacks/monitoring-cpang/wiki</a></p>

<p>The github repository:
- <a href="https://github.com/bekkerstacks/monitoring-cpang">https://github.com/bekkerstacks/monitoring-cpang</a></p>

<h2>Thank You</h2>

<p>Let me know what you think. If you liked my content, feel free to checkout my content on <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<p><a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @ruanbekker</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Traefik Using Bekker Stacks]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/09/04/deploy-traefik-using-bekker-stacks/"/>
    <updated>2019-09-04T21:46:35+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/09/04/deploy-traefik-using-bekker-stacks</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/50801771/64287218-67b0e600-cf5f-11e9-8fe7-f36cb8e71f6f.png" alt="image" /></p>

<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <a href="https://github.com/bekkerstacks/traefik"><img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /></a></p>

<p><a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @ruanbekker</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>After a year or two spending quite a lot of time into docker and more specifically docker swarm, I found it quite tedious to write up docker-compose files for specific stacks that you are working on. I also felt the need for a docker swarm compose package manager.</p>

<p>Fair enough, you store them on a central repository and then you can reuse them as you go, and that is exactly what I did, but I felt that perhaps other people have the same problem.</p>

<h2>The Main Idea</h2>

<p>So the main idea is to have a central repository with docker swarm stacks, that you can pick and choose what you want, pull down the repository and use environment variables to override the default configuration and use the deploy script to deploy the stack that you want.</p>

<h2>Future Ideas</h2>

<p>In the future I would like to create a cli tool that you can use to list stacks, as example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bstacks list
</span><span class='line'>traefik
</span><span class='line'>monitoring-cpang (cAdvisor, Prometheus, Alertmanager, Node-Exporter, Grafana)
</span><span class='line'>monitoring-tig   (Telegraf, InfluxDB, Grafana)
</span><span class='line'>logging-efk      (Elasticsearch, Filebeat, Kibana)
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Listing stacks by category:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bstacks list --category logging
</span><span class='line'>logging-efk
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Deploying a stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bstacks deploy --stack traefik --stack-name proxy --env-file ./stack.env
</span><span class='line'>Username for Traefik UI: ruan
</span><span class='line'>Password for Traefik UI: deploying traefik stack in http mode
</span><span class='line'>Creating network public
</span><span class='line'>Creating config proxy_traefik_htpasswd
</span><span class='line'>Creating service proxy_traefik
</span><span class='line'>Traefik UI is available at:
</span><span class='line'>- http://traefik.localhost</span></code></pre></td></tr></table></div></figure>


<p>At the time of writing the cli tool is not available yet, but the list of available templated docker stack repositories are availabe at <a href="https://github.com/bekkerstacks?tab=repositories">github.com/bekkerstacks</a></p>

<h2>What are we doing today</h2>

<p>In this tutorial we will deploy a <a href="https://github.com/bekkerstacks/traefik">Traefik</a> proxy on Docker Swarm. I will be demonstrating the deployment on my Mac, and currently I have only docker installed, without a swarm being initialized.</p>

<p>If you already have a swarm initialized and running this on servers, you can skip the local dev section.</p>

<h2>Local Dev</h2>

<p>We will be initializing a 3 node docker swarm on a mac using docker-in-docker. Get the repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/bekkerstacks/docker-swarm</span></code></pre></td></tr></table></div></figure>


<p>Switch to the directory and deploy the swarm:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bash deploy.sh
</span><span class='line'>
</span><span class='line'>ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
</span><span class='line'>lkyjkvuc5uobzgps4m7e98l0u *   docker-desktop      Ready               Active              Leader              19.03.1
</span><span class='line'>6djgz804emj89rs8icd53wfgn     worker-1            Ready               Active                                  18.06.3-ce
</span><span class='line'>gcz6ou0s5p8kxve63ihnky7ai     worker-2            Ready               Active                                  18.06.3-ce
</span><span class='line'>ll8zfvuaek8q4x9nlijib0dfa     worker-3            Ready               Active                                  18.06.3-ce</span></code></pre></td></tr></table></div></figure>


<p>As you can see we have a 4 node docker swarm running on our local dev environment to continue.</p>

<h2>Deploy Traefik</h2>

<p>To deploy traefik in HTTPS mode, we need to set 3 environment variables: <code>EMAIL</code>, <code>DOMAIN</code>, <code>PROTOCOL</code>. We also need to setup our DNS to direct traefik to our swarm. In my case I will be using <code>1.2.3.4</code> as the IP of my Manager node and using the domain <code>mydomain.com</code></p>

<p>The DNS setup will look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A Record: mydomain.com -&gt; 1.1.1.1
</span><span class='line'>A Record: *.mydomain.com -&gt; 1.1.1.1</span></code></pre></td></tr></table></div></figure>


<p>And if you are using this locally, you can setup your <code>/etc/hosts</code> to <code>127.0.0.1 traefik.mydomain.com</code></p>

<p>Clone the repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/bekkerstacks/traefik</span></code></pre></td></tr></table></div></figure>


<p>Change the the repository and deploy the stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ EMAIL=me@mydomain.com DOMAIN=mydomain.com PROTOCOL=https bash deploy.sh
</span><span class='line'>Username for Traefik UI: ruan
</span><span class='line'>Password for Traefik UI: deploying traefik stack in https mode
</span><span class='line'>Creating network public
</span><span class='line'>Creating config proxy_traefik_htpasswd
</span><span class='line'>Creating service proxy_traefik
</span><span class='line'>Traefik UI is available at:
</span><span class='line'>- https://traefik.mydomain.com</span></code></pre></td></tr></table></div></figure>


<p>Verify that the Traefik service is running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker service ls
</span><span class='line'>ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
</span><span class='line'>0wga71zbx1pe        proxy_traefik       replicated          1/1                 traefik:1.7.14      *:80-&gt;80/tcp</span></code></pre></td></tr></table></div></figure>


<p>Navigating to the Traefik Dashboard, after providing your username and password, you should see the Traefik UI:</p>

<p><img src="https://user-images.githubusercontent.com/50801771/64284457-eefb5b00-cf59-11e9-90cb-eeb2b417c80c.png" alt="" /></p>

<p>Note: I don&rsquo;t own mydomain.com therefore I am using the traefik default cert, that will be why it&rsquo;s showing not secure.</p>

<h2>Deploy Traefik in HTTP Mode</h2>

<p>If you want to deploy Traefik in HTTP mode rather, you would use:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ DOMAIN=localhost PROTOCOL=http bash deploy.sh
</span><span class='line'>Username for Traefik UI: ruan
</span><span class='line'>Password for Traefik UI: deploying traefik stack in http mode
</span><span class='line'>Creating network public
</span><span class='line'>Creating config proxy_traefik_htpasswd
</span><span class='line'>Creating service proxy_traefik
</span><span class='line'>Traefik UI is available at:
</span><span class='line'>- http://traefik.localhost</span></code></pre></td></tr></table></div></figure>


<p>Navigating to the Traefik Dashboard, after providing your username and password, you should see the Traefik UI:</p>

<p><img src="https://user-images.githubusercontent.com/50801771/64283759-56b0a680-cf58-11e9-9f85-6721ab3b1500.png" alt="" /></p>

<h2>More Info</h2>

<p>In future posts, I will demonstrate how to deploy other stacks using bekkerstacks.</p>

<p>Have a look at the repositories on github for more info:</p>

<ul>
<li><a href="https://github.com/bekkerstacks">https://github.com/bekkerstacks</a></li>
<li><a href="https://github.com/bekkerstacks/docker-swarm">https://github.com/bekkerstacks/docker-swarm</a></li>
<li><a href="https://github.com/bekkerstacks/traefik">https://github.com/bekkerstacks/traefik</a></li>
</ul>


<h2>Thank You</h2>

<p>Let me know what you think. If you liked my content, feel free to checkout my content on <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<p><a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @ruanbekker</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS S3 KMS and Python for Secrets Management]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/09/04/aws-s3-kms-and-python-for-secrets-management/"/>
    <updated>2019-09-04T19:58:45+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/09/04/aws-s3-kms-and-python-for-secrets-management</id>
    <content type="html"><![CDATA[<p><img src="https://miro.medium.com/max/2400/1*9PSzVZDHjr321CpxJHcxPQ.png" alt="" /></p>

<p>So your application need to store secrets and you are looking for a home for them. In this tutorial we will see how we can use Python, S3 and KMS to build our own solution for managing secrets.</p>

<p>There is SSM and Secrets Manager that probably does a better job, but my mind got curious :D</p>

<h2>High Level Goal</h2>

<p>From a High-Level we want to store secrets encrypted on S3 with KMS, namespaced with <strong>team/application/environment/value</strong> in json format so that our application receives the json dictionary of configured key/value pairs.</p>

<p>We can leverage <strong>IAM</strong> to delegate permissions on the namespacing that we decide on, for my example the namespace will look like this on S3:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>s3://s3bucket/secrets/engineering/app1/production/appconfig.json</span></code></pre></td></tr></table></div></figure>


<p>We will apply <strong>IAM</strong> permissions for our user to only <strong>Put</strong> and <strong>Get</strong> on <code>secrets/engineering*</code>. So with this idea we can apply IAM permissions on groups for different departments, or even let users manage their own secrets such as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>s3://s3bucket/secrets/personal/user.name/app/appconfig.json</span></code></pre></td></tr></table></div></figure>


<p>After the object has been downloaded from S3 and decrypted using KMS, the value of the object will look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{u'surname': u'bekker', u'name': u'ruan', u'job_title': u'systems-development-engineer'}</span></code></pre></td></tr></table></div></figure>


<h2>Requirements</h2>

<p>We will create the following resources on AWS:</p>

<ul>
<li>KMS Key</li>
<li>S3 Bucket</li>
<li>IAM User</li>
<li>IAM Policy</li>
<li>Python Dependencies: Boto3</li>
</ul>


<h2>Provision AWS Resources</h2>

<p><img src="https://miro.medium.com/max/2728/1*Lq9xaUXuNo2Nb8kQakYdsg.png" alt="" /></p>

<p>First we will create our <strong>S3 Bucket</strong>,  head over to <a href="https://s3.console.aws.amazon.com/s3/home?region=eu-west-1">Amazon S3</a> create a new s3 bucket, make sure that the bucket is <strong>NOT</strong> public, by using the default configuration, you should be good.</p>

<p>Once your S3 Bucket is provisioned, head over to <a href="https://console.aws.amazon.com/iam/home#/users">Amazon IAM</a> and create a IAM User, enable programmatic access, and keep your access key and secret key safe. For now we will not apply any permissions as we will come back to this step.</p>

<p>Head over to <a href="https://eu-west-1.console.aws.amazon.com/kms/home?region=eu-west-1#/kms/home">Amazon KMS</a> and create a KMS Key, we will define the <strong>key administrator</strong>, which will be my user (ruan.bekker in this case) with more privileged permissions:</p>

<p><img src="https://miro.medium.com/max/5120/1*EUPWbCQ8nsfbBWHQI6srYw.png" alt="" /></p>

<p>and then we will define the <strong>key usage permissions</strong> (app.user in this case), which will be the user that we provisioned from the previous step, this will be the user that will encrypt and decrypt the data:</p>

<p><img src="https://miro.medium.com/max/5120/1*5xA5H0qpJ1FYTG1hUjy_Tw.png" alt="" /></p>

<p>Next, review the policy generated from the previous selected sections:</p>

<p><img src="https://miro.medium.com/max/5120/1*bLDVPFaZUDQ4EyWjACYRUw.png" alt="" /></p>

<p>Once you select finish, you will be returned to the section where your KMS Key information will be displayed, keep note of your <strong>KMS Key Alias</strong>, as we will need it later:</p>

<p><img src="https://miro.medium.com/max/5120/1*aooUMS0OyEd5hopnOUrcmA.png" alt="" /></p>

<h2>Create a IAM Policy for our App User</h2>

<p>Next we will create the IAM Policy for the user that will encrypt/decrypt and store data in S3</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;S3PutAndGetAccess&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;s3:PutObject&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;s3:GetObject&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="s2">&quot;arn:aws:s3:::arn:aws:s3:::s3-bucket-name/secrets/engineering*&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;KMSDecryptAndEncryptAccess&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;kms:Decrypt&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;kms:Encrypt&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="s2">&quot;arn:aws:kms:eu-west-1:123456789012:key/xxxx-xxxx-xxxx-xxxx-xxxx&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After the policy has been saved, associate the policy to the IAM User</p>

<h2>Encrypt and Put to S3</h2>

<p>Now we will use Python to define the data that we want to <strong>store in S3</strong>, we will then <strong>encrypt</strong> the data with <strong>KMS</strong>, use base64 to <strong>encode</strong> the ciphertext and push the encrypted value to <strong>S3</strong>, with Server Side Encryption enabled, which we will also use our KMS key.</p>

<p>Install boto3 in Python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pip install boto3
</span></code></pre></td></tr></table></div></figure>


<p>Enter the Python REPL and import the required packages, we will also save the access key and secret key as variables so that we can use it with boto3. You can also save it to the <a href="https://boto3.amazonaws.com/v1/documentation/api/latest/guide/configuration.html">credential provider</a> and utilise the profile name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">base64</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">aws_access_key_id</span><span class="o">=</span><span class="s">&#39;redacted&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="s">&#39;redacted&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next define the data that we want to <strong>encrypt and store</strong> in S3:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">mydata</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="s">&quot;ruan&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;surname&quot;</span><span class="p">:</span> <span class="s">&quot;bekker&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;job_title&quot;</span><span class="p">:</span> <span class="s">&quot;systems-development-engineer&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we will use KMS to encrypt the data and use base64 to encode the ciphertext:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">kms</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span>
</span><span class='line'>    <span class="n">aws_access_key_id</span><span class="o">=</span><span class="n">aws_access_key_id</span><span class="p">,</span>
</span><span class='line'>    <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="n">aws_secret_access_key</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s">&#39;kms&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">ciphertext</span> <span class="o">=</span> <span class="n">kms</span><span class="o">.</span><span class="n">encrypt</span><span class="p">(</span>
</span><span class='line'>    <span class="n">KeyId</span><span class="o">=</span><span class="s">&#39;alias/secrets-key&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Plaintext</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">mydata</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">encoded_ciphertext</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">[</span><span class="s">&quot;CiphertextBlob&quot;</span><span class="p">])</span>
</span><span class='line'><span class="c"># preview the data</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">encoded_ciphertext</span>
</span><span class='line'><span class="s">&#39;AQICAHiKOz...42720nCleoI26UW7P89lPdwvV8Q==&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we will use S3 to push the encrypted data onto S3 in our name spaced key: <strong>secrets/engineering/app1/production/appconfig.json</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s3</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span>
</span><span class='line'>    <span class="n">aws_access_key_id</span><span class="o">=</span><span class="n">aws_access_key_id</span><span class="p">,</span>
</span><span class='line'>    <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="n">aws_secret_access_key</span><span class="p">,</span>
</span><span class='line'>    <span class="n">region_name</span><span class="o">=</span><span class="s">&#39;eu-west-1&#39;</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s">&#39;s3&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="n">s3</span><span class="o">.</span><span class="n">put_object</span><span class="p">(</span>
</span><span class='line'>    <span class="n">Body</span><span class="o">=</span><span class="n">encoded_ciphertext</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Bucket</span><span class="o">=</span><span class="s">&#39;ruan-secret-store&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Key</span><span class="o">=</span><span class="s">&#39;secrets/engineering/app1/production/appconfig.json&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ServerSideEncryption</span><span class="o">=</span><span class="s">&#39;aws:kms&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">SSEKMSKeyId</span><span class="o">=</span><span class="s">&#39;alias/secrets-key&#39;</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now our object is stored in S3, encrypted with KMS and ServerSideEncryption Enabled.</p>

<p>You can try to download the object and decode the base64 encoded file and you will find that its complete garbage as its encrypted.</p>

<p>Next we will use S3 to Get the object and use KMS to decrypt and use base64 to decode after the object has been decrypted:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="n">s3</span><span class="o">.</span><span class="n">get_object</span><span class="p">(</span>
</span><span class='line'>    <span class="n">Bucket</span><span class="o">=</span><span class="s">&#39;ruan-secret-store&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Key</span><span class="o">=</span><span class="s">&#39;secrets/engineering/app1/production/appconfig.json&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">encoded_ciphertext</span> <span class="o">=</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;Body&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">encoded_ciphertext</span>
</span><span class='line'><span class="s">&#39;AQICAHiKOz...42720nCleoI26UW7P89lPdwvV8Q==&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let’s decode the result with base64:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">decoded_ciphertext</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">encoded_ciphertext</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">plaintext</span> <span class="o">=</span> <span class="n">kms</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">CiphertextBlob</span><span class="o">=</span><span class="nb">bytes</span><span class="p">(</span><span class="n">decoded_ciphertext</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to deserialize the JSON as it’s in string format:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">plaintext</span><span class="p">[</span><span class="s">&quot;Plaintext&quot;</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;surname&#39;</span><span class="p">:</span> <span class="s">u&#39;bekker&#39;</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;ruan&#39;</span><span class="p">,</span> <span class="s">u&#39;job_title&#39;</span><span class="p">:</span> <span class="s">u&#39;systems-development-engineer&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Using it in a Application</h2>

<p>Let’s say you are using <strong>Docker</strong> and you want to bootstrap your application configs to your environment that you are retrieving from S3.</p>

<p>We will use a <code>get_secrets.py</code> python script that will read the data into memory, decrypt and write the values in plaintext to disk, then we will use the <code>boot.sh</code> script to read the values into the environment and remove the temp file that was written to disk, then start the application since we have the values stored in our environment.</p>

<p>Our <strong>&ldquo;application&rdquo;</strong> in this example will just be a line of echo to return the values for demonstration.</p>

<p>The <code>get_secrets.py</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">base64</span>
</span><span class='line'>
</span><span class='line'><span class="n">aws_access_key_id</span><span class="o">=</span><span class="s">&#39;redacted&#39;</span>
</span><span class='line'><span class="n">aws_secret_access_key</span><span class="o">=</span><span class="s">&#39;redacted&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">kms</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">aws_access_key_id</span><span class="o">=</span><span class="n">aws_access_key_id</span><span class="p">,</span> <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="n">aws_secret_access_key</span><span class="p">)</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s">&#39;kms&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">s3</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">aws_access_key_id</span><span class="o">=</span><span class="n">aws_access_key_id</span><span class="p">,</span> <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="n">aws_secret_access_key</span><span class="p">,</span> <span class="n">region_name</span><span class="o">=</span><span class="s">&#39;eu-west-1&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s">&#39;s3&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="n">s3</span><span class="o">.</span><span class="n">get_object</span><span class="p">(</span><span class="n">Bucket</span><span class="o">=</span><span class="s">&#39;ruan-secret-store&#39;</span><span class="p">,</span> <span class="n">Key</span><span class="o">=</span><span class="s">&#39;secrets/engineering/app1/production/appconfig.json&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">encoded_ciphertext</span> <span class="o">=</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;Body&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">decoded_ciphertext</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">encoded_ciphertext</span><span class="p">)</span>
</span><span class='line'><span class="n">plaintext</span> <span class="o">=</span> <span class="n">kms</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">CiphertextBlob</span><span class="o">=</span><span class="nb">bytes</span><span class="p">(</span><span class="n">decoded_ciphertext</span><span class="p">))</span>
</span><span class='line'><span class="n">values</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">plaintext</span><span class="p">[</span><span class="s">&quot;Plaintext&quot;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;envs.tmp&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">values</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;{}={}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">key</span><span class="o">.</span><span class="n">upper</span><span class="p">(),</span> <span class="n">values</span><span class="p">[</span><span class="n">key</span><span class="p">])</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And our <code>boot.sh</code> script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'><span class="nb">source</span> ./envs.tmp
</span><span class='line'>rm -rf ./envs.tmp
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Hello, my name is ${NAME} ${SURNAME}, and I am a ${JOB_TITLE}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running that will produce:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bash boot.sh
</span><span class='line'>Hello, my name is ruan bekker, and I am a systems-development-engineer
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>And there we have a simple and effective way of encrypting/decrypting data using S3, KMS and Python at a ridiculously cheap cost, its almost free.</p>

<p>If you liked my content, feel free to checkout my content on <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Deploying Functions Even Easier With Faas-cli Up Using OpenFaaS]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/07/07/making-deploying-functions-even-easier-with-faas-cli-up-using-openfaas/"/>
    <updated>2019-07-07T09:53:59+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/07/07/making-deploying-functions-even-easier-with-faas-cli-up-using-openfaas</id>
    <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/cf01eefb5b6905f3774376d6d1ed55b8f052d211/68747470733a2f2f626c6f672e616c6578656c6c69732e696f2f636f6e74656e742f696d616765732f323031372f30382f666161735f736964652e706e67" alt="" /></p>

<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /> <img src="https://img.shields.io/twitter/follow/ruanbekker.svg?style=social" alt="Twitter Follow" /></p>

<p>I recently discovered that the <code>faas-cli</code> allows you to append your function&rsquo;s yaml to an existing file when generating a new function. And that <code>faas-cli up</code> does the build, push and deploy for you.</p>

<h2>The way I always did it:</h2>

<p>Usually, I will go through this flow: create, build, push, deploy, when creating 2 functions that will be in the same stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ faas-cli new --lang python3 fn-old-foo \
</span><span class='line'>--prefix=ruanbekker \
</span><span class='line'>--gateway https://openfaas.domain.com
</span><span class='line'>
</span><span class='line'>$ faas-cli build -f fn-old-foo.yml && \
</span><span class='line'>faas-cli push -f fn-old-foo.yml && \
</span><span class='line'>faas-cli deploy -f fn-old-foo.yml</span></code></pre></td></tr></table></div></figure>


<p>And for my other function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ faas-cli new --lang python3 fn-old-bar \
</span><span class='line'>--prefix=ruanbekker \
</span><span class='line'>--gateway https://openfaas.domain.com
</span><span class='line'>
</span><span class='line'>$ faas-cli build -f fn-old-bar.yml && \
</span><span class='line'>faas-cli push -f fn-old-bar.yml && \
</span><span class='line'>faas-cli deploy -f fn-old-bar.yml</span></code></pre></td></tr></table></div></figure>


<p>And then you are ready to invoke those functions.</p>

<h2>The new discovered way</h2>

<p>So recently I discovered that you can append the yaml definition of your function to an existing yaml file, and use <code>faas-cli up</code> to build, push and deploy your functions:</p>

<p>Generating the first function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ faas-cli new --lang python3 fn-foo \
</span><span class='line'>--prefix=ruanbekker \
</span><span class='line'>--gateway https://openfaas.domain.com
</span><span class='line'>
</span><span class='line'>Stack file written: fn-foo.yml</span></code></pre></td></tr></table></div></figure>


<p>Now that we have <code>fn-foo.yml</code> in our current work directory, we will append the second function the that file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ faas-cli new --lang python3 fn-bar \
</span><span class='line'>--prefix=ruanbekker \
</span><span class='line'>--gateway https://openfaas.domain.com \
</span><span class='line'>--append fn-foo.yml
</span><span class='line'>
</span><span class='line'>Stack file updated: fn-foo.yml</span></code></pre></td></tr></table></div></figure>


<p>Now, when using <code>faas-cli up</code> it expects by default that the filename is <code>stack.yml</code> which we can change with <code>-f</code> but to keep this as easy as possible, we will change the filename to <code>stack.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mv fn-foo.yml stack.yml</span></code></pre></td></tr></table></div></figure>


<p>At the moment, our <code>stack.yml</code> will look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat stack.yml
</span><span class='line'>provider:
</span><span class='line'>  name: openfaas
</span><span class='line'>  gateway: https://openfaas.domain.com
</span><span class='line'>functions:
</span><span class='line'>  fn-foo:
</span><span class='line'>    lang: python3
</span><span class='line'>    handler: ./fn-foo
</span><span class='line'>    image: ruanbekker/fn-foo:latest
</span><span class='line'>  fn-bar:
</span><span class='line'>    lang: python3
</span><span class='line'>    handler: ./fn-bar
</span><span class='line'>    image: ruanbekker/fn-bar:latest</span></code></pre></td></tr></table></div></figure>


<p>Deploying our functions is as easy as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ faas-cli up
</span><span class='line'>...
</span><span class='line'>Deploying: fn-foo.
</span><span class='line'>
</span><span class='line'>Deployed. 202 Accepted.
</span><span class='line'>URL: https://openfaas.domain.com/function/fn-foo
</span><span class='line'>
</span><span class='line'>Deploying: fn-bar.
</span><span class='line'>
</span><span class='line'>Deployed. 202 Accepted.
</span><span class='line'>URL: https://openfaas.domain.com/function/fn-bar</span></code></pre></td></tr></table></div></figure>


<p>Simply amazing. OpenFaaS done a great job in making it as simple and easy as possible to get your functions from zero to deployed in seconds.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using OpenFaas With Amazon DynamoDB]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/07/07/using-openfaas-with-amazon-dynamodb/"/>
    <updated>2019-07-07T01:11:23+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/07/07/using-openfaas-with-amazon-dynamodb</id>
    <content type="html"><![CDATA[<p><img width="1105" alt="image" src="https://user-images.githubusercontent.com/567298/60761941-f4205480-a053-11e9-9ad5-9e45948c9833.png"></p>

<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /> <img src="https://img.shields.io/twitter/follow/ruanbekker.svg?style=social" alt="Twitter Follow" /></p>

<h1>Using OpenFaaS with Amazon DynamoDB</h1>

<p>You can use your OpenFaaS functions to store and retrieve data to and from a persistent layer that sits outside the OpenFaaS framework. The database that we will use in this tutorial is Amazon&rsquo;s DynamoDB.</p>

<p>If you are not familiar with the service, Amazon&rsquo;s DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability.</p>

<p>At the end of this tutorial you will be able to invoke your functions to read and write items to DynamoDB with a dedicated IAM User that is only allowed to access DynamoDB, and secrets managed by your OpenFaaS framework.</p>

<h2>What we will be doing in this Tutorial</h2>

<p>In this tutorial we will cover a couple of things, and a summary on the to do list is:</p>

<ul>
<li>Create a OpenFaaS IAM User, DynamoDB IAM Policy, associate the Policy to the User using the AWS CLI</li>
<li>Create a AWS Access Key, and save the Access Key and Secret key to file</li>
<li>Create OpenFaaS Secrets of the Access Key and Secret Key, remove the files from disk</li>
<li>Create 3 OpenFaaS Functions: write, lookup and get</li>
<li>Invoke the functions, read and write from DynamoDB</li>
</ul>


<p>Our 3 functions will do very basic operations for this demonstration, but I believe this is a good starting point.</p>

<p>All the examples of this blog post is available in <a href="https://github.com/ruanbekker/blog-assets/tree/master/openfaas-dynamodb">this github repository</a></p>

<h2>The Use-Case Scenario</h2>

<p>In this scenario we want to store user information into DynamoDB, we will use a hash that we will calculate using the users ID Number + Lastname. So when we have thousands or millions of items, we dont need to search through the entire table, but since we can re-calculate the sha hash, we can do a single GetItem operation to find the entry about the user in question.</p>

<ul>
<li>Lookup Function:</li>
</ul>


<p>The lookup function will calculate the hash by passing the users ID Number and Lastname, this will return a hash which will be teh primary key attribute of our table design. This hash value is required to do a GetItem on the user in question.</p>

<ul>
<li>Get Function:</li>
</ul>


<p>The Get function will interface with DynamoDB, it reads the AWS access key and secret key from the secrets path to authenticate with AWS and utilizes environment variables for the region and table name. This will do a GetItem on the DynamoDB Table and retrieve the Item. If the item is not found, it will return it in the response.</p>

<ul>
<li>Write Function:</li>
</ul>


<p>The write function will also interface with DynamoDB, the ID, Name and Payload will be included in the request body on our POST Request.</p>

<h2>Note on Secrets and Environment Variables</h2>

<p>I am treating my environment variables and secrets different from each other. The secrets such as my AWS access keys are stored on the cluster and the application reads them and stores the values in memory.</p>

<p>The environment variables such as non-secret information, such as my dynamodb table name and aws region, is defined in my environment variables.</p>

<p>This <a href="http://movingfast.io/articles/environment-variables-considered-harmful/">post</a> and this <a href="https://diogomonica.com/2017/03/27/why-you-shouldnt-use-env-variables-for-secret-data/">post</a> goes a bit more into detail on why you should not use environment variables for secret data, which I found from <a href="https://github.com/openfaas/faas-netes/issues/153#issuecomment-370924478">this link</a></p>

<p>Enough info, let&rsquo;s get to the fun stuff</p>

<h2>Pre-Requirements:</h2>

<p>You need a AWS Account (or you can use dynamodb-local), OpenFaaS and faas-cli. Documentation available below:
- <a href="https://docs.openfaas.com/contributing/get-started/">https://docs.openfaas.com/contributing/get-started/</a></p>

<h2>Provision a DynamoDB Table</h2>

<p>I have a admin IAM account configured on my default profile, using the aws-cli tools generate the cli-skeleton that is required to provision a dynamodb table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws dynamodb create-table --generate-cli-skeleton &gt; ddb.json
</span></code></pre></td></tr></table></div></figure>


<p>My table name will be <code>lookup-table</code> with the primary key <code>hash_value</code> and provisoned my throughput to 1 Read and Write Capacity Unit. Which will enable us 4KB/s for reads and 1KB/s for writes.</p>

<p>For demonstration purposes, I am sharing my altered <code>ddb.json</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;AttributeDefinitions&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;AttributeName&quot;</span><span class="p">:</span> <span class="s2">&quot;hash_value&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;AttributeType&quot;</span><span class="p">:</span> <span class="s2">&quot;S&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;TableName&quot;</span><span class="p">:</span> <span class="s2">&quot;lookup_table&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;KeySchema&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;AttributeName&quot;</span><span class="p">:</span> <span class="s2">&quot;hash_value&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;KeyType&quot;</span><span class="p">:</span> <span class="s2">&quot;HASH&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;ProvisionedThroughput&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;ReadCapacityUnits&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;WriteCapacityUnits&quot;</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;Tags&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Key&quot;</span><span class="p">:</span> <span class="s2">&quot;Name&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;lookup-table&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have the file saved, create the dynamodb table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws dynamodb create-table --cli-input-json file://ddb.json
</span></code></pre></td></tr></table></div></figure>


<p>List the tables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws dynamodb list-tables
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;TableNames&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="s2">&quot;lookup_table&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check if the table is provisioned:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws dynamodb describe-table --table-name lookup_table <span class="p">|</span> jq -r <span class="s1">&#39;.Table.TableStatus&#39;</span>
</span><span class='line'>ACTIVE
</span></code></pre></td></tr></table></div></figure>


<p>Getting the ARN string, as we will need it when we create our IAM Policy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws dynamodb describe-table --table-name lookup_table <span class="p">|</span> jq -r <span class="s1">&#39;.Table.TableArn&#39;</span>
</span><span class='line'>arn:aws:dynamodb:eu-west-1:x-x:table/lookup_table
</span></code></pre></td></tr></table></div></figure>


<h2>Create the OpenFaaS IAM User</h2>

<p>Create the IAM Policy document which defines the access that we want to grant. You can see that we are only allowing Put and GetItem on the provisioned DynamoDB resource:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat dynamodb-iam-policy.json
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;Version&quot;</span>: <span class="s2">&quot;2012-10-17&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;Statement&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;Sid&quot;</span>: <span class="s2">&quot;OpenFaasFunctionAceessForDynamoDB&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;Effect&quot;</span>: <span class="s2">&quot;Allow&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;Action&quot;</span>: <span class="o">[</span>
</span><span class='line'>                <span class="s2">&quot;dynamodb:PutItem&quot;</span>,
</span><span class='line'>                <span class="s2">&quot;dynamodb:GetItem&quot;</span>
</span><span class='line'>            <span class="o">]</span>,
</span><span class='line'>            <span class="s2">&quot;Resource&quot;</span>: <span class="s2">&quot;arn:aws:dynamodb:eu-west-1:x-accountid-x:table/lookup_table&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the IAM Policy and provide the policy document for the given policy name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws iam create-policy --policy-name openfaas-dynamodb-access --policy-document file://dynamodb-iam-policy.json
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;Policy&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;PolicyName&quot;</span>: <span class="s2">&quot;openfaas-dynamodb-access&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;PolicyId&quot;</span>: <span class="s2">&quot;ANPATPRT2G4SL4K63SUWQ&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;Arn&quot;</span>: <span class="s2">&quot;arn:aws:iam::x-accountid-x:policy/openfaas-dynamodb-access&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;Path&quot;</span>: <span class="s2">&quot;/&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;DefaultVersionId&quot;</span>: <span class="s2">&quot;v1&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;AttachmentCount&quot;</span>: 0,
</span><span class='line'>        <span class="s2">&quot;PermissionsBoundaryUsageCount&quot;</span>: 0,
</span><span class='line'>        <span class="s2">&quot;IsAttachable&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>        <span class="s2">&quot;CreateDate&quot;</span>: <span class="s2">&quot;2019-07-06T11:54:26Z&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;UpdateDate&quot;</span>: <span class="s2">&quot;2019-07-06T11:54:26Z&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the IAM User that will be used to authenticate requests against DynamoDB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws iam create-user --user-name openfaas-user
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;User&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;Path&quot;</span>: <span class="s2">&quot;/&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;UserName&quot;</span>: <span class="s2">&quot;openfaas-user&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;UserId&quot;</span>: <span class="s2">&quot;AIDATPRT2G4SIRYTNHLZK&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;Arn&quot;</span>: <span class="s2">&quot;arn:aws:iam::x-accountid-x:user/openfaas-user&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;CreateDate&quot;</span>: <span class="s2">&quot;2019-07-06T11:56:53Z&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the Access Key, which will be our API keys for our application to authenticate requests. Save the AccessKeyId and SecretAccessKey temporarily to 2 seperate files, which we will delete after we create our secrets to our cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws iam create-access-key --user-name openfaas-user
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;AccessKey&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;UserName&quot;</span>: <span class="s2">&quot;openfaas-user&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;AccessKeyId&quot;</span>: <span class="s2">&quot;AKIAT..redacted.x&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;Status&quot;</span>: <span class="s2">&quot;Active&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;SecretAccessKey&quot;</span>: <span class="s2">&quot;b..redacted.x&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;CreateDate&quot;</span>: <span class="s2">&quot;2019-07-06T11:57:37Z&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Associate the IAM Policy to the IAM User:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws iam attach-user-policy --user-name openfaas-user --policy-arn arn:aws:iam::x-x:policy/openfaas-dynamodb-access
</span></code></pre></td></tr></table></div></figure>


<p>To test if the access keys work, save them to a new profile using the aws-cli tools:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws configure --profile openfaas
</span><span class='line'>AWS Access Key ID <span class="o">[</span>None<span class="o">]</span>: AKIAT..
</span><span class='line'>AWS Secret Access Key <span class="o">[</span>None<span class="o">]</span>: b..x
</span><span class='line'>Default region name <span class="o">[</span>None<span class="o">]</span>: eu-west-1
</span><span class='line'>Default output format <span class="o">[</span>None<span class="o">]</span>: json
</span></code></pre></td></tr></table></div></figure>


<p>Write an Item to DynamoDB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws --profile openfaas dynamodb put-item <span class="se">\</span>
</span><span class='line'>--table-name lookup_table <span class="se">\</span>
</span><span class='line'>--item <span class="s1">&#39;{&quot;hash_value&quot;: {&quot;S&quot;: &quot;aGVsbG8td29ybGQK&quot;}, &quot;message&quot;: {&quot;S&quot;: &quot;hello-world&quot;}}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Read the Item from DynamoDB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws --profile openfaas dynamodb get-item <span class="se">\</span>
</span><span class='line'>--table-name lookup_table <span class="se">\</span>
</span><span class='line'>--key <span class="s1">&#39;{&quot;hash_value&quot;: {&quot;S&quot;: &quot;aGVsbG8td29ybGQK&quot;}}&#39;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;Item&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;hash_value&quot;</span>: <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;S&quot;</span>: <span class="s2">&quot;aGVsbG8td29ybGQK&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="s2">&quot;message&quot;</span>: <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;S&quot;</span>: <span class="s2">&quot;hello-world&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now confirm our permissions are in place to continue.</p>

<h3>Create OpenFaaS Secrets</h3>

<p>The AccessKeyId and SecretKey has been saved to disk, and we will use those files to create secrets from:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli secret create openfaas-aws-access-key --from-file<span class="o">=</span>openfaas_aws_access_key.txt
</span><span class='line'>Creating secret: openfaas-aws-access-key
</span><span class='line'>Created: <span class="m">201</span> Created
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli secret create openfaas-aws-secret-key --from-file<span class="o">=</span>openfaas_aws_secret_key.txt
</span><span class='line'>Creating secret: openfaas-aws-secret-key
</span><span class='line'>Created: <span class="m">201</span> Created
</span></code></pre></td></tr></table></div></figure>


<p>Now that the secrets are securely stored in our cluster, we can delete the temporary files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rm -f ./openfaas_aws_*_key.txt
</span></code></pre></td></tr></table></div></figure>


<h2>Login to OpenFaaS</h2>

<p>Login to OpenFaasS using faas-cli:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli login <span class="se">\</span>
</span><span class='line'>--gateway https://openfaas.domain.com <span class="se">\</span>
</span><span class='line'>--username <span class="k">${</span><span class="nv">OPENFAAS_USER</span><span class="k">}</span> <span class="se">\</span>
</span><span class='line'>--password <span class="k">${</span><span class="nv">OPENFAAS_PASSWORD</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Export the OPENFAAS_URL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">OPENFAAS_URL</span><span class="o">=</span>https://openfaas.domain.com
</span></code></pre></td></tr></table></div></figure>


<h2>One Stack File for All 3 Functions:</h2>

<p>We will create our first function to generate the yaml definition, then we will rename our generated filename to <code>stack.yml</code> then the next 2 functions, we will use the append flag to append the functions yaml to our <code>stack.yml</code> file, so that we can simply use <code>faas-cli up</code></p>

<h2>Create the Lookup Function:</h2>

<p>Create a Python3 Function, and prefix it with your dockerhub user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli new <span class="se">\</span>
</span><span class='line'>--lang python3 fn-dynamodb-lookup <span class="se">\</span>
</span><span class='line'>--prefix<span class="o">=</span>ruanbekker <span class="se">\</span>
</span><span class='line'>--gateway https://openfaas.domain.com
</span><span class='line'>
</span><span class='line'>Function created in folder: fn-foo
</span><span class='line'>Stack file written: fn-dynamodb-lookup.yml
</span></code></pre></td></tr></table></div></figure>


<p>As we will be using one stack file, rename the generated stack file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mv fn-dynamodb-lookup.yml stack.yml
</span></code></pre></td></tr></table></div></figure>


<p>Open the stack file and set the environment variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat stack.yml
</span><span class='line'>provider:
</span><span class='line'>  name: openfaas
</span><span class='line'>  gateway: https://openfaas.domain.com
</span><span class='line'>functions:
</span><span class='line'>  fn-dynamodb-lookup:
</span><span class='line'>    lang: python3
</span><span class='line'>    handler: ./fn-dynamodb-lookup
</span><span class='line'>    image: ruanbekker/fn-dynamodb-lookup:latest
</span><span class='line'>    environment:
</span><span class='line'>      dynamodb_region: eu-west-1
</span><span class='line'>      dynamodb_table: lookup_table
</span></code></pre></td></tr></table></div></figure>


<p>The python code for our function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat fn-dynamodb-lookup/handler.py
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">hashlib</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">calc_sha</span><span class="p">(</span><span class="n">id_number</span><span class="p">,</span> <span class="n">lastname</span><span class="p">):</span>
</span><span class='line'>    <span class="n">string</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">({</span><span class="s">&quot;id&quot;</span><span class="p">:</span> <span class="n">id_number</span><span class="p">,</span> <span class="s">&quot;lastname&quot;</span><span class="p">:</span> <span class="n">lastname</span><span class="p">},</span> <span class="n">sort_keys</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">hash_value</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;utf-8&quot;</span><span class="p">))</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">hash_value</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="n">req</span><span class="p">):</span>
</span><span class='line'>    <span class="n">event</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>    <span class="n">hash_value</span> <span class="o">=</span> <span class="n">calc_sha</span><span class="p">(</span><span class="n">event</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">],</span> <span class="n">event</span><span class="p">[</span><span class="s">&#39;lastname&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">hash_value</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Create the Write Function:</h2>

<p>Create a Python3 Function, and prefix it with your dockerhub user, and use the append flag to update our stack file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli new <span class="se">\</span>
</span><span class='line'>--lang python3 fn-dynamodb-write <span class="se">\</span>
</span><span class='line'>--prefix<span class="o">=</span>ruanbekker <span class="se">\</span>
</span><span class='line'>--gateway https://openfaas.domain.com
</span><span class='line'>--append stack.yml
</span><span class='line'>
</span><span class='line'>Function created in folder: fn-dynamodb-write
</span><span class='line'>Stack file updated: stack.yml
</span></code></pre></td></tr></table></div></figure>


<p>Open the stack file and set the environment variables and include the secrets that was created:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat stack.yml
</span><span class='line'>provider:
</span><span class='line'>  name: openfaas
</span><span class='line'>  gateway: https://openfaas.domain.com
</span><span class='line'>functions:
</span><span class='line'>  fn-dynamodb-lookup:
</span><span class='line'>  <span class="c"># ...</span>
</span><span class='line'>  fn-dynamodb-write:
</span><span class='line'>    lang: python3
</span><span class='line'>    handler: ./fn-dynamodb-write
</span><span class='line'>    image: ruanbekker/fn-dynamodb-write:latest
</span><span class='line'>    environment:
</span><span class='line'>      dynamodb_region: eu-west-1
</span><span class='line'>      dynamodb_table: lookup_table
</span><span class='line'>    secrets:
</span><span class='line'>      - openfaas-aws-access-key
</span><span class='line'>      - openfaas-aws-secret-key
</span></code></pre></td></tr></table></div></figure>


<p>Our function relies on a external dependency which we need to install to interact with aws:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat fn-dynamodb-write/requirements.txt
</span><span class='line'>boto3
</span></code></pre></td></tr></table></div></figure>


<p>Our python code for our function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat fn-dynamodb-write/handler.py
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">hashlib</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">datetime</span>
</span><span class='line'>
</span><span class='line'><span class="n">aws_key</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/var/openfaas/secrets/openfaas-aws-access-key&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="n">aws_secret</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/var/openfaas/secrets/openfaas-aws-secret-key&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="n">dynamodb_region</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;dynamodb_region&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">dynamodb_table</span>  <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;dynamodb_table&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">region_name</span><span class="o">=</span><span class="n">dynamodb_region</span><span class="p">)</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s">&#39;dynamodb&#39;</span><span class="p">,</span> <span class="n">aws_access_key_id</span><span class="o">=</span><span class="n">aws_key</span><span class="p">,</span> <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="n">aws_secret</span><span class="p">)</span>
</span><span class='line'><span class="n">table</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">Table</span><span class="p">(</span><span class="n">dynamodb_table</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">calc_sha</span><span class="p">(</span><span class="n">id_number</span><span class="p">,</span> <span class="n">lastname</span><span class="p">):</span>
</span><span class='line'>    <span class="n">string</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">({</span><span class="s">&quot;id&quot;</span><span class="p">:</span> <span class="n">id_number</span><span class="p">,</span> <span class="s">&quot;lastname&quot;</span><span class="p">:</span> <span class="n">lastname</span><span class="p">},</span> <span class="n">sort_keys</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">hash_value</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;utf-8&quot;</span><span class="p">))</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">hash_value</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">create_timestamp</span><span class="p">():</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%Y-%m-</span><span class="si">%d</span><span class="s">T%H:%M&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">response</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="n">req</span><span class="p">):</span>
</span><span class='line'>    <span class="n">event</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>    <span class="n">unique_id</span> <span class="o">=</span> <span class="n">calc_sha</span><span class="p">(</span><span class="n">event</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">],</span> <span class="n">event</span><span class="p">[</span><span class="s">&#39;lastname&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">table</span><span class="o">.</span><span class="n">put_item</span><span class="p">(</span>
</span><span class='line'>        <span class="n">Item</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;hash_value&#39;</span><span class="p">:</span> <span class="n">unique_id</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;timestamp&#39;</span><span class="p">:</span> <span class="n">create_timestamp</span><span class="p">(),</span>
</span><span class='line'>            <span class="s">&#39;payload&#39;</span><span class="p">:</span> <span class="n">event</span><span class="p">[</span><span class="s">&#39;payload&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">response</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Create the Get Function:</h2>

<p>Create a Python3 Function, and prefix it with your dockerhub user, and use the append flag to specify the stack file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli new <span class="se">\</span>
</span><span class='line'>--lang python3 fn-dynamodb-get <span class="se">\</span>
</span><span class='line'>--prefix<span class="o">=</span>ruanbekker <span class="se">\</span>
</span><span class='line'>--gateway https://openfaas.domain.com
</span><span class='line'>--append stack.yml
</span><span class='line'>
</span><span class='line'>Function created in folder: fn-dynamodb-get
</span><span class='line'>Stack file updated: stack.yml
</span></code></pre></td></tr></table></div></figure>


<p>Open the stack file and set the environment variables and include the secrets that was created:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat stack.yml
</span><span class='line'>provider:
</span><span class='line'>  name: openfaas
</span><span class='line'>  gateway: https://openfaas.domain.com
</span><span class='line'>functions:
</span><span class='line'>  fn-dynamodb-lookup:
</span><span class='line'>  <span class="c"># .. </span>
</span><span class='line'>  fn-dynamodb-write:
</span><span class='line'>  <span class="c"># ..</span>
</span><span class='line'>  fn-dynamodb-get:
</span><span class='line'>    lang: python3
</span><span class='line'>    handler: ./fn-dynamodb-get
</span><span class='line'>    image: ruanbekker/fn-dynamodb-get:latest
</span><span class='line'>    environment:
</span><span class='line'>      dynamodb_region: eu-west-1
</span><span class='line'>      dynamodb_table: lookup_table
</span><span class='line'>    secrets:
</span><span class='line'>      - openfaas-aws-access-key
</span><span class='line'>      - openfaas-aws-secret-key
</span></code></pre></td></tr></table></div></figure>


<p>Include the external dependency for aws:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat fn-dynamodb-get/requirements.txt
</span><span class='line'>boto3
</span></code></pre></td></tr></table></div></figure>


<p>Our python code for our function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat fn-dynamodb-get/handler.py
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'>
</span><span class='line'><span class="n">aws_key</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/var/openfaas/secrets/openfaas-aws-access-key&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="n">aws_secret</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/var/openfaas/secrets/openfaas-aws-secret-key&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="n">dynamodb_region</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;dynamodb_region&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">dynamodb_table</span>  <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;dynamodb_table&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">region_name</span><span class="o">=</span><span class="n">dynamodb_region</span><span class="p">)</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s">&#39;dynamodb&#39;</span><span class="p">,</span> <span class="n">aws_access_key_id</span><span class="o">=</span><span class="n">aws_key</span><span class="p">,</span> <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="n">aws_secret</span><span class="p">)</span>
</span><span class='line'><span class="n">table</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">Table</span><span class="p">(</span><span class="n">dynamodb_table</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="n">req</span><span class="p">):</span>
</span><span class='line'>    <span class="n">event</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">table</span><span class="o">.</span><span class="n">get_item</span><span class="p">(</span>
</span><span class='line'>        <span class="n">Key</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;hash_value&#39;</span><span class="p">:</span> <span class="n">event</span><span class="p">[</span><span class="s">&#39;hash_value&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;Item&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">response</span><span class="p">:</span>
</span><span class='line'>        <span class="n">item_data</span> <span class="o">=</span> <span class="s">&#39;Item not found&#39;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">item_data</span> <span class="o">=</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;Item&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">item_data</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Build, Push and Deploy:</h2>

<p>It&rsquo;s time to deploy our functions and since we have all our stack info in one file, we can use <code>faas-cli up</code> which will build, push and deploy our functions.</p>

<p>By default it expects the filename to be <code>stack.yml</code> therefore we don&rsquo;t need to specify the filename, but if you had a different filename, you can overwrite the default behaviour with <code>-f</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli up
</span><span class='line'>
</span><span class='line'>Deploying: fn-dynamodb-lookup.
</span><span class='line'>Deployed. <span class="m">202</span> Accepted.
</span><span class='line'>URL: https://openfaas.domain.com/function/fn-dynamodb-lookup
</span><span class='line'>
</span><span class='line'>Deploying: fn-dynamodb-write.
</span><span class='line'>Deployed. <span class="m">202</span> Accepted.
</span><span class='line'>URL: https://openfaas.domain.com/function/fn-dynamodb-write
</span><span class='line'>
</span><span class='line'>Deploying: fn-dynamodb-get.
</span><span class='line'>Deployed. <span class="m">202</span> Accepted.
</span><span class='line'>URL: https://openfaas.domain.com/function/fn-dynamodb-get
</span></code></pre></td></tr></table></div></figure>


<h2>Time for our Functions to interact with DynamoDB:</h2>

<p>Write an Item to DynamoDB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST https://openfaas.domain.com/function/fn-dynamodb-write -d <span class="s1">&#39;{&quot;id&quot;: 8700000000001, &quot;lastname&quot;: &quot;smith&quot;, &quot;payload&quot;: {&quot;name&quot;: &quot;james&quot;, &quot;role&quot;: &quot;reader&quot;}}&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s1">&#39;ResponseMetadata&#39;</span>: <span class="o">{</span><span class="s1">&#39;RequestId&#39;</span>: <span class="s1">&#39;CNHEFHMSL4KGRDE0HRVQ69D5H7VV4KQNSO5AEMVJF66Q9ASUAAJG&#39;</span>, <span class="s1">&#39;HTTPStatusCode&#39;</span>: 200, <span class="s1">&#39;HTTPHeaders&#39;</span>: <span class="o">{</span><span class="s1">&#39;server&#39;</span>: <span class="s1">&#39;Server&#39;</span>, <span class="s1">&#39;date&#39;</span>: <span class="s1">&#39;Sat, 06 Jul 2019 20:47:00 GMT&#39;</span>, <span class="s1">&#39;content-type&#39;</span>: <span class="s1">&#39;application/x-amz-json-1.0&#39;</span>, <span class="s1">&#39;content-length&#39;</span>: <span class="s1">&#39;2&#39;</span>, <span class="s1">&#39;connection&#39;</span>: <span class="s1">&#39;keep-alive&#39;</span>, <span class="s1">&#39;x-amzn-requestid&#39;</span>: <span class="s1">&#39;CNHEFHMSL4KGRDE0HRVQ69D5H7VV4KQNSO5AEMVJF66Q9ASUAAJG&#39;</span>, <span class="s1">&#39;x-amz-crc32&#39;</span>: <span class="s1">&#39;2745614147&#39;</span><span class="o">}</span>, <span class="s1">&#39;RetryAttempts&#39;</span>: 0<span class="o">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Write another Item to DynamoDB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST https://openfaas.doamin.com/function/fn-dynamodb-write -d <span class="s1">&#39;{&quot;id&quot;: 8700000000002, &quot;lastname&quot;: &quot;adams&quot;, &quot;payload&quot;: {&quot;name&quot;: &quot;samantha&quot;, &quot;role&quot;: &quot;admin&quot;}}&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s1">&#39;ResponseMetadata&#39;</span>: <span class="o">{</span><span class="s1">&#39;RequestId&#39;</span>: <span class="s1">&#39;KRQL838BVGC9LIUSCOUB7MOEQ7VV4KQNSO5AEMVJF66Q9ASUAAJG&#39;</span>, <span class="s1">&#39;HTTPStatusCode&#39;</span>: 200, <span class="s1">&#39;HTTPHeaders&#39;</span>: <span class="o">{</span><span class="s1">&#39;server&#39;</span>: <span class="s1">&#39;Server&#39;</span>, <span class="s1">&#39;date&#39;</span>: <span class="s1">&#39;Sat, 06 Jul 2019 20:48:09 GMT&#39;</span>, <span class="s1">&#39;content-type&#39;</span>: <span class="s1">&#39;application/x-amz-json-1.0&#39;</span>, <span class="s1">&#39;content-length&#39;</span>: <span class="s1">&#39;2&#39;</span>, <span class="s1">&#39;connection&#39;</span>: <span class="s1">&#39;keep-alive&#39;</span>, <span class="s1">&#39;x-amzn-requestid&#39;</span>: <span class="s1">&#39;KRQL838BVGC9LIUSCOUB7MOEQ7VV4KQNSO5AEMVJF66Q9ASUAAJG&#39;</span>, <span class="s1">&#39;x-amz-crc32&#39;</span>: <span class="s1">&#39;2745614147&#39;</span><span class="o">}</span>, <span class="s1">&#39;RetryAttempts&#39;</span>: 0<span class="o">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now recalculate the hash by passing the ID Number and Lastname to get the hash value for the primary key:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST https://openfaas.domain.com/function/fn-dynamodb-lookup -d <span class="s1">&#39;{&quot;id&quot;: 8700000000002, &quot;lastname&quot;: &quot;adams&quot;}&#39;</span>
</span><span class='line'>bd0a248aff2b50b288ba504bd7142ef11b164901
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have the hash value, do a GetItem by using the hash value in the request body:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST https://openfaas.domain.com/function/fn-dynamodb-get -d <span class="s1">&#39;{&quot;hash_value&quot;: &quot;bd0a248aff2b50b288ba504bd7142ef11b164901&quot;}&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s1">&#39;payload&#39;</span>: <span class="o">{</span><span class="s1">&#39;name&#39;</span>: <span class="s1">&#39;samantha&#39;</span>, <span class="s1">&#39;role&#39;</span>: <span class="s1">&#39;admin&#39;</span><span class="o">}</span>, <span class="s1">&#39;hash_value&#39;</span>: <span class="s1">&#39;bd0a248aff2b50b288ba504bd7142ef11b164901&#39;</span>, <span class="s1">&#39;timestamp&#39;</span>: <span class="s1">&#39;2019-07-06T20:48&#39;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the lookup function calculates a hash based on the input that you provide it, for example calculating a hash with userdata that does not exist in our table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST https://openfaas.domain.com/function/fn-dynamodb-lookup -d <span class="s1">&#39;{&quot;id&quot;: 8700000000003, &quot;lastname&quot;: &quot;williams&quot;}&#39;</span>
</span><span class='line'>c68dc272873140f4ae93bb3a3317772a6bdd9aa1
</span></code></pre></td></tr></table></div></figure>


<p>Using that hash value in our request body to read from dynamodb, will show us that the item has not been found:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST https://openfaas.domain.com/function/fn-dynamodb-get -d <span class="s1">&#39;{&quot;hash_value&quot;: &quot;c68dc272873140f4ae93bb3a3317772a6bdd9aa1&quot;}&#39;</span>
</span><span class='line'>Item not found
</span></code></pre></td></tr></table></div></figure>


<p>You might want to change this behavior but this is just for the demonstration of this post.</p>

<p>When you head over to DynamoDB&rsquo;s console you will see this in your table:</p>

<p><img width="873" alt="image" src="https://user-images.githubusercontent.com/567298/60761025-9e8e7c80-a040-11e9-83a3-ad5b474a28ff.png"></p>

<h2>Thanks</h2>

<p>This was a basic example using OpenFaaS with Amazon DynamoDB with Python and secrets managed with OpenFaas. I really like the way OpenFaaS let&rsquo;s you work with secrets, it works great and don&rsquo;t need an additional resource to manage your sensitive data.</p>

<p>Although this was basic usage with OpenFaaS and DynamoDB, the sky is the limit what you can do with it.</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://aws.amazon.com/blogs/database/choosing-the-right-dynamodb-partition-key/">DynamoDB: Choosing the right Partition Key</a></li>
<li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-partition-key-uniform-load.html">Designing Partition Keys to Distribute Your Workload Evenly</a></li>
<li><a href="https://docs.openfaas.com/contributing/get-started/">OpenFaaS: Getting Started</a></li>
<li><a href="https://docs.openfaas.com/reference/secrets/">OpenFaaS: Secrets</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play With Kinesis Data Streams for Free]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/06/22/play-with-kinesis-data-streams-for-free/"/>
    <updated>2019-06-22T23:35:19+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/06/22/play-with-kinesis-data-streams-for-free</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/59969559-3f187300-9550-11e9-9e6d-7fa4dbc30198.png" alt="image" /></p>

<p>Misleading title?? Perhaps, depends on how you look at it. Amazon Kinesis is a fully managed, cloud-based service for real-time processing of distributed data streams. So if you&rsquo;re a curious mad person like me, you want to test out stuff and when you can test stuff out for free, why not.</p>

<p>So before paying for that, why not spin something up locally, such as <a href="https://github.com/mhart/kinesalite">Kinesisalite</a> which is an implementation of Amazon Kinesis built on top of LevelDB.</p>

<p>Kinesis overview:</p>

<p><img src="https://user-images.githubusercontent.com/567298/59969540-caddcf80-954f-11e9-8e3d-23c932d35ef1.png" alt="image" /></p>

<h2>What will we be doing?</h2>

<p>In this tutorial we will setup a local kinesis instance using docker then do the following:</p>

<ul>
<li>Create a Kinesis Stream, List, Describe, PutRecord, GetRecords using Python&rsquo;s Boto3 Interface</li>
<li>Write a Python Producer and Consumer</li>
<li>Write and Read Records from our Local Kinesis Stream</li>
</ul>


<h2>Building Kinesis Local on Docker</h2>

<p>If you would like to skip this step, you can use my docker image: <a href="https://hub.docker.com/r/ruanbekker/kinesis-local">ruanbekker/kinesis-local:latest</a></p>

<p>Our Dockerfile:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM node:8.16.0-stretch-slim
</span><span class='line'>
</span><span class='line'>RUN apt update && apt install build-essential python-minimal -y
</span><span class='line'>RUN npm install --unsafe-perm -g kinesalite
</span><span class='line'>RUN apt-get clean
</span><span class='line'>
</span><span class='line'>CMD ["kinesalite", "--port", "4567", "--createStreaMs", "5"]</span></code></pre></td></tr></table></div></figure>


<p>Build:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker build -t kinesis-local .</span></code></pre></td></tr></table></div></figure>


<p>Run and expose port 4567:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run -it -p 4567:4567 kinesis-local:latest</span></code></pre></td></tr></table></div></figure>


<h2>Interact with Kinesis Local:</h2>

<p>In this next steps we will setup our environment, which will only require <code>python</code> and <code>boto3</code>. To keep things isolated, I will do this with a docker container:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run -it python:3.7-alpine sh</span></code></pre></td></tr></table></div></figure>


<p>Now we need to install boto3 and enter the python repl:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip3 install boto3
</span><span class='line'>$ python3
</span><span class='line'>Python 3.7.3 (default, May 11 2019, 02:00:41)
</span><span class='line'>[GCC 8.3.0] on linux
</span><span class='line'>Type "help", "copyright", "credits" or "license" for more information.
</span><span class='line'>&gt;&gt;&gt;</span></code></pre></td></tr></table></div></figure>


<p>Import boto and create the connection to our kinesis local instance:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; import boto3
</span><span class='line'>&gt;&gt;&gt; client = boto3.Session(
</span><span class='line'>    region_name='eu-west-1').client('kinesis', aws_access_key_id='', aws_secret_access_key='', endpoint_url='http://localhost:4567'
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s list our streams and as expected, we should have zero streams available:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; client.list_streams()
</span><span class='line'>{u'StreamNames': [], u'HasMoreStreams': False, 'ResponseMetadata': {'RetryAttempts': 0, 'HTTPStatusCode': 200, 'RequestId': '637xx', 'HTTPHeaders': {'x-amzn-requestid': '6xx', 'content-length': '41', 'x-amz-id-2': 'xx', 'connection': 'keep-alive', 'date': 'Sat, 22 Jun 2019 19:17:34 GMT', 'content-type': 'application/x-amz-json-1.1'}}}</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s create a stream named <code>mystream</code> with 1 primary shard:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; client.create_stream(StreamName='mystream', ShardCount=1)</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s list our streams again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; client.list_streams()
</span><span class='line'>{u'StreamNames': [u'mystream'], u'HasMoreStreams': False, 'ResponseMetadata': ...</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s put some data in our kinesis stream, we will push a payload with the body: <code>{"name": "ruan"}</code> to our kinesis stream with partition key: <code>a01</code> which is used for sharding:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; response = client.put_record(StreamName='mystream', Data=json.dumps({"name": "ruan"}), PartitionKey='a01')
</span><span class='line'>&gt;&gt;&gt; response
</span><span class='line'>{u'ShardId': u'shardId-000000000000', 'ResponseMetadata': {'RetryAttempts': 0, 'HTTPStatusCode': 200, 'RequestId': 'cb0xx', 'HTTPHeaders': {'x-amzn-requestid': 'xx', 'content-length': '110', 'x-amz-id-2': 'xx', 'connection': 'keep-alive', 'date': 'Sat, 22 Jun 2019 19:20:27 GMT', 'content-type': 'application/x-amz-json-1.1'}}, u'SequenceNumber': u'490xx'}</span></code></pre></td></tr></table></div></figure>


<p>Now that we have data in our stream we need to read data from our kinesis stream. Before data can be read from the stream we need to obtain the shard iterator for the shard we are interested in. A shard iterator represents the position of the stream and shard from which the consumer will read, in this case we will call the get_shard_operator method and passing the stream name, shard id and shard iterator type.</p>

<p>There are 2 comman iterator types:</p>

<ul>
<li>TRIM_HORIZON: Points to the last untrimmed record in the shard</li>
<li>LATEST: Reads the most recent data in the shard</li>
</ul>


<p>We will use TRIM_HORIZON in this case, get the shard iterator id:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; shard_id = response['ShardId']
</span><span class='line'>&gt;&gt;&gt; response = client.get_shard_iterator(StreamName='mystream', ShardId=shard_id, ShardIteratorType='TRIM_HORIZON')
</span><span class='line'>&gt;&gt;&gt; response
</span><span class='line'>{u'ShardIterator': u'AAAxx=', 'ResponseMetadata': {'RetryAttempts': 0, 'HTTPStatusCode': 200, 'RequestId': '22dxx', 'HTTPHeaders': {'x-amzn-requestid': '22dxx', 'content-length': '224', 'x-amz-id-2': 'xx', 'connection': 'keep-alive', 'date': 'Sat, 22 Jun 2019 19:22:55 GMT', 'content-type': 'application/x-amz-json-1.1'}}}</span></code></pre></td></tr></table></div></figure>


<p>Now that we have the shard iterator id, we can call the get_records method with the shard iterator id, to read the data from the stream:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; shard_iterator = response['ShardIterator']
</span><span class='line'>&gt;&gt;&gt; response = client.get_records(ShardIterator=shard_iterator)
</span><span class='line'>&gt;&gt;&gt; response
</span><span class='line'>{u'Records': [{u'Data': '{"name": "ruan"}', u'PartitionKey': u'a01', u'ApproximateArrivalTimestamp': datetime.datetime(2019, 6, 22, 21, 20, 27, 937000, tzinfo=tzlocal()), u'SequenceNumber': u'495xx'}], 'ResponseMetadata': {'RetryAttempts': 0, 'HTTPStatusCode': 200, 'RequestId': '2b6xx', 'HTTPHeaders': {'x-amzn-requestid': '2b6xx', 'content-length': '441', 'x-amz-id-2': 'xx', 'connection': 'keep-alive', 'date': 'Sat, 22 Jun 2019 19:30:19 GMT', 'content-type': 'application/x-amz-json-1.1'}}, u'NextShardIterator': u'AAAxx=', u'MillisBehindLatest': 0}</span></code></pre></td></tr></table></div></figure>


<p>To loop and parse through the response to make it more readable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; for record in response['Records']:
</span><span class='line'>...     if 'Data' in record:
</span><span class='line'>...         json.loads(record['Data'])
</span><span class='line'>...
</span><span class='line'>{u'name': u'ruan'}</span></code></pre></td></tr></table></div></figure>


<p>Once we are done, we can delete our stream:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; client.delete_stream(StreamName='mystream')</span></code></pre></td></tr></table></div></figure>


<p>Now that we have the basics, lets create our producer and consumer for a demonstration on pushing data to a kinesis stream from one process and consuming it from another process. As this demonstration we will be producing and consuming data from the same laptop, in real use-cases, you will do them from seperate servers and using Amazon Kinesis.</p>

<h2>Our Kinesis Producer</h2>

<p>The following will create a Kinesis Local Stream and Write 25 JSON Documents to our stream:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;james&#39;</span><span class="p">,</span> <span class="s">&#39;stefan&#39;</span><span class="p">,</span> <span class="s">&#39;pete&#39;</span><span class="p">,</span> <span class="s">&#39;tom&#39;</span><span class="p">,</span> <span class="s">&#39;frank&#39;</span><span class="p">,</span> <span class="s">&#39;peter&#39;</span><span class="p">,</span> <span class="s">&#39;ruan&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">session</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">region_name</span><span class="o">=</span><span class="s">&#39;eu-west-1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">client</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;kinesis&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">aws_access_key_id</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">endpoint_url</span><span class="o">=</span><span class="s">&#39;http://localhost:4567&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">list_streams</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">list_streams</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="s">&#39;mystream&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">list_streams</span><span class="p">[</span><span class="s">&#39;StreamNames&#39;</span><span class="p">]:</span>
</span><span class='line'>    <span class="n">client</span><span class="o">.</span><span class="n">create_stream</span><span class="p">(</span><span class="n">StreamName</span><span class="o">=</span><span class="s">&#39;mystream&#39;</span><span class="p">,</span> <span class="n">ShardCount</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;Starting at {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%H:%m:%S&quot;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="n">count</span> <span class="o">!=</span> <span class="mi">25</span><span class="p">:</span>
</span><span class='line'>    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">put_record</span><span class="p">(</span>
</span><span class='line'>        <span class="n">StreamName</span><span class="o">=</span><span class="s">&#39;mystream&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">Data</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">({</span>
</span><span class='line'>            <span class="s">&quot;number&quot;</span><span class="p">:</span> <span class="n">count</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">names</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&quot;age&quot;</span><span class="p">:</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">50</span><span class="p">)}</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>        <span class="n">PartitionKey</span><span class="o">=</span><span class="s">&#39;a01&#39;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;Finished at {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%H:%m:%S&quot;</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Our Kinesis Local Consumer:</h2>

<p>This will read 5 records at a time from our stream, you will notice if you run them on the same time it will only read one at a time as the producer only writes one per second.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'>
</span><span class='line'><span class="n">session</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">region_name</span><span class="o">=</span><span class="s">&#39;eu-west-1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">client</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;kinesis&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">aws_access_key_id</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">endpoint_url</span><span class="o">=</span><span class="s">&#39;http://localhost:4567&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">stream_details</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">describe_stream</span><span class="p">(</span><span class="n">StreamName</span><span class="o">=</span><span class="s">&#39;mystream&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">shard_id</span> <span class="o">=</span> <span class="n">stream_details</span><span class="p">[</span><span class="s">&#39;StreamDescription&#39;</span><span class="p">][</span><span class="s">&#39;Shards&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">&#39;ShardId&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">get_shard_iterator</span><span class="p">(</span>
</span><span class='line'>    <span class="n">StreamName</span><span class="o">=</span><span class="s">&#39;mystream&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ShardId</span><span class="o">=</span><span class="n">shard_id</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ShardIteratorType</span><span class="o">=</span><span class="s">&#39;TRIM_HORIZON&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">shard_iterator</span> <span class="o">=</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;ShardIterator&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">get_records</span><span class="p">(</span><span class="n">ShardIterator</span><span class="o">=</span><span class="n">shard_iterator</span><span class="p">,</span> <span class="n">Limit</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="n">shard_iterator</span> <span class="o">=</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;NextShardIterator&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">record</span> <span class="ow">in</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;Records&#39;</span><span class="p">]:</span>
</span><span class='line'>        <span class="k">if</span> <span class="s">&#39;Data&#39;</span> <span class="ow">in</span> <span class="n">record</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">record</span><span class="p">[</span><span class="s">&#39;Data&#39;</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">record</span><span class="p">[</span><span class="s">&#39;Data&#39;</span><span class="p">]))</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.75</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Demo Time!</h2>

<p>Now that we have our <code>producer.py</code> and <code>consumer.py</code>, lets test this out.</p>

<p>Start the server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">docker</span> <span class="n">run</span> <span class="o">-</span><span class="n">it</span> <span class="o">-</span><span class="n">p</span> <span class="mi">4567</span><span class="p">:</span><span class="mi">4567</span> <span class="n">ruanbekker</span><span class="o">/</span><span class="n">kinesis</span><span class="o">-</span><span class="n">local</span><span class="p">:</span><span class="n">latest</span>
</span><span class='line'><span class="n">Listening</span> <span class="n">at</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="p">:::</span><span class="mi">4567</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the Producer from your Python Environment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">python</span> <span class="n">producer</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="n">Starting</span> <span class="n">at</span> <span class="mo">00</span><span class="p">:</span><span class="mo">06</span><span class="p">:</span><span class="mi">16</span>
</span><span class='line'><span class="n">Finished</span> <span class="n">at</span> <span class="mo">00</span><span class="p">:</span><span class="mo">06</span><span class="p">:</span><span class="mi">42</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the Consumer from your Python Environment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">python</span> <span class="n">consumer</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="n">Starting</span> <span class="n">Consuming</span> <span class="n">at</span> <span class="mo">00</span><span class="p">:</span><span class="mo">06</span><span class="p">:</span><span class="mi">31</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;pete&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">23</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;ruan&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">22</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;peter&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">45</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;stefan&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">49</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;tom&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">47</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;pete&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">35</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;stefan&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">45</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;ruan&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">38</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;frank&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;tom&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">38</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">11</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;james&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;james&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">38</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">13</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;tom&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;tom&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;peter&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">16</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;james&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">29</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">17</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;james&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;pete&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">19</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;pete&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">36</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;tom&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">45</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">21</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;peter&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">39</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">22</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;ruan&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">43</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">23</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;tom&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">38</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">24</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;pete&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">40</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;frank&#39;</span><span class="p">}</span>
</span><span class='line'><span class="n">Finshed</span> <span class="n">Consuming</span> <span class="n">at</span> <span class="mo">00</span><span class="p">:</span><span class="mo">06</span><span class="p">:</span><span class="mi">35</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Thanks</h2>

<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a></p>

<p>Hope that was useful, feel free to check out <a href="https://aws.amazon.com/kinesis/">Amazon&rsquo;s Kinesis</a> out if you are planning to run this in any non-testing environment</p>

<center>
        <script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script>
</center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Traefik as an Ingress Controller on Kubernetes]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/06/10/setup-traefik-as-an-ingress-controller-on-kubernetes/"/>
    <updated>2019-06-10T22:21:36+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/06/10/setup-traefik-as-an-ingress-controller-on-kubernetes</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/59225379-db498e00-8bd0-11e9-9f20-62aecf915431.png" alt="image" /></p>

<p>If you have not provisioned a Kubernetes Cluster, you can <a href="https://blog.ruanbekker.com/blog/2019/06/10/testing-out-scaleways-kapsule-their-kubernetes-as-a-service-offering/">see this tutorial</a> on how to provision a Kubernetes Cluster on Scaleway</p>

<h2>What will we be doing</h2>

<p>In this tutorial we will setup Traefik as an Ingress Controller on Kubernetes and deploy a logos web app to our Kubernetes Cluster, using frontend rules to map subdomains to specific services.</p>

<p>We will have 3 subdomains, being mapped to containers from the below docker images:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FQDN                     Image Name
</span><span class='line'>- python.domain.com   -&gt; ruanbekker/logos:python
</span><span class='line'>- openfaas.domain.com -&gt; ruanbekker/logos:openfaas
</span><span class='line'>- rancher.domain.com  -&gt; ruanbekker/logos:rancher</span></code></pre></td></tr></table></div></figure>


<h2>Get the sources</h2>

<p>If you would like to get the source code for this demonstration you can checkout this repository: <a href="https://github.com/ruanbekker/traefik-kubernetes-scaleway-demo">https://github.com/ruanbekker/traefik-kubernetes-scaleway-demo</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/ruanbekker/traefik-kubernetes-scaleway-demo
</span><span class='line'>$ cd traefik-kubernetes-scaleway-demo</span></code></pre></td></tr></table></div></figure>


<h2>Provision Traefik as an Ingress Controller</h2>

<p>Apply role based access control to authorize Traefik to use the Kubernetes API:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f traefik/01-traefik-rbac.yaml
</span><span class='line'>clusterrole.rbac.authorization.k8s.io/traefik-ingress-controller created
</span><span class='line'>clusterrolebinding.rbac.authorization.k8s.io/traefik-ingress-controller created</span></code></pre></td></tr></table></div></figure>


<p>Consulting <a href="https://docs.traefik.io/user-guide/kubernetes/#deploy-traefik-using-a-deployment-or-daemonset">Traefik&rsquo;s</a> documentation, when deploying Traefik, it&rsquo;s possible to use a deployment or a demonset, not both. <a href="https://docs.traefik.io/user-guide/kubernetes/#deploy-traefik-using-a-deployment-or-daemonset">More details on why</a></p>

<p>I will go ahead and apply the Daemon Set:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f traefik/03-traefik-ds.yaml
</span><span class='line'>serviceaccount/traefik-ingress-controller created
</span><span class='line'>daemonset.extensions/traefik-ingress-controller created
</span><span class='line'>service/traefik-ingress-service created</span></code></pre></td></tr></table></div></figure>


<p>The Traefik UI Service will be associated with a FQDN, remember to set the FQDN for the endpoint, as example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat traefik/04-traefik-ui.yaml
</span><span class='line'>...
</span><span class='line'>spec:
</span><span class='line'>  rules:
</span><span class='line'>  - host: traefik-ui.x-x-x-x-x.nodes.k8s.fr-par.scw.cloud
</span><span class='line'>    http:
</span><span class='line'>      paths:
</span><span class='line'>      - path: /
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Create the Traefik UI Service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f traefik/04-traefik-ui.yaml
</span><span class='line'>service/traefik-web-ui created</span></code></pre></td></tr></table></div></figure>


<p>Traefik UI Ingress:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f traefik/05-traefik-ui-ingress.yaml
</span><span class='line'>ingress.extensions/traefik-web-ui created</span></code></pre></td></tr></table></div></figure>


<p>View the services:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get services --namespace=kube-system
</span><span class='line'>NAME                      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                  AGE
</span><span class='line'>coredns                   ClusterIP   x.x.x.x         &lt;none&gt;        53/UDP,53/TCP,9153/TCP   11h
</span><span class='line'>heapster                  ClusterIP   x.x.x.x         &lt;none&gt;        80/TCP                   11h
</span><span class='line'>kubernetes-dashboard      ClusterIP   x.x.x.x         &lt;none&gt;        443/TCP                  11h
</span><span class='line'>metrics-server            ClusterIP   x.x.x.x         &lt;none&gt;        443/TCP                  11h
</span><span class='line'>monitoring-influxdb       ClusterIP   x.x.x.x         &lt;none&gt;        8086/TCP                 11h
</span><span class='line'>traefik-ingress-service   ClusterIP   x.x.x.x         &lt;none&gt;        80/TCP,8080/TCP          24m
</span><span class='line'>traefik-web-ui            ClusterIP   x.x.x.x         &lt;none&gt;        80/TCP                   24m</span></code></pre></td></tr></table></div></figure>


<h2>Deploy the Logo App to the Cluster</h2>

<p>We will deploy the logo app to our cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f logos-app/logos-services.yaml
</span><span class='line'>service/openfaas created
</span><span class='line'>service/rancher created
</span><span class='line'>service/python created</span></code></pre></td></tr></table></div></figure>


<p>Create the deployment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f logos-app/logos-deployments.yaml
</span><span class='line'>deployment.extensions/openfaas created
</span><span class='line'>deployment.extensions/rancher created
</span><span class='line'>deployment.extensions/python created</span></code></pre></td></tr></table></div></figure>


<p>Before creating the ingress for the logo&rsquo;s applications, we need to set the fqdn endpoints that we want to route traffic to as below as an example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat logos-app/logos-ingress.yaml
</span><span class='line'>...
</span><span class='line'>spec:
</span><span class='line'>  rules:
</span><span class='line'>  - host: openfaas.x-x-x-x-x.nodes.k8s.fr-par.scw.cloud
</span><span class='line'>    http:
</span><span class='line'>      paths:
</span><span class='line'>      - path: /
</span><span class='line'>        backend:
</span><span class='line'>          serviceName: openfaas
</span><span class='line'>          servicePort: http
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Create the ingress:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f logos-app/logos-ingress.yaml
</span><span class='line'>ingress.extensions/logo created</span></code></pre></td></tr></table></div></figure>


<p>After some time, have a look at the pods to get the status:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get pods
</span><span class='line'>NAME                                     READY   STATUS    RESTARTS   AGE
</span><span class='line'>openfaas-cffdddc4-lvn5w                  1/1     Running   0          4m6s
</span><span class='line'>openfaas-cffdddc4-wbcl6                  1/1     Running   0          4m6s
</span><span class='line'>python-65ccf9c74b-8kmgp                  1/1     Running   0          4m6s
</span><span class='line'>python-65ccf9c74b-dgnqb                  1/1     Running   0          4m6s
</span><span class='line'>rancher-597b6b8554-mgcjr                 1/1     Running   0          4m6s
</span><span class='line'>rancher-597b6b8554-mpk62                 1/1     Running   0          4m6s</span></code></pre></td></tr></table></div></figure>


<h2>Navigating with Kubectl</h2>

<p>Show nodes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get nodes
</span><span class='line'>NAME                                             STATUS   ROLES    AGE   VERSION
</span><span class='line'>scw-k8s-mystifying-torvald-jovial-mclar-25a942   Ready    node     20h   v1.14.1
</span><span class='line'>scw-k8s-mystifying-torvald-jovial-mclar-eaf1a2   Ready    node     20h   v1.14.1
</span><span class='line'>scw-k8s-mystifying-torvalds-default-7f263aabab   Ready    master   20h   v1.14.1</span></code></pre></td></tr></table></div></figure>


<p>Show services:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get services
</span><span class='line'>NAME                    TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)           AGE
</span><span class='line'>kubernetes              ClusterIP   10.32.0.1      &lt;none&gt;        443/TCP           20h
</span><span class='line'>openfaas                ClusterIP   10.41.47.185   &lt;none&gt;        80/TCP            9h
</span><span class='line'>python                  ClusterIP   10.42.56.141   &lt;none&gt;        80/TCP            9h
</span><span class='line'>rancher                 ClusterIP   10.32.41.218   &lt;none&gt;        80/TCP            9h</span></code></pre></td></tr></table></div></figure>


<p>Show Pods:</p>

<p><em>To see pods from the kube-system namespace add -n kube-system</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get pods
</span><span class='line'>NAME                                     READY   STATUS    RESTARTS   AGE
</span><span class='line'>openfaas-cffdddc4-lvn5w                  1/1     Running   0          9h
</span><span class='line'>openfaas-cffdddc4-wbcl6                  1/1     Running   0          9h
</span><span class='line'>python-65ccf9c74b-8kmgp                  1/1     Running   0          9h
</span><span class='line'>python-65ccf9c74b-dgnqb                  1/1     Running   0          9h
</span><span class='line'>rancher-597b6b8554-mgcjr                 1/1     Running   0          9h
</span><span class='line'>rancher-597b6b8554-mpk62                 1/1     Running   0          9h</span></code></pre></td></tr></table></div></figure>


<p>Show deployments:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get deployments -o wide
</span><span class='line'>NAME                    READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS  IMAGES                      SELECTOR
</span><span class='line'>openfaas                2/2     2            2           9h    logo        ruanbekker/logos:openfaas   app=logo,task=openfaas
</span><span class='line'>python                  2/2     2            2           9h    logo        ruanbekker/logos:python     app=logo,task=python
</span><span class='line'>rancher                 2/2     2            2           9h    logo        ruanbekker/logos:rancher    app=logo,task=rancher</span></code></pre></td></tr></table></div></figure>


<p>Show ingress:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get ingress -o wide
</span><span class='line'>NAME      HOSTS                                                          ADDRESS   PORTS   AGE
</span><span class='line'>logo      openfaas.domain.com,rancher.domain.com,python.domain.com       80      9h</span></code></pre></td></tr></table></div></figure>


<p>Show system ingress:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get ingress -o wide -n kube-system
</span><span class='line'>NAME             HOSTS                     ADDRESS   PORTS   AGE
</span><span class='line'>traefik-web-ui   traefik-ui.domain.com               80      9h</span></code></pre></td></tr></table></div></figure>


<h2>Access your Applications</h2>

<p>Access the Traefik-UI, and filter for one of the applications. Let&rsquo;s take OpenFaaS for an example:</p>

<p><img src="https://user-images.githubusercontent.com/567298/59177432-63418080-8b5c-11e9-8e54-20600508e510.png" alt="image" /></p>

<p>Access the OpenFaaS Page via the URL:</p>

<p><img src="https://user-images.githubusercontent.com/567298/59177206-a4856080-8b5b-11e9-8954-238590f18e5c.png" alt="image" /></p>

<h2>Resources</h2>

<ul>
<li><a href="https://docs.traefik.io/user-guide/kubernetes/">https://docs.traefik.io/user-guide/kubernetes/</a></li>
</ul>


<center>
        <script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script>
</center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Out Scaleways Kapsule Their Kubernetes as a Service Offering]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/06/10/testing-out-scaleways-kapsule-their-kubernetes-as-a-service-offering/"/>
    <updated>2019-06-10T18:28:45+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/06/10/testing-out-scaleways-kapsule-their-kubernetes-as-a-service-offering</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/59177864-a5b78d00-8b5d-11e9-931c-5b5dd4e81805.png" alt="" /></p>

<p>At this time of writing (2019.06.10) Scaleway&rsquo;s Kubernetes as a Service, named Kapsule is in Private Beta and got access and pretty stoked on how easy it is to provision a Kubernetes cluster.</p>

<h2>What are we doing today?</h2>

<p>In this tutorial I will show you how easy it is to provision a 3 node Kubernetes Cluster on Scaleway. In the upcoming tutorial, I will create traefik as an ingress controller and deploy applications to our cluster. <a href="https://github.com/ruanbekker/traefik-kubernetes-scaleway-demo">Github Repo Version available for now</a></p>

<h2>Provision a Kapsule Cluster</h2>

<p>Head over to Kapsule and provision a Kubernetes Cluster:</p>

<p><img src="https://user-images.githubusercontent.com/567298/59164353-e71f4c80-8b0b-11e9-8f5c-7c65db1af7b2.png" alt="" /></p>

<p>At this point in time, I will only create a one node &ldquo;cluster&rdquo;, as I want to show how to add pools after the intial creation.</p>

<p>After the cluster has been provisioned, you will get information about your endpoints from the Cluster Infromation Section, which we will need for our ingresses:</p>

<p><img src="https://user-images.githubusercontent.com/567298/59180685-df8c9180-8b65-11e9-82aa-05ee3cd42c78.png" alt="" /></p>

<p>Scroll down to download your config:</p>

<p><img src="https://user-images.githubusercontent.com/567298/59164356-f56d6880-8b0b-11e9-8c00-34dff0ba61fb.png" alt="" /></p>

<p>Move your config in place:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mv ~/Downloads/kubeconfig-k8s-mystifying-torvalds.yaml ~/.kube/config</span></code></pre></td></tr></table></div></figure>


<h2>Interact with your Cluster</h2>

<p>Test the connection by getting the info of your nodes in your kubernetes cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get node
</span><span class='line'>NAME                                             STATUS    ROLES     AGE       VERSION
</span><span class='line'>scw-k8s-mystifying-torvalds-default-7f263aabab   Ready     &lt;none&gt;    4m        v1.14.1</span></code></pre></td></tr></table></div></figure>


<h2>Add more nodes:</h2>

<p>Provision another pool with 2 more nodes in our cluster:</p>

<p><img src="https://user-images.githubusercontent.com/567298/59164387-4e3d0100-8b0c-11e9-8633-b3fc680ac4cd.png" alt="" /></p>

<p>After the pool has been provisioned, verified that they have joined the cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get nodes
</span><span class='line'>NAME                                             STATUS    ROLES     AGE       VERSION
</span><span class='line'>scw-k8s-mystifying-torvald-jovial-mclar-25a942   Ready     &lt;none&gt;    2m        v1.14.1
</span><span class='line'>scw-k8s-mystifying-torvald-jovial-mclar-eaf1a2   Ready     &lt;none&gt;    2m        v1.14.1
</span><span class='line'>scw-k8s-mystifying-torvalds-default-7f263aabab   Ready     &lt;none&gt;    15m       v1.14.1</span></code></pre></td></tr></table></div></figure>


<h2>Master / Node Capabilities</h2>

<p>Usually, I will label master nodes as master: <code>node-role.kubernetes.io/master</code> and worker nodes as nodes: <code>node-role.kubernetes.io/node</code> to allow container scheduling only on the worker nodes. But Scaleway manages this on their end and when you list your nodes, the nodes that you see are your &ldquo;worker&rdquo; nodes.</p>

<p>The master nodes are managed by Scaleway.</p>

<h2>Well Done Scaleway</h2>

<p>Just one more reason I really love Kapsule. Simplicity at its best, well done to <a href="https://scaleway.com">Scaleway</a>. I hope most of the people got access to private beta, but if not, im pretty sure they will keep the public informed on public release dates.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Logstash Server for Amazon Elasticsearch Service and Auth With IAM]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/06/04/setup-a-logstash-server-for-amazon-elasticsearch-service-and-auth-with-iam/"/>
    <updated>2019-06-04T23:46:27+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/06/04/setup-a-logstash-server-for-amazon-elasticsearch-service-and-auth-with-iam</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/59209960-ca872100-8bac-11e9-8672-8c6af502afe0.png" alt="logstash" /></p>

<p>As many of you might know, when you deploy a ELK stack on Amazon Web Services, you only get E and K in the ELK stack, which is Elasticsearch and Kibana. Here we will be dealing with Logstash on EC2.</p>

<h2>What will we be doing</h2>

<p>In this tutorial we will setup a Logstash Server on EC2, setup a IAM Role and Autenticate Requests to Elasticsearch with an IAM Role, setup Nginx so that logstash can ship logs to Elasticsearch.</p>

<p>I am not fond of working with access key&rsquo;s and secret keys, and if I can stay away from handling secret information the better. So instead of creating a access key and secret key for logstash, we will instead create a IAM Policy that will allow the actions to Elasticsearch, associate that policy to an IAM Role, set EC2 as a trusted entity and strap that IAM Role to the EC2 Instance.</p>

<p>Then we will allow the IAM Role ARN to the Elasticsearch Policy, then when Logstash makes requests against Elasticsearch, it will use the IAM Role to assume temporary credentials to authenticate. That way we don&rsquo;t have to deal with keys. But I mean you can create access keys if that is your preferred method, I&rsquo;m just not a big fan of keeping secret keys.</p>

<p>The benefit of authenticating with IAM, allows you to remove a reverse proxy that is another hop to the path of your target.</p>

<h2>Create the IAM Policy:</h2>

<p>Create a IAM Policy that will allow actions to Elasticsearch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "Version": "2012-10-17",
</span><span class='line'>    "Statement": [
</span><span class='line'>        {
</span><span class='line'>            "Sid": "VisualEditor0",
</span><span class='line'>            "Effect": "Allow",
</span><span class='line'>            "Action": [
</span><span class='line'>                "es:ESHttpHead",
</span><span class='line'>                "es:ESHttpPost",
</span><span class='line'>                "es:ESHttpGet",
</span><span class='line'>                "es:ESHttpPut"
</span><span class='line'>            ],
</span><span class='line'>            "Resource": "arn:aws:es:eu-west-1:0123456789012:domain/my-es-domain"
</span><span class='line'>        }
</span><span class='line'>    ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Create Role logstash-system-es with &ldquo;ec2.amazonaws.com&rdquo; as trusted entity in trust the relationship and associate the above policy to the role.</p>

<h2>Authorize your Role in Elasticsearch Policy</h2>

<p>Head over to your Elasticsearch Domain and configure your Elasticsearch Policy to include your IAM Role to grant requests to your Domain:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "Version": "2012-10-17",
</span><span class='line'>  "Statement": [
</span><span class='line'>    {
</span><span class='line'>      "Effect": "Allow",
</span><span class='line'>      "Principal": {
</span><span class='line'>        "AWS": [
</span><span class='line'>          "arn:aws:iam::0123456789012:role/logstash-system-es"
</span><span class='line'>        ]
</span><span class='line'>      },
</span><span class='line'>      "Action": "es:*",
</span><span class='line'>      "Resource": "arn:aws:es:eu-west-1:0123456789012:domain/my-es-domain/*"
</span><span class='line'>    }
</span><span class='line'>  ]
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>Install Logstash on EC2</h2>

<p>I will be using Ubuntu Server 18. Update the repositories and install dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update && apt upgrade -y
</span><span class='line'>$ apt install build-essential apt-transport-https -y
</span><span class='line'>$ wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
</span><span class='line'>$ echo "deb https://artifacts.elastic.co/packages/6.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-6.x.list
</span><span class='line'>$ apt update</span></code></pre></td></tr></table></div></figure>


<p>As logstash requires Java, install the the Java OpenJDK Runtime Environment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt install default-jre -y</span></code></pre></td></tr></table></div></figure>


<p>Verify that Java is installed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ java -version
</span><span class='line'>openjdk version "11.0.3" 2019-04-16
</span><span class='line'>OpenJDK Runtime Environment (build 11.0.3+7-Ubuntu-1ubuntu218.04.1)
</span><span class='line'>OpenJDK 64-Bit Server VM (build 11.0.3+7-Ubuntu-1ubuntu218.04.1, mixed mode, sharing)</span></code></pre></td></tr></table></div></figure>


<p>Now, install logstash and enable the service on boot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt install logstash -y
</span><span class='line'>$ systemctl enable logstash.service
</span><span class='line'>$ service logstash stop</span></code></pre></td></tr></table></div></figure>


<h2>Install the Amazon ES Logstash Output Plugin</h2>

<p>For us to be able to authenticate using IAM, we should use the Amazon-ES Logstash Output Plugin. Update and install the plugin:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ /usr/share/logstash/bin/logstash-plugin update
</span><span class='line'>$ /usr/share/logstash/bin/logstash-plugin install logstash-output-amazon_es</span></code></pre></td></tr></table></div></figure>


<h2>Configure Logstash</h2>

<p>I like to split up my configuration in 3 parts, (input, filter, output).</p>

<p>Let&rsquo;s create the input configuration: <code>/etc/logstash/conf.d/10-input.conf</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>input {
</span><span class='line'>  file {
</span><span class='line'>    path =&gt; "/var/log/nginx/access.log"
</span><span class='line'>    start_position =&gt; "beginning"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Our filter configuration: <code>/etc/logstash/conf.d/20-filter.conf</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>filter {
</span><span class='line'>  grok {
</span><span class='line'>    match =&gt; { "message" =&gt; "%{HTTPD_COMMONLOG}" }
</span><span class='line'>  }
</span><span class='line'>  mutate {
</span><span class='line'>    add_field =&gt; {
</span><span class='line'>      "custom_field1" =&gt; "hello from: %{host}"
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>And lastly, our output configuration: <code>/etc/logstash/conf.d/30-outputs.conf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>output {
</span><span class='line'>  amazon_es {
</span><span class='line'>      hosts =&gt; ["my-es-domain.abcdef.eu-west-1.es.amazonaws.com"]
</span><span class='line'>      index =&gt; "new-logstash-%{+YYYY.MM.dd}"
</span><span class='line'>      region =&gt; "eu-west-1"
</span><span class='line'>      aws_access_key_id =&gt; ''
</span><span class='line'>      aws_secret_access_key =&gt; ''
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Note that the <code>aws_</code> directives has been left empty as that seems to be the way it needs to be set when using roles. Authentication will be assumed via the Role which is associated to the EC2 Instance.</p>

<p>If you are using access keys, you can populate them there.</p>

<h2>Start Logstash</h2>

<p>Start logstash:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ service logstash start</span></code></pre></td></tr></table></div></figure>


<p>Tail the logs to see if logstash starts up correctly, it should look more or less like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tail -f /var/log/logstash/logstash-plain.log
</span><span class='line'>
</span><span class='line'>[2019-06-04T16:38:12,087][INFO ][logstash.runner          ] Starting Logstash {"logstash.version"=&gt;"6.8.0"}
</span><span class='line'>[2019-06-04T16:38:14,480][INFO ][logstash.pipeline        ] Starting pipeline {:pipeline_id=&gt;"main", "pipeline.workers"=&gt;2, "pipeline.batch.size"=&gt;125, "pipeline.batch.delay"=&gt;50}
</span><span class='line'>[2019-06-04T16:38:15,226][INFO ][logstash.outputs.elasticsearch] Elasticsearch pool URLs updated {:changes=&gt;{:removed=&gt;[], :added=&gt;[https://search-my-es-domain-xx.eu-west-1.es.amazonaws.com:443/]}}
</span><span class='line'>[2019-06-04T16:38:15,234][INFO ][logstash.outputs.elasticsearch] Running health check to see if an Elasticsearch connection is working {:healthcheck_url=&gt;https://search-my-es-domain-xx.eu-west-1.es.amazonaws.com:443/, :path=&gt;"/"}</span></code></pre></td></tr></table></div></figure>


<h2>Install Nginx</h2>

<p>As you noticed, I have specified <code>/var/log/nginx/access.log</code> as my input file for logstash, as we will test logstash by shipping nginx access logs to Elasticsearch Service.</p>

<p>Install Nginx:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt install nginx -y</span></code></pre></td></tr></table></div></figure>


<p>Start the service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart nginx 
</span><span class='line'>$ systemctl enable nginx</span></code></pre></td></tr></table></div></figure>


<p>Make a GET request on your Nginx Web Server and inspect the log on Kibana, where it should look like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/58917559-4dc8f280-8727-11e9-9e9d-7950217abe34.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Vagrant to Setup a Local Development Environment on Linux]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/30/use-vagrant-to-setup-a-local-development-environment-on-linux/"/>
    <updated>2019-05-30T21:14:15+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/30/use-vagrant-to-setup-a-local-development-environment-on-linux</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/58658188-37cec280-8320-11e9-90ca-1226b3ccb292.png" alt="vagrant" /></p>

<p><strong><a href="https://www.vagrantup.com">Vagrant!</a></strong> Another super product from Hashicorp.</p>

<p>Vagrant makes it really easy to provision virtual servers, which they refer as &ldquo;boxes&rdquo;, that enables developers to run their jobs/tasks/applications in a really easy and fast way. Vagrant utilizes a declarative configuration model, so you can describe which OS you want, bootstrap them with installation instructions as soon as it boots, etc.</p>

<h2>What are we doing today?</h2>

<p>When completing this tutorial, you should be able to launch a Ubuntu Virtual Server locally with Vagrant and using the Virtualbox Provider which will be responsible for running our VM&rsquo;s.</p>

<p>I am running this on a Ubuntu 19 Desktop, but you can run this on Mac/Windows/Linux. First we will install Virtualbox, then Vagrant, then we will provision a Ubuntu box and I will also show how to inject shell commands into your Vagrantfile so that you can provision software to your VM, and also forward traffic to a web server through your host to the guest.</p>

<h2>Virtualbox</h2>

<p>Install some pre-requirements:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install dkms build-essential linux-headers-`uname -r`</span></code></pre></td></tr></table></div></figure>


<p>Head over to Virtualbox&rsquo;s <a href="https://www.virtualbox.org/wiki/Downloads">download page</a> and grab the latest version of virtualbox and install it.</p>

<p>After the installation run <code>vboxconfig</code> to build the kernel modules. If you get the error that I received as seen below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo /sbin/vboxconfig
</span><span class='line'>
</span><span class='line'>vboxdrv.sh: Building VirtualBox kernel modules
</span><span class='line'>vboxdrv.sh: Starting VirtualBox services
</span><span class='line'>vboxdrv.sh: Building VirtualBox kernel modules
</span><span class='line'>vboxdrv.sh: failed: modprobe vboxdrv failed. Please use 'dmesg' to find out why</span></code></pre></td></tr></table></div></figure>


<p>This <a href="https://askubuntu.com/questions/900118/vboxdrv-sh-failed-modprobe-vboxdrv-failed-please-use-dmesg-to-find-out-why">resource on askubuntu.com</a> helped me out. In short, theres a requirement that all the kernel modules must be signed by a key trusted by the UEFI system.</p>

<p>To resolve:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install linux-headers-generic build-essential dkms
</span><span class='line'>$ sudo apt-get remove --purge virtualbox-dkms
</span><span class='line'>$ sudo apt-get install virtualbox-dkms
</span><span class='line'>
</span><span class='line'>$ openssl req -new -x509 -newkey rsa:2048 -keyout MOK.priv -outform DER -out MOK.der -nodes -days 36500 -subj "/CN=Descriptive common name/"
</span><span class='line'>$ sudo /usr/src/linux-headers-$(uname -r)/scripts/sign-file sha256 ./MOK.priv ./MOK.der $(modinfo -n vboxdrv)
</span><span class='line'>$ sudo mokutil --import MOK.der</span></code></pre></td></tr></table></div></figure>


<p>Remember the password, as you will require it when you reboot. You will get the option to &ldquo;Enroll MOK&rdquo;, select that, enter the initial password and reboot.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo reboot</span></code></pre></td></tr></table></div></figure>


<p>You should be able to get a response from the binary:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ VirtualBox -h
</span><span class='line'>Oracle VM VirtualBox VM Selector v6.0.6_Ubuntu</span></code></pre></td></tr></table></div></figure>


<h2>Install Vagrant</h2>

<p>Head over to Vagrant&rsquo;s <a href="https://www.vagrantup.com/docs/installation/">installation page</a>, get the latest version for your operating system and install it.</p>

<p>After installing it you should get the following response:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant --version
</span><span class='line'>Vagrant 2.2.4</span></code></pre></td></tr></table></div></figure>


<h2>Provision a Box with Vagrant</h2>

<p>When you head over to <a href="https://app.vagrantup.com/boxes/search">app.vagrantup.com/boxes/search</a> you can select the pre-packed operating system of your choice. As for this demonstration, I went with: <code>ubuntu/trusty64</code></p>

<p>First we will need to initialize a new Vagrant environment by creating a Vagrantfile, as we will be passing the name of our operating system, it will be populated in our Vagrantfile:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant init ubuntu/trusty64
</span><span class='line'>
</span><span class='line'>A `Vagrantfile` has been placed in this directory. You are now
</span><span class='line'>ready to `vagrant up` your first virtual environment! Please read
</span><span class='line'>the comments in the Vagrantfile as well as documentation on
</span><span class='line'>`vagrantup.com` for more information on using Vagrant.</span></code></pre></td></tr></table></div></figure>


<p>Now since the Vagrantfile has been placed in our current working directory, let&rsquo;s have a look at it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat Vagrantfile
</span><span class='line'># -*- mode: ruby -*-
</span><span class='line'># vi: set ft=ruby :
</span><span class='line'>
</span><span class='line'>Vagrant.configure("2") do |config|
</span><span class='line'>  config.vm.box = "ubuntu/trusty64"
</span><span class='line'>  # config.vm.network "forwarded_port", guest: 80, host: 8080
</span><span class='line'>  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
</span><span class='line'>  # config.vm.network "private_network", ip: "192.168.33.10"
</span><span class='line'>  # config.vm.network "public_network"
</span><span class='line'>  # config.vm.synced_folder "../data", "/vagrant_data"
</span><span class='line'>  #
</span><span class='line'>  # config.vm.provider "virtualbox" do |vb|
</span><span class='line'>  #   vb.gui = true
</span><span class='line'>  #   vb.memory = "1024"
</span><span class='line'>  # end
</span><span class='line'>  #
</span><span class='line'>  # config.vm.provision "shell", inline: &lt;&lt;-SHELL
</span><span class='line'>  #   apt-get update
</span><span class='line'>  #   apt-get install -y apache2
</span><span class='line'>  # SHELL
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>As you can see the Vagrantfile has a set of instructions of how we want our VM to be. At this moment you will only see that the image is defined as <code>ubuntu/trusty64</code>.</p>

<p>Let&rsquo;s start our VM:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant up
</span><span class='line'>
</span><span class='line'>Bringing machine 'default' up with 'virtualbox' provider...
</span><span class='line'>==&gt; default: Importing base box 'ubuntu/trusty64'...
</span><span class='line'>==&gt; default: Matching MAC address for NAT networking...
</span><span class='line'>==&gt; default: Checking if box 'ubuntu/trusty64' version '20190429.0.1' is up to date...
</span><span class='line'>==&gt; default: Setting the name of the VM: vagrant_default_1559238982328_97737
</span><span class='line'>==&gt; default: Clearing any previously set forwarded ports...
</span><span class='line'>    default: Adapter 1: nat
</span><span class='line'>==&gt; default: Forwarding ports...
</span><span class='line'>    default: 22 (guest) =&gt; 2222 (host) (adapter 1)
</span><span class='line'>==&gt; default: Booting VM...
</span><span class='line'>==&gt; default: Waiting for machine to boot. This may take a few minutes...
</span><span class='line'>    default: SSH address: 127.0.0.1:2222
</span><span class='line'>    default: SSH username: vagrant
</span><span class='line'>    default: SSH auth method: private key
</span><span class='line'>    default:
</span><span class='line'>    default: Vagrant insecure key detected. Vagrant will automatically replace
</span><span class='line'>    default: this with a newly generated keypair for better security.</span></code></pre></td></tr></table></div></figure>


<p>Now that our VM has been booted, we can ssh to our server by simply running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant ssh
</span><span class='line'>ubuntu-server $</span></code></pre></td></tr></table></div></figure>


<h2>Making changes to your config</h2>

<p>So let&rsquo;s say we want to edit our Vagrantfile to provide shell commands to install nginx and forward our host port 8080 to our guest port 80, so that we can access our VM&rsquo;s webserver on localhost using port 8080.</p>

<p>Edit your Vagrantfile so that it looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;ubuntu/trusty64&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;forwarded_port&quot;</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">80</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="mi">8080</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> <span class="ss">inline</span><span class="p">:</span> <span class="o">&lt;&lt;-</span><span class="no">SHELL</span>
</span><span class='line'><span class="sh">    apt-get update</span>
</span><span class='line'><span class="sh">    apt-get install nginx -y</span>
</span><span class='line'><span class="no">  SHELL</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to call the shell activity we need to call the provision argument:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">vagrant</span> <span class="n">provision</span>
</span></code></pre></td></tr></table></div></figure>


<p>That will install nginx to our VM, then call reload to change to port configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">vagrant</span> <span class="n">reload</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that everything is in order, we can access our nginx web server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">curl</span> <span class="o">-</span><span class="n">i</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">8080</span>
</span><span class='line'><span class="no">HTTP</span><span class="o">/</span><span class="mi">1</span><span class="o">.</span><span class="mi">1</span> <span class="mi">200</span>
</span><span class='line'><span class="ss">Server</span><span class="p">:</span> <span class="n">nginx</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Tear down</h2>

<p>Delete the server by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">vagrant</span> <span class="n">destroy</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prometheus Series of Tutorials for Your Guide to Epic Metrics]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/17/prometheus-series-of-tutorials-for-your-guide-to-epic-metrics/"/>
    <updated>2019-05-17T20:24:40+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/17/prometheus-series-of-tutorials-for-your-guide-to-epic-metrics</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57307750-696bb980-70e5-11e9-9b0b-73ad88bde6a3.png" alt="prometheus" /></p>

<p>This is a curated list of tutorials of prometheus, from installing prometheus, installing grafana, exporters, docker versions of the prometheus / grafana / node exporter stack, etc.</p>

<h2>The List</h2>

<ul>
<li>Install <a href="http://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">Prometheus</a></li>
<li>Install <a href="http://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">Node Exporter</a></li>
<li>Install <a href="http://blog.ruanbekker.com/blog/2019/05/17/install-pushgateway-to-expose-metrics-to-prometheus/">Pushgateway</a></li>
<li>Install <a href="http://blog.ruanbekker.com/blog/2019/05/17/install-grafana-to-visualize-your-metrics-from-datasources-such-as-prometheus-on-linux/">Grafana</a></li>
<li>Install <a href="http://blog.ruanbekker.com/blog/2019/05/17/install-alertmanager-to-alert-based-on-metrics-from-prometheus/">Alertmananger</a></li>
<li>Install <a href="http://blog.ruanbekker.com/blog/2019/05/17/install-blackbox-exporter-to-monitor-websites-with-prometheus/">Blackbox Exporter</a></li>
<li>Install <a href="">Docker Prometheus Grafana Stack</a></li>
</ul>


<p>This list will be updated as I publish more tutorials</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Blackbox Exporter to Monitor Websites With Prometheus]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/17/install-blackbox-exporter-to-monitor-websites-with-prometheus/"/>
    <updated>2019-05-17T18:55:15+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/17/install-blackbox-exporter-to-monitor-websites-with-prometheus</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57307750-696bb980-70e5-11e9-9b0b-73ad88bde6a3.png" alt="prometheus" /></p>

<p>Blackbox Exporter by Prometheus allows probing over endpoints such as http, https, icmp, tcp and dns.</p>

<h2>What will we be doing</h2>

<p>In this tutorial we will install the blackbox exporter on linux. Im assuming that you have already <a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">set up prometheus</a>.</p>

<h2>Install the Blackbox Exporter</h2>

<p>First create the blackbox exporter user:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ useradd --no-create-home --shell /bin/false blackbox_exporter</span></code></pre></td></tr></table></div></figure>


<p>Download blackbox exporter and extract:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://github.com/prometheus/blackbox_exporter/releases/download/v0.14.0/blackbox_exporter-0.14.0.linux-amd64.tar.gz
</span><span class='line'>$ tar -xvf blackbox_exporter-0.14.0.linux-amd64.tar.gz</span></code></pre></td></tr></table></div></figure>


<p>Move the binaries in place and change the ownership:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cp blackbox_exporter-0.14.0.linux-amd64/blackbox_exporter /usr/local/bin/blackbox_exporter
</span><span class='line'>$ chown blackbox_exporter:blackbox_exporter /usr/local/bin/blackbox_exporter</span></code></pre></td></tr></table></div></figure>


<p>Remove the downloaded archive:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rm -rf blackbox_exporter-0.14.0.linux-amd64*</span></code></pre></td></tr></table></div></figure>


<p>Create the blackbox directory and create the config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir /etc/blackbox_exporter
</span><span class='line'>$ vim /etc/blackbox_exporter/blackbox.yml</span></code></pre></td></tr></table></div></figure>


<p>Populate this config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>modules:
</span><span class='line'>  http_2xx:
</span><span class='line'>    prober: http
</span><span class='line'>    timeout: 5s
</span><span class='line'>    http:
</span><span class='line'>      valid_status_codes: []
</span><span class='line'>      method: GET</span></code></pre></td></tr></table></div></figure>


<p>Update the permissions of the config so that the user has ownership:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chown blackbox_exporter:blackbox_exporter /etc/blackbox_exporter/blackbox.yml</span></code></pre></td></tr></table></div></figure>


<p>Create the systemd unit file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/systemd/system/blackbox_exporter.service</span></code></pre></td></tr></table></div></figure>


<p>Populate the systemd unit file configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'>Description=Blackbox Exporter
</span><span class='line'>Wants=network-online.target
</span><span class='line'>After=network-online.target
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>User=blackbox_exporter
</span><span class='line'>Group=blackbox_exporter
</span><span class='line'>Type=simple
</span><span class='line'>ExecStart=/usr/local/bin/blackbox_exporter --config.file /etc/blackbox_exporter/blackbox.yml
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=multi-user.target</span></code></pre></td></tr></table></div></figure>


<p>Reload the systemd daemon and restart the service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl daemon-reload
</span><span class='line'>$ systemctl start blackbox_exporter</span></code></pre></td></tr></table></div></figure>


<p>The service should be started, verify:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl status blackbox_exporter
</span><span class='line'>  blackbox_exporter.service - Blackbox Exporter
</span><span class='line'>   Loaded: loaded (/etc/systemd/system/blackbox_exporter.service; disabled; vendor preset: enabled)
</span><span class='line'>   Active: active (running) since Wed 2019-05-08 00:02:40 UTC; 5s ago
</span><span class='line'> Main PID: 10084 (blackbox_export)
</span><span class='line'>    Tasks: 6 (limit: 4704)
</span><span class='line'>   CGroup: /system.slice/blackbox_exporter.service
</span><span class='line'>           └─10084 /usr/local/bin/blackbox_exporter --config.file /etc/blackbox_exporter/blackbox.yml
</span><span class='line'>
</span><span class='line'>May 08 00:02:40 ip-172-31-41-126 systemd[1]: Started Blackbox Exporter.
</span><span class='line'>May 08 00:02:40 ip-172-31-41-126 blackbox_exporter[10084]: level=info ts=2019-05-08T00:02:40.5229204Z caller=main.go:213 msg="Starting blackbox_exporter" version="(version=0.14.0, branch=HEAD, revision=bb
</span><span class='line'>May 08 00:02:40 ip-172-31-41-126 blackbox_exporter[10084]: level=info ts=2019-05-08T00:02:40.52553523Z caller=main.go:226 msg="Loaded config file"
</span><span class='line'>May 08 00:02:40 ip-172-31-41-126 blackbox_exporter[10084]: level=info ts=2019-05-08T00:02:40.525695324Z caller=main.go:330 msg="Listening on address" address=:9115</span></code></pre></td></tr></table></div></figure>


<p>Enable the service on boot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl enable blackbox_exporter</span></code></pre></td></tr></table></div></figure>


<h2>Configure Prometheus</h2>

<p>Next, we need to provide context to prometheus on what to monitor. We will inform prometheus to monitor a web endpoint on port 8080 using the blackbox exporter (we will create a python simplehttpserver to run on port 8080).</p>

<p>Edit the prometheus config <code>/etc/prometheus/prometheus.yml</code> and append the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  - job_name: 'blackbox'
</span><span class='line'>    metrics_path: /probe
</span><span class='line'>    params:
</span><span class='line'>      module: [http_2xx]
</span><span class='line'>    static_configs:
</span><span class='line'>      - targets:
</span><span class='line'>        - http://localhost:8080
</span><span class='line'>    relabel_configs:
</span><span class='line'>      - source_labels: [__address__]
</span><span class='line'>        target_label: __param_target
</span><span class='line'>      - source_labels: [__param_target]
</span><span class='line'>        target_label: instance
</span><span class='line'>      - target_label: __address__
</span><span class='line'>        replacement: localhost:9115</span></code></pre></td></tr></table></div></figure>


<p>Open a new terminal, create a <code>index.html</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo "ok" &gt; index.html</span></code></pre></td></tr></table></div></figure>


<p>Then start a SimpleHTTPServer on port 8080:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python -m SimpleHTTPServer 8080</span></code></pre></td></tr></table></div></figure>


<p>Head back to the previous terminal session and restart prometheus:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart prometheus</span></code></pre></td></tr></table></div></figure>


<h2>Configure the Alarm definition:</h2>

<p>Create a alarm definition that desribes that defines when to notify when a endpoint goes down:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/prometheus/alert.rules.yml</span></code></pre></td></tr></table></div></figure>


<p>And our alert definition:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>groups:
</span><span class='line'>- name: alert.rules
</span><span class='line'>  rules:
</span><span class='line'>  - alert: EndpointDown
</span><span class='line'>    expr: probe_success == 0
</span><span class='line'>    for: 10s
</span><span class='line'>    labels:
</span><span class='line'>      severity: "critical"
</span><span class='line'>    annotations:
</span><span class='line'>      summary: "Endpoint  down"</span></code></pre></td></tr></table></div></figure>


<p>Ensure that the permission is set:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chown prometheus:prometheus /etc/prometheus/alert.rules.yml</span></code></pre></td></tr></table></div></figure>


<p>Use the <code>promtool</code> to validate that the alert is correctly configured:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ promtool check rules /etc/prometheus/alert.rules.yml
</span><span class='line'>Checking /etc/prometheus/alert.rules.yml
</span><span class='line'>  SUCCESS: 1 rules found</span></code></pre></td></tr></table></div></figure>


<p>If everything is good, restart prometheus:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart prometheus</span></code></pre></td></tr></table></div></figure>


<h2>Blackbox Exporter Dashboard</h2>

<p>To install a blackbox exporter dashboard: <a href="https://grafana.com/dashboards/7587">https://grafana.com/dashboards/7587</a>, create a new dashboard, select import, provide the ID: <code>7587</code>, select the prometheus datasource and select save.</p>

<p>The dashboard should look similar to this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57947217-99357100-78de-11e9-9108-9338c97ca59d.png" alt="blackbox-exporter" /></p>

<h2>Next up, Alertmanager</h2>

<p>In the <a href="https://blog.ruanbekker.com/blog/2019/05/17/install-alertmanager-to-alert-based-on-metrics-from-prometheus/">next tutorial</a> we will setup Alertmanager to alert when our endpoint goes down</p>

<h2>Resources</h2>

<p>See all <a href="https://blog.ruanbekker.com/blog/categories/prometheus/">#prometheus</a> blogposts</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Alertmanager to Alert Based on Metrics From Prometheus]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/17/install-alertmanager-to-alert-based-on-metrics-from-prometheus/"/>
    <updated>2019-05-17T18:49:26+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/17/install-alertmanager-to-alert-based-on-metrics-from-prometheus</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57307750-696bb980-70e5-11e9-9b0b-73ad88bde6a3.png" alt="prometheus" /></p>

<p>So we are pushing our time series metrics into prometheus, and now we would like to alarm based on certain metric dimensions. That&rsquo;s where alertmanager fits in. We can setup targets and rules, once rules for our targets does not match, we can alarm to destinations suchs as slack, email etc.</p>

<h2>What we will be doing:</h2>

<p>In our previous tutorial we installed blackbox exporter to probe a endpoint. Now we will install Alertmanager and configure an alert to notify us via email and slack when our endpoint goes down. See <a href="https://blog.ruanbekker.com/blog/2019/05/17/install-blackbox-exporter-to-monitor-websites-with-prometheus/">this post</a> if you have not seen the previous tutorial.</p>

<h2>Install Alertmanager</h2>

<p>Create the user for alertmanager:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ useradd --no-create-home --shell /bin/false alertmanager</span></code></pre></td></tr></table></div></figure>


<p>Download alertmanager and extract:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ https://github.com/prometheus/alertmanager/releases/download/v0.17.0/alertmanager-0.17.0.linux-amd64.tar.gz
</span><span class='line'>$ tar -xvf alertmanager-0.17.0.linux-amd64.tar.gz</span></code></pre></td></tr></table></div></figure>


<p>Move alertmanager and amtool birnaries in place:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cp alertmanager-0.17.0.linux-amd64/alertmanager /usr/local/bin/
</span><span class='line'>$ cp alertmanager-0.17.0.linux-amd64/amtool /usr/local/bin/</span></code></pre></td></tr></table></div></figure>


<p>Ensure that the correct permissions are in place:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chown alertmanager:alertmanager /usr/local/bin/alertmanager
</span><span class='line'>$ chown alertmanager:alertmanager /usr/local/bin/amtool</span></code></pre></td></tr></table></div></figure>


<p>Cleanup:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rm -rf alertmanager-0.17.0*</span></code></pre></td></tr></table></div></figure>


<h2>Configure Alertmanager:</h2>

<p>Create the alertmanager directory and configure the global alertmanager configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir /etc/alertmanager
</span><span class='line'>$ vim /etc/alertmanager/alertmanager.yml</span></code></pre></td></tr></table></div></figure>


<p>Provide the global config and ensure to populate your personal information. See <a href="https://blog.ruanbekker.com/blog/2019/04/18/setup-a-slack-webhook-for-sending-messages-from-applications/">this post</a> to create a slack webhook.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global:
</span><span class='line'>  smtp_smarthost: 'smtp.domain.net:587'
</span><span class='line'>  smtp_from: 'AlertManager &lt;mailer@domain.com&gt;'
</span><span class='line'>  smtp_require_tls: true
</span><span class='line'>  smtp_hello: 'alertmanager'
</span><span class='line'>  smtp_auth_username: 'username'
</span><span class='line'>  smtp_auth_password: 'password'
</span><span class='line'>
</span><span class='line'>  slack_api_url: 'https://hooks.slack.com/services/x/xx/xxx'
</span><span class='line'>
</span><span class='line'>route:
</span><span class='line'>  group_by: ['instance', 'alert']
</span><span class='line'>  group_wait: 30s
</span><span class='line'>  group_interval: 5m
</span><span class='line'>  repeat_interval: 3h
</span><span class='line'>  receiver: team-1
</span><span class='line'>
</span><span class='line'>receivers:
</span><span class='line'>  - name: 'team-1'
</span><span class='line'>    email_configs:
</span><span class='line'>      - to: 'user@domain.com'
</span><span class='line'>    slack_configs:
</span><span class='line'>      # https://prometheus.io/docs/alerting/configuration/#slack_config
</span><span class='line'>      - channel: 'system_events'
</span><span class='line'>      - username: 'AlertManager'
</span><span class='line'>      - icon_emoji: ':joy:'</span></code></pre></td></tr></table></div></figure>


<p>Ensure the permissions are in place:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chown alertmanager:alertmanager -R /etc/alertmanager</span></code></pre></td></tr></table></div></figure>


<p>Create the alertmanager systemd unit file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/systemd/system/alertmanager.service</span></code></pre></td></tr></table></div></figure>


<p>And supply the unit file configuration. Note that I am exposing port <code>9093</code> directly as Im not using a reverse proxy.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'>Description=Alertmanager
</span><span class='line'>Wants=network-online.target
</span><span class='line'>After=network-online.target
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>User=alertmanager
</span><span class='line'>Group=alertmanager
</span><span class='line'>Type=simple
</span><span class='line'>WorkingDirectory=/etc/alertmanager/
</span><span class='line'>ExecStart=/usr/local/bin/alertmanager --config.file=/etc/alertmanager/alertmanager.yml --web.external-url http://0.0.0.0:9093
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=multi-user.target</span></code></pre></td></tr></table></div></figure>


<p>Now we need to inform prometheus that we will send alerts to alertmanager to it&rsquo;s exposed port:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/prometheus/prometheus.yml</span></code></pre></td></tr></table></div></figure>


<p>And supply the alertmanager configuration for prometheus:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>alerting:
</span><span class='line'>  alertmanagers:
</span><span class='line'>  - static_configs:
</span><span class='line'>    - targets:
</span><span class='line'>      - localhost:9093
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>So when we get alerted, our alert will include a link to our alert. We need to provide the base url of that alert. That get&rsquo;s done in our alertmanager systemd unit file: <code>/etc/systemd/system/alertmanager.service</code> under <code>--web.external-url</code> passing the alertmanager base ip address:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'>Description=Alertmanager
</span><span class='line'>Wants=network-online.target
</span><span class='line'>After=network-online.target
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>User=alertmanager
</span><span class='line'>Group=alertmanager
</span><span class='line'>Type=simple
</span><span class='line'>WorkingDirectory=/etc/alertmanager/
</span><span class='line'>ExecStart=/usr/local/bin/alertmanager --config.file=/etc/alertmanager/alertmanager.yml --web.external-url http://&lt;your.alertmanager.ip.address&gt;:9093
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=multi-user.target</span></code></pre></td></tr></table></div></figure>


<p>Then we need to do the same with the prometheus systemd unit file: <code>/etc/systemd/system/prometheus.service</code> under <code>--web.external-url</code> passing the prometheus base ip address:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'>Description=Prometheus
</span><span class='line'>Wants=network-online.target
</span><span class='line'>After=network-online.target
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>User=prometheus
</span><span class='line'>Group=prometheus
</span><span class='line'>Type=simple
</span><span class='line'>ExecStart=/usr/local/bin/prometheus \
</span><span class='line'>    --config.file /etc/prometheus/prometheus.yml \
</span><span class='line'>    --storage.tsdb.path /var/lib/prometheus/ \
</span><span class='line'>    --web.console.templates=/etc/prometheus/consoles \
</span><span class='line'>    --web.console.libraries=/etc/prometheus/console_libraries \
</span><span class='line'>    --web.external-url http://&lt;your.prometheus.ip.address&gt;
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=multi-user.target</span></code></pre></td></tr></table></div></figure>


<p>Since we have edited the systemd unit files, we need to reload the systemd daemon:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl daemon-reload</span></code></pre></td></tr></table></div></figure>


<p>Then restart prometheus and alertmanager:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart prometheus
</span><span class='line'>$ systemctl restart alertmanager</span></code></pre></td></tr></table></div></figure>


<p>Inspect the status of alertmanager and prometheus:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl status alertmanager
</span><span class='line'>$ systemctl status prometheus</span></code></pre></td></tr></table></div></figure>


<p>If everything seems good, enable alertmanager on boot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl enable alertmanager</span></code></pre></td></tr></table></div></figure>


<h2>Access Alertmanager:</h2>

<p>Access alertmanager on your endpoint on port <code>9093</code>:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57946361-69856980-78dc-11e9-8c48-ebcc3b0d201e.png" alt="alertmanager" /></p>

<p>From our previous tutorial we started a local web service on port <code>8080</code> that is being monitored by prometheus. Let&rsquo;s stop that service to test out the alerting. You should get a notification via email:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57946586-f29ca080-78dc-11e9-983c-6b857ef21bae.png" alt="alertmanager" /></p>

<p>And the notification via slack:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57946602-03e5ad00-78dd-11e9-9ecc-c3d58b2ad3ec.png" alt="alertmanager" /></p>

<p>When you start the service again and head over to the prometheus ui under alerts, you will see that the service recovered:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57946647-2677c600-78dd-11e9-95a9-b9f4190172bf.png" alt="prometheus" /></p>

<h2>Install Prometheus Alertmanager Plugin</h2>

<p>Install the Prometheus Alertmanager Plugin in Grafana. Head to the instance where grafana is installed and install the plugin:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ grafana-cli plugins install camptocamp-prometheus-alertmanager-datasource</span></code></pre></td></tr></table></div></figure>


<p>Once the plugin is installed, restart grafana:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ service grafana-server restart</span></code></pre></td></tr></table></div></figure>


<p>Install the dasboard <a href="https://grafana.com/dashboards/8010">grafana.com/dashboards/8010</a>. Create a new datasource, select the prometheus-alertmanager datasource, configure and save.</p>

<p>Add a new dasboard, select import and provide the ID <code>8010</code>, select the prometheus-alertmanager datasource and save. You should see the following (more or less):</p>

<p><img src="https://user-images.githubusercontent.com/567298/57947092-3f34ab80-78de-11e9-904b-f42d5ecd7d0a.png" alt="prometheus-alertmanager" /></p>

<h2>Resources</h2>

<p>See all <a href="https://blog.ruanbekker.com/blog/categories/prometheus/">#prometheus</a> blogposts</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Grafana to Visualize Your Metrics From Datasources Such as Prometheus on Linux]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/17/install-grafana-to-visualize-your-metrics-from-datasources-such-as-prometheus-on-linux/"/>
    <updated>2019-05-17T18:08:02+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/17/install-grafana-to-visualize-your-metrics-from-datasources-such-as-prometheus-on-linux</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57941411-2a045080-78cf-11e9-97f9-47fb8b75a722.png" alt="image" /></p>

<p>Grafana is a Open Source Dashboarding service that allows you to monitor, analyze and graph metrics from datasources such as prometheus, influxdb, elasticsearch, aws cloudwatch, and many more.</p>

<p>Not only is grafana amazing, its super pretty!</p>

<p>Example of how a dashboard might look like:</p>

<p><img width="1279" alt="E24B39B1-23C8-44C5-959D-6E6275F8FE99" src="https://user-images.githubusercontent.com/567298/57942872-d98ef200-78d2-11e9-9370-b130bcc222f7.png"></p>

<h2>What are we doing today</h2>

<p>In this tutorial we will setup grafana on linux. If you have not set up <a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">prometheus</a>, follow <a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">this blogpost</a> to install prometheus.</p>

<h2>Install Grafana</h2>

<p>I will be demonstrating how to install grafana on debian, if you have another operating system, head over to <a href="https://grafana.com/docs/installation/">grafana documentation</a> for other supported operating systems.</p>

<p>Get the gpg key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl https://packages.grafana.com/gpg.key | sudo apt-key add -</span></code></pre></td></tr></table></div></figure>


<p>Import the public keys:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt-key adv --keyserver keyserver.ubuntu.com --recv-keys  8C8C34C524098CB6 </span></code></pre></td></tr></table></div></figure>


<p>Add the latest stable packages to your repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"</span></code></pre></td></tr></table></div></figure>


<p>Install a pre-requirement package:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt install apt-transport-https -y</span></code></pre></td></tr></table></div></figure>


<p>Update the repository index and install grafana:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update && sudo apt install grafana -y</span></code></pre></td></tr></table></div></figure>


<p>Once grafana is installed, start the service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ service grafana-server start</span></code></pre></td></tr></table></div></figure>


<p>Then enable the service on boot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ update-rc.d grafana-server defaults</span></code></pre></td></tr></table></div></figure>


<p>If you want to control the service via systemd:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl daemon-reload
</span><span class='line'>$ systemctl start grafana-server
</span><span class='line'>$ systemctl status grafana-server</span></code></pre></td></tr></table></div></figure>


<h2>Optional: Nginx Reverse Proxy</h2>

<p>If you want to front your grafana instance with a nginx reverse proxy:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/nginx/sites-enabled/grafana
</span><span class='line'>server {
</span><span class='line'>    listen 80;
</span><span class='line'>    server_name grafana.domain.com;
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>        proxy_pass http://127.0.0.1:3000/;
</span><span class='line'>        proxy_redirect http://127.0.0.1:3000/ /;
</span><span class='line'>        proxy_http_version 1.1;
</span><span class='line'>        proxy_set_header Host $host;
</span><span class='line'>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>        proxy_set_header X-Real-IP $remote_addr;
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>Then restart nginx:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart nginx</span></code></pre></td></tr></table></div></figure>


<h2>Access Grafana</h2>

<p>If you are accessing grafana directly, access grafana on <code>http://your-grafana-ip:3000/</code> and your username is <code>admin</code> and password <code>admin</code></p>

<h2>Dashboarding Tutorials</h2>

<p>Have a look at this screencast where the guys from grafana show you how to build dashboards:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/sKNZMtoSHN4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<p>Also have a look at their <a href="https://grafana.com/dashboards">public repository of dashboards</a></p>

<p>For more tutorials on prometheus and metrics have a look at <strong><a href="https://blog.ruanbekker.com/blog/categories/prometheus/">#prometheus</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Pushgateway to Expose Metrics to Prometheus]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/17/install-pushgateway-to-expose-metrics-to-prometheus/"/>
    <updated>2019-05-17T13:04:03+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/17/install-pushgateway-to-expose-metrics-to-prometheus</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57307750-696bb980-70e5-11e9-9b0b-73ad88bde6a3.png" alt="" /></p>

<p>In most cases when we want to scrape a node for metrics, we will install node-exporter on a host and configure prometheus to scrape the configured node to consume metric data. But in certain cases we want to push custom metrics to prometheus. In such cases, we can make use of pushgateway.</p>

<p>Pushgateway allows you to push custom metrics to push gateway&rsquo;s endpoint, then we configure prometheus to scrape push gateway to consume the exposed metrics into prometheus.</p>

<h2>Pre-Requirements</h2>

<p>If you have not set up <a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">Prometheus</a>, head over to <strong><a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">this blogpost</a></strong> to set up prometheus on Linux.</p>

<h2>What we will do?</h2>

<p>In this tutorial, we will setup pushgateway on linux and after pushgateway has been setup, we will push some custom metrics to pushgateway and configure prometheus to scrape metrics from pushgateway.</p>

<h2>Install Pushgateway</h2>

<p>Get the latest version of <a href="https://prometheus.io/download/">pushgateway</a> from prometheus.io, then download and extract:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://github.com/prometheus/pushgateway/releases/download/v0.8.0/pushgateway-0.8.0.linux-amd64.tar.gz
</span><span class='line'>$ tar -xvf pushgateway-0.8.0.linux-amd64.tar.gz</span></code></pre></td></tr></table></div></figure>


<p>Create the <code>pushgateway</code> user:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ useradd --no-create-home --shell /bin/false pushgateway</span></code></pre></td></tr></table></div></figure>


<p>Move the binary in place and update the permissions to the user that we created:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cp pushgateway-0.8.0.linux-amd64/pushgateway /usr/local/bin/pushgateway
</span><span class='line'>$ chown pushgateway:pushgateway /usr/local/bin/pushgateway</span></code></pre></td></tr></table></div></figure>


<p>Create the systemd unit file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat &gt; /etc/systemd/system/pushgateway.service &lt;&lt; EOF
</span><span class='line'>[Unit]
</span><span class='line'>Description=Pushgateway
</span><span class='line'>Wants=network-online.target
</span><span class='line'>After=network-online.target
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>User=pushgateway
</span><span class='line'>Group=pushgateway
</span><span class='line'>Type=simple
</span><span class='line'>ExecStart=/usr/local/bin/pushgateway \
</span><span class='line'>    --web.listen-address=":9091" \
</span><span class='line'>    --web.telemetry-path="/metrics" \
</span><span class='line'>    --persistence.file="/tmp/metric.store" \
</span><span class='line'>    --persistence.interval=5m \
</span><span class='line'>    --log.level="info" \
</span><span class='line'>    --log.format="logger:stdout?json=true"
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=multi-user.target
</span><span class='line'>EOF</span></code></pre></td></tr></table></div></figure>


<p>Reload systemd and restart the pushgateway service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl daemon-reload
</span><span class='line'>$ systemctl restart pushgateway</span></code></pre></td></tr></table></div></figure>


<p>Ensure that pushgateway has been started:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl status pushgateway
</span><span class='line'>  pushgateway.service - Pushgateway
</span><span class='line'>   Loaded: loaded (/etc/systemd/system/pushgateway.service; disabled; vendor preset: enabled)
</span><span class='line'>   Active: active (running) since Tue 2019-05-07 09:05:57 UTC; 2min 33s ago
</span><span class='line'> Main PID: 6974 (pushgateway)
</span><span class='line'>    Tasks: 6 (limit: 4704)
</span><span class='line'>   CGroup: /system.slice/pushgateway.service
</span><span class='line'>           └─6974 /usr/local/bin/pushgateway --web.listen-address=:9091 --web.telemetry-path=/metrics --persistence.file=/tmp/metric.store --persistence.interval=5m --log.level=info --log.format=logger:st
</span><span class='line'>
</span><span class='line'>May 07 09:05:57 ip-172-31-41-126 systemd[1]: Started Pushgateway.</span></code></pre></td></tr></table></div></figure>


<h2>Configure Prometheus</h2>

<p>Now we want to configure prometheus to scrape pushgateway for metrics, then the scraped metrics will be injected into prometheus&rsquo;s time series database:</p>

<p>At the moment, I have prometheus, node-exporter and pushgateway on the same node so I will provide my complete prometheus configuration, If you are just looking for the pushgateway config, it will be the last line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/prometheus/prometheus.yml
</span><span class='line'>global:
</span><span class='line'>  scrape_interval: 15s
</span><span class='line'>
</span><span class='line'>scrape_configs:
</span><span class='line'>  - job_name: 'prometheus'
</span><span class='line'>    scrape_interval: 5s
</span><span class='line'>    static_configs:
</span><span class='line'>      - targets: ['localhost:9090']
</span><span class='line'>
</span><span class='line'>  - job_name: 'node_exporter'
</span><span class='line'>    scrape_interval: 5s
</span><span class='line'>    static_configs:
</span><span class='line'>      - targets: ['localhost:9100']
</span><span class='line'>
</span><span class='line'>  - job_name: 'pushgateway'
</span><span class='line'>    honor_labels: true
</span><span class='line'>    static_configs:
</span><span class='line'>      - targets: ['localhost:9091']</span></code></pre></td></tr></table></div></figure>


<p>Restart prometheus:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart prometheus</span></code></pre></td></tr></table></div></figure>


<h2>Push metrics to pushgateway</h2>

<p>First we will look at a bash example to push metrics to pushgateway:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo "cpu_utilization 20.25" | curl --data-binary @- http://localhost:9091/metrics/job/my_custom_metrics/instance/10.20.0.1:9000/provider/hetzner</span></code></pre></td></tr></table></div></figure>


<p>Have a look at pushgateway&rsquo;s metrics endpoint:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -L http://localhost:9091/metrics/
</span><span class='line'># TYPE cpu_utilization untyped
</span><span class='line'>cpu_utlization{instance="10.20.0.1:9000",job="my_custom_metrics",provider="hetzner"} 20.25</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s look at a python example on how we can push metrics to pushgateway:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'>
</span><span class='line'><span class="n">job_name</span><span class="o">=</span><span class="s">&#39;my_custom_metrics&#39;</span>
</span><span class='line'><span class="n">instance_name</span><span class="o">=</span><span class="s">&#39;10.20.0.1:9000&#39;</span>
</span><span class='line'><span class="n">provider</span><span class="o">=</span><span class="s">&#39;hetzner&#39;</span>
</span><span class='line'><span class="n">payload_key</span><span class="o">=</span><span class="s">&#39;cpu_utilization&#39;</span>
</span><span class='line'><span class="n">payload_value</span><span class="o">=</span><span class="s">&#39;21.90&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">&#39;http://localhost:9091/metrics/job/{j}/instance/{i}/team/{t}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">job_name</span><span class="p">,</span> <span class="n">i</span><span class="o">=</span><span class="n">instance_name</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">team_name</span><span class="p">),</span> <span class="n">data</span><span class="o">=</span><span class="s">&#39;{k} {v}</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">k</span><span class="o">=</span><span class="n">payload_key</span><span class="p">,</span> <span class="n">v</span><span class="o">=</span><span class="n">payload_value</span><span class="p">))</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this method, you can push any custom metrics (bash, lambda function, etc) to pushgateway and allow prometheus to consume that data into it&rsquo;s time series database.</p>

<h2>Resources:</h2>

<p>See <a href="https://blog.ruanbekker.com/blog/categories/prometheus/">#prometheus</a> for more posts on Prometheus</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running a HA MySQL Galera Cluster on Docker Swarm]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/10/running-a-ha-mysql-galera-cluster-on-docker-swarm/"/>
    <updated>2019-05-10T13:02:39+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/10/running-a-ha-mysql-galera-cluster-on-docker-swarm</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57523982-c904d780-7326-11e9-981a-7a9cb9552c2f.png" alt="image" /></p>

<p>In this post we will setup a highly available mysql galera cluster on docker swarm.</p>

<h2>About</h2>

<p>The service is based of <a href="https://github.com/toughIQ/docker-mariadb-cluster">docker-mariadb-cluster</a> repository and it&rsquo;s designed not to have any persistent data attached to the service, but rely on the &ldquo;nodes&rdquo; to replicate the data.</p>

<p>Note, that however this proof of concept works, I always recommend to use a remote mysql database outside your cluster, such as RDS etc.</p>

<p>Since we don&rsquo;t persist any data on the mysql cluster, I have associated a dbclient service that will run continious backups, which we will persist the path where the backups reside to disk.</p>

<h2>Deploy the MySQL Cluster</h2>

<p>The <a href="https://raw.githubusercontent.com/ruanbekker/dockerfiles/master/mysql-cluster/docker-compose.yml">docker-compose.yml</a> that we will use looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&#39;3.5&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">dbclient</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">alpine</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">BACKUP_ENABLED=1</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">BACKUP_INTERVAL=3600</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">BACKUP_PATH=/data</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">BACKUP_FILENAME=db_backup</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">dbnet</span>
</span><span class='line'>    <span class="l-Scalar-Plain">entrypoint</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>      <span class="no">sh -c &#39;sh -s &lt;&lt; EOF</span>
</span><span class='line'>      <span class="no">apk add --no-cache mysql-client</span>
</span><span class='line'>      <span class="no">while true</span>
</span><span class='line'>        <span class="no">do</span>
</span><span class='line'>          <span class="no">if [ $$BACKUP_ENABLED == 1 ]</span>
</span><span class='line'>            <span class="no">then</span>
</span><span class='line'>              <span class="no">sleep $$BACKUP_INTERVAL</span>
</span><span class='line'>              <span class="no">mkdir -p $$BACKUP_PATH/$$(date +%F)</span>
</span><span class='line'>              <span class="no">echo &quot;$$(date +%FT%H.%m) - Making Backup to : $$BACKUP_PATH/$$(date +%F)/$$BACKUP_FILENAME-$$(date +%FT%H.%m).sql.gz&quot;</span>
</span><span class='line'>              <span class="no">mysqldump -u root -ppassword -h dblb --all-databases | gzip &gt; $$BACKUP_PATH/$$(date +%F)/$$BACKUP_FILENAME-$$(date +%FT%H.%m).sql.gz</span>
</span><span class='line'>              <span class="no">find $$BACKUP_PATH -mtime 7 -delete</span>
</span><span class='line'>          <span class="no">fi</span>
</span><span class='line'>        <span class="no">done</span>
</span><span class='line'>      <span class="no">EOF&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">vol_dbclient:/data</span>
</span><span class='line'>    <span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">mode</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">replicated</span>
</span><span class='line'>      <span class="l-Scalar-Plain">replicas</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">dbcluster</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">toughiq/mariadb-cluster</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">dbnet</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DB_SERVICE_NAME=dbcluster</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_ROOT_PASSWORD=password</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_DATABASE=mydb</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_USER=mydbuser</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_PASSWORD=mydbpass</span>
</span><span class='line'>    <span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">mode</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">replicated</span>
</span><span class='line'>      <span class="l-Scalar-Plain">replicas</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">dblb</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">toughiq/maxscale</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">dbnet</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">3306:3306</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DB_SERVICE_NAME=dbcluster</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ENABLE_ROOT_USER=1</span>
</span><span class='line'>    <span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">mode</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">replicated</span>
</span><span class='line'>      <span class="l-Scalar-Plain">replicas</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">vol_dbclient</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">local</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">dbnet</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">dbnet</span>
</span><span class='line'>    <span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">overlay</span>
</span></code></pre></td></tr></table></div></figure>


<p>The dbclient is configured to be in the same network as the cluster so it can reach the mysql service. The default behavior is that it will make a backup every hour (3600 seconds) to the <code>/data/{date}/</code> path.</p>

<p>Deploy the stack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker stack deploy -c docker-compose.yml galera</span>
</span><span class='line'><span class="l-Scalar-Plain">Creating network dbnet</span>
</span><span class='line'><span class="l-Scalar-Plain">Creating service galera_dbcluster</span>
</span><span class='line'><span class="l-Scalar-Plain">Creating service galera_dblb</span>
</span><span class='line'><span class="l-Scalar-Plain">Creating service galera_dbclient</span>
</span></code></pre></td></tr></table></div></figure>


<p>Have a look to see if all the services is running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker service ls</span>
</span><span class='line'><span class="l-Scalar-Plain">ID                  NAME                MODE                REPLICAS            IMAGE                            PORTS</span>
</span><span class='line'><span class="l-Scalar-Plain">jm7p70qre72u        galera_dbclient     replicated          1/1                 alpine:latest</span>
</span><span class='line'><span class="l-Scalar-Plain">p8kcr5y7szte        galera_dbcluster    replicated          1/1                 toughiq/mariadb-cluster:latest</span>
</span><span class='line'><span class="l-Scalar-Plain">1hu3oxhujgfm        galera_dblb         replicated          1/1                 toughiq/maxscale:latest          :3306-&gt;3306/tcp</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The Backup Client</h2>

<p>As mentioned the backup client backs up to the <code>/data/</code> path:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker exec -it $(docker ps -f name=galera_dbclient -q) find /data/</span>
</span><span class='line'><span class="l-Scalar-Plain">/data/</span>
</span><span class='line'><span class="l-Scalar-Plain">/data/2019-05-10</span>
</span><span class='line'><span class="l-Scalar-Plain">/data/2019-05-10/db_backup-2019-05-10T10.05.sql.gz</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s go ahead and populate some data into our mysql database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker exec -it $(docker ps -f name=galera_dbclient -q) mysql -uroot -ppassword -h dblb</span>
</span><span class='line'><span class="l-Scalar-Plain">MySQL [(none)]&gt; create table mydb.foo (name varchar(10));</span>
</span><span class='line'><span class="l-Scalar-Plain">MySQL [(none)]&gt; insert into mydb.foo values(&#39;ruan&#39;);</span>
</span><span class='line'><span class="l-Scalar-Plain">MySQL [(none)]&gt; exit</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Scale the Cluster</h2>

<p>At the moment we only have 1 replica for our mysql cluster, let&rsquo;s go ahead and scale the cluster to 3 replicas:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker service scale galera_dbcluster=3</span>
</span><span class='line'><span class="l-Scalar-Plain">galera_dbcluster scaled to 3</span>
</span><span class='line'><span class="l-Scalar-Plain">overall progress</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3 out of 3 tasks</span>
</span><span class='line'><span class="l-Scalar-Plain">1/3</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">running   [==================================================&gt;]</span>
</span><span class='line'><span class="l-Scalar-Plain">2/3</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">running   [==================================================&gt;]</span>
</span><span class='line'><span class="l-Scalar-Plain">3/3</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">running   [==================================================&gt;]</span>
</span><span class='line'><span class="l-Scalar-Plain">verify</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Service converged</span>
</span></code></pre></td></tr></table></div></figure>


<p>Verify that the service has been scaled:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker service ls</span>
</span><span class='line'><span class="l-Scalar-Plain">ID                  NAME                MODE                REPLICAS            IMAGE                            PORTS</span>
</span><span class='line'><span class="l-Scalar-Plain">jm7p70qre72u        galera_dbclient     replicated          1/1                 alpine:latest</span>
</span><span class='line'><span class="l-Scalar-Plain">p8kcr5y7szte        galera_dbcluster    replicated          3/3                 toughiq/mariadb-cluster:latest</span>
</span><span class='line'><span class="l-Scalar-Plain">1hu3oxhujgfm        galera_dblb         replicated          1/1                 toughiq/maxscale:latest          :3306-&gt;3306/tcp</span>
</span></code></pre></td></tr></table></div></figure>


<p>Test, by reading from the database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker exec -it $(docker ps -f name=galera_dbclient -q) mysql -uroot -ppassword -h dblb -e&#39;select * from mydb.foo;&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'><span class="l-Scalar-Plain">| name |</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'><span class="l-Scalar-Plain">| ruan |</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Simulate a Node Failure:</h2>

<p>Simulate a node failure by killing one of the mysql containers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker kill 9e336032ab52</span>
</span></code></pre></td></tr></table></div></figure>


<p>Verify that one container is missing from our service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker service ls</span>
</span><span class='line'><span class="l-Scalar-Plain">ID                  NAME                MODE                REPLICAS            IMAGE                            PORTS</span>
</span><span class='line'><span class="l-Scalar-Plain">p8kcr5y7szte        galera_dbcluster    replicated          2/3                 toughiq/mariadb-cluster:latest</span>
</span></code></pre></td></tr></table></div></figure>


<p>While the container is provisioning, as we have 2 out of 3 running containers, read the data 3 times so test that the round robin queries dont hit the affected container (the dblb wont route traffic to the affected container):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker exec -it $(docker ps -f name=galera_dbclient -q) mysql -uroot -ppassword -h dblb -e&#39;select * from mydb.foo;&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'><span class="l-Scalar-Plain">| name |</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'><span class="l-Scalar-Plain">| ruan |</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">$ docker exec -it $(docker ps -f name=galera_dbclient -q) mysql -uroot -ppassword -h dblb -e&#39;select * from mydb.foo;&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'><span class="l-Scalar-Plain">| name |</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'><span class="l-Scalar-Plain">| ruan |</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">$ docker exec -it $(docker ps -f name=galera_dbclient -q) mysql -uroot -ppassword -h dblb -e&#39;select * from mydb.foo;&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'><span class="l-Scalar-Plain">| name |</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'><span class="l-Scalar-Plain">| ruan |</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span></code></pre></td></tr></table></div></figure>


<p>Verify that the 3rd container has checked in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker service ls</span>
</span><span class='line'><span class="l-Scalar-Plain">ID                  NAME                MODE                REPLICAS            IMAGE                            PORTS</span>
</span><span class='line'><span class="l-Scalar-Plain">p8kcr5y7szte        galera_dbcluster    replicated          3/3                 toughiq/mariadb-cluster:latest</span>
</span></code></pre></td></tr></table></div></figure>


<h2>How to Restore?</h2>

<p>I&rsquo;m deleting the database to simulate the scenario where we need to restore:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker exec -it $(docker ps -f name=galera_dbclient -q) sh</span>
</span><span class='line'><span class="l-Scalar-Plain">&gt; mysql -uroot -ppassword -h dblb -e&#39;drop database mydb;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ensure the db is not present:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">&gt;</span><span class="err"> mysql -uroot -ppassword -h dblb -e&#39;select * from mydb.foo;&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">ERROR 1146 (42S02) at line 1</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Table &#39;mydb.foo&#39; doesn&#39;t exist</span>
</span></code></pre></td></tr></table></div></figure>


<p>Find the archive and extract:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">&gt;</span><span class="err"> find /data/</span>
</span><span class='line'><span class="l-Scalar-Plain">/data/</span>
</span><span class='line'><span class="l-Scalar-Plain">/data/2019-05-10</span>
</span><span class='line'><span class="l-Scalar-Plain">/data/2019-05-10/db_backup-2019-05-10T10.05.sql.gz</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&gt; gunzip /data/2019-05-10/db_backup-2019-05-10T10.05.sql.gz</span>
</span></code></pre></td></tr></table></div></figure>


<p>Restore the backed up database to MySQL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">&gt;</span><span class="err"> mysql -uroot -ppassword -h dblb &lt; /data/2019-05-10/db_backup-2019-05-10T10.05.sql</span>
</span></code></pre></td></tr></table></div></figure>


<p>Test that we can read our data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">&gt;</span><span class="err"> mysql -uroot -ppassword -h dblb -e&#39;select * from mydb.foo;&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'><span class="l-Scalar-Plain">| name |</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'><span class="l-Scalar-Plain">| ruan |</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create Secrets With Vaults Transits Secret Engine]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/07/create-secrets-with-vaults-transits-secret-engine/"/>
    <updated>2019-05-07T22:31:54+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/07/create-secrets-with-vaults-transits-secret-engine</id>
    <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/b2223b0ca7077fcf9919372582183757239e4153/68747470733a2f2f6c6561726e2e6861736869636f72702e636f6d2f6173736574732f696d616765732f7661756c742d656e6372797074696f6e2e706e67" alt="" /></p>

<p>Vault&rsquo;s transit secrets engine handles cryptographic functions on data-in-transit. Vault doesn&rsquo;t store the data sent to the secrets engine, so it can also be viewed as encryption as a service.</p>

<p>In this tutorial we will demonstrate how to use Vault&rsquo;s Transit Secret Engine.</p>

<p>Related Posts:</p>

<ul>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/06/setup-hashicorp-vault-server-on-docker-and-cli-guide/">Setup a Vault Server on Docker</a></li>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/07/persist-vault-data-with-amazon-s3-as-a-storage-backend/">Use the S3 Storage Backend to Persist Data</a></li>
</ul>


<h2>Enable the Transit Engine:</h2>

<p>Enable transit secret engine using the /sys/mounts endpoint:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl --header "X-Vault-Token: $VAULT_TOKEN" -XPOST -d '{"type": "transit", "description": "encs encryption"}' http://127.0.0.1:8200/v1/sys/mounts/transit</span></code></pre></td></tr></table></div></figure>


<h2>Create the Key Ring:</h2>

<p>Create an encryption key ring named <code>fookey</code> using the transit/keys endpoint:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s --header "X-Vault-Token: $VAULT_TOKEN" -XGET http://127.0.0.1:8200/v1/transit/keys/fookey | jq
</span><span class='line'>{
</span><span class='line'>  "request_id": "8375227a-4a9f-a108-0b89-84c448419e80",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 0,
</span><span class='line'>  "data": {
</span><span class='line'>    "allow_plaintext_backup": false,
</span><span class='line'>    "deletion_allowed": false,
</span><span class='line'>    "derived": false,
</span><span class='line'>    "exportable": false,
</span><span class='line'>    "keys": {
</span><span class='line'>      "1": 1554654295
</span><span class='line'>    },
</span><span class='line'>    "latest_version": 1,
</span><span class='line'>    "min_available_version": 0,
</span><span class='line'>    "min_decryption_version": 1,
</span><span class='line'>    "min_encryption_version": 0,
</span><span class='line'>    "name": "fookey",
</span><span class='line'>    "supports_decryption": true,
</span><span class='line'>    "supports_derivation": true,
</span><span class='line'>    "supports_encryption": true,
</span><span class='line'>    "supports_signing": false,
</span><span class='line'>    "type": "aes256-gcm96"
</span><span class='line'>  },
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Encoding</h2>

<p>Encode your string:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ base64 &lt;&lt;&lt; "hello world"
</span><span class='line'>aGVsbG8gd29ybGQK</span></code></pre></td></tr></table></div></figure>


<h2>Encrypt</h2>

<p>To encrypt your secret, use the transit/encrypt endpoint:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s --header "X-Vault-Token: $VAULT_TOKEN" --request POST  --data '{"plaintext": "aGVsbG8gd29ybGQK"}' http://127.0.0.1:8200/v1/transit/encrypt/fookey | jq
</span><span class='line'>{
</span><span class='line'>  "request_id": "ab00ba0f-9e45-0aca-e3c1-7765fd83fc3c",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 0,
</span><span class='line'>  "data": {
</span><span class='line'>    "ciphertext": "vault:v1:Yo4U6xXFM2FoBOaUrw0w3EpSlJS6gmsa4HP1xKtjrk0+xSqi5Rvjvg=="
</span><span class='line'>  },
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Decrypt:</h2>

<p>Use the transit/decrypt endpoint to decrypt the ciphertext:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s --header "X-Vault-Token: $VAULT_TOKEN" --request POST  --data '{"ciphertext": "vault:v1:Yo4U6xXFM2FoBOaUrw0w3EpSlJS6gmsa4HP1xKtjrk0+xSqi5Rvjvg=="}' http://127.0.0.1:8200/v1/transit/decrypt/fookey | jq
</span><span class='line'>{
</span><span class='line'>  "request_id": "3d9743a0-2daf-823c-f413-8c8a90753479",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 0,
</span><span class='line'>  "data": {
</span><span class='line'>    "plaintext": "aGVsbG8gd29ybGQK"
</span><span class='line'>  },
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Decoding</h2>

<p>Decode the response:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ base64 --decode &lt;&lt;&lt; "aGVsbG8gd29ybGQK"
</span><span class='line'>hello world</span></code></pre></td></tr></table></div></figure>


<h2>Resources</h2>

<ul>
<li><a href="https://learn.hashicorp.com/vault/encryption-as-a-service/eaas-transit">Vault Documentation on this topic</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
