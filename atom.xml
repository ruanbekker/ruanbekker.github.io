<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2019-12-04T22:38:25+02:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup AWS S3 Cross Account Access]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/11/26/setup-aws-s3-cross-account-access/"/>
    <updated>2019-11-26T22:40:12+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/11/26/setup-aws-s3-cross-account-access</id>
    <content type="html"><![CDATA[<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <a href="https://github.com/ruanbekker"><img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /></a></p>

<p><a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @ruanbekker</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>In this tutorial I will demonstrate how to setup cross account access from S3.</p>

<h2>Scenario</h2>

<p>We will have 2 AWS Accounts:</p>

<ol>
<li><p>a Green AWS Account which will host the IAM Users, this account will only be used for our IAM Accounts.</p></li>
<li><p>a Blue AWS Account which will be the account that hosts our AWS Resources, S3 in this scenario.</p></li>
</ol>


<p>We will the allow the Green Account to access the Blue Account&rsquo;s S3 Bucket.</p>

<h2>Setup the Blue Account</h2>

<p>In the Blue Account, we will setup the S3 Bucket, as well as the Trust Relationship with the Policy, which is where we will define what we want to allow for the Green Account.</p>

<p><img width="1280" alt="9488F107-A5B0-4A9E-A7A4-5A91B9805DE3" src="https://user-images.githubusercontent.com/567298/69668149-fe40ff00-1097-11ea-896a-5f3106fe5dfa.png"></p>

<p>Now we need to setup the IAM Role which will allow the Green Account and also define what needs to be allowed.</p>

<p>Go ahead to your IAM Console and create a IAM Policy (just remember to replace the bucket name if you are following along)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "Version": "2012-10-17",
</span><span class='line'>    "Statement": [
</span><span class='line'>        {
</span><span class='line'>            "Sid": "PutGetListAccessOnS3",
</span><span class='line'>            "Effect": "Allow",
</span><span class='line'>            "Action": [
</span><span class='line'>                "s3:PutObject",
</span><span class='line'>                "s3:GetObject",
</span><span class='line'>                "s3:ListBucket"
</span><span class='line'>            ],
</span><span class='line'>            "Resource": [
</span><span class='line'>                "arn:aws:s3:::ruanbekker-prod-s3-bucket",
</span><span class='line'>                "arn:aws:s3:::ruanbekker-prod-s3-bucket/*"
</span><span class='line'>            ]
</span><span class='line'>        }
</span><span class='line'>    ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>In my case I have named my IAM Policy <code>CrossAccountS3Access</code>. After you have created your IAM Policy, go ahead and create a IAM Role. Here we need the source account that we want to allow as a trusted entity, which will be the AWS AccountId of the Green Account:</p>

<p><img width="1277" alt="E73FC957-EBFA-4E41-AFDB-D994D6D3110E" src="https://user-images.githubusercontent.com/567298/69668615-ee75ea80-1098-11ea-8536-b32c6c034f7a.png"></p>

<p>Associate the IAM Policy that you created earlier:</p>

<p><img width="1280" alt="610814A8-E8CB-45F7-A038-FE4274FD425C" src="https://user-images.githubusercontent.com/567298/69668712-19603e80-1099-11ea-8ba0-2d0bc84e21cf.png"></p>

<p>After you have done that, you should see a summary screen:</p>

<p><img width="1278" alt="ABAADD0E-9140-4EB1-855A-0B0E46F429FF" src="https://user-images.githubusercontent.com/567298/69668817-50ceeb00-1099-11ea-8bb2-98537a742857.png"></p>

<p>Make note of your IAM Role ARN, it will look something like this: <code>arn:aws:iam::xxxxxxxxxxxx:role/CrossAccountS3Access-Role</code></p>

<h2>Setup the Green Account</h2>

<p>In the Green Account is where we will create the IAM User and the credentials will be provided to the user which requires to access the S3 Bucket.</p>

<p>Let&rsquo;s create a IAM Group, I will name mine <code>prod-s3-users</code>. I will just create the group, as I will attach the policy later:</p>

<p><img width="1280" alt="459D98BF-7A5D-49B4-BBD9-11717655188D" src="https://user-images.githubusercontent.com/567298/69669190-07cb6680-109a-11ea-8193-db476f5fa1db.png"></p>

<p>From the IAM Group, select the Permissions tab and create a New Inline Policy:</p>

<p><img width="1280" alt="E55E521D-A3C1-4669-B0AB-C23A5BA51E21" src="https://user-images.githubusercontent.com/567298/69669427-81635480-109a-11ea-8b4b-7bd79f2a12cd.png"></p>

<p>Select the &ldquo;STS&rdquo; service, select the &ldquo;AssumeRole&rdquo; action, and provide the Role ARN of the Blue Account that we created earlier:</p>

<p><img width="1280" alt="FDECEF7C-14F1-41DC-94F5-B6E63FE46A7D" src="https://user-images.githubusercontent.com/567298/69669597-d8692980-109a-11ea-804c-914c9a8cb608.png"></p>

<p>This will allow the Blue account to assume the credentials from the Green account. And the Blue account will only obtain permissions to access the resources that we have defined in the policy document of the Blue Account. In summary, it should look like this:</p>

<p><img width="1280" alt="0133A1AF-D2B0-4A61-B179-B4B40B81953C" src="https://user-images.githubusercontent.com/567298/69669773-30079500-109b-11ea-83bd-69c8301c4f21.png"></p>

<p>Select the Users tab on the left hand side, create a New IAM User (I will name mine s3-prod-user) and select the &ldquo;Programmatic Access&rdquo; check box as we need API keys as we will be using the CLI to access S3:</p>

<p><img width="1278" alt="ACE1F066-4400-4000-A9D8-0FD438DB7028" src="https://user-images.githubusercontent.com/567298/69669927-82e14c80-109b-11ea-9adf-de5c01cec41c.png"></p>

<p>Then from the next window, add the user to the group that we have created earlier:</p>

<p><img width="1279" alt="0AEC8E84-091F-44CB-966D-BDA93970C881" src="https://user-images.githubusercontent.com/567298/69669976-9987a380-109b-11ea-9c16-ea63cebe2e82.png"></p>

<h2>Test Cross Account Access</h2>

<p>Let&rsquo;s configure our AWS CLI with the API Keys that we received. Our credential provider will consist with 2 profiles, the Green Profile which holds the API Keys of the Green Account:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws configure --profile green
</span><span class='line'>AWS Access Key ID [None]: AKIATPRT2G4SAHA7ZQU2
</span><span class='line'>AWS Secret Access Key [None]: x
</span><span class='line'>Default region name [None]: eu-west-1
</span><span class='line'>Default output format [None]: json</span></code></pre></td></tr></table></div></figure>


<p>And configure the Blue profile that will reference the Green account as a source profile and also specify the IAM Role ARN of the Blue Account:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim ~/.aws/credentials</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[blue]
</span><span class='line'>role_arn=arn:aws:iam::xxxxxxxxxxxx:role/CrossAccountS3Access-Role
</span><span class='line'>source_profile=green
</span><span class='line'>region=eu-west-1</span></code></pre></td></tr></table></div></figure>


<p>Now we can test if we can authenticate with our Green AWS Account:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws --profile green sts get-caller-identity
</span><span class='line'>{
</span><span class='line'>    "UserId": "AKIATPRT2G4SAHA7ZQU2",
</span><span class='line'>    "Account": "xxxxxxxxxxxx",
</span><span class='line'>    "Arn": "arn:aws:iam:: xxxxxxxxxxxx:user/s3-prod-user"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s upload an object to S3 using our blue profile:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws --profile blue s3 cp foo s3://ruanbekker-prod-s3-bucket/
</span><span class='line'>upload: ./foo to s3://ruanbekker-prod-s3-bucket/foo</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s verify if we can see the object:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws --profile blue s3 ls s3://ruanbekker-prod-s3-bucket/
</span><span class='line'>2019-10-03 22:13:30      14582 foo</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Let me know what you think. If you liked my content, feel free to checkout my content on <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<center><script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script></center>


<p><br></p>

<p>I&rsquo;ve recently started a <a href="https://bekkerclothing.com/collections/developer">Developer Range</a> t-shirts, let me know what you think:</p>

<div id='product-component-1574800622582'></div>


<script type="text/javascript">
/*&lt;![CDATA[*/
(function () {
  var scriptURL = 'https://sdks.shopifycdn.com/buy-button/latest/buy-button-storefront.min.js';
  if (window.ShopifyBuy) {
    if (window.ShopifyBuy.UI) {
      ShopifyBuyInit();
    } else {
      loadScript();
    }
  } else {
    loadScript();
  }
  function loadScript() {
    var script = document.createElement('script');
    script.async = true;
    script.src = scriptURL;
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(script);
    script.onload = ShopifyBuyInit;
  }
  function ShopifyBuyInit() {
    var client = ShopifyBuy.buildClient({
      domain: 'bekkerclothing.myshopify.com',
      storefrontAccessToken: '68eb29a6d90539cb0321ea90bb043fae',
    });
    ShopifyBuy.UI.onReady(client).then(function (ui) {
      ui.createComponent('product', {
        id: '4392613544020',
        node: document.getElementById('product-component-1574800622582'),
        moneyFormat: '%24%7B%7Bamount%7D%7D',
        options: {
  "product": {
    "styles": {
      "product": {
        "@media (min-width: 601px)": {
          "max-width": "calc(25% - 20px)",
          "margin-left": "20px",
          "margin-bottom": "50px"
        }
      }
    },
    "text": {
      "button": "Add to cart"
    }
  },
  "productSet": {
    "styles": {
      "products": {
        "@media (min-width: 601px)": {
          "margin-left": "-20px"
        }
      }
    }
  },
  "modalProduct": {
    "contents": {
      "img": false,
      "imgWithCarousel": true,
      "button": false,
      "buttonWithQuantity": true
    },
    "styles": {
      "product": {
        "@media (min-width: 601px)": {
          "max-width": "100%",
          "margin-left": "0px",
          "margin-bottom": "0px"
        }
      }
    },
    "text": {
      "button": "Add to cart"
    }
  },
  "cart": {
    "text": {
      "total": "Subtotal",
      "button": "Checkout"
    }
  }
},
      });
    });
  }
})();
/*]]&gt;*/
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Setup VPC Peering on AWS]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/11/23/how-to-setup-vpc-peering-on-aws/"/>
    <updated>2019-11-23T09:09:40+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/11/23/how-to-setup-vpc-peering-on-aws</id>
    <content type="html"><![CDATA[<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <a href="https://github.com/ruanbekker"><img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /></a></p>

<p><a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @ruanbekker</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>In this tutorial I will demonstrate how to create a VPC Peering Connection between Two AWS Accounts and how to route traffic between them and then show you how we create Two EC2 Instances and demonstrate how to SSH to each other via it&rsquo;s Private IP Address.</p>

<h2>Scenario Information</h2>

<p>We will have Two AWS Accounts in this demonstration, a &ldquo;Green AWS Account&rdquo; and a &ldquo;Blue AWS Account&rdquo;.</p>

<p>In this scenario, we will have two teams, both teams manage their own account and in this scenario the two teams need to be able to communicate to each other. To keep it simple, each team has a EC2 instance and the two EC2 instances need to be able to communicate with each other.</p>

<p>Therefore we will setup a VPC Peering Connection between the two accounts. Both accounts will be operating in the eu-west-2 (London) region.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Account, CIDR
</span><span class='line'>green: 10.1.0.0/16
</span><span class='line'>blue:  10.2.0.0/16</span></code></pre></td></tr></table></div></figure>


<h2>Getting Started</h2>

<p>This will be our <strong>Green</strong> AWS Account:</p>

<p><img width="1291" alt="140424C7-6FD5-4D74-AD26-AA1077D3DA92" src="https://user-images.githubusercontent.com/567298/69486624-55579180-0e56-11ea-897c-55607680fb58.png"></p>

<p>This will be our <strong>Blue</strong> AWS Account:</p>

<p><img src="https://user-images.githubusercontent.com/567298/69486632-61435380-0e56-11ea-86d1-3af018fe5fe3.png" alt="AAFBF715-897D-4D54-BDF2-9A5282A60165" /></p>

<h2>Creating the VPCs</h2>

<p>From our <strong>green</strong> account, head over to VPC and create a new VPC with a CIDR of <code>10.1.0.0/16</code>:</p>

<p><img width="1291" alt="55FB3F87-9F73-4CDD-845B-8748700B0981" src="https://user-images.githubusercontent.com/567298/69486652-d6af2400-0e56-11ea-9f4d-9331001625f4.png"></p>

<p>Then head over to the <strong>blue</strong> account, head over to VPC and create a new VPC with CIDR of <code>10.2.0.0/16</code>:</p>

<p><img src="https://user-images.githubusercontent.com/567298/69486659-f1819880-0e56-11ea-8c3c-5aff2f84e2aa.png" alt="854DC039-7F83-4E6F-BD28-6843BE417EEB" /></p>

<p>So in summary we have the following resources:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Green: vpc-0af4b247a1353b78b | 10.1.0.0/16
</span><span class='line'>Blue: vpc-031c4ce3f56660c30 | 10.2.0.0/16</span></code></pre></td></tr></table></div></figure>


<h2>Creating the Subnets</h2>

<p>Now we need to create subnets for the VPC&rsquo;s that we created. We will create the following subnets in our VPC, each subnet in its own availability zone:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>10.1.0.0/20 (az-2a)
</span><span class='line'>10.1.16.0/20 (az-2b)
</span><span class='line'>10.1.32.0/20 (az-2c)</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s go ahead and do this, head over to your <strong>green</strong> account, from the VPC section select &ldquo;Subnets&rdquo;:</p>

<p><img width="1292" alt="BBB38DDB-D9CF-4BD4-AEA0-C30B6998F016" src="https://user-images.githubusercontent.com/567298/69486747-92705380-0e57-11ea-86da-5cafd9c22701.png"></p>

<p>Go ahead and create a subnet where you will need to specify the VPC that you created, slect the first CIDR block, in my case 10.1.0.0/20 and select the first AZ:</p>

<p><img width="1292" alt="BB1627EE-A92D-4274-BF97-40AE4E01A9A4" src="https://user-images.githubusercontent.com/567298/69486786-0d396e80-0e58-11ea-9860-7febe6e65f7d.png"></p>

<p>Do this for the other two subnets as well and then when you are done, it may look more or less like this:</p>

<p><img width="1290" alt="051767FD-2D52-48BD-B495-01ACB431B358" src="https://user-images.githubusercontent.com/567298/69487635-3660fb80-0e66-11ea-8b59-71364414d3ae.png"></p>

<p>Repeat this process that you have three subnets for your <strong>blue</strong> account as well:</p>

<p><img src="https://user-images.githubusercontent.com/567298/69486798-3823c280-0e58-11ea-8991-6518d986de31.png" alt="881A973C-7C9A-423C-B6F4-555CE78E0A16" /></p>

<h2>Setup VPC Peering Connection</h2>

<p>Now that we&rsquo;ve created our VPC&rsquo;s and subnets for each VPC we want to peer our two VPC&rsquo;s with each other so that we have a direct connection between our VPC&rsquo;s so that our EC2 instances from our <strong>green</strong> account is able to connect with our EC2 instances in our <strong>blue</strong> account.</p>

<p>Head over to your <strong>green</strong> account&rsquo;s VPC section and select &ldquo;Peering Connections&rdquo;:</p>

<p><img width="1292" alt="21972956-D24A-4C45-94C5-10A6FC742D98" src="https://user-images.githubusercontent.com/567298/69486833-c8620780-0e58-11ea-8638-de60804bdb65.png"></p>

<p>Create a new peering connection, we will first need to name our peering connection, select the source VPC which will be our green account&rsquo;s VPC, since the VPC that we want to peer with is in another account, get the AWS Account ID from the <strong>blue</strong> account, and select &ldquo;Another account&rdquo; and provide the account id that we want to peer with, select the AWS Region and provide the VPC ID of the <strong>blue</strong> account:</p>

<p><img width="1291" alt="1BDCB500-7BF0-4C5F-B171-9E09463A956A" src="https://user-images.githubusercontent.com/567298/69487659-817b0e80-0e66-11ea-83b6-4ec7c941804f.png"></p>

<p>Once you create the peering connection, you will find the peering request details:</p>

<p><img width="1291" alt="C74BAE40-9C78-45FE-BE7F-3AC495E93A41" src="https://user-images.githubusercontent.com/567298/69486874-9c935180-0e59-11ea-99a2-a54bd5982ab1.png"></p>

<p>Now let&rsquo;s head over to our <strong>blue</strong> Account, head over to VPC, select Peering connections and you will find the peering request from our <strong>green</strong> account:</p>

<p><img src="https://user-images.githubusercontent.com/567298/69486892-dbc1a280-0e59-11ea-983d-b7814257c323.png" alt="05DB8A16-6CF4-48F1-920C-20AE7492E381" /></p>

<p>From the top, hit &ldquo;Actions&rdquo; and accept the request:</p>

<p><img src="https://user-images.githubusercontent.com/567298/69486900-014eac00-0e5a-11ea-9cc2-025ef35ad921.png" alt="0FF04F44-F5B7-4AAF-9D66-89396EC2AA06" /></p>

<p>You should see that the VPC Peering connection has been established:</p>

<p><img src="https://user-images.githubusercontent.com/567298/69486904-14617c00-0e5a-11ea-8459-ab1bdf6141b0.png" alt="2D1D101F-3574-4A40-A1A6-F2F875B29158" /></p>

<p>From the <strong>blue</strong> account you should see that the VPC Peering Connection is active:</p>

<p><img src="https://user-images.githubusercontent.com/567298/69486911-2a6f3c80-0e5a-11ea-833c-bea298c55326.png" alt="A2070A8B-6247-4D75-BFF8-D5AE152EFA42" /></p>

<p>If you head back to the <strong>green</strong> account, you will see under Peering Connections that the connection has been established:</p>

<p><img width="1290" alt="1A50F913-9C6E-4F6D-A61C-5954617EBE5B" src="https://user-images.githubusercontent.com/567298/69486921-64d8d980-0e5a-11ea-86fa-cd37b44cbfdb.png"></p>

<p>We have now successfully created our VPC peering connection and the two VPC&rsquo;s from different accounts has been peered. Now we would like to launch our EC2 instances in our VPC, we will connect to our EC2 instance in our <strong>green</strong> account via the internet and then SSH to our EC2 instance in our <strong>blue</strong> account via the VPC peering connection via the Private IP Address.</p>

<h2>Setup Internet Gateway</h2>

<p>In order to connect to a Public Elastic IP, we first need to create a Internet Gateway on our VPC and add a route to route all public traffic via our Internet Gateway. This allows our resources in that VPC to be able to connect to the Internet.</p>

<p>Head over to &ldquo;Internet Gateways&rdquo;, and create a new Internet Gateway:</p>

<p><img width="1283" alt="9750329C-E89E-425E-9DCC-D420D092C5E6" src="https://user-images.githubusercontent.com/567298/69486997-5212d480-0e5b-11ea-9455-0c3d94f4d6e9.png"></p>

<p>Our IGW (Internet Gateway) will now be in a detached state, we now need to attach our IGW to our VPC. Hit &ldquo;Actions&rdquo;, then select &ldquo;Attach to VPC&rdquo;, and select your VPC:</p>

<p><img width="1281" alt="0BF7CB7A-C40A-483C-8083-410DBFFBA171" src="https://user-images.githubusercontent.com/567298/69487007-91412580-0e5b-11ea-8d3f-4ca7dff0976d.png"></p>

<p>You should now see that your IGW has been attached to your VPC:</p>

<p><img width="1073" alt="B6C3094F-233C-4A6C-A6FC-C5FD7727FBBD" src="https://user-images.githubusercontent.com/567298/69487019-b6ce2f00-0e5b-11ea-903a-cb576ab29f11.png"></p>

<p>Now that we have created an IGW and associated it to our VPC, we now need to configure our routing table so that it knows how to route non-local traffic via the IGW.</p>

<h2>Configure Routing Table</h2>

<p>Head over to VPC, select your VPC, select the &ldquo;Route Tables&rdquo; section from the left and you should see the following when you select the &ldquo;Routes&rdquo; section:</p>

<p><img width="1286" alt="FF7E141E-2C8D-4D87-BE67-513AB44784F2" src="https://user-images.githubusercontent.com/567298/69487055-55f32680-0e5c-11ea-8ce9-81de2bf5eab5.png"></p>

<p>Select &ldquo;Edit Routes&rdquo; and add a route with the destination <code>0.0.0.0/0</code> select the Internet Gateway as a target and it will filter through your available IGW&rsquo;s and select the IGW that you created earlier, then select save. (If your blue account needs internet access, repeat these steps on the blue account as well.)</p>

<p><img width="1274" alt="E223A267-1A4F-4DA4-B23A-37CE6EDAFEF5" src="https://user-images.githubusercontent.com/567298/69487097-ea5d8900-0e5c-11ea-97f6-66cd6604035f.png"></p>

<p>While we are at our routing tables configuration, we should also inform our VPC how to reach the subnet from the VPC from the other account. So that our <strong>Green</strong> App (10.1.0.0/16) can reach our <strong>blue</strong> app (10.2.0.0/16) via the Peering Connection.</p>

<p>We do this by adding a route to our routing table. From the <strong>green</strong> account&rsquo;s VPC&rsquo;s routing table add a new route with the destination of <code>10.2.0.0/16</code>, select &ldquo;Peering Connection&rdquo; as the target and it should resolve to the peering connection resource that we created, then select save:</p>

<p><img width="1271" alt="B5E8CF35-0C06-4261-9668-6C091BA19E2A" src="https://user-images.githubusercontent.com/567298/69487275-a3bd5e00-0e5f-11ea-8d4f-a2d270b3e57b.png"></p>

<p>Now our <strong>green</strong> Account knows how to route traffic to our <strong>blue</strong> account and also knows which network traffic to route. But we also need to route traffic back. Head over to your <strong>blue</strong> Account and add a route <code>10.1.0.0/16</code> to the peering connection so that we can route traffic back to our <strong>green</strong> Account:</p>

<p><img src="https://user-images.githubusercontent.com/567298/69487287-e41cdc00-0e5f-11ea-86cd-b9c9f6d77ad5.png" alt="885DCDE3-ACA5-4136-851D-3DF9D2D9D62D" /></p>

<h2>Launch EC2 Instances</h2>

<p>Now we want to launch a EC2 instance in each account and ensure to launch them into the VPC&rsquo;s that we created, I will also be creating two new SSH keys (blue-keypair + green-keypair) And I have created a Security Group that allows ICMP and SSH from anywhere, this is purely for demonstration (always review the sources that you want to allow).</p>

<p>For our <strong>green</strong> account:</p>

<p><img width="1284" alt="C60E3DAD-DD12-4670-97CD-AC524269C20E" src="https://user-images.githubusercontent.com/567298/69487311-4ece1780-0e60-11ea-9b66-b00568184790.png"></p>

<p>For our <strong>blue</strong> account:</p>

<p><img src="https://user-images.githubusercontent.com/567298/69487313-57265280-0e60-11ea-8814-fcdf4465967c.png" alt="1BFBF8B9-D090-4883-8E2B-92F29B19AEDE" /></p>

<p>Once the EC2 instances are deployed, you should see something like this. For my <strong>green</strong> account:</p>

<p><img width="1278" alt="image" src="https://user-images.githubusercontent.com/567298/69487370-2bf03300-0e61-11ea-89a5-c9fcef4ee50a.png"></p>

<p>And for my <strong>blue</strong> account:</p>

<p><img src="https://user-images.githubusercontent.com/567298/69487324-7ae99880-0e60-11ea-9d46-fb4ebcb14e07.png" alt="74F20740-17EE-46C9-9A51-D3ACAB8937B5" /></p>

<h2>Public IP Addressing</h2>

<p>Now that our EC2 instances are provisioned, we will be connecting to our <strong>green</strong> EC2 instances using a Public IP, therefore we need to create a Elastic IP. From EC2, select Elastic IPs and allocate a New Address:</p>

<p><img width="1283" alt="C4B9AC94-7AFC-465D-8D51-0497ABA475B3" src="https://user-images.githubusercontent.com/567298/69487353-d9167b80-0e60-11ea-85dd-26c94b227494.png"></p>

<p>Select the IP, hit &ldquo;Actions&rdquo; and select &ldquo;Associate Address&rdquo;, then select the EC2 instance to which you want to associate the Elastic IP to:</p>

<p><img width="771" alt="E3AA99D6-CD59-4530-B818-422E1D584932" src="https://user-images.githubusercontent.com/567298/69487364-fc412b00-0e60-11ea-88b4-f1b0b7ad83dc.png"></p>

<p>You should know see that the EC2 instance has a Public IP assigned to it:</p>

<p><img width="1048" alt="FE545350-0A45-453C-9855-4F65CC0783C6" src="https://user-images.githubusercontent.com/567298/69487694-d7e84d00-0e66-11ea-8cec-ad8142f01b9b.png"></p>

<h2>Test Network Connectivity</h2>

<p>From the downloaded SSH keypairs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls | grep keyp
</span><span class='line'>blue-keypair.pem.txt
</span><span class='line'>green-keypair.pem.txt</span></code></pre></td></tr></table></div></figure>


<p>Apply the correct permissions to our keypairs so that we can use them to SSH:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod 0400 blue-keypair.pem.txt green-keypair.pem.txt</span></code></pre></td></tr></table></div></figure>


<p>We will want to add both SSH keys to our agent so we can include them when we SSH:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ eval $(ssh-agent -t 36000)
</span><span class='line'>Agent pid 6613</span></code></pre></td></tr></table></div></figure>


<p>Add both keys to your ssh-agent:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh-add blue-keypair.pem.txt
</span><span class='line'>Identity added: blue-keypair.pem.txt (blue-keypair.pem.txt)
</span><span class='line'>
</span><span class='line'>$ ssh-add green-keypair.pem.txt
</span><span class='line'>Identity added: green-keypair.pem.txt (green-keypair.pem.txt)</span></code></pre></td></tr></table></div></figure>


<p>SSH to our <strong>Green</strong> EC2 instance:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -A ec2-user@3.11.6.171
</span><span class='line'>
</span><span class='line'>       __|  __|_  )
</span><span class='line'>       _|  (     /   Amazon Linux 2 AMI
</span><span class='line'>      ___|\___|___|
</span><span class='line'>
</span><span class='line'>https://aws.amazon.com/amazon-linux-2/
</span><span class='line'>[ec2-user@ip-10-1-1-190 ~]$</span></code></pre></td></tr></table></div></figure>


<p>Now lets ping our <strong>Blue</strong> EC2 Instance which will be accessible via our VPC Peering Connection:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ec2-user@ip-10-1-1-190 ~]$ ping 10.2.1.167
</span><span class='line'>PING 10.2.1.167 (10.2.1.167) 56(84) bytes of data.
</span><span class='line'>64 bytes from 10.2.1.167: icmp_seq=1 ttl=255 time=0.754 ms
</span><span class='line'>64 bytes from 10.2.1.167: icmp_seq=2 ttl=255 time=0.854 ms</span></code></pre></td></tr></table></div></figure>


<p>And since we&rsquo;ve allowed SSH traffic, we should be able to SSH to our instance via its Private IP Address:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ec2-user@ip-10-1-1-190 ~]$ ssh 10.2.1.167
</span><span class='line'>
</span><span class='line'>       __|  __|_  )
</span><span class='line'>       _|  (     /   Amazon Linux 2 AMI
</span><span class='line'>      ___|\___|___|
</span><span class='line'>
</span><span class='line'>https://aws.amazon.com/amazon-linux-2/
</span><span class='line'>[ec2-user@ip-10-2-1-167 ~]$</span></code></pre></td></tr></table></div></figure>


<p>Now we have successfully created a VPC Peering Connection between Two AWS Accounts and demonstrated how to communicate to and from resources in those VPC&rsquo;s.</p>

<h2>Thank You</h2>

<p>Let me know what you think. If you liked my content, feel free to checkout my content on <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<center><script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script></center>


<p><br></p>

<p>Feel free to have a look at my <strong><a href="https://bekkerclothing.com/collections/developer">Developer T-Shirt Range</a>:</strong></p>

<div id='product-component-1574559271268'></div>


<script type="text/javascript">
/*&lt;![CDATA[*/
(function () {
  var scriptURL = 'https://sdks.shopifycdn.com/buy-button/latest/buy-button-storefront.min.js';
  if (window.ShopifyBuy) {
    if (window.ShopifyBuy.UI) {
      ShopifyBuyInit();
    } else {
      loadScript();
    }
  } else {
    loadScript();
  }
  function loadScript() {
    var script = document.createElement('script');
    script.async = true;
    script.src = scriptURL;
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(script);
    script.onload = ShopifyBuyInit;
  }
  function ShopifyBuyInit() {
    var client = ShopifyBuy.buildClient({
      domain: 'bekkerclothing.myshopify.com',
      storefrontAccessToken: '68eb29a6d90539cb0321ea90bb043fae',
    });
    ShopifyBuy.UI.onReady(client).then(function (ui) {
      ui.createComponent('product', {
        id: '4391499104340',
        node: document.getElementById('product-component-1574559271268'),
        moneyFormat: '%24%7B%7Bamount%7D%7D',
        options: {
  "product": {
    "styles": {
      "product": {
        "@media (min-width: 601px)": {
          "max-width": "calc(25% - 20px)",
          "margin-left": "20px",
          "margin-bottom": "50px"
        }
      }
    },
    "text": {
      "button": "Add to cart"
    }
  },
  "productSet": {
    "styles": {
      "products": {
        "@media (min-width: 601px)": {
          "margin-left": "-20px"
        }
      }
    }
  },
  "modalProduct": {
    "contents": {
      "img": false,
      "imgWithCarousel": true,
      "button": false,
      "buttonWithQuantity": true
    },
    "styles": {
      "product": {
        "@media (min-width: 601px)": {
          "max-width": "100%",
          "margin-left": "0px",
          "margin-bottom": "0px"
        }
      }
    },
    "text": {
      "button": "Add to cart"
    }
  },
  "cart": {
    "text": {
      "total": "Subtotal",
      "button": "Checkout"
    }
  }
},
      });
    });
  }
})();
/*]]&gt;*/
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Deploy a Webapp on a AWS EKS Kubernetes Cluster]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/11/17/how-to-deploy-a-webapp-on-a-aws-eks-kubernetes-cluster/"/>
    <updated>2019-11-17T00:21:19+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/11/17/how-to-deploy-a-webapp-on-a-aws-eks-kubernetes-cluster</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/68999897-f59a3d00-08cf-11ea-83c7-8624e6048106.png" alt="kubernetes-eks-deploy-webapp" /></p>

<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <a href="https://github.com/ruanbekker"><img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /></a></p>

<p><a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @ruanbekker</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>In our previous post, <a href="https://blog.ruanbekker.com/blog/2019/11/16/how-to-setup-a-aws-eks-kubernetes-cluster/">Part 1 - Setup a EKS Cluster</a> we went through the steps on how to Setup a EKS Cluster.</p>

<h2>What are we doing today</h2>

<p>In this post, we will deploy a sample web application to EKS and access our application using a ELB that EKS provides us.</p>

<h2>Deployment Manifests</h2>

<p>We will have two manifests that we will deploy to Kubernetes, a deployment manifest that will hold the information about our application and a service manifest that will hold the information about the service load balancer.</p>

<p>The deployment manifest, you will notice that we are specifying that we want 3 containers, we are using labels so that our service and deployment can find each other and we are using a basic http web application that will listen on port 8000 inside the container:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat deployment.yml
</span><span class='line'>apiVersion: apps/v1
</span><span class='line'>kind: Deployment
</span><span class='line'>metadata:
</span><span class='line'>  name: my-hostname-app
</span><span class='line'>spec:
</span><span class='line'>  replicas: 3
</span><span class='line'>  selector:
</span><span class='line'>    matchLabels:
</span><span class='line'>      app: my-app
</span><span class='line'>  template:
</span><span class='line'>    metadata:
</span><span class='line'>      labels:
</span><span class='line'>        app: my-app
</span><span class='line'>    spec:
</span><span class='line'>      containers:
</span><span class='line'>        - name: my-app-container
</span><span class='line'>          image: ruanbekker/hostname
</span><span class='line'>          ports:
</span><span class='line'>          - name: http
</span><span class='line'>            containerPort: 8000
</span></code></pre></td></tr></table></div></figure>


<p>The service manifest, you will notice that we are specifying <code>type: LoadBalancer</code> in our service manifest, this will tell EKS to provision a ELB for your application so that we can access our application from the internet.</p>

<p>You will see that the selector is specifying <code>my-app</code> which we also provided in our deployment.yml so that our service know where to find our backend application. We are also stating that the service is listening on port 80, and will forward its traffic to our deployment on port 8000:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat service.yml
</span><span class='line'>apiVersion: v1
</span><span class='line'>kind: Service
</span><span class='line'>metadata:
</span><span class='line'>  name: my-hostname-app-service
</span><span class='line'>  labels:
</span><span class='line'>    app: my-app
</span><span class='line'>spec:
</span><span class='line'>  ports:
</span><span class='line'>  - port: 80
</span><span class='line'>    targetPort: 8000
</span><span class='line'>  selector:
</span><span class='line'>    app: my-app
</span><span class='line'>  <span class="nb">type</span>: LoadBalancer
</span></code></pre></td></tr></table></div></figure>


<h2>Deployment Time</h2>

<p>Deploy our application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl apply -f deployment.yml
</span><span class='line'>deployment.apps/my-hostname-app created
</span></code></pre></td></tr></table></div></figure>


<p>Deploy our service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl apply -f service.yml
</span><span class='line'>service/my-hostname-app-service created
</span></code></pre></td></tr></table></div></figure>


<p>Now when we look at our deployment, we should see that 3 replicas of our application is running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get deployments
</span><span class='line'>NAME              READY   UP-TO-DATE   AVAILABLE   AGE
</span><span class='line'>my-hostname-app   3/3     <span class="m">3</span>            <span class="m">3</span>           4m38s
</span></code></pre></td></tr></table></div></figure>


<p>To see the pods of that deployment, look at the pods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get pods
</span><span class='line'>NAME                               READY   STATUS    RESTARTS   AGE
</span><span class='line'>my-hostname-app-5dcd48dfc5-2j8zm   1/1     Running   <span class="m">0</span>          24s
</span><span class='line'>my-hostname-app-5dcd48dfc5-58vkc   1/1     Running   <span class="m">0</span>          24s
</span><span class='line'>my-hostname-app-5dcd48dfc5-cmjwj   1/1     Running   <span class="m">0</span>          24s
</span></code></pre></td></tr></table></div></figure>


<p>As we have more than one service in our EKS cluster, we can specify the labels that we have applied on our manifests to filter what we want to see (<code>app: my-app</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get service --selector <span class="nv">app</span><span class="o">=</span>my-app
</span><span class='line'>NAME                      TYPE           CLUSTER-IP       EXTERNAL-IP                                                              PORT<span class="o">(</span>S<span class="o">)</span>        AGE
</span><span class='line'>my-hostname-app-service   LoadBalancer   10.100.114.166   a460661ce089b11ea97cd06dd7513db6-669054126.eu-west-1.elb.amazonaws.com   80:30648/TCP   2m29s
</span></code></pre></td></tr></table></div></figure>


<p>As we can see EKS provisioned a ELB for us, and we can access the application by making a HTTP request:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -i http://a460661ce089b11ea97cd06dd7513db6-669054126.eu-west-1.elb.amazonaws.com
</span><span class='line'>HTTP/1.1 <span class="m">200</span> OK
</span><span class='line'>Date: Sat, <span class="m">16</span> Nov <span class="m">2019</span> 18:05:27 GMT
</span><span class='line'>Content-Length: 43
</span><span class='line'>Content-Type: text/plain<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>
</span><span class='line'>Hostname: my-hostname-app-5dcd48dfc5-2j8zm
</span></code></pre></td></tr></table></div></figure>


<h2>Scaling our Deployment</h2>

<p>Let&rsquo;s scale our deployment to 5 replicas:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl scale deployment/my-hostname-app --replicas 5
</span><span class='line'>deployment.extensions/my-hostname-app scaled
</span></code></pre></td></tr></table></div></figure>


<p>After all the pods has been deployed, you should be able to see the 5 out of 5 pods that we provisioned, should be running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get deployments
</span><span class='line'>NAME              READY   UP-TO-DATE   AVAILABLE   AGE
</span><span class='line'>my-hostname-app   5/5     <span class="m">5</span>            <span class="m">5</span>           5m7s
</span></code></pre></td></tr></table></div></figure>


<p>We can then also see the pods that our deployment is referencing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get pods
</span><span class='line'>NAME                               READY   STATUS    RESTARTS   AGE
</span><span class='line'>my-hostname-app-5dcd48dfc5-2j8zm   1/1     Running   <span class="m">0</span>          6m8s
</span><span class='line'>my-hostname-app-5dcd48dfc5-58vkc   1/1     Running   <span class="m">0</span>          6m8s
</span><span class='line'>my-hostname-app-5dcd48dfc5-cmjwj   1/1     Running   <span class="m">0</span>          6m8s
</span><span class='line'>my-hostname-app-5dcd48dfc5-m4xcq   1/1     Running   <span class="m">0</span>          67s
</span><span class='line'>my-hostname-app-5dcd48dfc5-zf6xl   1/1     Running   <span class="m">0</span>          68s
</span></code></pre></td></tr></table></div></figure>


<h2>Further Reading on Kubernetes</h2>

<p>This is one amazing resource that covers a lot of kubernetes topics and will help you throughout your EKS journey:</p>

<ul>
<li><a href="https://eksworkshop.com/introduction/">EKSWorkshop</a></li>
<li><a href="https://docs.aws.amazon.com/eks/latest/userguide/worker.html">Worker Nodes Documentation</a></li>
<li><a href="https://docs.aws.amazon.com/eks/latest/userguide/eks-guestbook.html">Guestbook Kubernetes Sample Application</a></li>
</ul>


<h2>Thank You</h2>

<p>Let me know what you think. If you liked my content, feel free to checkout my content on <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<center><script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script></center>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Setup a AWS EKS Kubernetes Cluster]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/11/16/how-to-setup-a-aws-eks-kubernetes-cluster/"/>
    <updated>2019-11-16T22:31:36+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/11/16/how-to-setup-a-aws-eks-kubernetes-cluster</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/68999066-b8c84900-08c3-11ea-9669-5c859590296c.png" alt="kubernetes-eks-aws-cluster" /></p>

<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <a href="https://github.com/ruanbekker"><img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /></a></p>

<p><a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @ruanbekker</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>This will be a tutorial split up in two posts, where I will show you how to provision a EKS Cluster (Elastic Kubernetes Service) on AWS and in the <a href="https://blog.ruanbekker.com/blog/2019/11/17/how-to-deploy-a-webapp-on-a-aws-eks-kubernetes-cluster/">next post</a>, how to deploy a web application to your cluster (<a href="https://blog.ruanbekker.com/blog/2019/11/17/how-to-deploy-a-webapp-on-a-aws-eks-kubernetes-cluster/">Part2 - Deploy a Web App to EKS</a>.)</p>

<h2>And then came EKS</h2>

<p>As some of you may know, I&rsquo;m a massive AWS fan boy, and since AWS released their managed Kubernetes service, I was quite excited to test it out. A couple of months passed and I got the opportunity to test out on-the-job as we moved to Kubernetes.</p>

<p>A couple of moths has passed, and serving multiple production workloads on EKS, and I am really impressed with the service.</p>

<p>Amazon provides a vanilla Kubernetes version, they manage the master nodes and they have a extra component called the cloud controller that runs on the master nodes, which is the aws native component that talks to other aws services (as far as I can recall)</p>

<h2>What are we doing today</h2>

<p>We will cover this in this post:</p>

<table>
<thead>
<tr>
<th> <strong>Topic</strong>                                                    </th>
</tr>
</thead>
<tbody>
<tr>
<td> Deploy a EKS Cluster                                         </td>
</tr>
<tr>
<td> View the resources to see what was provisioned on AWS        </td>
</tr>
<tr>
<td> Interact with Kubernetes using kubectl                       </td>
</tr>
<tr>
<td> Terminate a Node and verify that the ASG replaces the node   </td>
</tr>
<tr>
<td> Scale down your worker nodes                                 </td>
</tr>
<tr>
<td> Run a pod on your cluster                                    </td>
</tr>
</tbody>
</table>


<p>In the <a href="https://blog.ruanbekker.com/blog/2019/11/17/how-to-deploy-a-webapp-on-a-aws-eks-kubernetes-cluster/">next post</a> we will deploy a web service to our EKS cluster.</p>

<h2>Install Pre-Requirements</h2>

<p>We require <code>awscli</code>, <code>eksctl</code> and <code>kubectl</code> before we continue. I will be installing this on MacOS, but you can have a look at the following links if you are using a different operating system:</p>

<ul>
<li><a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html">Install awscli</a></li>
<li><a href="https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html">Install eksctl</a></li>
<li><a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">Install kubectl</a></li>
</ul>


<p>Install awscli:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pip install awscli
</span></code></pre></td></tr></table></div></figure>


<p>Install kubectl:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew update
</span><span class='line'><span class="nv">$ </span>brew install kubernetes-cli
</span></code></pre></td></tr></table></div></figure>


<p>Install eksctl:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew tap weaveworks/tap
</span><span class='line'><span class="nv">$ </span>brew install weaveworks/tap/eksctl
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy EKS</h2>

<p>Create a SSH key if you would like to SSH to your worker nodes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh-keygen -b <span class="m">2048</span> -f ~/.ssh/eks -t rsa -q -N <span class="s2">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Import your public key to EC2:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws --profile dev --region eu-west-1 ec2 import-key-pair --key-name <span class="s2">&quot;eks&quot;</span> --public-key-material file://~/.ssh/eks.pub
</span></code></pre></td></tr></table></div></figure>


<p>Provision your cluster using eksctl. This will deploy two cloudformation stacks, one for the kubernetes cluster, and one for the node group.</p>

<p>I am creating a kubernetes cluster with 3 nodes of instance type (t2.small) and using version 1.14:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>eksctl --profile dev --region eu-west-1 create cluster --name my-eks-cluster --version 1.14 --nodes <span class="m">3</span> --node-type t2.small --ssh-public-key eks
</span><span class='line'>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  eksctl version 0.9.0
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  using region eu-west-1
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  setting availability zones to <span class="o">[</span>eu-west-1a eu-west-1b eu-west-1c<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  subnets <span class="k">for</span> eu-west-1a - public:192.168.0.0/19 private:192.168.96.0/19
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  subnets <span class="k">for</span> eu-west-1b - public:192.168.32.0/19 private:192.168.128.0/19
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  subnets <span class="k">for</span> eu-west-1c - public:192.168.64.0/19 private:192.168.160.0/19
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  nodegroup <span class="s2">&quot;ng-f27f560e&quot;</span> will use <span class="s2">&quot;ami-059c6874350e63ca9&quot;</span> <span class="o">[</span>AmazonLinux2/1.14<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  using Kubernetes version 1.14
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  creating EKS cluster <span class="s2">&quot;my-eks-cluster&quot;</span> in <span class="s2">&quot;eu-west-1&quot;</span> region
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  will create <span class="m">2</span> separate CloudFormation stacks <span class="k">for</span> cluster itself and the initial nodegroup
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  <span class="k">if</span> you encounter any issues, check CloudFormation console or try <span class="s1">&#39;eksctl utils describe-stacks --region=eu-west-1 --cluster=my-eks-cluster&#39;</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  CloudWatch logging will not be enabled <span class="k">for</span> cluster <span class="s2">&quot;my-eks-cluster&quot;</span> in <span class="s2">&quot;eu-west-1&quot;</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  you can <span class="nb">enable </span>it with <span class="s1">&#39;eksctl utils update-cluster-logging --region=eu-west-1 --cluster=my-eks-cluster&#39;</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  Kubernetes API endpoint access will use default of <span class="o">{</span><span class="nv">publicAccess</span><span class="o">=</span><span class="nb">true</span>, <span class="nv">privateAccess</span><span class="o">=</span><span class="nb">false</span><span class="o">}</span> <span class="k">for</span> cluster <span class="s2">&quot;my-eks-cluster&quot;</span> in <span class="s2">&quot;eu-west-1&quot;</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  <span class="m">2</span> sequential tasks: <span class="o">{</span> create cluster control plane <span class="s2">&quot;my-eks-cluster&quot;</span>, create nodegroup <span class="s2">&quot;ng-f27f560e&quot;</span> <span class="o">}</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  building cluster stack <span class="s2">&quot;eksctl-my-eks-cluster-cluster&quot;</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  deploying stack <span class="s2">&quot;eksctl-my-eks-cluster-cluster&quot;</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  building nodegroup stack <span class="s2">&quot;eksctl-my-eks-cluster-nodegroup-ng-f27f560e&quot;</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  --nodes-min<span class="o">=</span><span class="m">3</span> was <span class="nb">set </span>automatically <span class="k">for</span> nodegroup ng-f27f560e
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  --nodes-max<span class="o">=</span><span class="m">3</span> was <span class="nb">set </span>automatically <span class="k">for</span> nodegroup ng-f27f560e
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  deploying stack <span class="s2">&quot;eksctl-my-eks-cluster-nodegroup-ng-f27f560e&quot;</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span>  all EKS cluster resources <span class="k">for</span> <span class="s2">&quot;my-eks-cluster&quot;</span> have been created
</span><span class='line'><span class="o">[</span>+<span class="o">]</span>  saved kubeconfig as <span class="s2">&quot;/Users/ruan/.kube/config&quot;</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  adding identity <span class="s2">&quot;arn:aws:iam::000000000000:role/eksctl-my-eks-cluster-nodegroup-n-NodeInstanceRole-SNVIW5C3J3SM&quot;</span> to auth ConfigMap
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  nodegroup <span class="s2">&quot;ng-f27f560e&quot;</span> has <span class="m">0</span> node<span class="o">(</span>s<span class="o">)</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  waiting <span class="k">for</span> at least <span class="m">3</span> node<span class="o">(</span>s<span class="o">)</span> to become ready in <span class="s2">&quot;ng-f27f560e&quot;</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  nodegroup <span class="s2">&quot;ng-f27f560e&quot;</span> has <span class="m">3</span> node<span class="o">(</span>s<span class="o">)</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  node <span class="s2">&quot;ip-192-168-42-186.eu-west-1.compute.internal&quot;</span> is ready
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  node <span class="s2">&quot;ip-192-168-75-87.eu-west-1.compute.internal&quot;</span> is ready
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  node <span class="s2">&quot;ip-192-168-8-167.eu-west-1.compute.internal&quot;</span> is ready
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  kubectl <span class="nb">command </span>should work with <span class="s2">&quot;/Users/ruan/.kube/config&quot;</span>, try <span class="s1">&#39;kubectl get nodes&#39;</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span>  EKS cluster <span class="s2">&quot;my-eks-cluster&quot;</span> in <span class="s2">&quot;eu-west-1&quot;</span> region is ready
</span></code></pre></td></tr></table></div></figure>


<p>Now that our EKS cluster has been provisioned, let&rsquo;s browse through our AWS Management Console to understand what was provisioned.</p>

<h2>View the Provisioned Resources</h2>

<p>If we have a look at the Cloudformation stacks, we can see the two stacks that I mentioned previously:</p>

<p><img width="1057" alt="image" src="https://user-images.githubusercontent.com/567298/68996480-58c1aa80-08a3-11ea-95c1-0fcf0bc1863b.png"></p>

<p>Navigating to our EC2 Instances dashboard, we can see the three worker nodes that we provisioned. Remember that AWS manages the master nodes and we cant see them.</p>

<p><img width="1106" alt="image" src="https://user-images.githubusercontent.com/567298/68996520-ea311c80-08a3-11ea-8ea3-e9e481e4ba6f.png"></p>

<p>We have a ASG (Auto Scaling Group) associated with our worker nodes, nodegroup. We can make use of autoscaling and also have desired state, so we will test this out later where we will delete a worker node and verify if it gets replaced:</p>

<p><img width="1113" alt="image" src="https://user-images.githubusercontent.com/567298/68996551-2e242180-08a4-11ea-8df6-7b962b9aa03a.png"></p>

<h2>Navigate using Kubectl:</h2>

<p>Eksctl already applied the kubeconfig to <code>~/.kube/config</code>, so we can start using kubectl. Let&rsquo;s start by viewing the nodes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get nodes
</span><span class='line'>NAME                                           STATUS   ROLES    AGE     VERSION
</span><span class='line'>ip-192-168-42-186.eu-west-1.compute.internal   Ready    &lt;none&gt;   8m50s   v1.14.7-eks-1861c5
</span><span class='line'>ip-192-168-75-87.eu-west-1.compute.internal    Ready    &lt;none&gt;   8m55s   v1.14.7-eks-1861c5
</span><span class='line'>ip-192-168-8-167.eu-west-1.compute.internal    Ready    &lt;none&gt;   8m54s   v1.14.7-eks-1861c5
</span></code></pre></td></tr></table></div></figure>


<p>Viewing our pods from our <code>kube-system</code> namespace (we dont have any pods in our default namespace at the moment):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get pods --namespace kube-system
</span><span class='line'>NAME                       READY   STATUS    RESTARTS   AGE
</span><span class='line'>aws-node-btfbk             1/1     Running   <span class="m">0</span>          11m
</span><span class='line'>aws-node-c6ktk             1/1     Running   <span class="m">0</span>          11m
</span><span class='line'>aws-node-wf8mc             1/1     Running   <span class="m">0</span>          11m
</span><span class='line'>coredns-759d6fc95f-ljxzf   1/1     Running   <span class="m">0</span>          17m
</span><span class='line'>coredns-759d6fc95f-s6lg6   1/1     Running   <span class="m">0</span>          17m
</span><span class='line'>kube-proxy-db46b           1/1     Running   <span class="m">0</span>          11m
</span><span class='line'>kube-proxy-ft4mc           1/1     Running   <span class="m">0</span>          11m
</span><span class='line'>kube-proxy-s5q2w           1/1     Running   <span class="m">0</span>          11m
</span></code></pre></td></tr></table></div></figure>


<p>And our services from all our namespaces:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get services --all-namespaces
</span><span class='line'>NAMESPACE     NAME         TYPE        CLUSTER-IP    EXTERNAL-IP   PORT<span class="o">(</span>S<span class="o">)</span>         AGE
</span><span class='line'>default       kubernetes   ClusterIP   10.100.0.1    &lt;none&gt;        443/TCP         19m
</span><span class='line'>kube-system   kube-dns     ClusterIP   10.100.0.10   &lt;none&gt;        53/UDP,53/TCP   19m
</span></code></pre></td></tr></table></div></figure>


<h2>Testing the ASG</h2>

<p>Let&rsquo;s view our current nodes in our cluster, then select the first node, delete it and verify if the ASG replaces that node.</p>

<p>First, view the nodes and select one node&rsquo;s address:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get nodes
</span><span class='line'>NAME                                           STATUS   ROLES    AGE   VERSION
</span><span class='line'>ip-192-168-42-186.eu-west-1.compute.internal   Ready    &lt;none&gt;   37m   v1.14.7-eks-1861c5
</span><span class='line'>ip-192-168-75-87.eu-west-1.compute.internal    Ready    &lt;none&gt;   37m   v1.14.7-eks-1861c5
</span><span class='line'>ip-192-168-8-167.eu-west-1.compute.internal    Ready    &lt;none&gt;   37m   v1.14.7-eks-1861c5
</span></code></pre></td></tr></table></div></figure>


<p>Use the awscli to lookup the EC2 instance id, as we will need this id to delete the node:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws --profile dev ec2 describe-instances --query <span class="s1">&#39;Reservations[*].Instances[?PrivateDnsName==`ip-192-168-42-186.eu-west-1.compute.internal`].[InstanceId][]&#39;</span> --output text
</span><span class='line'>i-0d016de17a46d5178
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have the EC2 instance id, delete the node:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws --profile dev ec2 terminate-instances --instance-id i-0d016de17a46d51782
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;TerminatingInstances&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;CurrentState&quot;</span>: <span class="o">{</span>
</span><span class='line'>                <span class="s2">&quot;Code&quot;</span>: 32,
</span><span class='line'>                <span class="s2">&quot;Name&quot;</span>: <span class="s2">&quot;shutting-down&quot;</span>
</span><span class='line'>            <span class="o">}</span>,
</span><span class='line'>            <span class="s2">&quot;InstanceId&quot;</span>: <span class="s2">&quot;i-0d016de17a46d5178&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;PreviousState&quot;</span>: <span class="o">{</span>
</span><span class='line'>                <span class="s2">&quot;Code&quot;</span>: 16,
</span><span class='line'>                <span class="s2">&quot;Name&quot;</span>: <span class="s2">&quot;running&quot;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have deleted the EC2 instance, view the nodes and you will see the node has been terminated:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get nodes
</span><span class='line'>NAME                                          STATUS   ROLES    AGE   VERSION
</span><span class='line'>ip-192-168-75-87.eu-west-1.compute.internal   Ready    &lt;none&gt;   41m   v1.14.7-eks-1861c5
</span><span class='line'>ip-192-168-8-167.eu-west-1.compute.internal   Ready    &lt;none&gt;   41m   v1.14.7-eks-1861c5
</span></code></pre></td></tr></table></div></figure>


<p>Allow about a minute so that the ASG can replace the node, and when you list again you will see that the ASG replaced the node :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get nodes
</span><span class='line'>NAME                                          STATUS   ROLES    AGE   VERSION
</span><span class='line'>ip-192-168-42-61.eu-west-1.compute.internal   Ready    &lt;none&gt;   50s   v1.14.7-eks-1861c5
</span><span class='line'>ip-192-168-75-87.eu-west-1.compute.internal   Ready    &lt;none&gt;   42m   v1.14.7-eks-1861c5
</span><span class='line'>ip-192-168-8-167.eu-west-1.compute.internal   Ready    &lt;none&gt;   42m   v1.14.7-eks-1861c5
</span></code></pre></td></tr></table></div></figure>


<h2>Run a Pod</h2>

<p>Run a busybox pod on your EKS cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl run --rm -it --generator run-pod/v1 my-busybox-pod --image busybox -- /bin/sh
</span></code></pre></td></tr></table></div></figure>


<p>You will be dropped into a shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/ <span class="c"># busybox | head -1</span>
</span><span class='line'>BusyBox v1.31.1 <span class="o">(</span>2019-10-28 18:40:01 UTC<span class="o">)</span> multi-call binary.
</span></code></pre></td></tr></table></div></figure>


<p>And exit the shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/ <span class="c"># exit</span>
</span><span class='line'>Session ended, resume using <span class="s1">&#39;kubectl attach my-busybox-pod -c my-busybox-pod -i -t&#39;</span> <span class="nb">command </span>when the pod is running
</span><span class='line'>pod <span class="s2">&quot;my-busybox-pod&quot;</span> deleted
</span></code></pre></td></tr></table></div></figure>


<h2>Scaling Nodes</h2>

<p>While I will not be covering auto-scaling in this post, we can manually scale the worker node count. Let&rsquo;s scale it down to 1 node.</p>

<p>First we need to get the EKS cluster name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>eksctl --profile dev --region eu-west-1 get clusters
</span><span class='line'>NAME      REGION
</span><span class='line'>my-eks-cluster    eu-west-1
</span></code></pre></td></tr></table></div></figure>


<p>Then we need the node group id:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>eksctl --profile dev --region eu-west-1 get nodegroup --cluster my-eks-cluster
</span><span class='line'>CLUSTER       NODEGROUP   CREATED         MIN SIZE    MAX SIZE    DESIRED CAPACITY    INSTANCE TYPE   IMAGE ID
</span><span class='line'>my-eks-cluster    ng-f27f560e 2019-11-16T16:55:41Z    3       3       3           t2.small    ami-059c6874350e63ca9
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have the node group id, we can scale the node count:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>eksctl --profile dev --region eu-west-1 scale nodegroup --cluster my-eks-cluster --nodes <span class="m">1</span> ng-f27f560e
</span><span class='line'>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  scaling nodegroup stack <span class="s2">&quot;eksctl-my-eks-cluster-nodegroup-ng-f27f560e&quot;</span> in cluster eksctl-my-eks-cluster-cluster
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  scaling nodegroup, desired capacity from <span class="m">3</span> to 1, min size from <span class="m">3</span> to 1
</span></code></pre></td></tr></table></div></figure>


<p>Now when we use kubectl to view the nodes, we will see we only have 1 worker node:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get nodes
</span><span class='line'>NAME                                          STATUS   ROLES    AGE   VERSION
</span><span class='line'>ip-192-168-8-167.eu-west-1.compute.internal   Ready    &lt;none&gt;   73m   v1.14.7-eks-1861c5
</span></code></pre></td></tr></table></div></figure>


<h2>Clean Up</h2>

<p>If you want to follow along deploying a web application to your EKS cluster before we terminate the cluster, have a look at <a href="https://blog.ruanbekker.com/blog/2019/11/17/how-to-deploy-a-webapp-on-a-aws-eks-kubernetes-cluster/">Part 2 - EKS Tutorial</a> before continuing.</p>

<p>Once you are ready to terminate your EKS cluster, you can go ahead and terminate the cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>eksctl --profile dev --region eu-west-1 delete cluster --name my-eks-cluster
</span><span class='line'>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  eksctl version 0.9.0
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  using region eu-west-1
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  deleting EKS cluster <span class="s2">&quot;my-eks-cluster&quot;</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span>  kubeconfig has been updated
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  cleaning up LoadBalancer services
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  <span class="m">2</span> sequential tasks: <span class="o">{</span> delete nodegroup <span class="s2">&quot;ng-f27f560e&quot;</span>, delete cluster control plane <span class="s2">&quot;my-eks-cluster&quot;</span> <span class="o">[</span>async<span class="o">]</span> <span class="o">}</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  will delete stack <span class="s2">&quot;eksctl-my-eks-cluster-nodegroup-ng-f27f560e&quot;</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  waiting <span class="k">for</span> stack <span class="s2">&quot;eksctl-my-eks-cluster-nodegroup-ng-f27f560e&quot;</span> to get deleted
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  will delete stack <span class="s2">&quot;eksctl-my-eks-cluster-cluster&quot;</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span>  all cluster resources were deleted
</span></code></pre></td></tr></table></div></figure>


<h2>Further Reading on Kubernetes</h2>

<p>This is one amazing resource that covers a lot of kubernetes topics and will help you throughout your EKS journey:
- <a href="https://eksworkshop.com/introduction/">EKSWorkshop</a></p>

<h2>Thank You</h2>

<p>Let me know what you think. If you liked my content, feel free to checkout my content on <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<center><script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script></center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing AWS Lambda Functions Locally on Docker With LambCi]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/11/14/testing-aws-lambda-functions-locally-on-docker-with-lambci/"/>
    <updated>2019-11-14T23:57:10+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/11/14/testing-aws-lambda-functions-locally-on-docker-with-lambci</id>
    <content type="html"><![CDATA[<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <a href="https://github.com/ruanbekker"><img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /></a></p>

<p><a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @ruanbekker</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>I discovered a Docker image called <strong>LambCi</strong> that allows you to test lambda functions locally on docker and wanted to share with you how it works.</p>

<h2>Python Lambda Function</h2>

<p>We will create a basic lambda function to demonstrate how it works.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir task
</span><span class='line'>$ cat &gt; task/lambda_function.py &lt;&lt; EOF
</span><span class='line'>import json
</span><span class='line'>
</span><span class='line'>def lambda_handler(event, context):
</span><span class='line'>    if event:
</span><span class='line'>
</span><span class='line'>        try:
</span><span class='line'>            event['name']
</span><span class='line'>            name = event['name']
</span><span class='line'>            output_string = 'My name is {}'.format(name.capitalize())
</span><span class='line'>
</span><span class='line'>        except KeyError:
</span><span class='line'>            output_string = 'A name was not defined in the event payload'
</span><span class='line'>
</span><span class='line'>    return output_string
</span><span class='line'>EOF</span></code></pre></td></tr></table></div></figure>


<p>Now that we&rsquo;ve created the function, run the docker container with the parameters of the functions handler method and the event parameters:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run --rm -v "$PWD/task":/var/task lambci/lambda:python3.7 lambda_function.lambda_handler '{"name": "ruan"}'
</span><span class='line'>START RequestId: 70025895-1233-1362-8006-c2784b5d80b6 Version: $LATEST
</span><span class='line'>END RequestId: 70025895-1233-1362-8006-c2784b5d80b6
</span><span class='line'>REPORT RequestId: 70025895-1233-1362-8006-c2784b5d80b6    Duration: 7.51 ms   Billed Duration: 100 ms Memory Size: 1536 MB    Max Memory Used: 23 MB
</span><span class='line'>"My name is Ruan"</span></code></pre></td></tr></table></div></figure>


<p>And another call:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run --rm -v "$PWD/task":/var/task lambci/lambda:python3.7 lambda_function.lambda_handler '{"nam": "ruan"}'
</span><span class='line'>START RequestId: f7ab2e97-05db-1184-a009-11b92638534f Version: $LATEST
</span><span class='line'>END RequestId: f7ab2e97-05db-1184-a009-11b92638534f
</span><span class='line'>REPORT RequestId: f7ab2e97-05db-1184-a009-11b92638534f    Duration: 5.32 ms   Billed Duration: 100 ms Memory Size: 1536 MB    Max Memory Used: 23 MB
</span><span class='line'>"A name was not defined in the event payload"</span></code></pre></td></tr></table></div></figure>


<p>Checkout the dockerhub page for more info:
- <a href="https://hub.docker.com/r/lambci/lambda/">https://hub.docker.com/r/lambci/lambda/</a></p>

<h2>Thank You</h2>

<p>Let me know what you think. If you liked my content, feel free to checkout my content on <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<center><script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script></center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating Google OAuth With Traefik]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/11/10/integrating-google-oauth-with-traefik/"/>
    <updated>2019-11-10T20:03:06+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/11/10/integrating-google-oauth-with-traefik</id>
    <content type="html"><![CDATA[<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <a href="https://github.com/ruanbekker"><img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /></a></p>

<p><a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @ruanbekker</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>I stumbled upon a really cool <a href="https://github.com/thomseddon/traefik-forward-auth">project: Traefik Forward Auth</a> that provides Google OAuth based Login and Authentication for <a href="https://traefik.io/">Traefik</a></p>

<p>This means that you can secure your Traefik backend services by using Google for authentication to access your backends. Authorizing who can logon, get&rsquo;s managed on the forward proxy.</p>

<p>If you have not worked with Traefik, Traefik is one amazing dynamic and modern reverse proxy / load balancer built for micro services.</p>

<h2>What are we doing today</h2>

<p>In this demonstration we will setup a new google application, setup the forward-auth proxy and spin up a service that we will use google to authenticate against to access our application on Docker Swarm.</p>

<p>Step by step tutorial has been published on my sysadmins blog, <strong><a href="https://sysadmins.co.za/integrating-google-oauth-with-traefik/?referral=blog.ruanbekker.com">read more here</a></strong></p>

<p><a href="https://sysadmins.co.za/integrating-google-oauth-with-traefik/?referral=blog.ruanbekker.com"><img src="https://user-images.githubusercontent.com/567298/68548655-10644180-03f8-11ea-96fe-47f01b1dd635.png" alt="" /></a></p>

<h2>Thank You</h2>

<p>Let me know what you think. If you liked my content, feel free to checkout my content on <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<center><script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script></center>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running vs Code in Your Browser With Docker]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/09/14/running-vs-code-in-your-browser-with-docker/"/>
    <updated>2019-09-14T12:56:05+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/09/14/running-vs-code-in-your-browser-with-docker</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/64907374-cc9fd500-d6f1-11e9-87f0-3cae18f02c8d.png" alt="vscode" /></p>

<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <a href="https://github.com/bekkerstacks/traefik"><img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /></a></p>

<p><a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @ruanbekker</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>Today we will setup a Visual Studio Code instance running on Docker, so that you can access VSCode via the web browser.</p>

<h2>VSCode in Docker</h2>

<p>The work directory will be under <code>code</code> and the application will store its data under <code>data</code>. Lets go ahead and create them:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir demo/{code,data}
</span><span class='line'>cd demo</span></code></pre></td></tr></table></div></figure>


<p>Run the vscode container:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run --rm --name vscode \
</span><span class='line'>  -it -p 8443:8443 -p 8888:8888 \
</span><span class='line'>  -v $(pwd)/data:/data -v $(pwd)/code:/code \
</span><span class='line'>ruanbekker/vscode:python-3.7</span></code></pre></td></tr></table></div></figure>


<p>The password that you require on login will be prompted in the output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INFO  code-server v1.1156-vsc1.33.1
</span><span class='line'>INFO  Additional documentation: http://github.com/cdr/code-server
</span><span class='line'>INFO  Initializing {"data-dir":"/data","extensions-dir":"/data/extensions","working-dir":"/code","log-dir":"/root/.cache/code-server/logs/20190914105631217"}
</span><span class='line'>INFO  Starting shared process [1/5]...
</span><span class='line'>INFO  Starting webserver... {"host":"0.0.0.0","port":8443}
</span><span class='line'>INFO
</span><span class='line'>INFO  Password: 4b050c4fa0ef109d53c10d9f
</span><span class='line'>INFO
</span><span class='line'>INFO  Started (click the link below to open):
</span><span class='line'>INFO  https://localhost:8443/
</span><span class='line'>INFO  Connected to shared process</span></code></pre></td></tr></table></div></figure>


<p>Access vscode on <code>https://localhost:8443/</code> and after you accepted the self-signed certificate warning, you will be presented with the login page:</p>

<p><img width="775" alt="image" src="https://user-images.githubusercontent.com/567298/64907196-89dcfd80-d6ef-11e9-82ac-09196c926f82.png"></p>

<p>After you have logged a example of creating a python file will look like this:</p>

<p><img width="898" alt="image" src="https://user-images.githubusercontent.com/567298/64907240-02dc5500-d6f0-11e9-8443-cc1778b0de86.png"></p>

<p>The source code for this docker image can be found at <a href="https://github.com/ruanbekker/dockerfiles/tree/master/vscode">https://github.com/ruanbekker/dockerfiles/tree/master/vscode</a> .</p>

<h2>Different versions</h2>

<p>Currently I have only <a href="https://hub.docker.com/r/ruanbekker/vscode/tags">python available on docker hub</a> with the requests and flask packages available. But you can fork the repository and add the upstream or packages of your choice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expire Objects in AWS S3 Automatically After 30 Days]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/09/12/expire-objects-in-aws-s3-automatically-after-30-days/"/>
    <updated>2019-09-12T22:37:11+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/09/12/expire-objects-in-aws-s3-automatically-after-30-days</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/aws-logo.png" alt="" /></p>

<p>In AWS S3 you can make use of lifecycle policies to manage the lifetime of your objects stored in S3.</p>

<p>In this tutorial, I will show you how to delete objects automatically from S3 after 30 days.</p>

<h2>Navigate to your Bucket</h2>

<p>Head over to your AWS S3 bucket where you want to delete objects after they have been stored for 30 days:</p>

<p><img width="1039" alt="0400F9CB-9223-4FDF-8FA5-D0BC1FA8EB71" src="https://user-images.githubusercontent.com/567298/64819546-c3f2b600-d5ae-11e9-93ba-13777e9b02b0.png"></p>

<h2>Lifecycle Policies</h2>

<p>Select &ldquo;Management&rdquo; and click on &ldquo;Add lifecycle rule&rdquo;:</p>

<p><img width="701" alt="9BB26C7C-F251-45C4-AE44-A34459BD0F4B" src="https://user-images.githubusercontent.com/567298/64819628-f00e3700-d5ae-11e9-9740-8aa3608163a7.png"></p>

<p>Set a rule name of choice and you have the option to provide a prefix if you want to delete objects based on a specific prefix. I will leave this blank as I want to delete objects in the root level of the bucket. Head to next on the following section:</p>

<p><img width="700" alt="AEF8B151-3FA8-454F-AC71-778A531BD1EE" src="https://user-images.githubusercontent.com/567298/64819785-58f5af00-d5af-11e9-8485-fb0dca3a02ac.png"></p>

<p>From the &ldquo;Transitions&rdquo; section, configure the transition section, by selecting to expire the current version of the object after 30 days:</p>

<p><img width="701" alt="2B395671-A4C0-4E5A-82E7-00EE6579DB5A" src="https://user-images.githubusercontent.com/567298/64819851-7c205e80-d5af-11e9-98d7-7e1dd09bcfef.png"></p>

<p>Review the configuration:</p>

<p><img width="705" alt="F7F8E800-62FF-4156-B506-5FB9BCC148E0" src="https://user-images.githubusercontent.com/567298/64819869-893d4d80-d5af-11e9-8034-8a2e3a8939f8.png"></p>

<p>When you select &ldquo;Save&rdquo;, you should be returned to the following section:</p>

<p><img width="1041" alt="8421EBCE-9503-4259-92AA-DB66C6F532AF" src="https://user-images.githubusercontent.com/567298/64819895-99edc380-d5af-11e9-84b4-7f4cc69cfd2e.png"></p>

<h2>Housecleaning on your S3 Bucket</h2>

<p>Now 30 days after you created objects on AWS S3, they will be deleted.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reindex Elasticsearch Indices With Logstash]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/09/08/reindex-elasticsearch-indices-with-logstash/"/>
    <updated>2019-09-08T13:00:59+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/09/08/reindex-elasticsearch-indices-with-logstash</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/59209960-ca872100-8bac-11e9-8672-8c6af502afe0.png" alt="logstash" /></p>

<p>In this tutorial I will show you how to reindex daily indices to a monthly index on Elasticsearch using Logstash</p>

<h2>Use Case</h2>

<p>In this scenario we have filebeat indices which have a low document count and would like to aggregate the daily indices into a bigger index, which will be a monthly index. So reindexing from <code>"filebeat-2019.08.*"</code> to <code>"filebeat-monthly-2019.08"</code>.</p>

<h2>Overview of our Setup</h2>

<p>Here we can see all the indices that we would like to read from"</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl 10.37.117.130:9200/_cat/indices/filebeat-2019.08.*?v
</span><span class='line'>health status index               uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>green  open   filebeat-2019.08.28 qoKiHUjQT5eNVF_wjLi9fA   5   1         17            0    295.4kb        147.7kb
</span><span class='line'>green  open   filebeat-2019.08.27 8PWngqFdRPKLEnrCCiw6xA   5   1        301            0    900.9kb          424kb
</span><span class='line'>green  open   filebeat-2019.08.29 PiG2ma8zSbSt6sSg7soYPA   5   1         24            0    400.2kb          196kb
</span><span class='line'>green  open   filebeat-2019.08.31 XSWZvqQDR0CugD23y6_iaA   5   1         27            0    451.5kb        222.1kb
</span><span class='line'>green  open   filebeat-2019.08.30 u_Hr9fA5RtOtpabNGUmSpw   5   1         18            0    326.1kb          163kb</span></code></pre></td></tr></table></div></figure>


<p>I have 3 nodes in my elasticsearch cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl 10.37.117.130:9200/_cat/nodes?v
</span><span class='line'>ip            heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name
</span><span class='line'>10.37.117.132           56          56   5    0.47    0.87     1.10 mdi       -      elasticsearch-01
</span><span class='line'>10.37.117.130           73          56   4    0.47    0.87     1.10 mdi       -      elasticsearch-03
</span><span class='line'>10.37.117.199           29          56   4    0.47    0.87     1.10 mdi       *      elasticsearch-02</span></code></pre></td></tr></table></div></figure>


<p>As elasticsearch create 5 primary shards by default, I want to override this behavior to creating 3 primary shards. I will be using a template, so whenever a index get created with the index pattern `&ldquo;<em>-monthly-</em>&rdquo;, it will apply the settings to create 3 primary shards and 1 replica shards:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H 'Content-Type: application/json' -XPUT 10.37.117.130:9200/_template/monthly -d '
</span><span class='line'>{"index_patterns": ["*-monthly-*"], "order": -1, "settings": {"number_of_shards": "3", "number_of_replicas": "1"}}
</span><span class='line'>'</span></code></pre></td></tr></table></div></figure>


<h2>Logstash Configuration</h2>

<p>Our logstash configuration which we will use, will read from elasticsearch and the index pattern which we want to read from. Then our ouput configuration instructs where to write the data to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /tmp/logstash/logstash.conf
</span><span class='line'>input {
</span><span class='line'>  elasticsearch {
</span><span class='line'>    hosts =&gt; [ "http://10.37.117.132:9200" ]
</span><span class='line'>    index =&gt; "filebeat-2019.08.*"
</span><span class='line'>    size =&gt; 500
</span><span class='line'>    scroll =&gt; "5m"
</span><span class='line'>    docinfo =&gt; true
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>output {
</span><span class='line'>  elasticsearch {
</span><span class='line'>    hosts =&gt; ["http://10.37.117.199:9200"]
</span><span class='line'>    index =&gt; "filebeat-monthly-2019.08"
</span><span class='line'>    document_id =&gt; "%{[@metadata][_id]}"
</span><span class='line'>  }
</span><span class='line'>  stdout {
</span><span class='line'>    codec =&gt; "dots"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Reindex the Data</h2>

<p>I will be using docker to run logstash, and map the configuration to the configuration directory inside the container:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo docker run --rm -it -v /tmp/logstash:/usr/share/logstash/pipeline docker.elastic.co/logstash/logstash-oss:6.2.4
</span><span class='line'>[2019-09-08T10:57:36,170][INFO ][logstash.pipeline        ] Pipeline started successfully {:pipeline_id=&gt;"main", :thread=&gt;"#&lt;Thread:0x7db57d5f run&gt;"}
</span><span class='line'>[2019-09-08T10:57:36,325][INFO ][logstash.agent           ] Pipelines running {:count=&gt;1, :pipelines=&gt;["main"]}
</span><span class='line'>...
</span><span class='line'>[2019-09-08T10:57:39,359][INFO ][logstash.pipeline        ] Pipeline has terminated {:pipeline_id=&gt;"main", :thread=&gt;"#&lt;Thread:0x7db57d5f run&gt;"}</span></code></pre></td></tr></table></div></figure>


<p>Review that the data was reindexed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl 10.37.117.130:9200/_cat/indices/*filebeat-*08*?v
</span><span class='line'>health status index                    uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>green  open   filebeat-2019.08.28      qoKiHUjQT5eNVF_wjLi9fA   5   1         17            0    295.4kb        147.7kb
</span><span class='line'>green  open   filebeat-2019.08.29      PiG2ma8zSbSt6sSg7soYPA   5   1         24            0    400.2kb          196kb
</span><span class='line'>green  open   filebeat-2019.08.30      u_Hr9fA5RtOtpabNGUmSpw   5   1         18            0    326.1kb          163kb
</span><span class='line'>green  open   filebeat-2019.08.27      8PWngqFdRPKLEnrCCiw6xA   5   1        301            0    900.9kb          424kb
</span><span class='line'>green  open   filebeat-2019.08.31      XSWZvqQDR0CugD23y6_iaA   5   1         27            0    451.5kb        222.1kb
</span><span class='line'>green  open   filebeat-monthly-2019.08 VZD8iDjfTfeyP-SWB9l2Pg   3   1        387            0    577.8kb        274.7kb</span></code></pre></td></tr></table></div></figure>


<p>Once we are happy with what we are seeing, we can delete the source data:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XDELETE "10.37.117.130:9200/filebeat-2019.08.*"
</span><span class='line'>{"acknowledged":true}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy a Monitoring Stack on Docker Swarm With Grafana and Prometheus]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/09/05/deploy-a-monitoring-stack-on-docker-swarm-with-grafana-and-prometheus/"/>
    <updated>2019-09-05T00:07:52+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/09/05/deploy-a-monitoring-stack-on-docker-swarm-with-grafana-and-prometheus</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57307750-696bb980-70e5-11e9-9b0b-73ad88bde6a3.png" alt="" /></p>

<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <a href="https://github.com/bekkerstacks/traefik"><img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /></a></p>

<p><a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @ruanbekker</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>In this tutorial we will deploy a monitoring stack to docker swarm, that includes Grafana, Prometheus, Node-Exporter, cAdvisor and Alertmanager.</p>

<p>If you are looking for more information on Prometheus, have a look at my other <a href="https://blog.ruanbekker.com/blog/categories/prometheus/">Prometheus and Monitoring</a> blog posts.</p>

<h2>What you will get out of this</h2>

<p>Once you deployed the stacks, you will have the following:</p>

<ul>
<li>Access Grafana through Traefik reverse proxy</li>
<li>Node-Exporter to expose node level metrics</li>
<li>cAdvisor to expose container level metrics</li>
<li>Prometheus to scrape the exposed entpoints and ingest it into Prometheus</li>
<li>Prometheus for your Timeseries Database</li>
<li>Alertmanager for firing alerts on configured rules</li>
</ul>


<p>The compose file that I will provide will have pre-populated dashboards</p>

<h2>Deploy Traefik</h2>

<p>Get the traefik stack sources:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/bekkerstacks/traefik
</span><span class='line'>$ pushd traefik</span></code></pre></td></tr></table></div></figure>


<p>Have a look at <a href="https://github.com/bekkerstacks/traefik/wiki/Deploy-Traefik-in-HTTPS-Mode">HTTPS Mode</a> if you want to deploy traefik on HTTPS, as I will use HTTP in this demonstration.</p>

<p>Set your domain and deploy the stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ DOMAIN=localhost PROTOCOL=http bash deploy.sh
</span><span class='line'>
</span><span class='line'>Username for Traefik UI: demo
</span><span class='line'>Password for Traefik UI: 
</span><span class='line'>deploying traefik stack in http mode
</span><span class='line'>Creating network public
</span><span class='line'>Creating config proxy_traefik_htpasswd
</span><span class='line'>Creating service proxy_traefik
</span><span class='line'>Traefik UI is available at:
</span><span class='line'>- http://traefik.localhost</span></code></pre></td></tr></table></div></figure>


<p>Your traefik service should be running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker service ls
</span><span class='line'>ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
</span><span class='line'>0wga71zbx1pe        proxy_traefik       replicated          1/1                 traefik:1.7.14      *:80-&gt;80/tcp</span></code></pre></td></tr></table></div></figure>


<p>Switch back to the previous directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ popd</span></code></pre></td></tr></table></div></figure>


<h2>Deploy the Monitoring Stack</h2>

<p>Get the sources:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/bekkerstacks/monitoring-cpang
</span><span class='line'>$ pushd monitoring-cpang</span></code></pre></td></tr></table></div></figure>


<p>If you want to deploy the stack with no pre-configured dashboards, you would need to use <code>./docker-compose.html</code>, but in this case we will deploy the stack with pre-configured dashboards.</p>

<p>Set the domain and deploy the stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker stack deploy -c alt_versions/docker-compose_http_with_dashboards.yml mon
</span><span class='line'>
</span><span class='line'>Creating network private
</span><span class='line'>Creating config mon_grafana_config_datasource
</span><span class='line'>Creating config mon_grafana_dashboard_prometheus
</span><span class='line'>Creating config mon_grafana_dashboard_docker
</span><span class='line'>Creating config mon_grafana_dashboard_nodes
</span><span class='line'>Creating config mon_grafana_dashboard_blackbox
</span><span class='line'>Creating config mon_alertmanager_config
</span><span class='line'>Creating config mon_prometheus_config
</span><span class='line'>Creating config mon_prometheus_rules
</span><span class='line'>Creating service mon_blackbox-exporter
</span><span class='line'>Creating service mon_alertmanager
</span><span class='line'>Creating service mon_prometheus
</span><span class='line'>Creating service mon_grafana
</span><span class='line'>Creating service mon_cadvisor
</span><span class='line'>Creating service mon_node-exporter</span></code></pre></td></tr></table></div></figure>


<p>The endpoints is configured as <code>${service_name}.${DOMAIN}</code> so you will be able to access grafana on <code>http://grafana.localhost</code> as showed in my use-case.</p>

<p>Use <code>docker stack services mon</code> to see if all the tasks has checked into its desired count then access grafana on <code>http://grafana.${DOMAIN}</code></p>

<h2>Accessing Grafana</h2>

<p>Access Grafana on <code>http://grafana.${DOMAIN}</code> and logon with the user admin and the password admin:</p>

<p><img src="https://user-images.githubusercontent.com/50801771/64292266-4d303a00-cf6a-11e9-8a49-2ae05b1ed5c6.png" alt="image" /></p>

<p>You will be asked to reset the password:</p>

<p><img src="https://user-images.githubusercontent.com/50801771/64292291-5f11dd00-cf6a-11e9-8049-2abdbb0164f6.png" alt="image" /></p>

<p>You will then be directed to the ui:</p>

<p><img src="https://user-images.githubusercontent.com/50801771/64292317-705ae980-cf6a-11e9-928b-60b5dec7ea09.png" alt="image" /></p>

<p>From the top, when you list dashboards, you will see the 3 dashboards that was pre-configured:</p>

<p><img src="https://user-images.githubusercontent.com/50801771/64292334-7b157e80-cf6a-11e9-92c6-9e0698815ba7.png" alt="image" /></p>

<p>When looking at the Swarm Nodes Dashboard:</p>

<p><img src="https://user-images.githubusercontent.com/50801771/64297086-82da2080-cf74-11e9-8060-f0193bfaeb13.png" alt="image" /></p>

<p>The Swarm Services Dashboard:</p>

<p><img src="https://user-images.githubusercontent.com/50801771/64297656-a8ffc080-cf74-11e9-88a2-b4cec295aed5.png" alt="image" /></p>

<h2>Exploring Metrics in Prometheus</h2>

<p>Access prometheus on <code>http://prometheus.${DOMAIN}</code> and from the search input, you can start exploring though all the metrics that is available in prometheus:</p>

<p><img src="https://user-images.githubusercontent.com/50801771/64298324-74403900-cf75-11e9-99b7-559b02ef67b7.png" alt="image" /></p>

<p>If we search for <code>node_load15</code> and select graph, we can have a quick look on how the 15 minute load average looks like for the node where the stack is running on:</p>

<p><img src="https://user-images.githubusercontent.com/50801771/64298454-e31d9200-cf75-11e9-89bb-b6fe94470166.png" alt="image" /></p>

<p>Having a look at the alerts section:</p>

<p><img src="https://user-images.githubusercontent.com/50801771/64299172-7657c700-cf78-11e9-97bd-143e5fe87941.png" alt="image" /></p>

<h2>Resources</h2>

<p>For more information and configuration on the stack that we use, have a look at the wiki:
- <a href="https://github.com/bekkerstacks/monitoring-cpang/wiki">https://github.com/bekkerstacks/monitoring-cpang/wiki</a></p>

<p>The github repository:
- <a href="https://github.com/bekkerstacks/monitoring-cpang">https://github.com/bekkerstacks/monitoring-cpang</a></p>

<h2>Thank You</h2>

<p>Let me know what you think. If you liked my content, feel free to checkout my content on <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<p><a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @ruanbekker</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Traefik Using Bekker Stacks]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/09/04/deploy-traefik-using-bekker-stacks/"/>
    <updated>2019-09-04T21:46:35+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/09/04/deploy-traefik-using-bekker-stacks</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/50801771/64287218-67b0e600-cf5f-11e9-8fe7-f36cb8e71f6f.png" alt="image" /></p>

<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <a href="https://github.com/bekkerstacks/traefik"><img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /></a></p>

<p><a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @ruanbekker</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>After a year or two spending quite a lot of time into docker and more specifically docker swarm, I found it quite tedious to write up docker-compose files for specific stacks that you are working on. I also felt the need for a docker swarm compose package manager.</p>

<p>Fair enough, you store them on a central repository and then you can reuse them as you go, and that is exactly what I did, but I felt that perhaps other people have the same problem.</p>

<h2>The Main Idea</h2>

<p>So the main idea is to have a central repository with docker swarm stacks, that you can pick and choose what you want, pull down the repository and use environment variables to override the default configuration and use the deploy script to deploy the stack that you want.</p>

<h2>Future Ideas</h2>

<p>In the future I would like to create a cli tool that you can use to list stacks, as example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bstacks list
</span><span class='line'>traefik
</span><span class='line'>monitoring-cpang (cAdvisor, Prometheus, Alertmanager, Node-Exporter, Grafana)
</span><span class='line'>monitoring-tig   (Telegraf, InfluxDB, Grafana)
</span><span class='line'>logging-efk      (Elasticsearch, Filebeat, Kibana)
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Listing stacks by category:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bstacks list --category logging
</span><span class='line'>logging-efk
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Deploying a stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bstacks deploy --stack traefik --stack-name proxy --env-file ./stack.env
</span><span class='line'>Username for Traefik UI: ruan
</span><span class='line'>Password for Traefik UI: deploying traefik stack in http mode
</span><span class='line'>Creating network public
</span><span class='line'>Creating config proxy_traefik_htpasswd
</span><span class='line'>Creating service proxy_traefik
</span><span class='line'>Traefik UI is available at:
</span><span class='line'>- http://traefik.localhost</span></code></pre></td></tr></table></div></figure>


<p>At the time of writing the cli tool is not available yet, but the list of available templated docker stack repositories are availabe at <a href="https://github.com/bekkerstacks?tab=repositories">github.com/bekkerstacks</a></p>

<h2>What are we doing today</h2>

<p>In this tutorial we will deploy a <a href="https://github.com/bekkerstacks/traefik">Traefik</a> proxy on Docker Swarm. I will be demonstrating the deployment on my Mac, and currently I have only docker installed, without a swarm being initialized.</p>

<p>If you already have a swarm initialized and running this on servers, you can skip the local dev section.</p>

<h2>Local Dev</h2>

<p>We will be initializing a 3 node docker swarm on a mac using docker-in-docker. Get the repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/bekkerstacks/docker-swarm</span></code></pre></td></tr></table></div></figure>


<p>Switch to the directory and deploy the swarm:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bash deploy.sh
</span><span class='line'>
</span><span class='line'>ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
</span><span class='line'>lkyjkvuc5uobzgps4m7e98l0u *   docker-desktop      Ready               Active              Leader              19.03.1
</span><span class='line'>6djgz804emj89rs8icd53wfgn     worker-1            Ready               Active                                  18.06.3-ce
</span><span class='line'>gcz6ou0s5p8kxve63ihnky7ai     worker-2            Ready               Active                                  18.06.3-ce
</span><span class='line'>ll8zfvuaek8q4x9nlijib0dfa     worker-3            Ready               Active                                  18.06.3-ce</span></code></pre></td></tr></table></div></figure>


<p>As you can see we have a 4 node docker swarm running on our local dev environment to continue.</p>

<h2>Deploy Traefik</h2>

<p>To deploy traefik in HTTPS mode, we need to set 3 environment variables: <code>EMAIL</code>, <code>DOMAIN</code>, <code>PROTOCOL</code>. We also need to setup our DNS to direct traefik to our swarm. In my case I will be using <code>1.2.3.4</code> as the IP of my Manager node and using the domain <code>mydomain.com</code></p>

<p>The DNS setup will look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A Record: mydomain.com -&gt; 1.1.1.1
</span><span class='line'>A Record: *.mydomain.com -&gt; 1.1.1.1</span></code></pre></td></tr></table></div></figure>


<p>And if you are using this locally, you can setup your <code>/etc/hosts</code> to <code>127.0.0.1 traefik.mydomain.com</code></p>

<p>Clone the repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/bekkerstacks/traefik</span></code></pre></td></tr></table></div></figure>


<p>Change the the repository and deploy the stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ EMAIL=me@mydomain.com DOMAIN=mydomain.com PROTOCOL=https bash deploy.sh
</span><span class='line'>Username for Traefik UI: ruan
</span><span class='line'>Password for Traefik UI: deploying traefik stack in https mode
</span><span class='line'>Creating network public
</span><span class='line'>Creating config proxy_traefik_htpasswd
</span><span class='line'>Creating service proxy_traefik
</span><span class='line'>Traefik UI is available at:
</span><span class='line'>- https://traefik.mydomain.com</span></code></pre></td></tr></table></div></figure>


<p>Verify that the Traefik service is running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker service ls
</span><span class='line'>ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
</span><span class='line'>0wga71zbx1pe        proxy_traefik       replicated          1/1                 traefik:1.7.14      *:80-&gt;80/tcp</span></code></pre></td></tr></table></div></figure>


<p>Navigating to the Traefik Dashboard, after providing your username and password, you should see the Traefik UI:</p>

<p><img src="https://user-images.githubusercontent.com/50801771/64284457-eefb5b00-cf59-11e9-90cb-eeb2b417c80c.png" alt="" /></p>

<p>Note: I don&rsquo;t own mydomain.com therefore I am using the traefik default cert, that will be why it&rsquo;s showing not secure.</p>

<h2>Deploy Traefik in HTTP Mode</h2>

<p>If you want to deploy Traefik in HTTP mode rather, you would use:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ DOMAIN=localhost PROTOCOL=http bash deploy.sh
</span><span class='line'>Username for Traefik UI: ruan
</span><span class='line'>Password for Traefik UI: deploying traefik stack in http mode
</span><span class='line'>Creating network public
</span><span class='line'>Creating config proxy_traefik_htpasswd
</span><span class='line'>Creating service proxy_traefik
</span><span class='line'>Traefik UI is available at:
</span><span class='line'>- http://traefik.localhost</span></code></pre></td></tr></table></div></figure>


<p>Navigating to the Traefik Dashboard, after providing your username and password, you should see the Traefik UI:</p>

<p><img src="https://user-images.githubusercontent.com/50801771/64283759-56b0a680-cf58-11e9-9f85-6721ab3b1500.png" alt="" /></p>

<h2>More Info</h2>

<p>In future posts, I will demonstrate how to deploy other stacks using bekkerstacks.</p>

<p>Have a look at the repositories on github for more info:</p>

<ul>
<li><a href="https://github.com/bekkerstacks">https://github.com/bekkerstacks</a></li>
<li><a href="https://github.com/bekkerstacks/docker-swarm">https://github.com/bekkerstacks/docker-swarm</a></li>
<li><a href="https://github.com/bekkerstacks/traefik">https://github.com/bekkerstacks/traefik</a></li>
</ul>


<h2>Thank You</h2>

<p>Let me know what you think. If you liked my content, feel free to checkout my content on <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<p><a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @ruanbekker</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS S3 KMS and Python for Secrets Management]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/09/04/aws-s3-kms-and-python-for-secrets-management/"/>
    <updated>2019-09-04T19:58:45+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/09/04/aws-s3-kms-and-python-for-secrets-management</id>
    <content type="html"><![CDATA[<p><img src="https://miro.medium.com/max/2400/1*9PSzVZDHjr321CpxJHcxPQ.png" alt="" /></p>

<p>So your application need to store secrets and you are looking for a home for them. In this tutorial we will see how we can use Python, S3 and KMS to build our own solution for managing secrets.</p>

<p>There is SSM and Secrets Manager that probably does a better job, but my mind got curious :D</p>

<h2>High Level Goal</h2>

<p>From a High-Level we want to store secrets encrypted on S3 with KMS, namespaced with <strong>team/application/environment/value</strong> in json format so that our application receives the json dictionary of configured key/value pairs.</p>

<p>We can leverage <strong>IAM</strong> to delegate permissions on the namespacing that we decide on, for my example the namespace will look like this on S3:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>s3://s3bucket/secrets/engineering/app1/production/appconfig.json</span></code></pre></td></tr></table></div></figure>


<p>We will apply <strong>IAM</strong> permissions for our user to only <strong>Put</strong> and <strong>Get</strong> on <code>secrets/engineering*</code>. So with this idea we can apply IAM permissions on groups for different departments, or even let users manage their own secrets such as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>s3://s3bucket/secrets/personal/user.name/app/appconfig.json</span></code></pre></td></tr></table></div></figure>


<p>After the object has been downloaded from S3 and decrypted using KMS, the value of the object will look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{u'surname': u'bekker', u'name': u'ruan', u'job_title': u'systems-development-engineer'}</span></code></pre></td></tr></table></div></figure>


<h2>Requirements</h2>

<p>We will create the following resources on AWS:</p>

<ul>
<li>KMS Key</li>
<li>S3 Bucket</li>
<li>IAM User</li>
<li>IAM Policy</li>
<li>Python Dependencies: Boto3</li>
</ul>


<h2>Provision AWS Resources</h2>

<p><img src="https://miro.medium.com/max/2728/1*Lq9xaUXuNo2Nb8kQakYdsg.png" alt="" /></p>

<p>First we will create our <strong>S3 Bucket</strong>,  head over to <a href="https://s3.console.aws.amazon.com/s3/home?region=eu-west-1">Amazon S3</a> create a new s3 bucket, make sure that the bucket is <strong>NOT</strong> public, by using the default configuration, you should be good.</p>

<p>Once your S3 Bucket is provisioned, head over to <a href="https://console.aws.amazon.com/iam/home#/users">Amazon IAM</a> and create a IAM User, enable programmatic access, and keep your access key and secret key safe. For now we will not apply any permissions as we will come back to this step.</p>

<p>Head over to <a href="https://eu-west-1.console.aws.amazon.com/kms/home?region=eu-west-1#/kms/home">Amazon KMS</a> and create a KMS Key, we will define the <strong>key administrator</strong>, which will be my user (ruan.bekker in this case) with more privileged permissions:</p>

<p><img src="https://miro.medium.com/max/5120/1*EUPWbCQ8nsfbBWHQI6srYw.png" alt="" /></p>

<p>and then we will define the <strong>key usage permissions</strong> (app.user in this case), which will be the user that we provisioned from the previous step, this will be the user that will encrypt and decrypt the data:</p>

<p><img src="https://miro.medium.com/max/5120/1*5xA5H0qpJ1FYTG1hUjy_Tw.png" alt="" /></p>

<p>Next, review the policy generated from the previous selected sections:</p>

<p><img src="https://miro.medium.com/max/5120/1*bLDVPFaZUDQ4EyWjACYRUw.png" alt="" /></p>

<p>Once you select finish, you will be returned to the section where your KMS Key information will be displayed, keep note of your <strong>KMS Key Alias</strong>, as we will need it later:</p>

<p><img src="https://miro.medium.com/max/5120/1*aooUMS0OyEd5hopnOUrcmA.png" alt="" /></p>

<h2>Create a IAM Policy for our App User</h2>

<p>Next we will create the IAM Policy for the user that will encrypt/decrypt and store data in S3</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;S3PutAndGetAccess&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;s3:PutObject&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;s3:GetObject&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="s2">&quot;arn:aws:s3:::arn:aws:s3:::s3-bucket-name/secrets/engineering*&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;KMSDecryptAndEncryptAccess&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;kms:Decrypt&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;kms:Encrypt&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="s2">&quot;arn:aws:kms:eu-west-1:123456789012:key/xxxx-xxxx-xxxx-xxxx-xxxx&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After the policy has been saved, associate the policy to the IAM User</p>

<h2>Encrypt and Put to S3</h2>

<p>Now we will use Python to define the data that we want to <strong>store in S3</strong>, we will then <strong>encrypt</strong> the data with <strong>KMS</strong>, use base64 to <strong>encode</strong> the ciphertext and push the encrypted value to <strong>S3</strong>, with Server Side Encryption enabled, which we will also use our KMS key.</p>

<p>Install boto3 in Python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pip install boto3
</span></code></pre></td></tr></table></div></figure>


<p>Enter the Python REPL and import the required packages, we will also save the access key and secret key as variables so that we can use it with boto3. You can also save it to the <a href="https://boto3.amazonaws.com/v1/documentation/api/latest/guide/configuration.html">credential provider</a> and utilise the profile name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">base64</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">aws_access_key_id</span><span class="o">=</span><span class="s">&#39;redacted&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="s">&#39;redacted&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next define the data that we want to <strong>encrypt and store</strong> in S3:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">mydata</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="s">&quot;ruan&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;surname&quot;</span><span class="p">:</span> <span class="s">&quot;bekker&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;job_title&quot;</span><span class="p">:</span> <span class="s">&quot;systems-development-engineer&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we will use KMS to encrypt the data and use base64 to encode the ciphertext:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">kms</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span>
</span><span class='line'>    <span class="n">aws_access_key_id</span><span class="o">=</span><span class="n">aws_access_key_id</span><span class="p">,</span>
</span><span class='line'>    <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="n">aws_secret_access_key</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s">&#39;kms&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">ciphertext</span> <span class="o">=</span> <span class="n">kms</span><span class="o">.</span><span class="n">encrypt</span><span class="p">(</span>
</span><span class='line'>    <span class="n">KeyId</span><span class="o">=</span><span class="s">&#39;alias/secrets-key&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Plaintext</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">mydata</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">encoded_ciphertext</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">[</span><span class="s">&quot;CiphertextBlob&quot;</span><span class="p">])</span>
</span><span class='line'><span class="c"># preview the data</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">encoded_ciphertext</span>
</span><span class='line'><span class="s">&#39;AQICAHiKOz...42720nCleoI26UW7P89lPdwvV8Q==&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we will use S3 to push the encrypted data onto S3 in our name spaced key: <strong>secrets/engineering/app1/production/appconfig.json</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s3</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span>
</span><span class='line'>    <span class="n">aws_access_key_id</span><span class="o">=</span><span class="n">aws_access_key_id</span><span class="p">,</span>
</span><span class='line'>    <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="n">aws_secret_access_key</span><span class="p">,</span>
</span><span class='line'>    <span class="n">region_name</span><span class="o">=</span><span class="s">&#39;eu-west-1&#39;</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s">&#39;s3&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="n">s3</span><span class="o">.</span><span class="n">put_object</span><span class="p">(</span>
</span><span class='line'>    <span class="n">Body</span><span class="o">=</span><span class="n">encoded_ciphertext</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Bucket</span><span class="o">=</span><span class="s">&#39;ruan-secret-store&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Key</span><span class="o">=</span><span class="s">&#39;secrets/engineering/app1/production/appconfig.json&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ServerSideEncryption</span><span class="o">=</span><span class="s">&#39;aws:kms&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">SSEKMSKeyId</span><span class="o">=</span><span class="s">&#39;alias/secrets-key&#39;</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now our object is stored in S3, encrypted with KMS and ServerSideEncryption Enabled.</p>

<p>You can try to download the object and decode the base64 encoded file and you will find that its complete garbage as its encrypted.</p>

<p>Next we will use S3 to Get the object and use KMS to decrypt and use base64 to decode after the object has been decrypted:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="n">s3</span><span class="o">.</span><span class="n">get_object</span><span class="p">(</span>
</span><span class='line'>    <span class="n">Bucket</span><span class="o">=</span><span class="s">&#39;ruan-secret-store&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Key</span><span class="o">=</span><span class="s">&#39;secrets/engineering/app1/production/appconfig.json&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">encoded_ciphertext</span> <span class="o">=</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;Body&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">encoded_ciphertext</span>
</span><span class='line'><span class="s">&#39;AQICAHiKOz...42720nCleoI26UW7P89lPdwvV8Q==&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let’s decode the result with base64:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">decoded_ciphertext</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">encoded_ciphertext</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">plaintext</span> <span class="o">=</span> <span class="n">kms</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">CiphertextBlob</span><span class="o">=</span><span class="nb">bytes</span><span class="p">(</span><span class="n">decoded_ciphertext</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to deserialize the JSON as it’s in string format:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">plaintext</span><span class="p">[</span><span class="s">&quot;Plaintext&quot;</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;surname&#39;</span><span class="p">:</span> <span class="s">u&#39;bekker&#39;</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;ruan&#39;</span><span class="p">,</span> <span class="s">u&#39;job_title&#39;</span><span class="p">:</span> <span class="s">u&#39;systems-development-engineer&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Using it in a Application</h2>

<p>Let’s say you are using <strong>Docker</strong> and you want to bootstrap your application configs to your environment that you are retrieving from S3.</p>

<p>We will use a <code>get_secrets.py</code> python script that will read the data into memory, decrypt and write the values in plaintext to disk, then we will use the <code>boot.sh</code> script to read the values into the environment and remove the temp file that was written to disk, then start the application since we have the values stored in our environment.</p>

<p>Our <strong>&ldquo;application&rdquo;</strong> in this example will just be a line of echo to return the values for demonstration.</p>

<p>The <code>get_secrets.py</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">base64</span>
</span><span class='line'>
</span><span class='line'><span class="n">aws_access_key_id</span><span class="o">=</span><span class="s">&#39;redacted&#39;</span>
</span><span class='line'><span class="n">aws_secret_access_key</span><span class="o">=</span><span class="s">&#39;redacted&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">kms</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">aws_access_key_id</span><span class="o">=</span><span class="n">aws_access_key_id</span><span class="p">,</span> <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="n">aws_secret_access_key</span><span class="p">)</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s">&#39;kms&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">s3</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">aws_access_key_id</span><span class="o">=</span><span class="n">aws_access_key_id</span><span class="p">,</span> <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="n">aws_secret_access_key</span><span class="p">,</span> <span class="n">region_name</span><span class="o">=</span><span class="s">&#39;eu-west-1&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s">&#39;s3&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="n">s3</span><span class="o">.</span><span class="n">get_object</span><span class="p">(</span><span class="n">Bucket</span><span class="o">=</span><span class="s">&#39;ruan-secret-store&#39;</span><span class="p">,</span> <span class="n">Key</span><span class="o">=</span><span class="s">&#39;secrets/engineering/app1/production/appconfig.json&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">encoded_ciphertext</span> <span class="o">=</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;Body&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">decoded_ciphertext</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">encoded_ciphertext</span><span class="p">)</span>
</span><span class='line'><span class="n">plaintext</span> <span class="o">=</span> <span class="n">kms</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">CiphertextBlob</span><span class="o">=</span><span class="nb">bytes</span><span class="p">(</span><span class="n">decoded_ciphertext</span><span class="p">))</span>
</span><span class='line'><span class="n">values</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">plaintext</span><span class="p">[</span><span class="s">&quot;Plaintext&quot;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;envs.tmp&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">values</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;{}={}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">key</span><span class="o">.</span><span class="n">upper</span><span class="p">(),</span> <span class="n">values</span><span class="p">[</span><span class="n">key</span><span class="p">])</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And our <code>boot.sh</code> script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'><span class="nb">source</span> ./envs.tmp
</span><span class='line'>rm -rf ./envs.tmp
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Hello, my name is ${NAME} ${SURNAME}, and I am a ${JOB_TITLE}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running that will produce:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bash boot.sh
</span><span class='line'>Hello, my name is ruan bekker, and I am a systems-development-engineer
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>And there we have a simple and effective way of encrypting/decrypting data using S3, KMS and Python at a ridiculously cheap cost, its almost free.</p>

<p>If you liked my content, feel free to checkout my content on <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Deploying Functions Even Easier With Faas-cli Up Using OpenFaaS]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/07/07/making-deploying-functions-even-easier-with-faas-cli-up-using-openfaas/"/>
    <updated>2019-07-07T09:53:59+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/07/07/making-deploying-functions-even-easier-with-faas-cli-up-using-openfaas</id>
    <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/cf01eefb5b6905f3774376d6d1ed55b8f052d211/68747470733a2f2f626c6f672e616c6578656c6c69732e696f2f636f6e74656e742f696d616765732f323031372f30382f666161735f736964652e706e67" alt="" /></p>

<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /> <img src="https://img.shields.io/twitter/follow/ruanbekker.svg?style=social" alt="Twitter Follow" /></p>

<p>I recently discovered that the <code>faas-cli</code> allows you to append your function&rsquo;s yaml to an existing file when generating a new function. And that <code>faas-cli up</code> does the build, push and deploy for you.</p>

<h2>The way I always did it:</h2>

<p>Usually, I will go through this flow: create, build, push, deploy, when creating 2 functions that will be in the same stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ faas-cli new --lang python3 fn-old-foo \
</span><span class='line'>--prefix=ruanbekker \
</span><span class='line'>--gateway https://openfaas.domain.com
</span><span class='line'>
</span><span class='line'>$ faas-cli build -f fn-old-foo.yml && \
</span><span class='line'>faas-cli push -f fn-old-foo.yml && \
</span><span class='line'>faas-cli deploy -f fn-old-foo.yml</span></code></pre></td></tr></table></div></figure>


<p>And for my other function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ faas-cli new --lang python3 fn-old-bar \
</span><span class='line'>--prefix=ruanbekker \
</span><span class='line'>--gateway https://openfaas.domain.com
</span><span class='line'>
</span><span class='line'>$ faas-cli build -f fn-old-bar.yml && \
</span><span class='line'>faas-cli push -f fn-old-bar.yml && \
</span><span class='line'>faas-cli deploy -f fn-old-bar.yml</span></code></pre></td></tr></table></div></figure>


<p>And then you are ready to invoke those functions.</p>

<h2>The new discovered way</h2>

<p>So recently I discovered that you can append the yaml definition of your function to an existing yaml file, and use <code>faas-cli up</code> to build, push and deploy your functions:</p>

<p>Generating the first function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ faas-cli new --lang python3 fn-foo \
</span><span class='line'>--prefix=ruanbekker \
</span><span class='line'>--gateway https://openfaas.domain.com
</span><span class='line'>
</span><span class='line'>Stack file written: fn-foo.yml</span></code></pre></td></tr></table></div></figure>


<p>Now that we have <code>fn-foo.yml</code> in our current work directory, we will append the second function the that file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ faas-cli new --lang python3 fn-bar \
</span><span class='line'>--prefix=ruanbekker \
</span><span class='line'>--gateway https://openfaas.domain.com \
</span><span class='line'>--append fn-foo.yml
</span><span class='line'>
</span><span class='line'>Stack file updated: fn-foo.yml</span></code></pre></td></tr></table></div></figure>


<p>Now, when using <code>faas-cli up</code> it expects by default that the filename is <code>stack.yml</code> which we can change with <code>-f</code> but to keep this as easy as possible, we will change the filename to <code>stack.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mv fn-foo.yml stack.yml</span></code></pre></td></tr></table></div></figure>


<p>At the moment, our <code>stack.yml</code> will look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat stack.yml
</span><span class='line'>provider:
</span><span class='line'>  name: openfaas
</span><span class='line'>  gateway: https://openfaas.domain.com
</span><span class='line'>functions:
</span><span class='line'>  fn-foo:
</span><span class='line'>    lang: python3
</span><span class='line'>    handler: ./fn-foo
</span><span class='line'>    image: ruanbekker/fn-foo:latest
</span><span class='line'>  fn-bar:
</span><span class='line'>    lang: python3
</span><span class='line'>    handler: ./fn-bar
</span><span class='line'>    image: ruanbekker/fn-bar:latest</span></code></pre></td></tr></table></div></figure>


<p>Deploying our functions is as easy as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ faas-cli up
</span><span class='line'>...
</span><span class='line'>Deploying: fn-foo.
</span><span class='line'>
</span><span class='line'>Deployed. 202 Accepted.
</span><span class='line'>URL: https://openfaas.domain.com/function/fn-foo
</span><span class='line'>
</span><span class='line'>Deploying: fn-bar.
</span><span class='line'>
</span><span class='line'>Deployed. 202 Accepted.
</span><span class='line'>URL: https://openfaas.domain.com/function/fn-bar</span></code></pre></td></tr></table></div></figure>


<p>Simply amazing. OpenFaaS done a great job in making it as simple and easy as possible to get your functions from zero to deployed in seconds.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using OpenFaas With Amazon DynamoDB]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/07/07/using-openfaas-with-amazon-dynamodb/"/>
    <updated>2019-07-07T01:11:23+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/07/07/using-openfaas-with-amazon-dynamodb</id>
    <content type="html"><![CDATA[<p><img width="1105" alt="image" src="https://user-images.githubusercontent.com/567298/60761941-f4205480-a053-11e9-9ad5-9e45948c9833.png"></p>

<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /> <img src="https://img.shields.io/twitter/follow/ruanbekker.svg?style=social" alt="Twitter Follow" /></p>

<h1>Using OpenFaaS with Amazon DynamoDB</h1>

<p>You can use your OpenFaaS functions to store and retrieve data to and from a persistent layer that sits outside the OpenFaaS framework. The database that we will use in this tutorial is Amazon&rsquo;s DynamoDB.</p>

<p>If you are not familiar with the service, Amazon&rsquo;s DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability.</p>

<p>At the end of this tutorial you will be able to invoke your functions to read and write items to DynamoDB with a dedicated IAM User that is only allowed to access DynamoDB, and secrets managed by your OpenFaaS framework.</p>

<h2>What we will be doing in this Tutorial</h2>

<p>In this tutorial we will cover a couple of things, and a summary on the to do list is:</p>

<ul>
<li>Create a OpenFaaS IAM User, DynamoDB IAM Policy, associate the Policy to the User using the AWS CLI</li>
<li>Create a AWS Access Key, and save the Access Key and Secret key to file</li>
<li>Create OpenFaaS Secrets of the Access Key and Secret Key, remove the files from disk</li>
<li>Create 3 OpenFaaS Functions: write, lookup and get</li>
<li>Invoke the functions, read and write from DynamoDB</li>
</ul>


<p>Our 3 functions will do very basic operations for this demonstration, but I believe this is a good starting point.</p>

<p>All the examples of this blog post is available in <a href="https://github.com/ruanbekker/blog-assets/tree/master/openfaas-dynamodb">this github repository</a></p>

<h2>The Use-Case Scenario</h2>

<p>In this scenario we want to store user information into DynamoDB, we will use a hash that we will calculate using the users ID Number + Lastname. So when we have thousands or millions of items, we dont need to search through the entire table, but since we can re-calculate the sha hash, we can do a single GetItem operation to find the entry about the user in question.</p>

<ul>
<li>Lookup Function:</li>
</ul>


<p>The lookup function will calculate the hash by passing the users ID Number and Lastname, this will return a hash which will be teh primary key attribute of our table design. This hash value is required to do a GetItem on the user in question.</p>

<ul>
<li>Get Function:</li>
</ul>


<p>The Get function will interface with DynamoDB, it reads the AWS access key and secret key from the secrets path to authenticate with AWS and utilizes environment variables for the region and table name. This will do a GetItem on the DynamoDB Table and retrieve the Item. If the item is not found, it will return it in the response.</p>

<ul>
<li>Write Function:</li>
</ul>


<p>The write function will also interface with DynamoDB, the ID, Name and Payload will be included in the request body on our POST Request.</p>

<h2>Note on Secrets and Environment Variables</h2>

<p>I am treating my environment variables and secrets different from each other. The secrets such as my AWS access keys are stored on the cluster and the application reads them and stores the values in memory.</p>

<p>The environment variables such as non-secret information, such as my dynamodb table name and aws region, is defined in my environment variables.</p>

<p>This <a href="http://movingfast.io/articles/environment-variables-considered-harmful/">post</a> and this <a href="https://diogomonica.com/2017/03/27/why-you-shouldnt-use-env-variables-for-secret-data/">post</a> goes a bit more into detail on why you should not use environment variables for secret data, which I found from <a href="https://github.com/openfaas/faas-netes/issues/153#issuecomment-370924478">this link</a></p>

<p>Enough info, let&rsquo;s get to the fun stuff</p>

<h2>Pre-Requirements:</h2>

<p>You need a AWS Account (or you can use dynamodb-local), OpenFaaS and faas-cli. Documentation available below:
- <a href="https://docs.openfaas.com/contributing/get-started/">https://docs.openfaas.com/contributing/get-started/</a></p>

<h2>Provision a DynamoDB Table</h2>

<p>I have a admin IAM account configured on my default profile, using the aws-cli tools generate the cli-skeleton that is required to provision a dynamodb table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws dynamodb create-table --generate-cli-skeleton &gt; ddb.json
</span></code></pre></td></tr></table></div></figure>


<p>My table name will be <code>lookup-table</code> with the primary key <code>hash_value</code> and provisoned my throughput to 1 Read and Write Capacity Unit. Which will enable us 4KB/s for reads and 1KB/s for writes.</p>

<p>For demonstration purposes, I am sharing my altered <code>ddb.json</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;AttributeDefinitions&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;AttributeName&quot;</span><span class="p">:</span> <span class="s2">&quot;hash_value&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;AttributeType&quot;</span><span class="p">:</span> <span class="s2">&quot;S&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;TableName&quot;</span><span class="p">:</span> <span class="s2">&quot;lookup_table&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;KeySchema&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;AttributeName&quot;</span><span class="p">:</span> <span class="s2">&quot;hash_value&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;KeyType&quot;</span><span class="p">:</span> <span class="s2">&quot;HASH&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;ProvisionedThroughput&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;ReadCapacityUnits&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;WriteCapacityUnits&quot;</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;Tags&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Key&quot;</span><span class="p">:</span> <span class="s2">&quot;Name&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;lookup-table&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have the file saved, create the dynamodb table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws dynamodb create-table --cli-input-json file://ddb.json
</span></code></pre></td></tr></table></div></figure>


<p>List the tables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws dynamodb list-tables
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;TableNames&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="s2">&quot;lookup_table&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check if the table is provisioned:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws dynamodb describe-table --table-name lookup_table <span class="p">|</span> jq -r <span class="s1">&#39;.Table.TableStatus&#39;</span>
</span><span class='line'>ACTIVE
</span></code></pre></td></tr></table></div></figure>


<p>Getting the ARN string, as we will need it when we create our IAM Policy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws dynamodb describe-table --table-name lookup_table <span class="p">|</span> jq -r <span class="s1">&#39;.Table.TableArn&#39;</span>
</span><span class='line'>arn:aws:dynamodb:eu-west-1:x-x:table/lookup_table
</span></code></pre></td></tr></table></div></figure>


<h2>Create the OpenFaaS IAM User</h2>

<p>Create the IAM Policy document which defines the access that we want to grant. You can see that we are only allowing Put and GetItem on the provisioned DynamoDB resource:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat dynamodb-iam-policy.json
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;Version&quot;</span>: <span class="s2">&quot;2012-10-17&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;Statement&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;Sid&quot;</span>: <span class="s2">&quot;OpenFaasFunctionAceessForDynamoDB&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;Effect&quot;</span>: <span class="s2">&quot;Allow&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;Action&quot;</span>: <span class="o">[</span>
</span><span class='line'>                <span class="s2">&quot;dynamodb:PutItem&quot;</span>,
</span><span class='line'>                <span class="s2">&quot;dynamodb:GetItem&quot;</span>
</span><span class='line'>            <span class="o">]</span>,
</span><span class='line'>            <span class="s2">&quot;Resource&quot;</span>: <span class="s2">&quot;arn:aws:dynamodb:eu-west-1:x-accountid-x:table/lookup_table&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the IAM Policy and provide the policy document for the given policy name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws iam create-policy --policy-name openfaas-dynamodb-access --policy-document file://dynamodb-iam-policy.json
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;Policy&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;PolicyName&quot;</span>: <span class="s2">&quot;openfaas-dynamodb-access&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;PolicyId&quot;</span>: <span class="s2">&quot;ANPATPRT2G4SL4K63SUWQ&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;Arn&quot;</span>: <span class="s2">&quot;arn:aws:iam::x-accountid-x:policy/openfaas-dynamodb-access&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;Path&quot;</span>: <span class="s2">&quot;/&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;DefaultVersionId&quot;</span>: <span class="s2">&quot;v1&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;AttachmentCount&quot;</span>: 0,
</span><span class='line'>        <span class="s2">&quot;PermissionsBoundaryUsageCount&quot;</span>: 0,
</span><span class='line'>        <span class="s2">&quot;IsAttachable&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>        <span class="s2">&quot;CreateDate&quot;</span>: <span class="s2">&quot;2019-07-06T11:54:26Z&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;UpdateDate&quot;</span>: <span class="s2">&quot;2019-07-06T11:54:26Z&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the IAM User that will be used to authenticate requests against DynamoDB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws iam create-user --user-name openfaas-user
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;User&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;Path&quot;</span>: <span class="s2">&quot;/&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;UserName&quot;</span>: <span class="s2">&quot;openfaas-user&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;UserId&quot;</span>: <span class="s2">&quot;AIDATPRT2G4SIRYTNHLZK&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;Arn&quot;</span>: <span class="s2">&quot;arn:aws:iam::x-accountid-x:user/openfaas-user&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;CreateDate&quot;</span>: <span class="s2">&quot;2019-07-06T11:56:53Z&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the Access Key, which will be our API keys for our application to authenticate requests. Save the AccessKeyId and SecretAccessKey temporarily to 2 seperate files, which we will delete after we create our secrets to our cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws iam create-access-key --user-name openfaas-user
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;AccessKey&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;UserName&quot;</span>: <span class="s2">&quot;openfaas-user&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;AccessKeyId&quot;</span>: <span class="s2">&quot;AKIAT..redacted.x&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;Status&quot;</span>: <span class="s2">&quot;Active&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;SecretAccessKey&quot;</span>: <span class="s2">&quot;b..redacted.x&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;CreateDate&quot;</span>: <span class="s2">&quot;2019-07-06T11:57:37Z&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Associate the IAM Policy to the IAM User:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws iam attach-user-policy --user-name openfaas-user --policy-arn arn:aws:iam::x-x:policy/openfaas-dynamodb-access
</span></code></pre></td></tr></table></div></figure>


<p>To test if the access keys work, save them to a new profile using the aws-cli tools:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws configure --profile openfaas
</span><span class='line'>AWS Access Key ID <span class="o">[</span>None<span class="o">]</span>: AKIAT..
</span><span class='line'>AWS Secret Access Key <span class="o">[</span>None<span class="o">]</span>: b..x
</span><span class='line'>Default region name <span class="o">[</span>None<span class="o">]</span>: eu-west-1
</span><span class='line'>Default output format <span class="o">[</span>None<span class="o">]</span>: json
</span></code></pre></td></tr></table></div></figure>


<p>Write an Item to DynamoDB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws --profile openfaas dynamodb put-item <span class="se">\</span>
</span><span class='line'>--table-name lookup_table <span class="se">\</span>
</span><span class='line'>--item <span class="s1">&#39;{&quot;hash_value&quot;: {&quot;S&quot;: &quot;aGVsbG8td29ybGQK&quot;}, &quot;message&quot;: {&quot;S&quot;: &quot;hello-world&quot;}}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Read the Item from DynamoDB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws --profile openfaas dynamodb get-item <span class="se">\</span>
</span><span class='line'>--table-name lookup_table <span class="se">\</span>
</span><span class='line'>--key <span class="s1">&#39;{&quot;hash_value&quot;: {&quot;S&quot;: &quot;aGVsbG8td29ybGQK&quot;}}&#39;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;Item&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;hash_value&quot;</span>: <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;S&quot;</span>: <span class="s2">&quot;aGVsbG8td29ybGQK&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="s2">&quot;message&quot;</span>: <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;S&quot;</span>: <span class="s2">&quot;hello-world&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now confirm our permissions are in place to continue.</p>

<h3>Create OpenFaaS Secrets</h3>

<p>The AccessKeyId and SecretKey has been saved to disk, and we will use those files to create secrets from:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli secret create openfaas-aws-access-key --from-file<span class="o">=</span>openfaas_aws_access_key.txt
</span><span class='line'>Creating secret: openfaas-aws-access-key
</span><span class='line'>Created: <span class="m">201</span> Created
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli secret create openfaas-aws-secret-key --from-file<span class="o">=</span>openfaas_aws_secret_key.txt
</span><span class='line'>Creating secret: openfaas-aws-secret-key
</span><span class='line'>Created: <span class="m">201</span> Created
</span></code></pre></td></tr></table></div></figure>


<p>Now that the secrets are securely stored in our cluster, we can delete the temporary files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rm -f ./openfaas_aws_*_key.txt
</span></code></pre></td></tr></table></div></figure>


<h2>Login to OpenFaaS</h2>

<p>Login to OpenFaasS using faas-cli:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli login <span class="se">\</span>
</span><span class='line'>--gateway https://openfaas.domain.com <span class="se">\</span>
</span><span class='line'>--username <span class="k">${</span><span class="nv">OPENFAAS_USER</span><span class="k">}</span> <span class="se">\</span>
</span><span class='line'>--password <span class="k">${</span><span class="nv">OPENFAAS_PASSWORD</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Export the OPENFAAS_URL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">OPENFAAS_URL</span><span class="o">=</span>https://openfaas.domain.com
</span></code></pre></td></tr></table></div></figure>


<h2>One Stack File for All 3 Functions:</h2>

<p>We will create our first function to generate the yaml definition, then we will rename our generated filename to <code>stack.yml</code> then the next 2 functions, we will use the append flag to append the functions yaml to our <code>stack.yml</code> file, so that we can simply use <code>faas-cli up</code></p>

<h2>Create the Lookup Function:</h2>

<p>Create a Python3 Function, and prefix it with your dockerhub user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli new <span class="se">\</span>
</span><span class='line'>--lang python3 fn-dynamodb-lookup <span class="se">\</span>
</span><span class='line'>--prefix<span class="o">=</span>ruanbekker <span class="se">\</span>
</span><span class='line'>--gateway https://openfaas.domain.com
</span><span class='line'>
</span><span class='line'>Function created in folder: fn-foo
</span><span class='line'>Stack file written: fn-dynamodb-lookup.yml
</span></code></pre></td></tr></table></div></figure>


<p>As we will be using one stack file, rename the generated stack file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mv fn-dynamodb-lookup.yml stack.yml
</span></code></pre></td></tr></table></div></figure>


<p>Open the stack file and set the environment variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat stack.yml
</span><span class='line'>provider:
</span><span class='line'>  name: openfaas
</span><span class='line'>  gateway: https://openfaas.domain.com
</span><span class='line'>functions:
</span><span class='line'>  fn-dynamodb-lookup:
</span><span class='line'>    lang: python3
</span><span class='line'>    handler: ./fn-dynamodb-lookup
</span><span class='line'>    image: ruanbekker/fn-dynamodb-lookup:latest
</span><span class='line'>    environment:
</span><span class='line'>      dynamodb_region: eu-west-1
</span><span class='line'>      dynamodb_table: lookup_table
</span></code></pre></td></tr></table></div></figure>


<p>The python code for our function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat fn-dynamodb-lookup/handler.py
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">hashlib</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">calc_sha</span><span class="p">(</span><span class="n">id_number</span><span class="p">,</span> <span class="n">lastname</span><span class="p">):</span>
</span><span class='line'>    <span class="n">string</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">({</span><span class="s">&quot;id&quot;</span><span class="p">:</span> <span class="n">id_number</span><span class="p">,</span> <span class="s">&quot;lastname&quot;</span><span class="p">:</span> <span class="n">lastname</span><span class="p">},</span> <span class="n">sort_keys</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">hash_value</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;utf-8&quot;</span><span class="p">))</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">hash_value</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="n">req</span><span class="p">):</span>
</span><span class='line'>    <span class="n">event</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>    <span class="n">hash_value</span> <span class="o">=</span> <span class="n">calc_sha</span><span class="p">(</span><span class="n">event</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">],</span> <span class="n">event</span><span class="p">[</span><span class="s">&#39;lastname&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">hash_value</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Create the Write Function:</h2>

<p>Create a Python3 Function, and prefix it with your dockerhub user, and use the append flag to update our stack file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli new <span class="se">\</span>
</span><span class='line'>--lang python3 fn-dynamodb-write <span class="se">\</span>
</span><span class='line'>--prefix<span class="o">=</span>ruanbekker <span class="se">\</span>
</span><span class='line'>--gateway https://openfaas.domain.com
</span><span class='line'>--append stack.yml
</span><span class='line'>
</span><span class='line'>Function created in folder: fn-dynamodb-write
</span><span class='line'>Stack file updated: stack.yml
</span></code></pre></td></tr></table></div></figure>


<p>Open the stack file and set the environment variables and include the secrets that was created:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat stack.yml
</span><span class='line'>provider:
</span><span class='line'>  name: openfaas
</span><span class='line'>  gateway: https://openfaas.domain.com
</span><span class='line'>functions:
</span><span class='line'>  fn-dynamodb-lookup:
</span><span class='line'>  <span class="c"># ...</span>
</span><span class='line'>  fn-dynamodb-write:
</span><span class='line'>    lang: python3
</span><span class='line'>    handler: ./fn-dynamodb-write
</span><span class='line'>    image: ruanbekker/fn-dynamodb-write:latest
</span><span class='line'>    environment:
</span><span class='line'>      dynamodb_region: eu-west-1
</span><span class='line'>      dynamodb_table: lookup_table
</span><span class='line'>    secrets:
</span><span class='line'>      - openfaas-aws-access-key
</span><span class='line'>      - openfaas-aws-secret-key
</span></code></pre></td></tr></table></div></figure>


<p>Our function relies on a external dependency which we need to install to interact with aws:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat fn-dynamodb-write/requirements.txt
</span><span class='line'>boto3
</span></code></pre></td></tr></table></div></figure>


<p>Our python code for our function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat fn-dynamodb-write/handler.py
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">hashlib</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">datetime</span>
</span><span class='line'>
</span><span class='line'><span class="n">aws_key</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/var/openfaas/secrets/openfaas-aws-access-key&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="n">aws_secret</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/var/openfaas/secrets/openfaas-aws-secret-key&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="n">dynamodb_region</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;dynamodb_region&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">dynamodb_table</span>  <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;dynamodb_table&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">region_name</span><span class="o">=</span><span class="n">dynamodb_region</span><span class="p">)</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s">&#39;dynamodb&#39;</span><span class="p">,</span> <span class="n">aws_access_key_id</span><span class="o">=</span><span class="n">aws_key</span><span class="p">,</span> <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="n">aws_secret</span><span class="p">)</span>
</span><span class='line'><span class="n">table</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">Table</span><span class="p">(</span><span class="n">dynamodb_table</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">calc_sha</span><span class="p">(</span><span class="n">id_number</span><span class="p">,</span> <span class="n">lastname</span><span class="p">):</span>
</span><span class='line'>    <span class="n">string</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">({</span><span class="s">&quot;id&quot;</span><span class="p">:</span> <span class="n">id_number</span><span class="p">,</span> <span class="s">&quot;lastname&quot;</span><span class="p">:</span> <span class="n">lastname</span><span class="p">},</span> <span class="n">sort_keys</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">hash_value</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;utf-8&quot;</span><span class="p">))</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">hash_value</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">create_timestamp</span><span class="p">():</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%Y-%m-</span><span class="si">%d</span><span class="s">T%H:%M&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">response</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="n">req</span><span class="p">):</span>
</span><span class='line'>    <span class="n">event</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>    <span class="n">unique_id</span> <span class="o">=</span> <span class="n">calc_sha</span><span class="p">(</span><span class="n">event</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">],</span> <span class="n">event</span><span class="p">[</span><span class="s">&#39;lastname&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">table</span><span class="o">.</span><span class="n">put_item</span><span class="p">(</span>
</span><span class='line'>        <span class="n">Item</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;hash_value&#39;</span><span class="p">:</span> <span class="n">unique_id</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;timestamp&#39;</span><span class="p">:</span> <span class="n">create_timestamp</span><span class="p">(),</span>
</span><span class='line'>            <span class="s">&#39;payload&#39;</span><span class="p">:</span> <span class="n">event</span><span class="p">[</span><span class="s">&#39;payload&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">response</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Create the Get Function:</h2>

<p>Create a Python3 Function, and prefix it with your dockerhub user, and use the append flag to specify the stack file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli new <span class="se">\</span>
</span><span class='line'>--lang python3 fn-dynamodb-get <span class="se">\</span>
</span><span class='line'>--prefix<span class="o">=</span>ruanbekker <span class="se">\</span>
</span><span class='line'>--gateway https://openfaas.domain.com
</span><span class='line'>--append stack.yml
</span><span class='line'>
</span><span class='line'>Function created in folder: fn-dynamodb-get
</span><span class='line'>Stack file updated: stack.yml
</span></code></pre></td></tr></table></div></figure>


<p>Open the stack file and set the environment variables and include the secrets that was created:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat stack.yml
</span><span class='line'>provider:
</span><span class='line'>  name: openfaas
</span><span class='line'>  gateway: https://openfaas.domain.com
</span><span class='line'>functions:
</span><span class='line'>  fn-dynamodb-lookup:
</span><span class='line'>  <span class="c"># .. </span>
</span><span class='line'>  fn-dynamodb-write:
</span><span class='line'>  <span class="c"># ..</span>
</span><span class='line'>  fn-dynamodb-get:
</span><span class='line'>    lang: python3
</span><span class='line'>    handler: ./fn-dynamodb-get
</span><span class='line'>    image: ruanbekker/fn-dynamodb-get:latest
</span><span class='line'>    environment:
</span><span class='line'>      dynamodb_region: eu-west-1
</span><span class='line'>      dynamodb_table: lookup_table
</span><span class='line'>    secrets:
</span><span class='line'>      - openfaas-aws-access-key
</span><span class='line'>      - openfaas-aws-secret-key
</span></code></pre></td></tr></table></div></figure>


<p>Include the external dependency for aws:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat fn-dynamodb-get/requirements.txt
</span><span class='line'>boto3
</span></code></pre></td></tr></table></div></figure>


<p>Our python code for our function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat fn-dynamodb-get/handler.py
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'>
</span><span class='line'><span class="n">aws_key</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/var/openfaas/secrets/openfaas-aws-access-key&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="n">aws_secret</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/var/openfaas/secrets/openfaas-aws-secret-key&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="n">dynamodb_region</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;dynamodb_region&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">dynamodb_table</span>  <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;dynamodb_table&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">region_name</span><span class="o">=</span><span class="n">dynamodb_region</span><span class="p">)</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s">&#39;dynamodb&#39;</span><span class="p">,</span> <span class="n">aws_access_key_id</span><span class="o">=</span><span class="n">aws_key</span><span class="p">,</span> <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="n">aws_secret</span><span class="p">)</span>
</span><span class='line'><span class="n">table</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">Table</span><span class="p">(</span><span class="n">dynamodb_table</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="n">req</span><span class="p">):</span>
</span><span class='line'>    <span class="n">event</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">table</span><span class="o">.</span><span class="n">get_item</span><span class="p">(</span>
</span><span class='line'>        <span class="n">Key</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;hash_value&#39;</span><span class="p">:</span> <span class="n">event</span><span class="p">[</span><span class="s">&#39;hash_value&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;Item&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">response</span><span class="p">:</span>
</span><span class='line'>        <span class="n">item_data</span> <span class="o">=</span> <span class="s">&#39;Item not found&#39;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">item_data</span> <span class="o">=</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;Item&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">item_data</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Build, Push and Deploy:</h2>

<p>It&rsquo;s time to deploy our functions and since we have all our stack info in one file, we can use <code>faas-cli up</code> which will build, push and deploy our functions.</p>

<p>By default it expects the filename to be <code>stack.yml</code> therefore we don&rsquo;t need to specify the filename, but if you had a different filename, you can overwrite the default behaviour with <code>-f</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli up
</span><span class='line'>
</span><span class='line'>Deploying: fn-dynamodb-lookup.
</span><span class='line'>Deployed. <span class="m">202</span> Accepted.
</span><span class='line'>URL: https://openfaas.domain.com/function/fn-dynamodb-lookup
</span><span class='line'>
</span><span class='line'>Deploying: fn-dynamodb-write.
</span><span class='line'>Deployed. <span class="m">202</span> Accepted.
</span><span class='line'>URL: https://openfaas.domain.com/function/fn-dynamodb-write
</span><span class='line'>
</span><span class='line'>Deploying: fn-dynamodb-get.
</span><span class='line'>Deployed. <span class="m">202</span> Accepted.
</span><span class='line'>URL: https://openfaas.domain.com/function/fn-dynamodb-get
</span></code></pre></td></tr></table></div></figure>


<h2>Time for our Functions to interact with DynamoDB:</h2>

<p>Write an Item to DynamoDB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST https://openfaas.domain.com/function/fn-dynamodb-write -d <span class="s1">&#39;{&quot;id&quot;: 8700000000001, &quot;lastname&quot;: &quot;smith&quot;, &quot;payload&quot;: {&quot;name&quot;: &quot;james&quot;, &quot;role&quot;: &quot;reader&quot;}}&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s1">&#39;ResponseMetadata&#39;</span>: <span class="o">{</span><span class="s1">&#39;RequestId&#39;</span>: <span class="s1">&#39;CNHEFHMSL4KGRDE0HRVQ69D5H7VV4KQNSO5AEMVJF66Q9ASUAAJG&#39;</span>, <span class="s1">&#39;HTTPStatusCode&#39;</span>: 200, <span class="s1">&#39;HTTPHeaders&#39;</span>: <span class="o">{</span><span class="s1">&#39;server&#39;</span>: <span class="s1">&#39;Server&#39;</span>, <span class="s1">&#39;date&#39;</span>: <span class="s1">&#39;Sat, 06 Jul 2019 20:47:00 GMT&#39;</span>, <span class="s1">&#39;content-type&#39;</span>: <span class="s1">&#39;application/x-amz-json-1.0&#39;</span>, <span class="s1">&#39;content-length&#39;</span>: <span class="s1">&#39;2&#39;</span>, <span class="s1">&#39;connection&#39;</span>: <span class="s1">&#39;keep-alive&#39;</span>, <span class="s1">&#39;x-amzn-requestid&#39;</span>: <span class="s1">&#39;CNHEFHMSL4KGRDE0HRVQ69D5H7VV4KQNSO5AEMVJF66Q9ASUAAJG&#39;</span>, <span class="s1">&#39;x-amz-crc32&#39;</span>: <span class="s1">&#39;2745614147&#39;</span><span class="o">}</span>, <span class="s1">&#39;RetryAttempts&#39;</span>: 0<span class="o">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Write another Item to DynamoDB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST https://openfaas.doamin.com/function/fn-dynamodb-write -d <span class="s1">&#39;{&quot;id&quot;: 8700000000002, &quot;lastname&quot;: &quot;adams&quot;, &quot;payload&quot;: {&quot;name&quot;: &quot;samantha&quot;, &quot;role&quot;: &quot;admin&quot;}}&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s1">&#39;ResponseMetadata&#39;</span>: <span class="o">{</span><span class="s1">&#39;RequestId&#39;</span>: <span class="s1">&#39;KRQL838BVGC9LIUSCOUB7MOEQ7VV4KQNSO5AEMVJF66Q9ASUAAJG&#39;</span>, <span class="s1">&#39;HTTPStatusCode&#39;</span>: 200, <span class="s1">&#39;HTTPHeaders&#39;</span>: <span class="o">{</span><span class="s1">&#39;server&#39;</span>: <span class="s1">&#39;Server&#39;</span>, <span class="s1">&#39;date&#39;</span>: <span class="s1">&#39;Sat, 06 Jul 2019 20:48:09 GMT&#39;</span>, <span class="s1">&#39;content-type&#39;</span>: <span class="s1">&#39;application/x-amz-json-1.0&#39;</span>, <span class="s1">&#39;content-length&#39;</span>: <span class="s1">&#39;2&#39;</span>, <span class="s1">&#39;connection&#39;</span>: <span class="s1">&#39;keep-alive&#39;</span>, <span class="s1">&#39;x-amzn-requestid&#39;</span>: <span class="s1">&#39;KRQL838BVGC9LIUSCOUB7MOEQ7VV4KQNSO5AEMVJF66Q9ASUAAJG&#39;</span>, <span class="s1">&#39;x-amz-crc32&#39;</span>: <span class="s1">&#39;2745614147&#39;</span><span class="o">}</span>, <span class="s1">&#39;RetryAttempts&#39;</span>: 0<span class="o">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now recalculate the hash by passing the ID Number and Lastname to get the hash value for the primary key:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST https://openfaas.domain.com/function/fn-dynamodb-lookup -d <span class="s1">&#39;{&quot;id&quot;: 8700000000002, &quot;lastname&quot;: &quot;adams&quot;}&#39;</span>
</span><span class='line'>bd0a248aff2b50b288ba504bd7142ef11b164901
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have the hash value, do a GetItem by using the hash value in the request body:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST https://openfaas.domain.com/function/fn-dynamodb-get -d <span class="s1">&#39;{&quot;hash_value&quot;: &quot;bd0a248aff2b50b288ba504bd7142ef11b164901&quot;}&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s1">&#39;payload&#39;</span>: <span class="o">{</span><span class="s1">&#39;name&#39;</span>: <span class="s1">&#39;samantha&#39;</span>, <span class="s1">&#39;role&#39;</span>: <span class="s1">&#39;admin&#39;</span><span class="o">}</span>, <span class="s1">&#39;hash_value&#39;</span>: <span class="s1">&#39;bd0a248aff2b50b288ba504bd7142ef11b164901&#39;</span>, <span class="s1">&#39;timestamp&#39;</span>: <span class="s1">&#39;2019-07-06T20:48&#39;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the lookup function calculates a hash based on the input that you provide it, for example calculating a hash with userdata that does not exist in our table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST https://openfaas.domain.com/function/fn-dynamodb-lookup -d <span class="s1">&#39;{&quot;id&quot;: 8700000000003, &quot;lastname&quot;: &quot;williams&quot;}&#39;</span>
</span><span class='line'>c68dc272873140f4ae93bb3a3317772a6bdd9aa1
</span></code></pre></td></tr></table></div></figure>


<p>Using that hash value in our request body to read from dynamodb, will show us that the item has not been found:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST https://openfaas.domain.com/function/fn-dynamodb-get -d <span class="s1">&#39;{&quot;hash_value&quot;: &quot;c68dc272873140f4ae93bb3a3317772a6bdd9aa1&quot;}&#39;</span>
</span><span class='line'>Item not found
</span></code></pre></td></tr></table></div></figure>


<p>You might want to change this behavior but this is just for the demonstration of this post.</p>

<p>When you head over to DynamoDB&rsquo;s console you will see this in your table:</p>

<p><img width="873" alt="image" src="https://user-images.githubusercontent.com/567298/60761025-9e8e7c80-a040-11e9-83a3-ad5b474a28ff.png"></p>

<h2>Thanks</h2>

<p>This was a basic example using OpenFaaS with Amazon DynamoDB with Python and secrets managed with OpenFaas. I really like the way OpenFaaS let&rsquo;s you work with secrets, it works great and don&rsquo;t need an additional resource to manage your sensitive data.</p>

<p>Although this was basic usage with OpenFaaS and DynamoDB, the sky is the limit what you can do with it.</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://aws.amazon.com/blogs/database/choosing-the-right-dynamodb-partition-key/">DynamoDB: Choosing the right Partition Key</a></li>
<li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-partition-key-uniform-load.html">Designing Partition Keys to Distribute Your Workload Evenly</a></li>
<li><a href="https://docs.openfaas.com/contributing/get-started/">OpenFaaS: Getting Started</a></li>
<li><a href="https://docs.openfaas.com/reference/secrets/">OpenFaaS: Secrets</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play With Kinesis Data Streams for Free]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/06/22/play-with-kinesis-data-streams-for-free/"/>
    <updated>2019-06-22T23:35:19+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/06/22/play-with-kinesis-data-streams-for-free</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/59969559-3f187300-9550-11e9-9e6d-7fa4dbc30198.png" alt="image" /></p>

<p>Misleading title?? Perhaps, depends on how you look at it. Amazon Kinesis is a fully managed, cloud-based service for real-time processing of distributed data streams. So if you&rsquo;re a curious mad person like me, you want to test out stuff and when you can test stuff out for free, why not.</p>

<p>So before paying for that, why not spin something up locally, such as <a href="https://github.com/mhart/kinesalite">Kinesisalite</a> which is an implementation of Amazon Kinesis built on top of LevelDB.</p>

<p>Kinesis overview:</p>

<p><img src="https://user-images.githubusercontent.com/567298/59969540-caddcf80-954f-11e9-8e3d-23c932d35ef1.png" alt="image" /></p>

<h2>What will we be doing?</h2>

<p>In this tutorial we will setup a local kinesis instance using docker then do the following:</p>

<ul>
<li>Create a Kinesis Stream, List, Describe, PutRecord, GetRecords using Python&rsquo;s Boto3 Interface</li>
<li>Write a Python Producer and Consumer</li>
<li>Write and Read Records from our Local Kinesis Stream</li>
</ul>


<h2>Building Kinesis Local on Docker</h2>

<p>If you would like to skip this step, you can use my docker image: <a href="https://hub.docker.com/r/ruanbekker/kinesis-local">ruanbekker/kinesis-local:latest</a></p>

<p>Our Dockerfile:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM node:8.16.0-stretch-slim
</span><span class='line'>
</span><span class='line'>RUN apt update && apt install build-essential python-minimal -y
</span><span class='line'>RUN npm install --unsafe-perm -g kinesalite
</span><span class='line'>RUN apt-get clean
</span><span class='line'>
</span><span class='line'>CMD ["kinesalite", "--port", "4567", "--createStreaMs", "5"]</span></code></pre></td></tr></table></div></figure>


<p>Build:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker build -t kinesis-local .</span></code></pre></td></tr></table></div></figure>


<p>Run and expose port 4567:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run -it -p 4567:4567 kinesis-local:latest</span></code></pre></td></tr></table></div></figure>


<h2>Interact with Kinesis Local:</h2>

<p>In this next steps we will setup our environment, which will only require <code>python</code> and <code>boto3</code>. To keep things isolated, I will do this with a docker container:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run -it python:3.7-alpine sh</span></code></pre></td></tr></table></div></figure>


<p>Now we need to install boto3 and enter the python repl:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip3 install boto3
</span><span class='line'>$ python3
</span><span class='line'>Python 3.7.3 (default, May 11 2019, 02:00:41)
</span><span class='line'>[GCC 8.3.0] on linux
</span><span class='line'>Type "help", "copyright", "credits" or "license" for more information.
</span><span class='line'>&gt;&gt;&gt;</span></code></pre></td></tr></table></div></figure>


<p>Import boto and create the connection to our kinesis local instance:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; import boto3
</span><span class='line'>&gt;&gt;&gt; client = boto3.Session(
</span><span class='line'>    region_name='eu-west-1').client('kinesis', aws_access_key_id='', aws_secret_access_key='', endpoint_url='http://localhost:4567'
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s list our streams and as expected, we should have zero streams available:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; client.list_streams()
</span><span class='line'>{u'StreamNames': [], u'HasMoreStreams': False, 'ResponseMetadata': {'RetryAttempts': 0, 'HTTPStatusCode': 200, 'RequestId': '637xx', 'HTTPHeaders': {'x-amzn-requestid': '6xx', 'content-length': '41', 'x-amz-id-2': 'xx', 'connection': 'keep-alive', 'date': 'Sat, 22 Jun 2019 19:17:34 GMT', 'content-type': 'application/x-amz-json-1.1'}}}</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s create a stream named <code>mystream</code> with 1 primary shard:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; client.create_stream(StreamName='mystream', ShardCount=1)</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s list our streams again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; client.list_streams()
</span><span class='line'>{u'StreamNames': [u'mystream'], u'HasMoreStreams': False, 'ResponseMetadata': ...</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s put some data in our kinesis stream, we will push a payload with the body: <code>{"name": "ruan"}</code> to our kinesis stream with partition key: <code>a01</code> which is used for sharding:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; response = client.put_record(StreamName='mystream', Data=json.dumps({"name": "ruan"}), PartitionKey='a01')
</span><span class='line'>&gt;&gt;&gt; response
</span><span class='line'>{u'ShardId': u'shardId-000000000000', 'ResponseMetadata': {'RetryAttempts': 0, 'HTTPStatusCode': 200, 'RequestId': 'cb0xx', 'HTTPHeaders': {'x-amzn-requestid': 'xx', 'content-length': '110', 'x-amz-id-2': 'xx', 'connection': 'keep-alive', 'date': 'Sat, 22 Jun 2019 19:20:27 GMT', 'content-type': 'application/x-amz-json-1.1'}}, u'SequenceNumber': u'490xx'}</span></code></pre></td></tr></table></div></figure>


<p>Now that we have data in our stream we need to read data from our kinesis stream. Before data can be read from the stream we need to obtain the shard iterator for the shard we are interested in. A shard iterator represents the position of the stream and shard from which the consumer will read, in this case we will call the get_shard_operator method and passing the stream name, shard id and shard iterator type.</p>

<p>There are 2 comman iterator types:</p>

<ul>
<li>TRIM_HORIZON: Points to the last untrimmed record in the shard</li>
<li>LATEST: Reads the most recent data in the shard</li>
</ul>


<p>We will use TRIM_HORIZON in this case, get the shard iterator id:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; shard_id = response['ShardId']
</span><span class='line'>&gt;&gt;&gt; response = client.get_shard_iterator(StreamName='mystream', ShardId=shard_id, ShardIteratorType='TRIM_HORIZON')
</span><span class='line'>&gt;&gt;&gt; response
</span><span class='line'>{u'ShardIterator': u'AAAxx=', 'ResponseMetadata': {'RetryAttempts': 0, 'HTTPStatusCode': 200, 'RequestId': '22dxx', 'HTTPHeaders': {'x-amzn-requestid': '22dxx', 'content-length': '224', 'x-amz-id-2': 'xx', 'connection': 'keep-alive', 'date': 'Sat, 22 Jun 2019 19:22:55 GMT', 'content-type': 'application/x-amz-json-1.1'}}}</span></code></pre></td></tr></table></div></figure>


<p>Now that we have the shard iterator id, we can call the get_records method with the shard iterator id, to read the data from the stream:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; shard_iterator = response['ShardIterator']
</span><span class='line'>&gt;&gt;&gt; response = client.get_records(ShardIterator=shard_iterator)
</span><span class='line'>&gt;&gt;&gt; response
</span><span class='line'>{u'Records': [{u'Data': '{"name": "ruan"}', u'PartitionKey': u'a01', u'ApproximateArrivalTimestamp': datetime.datetime(2019, 6, 22, 21, 20, 27, 937000, tzinfo=tzlocal()), u'SequenceNumber': u'495xx'}], 'ResponseMetadata': {'RetryAttempts': 0, 'HTTPStatusCode': 200, 'RequestId': '2b6xx', 'HTTPHeaders': {'x-amzn-requestid': '2b6xx', 'content-length': '441', 'x-amz-id-2': 'xx', 'connection': 'keep-alive', 'date': 'Sat, 22 Jun 2019 19:30:19 GMT', 'content-type': 'application/x-amz-json-1.1'}}, u'NextShardIterator': u'AAAxx=', u'MillisBehindLatest': 0}</span></code></pre></td></tr></table></div></figure>


<p>To loop and parse through the response to make it more readable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; for record in response['Records']:
</span><span class='line'>...     if 'Data' in record:
</span><span class='line'>...         json.loads(record['Data'])
</span><span class='line'>...
</span><span class='line'>{u'name': u'ruan'}</span></code></pre></td></tr></table></div></figure>


<p>Once we are done, we can delete our stream:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; client.delete_stream(StreamName='mystream')</span></code></pre></td></tr></table></div></figure>


<p>Now that we have the basics, lets create our producer and consumer for a demonstration on pushing data to a kinesis stream from one process and consuming it from another process. As this demonstration we will be producing and consuming data from the same laptop, in real use-cases, you will do them from seperate servers and using Amazon Kinesis.</p>

<h2>Our Kinesis Producer</h2>

<p>The following will create a Kinesis Local Stream and Write 25 JSON Documents to our stream:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;james&#39;</span><span class="p">,</span> <span class="s">&#39;stefan&#39;</span><span class="p">,</span> <span class="s">&#39;pete&#39;</span><span class="p">,</span> <span class="s">&#39;tom&#39;</span><span class="p">,</span> <span class="s">&#39;frank&#39;</span><span class="p">,</span> <span class="s">&#39;peter&#39;</span><span class="p">,</span> <span class="s">&#39;ruan&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">session</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">region_name</span><span class="o">=</span><span class="s">&#39;eu-west-1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">client</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;kinesis&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">aws_access_key_id</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">endpoint_url</span><span class="o">=</span><span class="s">&#39;http://localhost:4567&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">list_streams</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">list_streams</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="s">&#39;mystream&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">list_streams</span><span class="p">[</span><span class="s">&#39;StreamNames&#39;</span><span class="p">]:</span>
</span><span class='line'>    <span class="n">client</span><span class="o">.</span><span class="n">create_stream</span><span class="p">(</span><span class="n">StreamName</span><span class="o">=</span><span class="s">&#39;mystream&#39;</span><span class="p">,</span> <span class="n">ShardCount</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;Starting at {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%H:%m:%S&quot;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="n">count</span> <span class="o">!=</span> <span class="mi">25</span><span class="p">:</span>
</span><span class='line'>    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">put_record</span><span class="p">(</span>
</span><span class='line'>        <span class="n">StreamName</span><span class="o">=</span><span class="s">&#39;mystream&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">Data</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">({</span>
</span><span class='line'>            <span class="s">&quot;number&quot;</span><span class="p">:</span> <span class="n">count</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">names</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&quot;age&quot;</span><span class="p">:</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">50</span><span class="p">)}</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>        <span class="n">PartitionKey</span><span class="o">=</span><span class="s">&#39;a01&#39;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;Finished at {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%H:%m:%S&quot;</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Our Kinesis Local Consumer:</h2>

<p>This will read 5 records at a time from our stream, you will notice if you run them on the same time it will only read one at a time as the producer only writes one per second.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'>
</span><span class='line'><span class="n">session</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">region_name</span><span class="o">=</span><span class="s">&#39;eu-west-1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">client</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;kinesis&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">aws_access_key_id</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">endpoint_url</span><span class="o">=</span><span class="s">&#39;http://localhost:4567&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">stream_details</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">describe_stream</span><span class="p">(</span><span class="n">StreamName</span><span class="o">=</span><span class="s">&#39;mystream&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">shard_id</span> <span class="o">=</span> <span class="n">stream_details</span><span class="p">[</span><span class="s">&#39;StreamDescription&#39;</span><span class="p">][</span><span class="s">&#39;Shards&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">&#39;ShardId&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">get_shard_iterator</span><span class="p">(</span>
</span><span class='line'>    <span class="n">StreamName</span><span class="o">=</span><span class="s">&#39;mystream&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ShardId</span><span class="o">=</span><span class="n">shard_id</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ShardIteratorType</span><span class="o">=</span><span class="s">&#39;TRIM_HORIZON&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">shard_iterator</span> <span class="o">=</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;ShardIterator&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">get_records</span><span class="p">(</span><span class="n">ShardIterator</span><span class="o">=</span><span class="n">shard_iterator</span><span class="p">,</span> <span class="n">Limit</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="n">shard_iterator</span> <span class="o">=</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;NextShardIterator&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">record</span> <span class="ow">in</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;Records&#39;</span><span class="p">]:</span>
</span><span class='line'>        <span class="k">if</span> <span class="s">&#39;Data&#39;</span> <span class="ow">in</span> <span class="n">record</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">record</span><span class="p">[</span><span class="s">&#39;Data&#39;</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">record</span><span class="p">[</span><span class="s">&#39;Data&#39;</span><span class="p">]))</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.75</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Demo Time!</h2>

<p>Now that we have our <code>producer.py</code> and <code>consumer.py</code>, lets test this out.</p>

<p>Start the server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">docker</span> <span class="n">run</span> <span class="o">-</span><span class="n">it</span> <span class="o">-</span><span class="n">p</span> <span class="mi">4567</span><span class="p">:</span><span class="mi">4567</span> <span class="n">ruanbekker</span><span class="o">/</span><span class="n">kinesis</span><span class="o">-</span><span class="n">local</span><span class="p">:</span><span class="n">latest</span>
</span><span class='line'><span class="n">Listening</span> <span class="n">at</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="p">:::</span><span class="mi">4567</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the Producer from your Python Environment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">python</span> <span class="n">producer</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="n">Starting</span> <span class="n">at</span> <span class="mo">00</span><span class="p">:</span><span class="mo">06</span><span class="p">:</span><span class="mi">16</span>
</span><span class='line'><span class="n">Finished</span> <span class="n">at</span> <span class="mo">00</span><span class="p">:</span><span class="mo">06</span><span class="p">:</span><span class="mi">42</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the Consumer from your Python Environment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">python</span> <span class="n">consumer</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="n">Starting</span> <span class="n">Consuming</span> <span class="n">at</span> <span class="mo">00</span><span class="p">:</span><span class="mo">06</span><span class="p">:</span><span class="mi">31</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;pete&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">23</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;ruan&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">22</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;peter&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">45</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;stefan&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">49</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;tom&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">47</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;pete&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">35</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;stefan&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">45</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;ruan&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">38</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;frank&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;tom&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">38</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">11</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;james&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;james&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">38</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">13</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;tom&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;tom&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;peter&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">16</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;james&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">29</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">17</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;james&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;pete&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">19</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;pete&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">36</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;tom&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">45</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">21</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;peter&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">39</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">22</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;ruan&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">43</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">23</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;tom&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">38</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">24</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;pete&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">40</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;frank&#39;</span><span class="p">}</span>
</span><span class='line'><span class="n">Finshed</span> <span class="n">Consuming</span> <span class="n">at</span> <span class="mo">00</span><span class="p">:</span><span class="mo">06</span><span class="p">:</span><span class="mi">35</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Thanks</h2>

<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a></p>

<p>Hope that was useful, feel free to check out <a href="https://aws.amazon.com/kinesis/">Amazon&rsquo;s Kinesis</a> out if you are planning to run this in any non-testing environment</p>

<center>
        <script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script>
</center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Traefik as an Ingress Controller on Kubernetes]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/06/10/setup-traefik-as-an-ingress-controller-on-kubernetes/"/>
    <updated>2019-06-10T22:21:36+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/06/10/setup-traefik-as-an-ingress-controller-on-kubernetes</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/59225379-db498e00-8bd0-11e9-9f20-62aecf915431.png" alt="image" /></p>

<p>If you have not provisioned a Kubernetes Cluster, you can <a href="https://blog.ruanbekker.com/blog/2019/06/10/testing-out-scaleways-kapsule-their-kubernetes-as-a-service-offering/">see this tutorial</a> on how to provision a Kubernetes Cluster on Scaleway</p>

<h2>What will we be doing</h2>

<p>In this tutorial we will setup Traefik as an Ingress Controller on Kubernetes and deploy a logos web app to our Kubernetes Cluster, using frontend rules to map subdomains to specific services.</p>

<p>We will have 3 subdomains, being mapped to containers from the below docker images:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FQDN                     Image Name
</span><span class='line'>- python.domain.com   -&gt; ruanbekker/logos:python
</span><span class='line'>- openfaas.domain.com -&gt; ruanbekker/logos:openfaas
</span><span class='line'>- rancher.domain.com  -&gt; ruanbekker/logos:rancher</span></code></pre></td></tr></table></div></figure>


<h2>Get the sources</h2>

<p>If you would like to get the source code for this demonstration you can checkout this repository: <a href="https://github.com/ruanbekker/traefik-kubernetes-scaleway-demo">https://github.com/ruanbekker/traefik-kubernetes-scaleway-demo</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/ruanbekker/traefik-kubernetes-scaleway-demo
</span><span class='line'>$ cd traefik-kubernetes-scaleway-demo</span></code></pre></td></tr></table></div></figure>


<h2>Provision Traefik as an Ingress Controller</h2>

<p>Apply role based access control to authorize Traefik to use the Kubernetes API:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f traefik/01-traefik-rbac.yaml
</span><span class='line'>clusterrole.rbac.authorization.k8s.io/traefik-ingress-controller created
</span><span class='line'>clusterrolebinding.rbac.authorization.k8s.io/traefik-ingress-controller created</span></code></pre></td></tr></table></div></figure>


<p>Consulting <a href="https://docs.traefik.io/user-guide/kubernetes/#deploy-traefik-using-a-deployment-or-daemonset">Traefik&rsquo;s</a> documentation, when deploying Traefik, it&rsquo;s possible to use a deployment or a demonset, not both. <a href="https://docs.traefik.io/user-guide/kubernetes/#deploy-traefik-using-a-deployment-or-daemonset">More details on why</a></p>

<p>I will go ahead and apply the Daemon Set:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f traefik/03-traefik-ds.yaml
</span><span class='line'>serviceaccount/traefik-ingress-controller created
</span><span class='line'>daemonset.extensions/traefik-ingress-controller created
</span><span class='line'>service/traefik-ingress-service created</span></code></pre></td></tr></table></div></figure>


<p>The Traefik UI Service will be associated with a FQDN, remember to set the FQDN for the endpoint, as example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat traefik/04-traefik-ui.yaml
</span><span class='line'>...
</span><span class='line'>spec:
</span><span class='line'>  rules:
</span><span class='line'>  - host: traefik-ui.x-x-x-x-x.nodes.k8s.fr-par.scw.cloud
</span><span class='line'>    http:
</span><span class='line'>      paths:
</span><span class='line'>      - path: /
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Create the Traefik UI Service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f traefik/04-traefik-ui.yaml
</span><span class='line'>service/traefik-web-ui created</span></code></pre></td></tr></table></div></figure>


<p>Traefik UI Ingress:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f traefik/05-traefik-ui-ingress.yaml
</span><span class='line'>ingress.extensions/traefik-web-ui created</span></code></pre></td></tr></table></div></figure>


<p>View the services:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get services --namespace=kube-system
</span><span class='line'>NAME                      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                  AGE
</span><span class='line'>coredns                   ClusterIP   x.x.x.x         &lt;none&gt;        53/UDP,53/TCP,9153/TCP   11h
</span><span class='line'>heapster                  ClusterIP   x.x.x.x         &lt;none&gt;        80/TCP                   11h
</span><span class='line'>kubernetes-dashboard      ClusterIP   x.x.x.x         &lt;none&gt;        443/TCP                  11h
</span><span class='line'>metrics-server            ClusterIP   x.x.x.x         &lt;none&gt;        443/TCP                  11h
</span><span class='line'>monitoring-influxdb       ClusterIP   x.x.x.x         &lt;none&gt;        8086/TCP                 11h
</span><span class='line'>traefik-ingress-service   ClusterIP   x.x.x.x         &lt;none&gt;        80/TCP,8080/TCP          24m
</span><span class='line'>traefik-web-ui            ClusterIP   x.x.x.x         &lt;none&gt;        80/TCP                   24m</span></code></pre></td></tr></table></div></figure>


<h2>Deploy the Logo App to the Cluster</h2>

<p>We will deploy the logo app to our cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f logos-app/logos-services.yaml
</span><span class='line'>service/openfaas created
</span><span class='line'>service/rancher created
</span><span class='line'>service/python created</span></code></pre></td></tr></table></div></figure>


<p>Create the deployment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f logos-app/logos-deployments.yaml
</span><span class='line'>deployment.extensions/openfaas created
</span><span class='line'>deployment.extensions/rancher created
</span><span class='line'>deployment.extensions/python created</span></code></pre></td></tr></table></div></figure>


<p>Before creating the ingress for the logo&rsquo;s applications, we need to set the fqdn endpoints that we want to route traffic to as below as an example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat logos-app/logos-ingress.yaml
</span><span class='line'>...
</span><span class='line'>spec:
</span><span class='line'>  rules:
</span><span class='line'>  - host: openfaas.x-x-x-x-x.nodes.k8s.fr-par.scw.cloud
</span><span class='line'>    http:
</span><span class='line'>      paths:
</span><span class='line'>      - path: /
</span><span class='line'>        backend:
</span><span class='line'>          serviceName: openfaas
</span><span class='line'>          servicePort: http
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Create the ingress:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f logos-app/logos-ingress.yaml
</span><span class='line'>ingress.extensions/logo created</span></code></pre></td></tr></table></div></figure>


<p>After some time, have a look at the pods to get the status:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get pods
</span><span class='line'>NAME                                     READY   STATUS    RESTARTS   AGE
</span><span class='line'>openfaas-cffdddc4-lvn5w                  1/1     Running   0          4m6s
</span><span class='line'>openfaas-cffdddc4-wbcl6                  1/1     Running   0          4m6s
</span><span class='line'>python-65ccf9c74b-8kmgp                  1/1     Running   0          4m6s
</span><span class='line'>python-65ccf9c74b-dgnqb                  1/1     Running   0          4m6s
</span><span class='line'>rancher-597b6b8554-mgcjr                 1/1     Running   0          4m6s
</span><span class='line'>rancher-597b6b8554-mpk62                 1/1     Running   0          4m6s</span></code></pre></td></tr></table></div></figure>


<h2>Navigating with Kubectl</h2>

<p>Show nodes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get nodes
</span><span class='line'>NAME                                             STATUS   ROLES    AGE   VERSION
</span><span class='line'>scw-k8s-mystifying-torvald-jovial-mclar-25a942   Ready    node     20h   v1.14.1
</span><span class='line'>scw-k8s-mystifying-torvald-jovial-mclar-eaf1a2   Ready    node     20h   v1.14.1
</span><span class='line'>scw-k8s-mystifying-torvalds-default-7f263aabab   Ready    master   20h   v1.14.1</span></code></pre></td></tr></table></div></figure>


<p>Show services:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get services
</span><span class='line'>NAME                    TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)           AGE
</span><span class='line'>kubernetes              ClusterIP   10.32.0.1      &lt;none&gt;        443/TCP           20h
</span><span class='line'>openfaas                ClusterIP   10.41.47.185   &lt;none&gt;        80/TCP            9h
</span><span class='line'>python                  ClusterIP   10.42.56.141   &lt;none&gt;        80/TCP            9h
</span><span class='line'>rancher                 ClusterIP   10.32.41.218   &lt;none&gt;        80/TCP            9h</span></code></pre></td></tr></table></div></figure>


<p>Show Pods:</p>

<p><em>To see pods from the kube-system namespace add -n kube-system</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get pods
</span><span class='line'>NAME                                     READY   STATUS    RESTARTS   AGE
</span><span class='line'>openfaas-cffdddc4-lvn5w                  1/1     Running   0          9h
</span><span class='line'>openfaas-cffdddc4-wbcl6                  1/1     Running   0          9h
</span><span class='line'>python-65ccf9c74b-8kmgp                  1/1     Running   0          9h
</span><span class='line'>python-65ccf9c74b-dgnqb                  1/1     Running   0          9h
</span><span class='line'>rancher-597b6b8554-mgcjr                 1/1     Running   0          9h
</span><span class='line'>rancher-597b6b8554-mpk62                 1/1     Running   0          9h</span></code></pre></td></tr></table></div></figure>


<p>Show deployments:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get deployments -o wide
</span><span class='line'>NAME                    READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS  IMAGES                      SELECTOR
</span><span class='line'>openfaas                2/2     2            2           9h    logo        ruanbekker/logos:openfaas   app=logo,task=openfaas
</span><span class='line'>python                  2/2     2            2           9h    logo        ruanbekker/logos:python     app=logo,task=python
</span><span class='line'>rancher                 2/2     2            2           9h    logo        ruanbekker/logos:rancher    app=logo,task=rancher</span></code></pre></td></tr></table></div></figure>


<p>Show ingress:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get ingress -o wide
</span><span class='line'>NAME      HOSTS                                                          ADDRESS   PORTS   AGE
</span><span class='line'>logo      openfaas.domain.com,rancher.domain.com,python.domain.com       80      9h</span></code></pre></td></tr></table></div></figure>


<p>Show system ingress:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get ingress -o wide -n kube-system
</span><span class='line'>NAME             HOSTS                     ADDRESS   PORTS   AGE
</span><span class='line'>traefik-web-ui   traefik-ui.domain.com               80      9h</span></code></pre></td></tr></table></div></figure>


<h2>Access your Applications</h2>

<p>Access the Traefik-UI, and filter for one of the applications. Let&rsquo;s take OpenFaaS for an example:</p>

<p><img src="https://user-images.githubusercontent.com/567298/59177432-63418080-8b5c-11e9-8e54-20600508e510.png" alt="image" /></p>

<p>Access the OpenFaaS Page via the URL:</p>

<p><img src="https://user-images.githubusercontent.com/567298/59177206-a4856080-8b5b-11e9-8954-238590f18e5c.png" alt="image" /></p>

<h2>Resources</h2>

<ul>
<li><a href="https://docs.traefik.io/user-guide/kubernetes/">https://docs.traefik.io/user-guide/kubernetes/</a></li>
</ul>


<center>
        <script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script>
</center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Out Scaleways Kapsule Their Kubernetes as a Service Offering]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/06/10/testing-out-scaleways-kapsule-their-kubernetes-as-a-service-offering/"/>
    <updated>2019-06-10T18:28:45+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/06/10/testing-out-scaleways-kapsule-their-kubernetes-as-a-service-offering</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/59177864-a5b78d00-8b5d-11e9-931c-5b5dd4e81805.png" alt="" /></p>

<p>At this time of writing (2019.06.10) Scaleway&rsquo;s Kubernetes as a Service, named Kapsule is in Private Beta and got access and pretty stoked on how easy it is to provision a Kubernetes cluster.</p>

<h2>What are we doing today?</h2>

<p>In this tutorial I will show you how easy it is to provision a 3 node Kubernetes Cluster on Scaleway. In the upcoming tutorial, I will create traefik as an ingress controller and deploy applications to our cluster. <a href="https://github.com/ruanbekker/traefik-kubernetes-scaleway-demo">Github Repo Version available for now</a></p>

<h2>Provision a Kapsule Cluster</h2>

<p>Head over to Kapsule and provision a Kubernetes Cluster:</p>

<p><img src="https://user-images.githubusercontent.com/567298/59164353-e71f4c80-8b0b-11e9-8f5c-7c65db1af7b2.png" alt="" /></p>

<p>At this point in time, I will only create a one node &ldquo;cluster&rdquo;, as I want to show how to add pools after the intial creation.</p>

<p>After the cluster has been provisioned, you will get information about your endpoints from the Cluster Infromation Section, which we will need for our ingresses:</p>

<p><img src="https://user-images.githubusercontent.com/567298/59180685-df8c9180-8b65-11e9-82aa-05ee3cd42c78.png" alt="" /></p>

<p>Scroll down to download your config:</p>

<p><img src="https://user-images.githubusercontent.com/567298/59164356-f56d6880-8b0b-11e9-8c00-34dff0ba61fb.png" alt="" /></p>

<p>Move your config in place:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mv ~/Downloads/kubeconfig-k8s-mystifying-torvalds.yaml ~/.kube/config</span></code></pre></td></tr></table></div></figure>


<h2>Interact with your Cluster</h2>

<p>Test the connection by getting the info of your nodes in your kubernetes cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get node
</span><span class='line'>NAME                                             STATUS    ROLES     AGE       VERSION
</span><span class='line'>scw-k8s-mystifying-torvalds-default-7f263aabab   Ready     &lt;none&gt;    4m        v1.14.1</span></code></pre></td></tr></table></div></figure>


<h2>Add more nodes:</h2>

<p>Provision another pool with 2 more nodes in our cluster:</p>

<p><img src="https://user-images.githubusercontent.com/567298/59164387-4e3d0100-8b0c-11e9-8633-b3fc680ac4cd.png" alt="" /></p>

<p>After the pool has been provisioned, verified that they have joined the cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get nodes
</span><span class='line'>NAME                                             STATUS    ROLES     AGE       VERSION
</span><span class='line'>scw-k8s-mystifying-torvald-jovial-mclar-25a942   Ready     &lt;none&gt;    2m        v1.14.1
</span><span class='line'>scw-k8s-mystifying-torvald-jovial-mclar-eaf1a2   Ready     &lt;none&gt;    2m        v1.14.1
</span><span class='line'>scw-k8s-mystifying-torvalds-default-7f263aabab   Ready     &lt;none&gt;    15m       v1.14.1</span></code></pre></td></tr></table></div></figure>


<h2>Master / Node Capabilities</h2>

<p>Usually, I will label master nodes as master: <code>node-role.kubernetes.io/master</code> and worker nodes as nodes: <code>node-role.kubernetes.io/node</code> to allow container scheduling only on the worker nodes. But Scaleway manages this on their end and when you list your nodes, the nodes that you see are your &ldquo;worker&rdquo; nodes.</p>

<p>The master nodes are managed by Scaleway.</p>

<h2>Well Done Scaleway</h2>

<p>Just one more reason I really love Kapsule. Simplicity at its best, well done to <a href="https://scaleway.com">Scaleway</a>. I hope most of the people got access to private beta, but if not, im pretty sure they will keep the public informed on public release dates.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Logstash Server for Amazon Elasticsearch Service and Auth With IAM]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/06/04/setup-a-logstash-server-for-amazon-elasticsearch-service-and-auth-with-iam/"/>
    <updated>2019-06-04T23:46:27+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/06/04/setup-a-logstash-server-for-amazon-elasticsearch-service-and-auth-with-iam</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/59209960-ca872100-8bac-11e9-8672-8c6af502afe0.png" alt="logstash" /></p>

<p>As many of you might know, when you deploy a ELK stack on Amazon Web Services, you only get E and K in the ELK stack, which is Elasticsearch and Kibana. Here we will be dealing with Logstash on EC2.</p>

<h2>What will we be doing</h2>

<p>In this tutorial we will setup a Logstash Server on EC2, setup a IAM Role and Autenticate Requests to Elasticsearch with an IAM Role, setup Nginx so that logstash can ship logs to Elasticsearch.</p>

<p>I am not fond of working with access key&rsquo;s and secret keys, and if I can stay away from handling secret information the better. So instead of creating a access key and secret key for logstash, we will instead create a IAM Policy that will allow the actions to Elasticsearch, associate that policy to an IAM Role, set EC2 as a trusted entity and strap that IAM Role to the EC2 Instance.</p>

<p>Then we will allow the IAM Role ARN to the Elasticsearch Policy, then when Logstash makes requests against Elasticsearch, it will use the IAM Role to assume temporary credentials to authenticate. That way we don&rsquo;t have to deal with keys. But I mean you can create access keys if that is your preferred method, I&rsquo;m just not a big fan of keeping secret keys.</p>

<p>The benefit of authenticating with IAM, allows you to remove a reverse proxy that is another hop to the path of your target.</p>

<h2>Create the IAM Policy:</h2>

<p>Create a IAM Policy that will allow actions to Elasticsearch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "Version": "2012-10-17",
</span><span class='line'>    "Statement": [
</span><span class='line'>        {
</span><span class='line'>            "Sid": "VisualEditor0",
</span><span class='line'>            "Effect": "Allow",
</span><span class='line'>            "Action": [
</span><span class='line'>                "es:ESHttpHead",
</span><span class='line'>                "es:ESHttpPost",
</span><span class='line'>                "es:ESHttpGet",
</span><span class='line'>                "es:ESHttpPut"
</span><span class='line'>            ],
</span><span class='line'>            "Resource": "arn:aws:es:eu-west-1:0123456789012:domain/my-es-domain"
</span><span class='line'>        }
</span><span class='line'>    ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Create Role logstash-system-es with &ldquo;ec2.amazonaws.com&rdquo; as trusted entity in trust the relationship and associate the above policy to the role.</p>

<h2>Authorize your Role in Elasticsearch Policy</h2>

<p>Head over to your Elasticsearch Domain and configure your Elasticsearch Policy to include your IAM Role to grant requests to your Domain:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "Version": "2012-10-17",
</span><span class='line'>  "Statement": [
</span><span class='line'>    {
</span><span class='line'>      "Effect": "Allow",
</span><span class='line'>      "Principal": {
</span><span class='line'>        "AWS": [
</span><span class='line'>          "arn:aws:iam::0123456789012:role/logstash-system-es"
</span><span class='line'>        ]
</span><span class='line'>      },
</span><span class='line'>      "Action": "es:*",
</span><span class='line'>      "Resource": "arn:aws:es:eu-west-1:0123456789012:domain/my-es-domain/*"
</span><span class='line'>    }
</span><span class='line'>  ]
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>Install Logstash on EC2</h2>

<p>I will be using Ubuntu Server 18. Update the repositories and install dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update && apt upgrade -y
</span><span class='line'>$ apt install build-essential apt-transport-https -y
</span><span class='line'>$ wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
</span><span class='line'>$ echo "deb https://artifacts.elastic.co/packages/6.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-6.x.list
</span><span class='line'>$ apt update</span></code></pre></td></tr></table></div></figure>


<p>As logstash requires Java, install the the Java OpenJDK Runtime Environment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt install default-jre -y</span></code></pre></td></tr></table></div></figure>


<p>Verify that Java is installed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ java -version
</span><span class='line'>openjdk version "11.0.3" 2019-04-16
</span><span class='line'>OpenJDK Runtime Environment (build 11.0.3+7-Ubuntu-1ubuntu218.04.1)
</span><span class='line'>OpenJDK 64-Bit Server VM (build 11.0.3+7-Ubuntu-1ubuntu218.04.1, mixed mode, sharing)</span></code></pre></td></tr></table></div></figure>


<p>Now, install logstash and enable the service on boot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt install logstash -y
</span><span class='line'>$ systemctl enable logstash.service
</span><span class='line'>$ service logstash stop</span></code></pre></td></tr></table></div></figure>


<h2>Install the Amazon ES Logstash Output Plugin</h2>

<p>For us to be able to authenticate using IAM, we should use the Amazon-ES Logstash Output Plugin. Update and install the plugin:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ /usr/share/logstash/bin/logstash-plugin update
</span><span class='line'>$ /usr/share/logstash/bin/logstash-plugin install logstash-output-amazon_es</span></code></pre></td></tr></table></div></figure>


<h2>Configure Logstash</h2>

<p>I like to split up my configuration in 3 parts, (input, filter, output).</p>

<p>Let&rsquo;s create the input configuration: <code>/etc/logstash/conf.d/10-input.conf</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>input {
</span><span class='line'>  file {
</span><span class='line'>    path =&gt; "/var/log/nginx/access.log"
</span><span class='line'>    start_position =&gt; "beginning"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Our filter configuration: <code>/etc/logstash/conf.d/20-filter.conf</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>filter {
</span><span class='line'>  grok {
</span><span class='line'>    match =&gt; { "message" =&gt; "%{HTTPD_COMMONLOG}" }
</span><span class='line'>  }
</span><span class='line'>  mutate {
</span><span class='line'>    add_field =&gt; {
</span><span class='line'>      "custom_field1" =&gt; "hello from: %{host}"
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>And lastly, our output configuration: <code>/etc/logstash/conf.d/30-outputs.conf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>output {
</span><span class='line'>  amazon_es {
</span><span class='line'>      hosts =&gt; ["my-es-domain.abcdef.eu-west-1.es.amazonaws.com"]
</span><span class='line'>      index =&gt; "new-logstash-%{+YYYY.MM.dd}"
</span><span class='line'>      region =&gt; "eu-west-1"
</span><span class='line'>      aws_access_key_id =&gt; ''
</span><span class='line'>      aws_secret_access_key =&gt; ''
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Note that the <code>aws_</code> directives has been left empty as that seems to be the way it needs to be set when using roles. Authentication will be assumed via the Role which is associated to the EC2 Instance.</p>

<p>If you are using access keys, you can populate them there.</p>

<h2>Start Logstash</h2>

<p>Start logstash:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ service logstash start</span></code></pre></td></tr></table></div></figure>


<p>Tail the logs to see if logstash starts up correctly, it should look more or less like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tail -f /var/log/logstash/logstash-plain.log
</span><span class='line'>
</span><span class='line'>[2019-06-04T16:38:12,087][INFO ][logstash.runner          ] Starting Logstash {"logstash.version"=&gt;"6.8.0"}
</span><span class='line'>[2019-06-04T16:38:14,480][INFO ][logstash.pipeline        ] Starting pipeline {:pipeline_id=&gt;"main", "pipeline.workers"=&gt;2, "pipeline.batch.size"=&gt;125, "pipeline.batch.delay"=&gt;50}
</span><span class='line'>[2019-06-04T16:38:15,226][INFO ][logstash.outputs.elasticsearch] Elasticsearch pool URLs updated {:changes=&gt;{:removed=&gt;[], :added=&gt;[https://search-my-es-domain-xx.eu-west-1.es.amazonaws.com:443/]}}
</span><span class='line'>[2019-06-04T16:38:15,234][INFO ][logstash.outputs.elasticsearch] Running health check to see if an Elasticsearch connection is working {:healthcheck_url=&gt;https://search-my-es-domain-xx.eu-west-1.es.amazonaws.com:443/, :path=&gt;"/"}</span></code></pre></td></tr></table></div></figure>


<h2>Install Nginx</h2>

<p>As you noticed, I have specified <code>/var/log/nginx/access.log</code> as my input file for logstash, as we will test logstash by shipping nginx access logs to Elasticsearch Service.</p>

<p>Install Nginx:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt install nginx -y</span></code></pre></td></tr></table></div></figure>


<p>Start the service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart nginx 
</span><span class='line'>$ systemctl enable nginx</span></code></pre></td></tr></table></div></figure>


<p>Make a GET request on your Nginx Web Server and inspect the log on Kibana, where it should look like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/58917559-4dc8f280-8727-11e9-9e9d-7950217abe34.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Vagrant to Setup a Local Development Environment on Linux]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/30/use-vagrant-to-setup-a-local-development-environment-on-linux/"/>
    <updated>2019-05-30T21:14:15+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/30/use-vagrant-to-setup-a-local-development-environment-on-linux</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/58658188-37cec280-8320-11e9-90ca-1226b3ccb292.png" alt="vagrant" /></p>

<p><strong><a href="https://www.vagrantup.com">Vagrant!</a></strong> Another super product from Hashicorp.</p>

<p>Vagrant makes it really easy to provision virtual servers, which they refer as &ldquo;boxes&rdquo;, that enables developers to run their jobs/tasks/applications in a really easy and fast way. Vagrant utilizes a declarative configuration model, so you can describe which OS you want, bootstrap them with installation instructions as soon as it boots, etc.</p>

<h2>What are we doing today?</h2>

<p>When completing this tutorial, you should be able to launch a Ubuntu Virtual Server locally with Vagrant and using the Virtualbox Provider which will be responsible for running our VM&rsquo;s.</p>

<p>I am running this on a Ubuntu 19 Desktop, but you can run this on Mac/Windows/Linux. First we will install Virtualbox, then Vagrant, then we will provision a Ubuntu box and I will also show how to inject shell commands into your Vagrantfile so that you can provision software to your VM, and also forward traffic to a web server through your host to the guest.</p>

<h2>Virtualbox</h2>

<p>Install some pre-requirements:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install dkms build-essential linux-headers-`uname -r`</span></code></pre></td></tr></table></div></figure>


<p>Head over to Virtualbox&rsquo;s <a href="https://www.virtualbox.org/wiki/Downloads">download page</a> and grab the latest version of virtualbox and install it.</p>

<p>After the installation run <code>vboxconfig</code> to build the kernel modules. If you get the error that I received as seen below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo /sbin/vboxconfig
</span><span class='line'>
</span><span class='line'>vboxdrv.sh: Building VirtualBox kernel modules
</span><span class='line'>vboxdrv.sh: Starting VirtualBox services
</span><span class='line'>vboxdrv.sh: Building VirtualBox kernel modules
</span><span class='line'>vboxdrv.sh: failed: modprobe vboxdrv failed. Please use 'dmesg' to find out why</span></code></pre></td></tr></table></div></figure>


<p>This <a href="https://askubuntu.com/questions/900118/vboxdrv-sh-failed-modprobe-vboxdrv-failed-please-use-dmesg-to-find-out-why">resource on askubuntu.com</a> helped me out. In short, theres a requirement that all the kernel modules must be signed by a key trusted by the UEFI system.</p>

<p>To resolve:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install linux-headers-generic build-essential dkms
</span><span class='line'>$ sudo apt-get remove --purge virtualbox-dkms
</span><span class='line'>$ sudo apt-get install virtualbox-dkms
</span><span class='line'>
</span><span class='line'>$ openssl req -new -x509 -newkey rsa:2048 -keyout MOK.priv -outform DER -out MOK.der -nodes -days 36500 -subj "/CN=Descriptive common name/"
</span><span class='line'>$ sudo /usr/src/linux-headers-$(uname -r)/scripts/sign-file sha256 ./MOK.priv ./MOK.der $(modinfo -n vboxdrv)
</span><span class='line'>$ sudo mokutil --import MOK.der</span></code></pre></td></tr></table></div></figure>


<p>Remember the password, as you will require it when you reboot. You will get the option to &ldquo;Enroll MOK&rdquo;, select that, enter the initial password and reboot.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo reboot</span></code></pre></td></tr></table></div></figure>


<p>You should be able to get a response from the binary:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ VirtualBox -h
</span><span class='line'>Oracle VM VirtualBox VM Selector v6.0.6_Ubuntu</span></code></pre></td></tr></table></div></figure>


<h2>Install Vagrant</h2>

<p>Head over to Vagrant&rsquo;s <a href="https://www.vagrantup.com/docs/installation/">installation page</a>, get the latest version for your operating system and install it.</p>

<p>After installing it you should get the following response:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant --version
</span><span class='line'>Vagrant 2.2.4</span></code></pre></td></tr></table></div></figure>


<h2>Provision a Box with Vagrant</h2>

<p>When you head over to <a href="https://app.vagrantup.com/boxes/search">app.vagrantup.com/boxes/search</a> you can select the pre-packed operating system of your choice. As for this demonstration, I went with: <code>ubuntu/trusty64</code></p>

<p>First we will need to initialize a new Vagrant environment by creating a Vagrantfile, as we will be passing the name of our operating system, it will be populated in our Vagrantfile:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant init ubuntu/trusty64
</span><span class='line'>
</span><span class='line'>A `Vagrantfile` has been placed in this directory. You are now
</span><span class='line'>ready to `vagrant up` your first virtual environment! Please read
</span><span class='line'>the comments in the Vagrantfile as well as documentation on
</span><span class='line'>`vagrantup.com` for more information on using Vagrant.</span></code></pre></td></tr></table></div></figure>


<p>Now since the Vagrantfile has been placed in our current working directory, let&rsquo;s have a look at it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat Vagrantfile
</span><span class='line'># -*- mode: ruby -*-
</span><span class='line'># vi: set ft=ruby :
</span><span class='line'>
</span><span class='line'>Vagrant.configure("2") do |config|
</span><span class='line'>  config.vm.box = "ubuntu/trusty64"
</span><span class='line'>  # config.vm.network "forwarded_port", guest: 80, host: 8080
</span><span class='line'>  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
</span><span class='line'>  # config.vm.network "private_network", ip: "192.168.33.10"
</span><span class='line'>  # config.vm.network "public_network"
</span><span class='line'>  # config.vm.synced_folder "../data", "/vagrant_data"
</span><span class='line'>  #
</span><span class='line'>  # config.vm.provider "virtualbox" do |vb|
</span><span class='line'>  #   vb.gui = true
</span><span class='line'>  #   vb.memory = "1024"
</span><span class='line'>  # end
</span><span class='line'>  #
</span><span class='line'>  # config.vm.provision "shell", inline: &lt;&lt;-SHELL
</span><span class='line'>  #   apt-get update
</span><span class='line'>  #   apt-get install -y apache2
</span><span class='line'>  # SHELL
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>As you can see the Vagrantfile has a set of instructions of how we want our VM to be. At this moment you will only see that the image is defined as <code>ubuntu/trusty64</code>.</p>

<p>Let&rsquo;s start our VM:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant up
</span><span class='line'>
</span><span class='line'>Bringing machine 'default' up with 'virtualbox' provider...
</span><span class='line'>==&gt; default: Importing base box 'ubuntu/trusty64'...
</span><span class='line'>==&gt; default: Matching MAC address for NAT networking...
</span><span class='line'>==&gt; default: Checking if box 'ubuntu/trusty64' version '20190429.0.1' is up to date...
</span><span class='line'>==&gt; default: Setting the name of the VM: vagrant_default_1559238982328_97737
</span><span class='line'>==&gt; default: Clearing any previously set forwarded ports...
</span><span class='line'>    default: Adapter 1: nat
</span><span class='line'>==&gt; default: Forwarding ports...
</span><span class='line'>    default: 22 (guest) =&gt; 2222 (host) (adapter 1)
</span><span class='line'>==&gt; default: Booting VM...
</span><span class='line'>==&gt; default: Waiting for machine to boot. This may take a few minutes...
</span><span class='line'>    default: SSH address: 127.0.0.1:2222
</span><span class='line'>    default: SSH username: vagrant
</span><span class='line'>    default: SSH auth method: private key
</span><span class='line'>    default:
</span><span class='line'>    default: Vagrant insecure key detected. Vagrant will automatically replace
</span><span class='line'>    default: this with a newly generated keypair for better security.</span></code></pre></td></tr></table></div></figure>


<p>Now that our VM has been booted, we can ssh to our server by simply running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant ssh
</span><span class='line'>ubuntu-server $</span></code></pre></td></tr></table></div></figure>


<h2>Making changes to your config</h2>

<p>So let&rsquo;s say we want to edit our Vagrantfile to provide shell commands to install nginx and forward our host port 8080 to our guest port 80, so that we can access our VM&rsquo;s webserver on localhost using port 8080.</p>

<p>Edit your Vagrantfile so that it looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;ubuntu/trusty64&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;forwarded_port&quot;</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">80</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="mi">8080</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> <span class="ss">inline</span><span class="p">:</span> <span class="o">&lt;&lt;-</span><span class="no">SHELL</span>
</span><span class='line'><span class="sh">    apt-get update</span>
</span><span class='line'><span class="sh">    apt-get install nginx -y</span>
</span><span class='line'><span class="no">  SHELL</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to call the shell activity we need to call the provision argument:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">vagrant</span> <span class="n">provision</span>
</span></code></pre></td></tr></table></div></figure>


<p>That will install nginx to our VM, then call reload to change to port configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">vagrant</span> <span class="n">reload</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that everything is in order, we can access our nginx web server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">curl</span> <span class="o">-</span><span class="n">i</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">8080</span>
</span><span class='line'><span class="no">HTTP</span><span class="o">/</span><span class="mi">1</span><span class="o">.</span><span class="mi">1</span> <span class="mi">200</span>
</span><span class='line'><span class="ss">Server</span><span class="p">:</span> <span class="n">nginx</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Tear down</h2>

<p>Delete the server by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">vagrant</span> <span class="n">destroy</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prometheus Series of Tutorials for Your Guide to Epic Metrics]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/17/prometheus-series-of-tutorials-for-your-guide-to-epic-metrics/"/>
    <updated>2019-05-17T20:24:40+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/17/prometheus-series-of-tutorials-for-your-guide-to-epic-metrics</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57307750-696bb980-70e5-11e9-9b0b-73ad88bde6a3.png" alt="prometheus" /></p>

<p>This is a curated list of tutorials of prometheus, from installing prometheus, installing grafana, exporters, docker versions of the prometheus / grafana / node exporter stack, etc.</p>

<h2>The List</h2>

<ul>
<li>Install <a href="http://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">Prometheus</a></li>
<li>Install <a href="http://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">Node Exporter</a></li>
<li>Install <a href="http://blog.ruanbekker.com/blog/2019/05/17/install-pushgateway-to-expose-metrics-to-prometheus/">Pushgateway</a></li>
<li>Install <a href="http://blog.ruanbekker.com/blog/2019/05/17/install-grafana-to-visualize-your-metrics-from-datasources-such-as-prometheus-on-linux/">Grafana</a></li>
<li>Install <a href="http://blog.ruanbekker.com/blog/2019/05/17/install-alertmanager-to-alert-based-on-metrics-from-prometheus/">Alertmananger</a></li>
<li>Install <a href="http://blog.ruanbekker.com/blog/2019/05/17/install-blackbox-exporter-to-monitor-websites-with-prometheus/">Blackbox Exporter</a></li>
<li>Install <a href="">Docker Prometheus Grafana Stack</a></li>
</ul>


<p>This list will be updated as I publish more tutorials</p>
]]></content>
  </entry>
  
</feed>
