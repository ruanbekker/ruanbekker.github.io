<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2023-12-22T07:53:57-05:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating a Python Lambda Function With Terraform on AWS]]></title>
    <link href="https://blog.ruanbekker.com/blog/2023/08/03/creating-a-python-lambda-function-with-terraform-on-aws/"/>
    <updated>2023-08-03T11:29:35-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2023/08/03/creating-a-python-lambda-function-with-terraform-on-aws</id>
    <content type="html"><![CDATA[<p>In this tutorial I will explain how to deploy a AWS Lambda Function with Terraform using the Python runtime. It will include the permissions it needs to write its logs to AWS CloudWatch as well as to get information from the AWS API&rsquo;s as a boilerplate for you to expand on it.</p>

<p>We will also use CloudWatch Events to trigger this lambda function every two hours.</p>

<h2>Pre-Requisites</h2>

<p>First you will need to have <a href="https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli">Terraform</a> installed as well as authentication for Terraform to interact with your AWS account, I have written a post about it and you can follow that on &ldquo;<a href="https://blog.ruanbekker.com/blog/2023/07/15/how-to-use-the-aws-terraform-provider/">How to use the AWS Terraform Provider</a>&rdquo;.</p>

<h2>Project Structure</h2>

<p>The following code will be available on my <a href="https://github.com/ruanbekker/terraformfiles/tree/master/modules/aws-lambda-function">github repository</a>, but if you would like to follow along we will create everything step by step.</p>

<p>First create the project directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p ~/workspace/aws-lambda-terraform
</span></code></pre></td></tr></table></div></figure>


<p>Then change into the directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/workspace/aws-lambda-terraform
</span></code></pre></td></tr></table></div></figure>


<p>First we want to create our modules directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p modules/lambda-function
</span></code></pre></td></tr></table></div></figure>


<p>Then our environment directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p environment/test
</span></code></pre></td></tr></table></div></figure>


<p>We will also create the directory for our function code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p modules/lambda-function/functions
</span></code></pre></td></tr></table></div></figure>


<p>And we can create the file for our python function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>touch modules/lambda-function/functions/demo.py
</span></code></pre></td></tr></table></div></figure>


<p>Now we will create our files inside our modules directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>touch modules/lambda-function/<span class="o">{</span>main,versions,outputs,variables<span class="o">}</span>.tf
</span></code></pre></td></tr></table></div></figure>


<p>Then create the files inside our environments directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>touch environment/test/<span class="o">{</span>main,provider,output<span class="o">}</span>.tf
</span></code></pre></td></tr></table></div></figure>


<p>Then in summary our project structure should look more or less like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tree .
</span><span class='line'>.
</span><span class='line'>├── environment
</span><span class='line'>│   └── <span class="nb">test</span>
</span><span class='line'>│       ├── main.tf
</span><span class='line'>│       ├── output.tf
</span><span class='line'>│       └── provider.tf
</span><span class='line'>└── modules
</span><span class='line'>    └── lambda-function
</span><span class='line'>        ├── functions
</span><span class='line'>        │   └── demo.py
</span><span class='line'>        ├── main.tf
</span><span class='line'>        ├── outputs.tf
</span><span class='line'>        ├── variables.tf
</span><span class='line'>        └── versions.tf
</span><span class='line'>
</span><span class='line'><span class="m">5</span> directories, <span class="m">8</span> files
</span></code></pre></td></tr></table></div></figure>


<h2>Terraform Code</h2>

<p>We will first start populating the modules bit, and start with <code>modules/lambda-function/main.tf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>data <span class="s2">&quot;aws_iam_policy_document&quot;</span> <span class="s2">&quot;lambda&quot;</span> <span class="o">{</span>
</span><span class='line'>  statement <span class="o">{</span>
</span><span class='line'>    <span class="nv">actions</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;sts:AssumeRole&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    principals <span class="o">{</span>
</span><span class='line'>      <span class="nb">type</span>        <span class="o">=</span> <span class="s2">&quot;Service&quot;</span>
</span><span class='line'>      <span class="nv">identifiers</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;lambda.amazonaws.com&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>data <span class="s2">&quot;aws_iam_policy_document&quot;</span> <span class="s2">&quot;lambda_execution&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">count</span> <span class="o">=</span> var.logs_enabled ? <span class="m">1</span> : 0
</span><span class='line'>
</span><span class='line'>  statement <span class="o">{</span>
</span><span class='line'>    <span class="nv">sid</span>     <span class="o">=</span> <span class="s2">&quot;GetCallerIdentity&quot;</span>
</span><span class='line'>    <span class="nv">effect</span>  <span class="o">=</span> <span class="s2">&quot;Allow&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">actions</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;sts:GetCallerIdentity&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">resources</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;*&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  statement <span class="o">{</span>
</span><span class='line'>    <span class="nv">sid</span>     <span class="o">=</span> <span class="s2">&quot;DescribeFunctionsInRegion&quot;</span>
</span><span class='line'>    <span class="nv">effect</span>  <span class="o">=</span> <span class="s2">&quot;Allow&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">actions</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;lambda:GetFunction&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">resources</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;*&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    condition <span class="o">{</span>
</span><span class='line'>      <span class="nb">test</span>     <span class="o">=</span> <span class="s2">&quot;StringEquals&quot;</span>
</span><span class='line'>      <span class="nv">variable</span> <span class="o">=</span> <span class="s2">&quot;aws:RequestedRegion&quot;</span>
</span><span class='line'>      <span class="nv">values</span> <span class="o">=</span> <span class="o">[</span>var.aws_region<span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;aws_iam_role_policy&quot;</span> <span class="s2">&quot;lambda_execution_policy&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">count</span>  <span class="o">=</span> var.logs_enabled ? <span class="m">1</span> : 0
</span><span class='line'>  <span class="nv">name</span>   <span class="o">=</span> <span class="s2">&quot;${var.project_name}-lambda-function-execution-policy&quot;</span>
</span><span class='line'>  <span class="nv">role</span>   <span class="o">=</span> aws_iam_role.lambda_role<span class="o">[</span>count.index<span class="o">]</span>.id
</span><span class='line'>  <span class="nv">policy</span> <span class="o">=</span> data.aws_iam_policy_document.lambda_execution<span class="o">[</span>count.index<span class="o">]</span>.json
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>data <span class="s2">&quot;archive_file&quot;</span> <span class="s2">&quot;lambda_zip&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">type</span>        <span class="o">=</span> <span class="s2">&quot;zip&quot;</span>
</span><span class='line'>  <span class="nv">source_file</span> <span class="o">=</span> <span class="s2">&quot;${path.module}/functions/demo.py&quot;</span>
</span><span class='line'>  <span class="nv">output_path</span> <span class="o">=</span> <span class="s2">&quot;${path.module}/lambda-archives/package.zip&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;aws_iam_role&quot;</span> <span class="s2">&quot;lambda_role&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">count</span>              <span class="o">=</span> var.logs_enabled ? <span class="m">1</span> : 0
</span><span class='line'>  <span class="nv">name</span>               <span class="o">=</span> <span class="s2">&quot;${var.project_name}-lambda-function-role&quot;</span>
</span><span class='line'>  <span class="nv">assume_role_policy</span> <span class="o">=</span> data.aws_iam_policy_document.lambda.json
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;aws_lambda_function&quot;</span> <span class="s2">&quot;lambda&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">count</span>            <span class="o">=</span> var.logs_enabled ? <span class="m">1</span> : 0
</span><span class='line'>  <span class="nv">filename</span>         <span class="o">=</span> data.archive_file.lambda_zip.output_path
</span><span class='line'>  <span class="nv">function_name</span>    <span class="o">=</span> <span class="s2">&quot;${var.project_name}-lambda-function&quot;</span>
</span><span class='line'>  <span class="nv">role</span>             <span class="o">=</span> aws_iam_role.lambda_role<span class="o">[</span>count.index<span class="o">]</span>.arn
</span><span class='line'>  <span class="nv">handler</span>          <span class="o">=</span> <span class="s2">&quot;demo.lambda_handler&quot;</span>
</span><span class='line'>  <span class="nv">source_code_hash</span> <span class="o">=</span> filebase64sha256<span class="o">(</span>data.archive_file.lambda_zip.output_path<span class="o">)</span>
</span><span class='line'>  <span class="nv">runtime</span>          <span class="o">=</span> <span class="s2">&quot;python3.8&quot;</span>
</span><span class='line'>  <span class="nv">timeout</span>          <span class="o">=</span> 30
</span><span class='line'>
</span><span class='line'>  environment <span class="o">{</span>
</span><span class='line'>    <span class="nv">variables</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="nv">PROJECT_NAME</span>  <span class="o">=</span> var.project_name
</span><span class='line'>      <span class="nv">FUNCTION_NAME</span> <span class="o">=</span> <span class="s2">&quot;${var.project_name}-lambda-function&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">depends_on</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    data.archive_file.lambda_zip
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;aws_cloudwatch_event_rule&quot;</span> <span class="s2">&quot;every_two_hours&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">count</span>               <span class="o">=</span> var.logs_enabled ? <span class="m">1</span> : 0
</span><span class='line'>  <span class="nv">name</span>                <span class="o">=</span> <span class="s2">&quot;${var.project_name}-every-two-hours&quot;</span>
</span><span class='line'>  <span class="nv">description</span>         <span class="o">=</span> <span class="s2">&quot;Fires every 2 hours&quot;</span>
</span><span class='line'>  <span class="nv">schedule_expression</span> <span class="o">=</span> <span class="s2">&quot;rate(2 hours)&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;aws_lambda_permission&quot;</span> <span class="s2">&quot;allow_cloudwatch&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">count</span>         <span class="o">=</span> var.logs_enabled ? <span class="m">1</span> : 0
</span><span class='line'>  <span class="nv">statement_id</span>  <span class="o">=</span> <span class="s2">&quot;AllowExecutionFromCloudWatch&quot;</span>
</span><span class='line'>  <span class="nv">action</span>        <span class="o">=</span> <span class="s2">&quot;lambda:InvokeFunction&quot;</span>
</span><span class='line'>  <span class="nv">function_name</span> <span class="o">=</span> aws_lambda_function.lambda<span class="o">[</span>count.index<span class="o">]</span>.function_name
</span><span class='line'>  <span class="nv">principal</span>     <span class="o">=</span> <span class="s2">&quot;events.amazonaws.com&quot;</span>
</span><span class='line'>  <span class="nv">source_arn</span>    <span class="o">=</span> aws_cloudwatch_event_rule.every_two_hours<span class="o">[</span>count.index<span class="o">]</span>.arn
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;aws_cloudwatch_event_target&quot;</span> <span class="s2">&quot;cloudwatch_event&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">count</span>     <span class="o">=</span> var.logs_enabled ? <span class="m">1</span> : 0
</span><span class='line'>  <span class="nv">rule</span>      <span class="o">=</span> aws_cloudwatch_event_rule.every_two_hours<span class="o">[</span>count.index<span class="o">]</span>.name
</span><span class='line'>  <span class="nv">target_id</span> <span class="o">=</span> <span class="s2">&quot;${var.project_name}-snapshot-retention-target&quot;</span>
</span><span class='line'>  <span class="nv">arn</span>       <span class="o">=</span> aws_lambda_function.lambda<span class="o">[</span>count.index<span class="o">]</span>.arn
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>// CloudWatch Logs
</span><span class='line'>resource <span class="s2">&quot;aws_cloudwatch_log_group&quot;</span> <span class="s2">&quot;cloudwatch_log_group&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">count</span>     <span class="o">=</span> var.logs_enabled ? <span class="m">1</span> : 0
</span><span class='line'>  <span class="nv">name</span>      <span class="o">=</span> <span class="s2">&quot;/aws/lambda/${aws_lambda_function.lambda[count.index].function_name}&quot;</span>
</span><span class='line'>  <span class="nv">retention_in_days</span> <span class="o">=</span> 5
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;aws_iam_role_policy_attachment&quot;</span> <span class="s2">&quot;lambda_exec_policy&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">count</span>      <span class="o">=</span> var.logs_enabled ? <span class="m">1</span> : 0
</span><span class='line'>  <span class="nv">role</span>       <span class="o">=</span> aws_iam_role.lambda_role<span class="o">[</span>count.index<span class="o">]</span>.name
</span><span class='line'>  <span class="nv">policy_arn</span> <span class="o">=</span> <span class="s2">&quot;arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next one will be the <code>modules/lambda-function/variables.tf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>variable <span class="s2">&quot;aws_region&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">default</span> <span class="o">=</span> <span class="s2">&quot;eu-west-1&quot;</span>
</span><span class='line'>  <span class="nb">type</span>    <span class="o">=</span> string
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>variable <span class="s2">&quot;project_name&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">default</span> <span class="o">=</span> <span class="s2">&quot;example&quot;</span>
</span><span class='line'>  <span class="nb">type</span>    <span class="o">=</span> string
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>variable <span class="s2">&quot;logs_enabled&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">default</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="nb">  type</span>    <span class="o">=</span> bool
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then define the modules output in <code>modules/lambda-function/outputs.tf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>output <span class="s2">&quot;arn_string&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">value</span> <span class="o">=</span> aws_lambda_function.lambda<span class="o">[</span>*<span class="o">]</span>.arn
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we define our python function code in <code>modules/lambda-function/functions/demo.py</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">logging</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'>
</span><span class='line'><span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">()</span>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">setLevel</span><span class="p">(</span><span class="n">logging</span><span class="o">.</span><span class="n">INFO</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">lambda_handler</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
</span><span class='line'>    <span class="n">client</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s">&#39;lambda&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">get_function</span><span class="p">(</span>
</span><span class='line'>        <span class="n">FunctionName</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;FUNCTION_NAME&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;statusCode&#39;</span> <span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;body&#39;</span><span class="p">:</span> <span class="n">response</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For our environment we want to specify the source as our module in <code>environment/test/main.tf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">module</span> <span class="s">&quot;myfunction&quot;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">source</span>       <span class="o">=</span> <span class="s">&quot;../../modules/lambda-function&quot;</span>
</span><span class='line'>  <span class="n">project_name</span> <span class="o">=</span> <span class="s">&quot;test&quot;</span>
</span><span class='line'>  <span class="n">logs_enabled</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our outputs in <code>environment/test/output.tf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">output</span> <span class="s">&quot;arn_string&quot;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">myfunction</span><span class="o">.</span><span class="n">arn_string</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And since we are using AWS, we need to define our providers and the profile that we will use to authenticate against AWS, in my case, im using the default profile in <code>environment/test/provider.tf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">terraform</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">required_providers</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">aws</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">source</span> <span class="o">=</span> <span class="s">&quot;hashicorp/aws&quot;</span>
</span><span class='line'>      <span class="n">version</span> <span class="o">=</span> <span class="s">&quot;4.23.0&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">provider</span> <span class="s">&quot;aws&quot;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">region</span>                   <span class="o">=</span> <span class="s">&quot;eu-west-1&quot;</span>
</span><span class='line'>  <span class="n">profile</span>                  <span class="o">=</span> <span class="s">&quot;default&quot;</span>
</span><span class='line'>  <span class="n">shared_credentials_files</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;~/.aws/credentials&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Terraform Plan</h2>

<p>Now that we have defined our terraform code we can run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform plan
</span></code></pre></td></tr></table></div></figure>


<p>And it should return something more or less like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
</span><span class='line'>  + create
</span><span class='line'>
</span><span class='line'>Terraform will perform the following actions:
</span><span class='line'>
</span><span class='line'>  <span class="c"># module.myfunction.aws_cloudwatch_event_rule.every_two_hours[0] will be created</span>
</span><span class='line'>  + resource <span class="s2">&quot;aws_cloudwatch_event_rule&quot;</span> <span class="s2">&quot;every_two_hours&quot;</span> <span class="o">{</span>
</span><span class='line'>      + <span class="nv">arn</span>                 <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">description</span>         <span class="o">=</span> <span class="s2">&quot;Fires every 2 hours&quot;</span>
</span><span class='line'>      + <span class="nv">event_bus_name</span>      <span class="o">=</span> <span class="s2">&quot;default&quot;</span>
</span><span class='line'>      + <span class="nv">id</span>                  <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">is_enabled</span>          <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>      + <span class="nv">name</span>                <span class="o">=</span> <span class="s2">&quot;test-every-two-hours&quot;</span>
</span><span class='line'>      + <span class="nv">name_prefix</span>         <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">schedule_expression</span> <span class="o">=</span> <span class="s2">&quot;rate(2 hours)&quot;</span>
</span><span class='line'>      + <span class="nv">tags_all</span>            <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># module.myfunction.aws_cloudwatch_event_target.cloudwatch_event[0] will be created</span>
</span><span class='line'>  + resource <span class="s2">&quot;aws_cloudwatch_event_target&quot;</span> <span class="s2">&quot;cloudwatch_event&quot;</span> <span class="o">{</span>
</span><span class='line'>      + <span class="nv">arn</span>            <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">event_bus_name</span> <span class="o">=</span> <span class="s2">&quot;default&quot;</span>
</span><span class='line'>      + <span class="nv">id</span>             <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">rule</span>           <span class="o">=</span> <span class="s2">&quot;test-every-two-hours&quot;</span>
</span><span class='line'>      + <span class="nv">target_id</span>      <span class="o">=</span> <span class="s2">&quot;test-snapshot-retention-target&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># module.myfunction.aws_cloudwatch_log_group.cloudwatch_log_group[0] will be created</span>
</span><span class='line'>  + resource <span class="s2">&quot;aws_cloudwatch_log_group&quot;</span> <span class="s2">&quot;cloudwatch_log_group&quot;</span> <span class="o">{</span>
</span><span class='line'>      + <span class="nv">arn</span>               <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">id</span>                <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">name</span>              <span class="o">=</span> <span class="s2">&quot;/aws/lambda/test-lambda-function&quot;</span>
</span><span class='line'>      + <span class="nv">retention_in_days</span> <span class="o">=</span> 5
</span><span class='line'>      + <span class="nv">tags_all</span>          <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># module.myfunction.aws_iam_role.lambda_role[0] will be created</span>
</span><span class='line'>  + resource <span class="s2">&quot;aws_iam_role&quot;</span> <span class="s2">&quot;lambda_role&quot;</span> <span class="o">{</span>
</span><span class='line'>      + <span class="nv">arn</span>                   <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">assume_role_policy</span>    <span class="o">=</span> jsonencode<span class="o">(</span>
</span><span class='line'>            <span class="o">{</span>
</span><span class='line'>              + <span class="nv">Statement</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>                  + <span class="o">{</span>
</span><span class='line'>                      + <span class="nv">Action</span>   <span class="o">=</span> <span class="s2">&quot;sts:GetCallerIdentity&quot;</span>
</span><span class='line'>                      + <span class="nv">Effect</span>   <span class="o">=</span> <span class="s2">&quot;Allow&quot;</span>
</span><span class='line'>                      + <span class="nv">Resource</span> <span class="o">=</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>                      + <span class="nv">Sid</span>      <span class="o">=</span> <span class="s2">&quot;GetCallerIdentity&quot;</span>
</span><span class='line'>                    <span class="o">}</span>,
</span><span class='line'>                  + <span class="o">{</span>
</span><span class='line'>                      + <span class="nv">Action</span>    <span class="o">=</span> <span class="s2">&quot;lambda:GetFunction&quot;</span>
</span><span class='line'>                      + <span class="nv">Condition</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>                          + <span class="nv">StringEquals</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>                              + <span class="s2">&quot;aws:RequestedRegion&quot;</span> <span class="o">=</span> <span class="s2">&quot;eu-west-1&quot;</span>
</span><span class='line'>                            <span class="o">}</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                      + <span class="nv">Effect</span>    <span class="o">=</span> <span class="s2">&quot;Allow&quot;</span>
</span><span class='line'>                      + <span class="nv">Resource</span>  <span class="o">=</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>                      + <span class="nv">Sid</span>       <span class="o">=</span> <span class="s2">&quot;DescribeFunctionsInRegion&quot;</span>
</span><span class='line'>                    <span class="o">}</span>,
</span><span class='line'>                <span class="o">]</span>
</span><span class='line'>              + <span class="nv">Version</span>   <span class="o">=</span> <span class="s2">&quot;2012-10-17&quot;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>      + <span class="nv">create_date</span>           <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">force_detach_policies</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>      + <span class="nv">id</span>                    <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">managed_policy_arns</span>   <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">max_session_duration</span>  <span class="o">=</span> 3600
</span><span class='line'>      + <span class="nv">name</span>                  <span class="o">=</span> <span class="s2">&quot;test-lambda-function-role&quot;</span>
</span><span class='line'>      + <span class="nv">name_prefix</span>           <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">path</span>                  <span class="o">=</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>      + <span class="nv">tags_all</span>              <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">unique_id</span>             <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># module.myfunction.aws_iam_role_policy.lambda_execution_policy[0] will be created</span>
</span><span class='line'>  + resource <span class="s2">&quot;aws_iam_role_policy&quot;</span> <span class="s2">&quot;lambda_execution_policy&quot;</span> <span class="o">{</span>
</span><span class='line'>      + <span class="nv">id</span>     <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">name</span>   <span class="o">=</span> <span class="s2">&quot;test-lambda-function-execution-policy&quot;</span>
</span><span class='line'>      + <span class="nv">policy</span> <span class="o">=</span> jsonencode<span class="o">(</span>
</span><span class='line'>            <span class="o">{</span>
</span><span class='line'>              + <span class="nv">Statement</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>                  + <span class="o">{</span>
</span><span class='line'>                      + <span class="nv">Action</span>   <span class="o">=</span> <span class="s2">&quot;sts:GetCallerIdentity&quot;</span>
</span><span class='line'>                      + <span class="nv">Effect</span>   <span class="o">=</span> <span class="s2">&quot;Allow&quot;</span>
</span><span class='line'>                      + <span class="nv">Resource</span> <span class="o">=</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>                      + <span class="nv">Sid</span>      <span class="o">=</span> <span class="s2">&quot;GetCallerIdentity&quot;</span>
</span><span class='line'>                    <span class="o">}</span>,
</span><span class='line'>                  + <span class="o">{</span>
</span><span class='line'>                      + <span class="nv">Action</span>    <span class="o">=</span> <span class="s2">&quot;lambda:GetFunction&quot;</span>
</span><span class='line'>                      + <span class="nv">Condition</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>                          + <span class="nv">StringEquals</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>                              + <span class="s2">&quot;aws:RequestedRegion&quot;</span> <span class="o">=</span> <span class="s2">&quot;eu-west-1&quot;</span>
</span><span class='line'>                            <span class="o">}</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                      + <span class="nv">Effect</span>    <span class="o">=</span> <span class="s2">&quot;Allow&quot;</span>
</span><span class='line'>                      + <span class="nv">Resource</span>  <span class="o">=</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>                      + <span class="nv">Sid</span>       <span class="o">=</span> <span class="s2">&quot;DescribeFunctionsInRegion&quot;</span>
</span><span class='line'>                    <span class="o">}</span>,
</span><span class='line'>                <span class="o">]</span>
</span><span class='line'>              + <span class="nv">Version</span>   <span class="o">=</span> <span class="s2">&quot;2012-10-17&quot;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>      + <span class="nv">role</span>   <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># module.myfunction.aws_iam_role_policy_attachment.lambda_exec_policy[0] will be created</span>
</span><span class='line'>  + resource <span class="s2">&quot;aws_iam_role_policy_attachment&quot;</span> <span class="s2">&quot;lambda_exec_policy&quot;</span> <span class="o">{</span>
</span><span class='line'>      + <span class="nv">id</span>         <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">policy_arn</span> <span class="o">=</span> <span class="s2">&quot;arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole&quot;</span>
</span><span class='line'>      + <span class="nv">role</span>       <span class="o">=</span> <span class="s2">&quot;test-lambda-function-role&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># module.myfunction.aws_lambda_function.lambda[0] will be created</span>
</span><span class='line'>  + resource <span class="s2">&quot;aws_lambda_function&quot;</span> <span class="s2">&quot;lambda&quot;</span> <span class="o">{</span>
</span><span class='line'>      + <span class="nv">architectures</span>                  <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">arn</span>                            <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">filename</span>                       <span class="o">=</span> <span class="s2">&quot;../../modules/lambda-function/lambda-archives/package.zip&quot;</span>
</span><span class='line'>      + <span class="nv">function_name</span>                  <span class="o">=</span> <span class="s2">&quot;test-lambda-function&quot;</span>
</span><span class='line'>      + <span class="nv">handler</span>                        <span class="o">=</span> <span class="s2">&quot;demo.lambda_handler&quot;</span>
</span><span class='line'>      + <span class="nv">id</span>                             <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">invoke_arn</span>                     <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">last_modified</span>                  <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">memory_size</span>                    <span class="o">=</span> 128
</span><span class='line'>      + <span class="nv">package_type</span>                   <span class="o">=</span> <span class="s2">&quot;Zip&quot;</span>
</span><span class='line'>      + <span class="nv">publish</span>                        <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>      + <span class="nv">qualified_arn</span>                  <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">reserved_concurrent_executions</span> <span class="o">=</span> -1
</span><span class='line'>      + <span class="nv">role</span>                           <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">runtime</span>                        <span class="o">=</span> <span class="s2">&quot;python3.8&quot;</span>
</span><span class='line'>      + <span class="nv">signing_job_arn</span>                <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">signing_profile_version_arn</span>    <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">source_code_hash</span>               <span class="o">=</span> <span class="s2">&quot;MI7FD/KHgxRFh7cmPjzxg+w494pmyRGgQIr9Ls8Yups=&quot;</span>
</span><span class='line'>      + <span class="nv">source_code_size</span>               <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">tags_all</span>                       <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">timeout</span>                        <span class="o">=</span> 30
</span><span class='line'>      + <span class="nv">version</span>                        <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      + environment <span class="o">{</span>
</span><span class='line'>          + <span class="nv">variables</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>              + <span class="s2">&quot;FUNCTION_NAME&quot;</span> <span class="o">=</span> <span class="s2">&quot;test-lambda-function&quot;</span>
</span><span class='line'>              + <span class="s2">&quot;PROJECT_NAME&quot;</span>  <span class="o">=</span> <span class="s2">&quot;test&quot;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># module.myfunction.aws_lambda_permission.allow_cloudwatch[0] will be created</span>
</span><span class='line'>  + resource <span class="s2">&quot;aws_lambda_permission&quot;</span> <span class="s2">&quot;allow_cloudwatch&quot;</span> <span class="o">{</span>
</span><span class='line'>      + <span class="nv">action</span>              <span class="o">=</span> <span class="s2">&quot;lambda:InvokeFunction&quot;</span>
</span><span class='line'>      + <span class="nv">function_name</span>       <span class="o">=</span> <span class="s2">&quot;test-lambda-function&quot;</span>
</span><span class='line'>      + <span class="nv">id</span>                  <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">principal</span>           <span class="o">=</span> <span class="s2">&quot;events.amazonaws.com&quot;</span>
</span><span class='line'>      + <span class="nv">source_arn</span>          <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">statement_id</span>        <span class="o">=</span> <span class="s2">&quot;AllowExecutionFromCloudWatch&quot;</span>
</span><span class='line'>      + <span class="nv">statement_id_prefix</span> <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>Plan: <span class="m">8</span> to add, <span class="m">0</span> to change, <span class="m">0</span> to destroy.
</span><span class='line'>
</span><span class='line'>Changes to Outputs:
</span><span class='line'>  + <span class="nv">arn_string</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>      + <span class="o">(</span>known after apply<span class="o">)</span>,
</span><span class='line'>    <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Create Resources</h2>

<p>If you are happy with the plan you can go ahead and run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform apply
</span></code></pre></td></tr></table></div></figure>


<p>Which will create the resources in AWS. Upon creation we should see something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Apply <span class="nb">complete</span>! Resources: <span class="m">0</span> added, <span class="m">1</span> changed, <span class="m">0</span> destroyed.
</span><span class='line'>
</span><span class='line'>Outputs:
</span><span class='line'>
</span><span class='line'><span class="nv">arn_string</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>  <span class="s2">&quot;arn:aws:lambda:eu-west-1:000000000000:function:test-lambda-function&quot;</span>,
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we have our aws cli configured with a profile we can also test our lambda function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws --profile default lambda invoke --function-name <span class="nb">test</span>-lambda-function --cli-binary-format raw-in-base64-out --payload <span class="s1">&#39;{&quot;name&quot;: &quot;ruan&quot;}&#39;</span> out.log
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;StatusCode&quot;</span>: 200,
</span><span class='line'>    <span class="s2">&quot;ExecutedVersion&quot;</span>: <span class="s2">&quot;$LATEST&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the response from the invocation can be seen in the file we defined:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat out.log
</span><span class='line'><span class="o">{</span><span class="s2">&quot;statusCode&quot;</span>: 200, <span class="s2">&quot;body&quot;</span>: <span class="o">{</span><span class="s2">&quot;ResponseMetadata&quot;</span>: <span class="o">{</span><span class="s2">&quot;RequestId&quot;</span>: <span class="s2">&quot;5171x&quot;</span>, <span class="s2">&quot;HTTPStatusCode&quot;</span>: 200, <span class="s2">&quot;HTTPHeaders&quot;</span>: <span class="o">{</span><span class="s2">&quot;date&quot;</span>: <span class="s2">&quot;Thu, 21 Dec 2023 06:34:13 GMT&quot;</span>, <span class="s2">&quot;content-type&quot;</span>: <span class="s2">&quot;application/json&quot;</span>, <span class="s2">&quot;content-length&quot;</span>: <span class="s2">&quot;3517&quot;</span>, <span class="s2">&quot;connection&quot;</span>: <span class="s2">&quot;keep-alive&quot;</span>, <span class="s2">&quot;x-amzn-requestid&quot;</span>: <span class="s2">&quot;5171x&quot;</span><span class="o">}</span>, <span class="s2">&quot;RetryAttempts&quot;</span>: 0<span class="o">}</span>, <span class="s2">&quot;Configuration&quot;</span>: <span class="o">{</span><span class="s2">&quot;FunctionName&quot;</span>: <span class="s2">&quot;test-lambda-function&quot;</span>, <span class="s2">&quot;FunctionArn&quot;</span>: <span class="s2">&quot;arn:aws:lambda:eu-west-1:000000000000:function:test-lambda-function&quot;</span>, <span class="s2">&quot;Runtime&quot;</span>: <span class="s2">&quot;python3.8&quot;</span>, <span class="s2">&quot;Role&quot;</span>: <span class="s2">&quot;arn:aws:iam::000000000000:role/test-lambda-function-role&quot;</span>, <span class="s2">&quot;Handler&quot;</span>: <span class="s2">&quot;demo.lambda_handler&quot;</span>, <span class="s2">&quot;CodeSize&quot;</span>: 401, <span class="s2">&quot;Description&quot;</span>: <span class="s2">&quot;&quot;</span>, <span class="s2">&quot;Timeout&quot;</span>: 30, <span class="s2">&quot;MemorySize&quot;</span>: 128, <span class="s2">&quot;LastModified&quot;</span>: <span class="s2">&quot;2023-12-21T06:26:46.000+0000&quot;</span>, <span class="s2">&quot;CodeSha256&quot;</span>: <span class="s2">&quot;x&quot;</span>, <span class="s2">&quot;Version&quot;</span>: <span class="s2">&quot;$LATEST&quot;</span>, <span class="s2">&quot;Environment&quot;</span>: <span class="o">{</span><span class="s2">&quot;Variables&quot;</span>: <span class="o">{</span><span class="s2">&quot;FUNCTION_NAME&quot;</span>: <span class="s2">&quot;test-lambda-function&quot;</span>, <span class="s2">&quot;PROJECT_NAME&quot;</span>: <span class="s2">&quot;test&quot;</span><span class="o">}}</span>, <span class="s2">&quot;TracingConfig&quot;</span>: <span class="o">{</span><span class="s2">&quot;Mode&quot;</span>: <span class="s2">&quot;PassThrough&quot;</span><span class="o">}</span>, <span class="s2">&quot;RevisionId&quot;</span>: <span class="s2">&quot;7faex&quot;</span>, <span class="s2">&quot;State&quot;</span>: <span class="s2">&quot;Active&quot;</span>, <span class="s2">&quot;LastUpdateStatus&quot;</span>: <span class="s2">&quot;Successful&quot;</span>, <span class="s2">&quot;PackageType&quot;</span>: <span class="s2">&quot;Zip&quot;</span>, <span class="s2">&quot;Architectures&quot;</span>: <span class="o">[</span><span class="s2">&quot;x86_64&quot;</span><span class="o">]</span>, <span class="s2">&quot;EphemeralStorage&quot;</span>: <span class="o">{</span><span class="s2">&quot;Size&quot;</span>: 512<span class="o">}</span>, <span class="s2">&quot;SnapStart&quot;</span>: <span class="o">{</span><span class="s2">&quot;ApplyOn&quot;</span>: <span class="s2">&quot;None&quot;</span>, <span class="s2">&quot;OptimizationStatus&quot;</span>: <span class="s2">&quot;Off&quot;</span><span class="o">}</span>, <span class="s2">&quot;RuntimeVersionConfig&quot;</span>: <span class="o">{</span><span class="s2">&quot;RuntimeVersionArn&quot;</span>: <span class="s2">&quot;arn:aws:lambda:eu-west-1::runtime:x&quot;</span><span class="o">}}</span>, <span class="s2">&quot;Code&quot;</span>: <span class="o">{</span><span class="s2">&quot;RepositoryType&quot;</span>: <span class="s2">&quot;S3&quot;</span>, <span class="s2">&quot;Location&quot;</span>: <span class="s2">&quot;https://awslambda-eu-west-1-tasks.s3.eu-west-1.amazonaws.com/snapshots/x/test-lambda-function-x?queryparameters&quot;</span><span class="o">}}}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Updating Lambda Function Code</h2>

<p>If we want to redeploy our function with updated code, we can change the content of <code>functions/demo.py</code> and then run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform apply
</span></code></pre></td></tr></table></div></figure>


<p>Since our terraform code defined that if the source has of the function code changes, it will trigger a redeploy, and from the computed plan we can see that it will redeploy our function code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
</span><span class='line'>  ~ update in-place
</span><span class='line'>
</span><span class='line'>Terraform will perform the following actions:
</span><span class='line'>
</span><span class='line'>  <span class="c"># module.myfunction.aws_lambda_function.lambda[0] will be updated in-place</span>
</span><span class='line'>  ~ resource <span class="s2">&quot;aws_lambda_function&quot;</span> <span class="s2">&quot;lambda&quot;</span> <span class="o">{</span>
</span><span class='line'>        <span class="nv">id</span>                             <span class="o">=</span> <span class="s2">&quot;test-lambda-function&quot;</span>
</span><span class='line'>      ~ <span class="nv">last_modified</span>                  <span class="o">=</span> <span class="s2">&quot;2023-12-21T06:26:46.000+0000&quot;</span> -&gt; <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      ~ <span class="nv">source_code_hash</span>               <span class="o">=</span> <span class="s2">&quot;8TLrm4GmTrfAxwfElmIjws1Vf9UDZ6k2w1+VEONJaCQ=&quot;</span> -&gt; <span class="s2">&quot;RIQ62KCcjlcHh5lLCOlrkB7GioBpLY1Y5vN4UZGyN+c=&quot;</span>
</span><span class='line'>        <span class="nv">tags</span>                           <span class="o">=</span> <span class="o">{}</span>
</span><span class='line'>        <span class="c"># (18 unchanged attributes hidden)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># (3 unchanged blocks hidden)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>Plan: <span class="m">0</span> to add, <span class="m">1</span> to change, <span class="m">0</span> to destroy.
</span><span class='line'>
</span><span class='line'>Do you want to perform these actions?
</span><span class='line'>  Terraform will perform the actions described above.
</span><span class='line'>  Only <span class="s1">&#39;yes&#39;</span> will be accepted to approve.
</span><span class='line'>
</span><span class='line'>  Enter a value:
</span></code></pre></td></tr></table></div></figure>


<p>After entering &ldquo;yes&rdquo; we will update our function code</p>

<h2>Discover AWS Console</h2>

<p>If we logon to the AWS Console and head to Lambda we can inspect our function code:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker/assets/567298/2326b074-fa5b-443c-8715-59451293ccb2" alt="image" /></p>

<p>If we manually want to trigger the function, select &ldquo;Test&rdquo;, then enter the &ldquo;Event name&rdquo; with something like &ldquo;testing&rdquo; then click &ldquo;Test&rdquo;:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker/assets/567298/76bcde33-185f-47ed-a70c-4d967df80e92" alt="image" /></p>

<p>If we follow the CloudWatch log link we can view the logs in CloudWatch:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker/assets/567298/f5483602-3144-48ce-98bf-d50f625cdd92" alt="image" /></p>

<h2>Destroy Infrastructure</h2>

<p>If you followed along and would like to destroy the created infrastructure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform destroy
</span></code></pre></td></tr></table></div></figure>


<h2>Resources</h2>

<p>Terraform Examples</p>

<ul>
<li><a href="https://github.com/ruanbekker/terraformfiles/tree/master/modules/aws-lambda-function">https://github.com/ruanbekker/terraformfiles/tree/master/modules/aws-lambda-function</a></li>
</ul>


<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>

<ul>
<li>Linktree: <a href="https://go.ruan.dev/links">https://go.ruan.dev/links</a></li>
<li>Patreon: <a href="https://go.ruan.dev/patreon">https://go.ruan.dev/patreon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use the MySQL Terraform Provider]]></title>
    <link href="https://blog.ruanbekker.com/blog/2023/07/15/how-to-use-the-mysql-terraform-provider/"/>
    <updated>2023-07-15T20:55:23-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2023/07/15/how-to-use-the-mysql-terraform-provider</id>
    <content type="html"><![CDATA[<p>In this tutorial we will provision a MySQL Server with Docker and then use Terraform to provision MySQL Users, Database Schemas and MySQL Grants with the MySQL Terraform Provider.</p>

<h2>About</h2>

<p>Terraform is super powerful and can do a lot of things. And it shines when it provisions Infrastructure. So in a scenario where we use Terraform to provision RDS MySQL Database Instances, we might still want to provision extra MySQL Users, or Database Schemas and the respective MySQL Grants.</p>

<p>Usually you will logon to the database and create them manually with sql syntax. But in this tutorial we want to make use of Docker to provision our MySQL Server and we would like to make use of Terraform to provision the MySQL Database Schemas, Grants and Users.</p>

<p>Instead of using AWS RDS, I will be provisioning a MySQL Server on Docker so that we can keep the costs free, for those who are following along.</p>

<p>We will also go through the steps on how to rotate the database password that we will be provisioning for our user.</p>

<h2>MySQL Server</h2>

<p>First we will provision a MySQL Server on Docker Containers, I have a <code>docker-compose.yaml</code> which is available in my <a href="https://github.com/ruanbekker/quick-starts/blob/main/docker/mysql/docker-compose.yaml">quick-starts</a> github repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&quot;3.8&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">mysql</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mysql:8.0</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mysql</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">3306:3306</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_DATABASE=sample</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_ROOT_PASSWORD=rootpassword</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you have saved that in your current working directory, you can start the container with docker compose:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-compose up -d
</span></code></pre></td></tr></table></div></figure>


<p>You can test the mysql container by logging onto the mysql server with the correct auth:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker <span class="nb">exec</span> -it mysql mysql -u root -prootpassword -e <span class="s1">&#39;show databases;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This should be more or less the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">+</span><span class="c1">--------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="k">Database</span>           <span class="o">|</span>
</span><span class='line'><span class="o">+</span><span class="c1">--------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">information_schema</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">mysql</span>              <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">performance_schema</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">sample</span>             <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">sys</span>                <span class="o">|</span>
</span><span class='line'><span class="o">+</span><span class="c1">--------------------+</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Terraform</h2>

<p>If you don&rsquo;t have Terraform installed, you can install it from their <a href="https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli">documentation</a>.</p>

<p>If you want the source code of this example, its available in my <a href="https://github.com/ruanbekker/quick-starts/tree/main/terraform/mysql/petoju-provider">terraform-mysql/petoju-provider</a> repository. Which you can clone and jump into the <code>terraform/mysql/petoju-provider</code> directory.</p>

<p>First we will define the <code>providers.tf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform <span class="o">{</span>
</span><span class='line'>  required_providers <span class="o">{</span>
</span><span class='line'>    <span class="nv">mysql</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="nb">source</span> <span class="o">=</span> <span class="s2">&quot;petoju/mysql&quot;</span>
</span><span class='line'>      <span class="nv">version</span> <span class="o">=</span> <span class="s2">&quot;3.0.37&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>provider <span class="s2">&quot;mysql&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">alias</span>    <span class="o">=</span> <span class="s2">&quot;local&quot;</span>
</span><span class='line'>  <span class="nv">endpoint</span> <span class="o">=</span> <span class="s2">&quot;127.0.0.1:3306&quot;</span>
</span><span class='line'>  <span class="nv">username</span> <span class="o">=</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="nv">password</span> <span class="o">=</span> <span class="s2">&quot;rootpassword&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then the <code>main.tf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>resource <span class="s2">&quot;random_password&quot;</span> <span class="s2">&quot;user_password&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">length</span>           <span class="o">=</span> 24
</span><span class='line'>  <span class="nv">special</span>          <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nb">  </span><span class="nv">min_special</span>      <span class="o">=</span> 2
</span><span class='line'>  <span class="nv">override_special</span> <span class="o">=</span> <span class="s2">&quot;!#$%^&amp;*()-_=+[]{}&lt;&gt;:?&quot;</span>
</span><span class='line'>  <span class="nv">keepers</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">password_version</span> <span class="o">=</span> var.password_version
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;mysql_database&quot;</span> <span class="s2">&quot;user_db&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">provider</span> <span class="o">=</span> mysql.local
</span><span class='line'>  <span class="nv">name</span> <span class="o">=</span> var.database_name
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;mysql_user&quot;</span> <span class="s2">&quot;user_id&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">provider</span> <span class="o">=</span> mysql.local
</span><span class='line'>  <span class="nv">user</span> <span class="o">=</span> var.database_username
</span><span class='line'>  <span class="nv">plaintext_password</span> <span class="o">=</span> random_password.user_password.result
</span><span class='line'>  <span class="nv">host</span> <span class="o">=</span> <span class="s2">&quot;%&quot;</span>
</span><span class='line'>  <span class="nv">tls_option</span> <span class="o">=</span> <span class="s2">&quot;NONE&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;mysql_grant&quot;</span> <span class="s2">&quot;user_id&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">provider</span> <span class="o">=</span> mysql.local
</span><span class='line'>  <span class="nv">user</span> <span class="o">=</span> var.database_username
</span><span class='line'>  <span class="nv">host</span> <span class="o">=</span> <span class="s2">&quot;%&quot;</span>
</span><span class='line'>  <span class="nv">database</span> <span class="o">=</span> var.database_name
</span><span class='line'>  <span class="nv">privileges</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;SELECT&quot;</span>, <span class="s2">&quot;UPDATE&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="nv">depends_on</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    mysql_user.user_id
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then the <code>variables.tf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>variable <span class="s2">&quot;database_name&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">description</span> <span class="o">=</span> <span class="s2">&quot;The name of the database that you want created.&quot;</span>
</span><span class='line'>  <span class="nb">type</span>        <span class="o">=</span> string
</span><span class='line'>  <span class="nv">default</span>     <span class="o">=</span> null
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>variable <span class="s2">&quot;database_username&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">description</span> <span class="o">=</span> <span class="s2">&quot;The name of the database username that you want created.&quot;</span>
</span><span class='line'>  <span class="nb">type</span>        <span class="o">=</span> string
</span><span class='line'>  <span class="nv">default</span>     <span class="o">=</span> null
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>variable <span class="s2">&quot;password_version&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">description</span> <span class="o">=</span> <span class="s2">&quot;The password rotates when this value gets updated.&quot;</span>
</span><span class='line'>  <span class="nb">type</span>        <span class="o">=</span> number
</span><span class='line'>  <span class="nv">default</span>     <span class="o">=</span> 0
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then our <code>outputs.tf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>output <span class="s2">&quot;user&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">value</span> <span class="o">=</span> mysql_user.user_id.user
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>output <span class="s2">&quot;password&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">sensitive</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nb">  </span><span class="nv">value</span> <span class="o">=</span> random_password.user_password.result
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our <code>terraform.tfvars</code> that defines the values of our variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">database_name</span>     <span class="o">=</span> <span class="s2">&quot;foobar&quot;</span>
</span><span class='line'><span class="nv">database_username</span> <span class="o">=</span> <span class="s2">&quot;ruanb&quot;</span>
</span><span class='line'><span class="nv">password_version</span>  <span class="o">=</span> 0
</span></code></pre></td></tr></table></div></figure>


<p>Now we are ready to run our terraform code, which will ultimately create a database, user and grants. Outputs the encrypted string of your password which was encrypted with your <code>keybase_username</code>.</p>

<p>Initialise Terraform:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform init
</span></code></pre></td></tr></table></div></figure>


<p>Run the plan to see what terraform wants to provision:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform plan
</span></code></pre></td></tr></table></div></figure>


<p>And we can see the following resources will be created:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
</span><span class='line'>  + create
</span><span class='line'>
</span><span class='line'>Terraform will perform the following actions:
</span><span class='line'>
</span><span class='line'>  <span class="c"># mysql_database.user_db will be created</span>
</span><span class='line'>  + resource <span class="s2">&quot;mysql_database&quot;</span> <span class="s2">&quot;user_db&quot;</span> <span class="o">{</span>
</span><span class='line'>      + <span class="nv">default_character_set</span> <span class="o">=</span> <span class="s2">&quot;utf8mb4&quot;</span>
</span><span class='line'>      + <span class="nv">default_collation</span>     <span class="o">=</span> <span class="s2">&quot;utf8mb4_general_ci&quot;</span>
</span><span class='line'>      + <span class="nv">id</span>                    <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">name</span>                  <span class="o">=</span> <span class="s2">&quot;foobar&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># mysql_grant.user_id will be created</span>
</span><span class='line'>  + resource <span class="s2">&quot;mysql_grant&quot;</span> <span class="s2">&quot;user_id&quot;</span> <span class="o">{</span>
</span><span class='line'>      + <span class="nv">database</span>   <span class="o">=</span> <span class="s2">&quot;foobar&quot;</span>
</span><span class='line'>      + <span class="nv">grant</span>      <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>      + <span class="nv">host</span>       <span class="o">=</span> <span class="s2">&quot;%&quot;</span>
</span><span class='line'>      + <span class="nv">id</span>         <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">privileges</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>          + <span class="s2">&quot;SELECT&quot;</span>,
</span><span class='line'>          + <span class="s2">&quot;UPDATE&quot;</span>,
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>      + <span class="nv">table</span>      <span class="o">=</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>      + <span class="nv">tls_option</span> <span class="o">=</span> <span class="s2">&quot;NONE&quot;</span>
</span><span class='line'>      + <span class="nv">user</span>       <span class="o">=</span> <span class="s2">&quot;ruanb&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># mysql_user.user_id will be created</span>
</span><span class='line'>  + resource <span class="s2">&quot;mysql_user&quot;</span> <span class="s2">&quot;user_id&quot;</span> <span class="o">{</span>
</span><span class='line'>      + <span class="nv">host</span>               <span class="o">=</span> <span class="s2">&quot;%&quot;</span>
</span><span class='line'>      + <span class="nv">id</span>                 <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">plaintext_password</span> <span class="o">=</span> <span class="o">(</span>sensitive value<span class="o">)</span>
</span><span class='line'>      + <span class="nv">tls_option</span>         <span class="o">=</span> <span class="s2">&quot;NONE&quot;</span>
</span><span class='line'>      + <span class="nv">user</span>               <span class="o">=</span> <span class="s2">&quot;ruanb&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># random_password.user_password will be created</span>
</span><span class='line'>  + resource <span class="s2">&quot;random_password&quot;</span> <span class="s2">&quot;user_password&quot;</span> <span class="o">{</span>
</span><span class='line'>      + <span class="nv">bcrypt_hash</span>      <span class="o">=</span> <span class="o">(</span>sensitive value<span class="o">)</span>
</span><span class='line'>      + <span class="nv">id</span>               <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">keepers</span>          <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>          + <span class="s2">&quot;password_version&quot;</span> <span class="o">=</span> <span class="s2">&quot;0&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      + <span class="nv">length</span>           <span class="o">=</span> 24
</span><span class='line'>      + <span class="nv">lower</span>            <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>      + <span class="nv">min_lower</span>        <span class="o">=</span> 0
</span><span class='line'>      + <span class="nv">min_numeric</span>      <span class="o">=</span> 0
</span><span class='line'>      + <span class="nv">min_special</span>      <span class="o">=</span> 2
</span><span class='line'>      + <span class="nv">min_upper</span>        <span class="o">=</span> 0
</span><span class='line'>      + <span class="nv">number</span>           <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>      + <span class="nv">numeric</span>          <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>      + <span class="nv">override_special</span> <span class="o">=</span> <span class="s2">&quot;!#$%^&amp;*()-_=+[]{}&lt;&gt;:?&quot;</span>
</span><span class='line'>      + <span class="nv">result</span>           <span class="o">=</span> <span class="o">(</span>sensitive value<span class="o">)</span>
</span><span class='line'>      + <span class="nv">special</span>          <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>      + <span class="nv">upper</span>            <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>Plan: <span class="m">4</span> to add, <span class="m">0</span> to change, <span class="m">0</span> to destroy.
</span><span class='line'>
</span><span class='line'>Changes to Outputs:
</span><span class='line'>  + <span class="nv">password</span> <span class="o">=</span> <span class="o">(</span>sensitive value<span class="o">)</span>
</span><span class='line'>  + <span class="nv">user</span>     <span class="o">=</span> <span class="s2">&quot;ruanb&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the apply which will create the database, the user, sets the password and applies the grants:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform apply
</span></code></pre></td></tr></table></div></figure>


<p>Then our returned output should show something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Apply <span class="nb">complete</span>! Resources: <span class="m">4</span> added, <span class="m">0</span> changed, <span class="m">0</span> destroyed.
</span><span class='line'>
</span><span class='line'>Outputs:
</span><span class='line'>
</span><span class='line'><span class="nv">password</span> <span class="o">=</span> &lt;sensitive&gt;
</span><span class='line'><span class="nv">user</span> <span class="o">=</span> <span class="s2">&quot;ruanb&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As our password is set as sensitive, we can access the value with <code>terraform output -raw password</code>, let&rsquo;s assign the password to a variable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">DBPASS</span><span class="o">=</span><span class="k">$(</span>terraform output -raw password<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we can exec into the mysql container and logon to the mysql server with our new credentials:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker <span class="nb">exec</span> -it mysql mysql -u ruanb -p<span class="nv">$DBPASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we can see we are logged onto the mysql server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Welcome to the MySQL monitor.  Commands end with <span class="p">;</span> or <span class="se">\g</span>.
</span><span class='line'>Your MySQL connection id is 14
</span><span class='line'>Server version: 8.0.33 MySQL Community Server - GPL
</span><span class='line'>
</span><span class='line'>mysql&gt;
</span></code></pre></td></tr></table></div></figure>


<p>If we run <code>show databases;</code> we should see the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">show</span> <span class="n">databases</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span><span class="c1">--------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="k">Database</span>           <span class="o">|</span>
</span><span class='line'><span class="o">+</span><span class="c1">--------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">foobar</span>             <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">information_schema</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">performance_schema</span> <span class="o">|</span>
</span><span class='line'><span class="o">+</span><span class="c1">--------------------+</span>
</span><span class='line'><span class="mi">3</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">03</span> <span class="n">sec</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we want to rotate the mysql password for the user, we can update the <code>password_version</code> variable either in our <code>terraform.tfvars</code> or via the cli. Let&rsquo;s pass the variable in the cli and do a <code>terraform plan</code> to verify the changes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform plan -var <span class="nv">password_version</span><span class="o">=</span>1
</span></code></pre></td></tr></table></div></figure>


<p>And due to our value for the random resource keepers parameter being updated, it will trigger the value of our password to be changed, and that will let terraform update our mysql user&rsquo;s password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
</span><span class='line'>  ~ update in-place
</span><span class='line'>-/+ destroy and <span class="k">then</span> create replacement
</span><span class='line'>
</span><span class='line'>Terraform will perform the following actions:
</span><span class='line'>
</span><span class='line'>  <span class="c"># mysql_user.user_id will be updated in-place</span>
</span><span class='line'>  ~ resource <span class="s2">&quot;mysql_user&quot;</span> <span class="s2">&quot;user_id&quot;</span> <span class="o">{</span>
</span><span class='line'>        <span class="nv">id</span>                 <span class="o">=</span> <span class="s2">&quot;ruanb@%&quot;</span>
</span><span class='line'>      ~ <span class="nv">plaintext_password</span> <span class="o">=</span> <span class="o">(</span>sensitive value<span class="o">)</span>
</span><span class='line'>        <span class="c"># (5 unchanged attributes hidden)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># random_password.user_password must be replaced</span>
</span><span class='line'>-/+ resource <span class="s2">&quot;random_password&quot;</span> <span class="s2">&quot;user_password&quot;</span> <span class="o">{</span>
</span><span class='line'>      ~ <span class="nv">bcrypt_hash</span>      <span class="o">=</span> <span class="o">(</span>sensitive value<span class="o">)</span>
</span><span class='line'>      ~ <span class="nv">id</span>               <span class="o">=</span> <span class="s2">&quot;none&quot;</span> -&gt; <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      ~ <span class="nv">keepers</span>          <span class="o">=</span> <span class="o">{</span> <span class="c"># forces replacement</span>
</span><span class='line'>          ~ <span class="s2">&quot;password_version&quot;</span> <span class="o">=</span> <span class="s2">&quot;0&quot;</span> -&gt; <span class="s2">&quot;1&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      ~ <span class="nv">result</span>           <span class="o">=</span> <span class="o">(</span>sensitive value<span class="o">)</span>
</span><span class='line'>        <span class="c"># (11 unchanged attributes hidden)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>Plan: <span class="m">1</span> to add, <span class="m">1</span> to change, <span class="m">1</span> to destroy.
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s go ahead by updating our password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform apply -var <span class="nv">password_version</span><span class="o">=</span><span class="m">1</span> -auto-approve
</span></code></pre></td></tr></table></div></figure>


<p>To validate that the password has changed, we can try to logon to mysql by using the password variable that was created initially:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker <span class="nb">exec</span> -it mysql mysql -u ruanb -p<span class="nv">$DBPASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>And as you can see authentication failed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mysql: <span class="o">[</span>Warning<span class="o">]</span> Using a password on the <span class="nb">command </span>line interface can be insecure.
</span><span class='line'>ERROR <span class="m">1045</span> <span class="o">(</span>28000<span class="o">)</span>: Access denied <span class="k">for</span> user <span class="s1">&#39;ruanb&#39;</span>@<span class="s1">&#39;localhost&#39;</span> <span class="o">(</span>using password: YES<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Set the new password to the variable again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">DBPASS</span><span class="o">=</span><span class="k">$(</span>terraform output -raw password<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then try to logon again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker <span class="nb">exec</span> -it mysql mysql -u ruanb -p<span class="nv">$DBPASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we can see we are logged on again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Welcome to the MySQL monitor.  Commands end with <span class="p">;</span> or <span class="se">\g</span>.
</span><span class='line'>Your MySQL connection id is 22
</span><span class='line'>Server version: 8.0.33 MySQL Community Server - GPL
</span><span class='line'>
</span><span class='line'>mysql&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>Resources</h2>

<p>The terraform mysql provider:
- <a href="https://registry.terraform.io/providers/petoju/mysql/latest/docs">https://registry.terraform.io/providers/petoju/mysql/latest/docs</a></p>

<p>The quick-starts repository:
- <a href="https://github.com/ruanbekker/quick-starts">https://github.com/ruanbekker/quick-starts</a></p>

<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>

<ul>
<li>Linktree: <a href="https://go.ruan.dev/links">https://go.ruan.dev/links</a></li>
<li>Patreon: <a href="https://go.ruan.dev/patreon">https://go.ruan.dev/patreon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use the AWS Terraform Provider]]></title>
    <link href="https://blog.ruanbekker.com/blog/2023/07/15/how-to-use-the-aws-terraform-provider/"/>
    <updated>2023-07-15T20:01:13-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2023/07/15/how-to-use-the-aws-terraform-provider</id>
    <content type="html"><![CDATA[<p>In this post we will be using the AWS Terraform provider, from how to install Terraform, create a AWS IAM User, configure the AWS Provider and deploy a EC2 instance using Terraform.</p>

<h2>AWS IAM User</h2>

<p>In order to authenticate against AWS’s APIs, we need to create a AWS IAM User and create Access Keys for Terraform to use to authenticate.</p>

<p>From <a href="https://aws.amazon.com/">https://aws.amazon.com/</a> logon to your account, then search for IAM:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/c53d15d3-1af2-4e15-aafb-229cc4274bf5" alt="aws-iam-search-result" /></p>

<p>Select IAM, then select “Users” on the left hand side and select “Create User”, then provide the username for your AWS IAM User:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/35f74a94-98d3-44c4-9651-a504780e5a6e" alt="aws-iam-user-creation-wizard" /></p>

<p>Now we need to assign permissions to our new AWS IAM User. For this scenario I will be assigning a IAM Policy directly to the user and I will be selecting the “AdministratorAccess” policy. Keep in mind that this allows admin access to your whole AWS account:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/779f2dac-0da9-4751-8e89-2ff33c088ae8" alt="permissions-for-your-aws-iam-user" /></p>

<p>Once you select the policy, select “Next” and select “Create User”. Once the user has been created, select “Users” on the left hand side, search for your user that we created, in my case “medium-terraform”.</p>

<p>Select the user and click on “Security credentials”. If you scroll down to the “Access keys” section, you will notice we don’t have any access keys for this user:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/45b5eb1f-999f-4e81-b439-9e8cd90f83a3" alt="aws-iam-access-keys" /></p>

<p>In order to allow Terraform access to our AWS Account, we need to create access keys that Terraform will use, and because we assigned full admin access to the user, Terraform will be able to manage resources in our AWS Account.</p>

<p>Click “Create access key”, then select the “CLI” option and select the confirmation at the bottom:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/22b13879-6256-4de8-ab5f-aecece3be432" alt="aws-iam-access-keys-wizard" /></p>

<p>Select “Next” and then select “Create access key”. I am providing a screenshot of the Access Key and Secret Access Key that has been provided, but by the time this post has been published, the key will be deleted.</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/a7a4124f-dc9c-4700-b0ed-d21d7df4fa6c" alt="retrieve-aws-iam-access-keys" /></p>

<p>Store your Access Key and Secret Access Key in a secure place and treat this like your passwords. If someone gets access to these keys they can manage your whole AWS Account.</p>

<p>I will be using the <a href="https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html">AWS CLI</a> to configure my Access Key and Secret Access Key, as I will configure Terraform later to read my Access Keys from the Credential Provider config.</p>

<p>First we need to configure the AWS CLI by passing the profile name, which I have chosen <code>medium</code> for this demonstration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>aws --profile medium configure
</span></code></pre></td></tr></table></div></figure>


<p>We will be asked to provide the access key, secret access key, aws region and the default output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>AWS Access Key ID <span class="o">[</span>None<span class="o">]</span>: AKIATPRT2G4SGXLAC3HJ
</span><span class='line'>AWS Secret Access Key <span class="o">[</span>None<span class="o">]</span>: KODnR<span class="o">[</span>............<span class="o">]</span>nYTYbd
</span><span class='line'>Default region name <span class="o">[</span>None<span class="o">]</span>: eu-west-1
</span><span class='line'>Default output format <span class="o">[</span>None<span class="o">]</span>: json
</span></code></pre></td></tr></table></div></figure>


<p>To verify if everything works as expected we can use the following command to verify:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>aws --profile medium sts get-caller-identity
</span></code></pre></td></tr></table></div></figure>


<p>The response should look something similar to the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;UserId&quot;</span><span class="p">:</span> <span class="s2">&quot;AIDATPRT2G4SOAO5Y7S5Z&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;Account&quot;</span><span class="p">:</span> <span class="s2">&quot;000000000000&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;Arn&quot;</span><span class="p">:</span> <span class="s2">&quot;arn:aws:iam::000000000000:user/medium-terraform&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Terraform</h2>

<p>Now that we have our AWS IAM User configured, we can install Terraform, if you don’t have Terraform installed yet, you can follow their <a href="https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli">Installation Documentation</a>.</p>

<p>Once you have Terraform installed, we can setup our workspace where we will ultimately deploy a EC2 instance, but before we get there we need to create our project directory and change to that directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir ~/terraform-demo
</span><span class='line'><span class="nb">cd</span> ~/terraform-demo
</span></code></pre></td></tr></table></div></figure>


<p>Then we will create 4 files with <code>.tf</code> extensions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>touch main.tf
</span><span class='line'>touch outputs.tf
</span><span class='line'>touch providers.tf
</span><span class='line'>touch variables.tf
</span></code></pre></td></tr></table></div></figure>


<p>We will define our Terraform definitions on how we want our desired infrastructure to look like. We will get to the content in the files soon.</p>

<p>I personally love Terraform’s documentation as they are rich in examples and really easy to use.</p>

<p>Head over to the <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs">Terraform AWS Provider</a> documentation and you scroll a bit down, you can see the <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs#authentication-and-configuration">Authentication and Configuration</a> section where they outline the order in how Terraform will look for credentials and we will be making use of the shared credentials file as that is where our access key and secret access key is stored.</p>

<p>If you look at the top right corner of the Terraform AWS Provider documentation, they show you how to use the AWS Provider:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/03a55c32-bb1c-4f48-a441-c09918c824db" alt="terraform-aws-provider-docs" /></p>

<p>We can copy that code snippet and paste it into our <code>providers.tf</code> file and configure the aws provider section with the <code>medium</code> profile that we’ve created earlier.</p>

<p>This will tell Terraform where to look for credentials in order to authenticate with AWS.</p>

<p>Open <code>providers.tf</code> with your editor of choice:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform <span class="o">{</span>
</span><span class='line'>  required_providers <span class="o">{</span>
</span><span class='line'>    <span class="nv">aws</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="nb">source</span> <span class="o">=</span> <span class="s2">&quot;hashicorp/aws&quot;</span>
</span><span class='line'>      <span class="nv">version</span> <span class="o">=</span> <span class="s2">&quot;5.8.0&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>provider <span class="s2">&quot;aws&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">shared_credentials_files</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;~/.aws/credentials&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="nv">profile</span>                  <span class="o">=</span> <span class="s2">&quot;medium&quot;</span>
</span><span class='line'>  <span class="nv">region</span>                   <span class="o">=</span> <span class="s2">&quot;eu-west-1&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we can open <code>main.tf</code> and populate the following to define the EC2 instance that we want to provision:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>data <span class="s2">&quot;aws_ami&quot;</span> <span class="s2">&quot;latest_ubuntu&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">most_recent</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nb">  </span><span class="nv">owners</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;099720109477&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  filter <span class="o">{</span>
</span><span class='line'>    <span class="nv">name</span>   <span class="o">=</span> <span class="s2">&quot;name&quot;</span>
</span><span class='line'>    <span class="nv">values</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-*-server-*&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  filter <span class="o">{</span>
</span><span class='line'>    <span class="nv">name</span>   <span class="o">=</span> <span class="s2">&quot;architecture&quot;</span>
</span><span class='line'>    <span class="nv">values</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;x86_64&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;aws_instance&quot;</span> <span class="s2">&quot;ec2&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">ami</span>           <span class="o">=</span> data.aws_ami.latest_ubuntu.id
</span><span class='line'>  <span class="nv">instance_type</span> <span class="o">=</span> var.instance_type
</span><span class='line'>  <span class="nv">tags</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">Name</span> <span class="o">=</span> <span class="s2">&quot;${var.instance_name}-ec2-instance&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above example we are filtering for the latest Ubuntu 22.04 64bit AMI then we are defining a EC2 instance and specifying the AMI ID that we filtered from our data source.</p>

<p>Note that we haven’t specified a SSH Keypair, as we are just focusing on how to provision a EC2 instance.</p>

<p>As you can see we are also referencing variables, which we need to define in <code>variables.tf</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>variable <span class="s2">&quot;instance_name&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">description</span> <span class="o">=</span> <span class="s2">&quot;Instance Name for EC2.&quot;</span>
</span><span class='line'>  <span class="nb">type</span>        <span class="o">=</span> string
</span><span class='line'>  <span class="nv">default</span>     <span class="o">=</span> <span class="s2">&quot;test&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>variable <span class="s2">&quot;instance_type&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">description</span> <span class="o">=</span> <span class="s2">&quot;Instance Type for EC2.&quot;</span>
</span><span class='line'>  <span class="nb">type</span>        <span class="o">=</span> string
</span><span class='line'>  <span class="nv">default</span>     <span class="o">=</span> <span class="s2">&quot;t2.micro&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then lastly we need to define our <code>outputs.tf</code> which will be used to output the instance id and ip address:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>output <span class="s2">&quot;instance_id&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">value</span> <span class="o">=</span> aws_instance.ec2.id
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>output <span class="s2">&quot;ip&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">value</span> <span class="o">=</span> aws_instance.ec2.public_ip
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy our EC2 with Terraform</h2>

<p>Now that our infrastructure has been defined as code, we can first initialise terraform which will initialise the backend and download all the providers that has been defined:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform init
</span></code></pre></td></tr></table></div></figure>


<p>Once that has done we can run a “plan” which will show us what Terraform will deploy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform plan
</span></code></pre></td></tr></table></div></figure>


<p>Now terraform will show us the difference in what we have defined, and what is actually in AWS, as we know its a new account with zero infrastructure, the diff should show us that it needs to create a EC2 instance.</p>

<p>The response from the <code>terraform plan</code> shows us the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
</span><span class='line'>  + create
</span><span class='line'>
</span><span class='line'>Terraform will perform the following actions:
</span><span class='line'>
</span><span class='line'>  <span class="c"># aws_instance.ec2 will be created</span>
</span><span class='line'>  + resource <span class="s2">&quot;aws_instance&quot;</span> <span class="s2">&quot;ec2&quot;</span> <span class="o">{</span>
</span><span class='line'>      + <span class="nv">ami</span>                                  <span class="o">=</span> <span class="s2">&quot;ami-0f56955469757e5aa&quot;</span>
</span><span class='line'>      + <span class="nv">arn</span>                                  <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">id</span>                                   <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">instance_type</span>                        <span class="o">=</span> <span class="s2">&quot;t2.micro&quot;</span>
</span><span class='line'>      + <span class="nv">key_name</span>                             <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">private_ip</span>                           <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">public_ip</span>                            <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">security_groups</span>                      <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">subnet_id</span>                            <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">tags</span>                                 <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>          + <span class="s2">&quot;Name&quot;</span> <span class="o">=</span> <span class="s2">&quot;test-ec2-instance&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      + <span class="nv">tags_all</span>                             <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>          + <span class="s2">&quot;Name&quot;</span> <span class="o">=</span> <span class="s2">&quot;test-ec2-instance&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      + <span class="nv">vpc_security_group_ids</span>               <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>Plan: <span class="m">1</span> to add, <span class="m">0</span> to change, <span class="m">0</span> to destroy.
</span><span class='line'>
</span><span class='line'>Changes to Outputs:
</span><span class='line'>  + <span class="nv">instance_id</span> <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>  + <span class="nv">ip</span>          <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see terraform has looked up the AMI ID using the data source, and we can see that terraform will provision 1 resource which is a EC2 instance. Once we hare happy with the plan, we can run a apply which will show us the same but this time prompt us if we want to proceed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Do you want to perform these actions?
</span><span class='line'>  Terraform will perform the actions described above.
</span><span class='line'>  Only <span class="s1">&#39;yes&#39;</span> will be accepted to approve.
</span><span class='line'>
</span><span class='line'>  Enter a value: yes
</span><span class='line'>
</span><span class='line'>aws_instance.ec2: Creating...
</span><span class='line'>aws_instance.ec2: Still creating... <span class="o">[</span>10s elapsed<span class="o">]</span>
</span><span class='line'>aws_instance.ec2: Still creating... <span class="o">[</span>20s elapsed<span class="o">]</span>
</span><span class='line'>aws_instance.ec2: Still creating... <span class="o">[</span>30s elapsed<span class="o">]</span>
</span><span class='line'>aws_instance.ec2: Creation <span class="nb">complete </span>after 35s <span class="o">[</span><span class="nv">id</span><span class="o">=</span>i-005c08b899229fff0<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Apply <span class="nb">complete</span>! Resources: <span class="m">1</span> added, <span class="m">0</span> changed, <span class="m">0</span> destroyed.
</span><span class='line'>
</span><span class='line'>Outputs:
</span><span class='line'>
</span><span class='line'><span class="nv">instance_id</span> <span class="o">=</span> <span class="s2">&quot;i-005c08b899229fff0&quot;</span>
</span><span class='line'><span class="nv">ip</span> <span class="o">=</span> <span class="s2">&quot;34.253.196.167&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now we can see our EC2 instance was provisioned and our outputs returned the instance id as well as the public ip address.</p>

<p>We can also confirm this by looking at the AWS EC2 Console:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/82b4d742-1c45-4d21-8766-10a5c0d074a1" alt="aws-ec2-instances-in-console" /></p>

<p>Note that Terraform Configuration is idempotent, so when we run a terraform apply again, terraform will check what we have defined as what we want our desired infrastructure to be like, and what we actually have in our AWS Account, and since we haven’t made any changes there should be no changes.</p>

<p>We can run a terraform apply to validate that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform apply
</span></code></pre></td></tr></table></div></figure>


<p>And we can see the response shows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>data.aws_vpc.selected: Reading...
</span><span class='line'>data.aws_ami.latest_ubuntu: Reading...
</span><span class='line'>data.aws_ami.latest_ubuntu: Read <span class="nb">complete </span>after 1s <span class="o">[</span><span class="nv">id</span><span class="o">=</span>ami-0f56955469757e5aa<span class="o">]</span>
</span><span class='line'>data.aws_vpc.selected: Read <span class="nb">complete </span>after 1s <span class="o">[</span><span class="nv">id</span><span class="o">=</span>vpc-063d7ac3124053dfa<span class="o">]</span>
</span><span class='line'>data.aws_subnet.selected: Reading...
</span><span class='line'>data.aws_subnet.selected: Read <span class="nb">complete </span>after 1s <span class="o">[</span><span class="nv">id</span><span class="o">=</span>subnet-0b7acd7593611c1bb<span class="o">]</span>
</span><span class='line'>aws_instance.ec2: Refreshing state... <span class="o">[</span><span class="nv">id</span><span class="o">=</span>i-005c08b899229fff0<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Apply <span class="nb">complete</span>! Resources: <span class="m">0</span> added, <span class="m">0</span> changed, <span class="m">0</span> destroyed.
</span></code></pre></td></tr></table></div></figure>


<h2>Cleanup</h2>

<p>Destroy the infrastructure that we provisioned:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform destroy
</span></code></pre></td></tr></table></div></figure>


<p>It will show us what terraform will destroy, then upon confirming we should see the following output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Plan: <span class="m">0</span> to add, <span class="m">0</span> to change, <span class="m">1</span> to destroy.
</span><span class='line'>
</span><span class='line'>Changes to Outputs:
</span><span class='line'>  - <span class="nv">instance_id</span> <span class="o">=</span> <span class="s2">&quot;i-005c08b899229fff0&quot;</span> -&gt; null
</span><span class='line'>  - <span class="nv">ip</span>          <span class="o">=</span> <span class="s2">&quot;34.253.196.167&quot;</span> -&gt; null
</span><span class='line'>
</span><span class='line'>Do you really want to destroy all resources?
</span><span class='line'>  Terraform will destroy all your managed infrastructure, as shown above.
</span><span class='line'>  There is no undo. Only <span class="s1">&#39;yes&#39;</span> will be accepted to confirm.
</span><span class='line'>
</span><span class='line'>  Enter a value: yes
</span><span class='line'>
</span><span class='line'>aws_instance.ec2: Destroying... <span class="o">[</span><span class="nv">id</span><span class="o">=</span>i-005c08b899229fff0<span class="o">]</span>
</span><span class='line'>aws_instance.ec2: Still destroying... <span class="o">[</span><span class="nv">id</span><span class="o">=</span>i-005c08b899229fff0, 10s elapsed<span class="o">]</span>
</span><span class='line'>aws_instance.ec2: Still destroying... <span class="o">[</span><span class="nv">id</span><span class="o">=</span>i-005c08b899229fff0, 20s elapsed<span class="o">]</span>
</span><span class='line'>aws_instance.ec2: Still destroying... <span class="o">[</span><span class="nv">id</span><span class="o">=</span>i-005c08b899229fff0, 30s elapsed<span class="o">]</span>
</span><span class='line'>aws_instance.ec2: Destruction <span class="nb">complete </span>after 31s
</span><span class='line'>
</span><span class='line'>Destroy <span class="nb">complete</span>! Resources: <span class="m">1</span> destroyed.
</span></code></pre></td></tr></table></div></figure>


<p>If you followed along and you also want to clean up the AWS IAM user, head over to the AWS IAM Console and delete the “medium-terraform” IAM User.</p>

<h2>Thank You</h2>

<p>I hope you enjoyed this post, I will be posting more terraform related content.</p>

<p>Should you want to reach out to me, you can follow me on Twitter at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> or check out my website at <a href="https://ruan.dev">https://ruan.dev</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With FerretDB on Docker]]></title>
    <link href="https://blog.ruanbekker.com/blog/2023/06/14/getting-started-with-ferretdb-on-docker/"/>
    <updated>2023-06-14T22:00:00-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2023/06/14/getting-started-with-ferretdb-on-docker</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/how-to-run-ferretdb-on-docker.png" alt="how-to-run-ferretdb-on-docker" /></p>

<p>In this post we will have a look at <strong>FerretDB</strong> which is a opensource proxy that translates MongoDB queries to SQL, where PostgreSQL being the database engine.</p>

<h2>More about FerretDB</h2>

<p>From <a href="https://www.ferretdb.io/">FerretDB</a> website, they describe FerretDB as:</p>

<blockquote><p>Initially built as open-source software, MongoDB was a game-changer for many developers, enabling them to build fast and robust applications. Its ease of use and extensive documentation made it a top choice for many developers looking for an open-source database. However, all this changed when they switched to an SSPL license, moving away from their open-source roots.</p>

<p>In light of this, FerretDB was founded to become the true open-source alternative to MongoDB, making it the go-to choice for most MongoDB users looking for an open-source alternative to MongoDB. With FerretDB, users can run the same MongoDB protocol queries without needing to learn a new language or command.</p></blockquote>

<h2>What can you expect from this tutorial</h2>

<p>We will be doing the following:</p>

<ul>
<li>deploying ferretdb and postgres on docker containers using docker compose</li>
<li>then use <code>mongosh</code> as a client to logon to ferretdb using the ferretdb endpoint</li>
<li>explore some example queries to insert and read data from ferretdb</li>
<li>use scripting to generate data into ferretedb</li>
<li>explore the embedded prometheus endpoint for metrics</li>
</ul>


<h2>Deploy FerretDB</h2>

<p>The following <code>docker-compose.yaml</code> defines a postgres container which will be used as the database engine for ferretdb, and then we define the ferretdb container, which connects to postgres via the environment variable <code>FERRETDB_POSTGRESQL_URL</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&quot;3.9&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">postgres</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">postgres:14.8-bullseye</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">postgres</span>
</span><span class='line'>    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">unless-stopped</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">POSTGRES_USER=ferret</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">POSTGRES_PASSWORD=password</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">POSTGRES_DB=ferretdb</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">pgvol:/var/lib/postgresql/data</span>
</span><span class='line'>    <span class="l-Scalar-Plain">healthcheck</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;CMD-SHELL&quot;</span><span class="p-Indicator">,</span> <span class="s">&quot;pg_isready&quot;</span><span class="p-Indicator">,</span> <span class="s">&quot;-d&quot;</span><span class="p-Indicator">,</span> <span class="s">&quot;db_prod&quot;</span><span class="p-Indicator">]</span>
</span><span class='line'>      <span class="l-Scalar-Plain">interval</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">30s</span>
</span><span class='line'>      <span class="l-Scalar-Plain">timeout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">15s</span>
</span><span class='line'>      <span class="l-Scalar-Plain">retries</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5</span>
</span><span class='line'>      <span class="l-Scalar-Plain">start_period</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">60s</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ferretdb</span>
</span><span class='line'>    <span class="l-Scalar-Plain">logging</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span> <span class="s">&quot;json-file&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">max-size</span><span class="p-Indicator">:</span> <span class="s">&quot;1m&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">max-file</span><span class="p-Indicator">:</span> <span class="s">&quot;1&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">ferretdb</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ghcr.io/ferretdb/ferretdb:1.1.0</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ferretdb</span>
</span><span class='line'>    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">unless-stopped</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">27017:27017</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">8080:8080</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">FERRETDB_POSTGRESQL_URL=postgres://postgres:5432/ferretdb</span>
</span><span class='line'>    <span class="l-Scalar-Plain">depends_on</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">postgres</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">condition</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">service_healthy</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ferretdb</span>
</span><span class='line'>    <span class="l-Scalar-Plain">logging</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span> <span class="s">&quot;json-file&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">max-size</span><span class="p-Indicator">:</span> <span class="s">&quot;1m&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">max-file</span><span class="p-Indicator">:</span> <span class="s">&quot;1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ferretdb</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ferretdb</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">pgvol</span><span class="p-Indicator">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you have the content above saved in <code>docker-compose.yaml</code> you can run the following to run the containers in a detached mode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-compose up -d
</span></code></pre></td></tr></table></div></figure>


<h2>Connect to FerretDB</h2>

<p>Once the containers started, we can connect to our ferretdb server using mongosh, which is a shell utility to connect to the database). I will make use of a container to do this, where I will reference the network which we defined in our docker compose file, and set the endpoint that mongosh need to connect to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run --rm -it --network<span class="o">=</span>ferretdb --entrypoint<span class="o">=</span>mongosh mongo:6.0 <span class="s2">&quot;mongodb://ferret:password@ferretdb/ferretdb?authMechanism=PLAIN&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once it successfully connects to ferretdb, we should see the following prompt:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Current Mongosh Log ID:  64626c5c259916d1a68b7dad
</span><span class='line'>Connecting to:        mongodb://&lt;credentials&gt;@ferretdb/ferretdb?authMechanism<span class="o">=</span>PLAIN<span class="p">&amp;</span><span class="nv">directConnection</span><span class="o">=</span><span class="nb">true</span><span class="p">&amp;</span><span class="nv">appName</span><span class="o">=</span>mongosh+1.8.2
</span><span class='line'>Using MongoDB:        6.0.42
</span><span class='line'>Using Mongosh:        1.8.2
</span><span class='line'>
</span><span class='line'>ferretdb&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>Run example queries on FerretDB</h2>

<p>If you are familiar with MongoDB, you will find the following identical to MongoDB.</p>

<p>First we show the current databases:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ferretdb&gt; show dbs<span class="p">;</span>
</span><span class='line'>public  <span class="m">0</span> B
</span></code></pre></td></tr></table></div></figure>


<p>The we create and use the database named <code>mydb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ferretdb&gt; use mydb
</span><span class='line'>switched to db mydb
</span></code></pre></td></tr></table></div></figure>


<p>To see which database are we currently connected to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mydb&gt; db
</span><span class='line'>mydb
</span></code></pre></td></tr></table></div></figure>


<p>Now we can create a collection named <code>mycol1</code> and <code>mycol2</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mydb&gt; db.createCollection<span class="o">(</span><span class="s2">&quot;mycol1&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span> ok: <span class="m">1</span> <span class="o">}</span>
</span><span class='line'>mydb&gt; db.createCollection<span class="o">(</span><span class="s2">&quot;mycol2&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span> ok: <span class="m">1</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can view our collections by running the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mydb&gt; show collections
</span><span class='line'>mycol1
</span><span class='line'>mycol2
</span></code></pre></td></tr></table></div></figure>


<p>To write one document into our collection named <code>col1</code> with the following data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;ruan&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;age&quot;</span><span class="p">:</span> <span class="mi">32</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;hobbies&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;golf&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;programming&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;music&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can execute:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mydb&gt; db.mycol1.insertOne<span class="o">({</span><span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;ruan&quot;</span>, <span class="s2">&quot;age&quot;</span>: 32, <span class="s2">&quot;hobbies&quot;</span>: <span class="o">[</span><span class="s2">&quot;golf&quot;</span>, <span class="s2">&quot;programming&quot;</span>, <span class="s2">&quot;music&quot;</span><span class="o">]})</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  acknowledged: <span class="nb">true</span>,
</span><span class='line'>  insertedIds: <span class="o">{</span> <span class="s1">&#39;0&#39;</span>: ObjectId<span class="o">(</span><span class="s2">&quot;64626cea259916d1a68b7dae&quot;</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we can insert another document:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mydb&gt; db.mycol1.insertOne<span class="o">({</span><span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;michelle&quot;</span>, <span class="s2">&quot;age&quot;</span>: 28, <span class="s2">&quot;hobbies&quot;</span>: <span class="o">[</span><span class="s2">&quot;art&quot;</span>, <span class="s2">&quot;music&quot;</span>, <span class="s2">&quot;reading&quot;</span><span class="o">]})</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  acknowledged: <span class="nb">true</span>,
</span><span class='line'>  insertedIds: <span class="o">{</span> <span class="s1">&#39;0&#39;</span>: ObjectId<span class="o">(</span><span class="s2">&quot;64626cf1259916d1a68b7daf&quot;</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can then use <code>countDocuments()</code> to view the number of documents in our collection named <code>mycol1</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ferretdb&gt; db.mycol1.countDocuments<span class="o">()</span>
</span><span class='line'>2
</span></code></pre></td></tr></table></div></figure>


<p>If we want to find all our documents in our <code>mycol1</code> collection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mydb&gt; db.mycol1.find<span class="o">()</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    _id: ObjectId<span class="o">(</span><span class="s2">&quot;64626cea259916d1a68b7dae&quot;</span><span class="o">)</span>,
</span><span class='line'>    name: <span class="s1">&#39;ruan&#39;</span>,
</span><span class='line'>    age: 32,
</span><span class='line'>    hobbies: <span class="o">[</span> <span class="s1">&#39;golf&#39;</span>, <span class="s1">&#39;programming&#39;</span>, <span class="s1">&#39;music&#39;</span> <span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    _id: ObjectId<span class="o">(</span><span class="s2">&quot;64626cf1259916d1a68b7daf&quot;</span><span class="o">)</span>,
</span><span class='line'>    name: <span class="s1">&#39;michelle&#39;</span>,
</span><span class='line'>    age: 28,
</span><span class='line'>    hobbies: <span class="o">[</span> <span class="s1">&#39;art&#39;</span>, <span class="s1">&#39;music&#39;</span>, <span class="s1">&#39;reading&#39;</span> <span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we want to only display specific fields in our response, such as name and age, we can project fields to return from our query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mydb&gt; db.mycol1.find<span class="o">({}</span>, <span class="o">{</span><span class="s2">&quot;name&quot;</span>: 1, <span class="s2">&quot;age&quot;</span>: 1<span class="o">})</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>  <span class="o">{</span> _id: ObjectId<span class="o">(</span><span class="s2">&quot;64626cea259916d1a68b7dae&quot;</span><span class="o">)</span>, name: <span class="s1">&#39;ruan&#39;</span>, age: <span class="m">32</span> <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    _id: ObjectId<span class="o">(</span><span class="s2">&quot;64626cf1259916d1a68b7daf&quot;</span><span class="o">)</span>,
</span><span class='line'>    name: <span class="s1">&#39;michelle&#39;</span>,
</span><span class='line'>    age: 28
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also suppress the <code>_id</code> field by setting the value to <code>0</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mydb&gt; db.mycol1.find<span class="o">({}</span>, <span class="o">{</span><span class="s2">&quot;_id&quot;</span>: 0, <span class="s2">&quot;name&quot;</span>: 1, <span class="s2">&quot;age&quot;</span>: 1<span class="o">})</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>  <span class="o">{</span> name: <span class="s1">&#39;ruan&#39;</span>, age: <span class="m">32</span> <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> name: <span class="s1">&#39;michelle&#39;</span>, age: <span class="m">28</span> <span class="o">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we can return all the fields name and age from our collection where the age field is equals to 32:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mydb&gt; db.mycol1.find<span class="o">({</span><span class="s2">&quot;age&quot;</span>: 32<span class="o">}</span>, <span class="o">{</span><span class="s2">&quot;_id&quot;</span>: 0, <span class="s2">&quot;name&quot;</span>: 1, <span class="s2">&quot;age&quot;</span>: 1<span class="o">})</span>
</span><span class='line'><span class="o">[</span> <span class="o">{</span> name: <span class="s1">&#39;ruan&#39;</span>, age: <span class="m">32</span> <span class="o">}</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also find a specific document by its id as example, and return only the field value, like name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mydb&gt; db.mycol1.findOne<span class="o">({</span>_id: ObjectId<span class="o">(</span><span class="s2">&quot;64626cea259916d1a68b7dae&quot;</span><span class="o">)})</span>.name
</span><span class='line'>ruan
</span></code></pre></td></tr></table></div></figure>


<p>Next we will find all documents where the age is greater than 30:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mydb&gt; db.mycol1.find<span class="o">({</span><span class="s2">&quot;age&quot;</span>: <span class="o">{</span><span class="s2">&quot;$gt&quot;</span>: 30<span class="o">}})</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    _id: ObjectId<span class="o">(</span><span class="s2">&quot;64626cea259916d1a68b7dae&quot;</span><span class="o">)</span>,
</span><span class='line'>    name: <span class="s1">&#39;ruan&#39;</span>,
</span><span class='line'>    age: 32,
</span><span class='line'>    hobbies: <span class="o">[</span> <span class="s1">&#39;golf&#39;</span>, <span class="s1">&#39;programming&#39;</span>, <span class="s1">&#39;music&#39;</span> <span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s explore how to insert many documents at once using <code>insertMany()</code>, first create a new collection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ferretdb&gt; db.createCollection<span class="o">(</span><span class="s2">&quot;mycol2&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span> ok: <span class="m">1</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can then define the docs variable, and assign a array with 2 json documents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ferretdb&gt; var <span class="nv">docs</span> <span class="o">=</span> <span class="o">[{</span>name: <span class="s2">&quot;peter&quot;</span>, age: 34, hobbies: <span class="o">[</span><span class="s2">&quot;ski&quot;</span>, <span class="s2">&quot;programming&quot;</span>, <span class="s2">&quot;music&quot;</span><span class="o">]}</span>, <span class="o">{</span>name: <span class="s2">&quot;sam&quot;</span>, age: 39, hobbies: <span class="o">[</span><span class="s2">&quot;running&quot;</span>, <span class="s2">&quot;camping&quot;</span>, <span class="s2">&quot;music&quot;</span><span class="o">]}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can insert our documents to ferretdb using <code>insertMany()</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ferretdb&gt; db.mycol2.insertMany<span class="o">(</span>docs<span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  acknowledged: <span class="nb">true</span>,
</span><span class='line'>  insertedIds: <span class="o">{</span>
</span><span class='line'>    <span class="s1">&#39;0&#39;</span>: ObjectId<span class="o">(</span><span class="s2">&quot;6464ceb1413cee26e9bf709f&quot;</span><span class="o">)</span>,
</span><span class='line'>    <span class="s1">&#39;1&#39;</span>: ObjectId<span class="o">(</span><span class="s2">&quot;6464ceb1413cee26e9bf70a0&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can count the documents inside our collection using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ferretdb&gt; db.mycol2.countDocuments<span class="o">()</span>
</span><span class='line'>2
</span></code></pre></td></tr></table></div></figure>


<p>And we can search for all the documents inside the collection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ferretdb&gt; db.mycol2.find<span class="o">()</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    _id: ObjectId<span class="o">(</span><span class="s2">&quot;6464ceb1413cee26e9bf709f&quot;</span><span class="o">)</span>,
</span><span class='line'>    name: <span class="s1">&#39;peter&#39;</span>,
</span><span class='line'>    age: 34,
</span><span class='line'>    hobbies: <span class="o">[</span> <span class="s1">&#39;ski&#39;</span>, <span class="s1">&#39;programming&#39;</span>, <span class="s1">&#39;music&#39;</span> <span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    _id: ObjectId<span class="o">(</span><span class="s2">&quot;6464ceb1413cee26e9bf70a0&quot;</span><span class="o">)</span>,
</span><span class='line'>    name: <span class="s1">&#39;sam&#39;</span>,
</span><span class='line'>    age: 39,
</span><span class='line'>    hobbies: <span class="o">[</span> <span class="s1">&#39;running&#39;</span>, <span class="s1">&#39;camping&#39;</span>, <span class="s1">&#39;music&#39;</span> <span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And searching for any data using the name <code>peter</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ferretdb&gt; db.mycol2.find<span class="o">({</span>name: <span class="s2">&quot;peter&quot;</span><span class="o">})</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    _id: ObjectId<span class="o">(</span><span class="s2">&quot;6464ceb1413cee26e9bf709f&quot;</span><span class="o">)</span>,
</span><span class='line'>    name: <span class="s1">&#39;peter&#39;</span>,
</span><span class='line'>    age: 34,
</span><span class='line'>    hobbies: <span class="o">[</span> <span class="s1">&#39;ski&#39;</span>, <span class="s1">&#39;programming&#39;</span>, <span class="s1">&#39;music&#39;</span> <span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Scripting</h2>

<p>We will create a script so that we can generate data that we want to write into FerretDB.</p>

<p>Create the following script, <code>write.js</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>var <span class="nv">txs</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span>var <span class="nv">x</span> <span class="o">=</span> 0<span class="p">;</span> x &lt; <span class="m">1000</span> <span class="p">;</span> x++<span class="o">)</span> <span class="o">{</span>
</span><span class='line'> var <span class="nv">transaction_types</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;credit card&quot;</span>, <span class="s2">&quot;cash&quot;</span>, <span class="s2">&quot;account&quot;</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'> var <span class="nv">store_names</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;edgards&quot;</span>, <span class="s2">&quot;cna&quot;</span>, <span class="s2">&quot;makro&quot;</span>, <span class="s2">&quot;picknpay&quot;</span>, <span class="s2">&quot;checkers&quot;</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'> var <span class="nv">random_transaction_type</span> <span class="o">=</span> Math.floor<span class="o">(</span>Math.random<span class="o">()</span> * <span class="o">(</span><span class="m">2</span> - <span class="m">0</span> + 1<span class="o">))</span> + 0<span class="p">;</span>
</span><span class='line'> var <span class="nv">random_store_name</span> <span class="o">=</span> Math.floor<span class="o">(</span>Math.random<span class="o">()</span> * <span class="o">(</span><span class="m">4</span> - <span class="m">0</span> + 1<span class="o">))</span> + 0<span class="p">;</span>
</span><span class='line'> var <span class="nv">random_age</span> <span class="o">=</span> Math.floor<span class="o">(</span>Math.random<span class="o">()</span> * <span class="o">(</span><span class="m">80</span> - 18<span class="o">)</span> + 18<span class="o">)</span>
</span><span class='line'> txs.push<span class="o">({</span>
</span><span class='line'>   transaction: <span class="s1">&#39;tx_&#39;</span> + x,
</span><span class='line'>   transaction_price: Math.round<span class="o">(</span>Math.random<span class="o">()</span>*1000<span class="o">)</span>,
</span><span class='line'>   transaction_type: transaction_types<span class="o">[</span>random_transaction_type<span class="o">]</span>,
</span><span class='line'>   store_name: store_names<span class="o">[</span>random_store_name<span class="o">]</span>,
</span><span class='line'>   age: random_age
</span><span class='line'>   <span class="o">})</span><span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>console.log<span class="o">(</span><span class="s2">&quot;drop and recreate the collection&quot;</span><span class="o">)</span>
</span><span class='line'>db.mycollection1.drop<span class="o">()</span>
</span><span class='line'>db.createCollection<span class="o">(</span><span class="s2">&quot;mycollection1&quot;</span><span class="o">)</span>
</span><span class='line'>console.log<span class="o">(</span><span class="s2">&quot;insert documents into collection&quot;</span><span class="o">)</span>
</span><span class='line'>db.mycollection1.insertMany<span class="o">(</span>txs<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The script will loop a 1000 times and create documents that will include fields of <code>transaction_types</code>, <code>store_names</code>, <code>random_transaction_type</code>, <code>random_store_name</code> and <code>random_age</code>.</p>

<p>Use docker, mount the file inside the container, point the database endpoint to ferretdb and load the file that we want to execute:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run --rm -it --network<span class="o">=</span>ferretdb -v <span class="nv">$PWD</span>/write.js:/src/write.js --entrypoint<span class="o">=</span>mongosh mongo:6.0 <span class="s2">&quot;mongodb://ferret:password@ferretdb/ferretdb?authMechanism=PLAIN&quot;</span> --eval <span class="s1">&#39;load(&quot;/src/write.js&quot;)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when we run a mongosh client:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run --rm -it --network<span class="o">=</span>ferretdb -v <span class="nv">$PWD</span>/write.js:/src/write.js --entrypoint<span class="o">=</span>mongosh mongo:6.0 <span class="s2">&quot;mongodb://ferret:password@ferretdb/ferretdb?authMechanism=PLAIN&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we query for the <code>store_name: picknpay</code> and only show the <code>transaction_type</code> and <code>transaction</code> fields:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ferretdb&gt; db.mycollection1.find<span class="o">({</span><span class="s2">&quot;store_name&quot;</span>: <span class="s2">&quot;picknpay&quot;</span><span class="o">}</span>, <span class="o">{</span>_id: 0, transaction_type: 1, transaction: 1<span class="o">})</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>  <span class="o">{</span> transaction_type: <span class="s1">&#39;credit card&#39;</span>, transaction: <span class="s1">&#39;tx_3&#39;</span> <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> transaction_type: <span class="s1">&#39;cash&#39;</span>, transaction: <span class="s1">&#39;tx_9&#39;</span> <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> transaction_type: <span class="s1">&#39;account&#39;</span>, transaction: <span class="s1">&#39;tx_10&#39;</span> <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> transaction_type: <span class="s1">&#39;credit card&#39;</span>, transaction: <span class="s1">&#39;tx_15&#39;</span> <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> transaction_type: <span class="s1">&#39;credit card&#39;</span>, transaction: <span class="s1">&#39;tx_19&#39;</span> <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> transaction_type: <span class="s1">&#39;cash&#39;</span>, transaction: <span class="s1">&#39;tx_21&#39;</span> <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> transaction_type: <span class="s1">&#39;cash&#39;</span>, transaction: <span class="s1">&#39;tx_28&#39;</span> <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> transaction_type: <span class="s1">&#39;account&#39;</span>, transaction: <span class="s1">&#39;tx_31&#39;</span> <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> transaction_type: <span class="s1">&#39;cash&#39;</span>, transaction: <span class="s1">&#39;tx_37&#39;</span> <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> transaction_type: <span class="s1">&#39;cash&#39;</span>, transaction: <span class="s1">&#39;tx_39&#39;</span> <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> transaction_type: <span class="s1">&#39;account&#39;</span>, transaction: <span class="s1">&#39;tx_40&#39;</span> <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> transaction_type: <span class="s1">&#39;cash&#39;</span>, transaction: <span class="s1">&#39;tx_51&#39;</span> <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> transaction_type: <span class="s1">&#39;account&#39;</span>, transaction: <span class="s1">&#39;tx_52&#39;</span> <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> transaction_type: <span class="s1">&#39;cash&#39;</span>, transaction: <span class="s1">&#39;tx_58&#39;</span> <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> transaction_type: <span class="s1">&#39;credit card&#39;</span>, transaction: <span class="s1">&#39;tx_62&#39;</span> <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> transaction_type: <span class="s1">&#39;credit card&#39;</span>, transaction: <span class="s1">&#39;tx_65&#39;</span> <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> transaction_type: <span class="s1">&#39;account&#39;</span>, transaction: <span class="s1">&#39;tx_69&#39;</span> <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> transaction_type: <span class="s1">&#39;account&#39;</span>, transaction: <span class="s1">&#39;tx_71&#39;</span> <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> transaction_type: <span class="s1">&#39;cash&#39;</span>, transaction: <span class="s1">&#39;tx_72&#39;</span> <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span> transaction_type: <span class="s1">&#39;account&#39;</span>, transaction: <span class="s1">&#39;tx_74&#39;</span> <span class="o">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also use the <code>--eval</code> flag with the mongosh container to run ad-hoc queries such as counting documents for a collection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run --rm -it --network<span class="o">=</span>ferretdb <span class="se">\</span>
</span><span class='line'>  -v <span class="nv">$PWD</span>/write.js:/src/write.js:ro <span class="se">\</span>
</span><span class='line'>  --entrypoint<span class="o">=</span>mongosh mongo:6.0 <span class="se">\</span>
</span><span class='line'>  <span class="s2">&quot;mongodb://ferret:password@ferretdb/ferretdb?authMechanism=PLAIN&quot;</span> --eval <span class="s1">&#39;db.mycollection1.countDocuments()&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Prometheus Metrics</h2>

<p>FerretDB provides prometheus metrics out of the box, and outputs prometheus metrics on the <code>:8080/debug/metrics</code> endpoint:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl http://localhost:8080/debug/metrics
</span></code></pre></td></tr></table></div></figure>


<p>Which will output metrics more or less like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ferretdb_client_accepts_total<span class="o">{</span><span class="nv">error</span><span class="o">=</span><span class="s2">&quot;0&quot;</span><span class="o">}</span> 98
</span><span class='line'>ferretdb_client_connected 0
</span><span class='line'>ferretdb_client_requests_total<span class="o">{</span><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;aggregate&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span><span class="o">}</span> 5
</span><span class='line'>ferretdb_client_requests_total<span class="o">{</span><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;atlasVersion&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span><span class="o">}</span> 27
</span><span class='line'>ferretdb_client_requests_total<span class="o">{</span><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;buildInfo&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span><span class="o">}</span> 27
</span><span class='line'>ferretdb_client_requests_total<span class="o">{</span><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;buildinfo&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span><span class="o">}</span> 2
</span><span class='line'>ferretdb_client_requests_total<span class="o">{</span><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;count&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span><span class="o">}</span> 5
</span><span class='line'>ferretdb_client_requests_total<span class="o">{</span><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;create&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span><span class="o">}</span> 7
</span><span class='line'>ferretdb_client_requests_total<span class="o">{</span><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;drop&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span><span class="o">}</span> 3
</span><span class='line'>ferretdb_client_requests_total<span class="o">{</span><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;dropDatabase&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span><span class="o">}</span> 4
</span><span class='line'>ferretdb_client_requests_total<span class="o">{</span><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;find&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span><span class="o">}</span> 27
</span><span class='line'>ferretdb_client_requests_total<span class="o">{</span><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;getCmdLineOpts&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span><span class="o">}</span> 27
</span><span class='line'>ferretdb_client_requests_total<span class="o">{</span><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;getFreeMonitoringStatus&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span><span class="o">}</span> 20
</span><span class='line'>ferretdb_client_requests_total<span class="o">{</span><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;getLog&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span><span class="o">}</span> 20
</span><span class='line'>ferretdb_client_requests_total<span class="o">{</span><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;getParameter&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span><span class="o">}</span> 27
</span><span class='line'>ferretdb_client_requests_total<span class="o">{</span><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;hello&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span><span class="o">}</span> 20
</span><span class='line'>ferretdb_client_requests_total<span class="o">{</span><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;insert&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span><span class="o">}</span> 15
</span><span class='line'>ferretdb_client_requests_total<span class="o">{</span><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;ismaster&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span><span class="o">}</span> 238
</span><span class='line'>ferretdb_client_requests_total<span class="o">{</span><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;listCollections&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span><span class="o">}</span> 49
</span><span class='line'>ferretdb_client_requests_total<span class="o">{</span><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;listDatabases&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span><span class="o">}</span> 12
</span><span class='line'>ferretdb_client_requests_total<span class="o">{</span><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;ping&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span><span class="o">}</span> 40
</span><span class='line'>ferretdb_client_requests_total<span class="o">{</span><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;saslStart&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span><span class="o">}</span> 70
</span><span class='line'>ferretdb_client_requests_total<span class="o">{</span><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;setFreeMonitoring&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span><span class="o">}</span> 1
</span><span class='line'>ferretdb_client_requests_total<span class="o">{</span><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_QUERY&quot;</span><span class="o">}</span> 96
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;aggregate&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span>,result<span class="o">=</span><span class="s2">&quot;ok&quot;</span><span class="o">}</span> 5
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;atlasVersion&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span>,result<span class="o">=</span><span class="s2">&quot;CommandNotFound&quot;</span><span class="o">}</span> 27
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;buildInfo&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span>,result<span class="o">=</span><span class="s2">&quot;ok&quot;</span><span class="o">}</span> 27
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;buildinfo&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span>,result<span class="o">=</span><span class="s2">&quot;ok&quot;</span><span class="o">}</span> 2
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;count&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span>,result<span class="o">=</span><span class="s2">&quot;ok&quot;</span><span class="o">}</span> 5
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;create&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span>,result<span class="o">=</span><span class="s2">&quot;ok&quot;</span><span class="o">}</span> 7
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;drop&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span>,result<span class="o">=</span><span class="s2">&quot;NamespaceNotFound&quot;</span><span class="o">}</span> 2
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;drop&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span>,result<span class="o">=</span><span class="s2">&quot;ok&quot;</span><span class="o">}</span> 1
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;dropDatabase&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span>,result<span class="o">=</span><span class="s2">&quot;ok&quot;</span><span class="o">}</span> 4
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;find&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span>,result<span class="o">=</span><span class="s2">&quot;ok&quot;</span><span class="o">}</span> 27
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;getCmdLineOpts&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span>,result<span class="o">=</span><span class="s2">&quot;ok&quot;</span><span class="o">}</span> 27
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;getFreeMonitoringStatus&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span>,result<span class="o">=</span><span class="s2">&quot;ok&quot;</span><span class="o">}</span> 20
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;getLog&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span>,result<span class="o">=</span><span class="s2">&quot;ok&quot;</span><span class="o">}</span> 20
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;getParameter&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span>,result<span class="o">=</span><span class="s2">&quot;Unset&quot;</span><span class="o">}</span> 27
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;hello&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span>,result<span class="o">=</span><span class="s2">&quot;ok&quot;</span><span class="o">}</span> 20
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;insert&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span>,result<span class="o">=</span><span class="s2">&quot;ok&quot;</span><span class="o">}</span> 15
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;ismaster&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span>,result<span class="o">=</span><span class="s2">&quot;ok&quot;</span><span class="o">}</span> 238
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;listCollections&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span>,result<span class="o">=</span><span class="s2">&quot;ok&quot;</span><span class="o">}</span> 49
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;listDatabases&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span>,result<span class="o">=</span><span class="s2">&quot;ok&quot;</span><span class="o">}</span> 12
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;ping&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span>,result<span class="o">=</span><span class="s2">&quot;ok&quot;</span><span class="o">}</span> 40
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;saslStart&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span>,result<span class="o">=</span><span class="s2">&quot;ok&quot;</span><span class="o">}</span> 70
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;setFreeMonitoring&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_MSG&quot;</span>,result<span class="o">=</span><span class="s2">&quot;ok&quot;</span><span class="o">}</span> 1
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_REPLY&quot;</span>,result<span class="o">=</span><span class="s2">&quot;ok&quot;</span><span class="o">}</span> 93
</span><span class='line'>ferretdb_client_responses_total<span class="o">{</span><span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,command<span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,opcode<span class="o">=</span><span class="s2">&quot;OP_REPLY&quot;</span>,result<span class="o">=</span><span class="s2">&quot;unhandled&quot;</span><span class="o">}</span> 3
</span><span class='line'>ferretdb_up<span class="o">{</span><span class="nv">branch</span><span class="o">=</span><span class="s2">&quot;unknown&quot;</span>,commit<span class="o">=</span><span class="s2">&quot;3344cbb98bb744dd044bcf2d51fe9ab65db22f0b&quot;</span>,debug<span class="o">=</span><span class="s2">&quot;false&quot;</span>,dirty<span class="o">=</span><span class="s2">&quot;true&quot;</span>,package<span class="o">=</span><span class="s2">&quot;docker&quot;</span>,telemetry<span class="o">=</span><span class="s2">&quot;disabled&quot;</span>,update_available<span class="o">=</span><span class="s2">&quot;false&quot;</span>,uuid<span class="o">=</span><span class="s2">&quot;08174d33-05fd-45ed-adb9-d2e343e0af83&quot;</span>,version<span class="o">=</span><span class="s2">&quot;v1.1.0&quot;</span><span class="o">}</span> 1
</span><span class='line'>process_cpu_seconds_total 16.98
</span><span class='line'>process_max_fds 1.048576e+06
</span><span class='line'>process_open_fds 13
</span><span class='line'>process_resident_memory_bytes 2.5714688e+07
</span><span class='line'>process_start_time_seconds 1.68425346762e+09
</span><span class='line'>process_virtual_memory_bytes 7.52529408e+08
</span><span class='line'>process_virtual_memory_max_bytes 1.8446744073709552e+19
</span><span class='line'>promhttp_metric_handler_errors_total<span class="o">{</span><span class="nv">cause</span><span class="o">=</span><span class="s2">&quot;encoding&quot;</span><span class="o">}</span> 0
</span><span class='line'>promhttp_metric_handler_errors_total<span class="o">{</span><span class="nv">cause</span><span class="o">=</span><span class="s2">&quot;gathering&quot;</span><span class="o">}</span> 0
</span><span class='line'>promhttp_metric_handler_requests_in_flight 1
</span><span class='line'>promhttp_metric_handler_requests_total<span class="o">{</span><span class="nv">code</span><span class="o">=</span><span class="s2">&quot;200&quot;</span><span class="o">}</span> 2
</span><span class='line'>promhttp_metric_handler_requests_total<span class="o">{</span><span class="nv">code</span><span class="o">=</span><span class="s2">&quot;500&quot;</span><span class="o">}</span> 0
</span><span class='line'>promhttp_metric_handler_requests_total<span class="o">{</span><span class="nv">code</span><span class="o">=</span><span class="s2">&quot;503&quot;</span><span class="o">}</span> 0
</span></code></pre></td></tr></table></div></figure>


<h2>Resources</h2>

<p>Please see the follwoing resources for FerretDB:</p>

<ul>
<li><a href="https://docs.ferretdb.io/">https://docs.ferretdb.io/</a></li>
<li><a href="https://github.com/ferretdb/FerretDB/pkgs/container/ferretdb">https://github.com/ferretdb/FerretDB/pkgs/container/ferretdb</a></li>
<li><a href="https://docs.ferretdb.io/quickstart-guide/docker/">https://docs.ferretdb.io/quickstart-guide/docker/</a></li>
<li><a href="https://github.com/ruanbekker/cheatsheets/tree/master/mongodb/shell">https://github.com/ruanbekker/cheatsheets/tree/master/mongodb/shell</a></li>
</ul>


<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>

<ul>
<li>Linktree: <a href="https://go.ruan.dev/links">https://go.ruan.dev/links</a></li>
<li>Patreon: <a href="https://go.ruan.dev/patreon">https://go.ruan.dev/patreon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Run a AMD64 Bit Linux VM on a Mac M1]]></title>
    <link href="https://blog.ruanbekker.com/blog/2023/05/26/how-to-run-a-amd64-bit-linux-vm-on-a-mac-m1/"/>
    <updated>2023-05-26T08:35:38-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2023/05/26/how-to-run-a-amd64-bit-linux-vm-on-a-mac-m1</id>
    <content type="html"><![CDATA[<p>This tutorial will show you how you can run 64bit Ubuntu Linux Virtual Machines on a Apple Mac M1 arm64 architecture macbook using <a href="https://github.com/utmapp/UTM">UTM</a>.</p>

<h2>Installation</h2>

<p>Head over to their <a href="https://docs.getutm.app/installation/ios/">documentation</a> and download the <code>UTM.dmg</code> file and install it, once it is installed and you have opened UTM, you should see this screen:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/a5303fc2-0925-4055-921e-78292d5b45e0" alt="image" /></p>

<h2>Creating a Virtual Machine</h2>

<p>In my case I would like to run a Ubuntu VM, so head over to the <a href="https://ubuntu.com/download/server">Ubuntu Server Download</a> page and download the version of choice, I will be downloading Ubuntu Server 22.04, once you have your ISO image downloaded, you can head over to the next step which is to &ldquo;Create a New Virtual Machine&rdquo;:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/3fa35dc5-982e-469b-822d-e9c548edf69f" alt="image" /></p>

<p>I will select &ldquo;Emulate&rdquo; as I want to run a amd64 bit architecture, then select &ldquo;Linux&rdquo;:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/58f1485c-9b6a-4703-a2fb-377263c4750c" alt="image" /></p>

<p>In the next step we want to select the Ubuntu ISO image that we downloaded, which we want to use to boot our VM from:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/676b6258-ccab-4e4e-a447-db012a2de1b3" alt="image" /></p>

<p>Browse and select the image that you downloaded, once you selected it, it should show something like this:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/c102f46e-e5df-45f5-9bec-727b67ec1bf2" alt="image" /></p>

<p>Select continue, then select the architecture to <code>x86_64</code>, the system I kept on defaults and the memory I have set to <code>2048MB</code> and cores to <code>2</code> but that is just my preference:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/2c79e154-5fef-46bb-8b10-17e4a837ce0c" alt="image" /></p>

<p>The next screen is to configure storage, as this is for testing I am setting mine to <code>8GB</code>:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/d62730e8-dda7-4324-95bd-6d01532af1da" alt="image" /></p>

<p>The next screen is shared directories, this is purely optional, I have created a directory for this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir ~/utm
</span></code></pre></td></tr></table></div></figure>


<p>Which I&rsquo;ve then defined for a shared directory, but this depends if you need to have shared directories from your local workstation.</p>

<p>The next screen is a summary of your choices and you can name your vm here:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/3dee86f1-8f09-4caa-8cb2-0470352c9e77" alt="image" /></p>

<p>Once you are happy select save, and you should see something like this:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/725951b7-d0ed-4b64-8418-1197415da91a" alt="image" /></p>

<p>You can then select the play button to start your VM.</p>

<p>The console should appear and you can select install or try this vm:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/bf8ed7fe-e7c2-4855-a4c0-cfd98857fbd0" alt="image" /></p>

<p>This will start the installation process of a Linux Server:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/09364ab8-be5a-4c51-9a0f-edea04707802" alt="image" /></p>

<p>Here you can select the options that you would like, I would just recommend to ensure that you select <code>Install OpenSSH Server</code> so that you can connect to your VM via SSH.</p>

<p>Once you get to this screen:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/8204583e-2175-4815-a96b-3c4d8063758a" alt="image" /></p>

<p>The installation process is busy and you will have to wait a couple of minutes for it to complete. Once you see the following screen the installation is complete:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/4c8add6a-fb1e-469e-967f-0c78228eb340" alt="image" /></p>

<p>On the right hand side select the circle, then select CD/DVD and select the ubuntu iso and select eject:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/4c17223e-a755-4742-9b95-ef64dc217264" alt="image" /></p>

<h2>Starting your VM</h2>

<p>Then power off the guest and power on again, then you should get a console login, then you can proceed to login, and view the ip address:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/51d56c64-2be2-4036-836d-579fd1bd6ac2" alt="" /></p>

<h2>SSH to your VM</h2>

<p>Now from your terminal you should be able to ssh to the VM:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/7ee94cb4-73bf-4ddc-9eb3-01fcee68a29f" alt="" /></p>

<p>We can also verify that we are running a 64bit vm, by running <code>uname --processor</code>:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/ed444a85-28c1-44af-88ac-5e956a742f59" alt="" /></p>

<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>

<ul>
<li>Linktree: <a href="https://go.ruan.dev/links">https://go.ruan.dev/links</a></li>
<li>Patreon: <a href="https://go.ruan.dev/patreon">https://go.ruan.dev/patreon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running a Multi-Broker Kafka Cluster on Docker]]></title>
    <link href="https://blog.ruanbekker.com/blog/2023/05/17/running-a-multi-broker-kafka-cluster-on-docker/"/>
    <updated>2023-05-17T10:50:57-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2023/05/17/running-a-multi-broker-kafka-cluster-on-docker</id>
    <content type="html"><![CDATA[<p>In this post we will run a <a href="https://kafka.apache.org/">Kakfa</a> cluster with 3 kafka brokers on docker compose and using a producer to send messages to our topics and a consumer that will receive the messages from the topics, which we will develop in python and explore the <a href="https://github.com/provectus/kafka-ui">kafka-ui</a>.</p>

<h2>What is Kafka?</h2>

<p>Kafka is a distributed event store and stream processing platform. Kafka is used to build real-time streaming data pipelines and real-time streaming applications.</p>

<p>This is a fantastic resource if you want to understand the components better in detail:
- <a href="https://www.upsolver.com/blog/apache-kafka-architecture-what-you-need-to-know">apache-kafka-architecture-what-you-need-to-know</a></p>

<p>But on a high level, the components of a typical Kafka setup:</p>

<ol>
<li>Zookeeper: Kafka relies on Zookeeper to do leadership election of Kafka Brokers and Topic Partitions.</li>
<li>Broker: Kafka server that receives messages from producers, assigns them to offsets and commit the messages to disk storage. A offset is used for data consistency in a event of failure, so that consumers know from where to consume from their last message.</li>
<li>Topic: A topic can be thought of categories to organize messages. Producers writes messages to topics, consumers reads from those topics.</li>
<li>Partitions: A topic is split into multiple partitions. This improves scalability through parallelism (not just one broker). Kafka also does replication</li>
</ol>


<p>For great in detail information about kafka and its components, I encourage you to visit the <a href="https://www.upsolver.com/blog/apache-kafka-architecture-what-you-need-to-know">mentioned post</a> from above.</p>

<h2>Launch Kafka</h2>

<p>This is the <code>docker-compose.yaml</code> that we will be using to run a kafka cluster with 3 broker containers, 1 zookeeper container, 1 producer, 1 consumer and a kafka-ui.</p>

<p>All the source code is available on my <a href="https://github.com/ruanbekker/quick-starts/tree/main/docker/kafka">quick-starts github repository</a> .</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&quot;3.9&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">zookeeper</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">platform</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linux/amd64</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">confluentinc/cp-zookeeper:${CONFLUENT_PLATFORM_VERSION:-7.4.0}</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">zookeeper</span>
</span><span class='line'>    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">unless-stopped</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&#39;32181:32181&#39;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&#39;2888:2888&#39;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&#39;3888:3888&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">ZOOKEEPER_SERVER_ID</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>      <span class="l-Scalar-Plain">ZOOKEEPER_CLIENT_PORT</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">32181</span>
</span><span class='line'>      <span class="l-Scalar-Plain">ZOOKEEPER_TICK_TIME</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2000</span>
</span><span class='line'>      <span class="l-Scalar-Plain">ZOOKEEPER_INIT_LIMIT</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5</span>
</span><span class='line'>      <span class="l-Scalar-Plain">ZOOKEEPER_SYNC_LIMIT</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2</span>
</span><span class='line'>      <span class="l-Scalar-Plain">ZOOKEEPER_SERVERS</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">zookeeper:2888:3888</span>
</span><span class='line'>    <span class="l-Scalar-Plain">healthcheck</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">echo stat | nc localhost 32181</span>
</span><span class='line'>      <span class="l-Scalar-Plain">interval</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10s</span>
</span><span class='line'>      <span class="l-Scalar-Plain">timeout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10s</span>
</span><span class='line'>      <span class="l-Scalar-Plain">retries</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">kafka</span>
</span><span class='line'>    <span class="l-Scalar-Plain">logging</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span> <span class="s">&quot;json-file&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">max-size</span><span class="p-Indicator">:</span> <span class="s">&quot;1m&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">kafka-ui</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">kafka-ui</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">provectuslabs/kafka-ui:latest</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">8080:8080</span>
</span><span class='line'>    <span class="l-Scalar-Plain">depends_on</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">broker-1</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">broker-2</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">broker-3</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_CLUSTERS_0_NAME</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">broker-1</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">broker-1:29091</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_CLUSTERS_0_METRICS_PORT</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">19101</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_CLUSTERS_1_NAME</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">broker-2</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_CLUSTERS_1_BOOTSTRAPSERVERS</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">broker-2:29092</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_CLUSTERS_1_METRICS_PORT</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">19102</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_CLUSTERS_2_NAME</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">broker-3</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_CLUSTERS_2_BOOTSTRAPSERVERS</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">broker-3:29093</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_CLUSTERS_2_METRICS_PORT</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">19103</span>
</span><span class='line'>      <span class="l-Scalar-Plain">DYNAMIC_CONFIG_ENABLED</span><span class="p-Indicator">:</span> <span class="s">&#39;true&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">kafka</span>
</span><span class='line'>    <span class="l-Scalar-Plain">logging</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span> <span class="s">&quot;json-file&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">max-size</span><span class="p-Indicator">:</span> <span class="s">&quot;1m&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">broker-1</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">platform</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linux/amd64</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">confluentinc/cp-kafka:${CONFLUENT_PLATFORM_VERSION:-7.4.0}</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">broker-1</span>
</span><span class='line'>    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">unless-stopped</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&#39;9091:9091&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">depends_on</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">zookeeper</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_BROKER_ID</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_ZOOKEEPER_CONNECT</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">zookeeper:32181</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_INTER_BROKER_LISTENER_NAME</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">INTERNAL</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_ADVERTISED_LISTENERS</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">INTERNAL://broker-1:29091,EXTERNAL://localhost:9091</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_DEFAULT_REPLICATION_FACTOR</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_NUM_PARTITIONS</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_JMX_PORT</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">19101</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_JMX_HOSTNAME</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>    <span class="l-Scalar-Plain">healthcheck</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nc -vz localhost 9091</span>
</span><span class='line'>      <span class="l-Scalar-Plain">interval</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10s</span>
</span><span class='line'>      <span class="l-Scalar-Plain">timeout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10s</span>
</span><span class='line'>      <span class="l-Scalar-Plain">retries</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">kafka</span>
</span><span class='line'>    <span class="l-Scalar-Plain">logging</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span> <span class="s">&quot;json-file&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">max-size</span><span class="p-Indicator">:</span> <span class="s">&quot;1m&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">broker-2</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">platform</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linux/amd64</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">confluentinc/cp-kafka:${CONFLUENT_PLATFORM_VERSION:-7.4.0}</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">broker-2</span>
</span><span class='line'>    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">unless-stopped</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&#39;9092:9092&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">depends_on</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">zookeeper</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_BROKER_ID</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_ZOOKEEPER_CONNECT</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">zookeeper:32181</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_INTER_BROKER_LISTENER_NAME</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">INTERNAL</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_ADVERTISED_LISTENERS</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">INTERNAL://broker-2:29092,EXTERNAL://localhost:9092</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_DEFAULT_REPLICATION_FACTOR</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_NUM_PARTITIONS</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_JMX_PORT</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">19102</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_JMX_HOSTNAME</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>    <span class="l-Scalar-Plain">healthcheck</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nc -vz localhost 9092</span>
</span><span class='line'>      <span class="l-Scalar-Plain">interval</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10s</span>
</span><span class='line'>      <span class="l-Scalar-Plain">timeout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10s</span>
</span><span class='line'>      <span class="l-Scalar-Plain">retries</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">kafka</span>
</span><span class='line'>    <span class="l-Scalar-Plain">logging</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span> <span class="s">&quot;json-file&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">max-size</span><span class="p-Indicator">:</span> <span class="s">&quot;1m&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">broker-3</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">platform</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linux/amd64</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">confluentinc/cp-kafka:${CONFLUENT_PLATFORM_VERSION:-7.4.0}</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">broker-3</span>
</span><span class='line'>    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">unless-stopped</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&#39;9093:9093&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">depends_on</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">zookeeper</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_BROKER_ID</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_ZOOKEEPER_CONNECT</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">zookeeper:32181</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_INTER_BROKER_LISTENER_NAME</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">INTERNAL</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_ADVERTISED_LISTENERS</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">INTERNAL://broker-3:29093,EXTERNAL://localhost:9093</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_DEFAULT_REPLICATION_FACTOR</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_NUM_PARTITIONS</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_JMX_PORT</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">19103</span>
</span><span class='line'>      <span class="l-Scalar-Plain">KAFKA_JMX_HOSTNAME</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>    <span class="l-Scalar-Plain">healthcheck</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nc -vz localhost 9093</span>
</span><span class='line'>      <span class="l-Scalar-Plain">interval</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10s</span>
</span><span class='line'>      <span class="l-Scalar-Plain">timeout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10s</span>
</span><span class='line'>      <span class="l-Scalar-Plain">retries</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">kafka</span>
</span><span class='line'>    <span class="l-Scalar-Plain">logging</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span> <span class="s">&quot;json-file&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">max-size</span><span class="p-Indicator">:</span> <span class="s">&quot;1m&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">producer</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">platform</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linux/amd64</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">producer</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ruanbekker/kafka-producer-consumer:2023-05-17</span>
</span><span class='line'>    <span class="c1"># source: https://github.com/ruanbekker/quick-starts/tree/main/docker/kafka/python-client</span>
</span><span class='line'>    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">always</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ACTION=producer</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">BOOTSTRAP_SERVERS=broker-1:29091,broker-2:29092,broker-3:29093</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">TOPIC=my-topic</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">PYTHONUNBUFFERED=1</span> <span class="c1"># https://github.com/docker/compose/issues/4837#issuecomment-302765592</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">kafka</span>
</span><span class='line'>    <span class="l-Scalar-Plain">depends_on</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">zookeeper</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">broker-1</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">broker-2</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">broker-3</span>
</span><span class='line'>    <span class="l-Scalar-Plain">logging</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span> <span class="s">&quot;json-file&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">max-size</span><span class="p-Indicator">:</span> <span class="s">&quot;1m&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">consumer</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">platform</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linux/amd64</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">consumer</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ruanbekker/kafka-producer-consumer:2023-05-17</span>
</span><span class='line'>    <span class="c1"># source: https://github.com/ruanbekker/quick-starts/tree/main/docker/kafka/python-client</span>
</span><span class='line'>    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">always</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ACTION=consumer</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">BOOTSTRAP_SERVERS=broker-1:29091,broker-2:29092,broker-3:29093</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">TOPIC=my-topic</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">CONSUMER_GROUP=cg-group-id</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">PYTHONUNBUFFERED=1</span> <span class="c1"># https://github.com/docker/compose/issues/4837#issuecomment-302765592</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">kafka</span>
</span><span class='line'>    <span class="l-Scalar-Plain">depends_on</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">zookeeper</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">broker-1</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">broker-2</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">broker-3</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">producer</span>
</span><span class='line'>    <span class="l-Scalar-Plain">logging</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span> <span class="s">&quot;json-file&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">max-size</span><span class="p-Indicator">:</span> <span class="s">&quot;1m&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">kafka</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">kafka</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note</strong>: This docker-compose yaml can be found in my <a href="https://github.com/ruanbekker/quick-starts/tree/main/docker/kafka">kafka quick-starts</a> repository.</p>

<p>In our compose file we defined our core stack:</p>

<ul>
<li>1 Zookeeper Container</li>
<li>3 Kafka Broker Containers</li>
<li>1 Kafka UI</li>
</ul>


<p>Then we have our clients:</p>

<ul>
<li>1 Producer that will send messages to our topics (source code: <a href="https://github.com/ruanbekker/quick-starts/blob/main/docker/kafka/python-client/produce.py">https://github.com/ruanbekker/quick-starts/blob/main/docker/kafka/python-client/produce.py</a> )</li>
<li>1 Consumer that will read the messages from our topics (source code: <a href="https://github.com/ruanbekker/quick-starts/blob/main/docker/kafka/python-client/consume.py">https://github.com/ruanbekker/quick-starts/blob/main/docker/kafka/python-client/consume.py</a> )</li>
</ul>


<p>We can boot the stack with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-compose up -d
</span></code></pre></td></tr></table></div></figure>


<p>You can verify that the brokers are passing their health checks with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-compose ps
</span><span class='line'>
</span><span class='line'>NAME                IMAGE                                           COMMAND                  SERVICE             CREATED             STATUS                   PORTS
</span><span class='line'>broker-1            confluentinc/cp-kafka:7.4.0                     <span class="s2">&quot;/etc/confluent/dock…&quot;</span>   broker-1            <span class="m">5</span> minutes ago       Up <span class="m">4</span> minutes <span class="o">(</span>healthy<span class="o">)</span>   0.0.0.0:9091-&gt;9091/tcp, :::9091-&gt;9091/tcp, 9092/tcp
</span><span class='line'>broker-2            confluentinc/cp-kafka:7.4.0                     <span class="s2">&quot;/etc/confluent/dock…&quot;</span>   broker-2            <span class="m">5</span> minutes ago       Up <span class="m">4</span> minutes <span class="o">(</span>healthy<span class="o">)</span>   0.0.0.0:9092-&gt;9092/tcp, :::9092-&gt;9092/tcp
</span><span class='line'>broker-3            confluentinc/cp-kafka:7.4.0                     <span class="s2">&quot;/etc/confluent/dock…&quot;</span>   broker-3            <span class="m">5</span> minutes ago       Up <span class="m">4</span> minutes <span class="o">(</span>healthy<span class="o">)</span>   9092/tcp, 0.0.0.0:9093-&gt;9093/tcp, :::9093-&gt;9093/tcp
</span><span class='line'>consumer            ruanbekker/kafka-producer-consumer:2023-05-17   <span class="s2">&quot;sh /src/run.sh $ACT…&quot;</span>   consumer            <span class="m">5</span> minutes ago       Up <span class="m">4</span> minutes
</span><span class='line'>kafka-ui            provectuslabs/kafka-ui:latest                   <span class="s2">&quot;/bin/sh -c &#39;java --…&quot;</span>   kafka-ui            <span class="m">5</span> minutes ago       Up <span class="m">4</span> minutes             0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp
</span><span class='line'>producer            ruanbekker/kafka-producer-consumer:2023-05-17   <span class="s2">&quot;sh /src/run.sh $ACT…&quot;</span>   producer            <span class="m">5</span> minutes ago       Up <span class="m">4</span> minutes
</span><span class='line'>zookeeper           confluentinc/cp-zookeeper:7.4.0                 <span class="s2">&quot;/etc/confluent/dock…&quot;</span>   zookeeper           <span class="m">5</span> minutes ago       Up <span class="m">5</span> minutes <span class="o">(</span>healthy<span class="o">)</span>   0.0.0.0:2888-&gt;2888/tcp, :::2888-&gt;2888/tcp, 0.0.0.0:3888-&gt;3888/tcp, :::3888-&gt;3888/tcp, 2181/tcp, 0.0.0.0:32181-&gt;32181/tcp, :::32181-&gt;32181/tcp
</span></code></pre></td></tr></table></div></figure>


<h2>Producers and Consumers</h2>

<p>The producer generates random data and sends it to a topic, where the consumer will listen on the same topic and read messages from that topic.</p>

<p>To view the output of what the <code>producer</code> is doing, you can tail the logs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker logs -f producer
</span><span class='line'>
</span><span class='line'>setting up producer, checking <span class="k">if</span> brokers are available
</span><span class='line'>brokers not available yet
</span><span class='line'>brokers are available and ready to produce messages
</span><span class='line'>message sent to kafka with squence id of 1
</span><span class='line'>message sent to kafka with squence id of 2
</span><span class='line'>message sent to kafka with squence id of 3
</span></code></pre></td></tr></table></div></figure>


<p>And to view the output of what the <code>consumer</code> is doing, you can tail the logs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker logs -f consumer
</span><span class='line'>
</span><span class='line'>starting consumer, checks <span class="k">if</span> brokers are availabe
</span><span class='line'>brokers not availbe yet
</span><span class='line'>brokers are available and ready to consume messages
</span><span class='line'><span class="o">{</span><span class="s1">&#39;sequence_id&#39;</span>: 10, <span class="s1">&#39;user_id&#39;</span>: <span class="s1">&#39;20520&#39;</span>, <span class="s1">&#39;transaction_id&#39;</span>: <span class="s1">&#39;4026fd10-2aca-4d2e-8bd2-8ef0201af2dd&#39;</span>, <span class="s1">&#39;product_id&#39;</span>: <span class="s1">&#39;17974&#39;</span>, <span class="s1">&#39;address&#39;</span>: <span class="s1">&#39;71741 Lopez Throughway | South John | BT&#39;</span>, <span class="s1">&#39;signup_at&#39;</span>: <span class="s1">&#39;2023-05-11 06:54:52&#39;</span>, <span class="s1">&#39;platform_id&#39;</span>: <span class="s1">&#39;Tablet&#39;</span>, <span class="s1">&#39;message&#39;</span>: <span class="s1">&#39;transaction made by userid 119740995334901&#39;</span><span class="o">}</span>
</span><span class='line'><span class="o">{</span><span class="s1">&#39;sequence_id&#39;</span>: 11, <span class="s1">&#39;user_id&#39;</span>: <span class="s1">&#39;78172&#39;</span>, <span class="s1">&#39;transaction_id&#39;</span>: <span class="s1">&#39;4089cee1-0a58-4d9b-9489-97b6bc4b768f&#39;</span>, <span class="s1">&#39;product_id&#39;</span>: <span class="s1">&#39;21477&#39;</span>, <span class="s1">&#39;address&#39;</span>: <span class="s1">&#39;735 Jasmine Village Apt. 009 | South Deniseland | BN&#39;</span>, <span class="s1">&#39;signup_at&#39;</span>: <span class="s1">&#39;2023-05-17 09:54:10&#39;</span>, <span class="s1">&#39;platform_id&#39;</span>: <span class="s1">&#39;Tablet&#39;</span>, <span class="s1">&#39;message&#39;</span>: <span class="s1">&#39;transaction made by userid 159204336307945&#39;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Kafka UI</h2>

<p>The Kafka UI will be available on <a href="http://localhost:8080">http://localhost:8080</a></p>

<p>Where we can view lots of information, but in the below screenshot we can see our topics:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/5da40db5-a56a-4c7b-8f8c-929568e9eb81" alt="image" /></p>

<p>And when we look at the <code>my-topic</code>, we can see a overview dashboard of our topic information:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/f9feb32f-5828-41a5-91f5-9d614feb8e7c" alt="image" /></p>

<p>We can also look at the messages in our topic, and also search for messages:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/48f58970-d665-4bd5-8e76-5a770e885993" alt="image" /></p>

<p>And we can also look at the current consumers:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/68a25d64-9899-4073-ae02-76becc4c149a" alt="image" /></p>

<h2>Resources</h2>

<p>My Quick-Starts Github Repository:</p>

<ul>
<li><a href="https://github.com/ruanbekker/quick-starts">https://github.com/ruanbekker/quick-starts</a></li>
</ul>


<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>

<ul>
<li>Linktree: <a href="https://go.ruan.dev/links">https://go.ruan.dev/links</a></li>
<li>Patreon: <a href="https://go.ruan.dev/patreon">https://go.ruan.dev/patreon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manage Helm Releases With Terraform]]></title>
    <link href="https://blog.ruanbekker.com/blog/2023/03/09/manage-helm-releases-with-terraform/"/>
    <updated>2023-03-09T16:15:47-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2023/03/09/manage-helm-releases-with-terraform</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/224163430-34e18f11-2182-4d2b-b7ab-f4683c187719.png" alt="helm-releases-with-terraform" /></p>

<p>In this post we will use terraform to deploy a helm release to kubernetes.</p>

<h2>Kubernetes</h2>

<p>For this demonstration I will be using <a href="https://kind.sigs.k8s.io/">kind</a> to deploy a local Kubernetes cluster to the operating system that I am running this on, which will be Ubuntu Linux. For a more in-depth tutorial on Kind, you can see my post on <a href="https://blog.ruanbekker.com/blog/2022/09/20/kind-for-local-kubernetes-clusters/">Kind for Local Kubernetes Clusters</a>.</p>

<h2>Installing the Pre-Requirements</h2>

<p>We will be installing terraform, docker, kind and kubectl on Linux.</p>

<p>Install terraform:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget https://releases.hashicorp.com/terraform/1.3.0/terraform_1.3.0_linux_amd64.zip
</span><span class='line'>unzip terraform_1.3.0_linux_amd64.zip
</span><span class='line'>rm terraform_1.3.0_linux_amd64.zip
</span><span class='line'>mv terraform /usr/bin/terraform
</span></code></pre></td></tr></table></div></figure>


<p>Verify that terraform has been installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform -version
</span></code></pre></td></tr></table></div></figure>


<p>Which in my case returns:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Terraform v1.3.0
</span><span class='line'>on linux_amd64
</span></code></pre></td></tr></table></div></figure>


<p>Install Docker on Linux (be careful to curl pipe bash - trust the scripts that you are running):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl https://get.docker.com <span class="p">|</span> bash
</span></code></pre></td></tr></table></div></figure>


<p>Then running <code>docker ps</code> should return:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>CONTAINER ID   IMAGE        COMMAND         CREATED          STATUS          PORTS       NAMES
</span></code></pre></td></tr></table></div></figure>


<p>Install kind on Linux:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apt update
</span><span class='line'>curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-amd64
</span><span class='line'>chmod +x ./kind
</span><span class='line'>sudo mv ./kind /usr/local/bin/kind
</span></code></pre></td></tr></table></div></figure>


<p>Then to verify that kind was installed with <code>kind --version</code> should return:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kind version 0.17.0
</span></code></pre></td></tr></table></div></figure>


<p>Create a kubernetes cluster using kind:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kind create cluster --name rbkr --image kindest/node:v1.24.0
</span></code></pre></td></tr></table></div></figure>


<p>Now install <a href="https://kubernetes.io/docs/tasks/tools/">kubectl</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -LO <span class="s2">&quot;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl&quot;</span>
</span><span class='line'>sudo install -o root -g root -m <span class="m">0755</span> kubectl /usr/local/bin/kubectl
</span></code></pre></td></tr></table></div></figure>


<p>Then to verify that kubectl was installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl version --client
</span></code></pre></td></tr></table></div></figure>


<p>Which in my case returns:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Client Version: version.Info<span class="o">{</span>Major:<span class="s2">&quot;1&quot;</span>, Minor:<span class="s2">&quot;26&quot;</span>, GitVersion:<span class="s2">&quot;v1.26.1&quot;</span>, GitCommit:<span class="s2">&quot;8f94681cd294aa8cfd3407b8191f6c70214973a4&quot;</span>, GitTreeState:<span class="s2">&quot;clean&quot;</span>, BuildDate:<span class="s2">&quot;2023-01-18T15:58:16Z&quot;</span>, GoVersion:<span class="s2">&quot;go1.19.5&quot;</span>, Compiler:<span class="s2">&quot;gc&quot;</span>, Platform:<span class="s2">&quot;linux/amd64&quot;</span><span class="o">}</span>
</span><span class='line'>Kustomize Version: v4.5.7
</span></code></pre></td></tr></table></div></figure>


<p>Now we can test if kubectl can communicate with the kubernetes api server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl get nodes
</span></code></pre></td></tr></table></div></figure>


<p>In my case it returns:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>NAME                 STATUS   ROLES           AGE     VERSION
</span><span class='line'>rbkr-control-plane   Ready    control-plane   6m20s   v1.24.0
</span></code></pre></td></tr></table></div></figure>


<h2>Terraform</h2>

<p>Now that our pre-requirements are sorted we can configure terraform to communicate with kubernetes. For that to happen, we need to consult the <a href="https://registry.terraform.io/providers/hashicorp/kubernetes/latest/docs">terraform kubernetes provider</a>&rsquo;s documentation.</p>

<p>As per their documentation they provide us with this snippet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform <span class="o">{</span>
</span><span class='line'>  required_providers <span class="o">{</span>
</span><span class='line'>    <span class="nv">kubernetes</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="nb">source</span> <span class="o">=</span> <span class="s2">&quot;hashicorp/kubernetes&quot;</span>
</span><span class='line'>      <span class="nv">version</span> <span class="o">=</span> <span class="s2">&quot;2.18.0&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>provider <span class="s2">&quot;kubernetes&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="c"># Configuration options</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And from their <a href="https://registry.terraform.io/providers/hashicorp/kubernetes/latest/docs">main</a> page, it gives us a couple of options to configure the provider and the easiest is probably to read the <code>~/.kube/config</code> configuration file.</p>

<p>But in cases where you have multiple configurations in your kube config file, this might not be ideal, and I like to be precise, so I will extract the client certificate, client key and cluster ca certificate and endpoint from our <code>~/.kube/config</code> file.</p>

<p>If we run <code>cat ~/.kube/config</code> we will see something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">v1</span>
</span><span class='line'><span class="l-Scalar-Plain">clusters</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">cluster</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">certificate-authority-data</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">LS0tLS1CRU......FURS0tLS0tCg==</span>
</span><span class='line'>    <span class="l-Scalar-Plain">server</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://127.0.0.1:40305</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">kind-rbkr</span>
</span><span class='line'><span class="l-Scalar-Plain">contexts</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">context</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">cluster</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">kind-rbkr</span>
</span><span class='line'>    <span class="l-Scalar-Plain">user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">kind-rbkr</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">kind-rbkr</span>
</span><span class='line'><span class="l-Scalar-Plain">current-context</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">kind-rbkr</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Config</span>
</span><span class='line'><span class="l-Scalar-Plain">preferences</span><span class="p-Indicator">:</span> <span class="p-Indicator">{}</span>
</span><span class='line'><span class="l-Scalar-Plain">users</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">kind-rbkr</span>
</span><span class='line'>  <span class="l-Scalar-Plain">user</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">client-certificate-data</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">LS0tLS1CRX......FURS0tLS0tCg==</span>
</span><span class='line'>    <span class="l-Scalar-Plain">client-key-data</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">LS0tLS1CRUejhKWUk2N2.....S0tCg==</span>
</span></code></pre></td></tr></table></div></figure>


<p>First we will create a directory for our certificates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir ~/certs
</span></code></pre></td></tr></table></div></figure>


<p>I have truncated my kube config for readability, but for our first file <code>certs/client-cert.pem</code> we will copy the value of <code>client-certificate-data:</code>, which will look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat certs/client-cert.pem
</span><span class='line'>LS0tLS1CRX......FURS0tLS0tCg<span class="o">==</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we will copy the contents of <code>client-key-data:</code> into <code>certs/client-key.pem</code> and then lastly the content of <code>certificate-authority-data:</code> into <code>certs/cluster-ca-cert.pem</code>.</p>

<p>So then we should have the following files inside our <code>certs/</code> directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tree certs/
</span><span class='line'>certs/
</span><span class='line'>├── client-cert.pem
</span><span class='line'>├── client-key.pem
</span><span class='line'>└── cluster-ca-cert.pem
</span><span class='line'>
</span><span class='line'><span class="m">0</span> directories, <span class="m">3</span> files
</span></code></pre></td></tr></table></div></figure>


<p>Now make them read only:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chmod <span class="m">400</span> ~/certs/*
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have that we can start writing our terraform configuration. In <code>providers.tf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform <span class="o">{</span>
</span><span class='line'>  required_providers <span class="o">{</span>
</span><span class='line'>    <span class="nv">kubernetes</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="nb">source</span> <span class="o">=</span> <span class="s2">&quot;hashicorp/kubernetes&quot;</span>
</span><span class='line'>      <span class="nv">version</span> <span class="o">=</span> <span class="s2">&quot;2.18.0&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>provider <span class="s2">&quot;kubernetes&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">host</span>                   <span class="o">=</span> <span class="s2">&quot;https://127.0.0.1:40305&quot;</span>
</span><span class='line'>  <span class="nv">client_certificate</span>     <span class="o">=</span> base64decode<span class="o">(</span>file<span class="o">(</span><span class="s2">&quot;~/certs/client-cert.pem&quot;</span><span class="o">))</span>
</span><span class='line'>  <span class="nv">client_key</span>             <span class="o">=</span> base64decode<span class="o">(</span>file<span class="o">(</span><span class="s2">&quot;~/certs/client-key.pem&quot;</span><span class="o">))</span>
</span><span class='line'>  <span class="nv">cluster_ca_certificate</span> <span class="o">=</span> base64decode<span class="o">(</span>file<span class="o">(</span><span class="s2">&quot;~/certs/cluster-ca-cert.pem&quot;</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your host might look different to mine, but you can find your host endpoint in <code>~/.kube/config</code>.</p>

<p>For a simple test we can list all our namespaces to ensure that our configuration is working. In a file called <code>namespaces.tf</code>, we can populate the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>data <span class="s2">&quot;kubernetes_all_namespaces&quot;</span> <span class="s2">&quot;allns&quot;</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>output <span class="s2">&quot;all-ns&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">value</span> <span class="o">=</span> data.kubernetes_all_namespaces.allns.namespaces
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to initialize terraform so that it can download the providers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform init
</span></code></pre></td></tr></table></div></figure>


<p>Then we can run a plan which will reveal our namespaces:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform plan
</span><span class='line'>
</span><span class='line'>data.kubernetes_all_namespaces.allns: Reading...
</span><span class='line'>data.kubernetes_all_namespaces.allns: Read <span class="nb">complete </span>after 0s <span class="o">[</span><span class="nv">id</span><span class="o">=</span>a0ff7e83ffd7b2d9953abcac9f14370e842bdc8f126db1b65a18fd09faa3347b<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Changes to Outputs:
</span><span class='line'>  + all-ns <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>      + <span class="s2">&quot;default&quot;</span>,
</span><span class='line'>      + <span class="s2">&quot;kube-node-lease&quot;</span>,
</span><span class='line'>      + <span class="s2">&quot;kube-public&quot;</span>,
</span><span class='line'>      + <span class="s2">&quot;kube-system&quot;</span>,
</span><span class='line'>      + <span class="s2">&quot;local-path-storage&quot;</span>,
</span><span class='line'>    <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now remove our <code>namespaces.tf</code> as our test worked:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rm namespaces.tf
</span></code></pre></td></tr></table></div></figure>


<h2>Helm Releases with Terraform</h2>

<p>We will need two things, we need to consult the <a href="https://registry.terraform.io/providers/hashicorp/helm/latest/docs/resources/release">terraform helm release provider</a> documentation and we also need to consult the helm chart documentation which we are interested in.</p>

<p>In my previous post I wrote about <a href="https://blog.ruanbekker.com/blog/2023/01/24/everything-you-need-to-know-about-helm/">Everything you need to know about Helm</a> and I used the <a href="https://artifacthub.io/packages/helm/bitnami/nginx">Bitnami Nginx Helm Chart</a>, so we will use that one again.</p>

<p>As we are working with helm releases, we need to configure the helm provider, I will just extend my configuration from my previous provider config in <code>providers.tf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform <span class="o">{</span>
</span><span class='line'>  required_providers <span class="o">{</span>
</span><span class='line'>    <span class="nv">kubernetes</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="nb">source</span> <span class="o">=</span> <span class="s2">&quot;hashicorp/kubernetes&quot;</span>
</span><span class='line'>      <span class="nv">version</span> <span class="o">=</span> <span class="s2">&quot;2.18.0&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nv">helm</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="nb">source</span> <span class="o">=</span> <span class="s2">&quot;hashicorp/helm&quot;</span>
</span><span class='line'>      <span class="nv">version</span> <span class="o">=</span> <span class="s2">&quot;2.9.0&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>provider <span class="s2">&quot;kubernetes&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">host</span>                   <span class="o">=</span> <span class="s2">&quot;https://127.0.0.1:40305&quot;</span>
</span><span class='line'>  <span class="nv">client_certificate</span>     <span class="o">=</span> base64decode<span class="o">(</span>file<span class="o">(</span><span class="s2">&quot;~/certs/client-cert.pem&quot;</span><span class="o">))</span>
</span><span class='line'>  <span class="nv">client_key</span>             <span class="o">=</span> base64decode<span class="o">(</span>file<span class="o">(</span><span class="s2">&quot;~/certs/client-key.pem&quot;</span><span class="o">))</span>
</span><span class='line'>  <span class="nv">cluster_ca_certificate</span> <span class="o">=</span> base64decode<span class="o">(</span>file<span class="o">(</span><span class="s2">&quot;~/certs/cluster-ca-cert.pem&quot;</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>provider <span class="s2">&quot;helm&quot;</span> <span class="o">{</span>
</span><span class='line'>  kubernetes <span class="o">{</span>
</span><span class='line'>    <span class="nv">host</span>                   <span class="o">=</span> <span class="s2">&quot;https://127.0.0.1:40305&quot;</span>
</span><span class='line'>    <span class="nv">client_certificate</span>     <span class="o">=</span> base64decode<span class="o">(</span>file<span class="o">(</span><span class="s2">&quot;~/certs/client-cert.pem&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="nv">client_key</span>             <span class="o">=</span> base64decode<span class="o">(</span>file<span class="o">(</span><span class="s2">&quot;~/certs/client-key.pem&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="nv">cluster_ca_certificate</span> <span class="o">=</span> base64decode<span class="o">(</span>file<span class="o">(</span><span class="s2">&quot;~/certs/cluster-ca-cert.pem&quot;</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We will create three terraform files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>touch <span class="o">{</span>main,outputs,variables<span class="o">}</span>.tf
</span></code></pre></td></tr></table></div></figure>


<p>And our values yaml in <code>helm-chart/nginx/values.yaml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p helm-chart/nginx
</span></code></pre></td></tr></table></div></figure>


<p>Then you can copy the values file from <a href="https://artifacthub.io/packages/helm/bitnami/nginx?modal=values">https://artifacthub.io/packages/helm/bitnami/nginx?modal=values</a> into <code>helm-chart/nginx/values.yaml</code>.</p>

<p>In our <code>main.tf</code> I will use two ways to override values in our <code>values.yaml</code> using <code>set</code> and <code>templatefile</code>. The reason for the templatefile, is when we want to fetch a value and want to replace the content with our values file, it could be used when we retrieve a value from a data source as an example. In my example im just using a variable.</p>

<p>We will have the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>resource <span class="s2">&quot;helm_release&quot;</span> <span class="s2">&quot;nginx&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">name</span>             <span class="o">=</span> var.release_name
</span><span class='line'>  <span class="nv">version</span>          <span class="o">=</span> var.chart_version
</span><span class='line'>  <span class="nv">namespace</span>        <span class="o">=</span> var.namespace
</span><span class='line'>  <span class="nv">create_namespace</span> <span class="o">=</span> var.create_namespace
</span><span class='line'>  <span class="nv">chart</span>            <span class="o">=</span> var.chart_name
</span><span class='line'>  <span class="nv">repository</span>       <span class="o">=</span> var.chart_repository_url
</span><span class='line'>  <span class="nv">dependency_update</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nb">  </span><span class="nv">reuse_values</span>      <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nb">  </span><span class="nv">force_update</span>      <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nb">  </span><span class="nv">atomic</span>              <span class="o">=</span> var.atomic
</span><span class='line'>
</span><span class='line'>  <span class="nb">set</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">name</span>  <span class="o">=</span> <span class="s2">&quot;image.tag&quot;</span>
</span><span class='line'>    <span class="nv">value</span> <span class="o">=</span> <span class="s2">&quot;1.23.3-debian-11-r3&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">set</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">name</span>  <span class="o">=</span> <span class="s2">&quot;service.type&quot;</span>
</span><span class='line'>    <span class="nv">value</span> <span class="o">=</span> <span class="s2">&quot;ClusterIP&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">values</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    templatefile<span class="o">(</span><span class="s2">&quot;${path.module}/helm-chart/nginx/values.yaml&quot;</span>, <span class="o">{</span>
</span><span class='line'>      <span class="nv">NAME_OVERRIDE</span>   <span class="o">=</span> var.release_name
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">)]</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see we are referencing a <code>NAME_OVERRIDE</code> in our <code>values.yaml</code>, I have cleaned up the values file to the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">nameOverride</span><span class="p-Indicator">:</span> <span class="s">&quot;${NAME_OVERRIDE}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">## ref: https://hub.docker.com/r/bitnami/nginx/tags/</span>
</span><span class='line'><span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">registry</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker.io</span>
</span><span class='line'>  <span class="l-Scalar-Plain">repository</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bitnami/nginx</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tag</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1.23.3-debian-11-r3</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>NAME_OVERRIDE</code> must be in a <code>${}</code> format.</p>

<p>In our <code>variables.tf</code> we will have the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">variable &quot;release_name&quot; {</span>
</span><span class='line'>  <span class="l-Scalar-Plain">type        = string</span>
</span><span class='line'>  <span class="l-Scalar-Plain">default     = &quot;nginx&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">description = &quot;The name of our release.&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">}</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">variable &quot;chart_repository_url&quot; {</span>
</span><span class='line'>  <span class="l-Scalar-Plain">type        = string</span>
</span><span class='line'>  <span class="l-Scalar-Plain">default     = &quot;https://charts.bitnami.com/bitnami&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">description = &quot;The chart repository url.&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">}</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">variable &quot;chart_name&quot; {</span>
</span><span class='line'>  <span class="l-Scalar-Plain">type        = string</span>
</span><span class='line'>  <span class="l-Scalar-Plain">default     = &quot;nginx&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">description = &quot;The name of of our chart that we want to install from the repository.&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">}</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">variable &quot;chart_version&quot; {</span>
</span><span class='line'>  <span class="l-Scalar-Plain">type        = string</span>
</span><span class='line'>  <span class="l-Scalar-Plain">default     = &quot;13.2.20&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">description = &quot;The version of our chart.&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">}</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">variable &quot;namespace&quot; {</span>
</span><span class='line'>  <span class="l-Scalar-Plain">type        = string</span>
</span><span class='line'>  <span class="l-Scalar-Plain">default     = &quot;apps&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">description = &quot;The namespace where our release should be deployed into.&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">}</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">variable &quot;create_namespace&quot; {</span>
</span><span class='line'>  <span class="l-Scalar-Plain">type        = bool</span>
</span><span class='line'>  <span class="l-Scalar-Plain">default     = true</span>
</span><span class='line'>  <span class="l-Scalar-Plain">description = &quot;If it should create the namespace if it doesnt exist.&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">}</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">variable &quot;atomic&quot; {</span>
</span><span class='line'>  <span class="l-Scalar-Plain">type        = bool</span>
</span><span class='line'>  <span class="l-Scalar-Plain">default     = false</span>
</span><span class='line'>  <span class="l-Scalar-Plain">description = &quot;If it should wait until release is deployed.&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And lastly our <code>outputs.tf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">output &quot;metadata&quot; {</span>
</span><span class='line'>  <span class="l-Scalar-Plain">value = helm_release.nginx.metadata</span>
</span><span class='line'><span class="l-Scalar-Plain">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have all our configuration ready, we can initialize terraform:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform init
</span></code></pre></td></tr></table></div></figure>


<p>Then we can run a plan to see what terraform wants to deploy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform plan
</span></code></pre></td></tr></table></div></figure>


<p>The plan output shows the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
</span><span class='line'>  + create
</span><span class='line'>
</span><span class='line'>Terraform will perform the following actions:
</span><span class='line'>
</span><span class='line'>  <span class="c"># helm_release.nginx will be created</span>
</span><span class='line'>  + resource <span class="s2">&quot;helm_release&quot;</span> <span class="s2">&quot;nginx&quot;</span> <span class="o">{</span>
</span><span class='line'>      + <span class="nv">atomic</span>                     <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>      + <span class="nv">chart</span>                      <span class="o">=</span> <span class="s2">&quot;nginx&quot;</span>
</span><span class='line'>      + <span class="nv">cleanup_on_fail</span>            <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>      + <span class="nv">create_namespace</span>           <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>      + <span class="nv">dependency_update</span>          <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>      + <span class="nv">disable_crd_hooks</span>          <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>      + <span class="nv">disable_openapi_validation</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>      + <span class="nv">disable_webhooks</span>           <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>      + <span class="nv">force_update</span>               <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>      + <span class="nv">id</span>                         <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">lint</span>                       <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>      + <span class="nv">manifest</span>                   <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">max_history</span>                <span class="o">=</span> 0
</span><span class='line'>      + <span class="nv">metadata</span>                   <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>      + <span class="nv">name</span>                       <span class="o">=</span> <span class="s2">&quot;nginx&quot;</span>
</span><span class='line'>      + <span class="nv">namespace</span>                  <span class="o">=</span> <span class="s2">&quot;apps&quot;</span>
</span><span class='line'>      + <span class="nv">pass_credentials</span>           <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>      + <span class="nv">recreate_pods</span>              <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>      + <span class="nv">render_subchart_notes</span>      <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>      + <span class="nv">replace</span>                    <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>      + <span class="nv">repository</span>                 <span class="o">=</span> <span class="s2">&quot;https://charts.bitnami.com/bitnami&quot;</span>
</span><span class='line'>      + <span class="nv">reset_values</span>               <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>      + <span class="nv">reuse_values</span>               <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>      + <span class="nv">skip_crds</span>                  <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>      + <span class="nv">status</span>                     <span class="o">=</span> <span class="s2">&quot;deployed&quot;</span>
</span><span class='line'>      + <span class="nv">timeout</span>                    <span class="o">=</span> 300
</span><span class='line'>      + <span class="nv">values</span>                     <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>          + <span class="s">&lt;&lt;-EOT</span>
</span><span class='line'><span class="s">                nameOverride: &quot;nginx&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s">                ## ref: https://hub.docker.com/r/bitnami/nginx/tags/</span>
</span><span class='line'><span class="s">                image:</span>
</span><span class='line'><span class="s">                  registry: docker.io</span>
</span><span class='line'><span class="s">                  repository: bitnami/nginx</span>
</span><span class='line'><span class="s">                  tag: 1.23.3-debian-11-r3</span>
</span><span class='line'><span class="s">            EOT</span>,
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>      + <span class="nv">verify</span>                     <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>      + <span class="nv">version</span>                    <span class="o">=</span> <span class="s2">&quot;13.2.20&quot;</span>
</span><span class='line'>      + <span class="nb">wait</span>                       <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>      + <span class="nv">wait_for_jobs</span>              <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>
</span><span class='line'>      + <span class="nb">set</span> <span class="o">{</span>
</span><span class='line'>          + <span class="nv">name</span>  <span class="o">=</span> <span class="s2">&quot;image.tag&quot;</span>
</span><span class='line'>          + <span class="nv">value</span> <span class="o">=</span> <span class="s2">&quot;1.23.3-debian-11-r3&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>Plan: <span class="m">1</span> to add, <span class="m">0</span> to change, <span class="m">0</span> to destroy.
</span><span class='line'>
</span><span class='line'>Changes to Outputs:
</span><span class='line'>  + <span class="nv">metadata</span> <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once we are happy with our plan, we can run a apply:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform apply
</span><span class='line'>
</span><span class='line'>Plan: <span class="m">1</span> to add, <span class="m">0</span> to change, <span class="m">0</span> to destroy.
</span><span class='line'>
</span><span class='line'>Changes to Outputs:
</span><span class='line'>  + <span class="nv">metadata</span> <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Do you want to perform these actions?
</span><span class='line'>  Terraform will perform the actions described above.
</span><span class='line'>  Only <span class="s1">&#39;yes&#39;</span> will be accepted to approve.
</span><span class='line'>
</span><span class='line'>  Enter a value: yes
</span><span class='line'>
</span><span class='line'>helm_release.nginx: Creating...
</span><span class='line'>helm_release.nginx: Still creating... <span class="o">[</span>10s elapsed<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="nv">metadata</span> <span class="o">=</span> tolist<span class="o">([</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;app_version&quot;</span> <span class="o">=</span> <span class="s2">&quot;1.23.3&quot;</span>
</span><span class='line'>    <span class="s2">&quot;chart&quot;</span> <span class="o">=</span> <span class="s2">&quot;nginx&quot;</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span> <span class="o">=</span> <span class="s2">&quot;nginx&quot;</span>
</span><span class='line'>    <span class="s2">&quot;namespace&quot;</span> <span class="o">=</span> <span class="s2">&quot;apps&quot;</span>
</span><span class='line'>    <span class="s2">&quot;revision&quot;</span> <span class="o">=</span> 1
</span><span class='line'>    <span class="s2">&quot;values&quot;</span> <span class="o">=</span> <span class="s2">&quot;{\&quot;image\&quot;:{\&quot;registry\&quot;:\&quot;docker.io\&quot;,\&quot;repository\&quot;:\&quot;bitnami/nginx\&quot;,\&quot;tag\&quot;:\&quot;1.23.3-debian-11-r3\&quot;},\&quot;nameOverride\&quot;:\&quot;nginx\&quot;}&quot;</span>
</span><span class='line'>    <span class="s2">&quot;version&quot;</span> <span class="o">=</span> <span class="s2">&quot;13.2.20&quot;</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'><span class="o">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we can verify if the pod is running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl get pods -n apps
</span><span class='line'>NAME                    READY   STATUS    RESTARTS   AGE
</span><span class='line'>nginx-59bdc6465-xdbfh   1/1     Running   <span class="m">0</span>          2m35s
</span></code></pre></td></tr></table></div></figure>


<h2>Importing Helm Releases into Terraform State</h2>

<p>If you have an existing helm release that was deployed with helm and you want to transfer the ownership to terraform, you first need to write the terraform code, then import the resources into terraform state using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform import helm_release.nginx apps/nginx
</span></code></pre></td></tr></table></div></figure>


<p>Where the last argument is <code>&lt;namespace&gt;/&lt;release-name&gt;</code>. Once that is imported you can run terraform plan and apply.</p>

<p>If you want to discover all helm releases managed by helm you can use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl get all -A -l app.kubernetes.io/managed-by<span class="o">=</span>Helm
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>

<ul>
<li>Linktree: <a href="https://go.ruan.dev/links">https://go.ruan.dev/links</a></li>
<li>Patreon: <a href="https://go.ruan.dev/patreon">https://go.ruan.dev/patreon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Persisting Terraform Remote State in Gitlab]]></title>
    <link href="https://blog.ruanbekker.com/blog/2023/03/05/persisting-terraform-remote-state-in-gitlab/"/>
    <updated>2023-03-05T01:43:54-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2023/03/05/persisting-terraform-remote-state-in-gitlab</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/222946002-7cd88466-c584-4ea0-b190-54b1c3052865.png" alt="terraform-state-gitlab" /></p>

<p>In this tutorial we will demonstrate how to persist your terraform state in gitlab managed terraform state, using the terraform http backend.</p>

<p>For detailed information about this consult <a href="https://docs.gitlab.com/ee/user/infrastructure/iac/terraform_state.html">their documentation</a></p>

<h2>What are we doing?</h2>

<p>We will create a terraform pipeline which will run the plan step automatically and a manual step to run the apply step.</p>

<p>During these steps and different pipelines we need to persist our terraform state remotely so that new pipelines can read from our state what we last stored.</p>

<p>Gitlab offers a <a href="https://docs.gitlab.com/ee/user/infrastructure/iac/terraform_state.html">remote backend</a> for our terraform state which we can use, and we will use a basic example of using the random resource.</p>

<h2>Prerequisites</h2>

<p>If you don&rsquo;t see the &ldquo;Infrastructure&rdquo; menu on your left, you need to enable it at &ldquo;Settings&rdquo;, &ldquo;General&rdquo;, &ldquo;Visibility&rdquo;, &ldquo;Project features&rdquo;, &ldquo;Permissions&rdquo; and under &ldquo;Operations&rdquo;, turn on the toggle.</p>

<p>For more information on this see their <a href="https://docs.gitlab.com/ee/user/infrastructure/iac/terraform_state.html#prerequisites">documentation</a></p>

<h2>Authentication</h2>

<p>For this demonstration I created a token which is only scoped for this one project, for this we need a to create a token under, &ldquo;Settings&rdquo;, &ldquo;Access Tokens&rdquo;:</p>

<p><img src="https://user-images.githubusercontent.com/567298/222896148-6b0121fe-fceb-470e-a096-5db03ae0eab9.png" alt="image" /></p>

<p>Select the <code>api</code> under scope:</p>

<p><img src="https://user-images.githubusercontent.com/567298/222896298-fee26e1f-6bcf-4d7c-80eb-ed48ded33bf2.png" alt="image" /></p>

<p>Store the token name and token value as <code>TF_USERNAME</code> and <code>TF_PASSWORD</code> as a CICD variable under &ldquo;Settings&rdquo;, &ldquo;CI/CD&rdquo;, &ldquo;Variables&rdquo;.</p>

<h2>Terraform Code</h2>

<p>We will use a basic <code>random_uuid</code> resource for this demonstration, our <code>main.tf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resource "random_uuid" "uuid" {}
</span><span class='line'>
</span><span class='line'>output "uuid" {
</span><span class='line'>  value       = random_uuid.uuid.result
</span><span class='line'>  sensitive   = false
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Our <code>providers.tf</code>, you will notice the <code>backend "http" {}</code> is what is required for our gitlab remote state:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>terraform {
</span><span class='line'>  required_providers {
</span><span class='line'>    random = {
</span><span class='line'>      source = "hashicorp/random"
</span><span class='line'>      version = "3.4.3"
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>  backend "http" {}
</span><span class='line'>  required_version = "~&gt; 1.3.6"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>provider "random" {}</span></code></pre></td></tr></table></div></figure>


<p>Push that up to gitlab for now.</p>

<h2>Gitlab Pipeline</h2>

<p>Our <code>.gitlab-ci.yml</code> consists of a plan step and a apply step which is a manual step as we first want to review our plan step before we apply.</p>

<p>Our pipeline will only run on the default branch, which in my case is main:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hashicorp/terraform:1.3.6</span>
</span><span class='line'>  <span class="l-Scalar-Plain">entrypoint</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;&quot;</span><span class="p-Indicator">]</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">cache</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">paths</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">.terraform</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">workflow</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">rules</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">if</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">when</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">never</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">variables</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">TF_ADDRESS</span><span class="p-Indicator">:</span> <span class="s">&quot;https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/terraform/state/default-terraform.tfstate&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">stages</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">plan</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">apply</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">.terraform_init</span><span class="p-Indicator">:</span> <span class="nl">&amp;terraform_init</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">terraform init</span>
</span><span class='line'>      <span class="l-Scalar-Plain">-backend-config=address=${TF_ADDRESS}</span>
</span><span class='line'>      <span class="l-Scalar-Plain">-backend-config=lock_address=${TF_ADDRESS}/lock</span>
</span><span class='line'>      <span class="l-Scalar-Plain">-backend-config=unlock_address=${TF_ADDRESS}/lock</span>
</span><span class='line'>      <span class="l-Scalar-Plain">-backend-config=username=${TF_USERNAME}</span>
</span><span class='line'>      <span class="l-Scalar-Plain">-backend-config=password=${TF_PASSWORD}</span>
</span><span class='line'>      <span class="l-Scalar-Plain">-backend-config=lock_method=POST</span>
</span><span class='line'>      <span class="l-Scalar-Plain">-backend-config=unlock_method=DELETE</span>
</span><span class='line'>      <span class="l-Scalar-Plain">-backend-config=retry_wait_min=5</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">terraform:plan</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">stage</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">plan</span>
</span><span class='line'>  <span class="l-Scalar-Plain">artifacts</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">paths</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&#39;**/*.tfplan&#39;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&#39;**/.terraform.lock.hcl&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">before_script</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="nv">*terraform_init</span>
</span><span class='line'>  <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">terraform validate</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">terraform plan -input=false -out default.tfplan</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">terraform:apply</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">stage</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">apply</span>
</span><span class='line'>  <span class="l-Scalar-Plain">artifacts</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">paths</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&#39;**/*.tfplan&#39;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&#39;**/.terraform.lock.hcl&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">before_script</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="nv">*terraform_init</span>
</span><span class='line'>  <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">terraform apply -input=false -auto-approve default.tfplan</span>
</span><span class='line'>  <span class="l-Scalar-Plain">when</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">manual</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where the magic happens is in the <code>terraform init</code> step, that is where we will initialize the terraform state in gitlab, and as you can see we are taking the <code>TF_ADDRESS</code> variable to define the path of our state and in this case our state file will be named <code>default-terraform.tfstate</code>.</p>

<p>If it was a case where you are deploying multiple environments, you can use something like <code>${ENVIRONMENT}-terraform.tfstate</code>.</p>

<p>When we run our pipeline, we can look at our plan step:</p>

<p><img src="https://user-images.githubusercontent.com/567298/222947389-9d9d8d4f-a114-44b5-b183-a2b126ba82b8.png" alt="image" /></p>

<p>Once we are happy with this we can run the manual step and do the apply step, then our pipeline should look like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/222930015-6445a5da-7887-47a6-989e-f33a33b9451a.png" alt="image" /></p>

<p>When we inspect our terraform state in the infrastructure menu, we can see the state file was created:</p>

<p><img src="https://user-images.githubusercontent.com/567298/222901200-2cd0a0f9-6e81-438f-bc74-286778b648d4.png" alt="image" /></p>

<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>

<ul>
<li>Linktree: <a href="https://go.ruan.dev/links">https://go.ruan.dev/links</a></li>
<li>Patreon: <a href="https://go.ruan.dev/patreon">https://go.ruan.dev/patreon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everything You Need to Know About Helm]]></title>
    <link href="https://blog.ruanbekker.com/blog/2023/01/24/everything-you-need-to-know-about-helm/"/>
    <updated>2023-01-24T16:02:22-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2023/01/24/everything-you-need-to-know-about-helm</id>
    <content type="html"><![CDATA[<p><img width="965" alt="image" src="https://user-images.githubusercontent.com/567298/214427983-29601304-9930-40b6-bbc6-e2ce68c04c23.png"></p>

<p>Helm, its one amazing piece of software that I use multiple times per day!</p>

<h2>What is Helm?</h2>

<p>You can think of helm as a package manager for kubernetes, but in fact its much more than that.</p>

<p>Think about it in the following way:</p>

<ul>
<li>Kubernetes Package Manager</li>
<li>Way to templatize your applications (this is the part im super excited about)</li>
<li>Easy way to install applications to your kubernetes cluster</li>
<li>Easy way to do upgrades to your applications</li>
<li>Websites such as artifacthub.io provides a nice interface to lookup any application an how to install or upgrade that application.</li>
</ul>


<h2>How does Helm work?</h2>

<p>Helm uses your kubernetes config to connect to your kubernetes cluster. In most cases it utilises the config defined by the <code>KUBECONFIG</code> environment variable, which in most cases points to <code>~/kube/config</code>.</p>

<p>If you want to follow along, you can view the following blog post to provision a kubernetes cluster locally:</p>

<ul>
<li><a href="https://blog.ruanbekker.com/blog/2022/09/20/kind-for-local-kubernetes-clusters/">https://blog.ruanbekker.com/blog/2022/09/20/kind-for-local-kubernetes-clusters/</a></li>
</ul>


<p>Once you have provisioned your kubernetes cluster locally, you can proceed to <a href="https://helm.sh/docs/intro/install/">install helm</a>, I will make the assumption that you are using Mac:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install helm
</span></code></pre></td></tr></table></div></figure>


<p>Once helm has been installed, you can test the installation by listing any helm releases, by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>helm list
</span></code></pre></td></tr></table></div></figure>


<h2>Helm Charts</h2>

<p>Helm uses a packaging format called charts, which is a collection of files that describes a related set of kubernetes resources. A sinlge helm chart m
ight be used to deploy something simple such as a deployment or something complex that deploys a deployment, ingress, horizontal pod autoscaler, etc.</p>

<h2>Using Helm to deploy applications</h2>

<p>So let&rsquo;s assume that we have our kubernetes cluster deployed, and now we are ready to deploy some applications to kubernetes, but we are unsure on how we would do that.</p>

<p>Let&rsquo;s assume we want to install Nginx.</p>

<p>First we would navigate to <a href="https://artifacthub.io">artifacthub.io</a>, which is a repository that holds a bunch of helm charts and the information on how to deploy helm charts to our cluster.</p>

<p>Then we would search for Nginx, which would ultimately let us land on:</p>

<ul>
<li><a href="https://artifacthub.io/packages/helm/bitnami/nginx">https://artifacthub.io/packages/helm/bitnami/nginx</a></li>
</ul>


<p>On this view, we have super useful information such as how to use this helm chart, the default values, etc.</p>

<p>Now that we have identified the chart that we want to install, we can have a look at their readme, which will indicate how to install the chart:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm repo add my-repo https://charts.bitnami.com/bitnami
</span><span class='line'><span class="nv">$ </span>helm install my-release my-repo/nginx
</span></code></pre></td></tr></table></div></figure>


<p>But before we do that, if we think about it, we add a repository, then before we install a release, we could first find information such as the release versions, etc.</p>

<p>So the way I would do it, is to first add the repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm repo add bitnami https://charts.bitnami.com/bitnami
</span></code></pre></td></tr></table></div></figure>


<p>Then since we have added the repository, we can update our repository to ensure that we have the latest release versions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm repo update
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have updated our local repositories, we want to find the release versions, and we can do that by listing the repository in question. For example, if we don&rsquo;t know the application name, we can search by the repository name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm search repo bitnami/ --versions
</span></code></pre></td></tr></table></div></figure>


<p>In this case we will get an output of all the applications that is currently being hosted by Bitnami.</p>

<p>If we know the repository and the release name, we can extend our search by using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm search repo bitnami/nginx --versions
</span></code></pre></td></tr></table></div></figure>


<p>In this case we get an output of all the Nginx release versions that is currently hosted by Bitnami.</p>

<h2>Installing a Helm Release</h2>

<p>Now that we have received a response from <code>helm search repo</code>, we can see that we have different release versions, as example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>NAME                             CHART VERSION   APP VERSION DESCRIPTION
</span><span class='line'>bitnami/nginx                     13.2.22         1.23.3      NGINX Open Source is a web server that can be a...
</span><span class='line'>bitnami/nginx                     13.2.21         1.23.3      NGINX Open Source is a web server that can be a...
</span></code></pre></td></tr></table></div></figure>


<p>For each helm chart, the chart has default values which means, when we install the helm release it will use the default values which is defined by the helm chart.</p>

<p>We have the concept of overriding the default values with a yaml configuration file we usually refer to <code>values.yaml</code>, that we can define the values that we want to override our default values with.</p>

<p>To get the current default values, we can use <code>helm show values</code>, which will look like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm show values bitnami/nginx --version 13.2.22
</span></code></pre></td></tr></table></div></figure>


<p>That will output to standard out, but we can redirect the output to a file using the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm show values bitnami/nginx --version 13.2.22 &gt; nginx-values.yaml
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have redirected the output to <code>nginx-values.yaml</code>, we can inspect the default values using <code>cat nginx-values.yaml</code>, and any values that we see that we want to override, we can edit the yaml file and once we are done we can save it.</p>

<p>Now that we have our override values, we can install a release to our kubernetes cluster.</p>

<p>Let&rsquo;s assume we want to install nginx to our cluster under the name <code>my-nginx</code> and we want to deploy it to the namespace called <code>web-servers</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm upgrade --install my-nginx bitnami/nginx --values nginx-values.yaml --namespace web-servers --create-namespace --version 13.2.22
</span></code></pre></td></tr></table></div></figure>


<p>In the example above, we defined the following:</p>

<ul>
<li><code>upgrade --install</code>                          - meaning we are installing a release, if already exists, do an upgrade</li>
<li><code>my-nginx</code>                                   - use the release name <code>my-nginx</code></li>
<li><code>bitnami/nginx</code>                              - use the repository and chart named nginx</li>
<li><code>--values nginx-values.yaml</code>                 - define the values file with the overrides</li>
<li><code>--namespace web-servers --create-namespace</code> - define the namespace where the release will be installed to, and create the namespace if not exists</li>
<li><code>--version 13.2.22</code>                          - specify the version of the chart to be installed</li>
</ul>


<h2>Information about the release</h2>

<p>We can view information about our release by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm list -n web-servers
</span></code></pre></td></tr></table></div></figure>


<h2>Creating your own helm charts</h2>

<p>It&rsquo;s very common to create your own helm charts when you follow a common pattern in a microservice architecture or something else, where you only want to override specific values such as the container image, etc.</p>

<p>In this case we can create our own helm chart using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir ~/charts
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/charts
</span><span class='line'><span class="nv">$ </span>helm create my-chart
</span></code></pre></td></tr></table></div></figure>


<p>This will create a scaffoliding project with the required information that we need to create our own helm chart. If we look at a tree view, it will look like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tree .
</span><span class='line'>.
</span><span class='line'>└── my-chart
</span><span class='line'>    ├── Chart.yaml
</span><span class='line'>    ├── charts
</span><span class='line'>    ├── templates
</span><span class='line'>    │   ├── NOTES.txt
</span><span class='line'>    │   ├── _helpers.tpl
</span><span class='line'>    │   ├── deployment.yaml
</span><span class='line'>    │   ├── hpa.yaml
</span><span class='line'>    │   ├── ingress.yaml
</span><span class='line'>    │   ├── service.yaml
</span><span class='line'>    │   ├── serviceaccount.yaml
</span><span class='line'>    │   └── tests
</span><span class='line'>    │       └── <span class="nb">test</span>-connection.yaml
</span><span class='line'>    └── values.yaml
</span><span class='line'>
</span><span class='line'><span class="m">4</span> directories, <span class="m">10</span> files
</span></code></pre></td></tr></table></div></figure>


<p>This example chart can already be used, to see what this chart will produce when running it with helm, we can use the <code>helm template</code> command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>my-chart
</span><span class='line'><span class="nv">$ </span>helm template example . --values values.yaml
</span></code></pre></td></tr></table></div></figure>


<p>The output will be something like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="c1"># Source: my-chart/templates/deployment.yaml</span>
</span><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">apps/v1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Deployment</span>
</span><span class='line'><span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">example-my-chart</span>
</span><span class='line'>  <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">helm.sh/chart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-chart-0.1.0</span>
</span><span class='line'>    <span class="l-Scalar-Plain">app.kubernetes.io/name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-chart</span>
</span><span class='line'>    <span class="l-Scalar-Plain">app.kubernetes.io/instance</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">example</span>
</span><span class='line'>    <span class="l-Scalar-Plain">app.kubernetes.io/version</span><span class="p-Indicator">:</span> <span class="s">&quot;1.16.0&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">app.kubernetes.io/managed-by</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Helm</span>
</span><span class='line'><span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">replicas</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>  <span class="l-Scalar-Plain">template</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">containers</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-chart</span>
</span><span class='line'>          <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="s">&quot;nginx:1.16.0&quot;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">...</span>
</span><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="nn">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>In our example it will create a service account, service, deployment, etc.</p>

<p>As you can see the <code>spec.template.spec.containers[].image</code> is set to <code>nginx:1.16.0</code>, and to see how that was computed, we can have a look at <code>templates/deployment.yaml</code>:</p>

<script src="https://gist.github.com/ruanbekker/908dfeef90ef6edf8d2e40dc6c49bebf.js"></script>


<p>As you can see in <code>image:</code> section we have <code>.Values.image.repository</code> and <code>.Values.image.tag</code>, and those values are being retrieved from the <code>values.yaml</code> file, and when we look at the <code>values.yaml</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">repository</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nginx</span>
</span><span class='line'>  <span class="l-Scalar-Plain">pullPolicy</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">IfNotPresent</span>
</span><span class='line'>  <span class="c1"># Overrides the image tag whose default is the chart appVersion.</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tag</span><span class="p-Indicator">:</span> <span class="s">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we want to override the image repository and image tag, we can update the <code>values.yaml</code> file to lets say:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">repository</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">busybox</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tag</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">latest</span>
</span><span class='line'>  <span class="l-Scalar-Plain">pullPolicy</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">IfNotPresent</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we run our helm template command again, we can see that the computed values changed to what we want:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm template example . --values values.yaml
</span><span class='line'>---
</span><span class='line'><span class="c"># Source: my-chart/templates/deployment.yaml</span>
</span><span class='line'>apiVersion: apps/v1
</span><span class='line'>kind: Deployment
</span><span class='line'>metadata:
</span><span class='line'>  name: example-my-chart
</span><span class='line'>spec:
</span><span class='line'>  replicas: 1
</span><span class='line'>  template:
</span><span class='line'>    spec:
</span><span class='line'>      containers:
</span><span class='line'>        - name: my-chart
</span><span class='line'>          image: <span class="s2">&quot;busybox:latest&quot;</span>
</span><span class='line'>          imagePullPolicy: IfNotPresent
</span><span class='line'>      ...
</span></code></pre></td></tr></table></div></figure>


<p>Another way is to use <code>--set</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm template example . --values values.yaml --set image.repository<span class="o">=</span>ruanbekker/containers,image.tag<span class="o">=</span>curl
</span><span class='line'>spec:
</span><span class='line'>  template:
</span><span class='line'>    spec:
</span><span class='line'>      containers:
</span><span class='line'>        - name: my-chart
</span><span class='line'>          image: <span class="s2">&quot;ruanbekker/containers:curl&quot;</span>
</span><span class='line'>      ...
</span></code></pre></td></tr></table></div></figure>


<p>The template subcommand provides a great way to debug your charts. To learn more about helm charts, view their <a href="https://helm.sh/docs/topics/charts/">documentation</a>.</p>

<h2>Publish your Helm Chart to ChartMuseum</h2>

<p><a href="https://chartmuseum.com/">ChartMuseum</a> is an open-source Helm Chart Repository server written in Go.</p>

<p>Running chartmuseum demonstration will be done locally on my workstation using Docker. To run the server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run --rm -it <span class="se">\</span>
</span><span class='line'>  -p 8080:8080 <span class="se">\</span>
</span><span class='line'>  -e <span class="nv">DEBUG</span><span class="o">=</span><span class="m">1</span> <span class="se">\</span>
</span><span class='line'>  -e <span class="nv">STORAGE</span><span class="o">=</span><span class="nb">local</span> <span class="se">\</span>
</span><span class='line'>  -e <span class="nv">STORAGE_LOCAL_ROOTDIR</span><span class="o">=</span>/charts <span class="se">\</span>
</span><span class='line'>  -v <span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>/charts:/charts <span class="se">\</span>
</span><span class='line'>  ghcr.io/helm/chartmuseum:v0.14.0
</span></code></pre></td></tr></table></div></figure>


<p>Now that ChartMuseum is running, we will need to install a helm plugin called <code>helm-push</code> which helps to push charts to our chartmusuem repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm plugin install https://github.com/chartmuseum/helm-push
</span></code></pre></td></tr></table></div></figure>


<p>We can verify if our plugin was installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm plugin list
</span><span class='line'>NAME      VERSION DESCRIPTION
</span><span class='line'>cm-push   0.10.3  Push chart package to ChartMuseum
</span></code></pre></td></tr></table></div></figure>


<p>Now we add our chartmuseum helm chart repository, which we will call <code>cm-local</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm repo add cm-local http://localhost:8080/
</span></code></pre></td></tr></table></div></figure>


<p>We can list our helm repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm repo list
</span><span class='line'>NAME                  URL
</span><span class='line'>cm-local              http://localhost:8080/
</span></code></pre></td></tr></table></div></figure>


<p>Now that our helm repository has been added, we can push our helm chart to our helm chart repository. Ensure that we are in our chart repository directory, where the <code>Chart.yaml</code> file should be in our current directory. We need this file as it holds metadata about our chart.</p>

<p>We can view the <code>Chart.yaml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">v2</span>
</span><span class='line'><span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-chart</span>
</span><span class='line'><span class="l-Scalar-Plain">description</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">A Helm chart for Kubernetes</span>
</span><span class='line'><span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">application</span>
</span><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0.1.0</span>
</span><span class='line'><span class="l-Scalar-Plain">appVersion</span><span class="p-Indicator">:</span> <span class="s">&quot;1.16.0&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Push the helm chart to chartmuseum:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm cm-push . http://localhost:8080/ --version 0.0.1
</span><span class='line'>Pushing my-chart-0.0.1.tgz to http://localhost:8080/...
</span><span class='line'>Done.
</span></code></pre></td></tr></table></div></figure>


<p>Now we should update our repositories so that we can get the latest changes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm repo update
</span></code></pre></td></tr></table></div></figure>


<p>Now we can list the charts under our repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm search repo cm-local/
</span><span class='line'>NAME              CHART VERSION   APP VERSION DESCRIPTION
</span><span class='line'>cm-local/my-chart 0.0.1           1.16.0      A Helm chart <span class="k">for</span> Kubernetes
</span></code></pre></td></tr></table></div></figure>


<p>We can now get the values for our helm chart by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm show values cm-local/my-chart
</span></code></pre></td></tr></table></div></figure>


<p>This returns the values yaml that we can use for our chart, so let&rsquo;s say you want to output the values yaml so that we can use to to deploy a release we can do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm show values cm-local/my-chart &gt; my-values.yaml
</span></code></pre></td></tr></table></div></figure>


<p>Now when we want to deploy a release, we can do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm upgrade --install my-release cm-local/my-chart --values my-values.yaml --namespace <span class="nb">test</span> --create-namespace --version 0.0.1
</span></code></pre></td></tr></table></div></figure>


<p>After the release was deployed, we can list the releases by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm list
</span></code></pre></td></tr></table></div></figure>


<p>And to view the release history:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm <span class="nb">history </span>my-release
</span></code></pre></td></tr></table></div></figure>


<h2>Resources</h2>

<p>Please find the following information with regards to Helm documentation:
- <a href="https://helm.sh/docs/">helm docs</a>
- <a href="https://helm.sh/docs/chart_template_guide/">helm cart template guide</a></p>

<p>If you need a kubernetes cluster and you would like to run this locally, find the following documentation in order to do that:
- <a href="https://blog.ruanbekker.com/blog/2022/09/20/kind-for-local-kubernetes-clusters/">using kind for local kubernetes clusters</a></p>

<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>

<ul>
<li>Linktree: <a href="https://go.ruan.dev/links">https://go.ruan.dev/links</a></li>
<li>Patreon: <a href="https://go.ruan.dev/patreon">https://go.ruan.dev/patreon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Wiremock]]></title>
    <link href="https://blog.ruanbekker.com/blog/2023/01/14/getting-started-with-wiremock/"/>
    <updated>2023-01-14T17:03:12-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2023/01/14/getting-started-with-wiremock</id>
    <content type="html"><![CDATA[<p>In this tutorial we will use docker to run an instance of wiremock to setup a mock api for us to test our api&rsquo;s.</p>

<h2>Wiremock</h2>

<p><a href="https://wiremock.org/">Wiremock</a> is a tool for building mock API&rsquo;s which enables us to build stable development environments.</p>

<h2>Docker and Wiremock</h2>

<p>Run a wiremock instance with docker:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run -it --rm -p 8080:8080 --name wiremock wiremock/wiremock:2.34.0
</span></code></pre></td></tr></table></div></figure>


<p>Then our wiremock instance will be exposed on port 8080 locally, which we can use to make a request against to create a api mapping:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -XPOST -H <span class="s2">&quot;Content-Type: application/json&quot;</span> <span class="se">\</span>
</span><span class='line'>  http://localhost:8080/__admin/mappings
</span><span class='line'>  -d <span class="s1">&#39;{&quot;request&quot;: {&quot;url&quot;: &quot;/testapi&quot;,&quot;method&quot;: &quot;GET&quot;}, &quot;response&quot;: {&quot;status&quot;: 200, &quot;body&quot;: &quot;{\&quot;result\&quot;: \&quot;ok\&quot;</span>
</span><span class='line'><span class="s1">}&quot;, &quot;headers&quot;: {&quot;Content-Type&quot;: &quot;application/json&quot;}}}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The response should be something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span> <span class="p">:</span> <span class="s2">&quot;223a2c0a-8b43-42dc-8ba6-fe973da1e420&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;request&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;url&quot;</span> <span class="p">:</span> <span class="s2">&quot;/testapi&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;method&quot;</span> <span class="p">:</span> <span class="s2">&quot;GET&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;response&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;status&quot;</span> <span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;body&quot;</span> <span class="p">:</span> <span class="s2">&quot;{\&quot;result\&quot;: \&quot;ok\&quot;}&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;headers&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Content-Type&quot;</span> <span class="p">:</span> <span class="s2">&quot;application/json&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;uuid&quot;</span> <span class="p">:</span> <span class="s2">&quot;223a2c0a-8b43-42dc-8ba6-fe973da1e420&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Test Wiremock</h2>

<p>If we make a GET request against our API:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl http://localhost:8080/testapi
</span></code></pre></td></tr></table></div></figure>


<p>Our response should be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;result&quot;</span><span class="p">:</span> <span class="s2">&quot;ok&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Export Wiremock Mappings</h2>

<p>We can export our mappings to a local file named <code>stubs.json</code> with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -s http://localhost:8080/__admin/mappings --output stubs.json
</span></code></pre></td></tr></table></div></figure>


<h2>Import Wiremock Mappings</h2>

<p>We can import our mappings from our <code>stubs.json</code> file with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -XPOST -v --data-binary @stubs.json http://localhost:8080/__admin/mappings/import
</span></code></pre></td></tr></table></div></figure>


<h2>Resources</h2>

<ul>
<li><a href="https://wiremock.org/docs/docker/">https://wiremock.org/docs/docker/</a></li>
<li><a href="https://github.com/WireMock-Net/WireMock.Net/wiki/Admin-API-Reference">https://github.com/WireMock-Net/WireMock.Net/wiki/Admin-API-Reference</a></li>
</ul>


<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>

<ul>
<li>Linktree: <a href="https://go.ruan.dev/links">https://go.ruan.dev/links</a></li>
<li>Patreon: <a href="https://go.ruan.dev/patreon">https://go.ruan.dev/patreon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logging With Docker Promtail and Grafana Loki]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/11/18/logging-with-docker-promtail-and-grafana-loki/"/>
    <updated>2022-11-18T00:42:49-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/11/18/logging-with-docker-promtail-and-grafana-loki</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/202631247-4ee94f01-b34a-471f-b428-6aba80b31e8c.png" alt="grafana-loki-promtail" /></p>

<p>In this post we will use Grafana Promtail to collect all our logs and ship it to Grafana Loki.</p>

<h2>About</h2>

<p>We will be using Docker Compose and mount the docker socket to Grafana Promtail so that it is aware of all the docker events and configure it that only containers with docker labels <code>logging=promtail</code> needs to be enabled for logging, which will then scrape those logs and send it to Grafana Loki where we will visualize it in Grafana.</p>

<h2>Promtail</h2>

<p>In our promtail configuration <code>config/promtail.yaml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># https://grafana.com/docs/loki/latest/clients/promtail/configuration/</span>
</span><span class='line'><span class="c1"># https://docs.docker.com/engine/api/v1.41/#operation/ContainerList</span>
</span><span class='line'><span class="l-Scalar-Plain">server</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">http_listen_port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">9080</span>
</span><span class='line'>  <span class="l-Scalar-Plain">grpc_listen_port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">positions</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">filename</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/tmp/positions.yaml</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">clients</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://loki:3100/loki/api/v1/push</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">scrape_configs</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">job_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">flog_scrape</span>
</span><span class='line'>    <span class="l-Scalar-Plain">docker_sd_configs</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">unix:///var/run/docker.sock</span>
</span><span class='line'>        <span class="l-Scalar-Plain">refresh_interval</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5s</span>
</span><span class='line'>        <span class="l-Scalar-Plain">filters</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">label</span>
</span><span class='line'>            <span class="l-Scalar-Plain">values</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;logging=promtail&quot;</span><span class="p-Indicator">]</span>
</span><span class='line'>    <span class="l-Scalar-Plain">relabel_configs</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">source_labels</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&#39;__meta_docker_container_name&#39;</span><span class="p-Indicator">]</span>
</span><span class='line'>        <span class="l-Scalar-Plain">regex</span><span class="p-Indicator">:</span> <span class="s">&#39;/(.*)&#39;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">target_label</span><span class="p-Indicator">:</span> <span class="s">&#39;container&#39;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">source_labels</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&#39;__meta_docker_container_log_stream&#39;</span><span class="p-Indicator">]</span>
</span><span class='line'>        <span class="l-Scalar-Plain">target_label</span><span class="p-Indicator">:</span> <span class="s">&#39;logstream&#39;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">source_labels</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&#39;__meta_docker_container_label_logging_jobname&#39;</span><span class="p-Indicator">]</span>
</span><span class='line'>        <span class="l-Scalar-Plain">target_label</span><span class="p-Indicator">:</span> <span class="s">&#39;job&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see we are using the <code>docker_sd_configs</code> provider and filter only docker containers with the docker labels <code>logging=promtail</code> and once we have those logs we relabel our labels to have the container name and we also use docker labels like <code>log_stream</code> and <code>logging_jobname</code> to add labels to our logs.</p>

<h2>Grafana Config</h2>

<p>We would like to auto configure our datasources for Grafana and in <code>config/grafana-datasources.yml</code> we have:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">datasources</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Loki</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">loki</span>
</span><span class='line'>    <span class="l-Scalar-Plain">access</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">proxy</span>
</span><span class='line'>    <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://loki:3100</span>
</span><span class='line'>    <span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>    <span class="l-Scalar-Plain">editable</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>    <span class="l-Scalar-Plain">isDefault</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Docker Compose</h2>

<p>Then lastly we have our <code>docker-compose.yml</code> that wire up all our containers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&#39;3.8&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">nginx-app</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nginx-app</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nginx</span>
</span><span class='line'>    <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">logging</span><span class="p-Indicator">:</span> <span class="s">&quot;promtail&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">logging_jobname</span><span class="p-Indicator">:</span> <span class="s">&quot;containerlogs&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">8080:80</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">app</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">grafana</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">grafana/grafana:latest</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">3000:3000</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yaml</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">GF_AUTH_ANONYMOUS_ENABLED=true</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">GF_AUTH_ANONYMOUS_ORG_ROLE=Admin</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">GF_AUTH_DISABLE_LOGIN_FORM=true</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">app</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">loki</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">grafana/loki:latest</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">3100:3100</span>
</span><span class='line'>    <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">-config.file=/etc/loki/local-config.yaml</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">app</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">promtail</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span>  <span class="l-Scalar-Plain">grafana/promtail:latest</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">promtail</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./config/promtail.yaml:/etc/promtail/docker-config.yaml</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/var/lib/docker/containers:/var/lib/docker/containers:ro</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/var/run/docker.sock:/var/run/docker.sock</span>
</span><span class='line'>    <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">-config.file=/etc/promtail/docker-config.yaml</span>
</span><span class='line'>    <span class="l-Scalar-Plain">depends_on</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">loki</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">app</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">app</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see with our nginx container we define our labels:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'>  <span class="l-Scalar-Plain">nginx-app</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nginx-app</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nginx</span>
</span><span class='line'>    <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">logging</span><span class="p-Indicator">:</span> <span class="s">&quot;promtail&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">logging_jobname</span><span class="p-Indicator">:</span> <span class="s">&quot;containerlogs&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which uses <code>logging: "promtail"</code> to let promtail know this log container&rsquo;s log to be scraped and <code>logging_jobname: "containerlogs"</code> which will assign containerlogs to the job label.</p>

<h2>Start the stack</h2>

<p>If you are following along all this configuration is available in my github repository <a href="https://github.com/ruanbekker/docker-promtail-loki">https://github.com/ruanbekker/docker-promtail-loki</a> .</p>

<p>Once you have everything in place you can start it with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-compose up -d
</span></code></pre></td></tr></table></div></figure>


<p>Access nginx on <a href="http://localhost:8080">http://localhost:8080</a></p>

<p><img width="1113" alt="image" src="https://user-images.githubusercontent.com/567298/202505252-3cbc2d03-d1d2-48e6-bea7-5db54233b9a2.png"></p>

<p>Then navigate to grafana on <a href="http://localhost:3000">http://localhost:3000</a> and select explore on the left and select the container:</p>

<p><img width="560" alt="image" src="https://user-images.githubusercontent.com/567298/202504989-e05a08a2-eb2f-41a1-85f4-9a11a8affd7c.png"></p>

<p>And you will see the logs:</p>

<p><img width="1425" alt="image" src="https://user-images.githubusercontent.com/567298/202505099-c47b76cc-3090-4eb9-8459-db659d0aac18.png"></p>

<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>

<ul>
<li>Linktree: <a href="https://go.ruan.dev/links">https://go.ruan.dev/links</a></li>
<li>Patreon: <a href="https://go.ruan.dev/patreon">https://go.ruan.dev/patreon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KinD for Local Kubernetes Clusters]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/09/20/kind-for-local-kubernetes-clusters/"/>
    <updated>2022-09-20T02:18:16-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/09/20/kind-for-local-kubernetes-clusters</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/191189852-44f2fd39-7ad7-4d0a-a36b-c2889a838649.png" alt="kubernetes-kind" /></p>

<p>In this tutorial we will demonstrate how to use KinD (Kubernetes in Docker) to provision local kubernetes clusters for local development.</p>

<p><em>Updated at</em>: <em>2023-12-22</em></p>

<h2>About</h2>

<p>KinD uses container images to run as &ldquo;nodes&rdquo;, so spinning up and tearing down clusters becomes really easy or running multiple or different versions, is as easy as pointing to a different container image.</p>

<p>Configuration such as node count, ports, volumes, image versions can either be controlled via the command line or via configuration, more information on that can be found on their documentation:</p>

<ul>
<li><a href="https://kind.sigs.k8s.io/docs/user/quick-start/">https://kind.sigs.k8s.io/docs/user/quick-start/</a></li>
<li><a href="https://kind.sigs.k8s.io/docs/user/configuration/">https://kind.sigs.k8s.io/docs/user/configuration/</a></li>
</ul>


<h2>Installation</h2>

<p>Follow the <a href="https://kind.sigs.k8s.io/docs/user/quick-start/#installing-with-a-package-manager">docs</a> for more information, but for mac:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install kind
</span></code></pre></td></tr></table></div></figure>


<p>To verify if kind was installed, you can run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kind version
</span></code></pre></td></tr></table></div></figure>


<h2>Create a Cluster</h2>

<p>Create the cluster with command line arguments, such as cluster name, the container image:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kind create cluster --name cluster-1 --image kindest/node:v1.26.6
</span></code></pre></td></tr></table></div></figure>


<p>And the output will look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Creating cluster <span class="s2">&quot;cluster-1&quot;</span> ...
</span><span class='line'> ✓ Ensuring node image <span class="o">(</span>kindest/node:v1.26.6<span class="o">)</span> 🖼
</span><span class='line'> ✓ Preparing nodes 📦
</span><span class='line'> ✓ Writing configuration 📜
</span><span class='line'> ✓ Starting control-plane 🕹️
</span><span class='line'> ✓ Installing CNI 🔌
</span><span class='line'> ✓ Installing StorageClass 💾
</span><span class='line'>Set kubectl context to <span class="s2">&quot;kind-cluster-1&quot;</span>
</span><span class='line'>You can now use your cluster with:
</span><span class='line'>
</span><span class='line'>kubectl cluster-info --context kind-cluster-1
</span><span class='line'>
</span><span class='line'>Have a question, bug, or feature request? Let us know! https://kind.sigs.k8s.io/#community 🙂
</span></code></pre></td></tr></table></div></figure>


<p>Then you can interact with the cluster using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl get nodes --context kind-cluster-1
</span></code></pre></td></tr></table></div></figure>


<p>Then delete the cluster using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kind delete cluster --name kind-cluster-1
</span></code></pre></td></tr></table></div></figure>


<p>I <strong>highly recommend</strong> installing <a href="https://github.com/ahmetb/kubectx">kubectx</a>, which makes it easy to switch between kubernetes contexts.</p>

<h2>Create a Cluster with Config</h2>

<p>If you would like to define your cluster configuration as config, you can create a file <code>default-config.yaml</code> with the following as a 2 node cluster, and specifying version 1.24.0:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Cluster</span>
</span><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">kind.x-k8s.io/v1alpha4</span>
</span><span class='line'><span class="l-Scalar-Plain">nodes</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">role</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">control-plane</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">kindest/node:v1.26.6@sha256:6e2d8b28a5b601defe327b98bd1c2d1930b49e5d8c512e1895099e4504007adb</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">role</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">worker</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">kindest/node:v1.26.6@sha256:6e2d8b28a5b601defe327b98bd1c2d1930b49e5d8c512e1895099e4504007adb</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then create the cluster and point the config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kind create cluster --name kind-cluster --config default-config.yaml
</span></code></pre></td></tr></table></div></figure>


<h2>Interact with the Cluster</h2>

<p>View the cluster info:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl cluster-info --context kind-kind-cluster
</span></code></pre></td></tr></table></div></figure>


<p>View cluster contexts:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl config get-contexts
</span></code></pre></td></tr></table></div></figure>


<p>Use context:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl config use-context kind-kind-cluster
</span></code></pre></td></tr></table></div></figure>


<p>View nodes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl get nodes -o wide
</span><span class='line'>
</span><span class='line'>NAME                         STATUS   ROLES           AGE     VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE       KERNEL-VERSION      CONTAINER-RUNTIME
</span><span class='line'>kind-cluster-control-plane   Ready    control-plane   2m11s   v1.26.6   172.20.0.5    &lt;none&gt;        Ubuntu 21.10   5.10.104-linuxkit   containerd://1.6.4
</span><span class='line'>kind-cluster-worker          Ready    &lt;none&gt;          108s    v1.26.6   172.20.0.4    &lt;none&gt;        Ubuntu 21.10   5.10.104-linuxkit   containerd://1.6.4
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy Sample Application</h2>

<p>We will create a deployment, a service and port-forward to our service to access our application. You can also specify port configuration to your cluster so that you don&rsquo;t need to port-forward, which you can find in their <a href="https://kind.sigs.k8s.io/docs/user/configuration/#extra-port-mappings">port mappings documentation</a></p>

<p>I will be using the following commands to generate the manifests, but will also add them to this post:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl create deployment hostname --namespace default --replicas <span class="m">2</span> --image ruanbekker/containers:hostname --port <span class="m">8080</span> --dry-run<span class="o">=</span>client -o yaml &gt; hostname-deployment.yaml
</span><span class='line'>kubectl expose deployment hostname --namespace default --port<span class="o">=</span><span class="m">80</span> --target-port<span class="o">=</span><span class="m">8080</span> --name<span class="o">=</span>hostname-http --dry-run<span class="o">=</span>client -o yaml &gt; hostname-service.yaml
</span></code></pre></td></tr></table></div></figure>


<p>The manifest:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">apps/v1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Deployment</span>
</span><span class='line'><span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">creationTimestamp</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">null</span>
</span><span class='line'>  <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hostname</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hostname</span>
</span><span class='line'>  <span class="l-Scalar-Plain">namespace</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">default</span>
</span><span class='line'><span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">replicas</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2</span>
</span><span class='line'>  <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">matchLabels</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hostname</span>
</span><span class='line'>  <span class="l-Scalar-Plain">strategy</span><span class="p-Indicator">:</span> <span class="p-Indicator">{}</span>
</span><span class='line'>  <span class="l-Scalar-Plain">template</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">creationTimestamp</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">null</span>
</span><span class='line'>      <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hostname</span>
</span><span class='line'>    <span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">containers</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ruanbekker/containers:hostname</span>
</span><span class='line'>        <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">containers</span>
</span><span class='line'>        <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">containerPort</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">8080</span>
</span><span class='line'>        <span class="l-Scalar-Plain">resources</span><span class="p-Indicator">:</span> <span class="p-Indicator">{}</span>
</span><span class='line'><span class="l-Scalar-Plain">status</span><span class="p-Indicator">:</span> <span class="p-Indicator">{}</span>
</span><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">v1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Service</span>
</span><span class='line'><span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">creationTimestamp</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">null</span>
</span><span class='line'>  <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hostname</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hostname-http</span>
</span><span class='line'>  <span class="l-Scalar-Plain">namespace</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">default</span>
</span><span class='line'><span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">80</span>
</span><span class='line'>    <span class="l-Scalar-Plain">protocol</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">TCP</span>
</span><span class='line'>    <span class="l-Scalar-Plain">targetPort</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">8080</span>
</span><span class='line'>  <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hostname</span>
</span><span class='line'><span class="l-Scalar-Plain">status</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">loadBalancer</span><span class="p-Indicator">:</span> <span class="p-Indicator">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then apply them with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl apply -f &lt;name-of-manifest&gt;.yaml
</span></code></pre></td></tr></table></div></figure>


<p>Or if you used kubectl to create them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl apply -f hostname-deployment.yaml
</span><span class='line'>kubectl apply -f hostname-service.yaml
</span></code></pre></td></tr></table></div></figure>


<p>You can then view your resources with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl get deployment,pod,service
</span><span class='line'>
</span><span class='line'>NAME                       READY   UP-TO-DATE   AVAILABLE   AGE
</span><span class='line'>deployment.apps/hostname   2/2     <span class="m">2</span>            <span class="m">2</span>           9m27s
</span><span class='line'>
</span><span class='line'>NAME                            READY   STATUS    RESTARTS   AGE
</span><span class='line'>pod/hostname-7ff58c5644-67vhq   1/1     Running   <span class="m">0</span>          9m27s
</span><span class='line'>pod/hostname-7ff58c5644-wjjbw   1/1     Running   <span class="m">0</span>          9m27s
</span><span class='line'>
</span><span class='line'>NAME                    TYPE        CLUSTER-IP     EXTERNAL-IP   PORT<span class="o">(</span>S<span class="o">)</span>   AGE
</span><span class='line'>service/hostname-http   ClusterIP   10.96.218.58   &lt;none&gt;        80/TCP    5m48s
</span><span class='line'>service/kubernetes      ClusterIP   10.96.0.1      &lt;none&gt;        443/TCP   24m
</span></code></pre></td></tr></table></div></figure>


<p>Port forward to your service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl port-forward svc/hostname-http 8080:80
</span></code></pre></td></tr></table></div></figure>


<p>Then access your application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl http://localhost:8080/
</span><span class='line'>
</span><span class='line'>Hostname: hostname-7ff58c5644-wjjbw
</span></code></pre></td></tr></table></div></figure>


<h2>Delete Kind Cluster</h2>

<p>View the clusters:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kind get clusters
</span></code></pre></td></tr></table></div></figure>


<p>Delete a cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kind delete cluster --name kind-cluster
</span></code></pre></td></tr></table></div></figure>


<h2>Additional Configs</h2>

<p>If you want more configuration options, you can look at their documentation:</p>

<ul>
<li><a href="https://kind.sigs.k8s.io/docs/user/configuration/">https://kind.sigs.k8s.io/docs/user/configuration/</a></li>
</ul>


<p>But one more example that I like using, is to define the port mappings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Cluster</span>
</span><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">kind.x-k8s.io/v1alpha4</span>
</span><span class='line'><span class="l-Scalar-Plain">nodes</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">role</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">control-plane</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">kindest/node:v1.26.6@sha256:6e2d8b28a5b601defe327b98bd1c2d1930b49e5d8c512e1895099e4504007adb</span>
</span><span class='line'>  <span class="l-Scalar-Plain">extraPortMappings</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">containerPort</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">80</span>
</span><span class='line'>    <span class="l-Scalar-Plain">hostPort</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">80</span>
</span><span class='line'>    <span class="l-Scalar-Plain">protocol</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">TCP</span>
</span><span class='line'>    <span class="l-Scalar-Plain">listenAddress</span><span class="p-Indicator">:</span> <span class="s">&quot;0.0.0.0&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">containerPort</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">443</span>
</span><span class='line'>    <span class="l-Scalar-Plain">hostPort</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">443</span>
</span><span class='line'>    <span class="l-Scalar-Plain">protocol</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">TCP</span>
</span><span class='line'>  <span class="l-Scalar-Plain">kubeadmConfigPatches</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="p-Indicator">|</span>
</span><span class='line'>    <span class="no">kind: InitConfiguration</span>
</span><span class='line'>    <span class="no">nodeRegistration:</span>
</span><span class='line'>      <span class="no">kubeletExtraArgs:</span>
</span><span class='line'>        <span class="no">node-labels: &quot;ingress-ready=true&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Extras</h2>

<p>I highly recommend using <code>kubectx</code> to switch contexts and <code>kubens</code> to set the default namespace, and aliases:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">k</span><span class="o">=</span>kubectl
</span><span class='line'><span class="nb">alias </span><span class="nv">kx</span><span class="o">=</span>kubectx
</span><span class='line'><span class="nb">alias </span><span class="nv">kns</span><span class="o">=</span>kubens
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>

<ul>
<li>Linktree: <a href="https://go.ruan.dev/links">https://go.ruan.dev/links</a></li>
<li>Patreon: <a href="https://go.ruan.dev/patreon">https://go.ruan.dev/patreon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ansible Playbook for Your Macbook Homebrew Packages]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/08/28/ansible-playbook-for-your-macbook-homebrew-packages/"/>
    <updated>2022-08-28T19:14:54-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/08/28/ansible-playbook-for-your-macbook-homebrew-packages</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/ansible-macbook.png" alt="ansible-macbook-homebrew" /></p>

<p>In this tutorial I will demonstrate how to use Ansible for Homebrew Configuration Management. The aim for using Ansible to manage your homebrew packages helps you to have a consistent list of packages on your macbook.</p>

<p>For me personally, when I get a new laptop it&rsquo;s always a mission to get the same packages installed as what I had before, and ansible solves that for us to have all our packages defined in configuration management.</p>

<h2>Install Ansible</h2>

<p>Install ansible with python and pip:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python3 -m pip install <span class="nv">ansible</span><span class="o">==</span>4.9.0
</span></code></pre></td></tr></table></div></figure>


<h2>Ansible Configuration</h2>

<p>Create the <code>ansible.cfg</code> configuration file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>defaults<span class="o">]</span>
</span><span class='line'><span class="nv">inventory</span> <span class="o">=</span> inventory.ini
</span><span class='line'><span class="nv">deprecation_warnings</span> <span class="o">=</span> False
</span></code></pre></td></tr></table></div></figure>


<p>Our <code>inventory.ini</code> will define the information about our target host, which will be localhost as we are using ansible to run against our local target which is our macbook:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>localhost<span class="o">]</span>
</span><span class='line'>my.laptop  <span class="nv">ansible_connection</span><span class="o">=</span><span class="nb">local</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>localhost:vars<span class="o">]</span>
</span><span class='line'><span class="nv">ansible_python_interpreter</span> <span class="o">=</span> /usr/bin/python3
</span></code></pre></td></tr></table></div></figure>


<h2>Ansible Playbook</h2>

<p>Our playbook <code>homebrew.yaml</code> will define the tasks to add the homebrew taps, cask packages and homebrew packages. You can change the packages as you desire, but these are the ones that I use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Macbook Playbook</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gather_facts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">False</span>
</span><span class='line'>  <span class="l-Scalar-Plain">vars</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">TFENV_ARCH</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">amd64</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Ensures taps are present via homebrew</span>
</span><span class='line'>      <span class="l-Scalar-Plain">community.general.homebrew_tap</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">state</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">present</span>
</span><span class='line'>      <span class="l-Scalar-Plain">with_items</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hashicorp/tap</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Ensures packages are present via homebrew cask</span>
</span><span class='line'>      <span class="l-Scalar-Plain">community.general.homebrew_cask</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">state</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">present</span>
</span><span class='line'>        <span class="l-Scalar-Plain">install_options</span><span class="p-Indicator">:</span> <span class="s">&#39;appdir=/Applications&#39;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">with_items</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">visual-studio-code</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">multipass</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">spotify</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Ensures packages are present via homebrew</span>
</span><span class='line'>      <span class="l-Scalar-Plain">community.general.homebrew</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="s">&quot;/Applications&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">state</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">present</span>
</span><span class='line'>      <span class="l-Scalar-Plain">with_items</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">openssl</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">readline</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">sqlite3</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">xz</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">zlib</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">jq</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">yq</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">wget</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">go</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">kubernetes-cli</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">fzf</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">sshuttle</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hugo</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">helm</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">kind</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">awscli</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">gnupg</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">kubectx</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">helm</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">stern</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">terraform</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">tfenv</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">pyenv</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">jsonnet</span>
</span><span class='line'>      <span class="l-Scalar-Plain">ignore_errors</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class='line'>      <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">packages</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy Playbook</h2>

<p>Now you can run the playbook using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ansible-playbook homebrew.yaml
</span></code></pre></td></tr></table></div></figure>


<h2>Source Code</h2>

<p>The code can be found in my github repository:
- <a href="https://github.com/ruanbekker/ansible-macbook-setup">https://github.com/ruanbekker/ansible-macbook-setup</a></p>

<h2>Thanks</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Multistage Builds for Hugo]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/07/31/docker-multistage-builds-for-hugo/"/>
    <updated>2022-07-31T02:23:51-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/07/31/docker-multistage-builds-for-hugo</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/182013196-aff6e76f-2cf3-4ec2-bfcc-3e977915a6aa.png" alt="blog-ruanbekker-multistage-builds" /></p>

<p>In this tutorial I will demonstrate how to keep your docker <strong>container images</strong> nice and <strong>slim</strong> with the use of <strong>multistage builds</strong> for a <strong>hugo</strong> documentation project.</p>

<p>Hugo is a static content generator so essentially that means that it will <strong>generate your markdown files into html</strong>. Therefore we don&rsquo;t need to include all the content from our project repository as we only need the static content (html, css, javascript) to reside on our <strong>final container image</strong>.</p>

<h2>What are we doing today</h2>

<p>We will use the <strong><a href="https://github.com/h-enk/doks">DOKS</a></strong> Modern Documentation theme for <strong><a href="https://gohugo.io/">Hugo</a></strong> as our project example, where we will build and run our documentation website on a docker container, but more importantly make use of multistage builds to <strong>optimize the size</strong> of our <strong>container image</strong>.</p>

<h2>Our Build Strategy</h2>

<p>Since hugo is a static content generator, we will use a <strong><a href="https://hub.docker.com/_/node">node</a></strong> container image as our base. We will then build and generate the content using <code>npm run build</code> which will generate the static content to <code>/src/public</code> in our build stage.</p>

<p>Since we then have static content, we can utilize a second stage using a <strong><a href="https://hub.docker.com/_/nginx">nginx</a></strong> container image with the purpose of a <strong>web server</strong> to host our <strong>static content</strong>. We will copy the static content from our <code>build</code> stage into our second stage and place it under our defined path in our nginx config.</p>

<p>This way we only include the required content on our final container image.</p>

<h2>Building our Container Image</h2>

<p>First clone the <a href="https://github.com/h-enk/doks">docs github repository</a> and change to the directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/h-enk/doks
</span><span class='line'><span class="nb">cd </span>doks
</span></code></pre></td></tr></table></div></figure>


<p>Now create a <code>Dockerfile</code> in the root path with the following content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='dockerfile'><span class='line'><span class="k">FROM</span> node:16.15.1 as build
</span><span class='line'><span class="k">WORKDIR</span> /src
</span><span class='line'><span class="k">ADD</span> . .
</span><span class='line'><span class="k">RUN</span> npm install
</span><span class='line'><span class="k">RUN</span> npm run build
</span><span class='line'>
</span><span class='line'><span class="k">FROM</span>  nginx:alpine
</span><span class='line'>LABEL demonstration.by Ruan Bekker &lt;@ruanbekker&gt;
</span><span class='line'>COPY  nginx/config/nginx.conf /etc/nginx/nginx.conf
</span><span class='line'>COPY  nginx/config/app.conf /etc/nginx/conf.d/app.conf
</span><span class='line'>COPY  --from<span class="o">=</span>build /src/public /usr/share/nginx/app
</span></code></pre></td></tr></table></div></figure>


<p>As we can see we are copying two nginx config files to our final image, which we will need to create.</p>

<p>Create the nginx config directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p nginx/config
</span></code></pre></td></tr></table></div></figure>


<p>The content for our main nginx config <code>nginx/config/nginx.conf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>user  nginx<span class="p">;</span>
</span><span class='line'>worker_processes  auto<span class="p">;</span>
</span><span class='line'>error_log  /var/log/nginx/error.log notice<span class="p">;</span>
</span><span class='line'>pid        /var/run/nginx.pid<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>events <span class="o">{</span>
</span><span class='line'>    worker_connections  1024<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>http <span class="o">{</span>
</span><span class='line'>    include       /etc/nginx/mime.types<span class="p">;</span>
</span><span class='line'>    default_type  application/octet-stream<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    log_format  main  <span class="s1">&#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span>
</span><span class='line'>                      <span class="s1">&#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span>
</span><span class='line'>                      <span class="s1">&#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    access_log  /var/log/nginx/access.log  main<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    sendfile        on<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># timeouts</span>
</span><span class='line'>    client_body_timeout 12<span class="p">;</span>
</span><span class='line'>    client_header_timeout 12<span class="p">;</span>
</span><span class='line'>    keepalive_timeout  25<span class="p">;</span>
</span><span class='line'>    send_timeout 10<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># buffer size</span>
</span><span class='line'>    client_body_buffer_size 10K<span class="p">;</span>
</span><span class='line'>    client_header_buffer_size 1k<span class="p">;</span>
</span><span class='line'>    client_max_body_size 8m<span class="p">;</span>
</span><span class='line'>    large_client_header_buffers <span class="m">4</span> 4k<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># gzip compression</span>
</span><span class='line'>    gzip  on<span class="p">;</span>
</span><span class='line'>    gzip_vary on<span class="p">;</span>
</span><span class='line'>    gzip_min_length 10240<span class="p">;</span>
</span><span class='line'>    gzip_proxied expired no-cache no-store private auth<span class="p">;</span>
</span><span class='line'>    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml<span class="p">;</span>
</span><span class='line'>    gzip_disable <span class="s2">&quot;MSIE [1-6]\.&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    include /etc/nginx/conf.d/app.conf<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in our main nginx config we are including a virtual host config <code>app.conf</code>, which we will create locally, and the content of <code>nginx/config/app.conf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>server <span class="o">{</span>
</span><span class='line'>    listen       80<span class="p">;</span>
</span><span class='line'>    server_name  localhost<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    location / <span class="o">{</span>
</span><span class='line'>        root   /usr/share/nginx/app<span class="p">;</span>
</span><span class='line'>        index  index.html index.htm<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#error_page  404              /404.html;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># redirect server error pages to the static page /50x.html</span>
</span><span class='line'>    error_page   <span class="m">500</span> <span class="m">502</span> <span class="m">503</span> <span class="m">504</span>  /50x.html<span class="p">;</span>
</span><span class='line'>    <span class="nv">location</span> <span class="o">=</span> /50x.html <span class="o">{</span>
</span><span class='line'>        root   /usr/share/nginx/html<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have our docker config in place, we can build our container image:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker build -t ruanbekker/hashnode-docs-blogpost:latest .
</span></code></pre></td></tr></table></div></figure>


<p>Then we can review the <strong>size</strong> of our container image, which is only <code>27.4MB</code> in size, pretty neat right.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker images --filter <span class="nv">reference</span><span class="o">=</span>ruanbekker/hashnode-docs-blogpost
</span><span class='line'>
</span><span class='line'>REPOSITORY                          TAG       IMAGE ID       CREATED          SIZE
</span><span class='line'>ruanbekker/hashnode-docs-blogpost   latest    5b60f30f40e6   <span class="m">21</span> minutes ago   27.4MB
</span></code></pre></td></tr></table></div></figure>


<h2>Running our Container</h2>

<p>Now that we&rsquo;ve built our container image, we can run our documentation site, by specifying our host port on the left to map to our container port on the right in <code>80:80</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run -it -p 80:80 ruanbekker/hashnode-docs-blogpost:latest
</span></code></pre></td></tr></table></div></figure>


<p>When you don&rsquo;t have port 80 already listening prior to running the previous command, when you head to <a href="http://localhost">http://localhost</a> (if you are running this locally), you should see our documentation site up and running:</p>

<p><img src="https://user-images.githubusercontent.com/567298/182018773-ecf3cd6c-ce2c-487a-a1bf-4a84fe1b6a09.png" alt="image" /></p>

<h2>Thank You</h2>

<p>I have published this container image to <a href="https://hub.docker.com/r/ruanbekker/hashnode-docs-blogpost">ruanbekker/hashnode-docs-blogpost</a>.</p>

<p>Thanks for reading, feel free to check out my <strong><a href="https://ruan.dev">website</a></strong>, feel free to subscribe to my <strong><a href="http://digests.ruanbekker.com/?via=hashnode">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote Builds With Docker Contexts]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/07/14/remote-builds-with-docker-contexts/"/>
    <updated>2022-07-14T01:57:34-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/07/14/remote-builds-with-docker-contexts</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/ruanbekker-docker-contexts.png" alt="using-docker-contexts" /></p>

<p>Often you want to save some battery life when you are doing docker builds and leverage a remote host to do the intensive work and we can utilise docker context over ssh to do just that.</p>

<h2>About</h2>

<p>In this tutorial I will show you how to use a remote docker engine to do docker builds, so you still run the docker client locally, but the context of your build will be sent to a remote docker engine via ssh.</p>

<p>We will setup password-less ssh, configure our ssh config, create the remote docker context, then use the remote docker context.</p>

<p><img src="https://user-images.githubusercontent.com/567298/178909518-26f580e9-2b96-41b3-bacd-a5ea5f848ebf.png" alt="image" /></p>

<h2>Password-less SSH</h2>

<p>I will be copying my public key to the remote host:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh-copy-id ruan@192.168.2.18
</span></code></pre></td></tr></table></div></figure>


<p>Setup my ssh config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat ~/.ssh/config
</span><span class='line'>Host home-server
</span><span class='line'>    Hostname 192.168.2.18
</span><span class='line'>    User ruan
</span><span class='line'>    IdentityFile ~/.ssh/id_rsa
</span><span class='line'>    StrictHostKeyChecking no
</span><span class='line'>    UserKnownHostsFile /dev/null
</span></code></pre></td></tr></table></div></figure>


<p>Test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh home-server whoami
</span><span class='line'>ruan
</span></code></pre></td></tr></table></div></figure>


<h2>Docker Context</h2>

<p>On the target host (192.168.2.18) we can verify that docker is installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker version
</span><span class='line'>Client: Docker Engine - Community
</span><span class='line'> Version:           20.10.12
</span><span class='line'> API version:       1.41
</span><span class='line'> Go version:        go1.16.12
</span><span class='line'> Git commit:        e91ed57
</span><span class='line'> Built:             Mon Dec <span class="m">13</span> 11:45:37 2021
</span><span class='line'> OS/Arch:           linux/amd64
</span><span class='line'> Context:           default
</span><span class='line'> Experimental:      <span class="nb">true</span>
</span><span class='line'>
</span><span class='line'>Server: Docker Engine - Community
</span><span class='line'> Engine:
</span><span class='line'>  Version:          20.10.12
</span><span class='line'>  API version:      1.41 <span class="o">(</span>minimum version 1.12<span class="o">)</span>
</span><span class='line'>  Go version:       go1.16.12
</span><span class='line'>  Git commit:       459d0df
</span><span class='line'>  Built:            Mon Dec <span class="m">13</span> 11:43:46 2021
</span><span class='line'>  OS/Arch:          linux/amd64
</span><span class='line'>  Experimental:     <span class="nb">false</span>
</span><span class='line'><span class="nb"> </span>containerd:
</span><span class='line'>  Version:          1.4.12
</span><span class='line'>  GitCommit:        7b11cfaabd73bb80907dd23182b9347b4245eb5d
</span><span class='line'> runc:
</span><span class='line'>  Version:          1.0.2
</span><span class='line'>  GitCommit:        v1.0.2-0-g52b36a2
</span><span class='line'> docker-init:
</span><span class='line'>  Version:          0.19.0
</span><span class='line'>  GitCommit:        de40ad0
</span></code></pre></td></tr></table></div></figure>


<p>On the client (my laptop in this example), we will create a docker context called &ldquo;home-server&rdquo; and point it to our target host:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker context create home-server --docker <span class="s2">&quot;host=ssh://home-server&quot;</span>
</span><span class='line'>home-server
</span><span class='line'>Successfully created context <span class="s2">&quot;home-server&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can list our contexts:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker context ls
</span><span class='line'>NAME                TYPE                DESCRIPTION                               DOCKER ENDPOINT               KUBERNETES ENDPOINT                                  ORCHESTRATOR
</span><span class='line'>default *           moby                Current DOCKER_HOST based configuration   unix:///var/run/docker.sock   https://k3d-master.127.0.0.1.nip.io:6445 <span class="o">(</span>default<span class="o">)</span>   swarm
</span><span class='line'>home-server         moby                                                          ssh://home-server
</span></code></pre></td></tr></table></div></figure>


<h2>Using Contexts</h2>

<p>We can verify if this works by listing our cached docker images locally and on our remote host:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker --context<span class="o">=</span>default images <span class="p">|</span> wc -l
</span><span class='line'> 16
</span></code></pre></td></tr></table></div></figure>


<p>And listing the remote images by specifying the context:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker --context<span class="o">=</span>home-server images <span class="p">|</span> wc -l
</span><span class='line'> 70
</span></code></pre></td></tr></table></div></figure>


<p>We can set the default context to our target host:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker context use home-server
</span><span class='line'>home-server
</span></code></pre></td></tr></table></div></figure>


<h2>Running Containers over Contexts</h2>

<p>So running containers with remote contexts essentially becomes running containers on remote hosts. In the past, I had to setup a ssh tunnel, point the docker host env var to that endpoint, then run containers on the remote host.</p>

<p>Thats something of the past, we can just point our docker context to our remote host and run the container. If you haven&rsquo;t set the default context, you can specify the context, so running a docker container on a remote host with your docker client locally:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker --context<span class="o">=</span>home-server run -it -p 8002:8080 ruanbekker/hostname
</span><span class='line'>2022/07/14 05:44:04 Server listening on port 8080
</span></code></pre></td></tr></table></div></figure>


<p>Now from our client (laptop), we can test our container on our remote host:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl http://192.168.2.18:8002
</span><span class='line'>Hostname: 8605d292e2b4
</span></code></pre></td></tr></table></div></figure>


<p>The same way can be used to do remote docker builds, you have your Dockerfile locally, but when you build, you point the context to the remote host, and your context (dockerfile and files referenced in your dockerfile) will be sent to the remote host. This way you can save a lot of battery life as the computation is done on the remote docker engine.</p>

<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a RAID5 Array With Mdadm on Linux]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/06/29/create-a-raid5-array-with-mdadm-on-linux/"/>
    <updated>2022-06-29T05:02:13-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/06/29/create-a-raid5-array-with-mdadm-on-linux</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/ruanbekker-raid5-array-linux.png" alt="setup-raid5-array-ubuntu-linux" /></p>

<p>In this tutorial we will setup a <a href="https://en.wikipedia.org/wiki/Standard_RAID_levels#RAID_5">RAID5</a> array, which is striping across multiple drives with distributed paritiy, which is good for redundancy. We will be using Ubuntu for our Linux Distribution, but the technique applies to other Linux Distributions as well.</p>

<h2>What are we trying to achieve</h2>

<p>We will run a server with one root disk and 6 extra disks, where we will first create our raid5 array with three disks, then I will show you how to expand your raid5 array by adding three other disks.</p>

<p>Things fail all the time, and it&rsquo;s not fun when hard drives breaks, therefore we want to do our best to prevent our applications from going down due to hardware failures. To achieve data redundancy, we want to use three hard drives, which we want to add into a raid configuration that will proviide us:</p>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Data_striping">striping</a>, which is the technique of segmenting logically sequential data, so that consecutive segments are stored on different physical storage devices.</li>
<li><a href="https://en.wikipedia.org/wiki/Parity_bit#RAID">distributed parity</a>, where parity data are distributed between the physical disks, where there is only one parity block per disk, this provide protection against one physical disk failure, where the minimum number of disks are three.</li>
</ul>


<p>This is how a RAID5 array looks like (image from diskpart.com):</p>

<p><img src="https://user-images.githubusercontent.com/567298/176410333-0ff98867-dfb5-4fe3-a037-cc5d20014ab5.png" alt="raid5" /></p>

<h2>Hardware Overview</h2>

<p>We will have a Linux server with one root disk and six extra disks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>lsblk
</span><span class='line'>NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
</span><span class='line'>xvda    202:0    <span class="m">0</span>    8G  <span class="m">0</span> disk
</span><span class='line'>└─xvda1 202:1    <span class="m">0</span>    8G  <span class="m">0</span> part /
</span><span class='line'>xvdb    202:16   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span><span class='line'>xvdc    202:32   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span><span class='line'>xvdd    202:48   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span><span class='line'>xvde    202:64   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span><span class='line'>xvdf    202:80   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span><span class='line'>xvdg    202:96   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span></code></pre></td></tr></table></div></figure>


<h2>Dependencies</h2>

<p>We require <code>mdadm</code> to create our raid configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt update
</span><span class='line'><span class="nv">$ </span>sudo apt install mdadm -y
</span></code></pre></td></tr></table></div></figure>


<h2>Format Disks</h2>

<p>First we will format and partition the following disks: <code>/dev/xvdb</code>, <code>/dev/xvdc</code>, <code>/dev/xvdd</code>, I will demonstrate the process for one disk, but repeat them for the other as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fdisk /dev/xvdc
</span><span class='line'>
</span><span class='line'>Welcome to fdisk <span class="o">(</span>util-linux 2.34<span class="o">)</span>.
</span><span class='line'>Changes will remain in memory only, <span class="k">until</span> you decide to write them.
</span><span class='line'>Be careful before using the write command.
</span><span class='line'>
</span><span class='line'>The old ext4 signature will be removed by a write command.
</span><span class='line'>
</span><span class='line'>Device does not contain a recognized partition table.
</span><span class='line'>Created a new DOS disklabel with disk identifier 0x26a2d2f6.
</span><span class='line'>
</span><span class='line'>Command <span class="o">(</span>m <span class="k">for</span> <span class="nb">help</span><span class="o">)</span>: n
</span><span class='line'>Partition <span class="nb">type</span>
</span><span class='line'><span class="nb">   </span>p   primary <span class="o">(</span><span class="m">0</span> primary, <span class="m">0</span> extended, <span class="m">4</span> free<span class="o">)</span>
</span><span class='line'>   e   extended <span class="o">(</span>container <span class="k">for</span> logical partitions<span class="o">)</span>
</span><span class='line'>Select <span class="o">(</span>default p<span class="o">)</span>: p
</span><span class='line'>Partition number <span class="o">(</span>1-4, default 1<span class="o">)</span>: 1
</span><span class='line'>First sector <span class="o">(</span>2048-20971519, default 2048<span class="o">)</span>:
</span><span class='line'>Last sector, +/-sectors or +/-size<span class="o">{</span>K,M,G,T,P<span class="o">}</span> <span class="o">(</span>2048-20971519, default 20971519<span class="o">)</span>:
</span><span class='line'>
</span><span class='line'>Created a new partition <span class="m">1</span> of <span class="nb">type</span> <span class="s1">&#39;Linux&#39;</span> and of size <span class="m">10</span> GiB.
</span><span class='line'>
</span><span class='line'>Command <span class="o">(</span>m <span class="k">for</span> <span class="nb">help</span><span class="o">)</span>: t
</span><span class='line'>Selected partition 1
</span><span class='line'>Hex code <span class="o">(</span><span class="nb">type </span>L to list all codes<span class="o">)</span>: fd
</span><span class='line'>Changed <span class="nb">type </span>of partition <span class="s1">&#39;Linux&#39;</span> to <span class="s1">&#39;Linux raid autodetect&#39;</span>.
</span><span class='line'>
</span><span class='line'>Command <span class="o">(</span>m <span class="k">for</span> <span class="nb">help</span><span class="o">)</span>: w
</span><span class='line'>The partition table has been altered.
</span><span class='line'>Calling ioctl<span class="o">()</span> to re-read partition table.
</span><span class='line'>Syncing disks.
</span></code></pre></td></tr></table></div></figure>


<h2>Create RAID5 Array</h2>

<p>Using <code>mdadm</code>, create the <code>/dev/md0</code> device, by specifying the raid level and the disks that we want to add to the array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mdadm --create /dev/md0 --level<span class="o">=</span><span class="m">5</span> --raid-devices<span class="o">=</span><span class="m">3</span> /dev/xvdb1 /dev/xvdc1 /dev/xvdd1
</span><span class='line'>mdadm: Defaulting to version 1.2 metadata
</span><span class='line'>mdadm: array /dev/md0 started.
</span></code></pre></td></tr></table></div></figure>


<p>Now that our device has been added, we can monitor the process:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /proc/mdstat
</span><span class='line'>Personalities : <span class="o">[</span>raid6<span class="o">]</span> <span class="o">[</span>raid5<span class="o">]</span> <span class="o">[</span>raid4<span class="o">]</span>
</span><span class='line'>md0 : active raid5 xvdd1<span class="o">[</span>3<span class="o">]</span> xvdc1<span class="o">[</span>1<span class="o">]</span> xvdb1<span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>      <span class="m">20951040</span> blocks super 1.2 level 5, 512k chunk, algorithm <span class="m">2</span> <span class="o">[</span>3/2<span class="o">]</span> <span class="o">[</span>UU_<span class="o">]</span>
</span><span class='line'>      <span class="o">[==</span>&gt;..................<span class="o">]</span>  <span class="nv">recovery</span> <span class="o">=</span> 11.5% <span class="o">(</span>1212732/10475520<span class="o">)</span> <span class="nv">finish</span><span class="o">=</span>4.7min <span class="nv">speed</span><span class="o">=</span>32103K/sec
</span><span class='line'>
</span><span class='line'>unused devices: &lt;none&gt;
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, currently its at 11.5%, give it some time to let it complete, you should treat the following as a completed state:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /proc/mdstat
</span><span class='line'>Personalities : <span class="o">[</span>raid6<span class="o">]</span> <span class="o">[</span>raid5<span class="o">]</span> <span class="o">[</span>raid4<span class="o">]</span>
</span><span class='line'>md0 : active raid5 xvdd1<span class="o">[</span>3<span class="o">]</span> xvdc1<span class="o">[</span>1<span class="o">]</span> xvdb1<span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>      <span class="m">20951040</span> blocks super 1.2 level 5, 512k chunk, algorithm <span class="m">2</span> <span class="o">[</span>3/3<span class="o">]</span> <span class="o">[</span>UUU<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>unused devices: &lt;none&gt;
</span></code></pre></td></tr></table></div></figure>


<p>We can also inspect devices with <code>mdadm</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mdadm -E /dev/xvd<span class="o">[</span>b-d<span class="o">]</span>1
</span><span class='line'>/dev/xvdb1:
</span><span class='line'>          Magic : a92b4efc
</span><span class='line'>        Version : 1.2
</span><span class='line'>    Feature Map : 0x0
</span><span class='line'>     Array UUID : ea997bce:a530519c:ae41022e:0f4306bf
</span><span class='line'>           Name : ip-172-31-3-57:0  <span class="o">(</span><span class="nb">local </span>to host ip-172-31-3-57<span class="o">)</span>
</span><span class='line'>  Creation Time : Wed Jan <span class="m">12</span> 13:36:39 2022
</span><span class='line'>     Raid Level : raid5
</span><span class='line'>   Raid Devices : 3
</span><span class='line'>
</span><span class='line'> Avail Dev Size : <span class="m">20951040</span> <span class="o">(</span>9.99 GiB 10.73 GB<span class="o">)</span>
</span><span class='line'>     Array Size : <span class="m">20951040</span> <span class="o">(</span>19.98 GiB 21.45 GB<span class="o">)</span>
</span><span class='line'>    Data Offset : <span class="m">18432</span> sectors
</span><span class='line'>   Super Offset : <span class="m">8</span> sectors
</span><span class='line'>   Unused Space : <span class="nv">before</span><span class="o">=</span><span class="m">18280</span> sectors, <span class="nv">after</span><span class="o">=</span><span class="m">0</span> sectors
</span><span class='line'>          State : clean
</span><span class='line'>    Device UUID : 8305a179:3ef96520:6c7b41dd:bdc7401f
</span><span class='line'>
</span><span class='line'>    Update Time : Wed Jan <span class="m">12</span> 13:42:14 2022
</span><span class='line'>  Bad Block Log : <span class="m">512</span> entries available at offset <span class="m">136</span> sectors
</span><span class='line'>       Checksum : 1f9b4887 - correct
</span><span class='line'>         Events : 18
</span><span class='line'>
</span><span class='line'>         Layout : left-symmetric
</span><span class='line'>     Chunk Size : 512K
</span><span class='line'>
</span><span class='line'>   Device Role : Active device 0
</span><span class='line'>   Array State : AAA <span class="o">(</span><span class="s1">&#39;A&#39;</span> <span class="o">==</span> active, <span class="s1">&#39;.&#39;</span> <span class="o">==</span> missing, <span class="s1">&#39;R&#39;</span> <span class="o">==</span> replacing<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To get information about your raid5 device:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mdadm --detail /dev/md0
</span><span class='line'>/dev/md0:
</span><span class='line'>           Version : 1.2
</span><span class='line'>     Creation Time : Wed Jan <span class="m">12</span> 13:36:39 2022
</span><span class='line'>        Raid Level : raid5
</span><span class='line'>        Array Size : <span class="m">20951040</span> <span class="o">(</span>19.98 GiB 21.45 GB<span class="o">)</span>
</span><span class='line'>     Used Dev Size : <span class="m">10475520</span> <span class="o">(</span>9.99 GiB 10.73 GB<span class="o">)</span>
</span><span class='line'>      Raid Devices : 3
</span><span class='line'>     Total Devices : 3
</span><span class='line'>       Persistence : Superblock is persistent
</span><span class='line'>
</span><span class='line'>       Update Time : Wed Jan <span class="m">12</span> 13:42:14 2022
</span><span class='line'>             State : clean
</span><span class='line'>    Active Devices : 3
</span><span class='line'>   Working Devices : 3
</span><span class='line'>    Failed Devices : 0
</span><span class='line'>     Spare Devices : 0
</span><span class='line'>
</span><span class='line'>            Layout : left-symmetric
</span><span class='line'>        Chunk Size : 512K
</span><span class='line'>
</span><span class='line'>Consistency Policy : resync
</span><span class='line'>
</span><span class='line'>              Name : ip-172-31-3-57:0  <span class="o">(</span><span class="nb">local </span>to host ip-172-31-3-57<span class="o">)</span>
</span><span class='line'>              UUID : ea997bce:a530519c:ae41022e:0f4306bf
</span><span class='line'>            Events : 18
</span><span class='line'>
</span><span class='line'>    Number   Major   Minor   RaidDevice State
</span><span class='line'>       <span class="m">0</span>     <span class="m">202</span>       <span class="m">17</span>        <span class="m">0</span>      active sync   /dev/xvdb1
</span><span class='line'>       <span class="m">1</span>     <span class="m">202</span>       <span class="m">33</span>        <span class="m">1</span>      active sync   /dev/xvdc1
</span><span class='line'>       <span class="m">3</span>     <span class="m">202</span>       <span class="m">49</span>        <span class="m">2</span>      active sync   /dev/xvdd1
</span></code></pre></td></tr></table></div></figure>


<h2>Create Filesystems</h2>

<p>We will use our <code>/dev/md0</code> device and create a <code>ext4</code> filesystem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkfs.ext4 /dev/md0
</span><span class='line'>mke2fs 1.45.5 <span class="o">(</span>07-Jan-2020<span class="o">)</span>
</span><span class='line'>Creating filesystem with <span class="m">5237760</span> 4k blocks and <span class="m">1310720</span> inodes
</span><span class='line'>Filesystem UUID: 579f045e-d270-4ff2-b36b-8dc506c27c5f
</span><span class='line'>Superblock backups stored on blocks:
</span><span class='line'>  32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
</span><span class='line'>  4096000
</span><span class='line'>
</span><span class='line'>Allocating group tables: <span class="k">done</span>
</span><span class='line'>Writing inode tables: <span class="k">done</span>
</span><span class='line'>Creating journal <span class="o">(</span><span class="m">32768</span> blocks<span class="o">)</span>: <span class="k">done</span>
</span><span class='line'>Writing superblocks and filesystem accounting information: <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can then verify that by looking at our block devices using <code>lsblk</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>lsblk
</span><span class='line'>NAME    MAJ:MIN RM  SIZE RO TYPE  MOUNTPOINT
</span><span class='line'>xvda    202:0    <span class="m">0</span>    8G  <span class="m">0</span> disk
</span><span class='line'>└─xvda1 202:1    <span class="m">0</span>    8G  <span class="m">0</span> part  /
</span><span class='line'>xvdb    202:16   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span><span class='line'>└─xvdb1 202:17   <span class="m">0</span>   10G  <span class="m">0</span> part
</span><span class='line'>  └─md0   9:0    <span class="m">0</span>   20G  <span class="m">0</span> raid5
</span><span class='line'>xvdc    202:32   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span><span class='line'>└─xvdc1 202:33   <span class="m">0</span>   10G  <span class="m">0</span> part
</span><span class='line'>  └─md0   9:0    <span class="m">0</span>   20G  <span class="m">0</span> raid5
</span><span class='line'>xvdd    202:48   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span><span class='line'>└─xvdd1 202:49   <span class="m">0</span>   10G  <span class="m">0</span> part
</span><span class='line'>  └─md0   9:0    <span class="m">0</span>   20G  <span class="m">0</span> raid5
</span><span class='line'>xvde    202:64   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span><span class='line'>xvdf    202:80   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span><span class='line'>xvdg    202:96   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span></code></pre></td></tr></table></div></figure>


<p>Now we can mount our device to <code>/mnt</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mount /dev/md0 /mnt
</span></code></pre></td></tr></table></div></figure>


<p>We can verify that the device is mounted by using <code>df</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>df -h
</span><span class='line'>Filesystem      Size  Used Avail Use% Mounted on
</span><span class='line'>/dev/root       7.7G  1.5G  6.3G  19% /
</span><span class='line'>/dev/md0         20G   45M   19G   1% /mnt
</span></code></pre></td></tr></table></div></figure>


<p>To persist the device across reboots, add it to the <code>/etc/fstab</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /etc/fstab
</span><span class='line'>/dev/md0                /mnt     ext4   defaults                <span class="m">0</span> 0
</span></code></pre></td></tr></table></div></figure>


<p>Now our filesystem which is mounted at <code>/mnt</code> is ready to be used.</p>

<h2>RAID Configuration (across reboots)</h2>

<p>By default RAID doesn’t have a config file, therefore we need to save it manually. If this step is not followed RAID device will not be in md0, but perhaps something else.</p>

<p>So, we must have to save the configuration to persist across reboots, when it reboot it gets loaded to the kernel and RAID will also get loaded.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mdadm --detail --scan --verbose &gt;&gt; /etc/mdadm.conf
</span></code></pre></td></tr></table></div></figure>


<p>Note: Saving the configuration will keep the RAID level stable in the md0 device.</p>

<h2>Adding Spare Devices</h2>

<p>Earlier I mentioned that we have spare disks that we can use to expand our raid device. After they have been formatted we can add them as spare devices to our raid setup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mdadm --add /dev/md0 /dev/xvde1 /dev/xvdf1 /dev/xvdg1
</span><span class='line'>mdadm: added /dev/xvde1
</span><span class='line'>mdadm: added /dev/xvdf1
</span><span class='line'>mdadm: added /dev/xvdg1
</span></code></pre></td></tr></table></div></figure>


<p>Verify our change by viewing the detail of our device:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mdadm --detail /dev/md0
</span><span class='line'>/dev/md0:
</span><span class='line'>           Version : 1.2
</span><span class='line'>     Creation Time : Wed Jan <span class="m">12</span> 13:36:39 2022
</span><span class='line'>        Raid Level : raid5
</span><span class='line'>        Array Size : <span class="m">20951040</span> <span class="o">(</span>19.98 GiB 21.45 GB<span class="o">)</span>
</span><span class='line'>     Used Dev Size : <span class="m">10475520</span> <span class="o">(</span>9.99 GiB 10.73 GB<span class="o">)</span>
</span><span class='line'>      Raid Devices : 3
</span><span class='line'>     Total Devices : 6
</span><span class='line'>       Persistence : Superblock is persistent
</span><span class='line'>
</span><span class='line'>       Update Time : Wed Jan <span class="m">12</span> 14:28:23 2022
</span><span class='line'>             State : clean
</span><span class='line'>    Active Devices : 3
</span><span class='line'>   Working Devices : 6
</span><span class='line'>    Failed Devices : 0
</span><span class='line'>     Spare Devices : 3
</span><span class='line'>
</span><span class='line'>            Layout : left-symmetric
</span><span class='line'>        Chunk Size : 512K
</span><span class='line'>
</span><span class='line'>Consistency Policy : resync
</span><span class='line'>
</span><span class='line'>              Name : ip-172-31-3-57:0  <span class="o">(</span><span class="nb">local </span>to host ip-172-31-3-57<span class="o">)</span>
</span><span class='line'>              UUID : ea997bce:a530519c:ae41022e:0f4306bf
</span><span class='line'>            Events : 27
</span><span class='line'>
</span><span class='line'>    Number   Major   Minor   RaidDevice State
</span><span class='line'>       <span class="m">0</span>     <span class="m">202</span>       <span class="m">17</span>        <span class="m">0</span>      active sync   /dev/xvdb1
</span><span class='line'>       <span class="m">1</span>     <span class="m">202</span>       <span class="m">33</span>        <span class="m">1</span>      active sync   /dev/xvdc1
</span><span class='line'>       <span class="m">3</span>     <span class="m">202</span>       <span class="m">49</span>        <span class="m">2</span>      active sync   /dev/xvdd1
</span><span class='line'>
</span><span class='line'>       <span class="m">4</span>     <span class="m">202</span>       <span class="m">65</span>        -      spare   /dev/xvde1
</span><span class='line'>       <span class="m">5</span>     <span class="m">202</span>       <span class="m">81</span>        -      spare   /dev/xvdf1
</span><span class='line'>       <span class="m">6</span>     <span class="m">202</span>       <span class="m">97</span>        -      spare   /dev/xvdg1
</span></code></pre></td></tr></table></div></figure>


<p>As you can see it&rsquo;s only spares at this moment, we can use the spares for data storage, by growing our device:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mdadm --grow --raid-devices<span class="o">=</span><span class="m">6</span> /dev/md0
</span></code></pre></td></tr></table></div></figure>


<p>Verify:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mdadm --detail /dev/md0
</span><span class='line'>/dev/md0:
</span><span class='line'>           Version : 1.2
</span><span class='line'>     Creation Time : Wed Jan <span class="m">12</span> 13:36:39 2022
</span><span class='line'>        Raid Level : raid5
</span><span class='line'>        Array Size : <span class="m">20951040</span> <span class="o">(</span>19.98 GiB 21.45 GB<span class="o">)</span>
</span><span class='line'>     Used Dev Size : <span class="m">10475520</span> <span class="o">(</span>9.99 GiB 10.73 GB<span class="o">)</span>
</span><span class='line'>      Raid Devices : 6
</span><span class='line'>     Total Devices : 6
</span><span class='line'>       Persistence : Superblock is persistent
</span><span class='line'>
</span><span class='line'>       Update Time : Wed Jan <span class="m">12</span> 15:15:31 2022
</span><span class='line'>             State : clean, reshaping
</span><span class='line'>    Active Devices : 6
</span><span class='line'>   Working Devices : 6
</span><span class='line'>    Failed Devices : 0
</span><span class='line'>     Spare Devices : 0
</span><span class='line'>
</span><span class='line'>            Layout : left-symmetric
</span><span class='line'>        Chunk Size : 512K
</span><span class='line'>
</span><span class='line'>Consistency Policy : resync
</span><span class='line'>
</span><span class='line'>    Reshape Status : 0% <span class="nb">complete</span>
</span><span class='line'><span class="nb">     </span>Delta Devices : 3, <span class="o">(</span>3-&gt;6<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>              Name : ip-172-31-3-57:0  <span class="o">(</span><span class="nb">local </span>to host ip-172-31-3-57<span class="o">)</span>
</span><span class='line'>              UUID : ea997bce:a530519c:ae41022e:0f4306bf
</span><span class='line'>            Events : 36
</span><span class='line'>
</span><span class='line'>    Number   Major   Minor   RaidDevice State
</span><span class='line'>       <span class="m">0</span>     <span class="m">202</span>       <span class="m">17</span>        <span class="m">0</span>      active sync   /dev/xvdb1
</span><span class='line'>       <span class="m">1</span>     <span class="m">202</span>       <span class="m">33</span>        <span class="m">1</span>      active sync   /dev/xvdc1
</span><span class='line'>       <span class="m">3</span>     <span class="m">202</span>       <span class="m">49</span>        <span class="m">2</span>      active sync   /dev/xvdd1
</span><span class='line'>       <span class="m">6</span>     <span class="m">202</span>       <span class="m">97</span>        <span class="m">3</span>      active sync   /dev/xvdg1
</span><span class='line'>       <span class="m">5</span>     <span class="m">202</span>       <span class="m">81</span>        <span class="m">4</span>      active sync   /dev/xvdf1
</span><span class='line'>       <span class="m">4</span>     <span class="m">202</span>       <span class="m">65</span>        <span class="m">5</span>      active sync   /dev/xvde1
</span></code></pre></td></tr></table></div></figure>


<p>Wait for the raid to rebuild, by viewing the <code>mdstat</code>::</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /proc/mdstat
</span><span class='line'>Personalities : <span class="o">[</span>raid6<span class="o">]</span> <span class="o">[</span>raid5<span class="o">]</span> <span class="o">[</span>raid4<span class="o">]</span>
</span><span class='line'>md0 : active raid5 xvdg1<span class="o">[</span>6<span class="o">]</span> xvdf1<span class="o">[</span>5<span class="o">]</span> xvde1<span class="o">[</span>4<span class="o">]</span> xvdd1<span class="o">[</span>3<span class="o">]</span> xvdc1<span class="o">[</span>1<span class="o">]</span> xvdb1<span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>      <span class="m">20951040</span> blocks super 1.2 level 5, 512k chunk, algorithm <span class="m">2</span> <span class="o">[</span>6/6<span class="o">]</span> <span class="o">[</span>UUUUUU<span class="o">]</span>
</span><span class='line'>      <span class="o">[</span>&gt;....................<span class="o">]</span>  <span class="nv">reshape</span> <span class="o">=</span>  0.7% <span class="o">(</span>76772/10475520<span class="o">)</span> <span class="nv">finish</span><span class="o">=</span>18.0min <span class="nv">speed</span><span class="o">=</span>9596K/sec
</span><span class='line'>
</span><span class='line'>unused devices: &lt;none&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>Resizing our Filesystem</h2>

<p>Once we added the spares and growed our device, we need to run integrity checks, then we can resize the volume. But first, we need to unmount our filesystem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>umount /mnt
</span></code></pre></td></tr></table></div></figure>


<p>Run a integrity check:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>e2fsck -f /dev/md0
</span><span class='line'>e2fsck 1.45.5 <span class="o">(</span>07-Jan-2020<span class="o">)</span>
</span><span class='line'>Pass 1: Checking inodes, blocks, and sizes
</span><span class='line'>Pass 2: Checking directory structure
</span><span class='line'>Pass 3: Checking directory connectivity
</span><span class='line'>Pass 4: Checking reference counts
</span><span class='line'>Pass 5: Checking group summary information
</span><span class='line'>/dev/md0: 12/1310720 files <span class="o">(</span>0.0% non-contiguous<span class="o">)</span>, 126323/5237760 blocks
</span></code></pre></td></tr></table></div></figure>


<p>Once that has passed, resize the file system:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>resize2fs /dev/md0
</span><span class='line'>resize2fs 1.45.5 <span class="o">(</span>07-Jan-2020<span class="o">)</span>
</span><span class='line'>Resizing the filesystem on /dev/md0 to <span class="m">13094400</span> <span class="o">(</span>4k<span class="o">)</span> blocks.
</span><span class='line'>The filesystem on /dev/md0 is now <span class="m">13094400</span> <span class="o">(</span>4k<span class="o">)</span> blocks long.
</span></code></pre></td></tr></table></div></figure>


<p>Then we remount our filesystem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mount /dev/md0 /mnt
</span></code></pre></td></tr></table></div></figure>


<p>After the filesystem has been mounted, we can view the disk size and confirm that the size increased:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>df -h /mnt
</span><span class='line'>Filesystem      Size  Used Avail Use% Mounted on
</span><span class='line'>/dev/md0         50G   52M   47G   1% /mnt
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install a Specific Python Version on Ubuntu]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/06/23/install-a-specific-python-version-on-ubuntu/"/>
    <updated>2022-06-23T17:53:46-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/06/23/install-a-specific-python-version-on-ubuntu</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/ruanbekker-install-specific-python-version.png" alt="install-specific-python-version" /></p>

<p>In this short tutorial, I will demonstrate how to install a spcific version of Python on Ubuntu Linux.</p>

<p><a href="https://ruan.dev"><img src="https://img.shields.io/badge/website-ruan.dev-red.svg" alt="" /></a> <a href="https://twitter.com/ruanbekker"><img src="https://img.shields.io/badge/twitter-@ruanbekker-00acee.svg" alt="" /></a> <a href="https://github.com/ruanbekker"><img src="https://img.shields.io/badge/github-cheatsheets-orange.svg" alt="" /></a> <a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/dm-saythanks.io-07B63F.svg" alt="Say Thanks!" /></a>  <a href="https://ko-fi.com/ruanbekker"><img src="https://img.shields.io/badge/-Buy%20Me%20a%20Coffee-ff5f5f?logo=ko-fi&amp;logoColor=white" alt="Ko-fi" /></a></p>

<h2>Dependencies</h2>

<p>Update the apt repositories:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt update
</span></code></pre></td></tr></table></div></figure>


<p>Then install the required dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt install libssl-dev openssl wget build-essential zlib1g-dev -y
</span></code></pre></td></tr></table></div></figure>


<h2>Python Versions</h2>

<p>Head over to the <a href="https://www.python.org/downloads/">Python Downloads</a> section and select the version of your choice, in my case I will be using Python 3.8.13, once you have the download link, download it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget https://www.python.org/ftp/python/3.8.13/Python-3.8.13.tgz
</span></code></pre></td></tr></table></div></figure>


<p>Then extract the tarball:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tar -xvf Python-3.8.13.tgz
</span></code></pre></td></tr></table></div></figure>


<p>Once it completes, change to the directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>Python-3.8.13
</span></code></pre></td></tr></table></div></figure>


<h2>Installation</h2>

<p>Compile and add <code>--enable-optimizations</code> flag as an argument:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./configure --enable-optimizations
</span></code></pre></td></tr></table></div></figure>


<p>Run make and make install:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>make
</span><span class='line'><span class="nv">$ </span>sudo make install
</span></code></pre></td></tr></table></div></figure>


<p>Once it completes, you can symlink the python binary so that it&rsquo;s detected by your <code>PATH</code>, if you have no installed python versions or want to use it as the default, you can force overwriting the symlink:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo ln -fs /usr/local/bin/python3 /usr/bin/python3
</span></code></pre></td></tr></table></div></figure>


<p>Then we can test it by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python3 --version
</span><span class='line'>Python 3.8.13
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Persist Iptables Rules After Reboots]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/06/15/how-to-persist-iptables-rules-after-reboots/"/>
    <updated>2022-06-15T06:10:12-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/06/15/how-to-persist-iptables-rules-after-reboots</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/ruanbekker-blog-persist-iptables.png" alt="persist-iptables-after-reboot" /></p>

<p>In this tutorial we will demonstrate how to persist iptables rules across reboots.</p>

<h2>Rules Peristence</h2>

<p>By default, when you create iptables rules its active, but as soon as you restart your server, the rules will be gone. Therefore we need to persist these rules across reboots.</p>

<h2>Dependencies</h2>

<p>We require the package <code>iptables-persistent</code> and I will install it on a debian system so I will be using <code>apt</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt update
</span><span class='line'>sudo apt install iptables-persistent -y
</span></code></pre></td></tr></table></div></figure>


<p>Ensure that the service is enabled to start on boot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo systemctl <span class="nb">enable </span>netfilter-persistent
</span></code></pre></td></tr></table></div></figure>


<h2>Creating Iptables Rules</h2>

<p>In this case I will allow port 80 on TCP from all sources:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo iptables -I INPUT -p tcp --dport <span class="m">80</span> -j ACCEPT
</span></code></pre></td></tr></table></div></figure>


<p>To persist our current rules, we need to save them to <code>/etc/iptables/rules.v4</code> with <code>iptables-save</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo iptables-save &gt; /etc/iptables/rules.v4
</span></code></pre></td></tr></table></div></figure>


<p>Now when we restart, our rules will be loaded and our previous defined rules will be active.</p>

<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Read and Write Json Data With Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/06/14/how-to-read-and-write-json-data-with-python/"/>
    <updated>2022-06-14T19:02:53-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/06/14/how-to-read-and-write-json-data-with-python</id>
    <content type="html"><![CDATA[<p>This is a short tutorial on how to use python to write and read files.</p>

<h2>Example</h2>

<p>To write the following json data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;ruan&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To a file named <code>/tmp/data.json</code>, we will be using this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="s">&quot;ruan&quot;</span><span class="p">}</span>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;data.json&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we execute that code, we will find the data inside that file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /tmp/data.json
</span><span class='line'><span class="o">{</span><span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;ruan&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if we want to use python to read the data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;data.json&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>    <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we execute that code, we will see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span><span class="err">&#39;name&#39;:</span> <span class="err">&#39;ruan&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Linkding Bookmarks Manager on Docker]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/05/31/setup-linkding-bookmarks-manager-on-docker/"/>
    <updated>2022-05-31T15:50:24-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/05/31/setup-linkding-bookmarks-manager-on-docker</id>
    <content type="html"><![CDATA[<p><strong>Note</strong>:  <em>Originally posted on <a href="https://containers.fan/posts/setup-linkding-bookmarks-manager/">containers.fan</a></em></p>

<p>I&rsquo;ve stumbled upon a great bookmarks manager service called <strong><a href="https://github.com/sissbruecker/linkding/blob/master/README.md">Linkding</a></strong>. What I really like about it, it allows you to save your bookmarks, assign tags to it to search for it later, it has chrome and firefox browser extensions, and comes with an API.</p>

<h2>Installing Linkding</h2>

<p>We will be using Traefik to do SSL termination and host based routing, if you don’t have Traefik running already, you can follow this post to get that set up:</p>

<ul>
<li><a href="https://containers.fan/posts/setup-traefik-v2-docker-compose/">https://containers.fan/posts/setup-traefik-v2-docker-compose/</a></li>
</ul>


<p>You can follow the <a href="https://github.com/sissbruecker/linkding/blob/master/README.md">linkding documentation</a> for more detailed information.</p>

<p>The <code>docker-compose.yml</code> that I will be use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&quot;3.8&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">linkding</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sissbruecker/linkding:latest</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linkding</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./data:/etc/linkding/data</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">LD_DISABLE_BACKGROUND_TASKS=False</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">LD_DISABLE_URL_VALIDATION=False</span>
</span><span class='line'>    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">unless-stopped</span>
</span><span class='line'>    <span class="l-Scalar-Plain">cpus</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0.5</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mem_limit</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">512m</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">public</span>
</span><span class='line'>    <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&quot;traefik.enable=true&quot;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&quot;traefik.http.routers.linkding-app.rule=Host(`linkding.yourdomain.net`)&quot;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&quot;traefik.http.routers.linkding-app.entrypoints=https&quot;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&quot;traefik.http.routers.linkding-app.tls.certresolver=letsencrypt&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">logging</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span> <span class="s">&quot;json-file&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">max-size</span><span class="p-Indicator">:</span> <span class="s">&quot;1m&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">public</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">public</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make sure to replace the FQDN of your choice, as I used <code>linkding.yourdomain.net</code> as an example.</p>

<p>Once everything is in place, boot the stack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-compose up -d
</span></code></pre></td></tr></table></div></figure>


<h2>Admin Account Registration</h2>

<p>Once your linkding container has booted, you can create a admin user with the following command (ensure to replace where needed):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-compose <span class="nb">exec </span>linkding python manage.py createsuperuser --username<span class="o">=</span>admin --email<span class="o">=</span>root@localhost
</span></code></pre></td></tr></table></div></figure>


<p>Once you head over to the linkding url that you provided and you logon, you should be able to see something like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/171265323-2b23515f-8535-4c89-a195-6ab9b63eab68.png" alt="linkding" /></p>

<h2>Creating Bookmarks</h2>

<p>When you select &ldquo;Add Bookmark&rdquo; and you provide the URL, linkding will retrieve the title and the description and populate it for you, and you can provide the tags (seperated by spaces):</p>

<p><img src="https://user-images.githubusercontent.com/567298/171266278-ab31afc0-4aca-48fc-9795-4d49ae9b3508.png" alt="linkding-bookmark" /></p>

<h2>Browser Extensions</h2>

<p>To add a browser extension, select &ldquo;Settings&rdquo;, then &ldquo;Integrations&rdquo;, then you will find the link to the browser extension for Chrome and Firefox:</p>

<p><img src="https://user-images.githubusercontent.com/567298/171266713-3e2b2e5d-2ff0-43be-9713-5dd69a15d0cd.png" alt="linkding-browser-extension" /></p>

<p>After you install the browser extension and click on it for the first time, it will ask you to set the Linkding Base URL and API Authentication Token:</p>

<p><img src="https://user-images.githubusercontent.com/567298/171267455-123cad06-3758-4991-bb7e-40dc43a62996.png" alt="linkding-configuration" /></p>

<p>You can find that at the bottom of the &ldquo;Integrations&rdquo; section:</p>

<p><img src="https://user-images.githubusercontent.com/567298/171269639-45e65ab0-b413-4879-9c8f-0b82f5884096.png" alt="linkding-rest-api-access" /></p>

<h2>REST API</h2>

<p>You can follow the <a href="https://github.com/sissbruecker/linkding/blob/master/docs/API.md">API Docs</a> for more information, using an example to search for bookmarks with the term &ldquo;docker&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -sL -H <span class="s2">&quot;Authorization: Token ${LINKDING_API_TOKEN}&quot;</span> <span class="s2">&quot;https://linkding.${DOMAIN}/api/bookmarks?q=docker&quot;</span> <span class="p">|</span> python3 -m json.tool
</span></code></pre></td></tr></table></div></figure>


<p>In my case returns a response like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;count&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;next&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;previous&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;results&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;https://www.docker.com/blog/deploying-web-applications-quicker-and-easier-with-caddy-2/&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;website_title&quot;</span><span class="p">:</span> <span class="s2">&quot;Deploying Web Applications Quicker and Easier with Caddy 2 - Docker&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;website_description&quot;</span><span class="p">:</span> <span class="s2">&quot;Deploying web apps can be tough, even with leading server technologies. Learn how you can use Caddy 2 and Docker simplify this process.&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;is_archived&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;tag_names&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;caddy&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;docker&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="nt">&quot;date_added&quot;</span><span class="p">:</span> <span class="s2">&quot;2022-05-31T19:11:53.739002Z&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;date_modified&quot;</span><span class="p">:</span> <span class="s2">&quot;2022-05-31T19:11:53.739016Z&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
</feed>
