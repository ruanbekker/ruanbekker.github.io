<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2019-04-23T19:23:13-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Drone CI to Build a Jekyll Site and Deploy to Docker Swarm]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/23/using-drone-ci-to-build-a-jekyll-site-and-deploy-to-docker-swarm/"/>
    <updated>2019-04-23T17:57:02-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/23/using-drone-ci-to-build-a-jekyll-site-and-deploy-to-docker-swarm</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/56618556-3de7ca00-6623-11e9-995f-c22792f0ab21.png" alt="image" /></p>

<p>CICD Pipelines! &lt;3</p>

<p>In this post I will show you how to setup a cicd pipeline using drone to build a jekyll site and deploy to docker swarm.</p>

<h2>Environment Overview</h2>

<p><strong>Jekyll&rsquo;s Codebase</strong>: Our code will be hosted on Github (I will demonstrate how to set it up from scratch)</p>

<p><strong>Secret Store</strong>: Our secrets such as ssh key, swarm host address etc will be stored in drones secrets manager</p>

<p><strong>Docker Swarm</strong>: Docker Swarm has Traefik as a HTTP Loadbalancer</p>

<p><strong>Drone Server and Agent</strong>: If you dont have drone, you can setup <a href="https://blog.ruanbekker.com/blog/2019/04/18/setup-a-drone-cicd-environment-on-docker-with-letsencrypt/">drone server and agent on docker</a> or have a look at <a href="https://cloud.drone.io">cloud.drone.io</a></p>

<p><strong>Workflow:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* Whenever a push to master is receive on github, the pipeline will be triggered
</span><span class='line'>* The content from our github repository will be cloned to the agent on a container
</span><span class='line'>* Jekyll will build and the output will be transferred to docker swarm using rsync
</span><span class='line'>* The docker-compose.yml will be transferred to the docker swarm host using scp
</span><span class='line'>* A docker stack deploy is ran via ssh</span></code></pre></td></tr></table></div></figure>


<h2>Install Jekyll Locally</h2>

<p>Install Jekyll locally, as we will use it to create the initial site. I am using a mac, so I will be using <code>brew</code>. For other operating systems, have a look at <a href="https://jekyllrb.com/docs/installation/">this post</a>.</p>

<p>I will be demonstrating with a weightloss blog as an example.</p>

<p>Install jekyll:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install jekyll</span></code></pre></td></tr></table></div></figure>


<p>Go ahead and create a new site which will host the data for your jekyll site:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ jekyll new blog-weightloss</span></code></pre></td></tr></table></div></figure>


<h2>Create a Github Repository</h2>

<p>First we need to create an empty github repository, in my example it was <code>github.com/ruanbekker/blog-weightloss.git</code>. Once you create the repo change into the directory created by the <code>jekyll new</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd blog-weightloss</span></code></pre></td></tr></table></div></figure>


<p>Now initialize git, set the remote, add the jekyll data and push to github:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git init
</span><span class='line'>$ git remote add origin git@github.com:ruanbekker/blog-weightloss.git # &lt;== change to your repository
</span><span class='line'>$ git add .
</span><span class='line'>$ git commit -m "first commit"
</span><span class='line'>$ git push origin master</span></code></pre></td></tr></table></div></figure>


<p>You should see your data on your github repository.</p>

<h2>Create Secrets on Drone</h2>

<p>Logon to the Drone UI, sync repositories, activate the new repository and head over to settings where you will find the secrets section.</p>

<p>Add the following secrets:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Secret Name: swarm_host
</span><span class='line'>Secret Value: ip address of your swarm
</span><span class='line'>
</span><span class='line'>Secret Name: swarm_key
</span><span class='line'>Secret Value: contents of your private ssh key
</span><span class='line'>
</span><span class='line'>Secret Name: swarm_user
</span><span class='line'>Secret Value: the user that is allowed to ssh</span></code></pre></td></tr></table></div></figure>


<p>You should see the following:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56619871-5c4fc480-6627-11e9-8820-c9d4ddff698c.png" alt="image" /></p>

<h2>Add the Drone Config</h2>

<p>Drone looks from a <code>.drone.yml</code> file in the root directory for instructions on how to do its tasks. Lets go ahead and declare our pipeline:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim .drone.yml</span></code></pre></td></tr></table></div></figure>


<p>And populate the drone config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pipeline:
</span><span class='line'>  jekyll-build:
</span><span class='line'>    image: jekyll/jekyll:latest
</span><span class='line'>    commands:
</span><span class='line'>      - touch Gemfile.lock
</span><span class='line'>      - chmod a+w Gemfile.lock
</span><span class='line'>      - chown -R jekyll:jekyll /drone
</span><span class='line'>      - gem update --system
</span><span class='line'>      - gem install bundler
</span><span class='line'>      - bundle install
</span><span class='line'>      - bundle exec jekyll build
</span><span class='line'>
</span><span class='line'>  transfer-build:
</span><span class='line'>    image: drillster/drone-rsync
</span><span class='line'>    hosts:
</span><span class='line'>      from_secret: swarm_host
</span><span class='line'>    key:
</span><span class='line'>      from_secret: swarm_key
</span><span class='line'>    user:
</span><span class='line'>      from_secret: swarm_user
</span><span class='line'>    source: ./*
</span><span class='line'>    target: ~/my-weightloss-blog.com
</span><span class='line'>    recursive: true
</span><span class='line'>    delete: true
</span><span class='line'>    when:
</span><span class='line'>      branch: [master]
</span><span class='line'>      event: [push]
</span><span class='line'>
</span><span class='line'>  transfer-compose:
</span><span class='line'>    image: appleboy/drone-scp
</span><span class='line'>    host:
</span><span class='line'>      from_secret: swarm_host
</span><span class='line'>    username:
</span><span class='line'>      from_secret: swarm_user
</span><span class='line'>    key:
</span><span class='line'>      from_secret: swarm_key
</span><span class='line'>    target: /root/my-weightloss-blog.com
</span><span class='line'>    source:
</span><span class='line'>      - docker-compose.yml
</span><span class='line'>    when:
</span><span class='line'>      branch: [master]
</span><span class='line'>      event: [push]
</span><span class='line'>
</span><span class='line'>  deploy-jekyll-to-swarm:
</span><span class='line'>    image: appleboy/drone-ssh
</span><span class='line'>    host:
</span><span class='line'>      from_secret: swarm_host
</span><span class='line'>    username:
</span><span class='line'>      from_secret: swarm_user
</span><span class='line'>    key:
</span><span class='line'>      from_secret: swarm_key
</span><span class='line'>    port: 22
</span><span class='line'>    script:
</span><span class='line'>      - docker stack deploy --prune -c /root/my-weightloss-blog.com/docker-compose.yml apps
</span><span class='line'>    when:
</span><span class='line'>      branch: [master]
</span><span class='line'>      event: [push]</span></code></pre></td></tr></table></div></figure>


<h2>Notifications?</h2>

<p>If you want to be notified about your builds, you can add a slack notification step as the last step.</p>

<p>To do that, create a new webhook integration, you can <a href="https://blog.ruanbekker.com/blog/2019/04/18/setup-a-slack-webhook-for-sending-messages-from-applications/">follow this post for a step by step guide</a>. After you have the webhook, go to secrets and create a <code>slack_webhook</code> secret.</p>

<p>Then apply the notification step as shown below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  notify-via-slack:
</span><span class='line'>    image: plugins/slack
</span><span class='line'>    webhook:
</span><span class='line'>      from_secret: slack_webhook
</span><span class='line'>    channel: system_events
</span><span class='line'>    template: &gt;
</span><span class='line'>      
</span><span class='line'>        [DRONE CI]: ** : /
</span><span class='line'>        ( -  | )
</span><span class='line'>
</span><span class='line'>      
</span><span class='line'>        [DRONE CI]: ** : /
</span><span class='line'>        ( -  | )
</span><span class='line'>      </span></code></pre></td></tr></table></div></figure>


<p>Based on the status, you should get a notification similar like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56622206-6e356580-662f-11e9-8d93-286c9c126d24.png" alt="image" /></p>

<h2>Add the Docker Compose</h2>

<p>Next we need to declare our docker compose file which is needed to deploy our jekyll service to the swarm:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim docker-compose.yml</span></code></pre></td></tr></table></div></figure>


<p>And populate this info (just change the values for your own environment/settings):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&#39;3.5&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">myweightlossblog</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ruanbekker/jekyll:contrast</span>
</span><span class='line'>    <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">jekyll serve --watch --force_polling --verbose</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">appnet</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/root/my-weightloss-blog.com:/srv/jekyll</span>
</span><span class='line'>    <span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">mode</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">replicated</span>
</span><span class='line'>      <span class="l-Scalar-Plain">replicas</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>      <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&quot;traefik.backend.loadbalancer.sticky=false&quot;</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&quot;traefik.backend.loadbalancer.swarm=true&quot;</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&quot;traefik.backend=myweightlossblog&quot;</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&quot;traefik.docker.network=appnet&quot;</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&quot;traefik.entrypoints=https&quot;</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&quot;traefik.frontend.passHostHeader=true&quot;</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&quot;traefik.frontend.rule=Host:www.my-weightloss-blog.com,my-weightloss-blog.com&quot;</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&quot;traefik.port=4000&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">update_config</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">parallelism</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2</span>
</span><span class='line'>        <span class="l-Scalar-Plain">delay</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10s</span>
</span><span class='line'>      <span class="l-Scalar-Plain">restart_policy</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">condition</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">on-failure</span>
</span><span class='line'>      <span class="l-Scalar-Plain">placement</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">constraints</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">node.role == manager</span>
</span><span class='line'><span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">appnet</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">external</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Push to Github</h2>

<p>Now we need to push our <code>.drone.yml</code> and <code>docker-compose.yml</code> to github. Since the repository is activated on drone, any push to master will trigger the pipeline, so after this push we should go to drone to look at our pipeline running.</p>

<p>Add the untracked files and push to github:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ git add .drone.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">$ git add docker-compose.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">$ git commit -m &quot;add drone and docker config&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">$ git push origin master</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you head over to your drone ui, you should see your pipeline output which will look more or less like this (just look how pretty it is! :D )</p>

<p><img src="https://user-images.githubusercontent.com/567298/56620236-91a8e200-6628-11e9-9278-38e3305fdcd7.png" alt="image" /></p>

<h2>Test Jekyll</h2>

<p>If your deployment has completed you should be able to access your application on the configured domain. A screenshot of my response when accessing Jekyll:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56620280-af764700-6628-11e9-9d4f-c2592e6cf561.png" alt="image" /></p>

<p>Absolutely Amazingness! I really love drone!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Blog With Hugo]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/23/setup-a-blog-with-hugo/"/>
    <updated>2019-04-23T05:41:10-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/23/setup-a-blog-with-hugo</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/30043398/56571367-13632600-65bd-11e9-816e-a18785233e38.png" alt="image" /></p>

<p>In this post we will setup a blog on <a href="https://gohugo.io">hugo</a> and using the theme <a href="https://github.com/mismith0227/hugo_theme_pickles">pickles</a>.</p>

<h2>What is Hugo</h2>

<p>Hugo is a Open-Source Static Site Generator which runs on Golang.</p>

<h2>Installing Hugo</h2>

<p>Im using a mac so I will be installing hugo with brew, for other operating systems, you can have a look at <a href="https://gohugo.io/getting-started/installing/">their documentation</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install hugo</span></code></pre></td></tr></table></div></figure>


<p>Create your new site:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hugo new site myblog</span></code></pre></td></tr></table></div></figure>


<h2>Install a Theme</h2>

<p>We will use a 3rd party theme, go ahead and install the pickles theme:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone -b release https://github.com/mismith0227/hugo_theme_pickles themes/pickles</span></code></pre></td></tr></table></div></figure>


<h2>Custom Syntax Highlighting</h2>

<p>Generate syntax highlight css, for a list of other styles <a href="https://help.farbox.com/pygments.html">see this post</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p static/css
</span><span class='line'>$ hugo gen chromastyles --style=colorful &gt; static/css/syntax.css</span></code></pre></td></tr></table></div></figure>


<p>Append this below <code>style.css</code> in <code>themes/pickles/layouts/partials/head.html</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;link rel="stylesheet" href="http://blog.ruanbekker.com/css/syntax.css"/&gt;</span></code></pre></td></tr></table></div></figure>


<p>set pygments settings in <code>config.toml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>baseURL = "http://example.org/"
</span><span class='line'>languageCode = "en-us"
</span><span class='line'>pygmentsCodeFences = true
</span><span class='line'>pygmentsUseClasses = true
</span><span class='line'>title = "My Hugo Site"</span></code></pre></td></tr></table></div></figure>


<h2>Create your First Blogpost</h2>

<p>Create your first post:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hugo new posts/my-first-post.md
</span><span class='line'>/Users/ruan/myblog/content/posts/my-first-post.md created</span></code></pre></td></tr></table></div></figure>


<p>Populate your page with some data:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>title: "My First Post"
</span><span class='line'>date: 2019-04-23T09:39:23+02:00
</span><span class='line'>description: This is an introduction post to showcase Hugo.
</span><span class='line'>slug: hello-world-my-first-post
</span><span class='line'>categories:
</span><span class='line'>- hugo
</span><span class='line'>- blog
</span><span class='line'>tags:
</span><span class='line'>- helloworld
</span><span class='line'>- hugo
</span><span class='line'>- blog
</span><span class='line'>draft: false
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'>![](https://hugo-simple-blog.work/images/uploads/gopher_hugo.png)
</span><span class='line'>
</span><span class='line'>Hello world and welcome to my first post
</span><span class='line'>
</span><span class='line'>## New Beginning
</span><span class='line'>
</span><span class='line'>This is a new beginning on my blog on hugo and this seems pretty cool so im adding random text here because I dont know **what** to add here. So im adding a lot more random text here.
</span><span class='line'>
</span><span class='line'>This is another test.
</span><span class='line'>
</span><span class='line'>## Code
</span><span class='line'>
</span><span class='line'>This is python code:
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>from random import randint
</span><span class='line'>from faker import Fake
</span><span class='line'>randint(1, 2)
</span><span class='line'>
</span><span class='line'>destFile = "largedataset-" + timestart + ".txt"
</span><span class='line'>file_object = open(destFile,"a")
</span><span class='line'>file_object.write("uuid" + "," + "username" + "," + "name" + "," + "country" + "\n")
</span><span class='line'>
</span><span class='line'>def create_names(fake):
</span><span class='line'>    for x in range(numberRuns):
</span><span class='line'>        genUname = fake.slug()
</span><span class='line'>        genName =  fake.first_name()
</span><span class='line'>        genCountry = fake.country()
</span><span class='line'>file_object.write(genUname + "," + genName + "," + genCountry + "\n")
</span><span class='line'>..
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>This is bash code:
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#!/usr/bin/env bash
</span><span class='line'>var="ruan"
</span><span class='line'>echo "Hello, ${var}"
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>## Tweets
</span><span class='line'>
</span><span class='line'>This is one of my tweets, see [configuration](https://gohugo.io/content-management/shortcodes/#highlight) for more shortcodes:
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>## Tables
</span><span class='line'>
</span><span class='line'>This is a table:
</span><span class='line'>
</span><span class='line'>|**id**    |**name**|**surname**|**age**| **city**     |
</span><span class='line'>|----------|--------|-----------|-------|--------------|
</span><span class='line'>|20-1232091|ruan    |bekker     |32     |cape town     |
</span><span class='line'>|20-2531020|stefan  |bester     |32     |kroonstad     |
</span><span class='line'>|20-4835056|michael |le roux    |35     |port elizabeth|
</span><span class='line'>
</span><span class='line'>## Lists
</span><span class='line'>
</span><span class='line'>This is a list:
</span><span class='line'>
</span><span class='line'>* one
</span><span class='line'>* two
</span><span class='line'>* [three](https://example.com)
</span><span class='line'>
</span><span class='line'>This is another list:
</span><span class='line'>
</span><span class='line'>1. one
</span><span class='line'>2. two
</span><span class='line'>3. [three](https://example.com)
</span><span class='line'>
</span><span class='line'>## Images
</span><span class='line'>
</span><span class='line'>This is an embedded photo:
</span><span class='line'>
</span><span class='line'>![](https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500)</span></code></pre></td></tr></table></div></figure>


<h2>Run the Server</h2>

<p>You can set the flags in your main config as well. Go ahead and run the server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hugo server \
</span><span class='line'>  --baseURL "http://localhost/" \
</span><span class='line'>  --themesDir=themes --theme=pickles \
</span><span class='line'>  --bind=0.0.0.0 --port=8080 --appendPort=true \
</span><span class='line'>  --buildDrafts --watch --environment production</span></code></pre></td></tr></table></div></figure>


<h2>Screenshots</h2>

<p>When you access your blog on port 8080 you should see your post. Some screenshots below:</p>

<p><img width="1227" alt="image" src="https://user-images.githubusercontent.com/30043398/56570645-9e432100-65bb-11e9-9ea4-dd89be65bed4.png"></p>

<p><img width="1143" alt="image" src="https://user-images.githubusercontent.com/30043398/56570670-aac77980-65bb-11e9-830d-4424e6d92beb.png"></p>

<p><img width="1110" alt="image" src="https://user-images.githubusercontent.com/30043398/56570707-b74bd200-65bb-11e9-8df2-8aa1372e2922.png"></p>

<p><img width="1196" alt="image" src="https://user-images.githubusercontent.com/30043398/56570734-c16dd080-65bb-11e9-92fc-55c7ace373e8.png"></p>

<h2>References:</h2>

<ul>
<li><a href="https://gohugo.io/getting-started/installing/">https://gohugo.io/getting-started/installing/</a></li>
<li><a href="https://gohugo.io/content-management/syntax-highlighting/">https://gohugo.io/content-management/syntax-highlighting/</a></li>
<li><a href="https://willschenk.com/articles/2018/building-a-hugo-site/">https://willschenk.com/articles/2018/building-a-hugo-site/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Drone CICD Environment on Docker With Letsencrypt]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/18/setup-a-drone-cicd-environment-on-docker-with-letsencrypt/"/>
    <updated>2019-04-18T12:53:49-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/18/setup-a-drone-cicd-environment-on-docker-with-letsencrypt</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/56378979-ed313500-620e-11e9-9ac0-4fcd1df803e8.png" alt="drone-ci" /></p>

<h2>What is Drone?</h2>

<p>Drone is a self-service continuous delivery platform which can be used for CICD pipelines, devopsy stuff which is really awesome.</p>

<p>With Configuration as Code, Pipelines are configured with a simple, easy‑to‑read file that you commit to your git repository such as github, gitlab, gogs, gitea etc.</p>

<p>Each Pipeline step is executed inside an isolated Docker container that is automatically downloaded at runtime, if not found in cache.</p>

<h2>Show me pipelines!</h2>

<p>A pipeline can look as easy as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pipeline</span>
</span><span class='line'><span class="l-Scalar-Plain">steps</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">test</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">node</span>
</span><span class='line'>  <span class="l-Scalar-Plain">commands</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">npm install</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">npm test</span>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">database</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mysql</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">3306</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Open for Testing!</h2>

<p>I have enabled public access, so please go ahead and launch your cicd pipelines on my drone setup as I want to test the stability of it:</p>

<p>==> <a href="https://drone.rbkr.xyz/">https://drone.rbkr.xyz/</a></p>

<h2>What are we doing?</h2>

<p>We will deploy a drone server which is responsible for the actual server and 2 drone agents which will receive instructions from the server whenever steps need to be executed. Steps run on agents.</p>

<h2>Deploy the Servers</h2>

<p>I&rsquo;m using VULTR to deploy 3 nodes on coreos, 1 drone server and 2 drone agents as seen below:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56371668-d0403600-61fd-11e9-8396-01c07c136518.png" alt="image" /></p>

<p>Documentation:
<a href="https://docs.drone.io/installation/github/multi-machine/">https://docs.drone.io/installation/github/multi-machine/</a>
<a href="https://github.com/settings/developers">https://github.com/settings/developers</a></p>

<p>We will use Github for version control and to delegate auth, therefore we need to register a new application on Github.</p>

<p>Register New Application on Github at <a href="https://github.com/settings/developer">https://github.com/settings/developer</a> :</p>

<p><img src="https://user-images.githubusercontent.com/567298/56375985-22398980-6207-11e9-911d-9595f8f85db9.png" alt="register-application" /></p>

<p>Get your Drone-Server Host Endpoint, and update the fields:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56374721-287a3680-6204-11e9-837f-a7751651c29a.png" alt="image" /></p>

<p>You will receive a Github Client ID, Secret which we will need later, which will look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">Client ID</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">xx</span>
</span><span class='line'><span class="l-Scalar-Plain">Client Secret</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">yyy</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generate the shared secret which will be used on the server and agent:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ openssl rand -hex 16</span>
</span><span class='line'><span class="l-Scalar-Plain">eb83xxe19a3497f597f53044250df6yy</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the Startup Script for Drone Server, which will just be a docker container running in detached mode. Note that you should use your own domain at <code>SERVER_HOST</code> and if you want to issue an certificate automatically keep <code>DRONE_TLS_AUTOCERT</code> to true.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ cat &gt; start_drone-server.sh &lt;&lt; EOF</span>
</span><span class='line'><span class="l-Scalar-Plain">#!/usr/bin/env bash</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">set -ex</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">GITHUB_CLIENT_ID=xx</span>
</span><span class='line'><span class="l-Scalar-Plain">GITHUB_CLIENT_SECRET=yyy</span>
</span><span class='line'><span class="l-Scalar-Plain">SHARED_SECRET=eb83xxe19a3497f597f53044250df6yy</span>
</span><span class='line'><span class="l-Scalar-Plain">SERVER_HOST=drone.yourdomain.com</span>
</span><span class='line'><span class="l-Scalar-Plain">SERVER_PROTOCOL=https</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">docker run \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--volume=/var/run/docker.sock:/var/run/docker.sock \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--volume=/var/lib/drone:/data \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_GITHUB_SERVER=https://github.com \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID} \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET} \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_AGENTS_ENABLED=true \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_RPC_SECRET=${SHARED_SECRET} \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_SERVER_HOST=${SERVER_HOST} \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_SERVER_PROTO=${SERVER_PROTOCOL} \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_TLS_AUTOCERT=true \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--publish=80:80 \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--publish=443:443 \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--restart=always \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--detach=true \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--name=drone \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">drone/drone:1</span>
</span><span class='line'><span class="l-Scalar-Plain">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the startup script for the drone agent, note that this script needs to be placed on the agent nodes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ cat &gt; start_drone-agent.sh &lt;&lt; EOF</span>
</span><span class='line'><span class="l-Scalar-Plain">#!/usr/bin/env bash</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">set -ex</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">SHARED_SECRET=eb83xxe19a3497f597f53044250df6yy</span>
</span><span class='line'><span class="l-Scalar-Plain">AGENT_SERVER_HOST=https://drone.yourdomain.com</span>
</span><span class='line'><span class="l-Scalar-Plain">SERVER_PROTOCOL=https</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">docker run \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--volume=/var/run/docker.sock:/var/run/docker.sock \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_RPC_SERVER=${AGENT_SERVER_HOST} \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_RPC_SECRET=${SHARED_SECRET} \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_RUNNER_CAPACITY=2 \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--env=DRONE_RUNNER_NAME=${HOSTNAME} \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--restart=always \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--detach=true \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">--name=drone-agent-02 \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">drone/agent:1</span>
</span><span class='line'><span class="l-Scalar-Plain">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>Logon to the server node and start the drone server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ bash start_drone-agent.sh</span>
</span></code></pre></td></tr></table></div></figure>


<p>Login to the agent nodes and start the agents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ bash start_drone-agent.sh</span>
</span></code></pre></td></tr></table></div></figure>


<p>The server should show that it&rsquo;s listening on port 80 and 443:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker ps</span>
</span><span class='line'><span class="l-Scalar-Plain">CONTAINER ID        IMAGE               COMMAND               CREATED             STATUS              PORTS                                      NAMES</span>
</span><span class='line'><span class="l-Scalar-Plain">8ea70fc7b967        drone/drone:1       &quot;/bin/drone-server&quot;   12 minutes ago      Up 12 minutes       0.0.0.0:80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp   drone</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Access Drone</h2>

<p>Access your Drone instance on port 80 eg. <a href="http://drone.yourdomain.com">http://drone.yourdomain.com</a> you should be automatically redirected to port 443, which should direct you to a login page, which will look like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56375632-5eb8b580-6206-11e9-9ae8-92b2cd29abec.png" alt="drone-authorize" /></p>

<p>Login with your github account and allow drone some time to sync your repositories:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56373131-9e7c9e80-6200-11e9-83ce-e486b399468e.png" alt="image" /></p>

<h2>Add drone config to your repository:</h2>

<p>Clone this repository: <a href="https://github.com/ruanbekker/drone-ci-testing">https://github.com/ruanbekker/drone-ci-testing</a> which will contain the <code>.drone.yml</code> config which drone gets its instructions from.</p>

<p>Select a repository to activate, (drone-ci-testing in this case) head over to settings:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56373298-f1565600-6200-11e9-8262-ac3162fed4f2.png" alt="image" /></p>

<p>Adding secret:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56373209-c5d36b80-6200-11e9-90de-68c131480672.png" alt="image" /></p>

<p>Add more secrets:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56373443-3da19600-6201-11e9-85a9-083bfcbd604a.png" alt="image" /></p>

<p>Your build list should be empty:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56373533-6fb2f800-6201-11e9-8fa0-ab05e546c36e.png" alt="image" /></p>

<h2>Trigger a Build</h2>

<p>Edit any of the files in the clone repository and you should see your build running:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56374465-85c1b800-6203-11e9-8542-acd1d5729447.png" alt="image" /></p>

<p>When your build has completed:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56374511-a25df000-6203-11e9-9eb8-d94a777a8b4a.png" alt="image" /></p>

<p>You can also find out where the step ran:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56374667-084a7780-6204-11e9-9c5b-6672f6882411.png" alt="image" /></p>

<p>Run a couple of tests:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56376356-e3f09a00-6207-11e9-8ca0-16e06e7c0379.png" alt="image" /></p>

<p>Get notified via slack:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56376376-eeab2f00-6207-11e9-9af9-194cb5a3023b.png" alt="image" /></p>

<h2>Debugging</h2>

<p>If your build fails, its most likely that you need the <code>slack_webhook</code> secret. You can remove the slack step which shouldhelp you get going with drone.</p>

<h2>More on Drone</h2>

<p>Have a look at <a href="https://github.com/ruanbekker/drone-ci-testing/blob/master/README.md">this document</a> for more examples or have a look at their <a href="https://docs.drone.io/">documentation</a> as well as their extensive list of <a href="http://plugins.drone.io/">plugins</a> and their <a href="https://docs.drone.io/installation/github/multi-machine/">setup documentation</a> to become familiar with their configuration.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Slack Webhook for Sending Messages From Applications]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/18/setup-a-slack-webhook-for-sending-messages-from-applications/"/>
    <updated>2019-04-18T06:07:42-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/18/setup-a-slack-webhook-for-sending-messages-from-applications</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/56354543-55165a00-61d4-11e9-9101-f979dcb4cdb3.png" alt="slack" /></p>

<p>Slack is amazing and I cant live without it.</p>

<p>We can also use custom webhook integrations to allow applications to notify us via slack in response of events.</p>

<h2>What we will be doing</h2>

<p>We will be configuring a custom slack webhook integration and test out the api to show you how easy it is to use it to inform us via slack, whenever something is happening.</p>

<h2>Configuration</h2>

<p>Head over to:
- <a href="https://">https://</a>{your-team}.slack.com/apps/manage/custom-integrations</p>

<p>Select Incoming Webhooks:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56352324-49746480-61cf-11e9-8dd2-e4482fc16f9e.png" alt="" /></p>

<p>Select Add Configuration:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56352369-6ad55080-61cf-11e9-9d98-4193a7aeb321.png" alt="" /></p>

<p>Select the channel it should post to:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56352447-90625a00-61cf-11e9-8f94-098b2c088159.png" alt="" /></p>

<p>Select Add Incoming Webhook Integration.</p>

<p>Save the webhook url that will look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://hooks.slack.com/services/ABCDEFGHI/ZXCVBNMAS/AbCdEfGhJiKlOpRQwErTyUiO</span></code></pre></td></tr></table></div></figure>


<p>You can then further configure the integration.</p>

<h2>Sending Messages</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -XPOST -d 'payload={"channel": "#system_events", "username": "My-WebhookBot", "text": "This is posted to #general and comes from a bot named &lt;https://alert-system.com/alerts/1234|webhookbot&gt; for details!", "icon_emoji": ":borat:"}' https://hooks.slack.com/services/xx/xx/xx</span></code></pre></td></tr></table></div></figure>


<p>Will result in:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56353019-be946980-61d0-11e9-874c-56074b8d2da7.png" alt="image" /></p>

<p>Message Attachment, Error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -XPOST -d 'payload={"channel": "#system_events", "username": "My-WebhookBot", "text": "*Incoming Alert!*", "icon_emoji": ":borat:", "attachments":[{"fallback":"New open task [Urgent]: &lt;http://url_to_task|Test out Slack message attachments&gt;","pretext":"New open task [Urgent]: &lt;http://url_to_task|Test out Slack message attachments&gt;","color":"#D00000","fields":[{"title":"Notes","value":"This is much easier than I thought it would be.","short":false}]}]}}' https://hooks.slack.com/services/xx/xx/xx</span></code></pre></td></tr></table></div></figure>


<p>Results in:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56353534-df10f380-61d1-11e9-92f5-f14a75c19049.png" alt="image" /></p>

<p>Message Attachment, OK:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -XPOST -d 'payload={"channel": "#system_events", "username": "My-WebhookBot", "text": "*Status Update:*", "icon_emoji": ":borat:", "attachments":[{"fallback":"New open task has been closed [OK]: &lt;http://url_to_task|Test out Slack message attachments&gt;","pretext":"Task has been closed [OK]: &lt;http://url_to_task|Test out Slack message attachments&gt;","color":"#28B463","fields":[{"title":"Notes","value":"The error has been resolved and the status is OK","short":false}]}]}}' https://hooks.slack.com/services/xx/xx/xx</span></code></pre></td></tr></table></div></figure>


<p>Results in:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56353591-f819a480-61d1-11e9-8810-3586f56dd0f3.png" alt="image" /></p>

<h2>Join my Slack</h2>

<p>If you want to join my slack workspace, use <a href="https://join.slack.com/t/linux-hackers/shared_invite/enQtNjE0NDMzODI1OTI2LTFhYTRkNTQxYzAyMjQwNTNhMmE5ZmZkYjU2MDg2NGFlOTYyNmM2MjdkMzg1NTMwOTM0MGY1MjVmMTdhYjkxZTk">this invite link</a></p>

<h2>Resources:</h2>

<ul>
<li><a href="https://htmlcolorcodes.com/">https://htmlcolorcodes.com/</a></li>
<li><a href="https://api.slack.com/docs/message-attachments">https://api.slack.com/docs/message-attachments</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB Examples With Golang]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/17/mongodb-examples-with-golang/"/>
    <updated>2019-04-17T08:51:35-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/17/mongodb-examples-with-golang</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55478904-236e9200-561d-11e9-9382-f31b25a9ae03.png" alt="" /></p>

<p>While looking into working with mongodb using golang, I found it quite frustrating getting it up and running and decided to make a quick post about it.</p>

<h2>What are we doing?</h2>

<p>Examples using the golang driver for mongodb to connect, read, update and delete documents from mongodb.</p>

<h2>Environment:</h2>

<p>Provision a mongodb server in docker:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker network create container-net
</span><span class='line'>$ docker run -itd --name mongodb --network container-net -p 27017:27017 ruanbekker/mongodb</span></code></pre></td></tr></table></div></figure>


<p>Drop into a golang environment using docker:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run -it golang:alpine sh</span></code></pre></td></tr></table></div></figure>


<p>Get the dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apk add --no-cache git</span></code></pre></td></tr></table></div></figure>


<p>Change to your project path:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir $GOPATH/src/myapp
</span><span class='line'>$ cd $GOPATH/src/myapp</span></code></pre></td></tr></table></div></figure>


<p>Download the golang mongodb driver:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go get go.mongodb.org/mongo-driver</span></code></pre></td></tr></table></div></figure>


<h2>Connecting to MongoDB in Golang</h2>

<p>First example will be to connect to your mongodb instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;context&quot;</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>    <span class="s">&quot;log&quot;</span>
</span><span class='line'>    <span class="s">&quot;go.mongodb.org/mongo-driver/mongo&quot;</span>
</span><span class='line'>    <span class="s">&quot;go.mongodb.org/mongo-driver/bson&quot;</span>
</span><span class='line'>    <span class="s">&quot;go.mongodb.org/mongo-driver/mongo/options&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Name</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nx">Age</span>  <span class="kt">int</span>
</span><span class='line'>    <span class="nx">City</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">clientOptions</span> <span class="o">:=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Client</span><span class="p">().</span><span class="nx">ApplyURI</span><span class="p">(</span><span class="s">&quot;mongodb://mongodb:27017&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mongo</span><span class="p">.</span><span class="nx">Connect</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">TODO</span><span class="p">(),</span> <span class="nx">clientOptions</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">err</span> <span class="p">=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Ping</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">TODO</span><span class="p">(),</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Connected to MongoDB!&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running our app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go run main.go
</span><span class='line'>Connected to MongoDB!
</span></code></pre></td></tr></table></div></figure>


<h2>Writing to MongoDB with Golang</h2>

<p>Let&rsquo;s insert a single document to MongoDB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">..</span>
</span><span class='line'>    <span class="nx">collection</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Database</span><span class="p">(</span><span class="s">&quot;mydb&quot;</span><span class="p">).</span><span class="nx">Collection</span><span class="p">(</span><span class="s">&quot;persons&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">ruan</span> <span class="o">:=</span> <span class="nx">Person</span><span class="p">{</span><span class="s">&quot;Ruan&quot;</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="s">&quot;Cape Town&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">insertResult</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">collection</span><span class="p">.</span><span class="nx">InsertOne</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">TODO</span><span class="p">(),</span> <span class="nx">ruan</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Inserted a Single Document: &quot;</span><span class="p">,</span> <span class="nx">insertResult</span><span class="p">.</span><span class="nx">InsertedID</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running it will produce:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go run main.go
</span><span class='line'>Connected to MongoDB!
</span><span class='line'>Inserted a single document:  ObjectID<span class="o">(</span><span class="s2">&quot;5cb717dcf597b4411252341f&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Writing more than one document:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>func main<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    ..
</span><span class='line'>    collection :<span class="o">=</span> client.Database<span class="o">(</span><span class="s2">&quot;mydb&quot;</span><span class="o">)</span>.Collection<span class="o">(</span><span class="s2">&quot;persons&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    ruan :<span class="o">=</span> Person<span class="o">{</span><span class="s2">&quot;Ruan&quot;</span>, 34, <span class="s2">&quot;Cape Town&quot;</span><span class="o">}</span>
</span><span class='line'>    james :<span class="o">=</span> Person<span class="o">{</span><span class="s2">&quot;James&quot;</span>, 32, <span class="s2">&quot;Nairobi&quot;</span><span class="o">}</span>
</span><span class='line'>    frankie :<span class="o">=</span> Person<span class="o">{</span><span class="s2">&quot;Frankie&quot;</span>, 31, <span class="s2">&quot;Nairobi&quot;</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    trainers :<span class="o">=</span> <span class="o">[]</span>interface<span class="o">{}{</span>james, frankie<span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    insertManyResult, err :<span class="o">=</span> collection.InsertMany<span class="o">(</span>context.TODO<span class="o">()</span>, trainers<span class="o">)</span>
</span><span class='line'>    <span class="k">if</span> err !<span class="o">=</span> nil <span class="o">{</span>
</span><span class='line'>      log.Fatal<span class="o">(</span>err<span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>    fmt.Println<span class="o">(</span><span class="s2">&quot;Inserted multiple documents: &quot;</span>, insertManyResult.InsertedIDs<span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will output in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go run main.go
</span><span class='line'>Inserted Multiple Documents:  <span class="o">[</span>ObjectID<span class="o">(</span><span class="s2">&quot;5cb717dcf597b44112523420&quot;</span><span class="o">)</span> ObjectID<span class="o">(</span><span class="s2">&quot;5cb717dcf597b44112523421&quot;</span><span class="o">)]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Updating Documents in MongoDB using Golang</h2>

<p>Updating Frankie&rsquo;s age:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>func main<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    ..
</span><span class='line'>    filter :<span class="o">=</span> bson.D<span class="o"></span>
</span><span class='line'>    update :<span class="o">=</span> bson.D<span class="o">{</span>
</span><span class='line'>        <span class="o">{</span><span class="s2">&quot;$inc&quot;</span>, bson.D<span class="o">{</span>
</span><span class='line'>            <span class="o">{</span><span class="s2">&quot;age&quot;</span>, 1<span class="o">}</span>,
</span><span class='line'>        <span class="o">}}</span>,
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    updateResult, err :<span class="o">=</span> collection.UpdateOne<span class="o">(</span>context.TODO<span class="o">()</span>, filter, update<span class="o">)</span>
</span><span class='line'>    <span class="k">if</span> err !<span class="o">=</span> nil <span class="o">{</span>
</span><span class='line'>      log.Fatal<span class="o">(</span>err<span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>    fmt.Printf<span class="o">(</span><span class="s2">&quot;Matched %v documents and updated %v documents.\n&quot;</span>, updateResult.MatchedCount, updateResult.ModifiedCount<span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running that will update Frankie&rsquo;s age:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go run main.go
</span><span class='line'>Matched <span class="m">1</span> documents and updated <span class="m">1</span> documents.
</span></code></pre></td></tr></table></div></figure>


<h2>Reading Data from MongoDB</h2>

<p>Reading the data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">funct</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">..</span>
</span><span class='line'>    <span class="nx">filter</span> <span class="o">:=</span> <span class="nx">bson</span><span class="p">.</span><span class="nx">D</span><span class="p"></span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">result</span> <span class="nx">Trainer</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">err</span> <span class="p">=</span> <span class="nx">collection</span><span class="p">.</span><span class="nx">FindOne</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">TODO</span><span class="p">(),</span> <span class="nx">filter</span><span class="p">).</span><span class="nx">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">result</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Found a single document: %+v\n&quot;</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">findOptions</span> <span class="o">:=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Find</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">findOptions</span><span class="p">.</span><span class="nx">SetLimit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go run main.go
</span><span class='line'>Found a single document: <span class="o">{</span>Name:Frankie Age:32 City:Nairobi<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finding multiple documents and returning the cursor</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">..</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">results</span> <span class="p">[]</span><span class="o">*</span><span class="nx">Trainer</span>
</span><span class='line'>  <span class="nx">cur</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">collection</span><span class="p">.</span><span class="nx">Find</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">TODO</span><span class="p">(),</span> <span class="nx">bson</span><span class="p">.</span><span class="nx">D</span><span class="p">,</span> <span class="nx">findOptions</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">cur</span><span class="p">.</span><span class="nx">Next</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">TODO</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">elem</span> <span class="nx">Trainer</span>
</span><span class='line'>      <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cur</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">elem</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">results</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">results</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">elem</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cur</span><span class="p">.</span><span class="nx">Err</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">cur</span><span class="p">.</span><span class="nx">Close</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">TODO</span><span class="p">())</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Found multiple documents (array of pointers): %+v\n&quot;</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running the example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="err">$</span> <span class="k">go</span> <span class="nx">run</span> <span class="nx">main</span><span class="p">.</span><span class="k">go</span>
</span><span class='line'><span class="nx">Found</span> <span class="nx">multiple</span> <span class="nx">documents</span> <span class="p">(</span><span class="nx">array</span> <span class="nx">of</span> <span class="nx">pointers</span><span class="p">):</span> <span class="p">[</span><span class="mh">0xc0001215c0</span> <span class="mh">0xc0001215f0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Deleting Data from MongoDB:</h2>

<p>Deleting our data and closing the connection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="p">..</span>
</span><span class='line'>    <span class="nx">deleteResult</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">collection</span><span class="p">.</span><span class="nx">DeleteMany</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">TODO</span><span class="p">(),</span> <span class="nx">bson</span><span class="p">.</span><span class="nx">D</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Deleted %v documents in the trainers collection\n&quot;</span><span class="p">,</span> <span class="nx">deleteResult</span><span class="p">.</span><span class="nx">DeletedCount</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">err</span> <span class="p">=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Disconnect</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">TODO</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Connection to MongoDB closed.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running the example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go run main.go
</span><span class='line'>Deleted <span class="m">3</span> documents in the trainers collection
</span><span class='line'>Connection to MongoDB closed.
</span></code></pre></td></tr></table></div></figure>


<p>The code for this example can be found at <a href="https://github.com/ruanbekker/code-examples/blob/master/mongodb/golang/examples.go">github.com/ruanbekker/code-examples/mongodb/golang/examples.go</a></p>

<h2>Resources:</h2>

<ul>
<li><a href="https://www.mongodb.com/blog/post/mongodb-go-driver-tutorial">https://www.mongodb.com/blog/post/mongodb-go-driver-tutorial</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL Inner Joins Examples With SQLite]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/06/sql-inner-joins-examples-with-sqlite/"/>
    <updated>2019-04-06T15:47:38-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/06/sql-inner-joins-examples-with-sqlite</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55704774-53cb7d00-59dd-11e9-9f43-65ec3aa857b5.png" alt="sqlite" /></p>

<h2>Overview</h2>

<p>In this tutorial we will get started with sqlite and use inner joins to query data from multiple tables to answer specific use case needs.</p>

<h2>Connecting to your Sqlite Database</h2>

<p>Connecting to your database uses the argument to the target database. You can use additional flags to set the properties that you want to enable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="err">$</span> <span class="n">sqlite3</span> <span class="o">-</span><span class="n">header</span> <span class="o">-</span><span class="k">column</span> <span class="n">mydatabase</span><span class="p">.</span><span class="n">db</span>
</span></code></pre></td></tr></table></div></figure>


<p>or you can specify the additional options to your config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat &gt; ~/.sqliterc <span class="s">&lt;&lt; EOF</span>
</span><span class='line'><span class="s">.mode column</span>
</span><span class='line'><span class="s">.headers on</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then connecting to your database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sqlite3 mydatabase.db
</span><span class='line'>-- Loading resources from /Users/ruan/.sqliterc
</span><span class='line'>SQLite version 3.16.0 2016-11-04 19:09:39
</span><span class='line'>Enter <span class="s2">&quot;.help&quot;</span> <span class="k">for</span> usage hints.
</span><span class='line'>sqlite&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>Create the Tables</h2>

<p>Create the <code>users</code> table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">create</span> <span class="k">table</span> <span class="n">users</span> <span class="p">(</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="n">id</span> <span class="nb">INT</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">surname</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">city</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="n">age</span> <span class="nb">INT</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">credit_card_num</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">job_position</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the <code>transactions</code> table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">create</span> <span class="k">table</span> <span class="n">transactions</span> <span class="p">(</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="n">credit_card_num</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">transaction_id</span> <span class="nb">INT</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">shop_name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="n">product_name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">spent_total</span> <span class="nb">DECIMAL</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">purchase_option</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can view the tables using <code>.tables</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="p">.</span><span class="n">tables</span>
</span><span class='line'><span class="n">transactions</span>  <span class="n">users</span>
</span></code></pre></td></tr></table></div></figure>


<p>And view the schema of the tables using <code>.schema &lt;table-name&gt;</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="p">.</span><span class="k">schema</span> <span class="n">users</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">users</span> <span class="p">(</span>
</span><span class='line'><span class="n">id</span> <span class="nb">INT</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">surname</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">city</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span>
</span><span class='line'><span class="n">age</span> <span class="nb">INT</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">credit_card_num</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">job_position</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Write to Sqlite Database</h2>

<p>Now we will populate data to our tables. Insert a record to our users table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">users</span> <span class="k">values</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;ruan&#39;</span><span class="p">,</span> <span class="s1">&#39;bekker&#39;</span><span class="p">,</span> <span class="s1">&#39;cape town&#39;</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="s1">&#39;2345-8970-6712-4352&#39;</span><span class="p">,</span> <span class="s1">&#39;devops&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Insert a record to our transactions table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">transactions</span> <span class="k">values</span><span class="p">(</span><span class="s1">&#39;2345-8970-6712-4352&#39;</span><span class="p">,</span> <span class="mi">981623</span><span class="p">,</span> <span class="s1">&#39;spaza01&#39;</span><span class="p">,</span> <span class="s1">&#39;burger&#39;</span><span class="p">,</span> <span class="mi">101</span><span class="p">.</span><span class="mi">02</span><span class="p">,</span> <span class="s1">&#39;credit_card&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Read from the Sqlite Database</h2>

<p>Read the data from the users table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span><span class="p">;</span>
</span><span class='line'><span class="n">id</span>          <span class="n">name</span>        <span class="n">surname</span>     <span class="n">city</span>        <span class="n">age</span>         <span class="n">credit_card_num</span>      <span class="n">job_position</span>
</span><span class='line'><span class="c1">----------  ----------  ----------  ----------  ----------  -------------------  ------------</span>
</span><span class='line'><span class="mi">1</span>           <span class="n">ruan</span>        <span class="n">bekker</span>      <span class="n">cape</span> <span class="n">town</span>   <span class="mi">31</span>          <span class="mi">2345</span><span class="o">-</span><span class="mi">8970</span><span class="o">-</span><span class="mi">6712</span><span class="o">-</span><span class="mi">4352</span>  <span class="n">devops</span>
</span></code></pre></td></tr></table></div></figure>


<p>Read the data from the transactions table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">transactions</span><span class="p">;</span>
</span><span class='line'><span class="n">credit_card_num</span>      <span class="n">transaction_id</span>  <span class="n">shop_name</span>   <span class="n">product_name</span>  <span class="n">spent_total</span>  <span class="n">purchase_option</span>
</span><span class='line'><span class="c1">-------------------  --------------  ----------  ------------  -----------  ---------------</span>
</span><span class='line'><span class="mi">2345</span><span class="o">-</span><span class="mi">8970</span><span class="o">-</span><span class="mi">6712</span><span class="o">-</span><span class="mi">4352</span>  <span class="mi">981623</span>          <span class="n">spaza01</span>     <span class="n">burger</span>        <span class="mi">101</span><span class="p">.</span><span class="mi">02</span>       <span class="n">credit_card</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Inner Joins with Sqlite</h2>

<p>This is where stuff gets interesting.</p>

<p>Let&rsquo;s say you want to join data from 2 tables, in this example we have a table with our userdata and a table with transaction data.</p>

<p>Say we want to see the user&rsquo;s name, transaction id, the product they purchased and the total amount spent, we will make use of inner joins.</p>

<p>Example looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">select</span> <span class="n">a</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">transaction_id</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">product_name</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">spent_total</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">from</span> <span class="n">users</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">as</span> <span class="n">a</span> <span class="k">inner</span> <span class="k">join</span> <span class="n">transactions</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">as</span> <span class="n">b</span> <span class="k">on</span> <span class="n">a</span><span class="p">.</span><span class="n">credit_card_num</span> <span class="o">=</span> <span class="n">b</span><span class="p">.</span><span class="n">credit_card_num</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">where</span> <span class="n">a</span><span class="p">.</span><span class="n">credit_card_num</span> <span class="o">=</span> <span class="s1">&#39;2345-8970-6712-4352&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">name</span>        <span class="n">transaction_id</span>  <span class="n">product_name</span>  <span class="n">spent_total</span>
</span><span class='line'><span class="c1">----------  --------------  ------------  -----------</span>
</span><span class='line'><span class="n">ruan</span>        <span class="mi">981623</span>          <span class="n">burger</span>         <span class="mi">101</span><span class="p">.</span><span class="mi">02</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s say you dont know the credit_card number but you would like to do a lookup the credit card number via the user&rsquo;s id, then pass the value to the where statement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">select</span> <span class="n">a</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">transaction_id</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">product_name</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">spent_total</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">from</span> <span class="n">users</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">as</span> <span class="n">a</span> <span class="k">inner</span> <span class="k">join</span> <span class="n">transactions</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">as</span> <span class="n">b</span> <span class="k">on</span> <span class="n">a</span><span class="p">.</span><span class="n">credit_card_num</span> <span class="o">=</span> <span class="n">b</span><span class="p">.</span><span class="n">credit_card_num</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">where</span> <span class="n">a</span><span class="p">.</span><span class="n">credit_card_num</span> <span class="o">=</span> <span class="p">(</span><span class="k">select</span> <span class="n">credit_card_num</span> <span class="k">from</span> <span class="n">users</span> <span class="k">where</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">name</span>        <span class="n">transaction_id</span>  <span class="n">product_name</span>  <span class="n">spent_total</span>
</span><span class='line'><span class="c1">----------  --------------  ------------  -----------</span>
</span><span class='line'><span class="n">ruan</span>        <span class="mi">981623</span>          <span class="n">burger</span>         <span class="mi">101</span><span class="p">.</span><span class="mi">02</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s create another table called <code>products</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">create</span> <span class="k">table</span> <span class="n">products</span> <span class="p">(</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="n">product_id</span> <span class="nb">INTEGER</span><span class="p">(</span><span class="mi">18</span><span class="p">),</span> <span class="n">product_name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="n">product_category</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">product_price</span> <span class="nb">DECIMAL</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Write a record with product data to the table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">products</span> <span class="k">values</span><span class="p">(</span><span class="mi">0231</span><span class="p">,</span> <span class="s1">&#39;burger&#39;</span><span class="p">,</span> <span class="s1">&#39;fast foods&#39;</span><span class="p">,</span> <span class="mi">101</span><span class="p">.</span><span class="mi">02</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, lets say the question will be that we need to display the users name, credit card number, product name as well as the product category and products price, by only giving you the credit card number</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">select</span> <span class="n">a</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">credit_card_num</span><span class="p">,</span> <span class="k">c</span><span class="p">.</span><span class="n">product_name</span><span class="p">,</span> <span class="k">c</span><span class="p">.</span><span class="n">product_category</span><span class="p">,</span> <span class="k">c</span><span class="p">.</span><span class="n">product_price</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">from</span> <span class="n">users</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">as</span> <span class="n">a</span> <span class="k">inner</span> <span class="k">join</span> <span class="n">transactions</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">as</span> <span class="n">b</span> <span class="k">on</span> <span class="n">a</span><span class="p">.</span><span class="n">credit_card_num</span> <span class="o">=</span> <span class="n">b</span><span class="p">.</span><span class="n">credit_card_num</span> <span class="k">inner</span> <span class="k">join</span> <span class="n">products</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">as</span> <span class="k">c</span> <span class="k">on</span> <span class="n">b</span><span class="p">.</span><span class="n">product_name</span> <span class="o">=</span> <span class="k">c</span><span class="p">.</span><span class="n">product_name</span>
</span><span class='line'>   <span class="p">...</span><span class="o">&gt;</span> <span class="k">where</span> <span class="n">a</span><span class="p">.</span><span class="n">credit_card_num</span> <span class="o">=</span> <span class="s1">&#39;2345-8970-6712-4352&#39;</span> <span class="k">and</span> <span class="k">c</span><span class="p">.</span><span class="n">product_name</span> <span class="o">=</span> <span class="s1">&#39;burger&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">name</span>        <span class="n">credit_card_num</span>      <span class="n">product_name</span>  <span class="n">product_category</span>   <span class="n">product_price</span>
</span><span class='line'><span class="c1">----------  -------------------  ------------  -----------------  -------------</span>
</span><span class='line'><span class="n">ruan</span>        <span class="mi">2345</span><span class="o">-</span><span class="mi">8970</span><span class="o">-</span><span class="mi">6712</span><span class="o">-</span><span class="mi">4352</span>  <span class="n">burger</span>        <span class="n">fast</span> <span class="n">foods</span>         <span class="mi">101</span><span class="p">.</span><span class="mi">02</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Elasticsearch With Ansible Tutorial]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/06/install-elasticsearch-with-ansible-tutorial/"/>
    <updated>2019-04-06T15:45:09-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/06/install-elasticsearch-with-ansible-tutorial</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55700285-f3cdda00-59ce-11e9-9c00-a05b9d469e23.png" alt="" /></p>

<p>In this tutorial we will install a elasticsearch cluster with ansible (well rather a node)</p>

<p>Our inventory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat inventory.ini
</span><span class='line'>[newes]
</span><span class='line'>esnewnode
</span><span class='line'>
</span><span class='line'>[newes:vars]
</span><span class='line'>ansible_python_interpreter=/usr/bin/python3</span></code></pre></td></tr></table></div></figure>


<p>Our playbook to bootstrap our nodes with Python:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat bootstrap-python.yml
</span><span class='line'>---
</span><span class='line'>- hosts: newes
</span><span class='line'>  gather_facts: False
</span><span class='line'>
</span><span class='line'>  tasks:
</span><span class='line'>  - name: install python
</span><span class='line'>    raw: test -e /usr/bin/python || ( apt update && apt install python -y )</span></code></pre></td></tr></table></div></figure>


<p>Our playbook to provision users:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat provision-users.yml
</span><span class='line'>---
</span><span class='line'># Provisions User on Nodes
</span><span class='line'># Setup Passwordless SSH from Jumpbox
</span><span class='line'># Install Packages using APT
</span><span class='line'>- name: bootstrap python
</span><span class='line'>  hosts: newes
</span><span class='line'>  roles:
</span><span class='line'>    - bootstrap-python
</span><span class='line'>
</span><span class='line'>- name: setup pre-requisites
</span><span class='line'>  hosts: newes
</span><span class='line'>  roles:
</span><span class='line'>    - create-sudo-user
</span><span class='line'>    - install-modules
</span><span class='line'>    - configure-hosts-file
</span><span class='line'>
</span><span class='line'>#- name: setup ruan user on the nodes
</span><span class='line'>#  become: yes
</span><span class='line'>#  become_user: ruan
</span><span class='line'>#  hosts: admin
</span><span class='line'>#  roles:
</span><span class='line'>#    - configure-admin
</span><span class='line'>
</span><span class='line'>- name: copy public key to nodes
</span><span class='line'>  become: yes
</span><span class='line'>  become_user: ruan
</span><span class='line'>  hosts: newes
</span><span class='line'>  roles:
</span><span class='line'>    - copy-keys
</span><span class='line'>
</span><span class='line'>- name: install elasticsearch
</span><span class='line'>  hosts: newes
</span><span class='line'>  roles:
</span><span class='line'>    - elasticsearch</span></code></pre></td></tr></table></div></figure>


<p>Our roles that will be included in our playbooks from above:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat roles/create-sudo-user/tasks/main.yml
</span><span class='line'>---
</span><span class='line'>- name: Create Sudo User
</span><span class='line'>  user: name=ruan
</span><span class='line'>        groups=sudo
</span><span class='line'>        shell=/bin/bash
</span><span class='line'>        generate_ssh_key=no
</span><span class='line'>        state=present
</span><span class='line'>
</span><span class='line'>- name: Set Passwordless SSH Access for ruan user
</span><span class='line'>  copy: src=sudoers
</span><span class='line'>        dest=/etc/sudoers.d
</span><span class='line'>        mode=0440</span></code></pre></td></tr></table></div></figure>


<p>Sudoers file for the create sudo role:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat roles/create-sudo-user/files/sudoers
</span><span class='line'>ruan ALL=(ALL) NOPASSWD:ALL</span></code></pre></td></tr></table></div></figure>


<p>The role to install all the apt packages:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat roles/install-modules/tasks/main.yml
</span><span class='line'>---
</span><span class='line'>- name: Install Packages
</span><span class='line'>  apt: name= state=latest update_cache=yes
</span><span class='line'>  with_items:
</span><span class='line'>    - apt-transport-https
</span><span class='line'>    - ntp
</span><span class='line'>    - python
</span><span class='line'>    - tcpdump
</span><span class='line'>    - wget
</span><span class='line'>    - openssl
</span><span class='line'>    - curl</span></code></pre></td></tr></table></div></figure>


<p>Role to configure hosts file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat roles/configure-hosts-file/tasks/main.yml
</span><span class='line'>---
</span><span class='line'>- name: Configure Hosts File
</span><span class='line'>  lineinfile: path=/etc/hosts regexp='.*$' line=" " state=present
</span><span class='line'>  when: hostvars[item].ansible_default_ipv4.address is defined
</span><span class='line'>  with_items: ""</span></code></pre></td></tr></table></div></figure>


<p>The role to copy the ssh keys:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat roles/copy-keys/tasks/main.yml
</span><span class='line'>---
</span><span class='line'>- name: Copy Public Key to Other Hosts
</span><span class='line'>  become: true
</span><span class='line'>  become_user: ruan
</span><span class='line'>  copy:
</span><span class='line'>    src: /tmp/id_rsa.pub
</span><span class='line'>    dest: /tmp/id_rsa.pub
</span><span class='line'>    mode: 0644
</span><span class='line'>- name: Append Public key in authorized_keys file
</span><span class='line'>  authorized_key:
</span><span class='line'>    user: ruan
</span><span class='line'>    state: present
</span><span class='line'>    key: ""</span></code></pre></td></tr></table></div></figure>


<p>The role to install elasticsearch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat roles/elasticsearch/tasks/main.yml
</span><span class='line'>---
</span><span class='line'>- name: get apt repo key
</span><span class='line'>  apt_key:
</span><span class='line'>    url: https://artifacts.elastic.co/GPG-KEY-elasticsearch
</span><span class='line'>    state: present
</span><span class='line'>
</span><span class='line'>- name: install apt repo
</span><span class='line'>  apt_repository:
</span><span class='line'>    repo: deb https://artifacts.elastic.co/packages/6.x/apt stable main
</span><span class='line'>    state: present
</span><span class='line'>    filename: elastic-6.x.list
</span><span class='line'>    update_cache: yes
</span><span class='line'>
</span><span class='line'>- name: install java
</span><span class='line'>  apt:
</span><span class='line'>    name: openjdk-8-jre
</span><span class='line'>    state: present
</span><span class='line'>    update_cache: yes
</span><span class='line'>
</span><span class='line'>- name: install elasticsearch
</span><span class='line'>  apt:
</span><span class='line'>    name: elasticsearch
</span><span class='line'>    state: present
</span><span class='line'>    update_cache: yes
</span><span class='line'>
</span><span class='line'>- name: reload systemd config
</span><span class='line'>  systemd: daemon_reload=yes
</span><span class='line'>
</span><span class='line'>- name: enable service elasticsearch and ensure it is not masked
</span><span class='line'>  systemd:
</span><span class='line'>    name: elasticsearch
</span><span class='line'>    enabled: yes
</span><span class='line'>    masked: no
</span><span class='line'>
</span><span class='line'>- name: ensure elasticsearch is running
</span><span class='line'>  systemd: state=started name=elasticsearch</span></code></pre></td></tr></table></div></figure>


<h2>Deploy Elasticsearch</h2>

<p>Bootstrap python then deploy elasticsearch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ansible-playbook -i inventory.ini -u root bootstrap-python.yml
</span><span class='line'>$ ansible-playbook -i inventory.ini -u root provision-users.yml</span></code></pre></td></tr></table></div></figure>


<p>Test out elasticsearch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://127.0.0.1:9200/
</span><span class='line'>{
</span><span class='line'>  "name" : "Z52AEZ7",
</span><span class='line'>  "cluster_name" : "elasticsearch",
</span><span class='line'>  "cluster_uuid" : "fUiYVjsSQpCbo9QKEiuvaA",
</span><span class='line'>  "version" : {
</span><span class='line'>    "number" : "6.3.0",
</span><span class='line'>    "build_flavor" : "default",
</span><span class='line'>    "build_type" : "deb",
</span><span class='line'>    "build_hash" : "424e937",
</span><span class='line'>    "build_date" : "2018-06-11T23:38:03.357887Z",
</span><span class='line'>    "build_snapshot" : false,
</span><span class='line'>    "lucene_version" : "7.3.1",
</span><span class='line'>    "minimum_wire_compatibility_version" : "5.6.0",
</span><span class='line'>    "minimum_index_compatibility_version" : "5.0.0"
</span><span class='line'>  },
</span><span class='line'>  "tagline" : "You Know, for Search"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch Templates Tutorial]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/06/elasticsearch-templates-tutorial/"/>
    <updated>2019-04-06T15:41:53-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/06/elasticsearch-templates-tutorial</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/53352581-b3892f80-392b-11e9-9532-5db5cbfc8f1c.jpg" alt="elasticsearch" /></p>

<p>Elasticsearch Index templates allow you to define templates that will automatically be applied on index creation time. The templates can include both settings and mappings..</p>

<h2>What are we doing?</h2>

<p>We want to create a template on how we would a target index to look like. It should consist of 1 primary shard and 2 replica shards and we want to update the mapping that we can make use of text and keyword string fields.</p>

<p>So then whenever we create an index which matches our template, the template will be applied on index creation.</p>

<h2>String Fields</h2>

<p>We will make use of the following string fields in our mappings which will be included in our templates:</p>

<p><strong>Text</strong>:</p>

<p>A field to index full-text values, such as the body of an email or the description of a product. These fields are analyzed, that is they are passed through an analyzer to convert the string into a list of individual terms before being indexed. The analysis process allows Elasticsearch to search for individual words within each full text field</p>

<p><strong>Keyword"</strong>:</p>

<p>A field to index structured content such as email addresses, hostnames, status codes, zip codes or tags.</p>

<p>They are typically used for filtering (Find me all blog posts where status is published), for sorting, and for aggregations. Keyword fields are only searchable by their exact value</p>

<h2>Note about templates:</h2>

<p>Couple of things to keep in mind:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. Templates gets referenced on index creation and does not affect existing indexes
</span><span class='line'>2. When you update a template, you need to specify the exact template, the payload overwrites the whole template</span></code></pre></td></tr></table></div></figure>


<p>View your current templates in your cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET http://localhost:9200/_cat/templates?v
</span><span class='line'>name                          index_patterns             order      version
</span><span class='line'>.monitoring-kibana            [.monitoring-kibana-6-*]   0          6020099
</span><span class='line'>filebeat-6.3.1                [filebeat-6.3.1-*]         1</span></code></pre></td></tr></table></div></figure>


<p>Create the template <code>foobar_docs</code> which will match any indexes matching <code>foo-*</code> and <code>bar-*</code> which will inherit index settings of 1 primary shards and 2 replica shards and also apply a mapping template shown below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H 'Content-Type: application/json' -XPUT http://localhost:9200/_template/foobar_docs -d '
</span><span class='line'>{
</span><span class='line'>  "index_patterns": [
</span><span class='line'>    "foo-*", "bar-*"
</span><span class='line'>  ], 
</span><span class='line'>  "settings": {
</span><span class='line'>    "number_of_shards": 1, 
</span><span class='line'>    "number_of_replicas": 2
</span><span class='line'>  }, 
</span><span class='line'>  "mappings": {
</span><span class='line'>    "type1": {
</span><span class='line'>      "_source": {"enabled": true}, 
</span><span class='line'>      "properties": {"created_at": {"type": "date"}, 
</span><span class='line'>      "title": {"type": "text"}, 
</span><span class='line'>      "status": {"type": "keyword"}, 
</span><span class='line'>      "content": {"type":"text"}, 
</span><span class='line'>      "first_name": {"type": "keyword"}, 
</span><span class='line'>      "last_name": {"type": "keyword"}, 
</span><span class='line'>      "age": {"type":"integer"}, 
</span><span class='line'>      "registered": {"type": "boolean"}
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}'
</span><span class='line'>{"acknowledged":true}</span></code></pre></td></tr></table></div></figure>


<p>View the template from the api:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET http://localhost:9200/_cat/templates/foobar_docs?v
</span><span class='line'>name        index_patterns order version
</span><span class='line'>foobar_docs [foo-*, bar-*] 0</span></code></pre></td></tr></table></div></figure>


<p>Create a index that will match the templates definition:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H 'Content-Type: application/json' -XPUT http://localhost:9200/test-2018.07.20
</span><span class='line'>{"acknowledged":true,"shards_acknowledged":true,"index":"test-2018.07.20"}</span></code></pre></td></tr></table></div></figure>


<p>Verify that the index has been created:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET http://localhost:9200/_cat/indices/test-2018.07.20?v
</span><span class='line'>health status index           uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>green  open   test-2018.07.20 -5XOfl0GTEGeHycTwL51vQ   5   1          0            0        2kb          1.1kb</span></code></pre></td></tr></table></div></figure>


<p>We can also inspect the template like shown below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET http://localhost:9200/_template/foobar_docs?pretty
</span><span class='line'>{
</span><span class='line'>  "foobar_docs" : {
</span><span class='line'>    "order" : 0,
</span><span class='line'>    "index_patterns" : [
</span><span class='line'>      "foo-*",
</span><span class='line'>      "bar-*"
</span><span class='line'>    ],
</span><span class='line'>    "settings" : {
</span><span class='line'>      "index" : {
</span><span class='line'>        "number_of_shards" : "1",
</span><span class='line'>        "number_of_replicas" : "2"
</span><span class='line'>      }
</span><span class='line'>    },
</span><span class='line'>    "mappings" : {
</span><span class='line'>      "type1" : {
</span><span class='line'>        "_source" : {
</span><span class='line'>          "enabled" : true
</span><span class='line'>        },
</span><span class='line'>        "properties" : {
</span><span class='line'>          "created_at" : {
</span><span class='line'>            "type" : "date"
</span><span class='line'>          },
</span><span class='line'>          "title" : {
</span><span class='line'>            "type" : "text"
</span><span class='line'>          },
</span><span class='line'>          "status" : {
</span><span class='line'>            "type" : "keyword"
</span><span class='line'>          },
</span><span class='line'>          "content" : {
</span><span class='line'>            "type" : "text"
</span><span class='line'>          },
</span><span class='line'>          "first_name" : {
</span><span class='line'>            "type" : "keyword"
</span><span class='line'>          },
</span><span class='line'>          "last_name" : {
</span><span class='line'>            "type" : "keyword"
</span><span class='line'>          },
</span><span class='line'>          "age" : {
</span><span class='line'>            "type" : "integer"
</span><span class='line'>          },
</span><span class='line'>          "registered" : {
</span><span class='line'>            "type" : "boolean"
</span><span class='line'>          }
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    },
</span><span class='line'>    "aliases" : { }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Ingest a document to your index:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H 'Content-Type: application/json' -XPOST http://localhost:9200/foo-2018.07.20/type1/ -d '
</span><span class='line'>{
</span><span class='line'>  "title": "this is a post", 
</span><span class='line'>  "status": "active", 
</span><span class='line'>  "content": "introduction post", 
</span><span class='line'>  "first_name": "ruan", 
</span><span class='line'>  "last_name": "bekker", 
</span><span class='line'>  "age": "31", 
</span><span class='line'>  "registered": "true"
</span><span class='line'>}'</span></code></pre></td></tr></table></div></figure>


<p>Run a search against your elasticsearch index to view the data:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET http://localhost:9200/foo-2018.07.20/_search?pretty
</span><span class='line'>{
</span><span class='line'>  "took" : 1,
</span><span class='line'>  "timed_out" : false,
</span><span class='line'>  "_shards" : {
</span><span class='line'>    "total" : 1,
</span><span class='line'>    "successful" : 1,
</span><span class='line'>    "skipped" : 0,
</span><span class='line'>    "failed" : 0
</span><span class='line'>  },
</span><span class='line'>  "hits" : {
</span><span class='line'>    "total" : 1,
</span><span class='line'>    "max_score" : 1.0,
</span><span class='line'>    "hits" : [
</span><span class='line'>      {
</span><span class='line'>        "_index" : "foo-2018.07.20",
</span><span class='line'>        "_type" : "type1",
</span><span class='line'>        "_id" : "ZYfotmQB9mQGWzJT7W2y",
</span><span class='line'>        "_score" : 1.0,
</span><span class='line'>        "_source" : {
</span><span class='line'>          "title" : "this is a post",
</span><span class='line'>          "status" : "active",
</span><span class='line'>          "content" : "introduction post",
</span><span class='line'>          "first_name" : "ruan",
</span><span class='line'>          "last_name" : "bekker",
</span><span class='line'>          "age" : "31",
</span><span class='line'>          "registered" : "true"
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    ]
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Create another document:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H 'Content-Type: application/json' -XPOST http://localhost:9200/foo-2018.07.20/type1/ -d '
</span><span class='line'>{
</span><span class='line'>  "created_at": 1532077144, 
</span><span class='line'>  "title": "this is a another post", 
</span><span class='line'>  "status": "ae", 
</span><span class='line'>  "content": "introduction post", 
</span><span class='line'>  "first_name": "stefan", 
</span><span class='line'>  "last_name": "bester", 
</span><span class='line'>  "age": 34, 
</span><span class='line'>  "registered": "true"
</span><span class='line'>}'</span></code></pre></td></tr></table></div></figure>


<p>As you guessed, executing another search against elasticsearch shows us both documents:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET http://localhost:9200/foo-2018.07.20/_search?pretty
</span><span class='line'>{
</span><span class='line'>  "took" : 0,
</span><span class='line'>  "timed_out" : false,
</span><span class='line'>  "_shards" : {
</span><span class='line'>    "total" : 1,
</span><span class='line'>    "successful" : 1,
</span><span class='line'>    "skipped" : 0,
</span><span class='line'>    "failed" : 0
</span><span class='line'>  },
</span><span class='line'>  "hits" : {
</span><span class='line'>    "total" : 2,
</span><span class='line'>    "max_score" : 1.0,
</span><span class='line'>    "hits" : [
</span><span class='line'>      {
</span><span class='line'>        "_index" : "foo-2018.07.20",
</span><span class='line'>        "_type" : "type1",
</span><span class='line'>        "_id" : "ZYfotmQB9mQGWzJT7W2y",
</span><span class='line'>        "_score" : 1.0,
</span><span class='line'>        "_source" : {
</span><span class='line'>          "title" : "this is a post",
</span><span class='line'>          "status" : "active",
</span><span class='line'>          "content" : "introduction post",
</span><span class='line'>          "first_name" : "ruan",
</span><span class='line'>          "last_name" : "bekker",
</span><span class='line'>          "age" : "31",
</span><span class='line'>          "registered" : "true"
</span><span class='line'>        }
</span><span class='line'>      },
</span><span class='line'>      {
</span><span class='line'>        "_index" : "foo-2018.07.20",
</span><span class='line'>        "_type" : "type1",
</span><span class='line'>        "_id" : "rofrtmQB9mQGWzJTxnvp",
</span><span class='line'>        "_score" : 1.0,
</span><span class='line'>        "_source" : {
</span><span class='line'>          "created_at" : 1532077144,
</span><span class='line'>          "title" : "this is a another post",
</span><span class='line'>          "status" : "active",
</span><span class='line'>          "content" : "introduction post",
</span><span class='line'>          "first_name" : "stefan",
</span><span class='line'>          "last_name" : "bester",
</span><span class='line'>          "age" : 34,
</span><span class='line'>          "registered" : "true"
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    ]
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s run a search query for any documents matching people with the age between <strong>30</strong> and <strong>40</strong>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H 'Content-Type: application/json' -XGET http://localhost:9200/foo-2018.07.20/_search?pretty -d '{"query": {"range": {"age": {"gte": 30, "lte": 40}}}}'
</span><span class='line'>{
</span><span class='line'>  "took" : 2,
</span><span class='line'>  "timed_out" : false,
</span><span class='line'>  "_shards" : {
</span><span class='line'>    "total" : 1,
</span><span class='line'>    "successful" : 1,
</span><span class='line'>    "skipped" : 0,
</span><span class='line'>    "failed" : 0
</span><span class='line'>  },
</span><span class='line'>  "hits" : {
</span><span class='line'>    "total" : 2,
</span><span class='line'>    "max_score" : 1.0,
</span><span class='line'>    "hits" : [
</span><span class='line'>      {
</span><span class='line'>        "_index" : "foo-2018.07.20",
</span><span class='line'>        "_type" : "type1",
</span><span class='line'>        "_id" : "ZYfotmQB9mQGWzJT7W2y",
</span><span class='line'>        "_score" : 1.0,
</span><span class='line'>        "_source" : {
</span><span class='line'>          "title" : "this is a post",
</span><span class='line'>          "status" : "active",
</span><span class='line'>          "content" : "introduction post",
</span><span class='line'>          "first_name" : "ruan",
</span><span class='line'>          "last_name" : "bekker",
</span><span class='line'>          "age" : "31",
</span><span class='line'>          "registered" : "true"
</span><span class='line'>        }
</span><span class='line'>      },
</span><span class='line'>      {
</span><span class='line'>        "_index" : "foo-2018.07.20",
</span><span class='line'>        "_type" : "type1",
</span><span class='line'>        "_id" : "rofrtmQB9mQGWzJTxnvp",
</span><span class='line'>        "_score" : 1.0,
</span><span class='line'>        "_source" : {
</span><span class='line'>          "created_at" : 1532077144,
</span><span class='line'>          "title" : "this is a another post",
</span><span class='line'>          "status" : "active",
</span><span class='line'>          "content" : "introduction post",
</span><span class='line'>          "first_name" : "stefan",
</span><span class='line'>          "last_name" : "bester",
</span><span class='line'>          "age" : 34,
</span><span class='line'>          "registered" : "true"
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    ]
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Search for people with the age between <strong>32</strong> and <strong>40</strong>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H 'Content-Type: application/json' -XGET http://localhost:9200/foo-2018.07.20/_search?pretty -d '{"query": {"range": {"age": {"gte": 32, "lte": 40}}}}'
</span><span class='line'>{
</span><span class='line'>  "took" : 1,
</span><span class='line'>  "timed_out" : false,
</span><span class='line'>  "_shards" : {
</span><span class='line'>    "total" : 1,
</span><span class='line'>    "successful" : 1,
</span><span class='line'>    "skipped" : 0,
</span><span class='line'>    "failed" : 0
</span><span class='line'>  },
</span><span class='line'>  "hits" : {
</span><span class='line'>    "total" : 1,
</span><span class='line'>    "max_score" : 1.0,
</span><span class='line'>    "hits" : [
</span><span class='line'>      {
</span><span class='line'>        "_index" : "foo-2018.07.20",
</span><span class='line'>        "_type" : "type1",
</span><span class='line'>        "_id" : "rofrtmQB9mQGWzJTxnvp",
</span><span class='line'>        "_score" : 1.0,
</span><span class='line'>        "_source" : {
</span><span class='line'>          "created_at" : 1532077144,
</span><span class='line'>          "title" : "this is a another post",
</span><span class='line'>          "status" : "active",
</span><span class='line'>          "content" : "introduction post",
</span><span class='line'>          "first_name" : "stefan",
</span><span class='line'>          "last_name" : "bester",
</span><span class='line'>          "age" : 34,
</span><span class='line'>          "registered" : "true"
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    ]
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s say we want to update our template with <code>refresh_interval</code>, primary shards of 2 and replicas of 1 settings:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H 'Content-Type: application/json' -XPUT http://localhost:9200/_template/foobar_docs -d '
</span><span class='line'>{
</span><span class='line'>  "index_patterns": ["foo-*", "bar-*"], 
</span><span class='line'>  "settings": {"number_of_shards": 2, "number_of_replicas": 1, "refresh_interval": "15s"}
</span><span class='line'>}'</span></code></pre></td></tr></table></div></figure>


<p>View the template, as you can see the target template will look exactly like the data body that we are posting to the template api:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET http://localhost:9200/_template/foobar_docs?pretty
</span><span class='line'>{
</span><span class='line'>  "foobar_docs" : {
</span><span class='line'>    "order" : 0,
</span><span class='line'>    "index_patterns" : [
</span><span class='line'>      "foo-*",
</span><span class='line'>      "bar-*"
</span><span class='line'>    ],
</span><span class='line'>    "settings" : {
</span><span class='line'>      "index" : {
</span><span class='line'>        "number_of_shards" : "2",
</span><span class='line'>        "number_of_replicas" : "1",
</span><span class='line'>        "refresh_interval" : "15s"
</span><span class='line'>      }
</span><span class='line'>    },
</span><span class='line'>    "mappings" : { },
</span><span class='line'>    "aliases" : { }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>View our current index, as you can see the index is unaffected of the template change as only new indexes will retrieve the update of the template:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET http://localhost:9200/_cat/indices/foo-2018.07.20?v
</span><span class='line'>health status index          uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>yellow open   foo-2018.07.20 ol1pGugrQCKd0xES4R6oFg   1   2          2            0     20.4kb         10.2kb</span></code></pre></td></tr></table></div></figure>


<p>Create a new index to verify that the template&rsquo;s config is pulled into the new index:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H 'Content-Type: application/json' -XPUT http://localhost:9200/foo-2018.07.20-new</span></code></pre></td></tr></table></div></figure>


<p>View the elasticsearch indexes to verify the behavior:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET http://localhost:9200/_cat/indices/foo-2018.07.*?v
</span><span class='line'>health status index              uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>yellow open   foo-2018.07.20     ol1pGugrQCKd0xES4R6oFg   1   2          2            0     20.4kb         10.2kb
</span><span class='line'>green  open   foo-2018.07.20-new g6Ii8jtKRFa1zDVB2IsDBQ   2   1          0            0       920b           460b</span></code></pre></td></tr></table></div></figure>


<p>Delete the indexes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XDELETE http://localhost:9200/foo-*
</span><span class='line'>{"acknowledged":true}</span></code></pre></td></tr></table></div></figure>


<p>Delete the templates:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XDELETE 'http://localhost:9200/_template/foobar_docs'
</span><span class='line'>{"acknowledged":true}</span></code></pre></td></tr></table></div></figure>


<p>Verify that the templates are gone:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET http://localhost:9200/_cat/templates/foobar_docs?v
</span><span class='line'>name index_patterns order version</span></code></pre></td></tr></table></div></figure>


<h2>Resources:</h2>

<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html</a>
<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.3/mapping-types.html">https://www.elastic.co/guide/en/elasticsearch/reference/6.3/mapping-types.html</a>
<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reindex Your Elasticsearch Indexes Tutorial]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/06/reindex-your-elasticsearch-indexes-tutorial/"/>
    <updated>2019-04-06T15:37:18-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/06/reindex-your-elasticsearch-indexes-tutorial</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/53352581-b3892f80-392b-11e9-9532-5db5cbfc8f1c.jpg" alt="" /></p>

<p>At times you may find that the indexes in your cluster are not queried that often but you still want them around. But you also want to reduce the resource footprint by reducing the number of shards, and perhaps increase the refresh interval.</p>

<p>For refresh interval, if new data comes in and we dont care to have it available near real time, we can set the refresh interval for example to 60 seconds, so the index will only have the data available every 60 seconds. (default: 1s)</p>

<h2>Reindexing Elasticsearch Indexes</h2>

<p>In this example we will use the scenario where we have daily indexes with 5 primary shards and 1 set of replicas and we would like to create a weekly index with 1 primary shard, 1 replica and the refresh interval of 60 seconds, and reindex the previous weeks data into our weekly index.</p>

<p>Create the target weekly index with the mentioned configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H "Content-Type: application/json" -XPUT 'http://127.0.0.1:9200/my-index-2019.01.01-07' -d '
</span><span class='line'>{
</span><span class='line'>  "settings": {
</span><span class='line'>      "number_of_shards": "1",
</span><span class='line'>      "number_of_replicas": "1",
</span><span class='line'>      "refresh_interval" : "60s"
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>'</span></code></pre></td></tr></table></div></figure>


<p>Ensure the index exist:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET 'http://127.0.0.1:9200/_cat/indices/my-index-2019.01.01*?v'
</span><span class='line'>health status index                    uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>green  open   my-index-2019.01.01      wbFEJCApSpSlbOXzb1Tjxw   5   1      22007            0      6.6mb          3.2mb
</span><span class='line'>green  open   my-index-2019.01.02      cbDmJR7pbpRT3O2x46fj20   5   1      28031            0      7.2mb          3.4mb
</span><span class='line'>..
</span><span class='line'>green  open   my-index-2019.01.01-07   mJR7pJ9O4T3O9jzyI943ca   1   1          0            0       466b           233b</span></code></pre></td></tr></table></div></figure>


<p>Create the reindex job, specify the source indexes and the destination index where the data must be reindexed to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -H 'Content-Type: application/json' -XPOST 'http://127.0.0.1:9200/_reindex' -d '
</span><span class='line'>{
</span><span class='line'>  "source": {
</span><span class='line'>      "index": [
</span><span class='line'>          "my-index-2019.01.01",
</span><span class='line'>          "my-index-2019.01.02",
</span><span class='line'>          "my-index-2019.01.03",
</span><span class='line'>          "my-index-2019.01.04",
</span><span class='line'>          "my-index-2019.01.05",
</span><span class='line'>          "my-index-2019.01.06",
</span><span class='line'>          "my-index-2019.01.07"
</span><span class='line'>      ]
</span><span class='line'>  },
</span><span class='line'>  "dest": {
</span><span class='line'>      "index": "my-index-2019.01.01-07"
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>'</span></code></pre></td></tr></table></div></figure>


<p>You can use the tasks api to monitor the progress:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET 'http://127.0.0.1:9200/_cat/tasks?'
</span><span class='line'>indices:data/write/bulk        -3MIFskURPKxd1tg8P2j0w:912621270 -                                transport 1538459598188 22:53:18 3.1ms       x.x.x.x -3MIFsk
</span><span class='line'>indices:data/write/bulk[s]     -3MIFskURPKxd1tg8P2j0w:912621271 -3MIFskURPKxd1tg8P2j0w:816648230 transport 1538459598188 22:53:18 3.1ms       x.x.x.x -3MIFsk</span></code></pre></td></tr></table></div></figure>


<p>You manipulate the output of the tasks api by either fetching specific actions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET 'http://127.0.0.1:9200/_tasks?actions=*data/write/reindex&detailed&pretty'</span></code></pre></td></tr></table></div></figure>


<p>Or viewing detailed output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET 'http://127.0.0.1:9200/_cat/tasks?detailed' | grep 'indices:data/write/reindex'
</span><span class='line'>indices:data/write/reindex     IvoqWoUqSgGCQ0ELG21nhg:740560815 -                                transport 1538462294714 23:38:14 1.7m        x.x.x.x IvoqWoU reindex from [my-index-2019.01.01] to [my-index-2019.01.01-07]</span></code></pre></td></tr></table></div></figure>


<p>Or you could get the json response:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET 'http://127.0.0.1:9200/_tasks?actions=*data/write/reindex&detailed&pretty'
</span><span class='line'>{
</span><span class='line'>  "nodes" : {
</span><span class='line'>    "xx" : {
</span><span class='line'>      "name" : "xx",
</span><span class='line'>      "roles" : [ "data", "ingest" ],
</span><span class='line'>      "tasks" : {
</span><span class='line'>        "xx:876452606" : {
</span><span class='line'>          "node" : "xx",
</span><span class='line'>          "id" : 776452606,
</span><span class='line'>          "type" : "transport",
</span><span class='line'>          "action" : "indices:data/write/reindex",
</span><span class='line'>          "status" : {
</span><span class='line'>            "total" : 4785475,
</span><span class='line'>            "updated" : 0,
</span><span class='line'>            "created" : 234000,
</span><span class='line'>            "deleted" : 0,
</span><span class='line'>            "batches" : 235,
</span><span class='line'>            "version_conflicts" : 0,
</span><span class='line'>            "noops" : 0,
</span><span class='line'>            "retries" : {
</span><span class='line'>              "bulk" : 0,
</span><span class='line'>              "search" : 0
</span><span class='line'>            },
</span><span class='line'>            "throttled_millis" : 0,
</span><span class='line'>            "requests_per_second" : -1.0,
</span><span class='line'>            "throttled_until_millis" : 0
</span><span class='line'>          },
</span><span class='line'>          "description" : "reindex from [my-index-2019.01.07] to [my-index-2019.01.01-07]",
</span><span class='line'>          "start_time_in_millis" : 1538462901120,
</span><span class='line'>          "running_time_in_nanos" : 64654161339,
</span><span class='line'>          "cancellable" : true
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Anyways, moving along. Reindex jobs will always be listed as a <code>data/write/reindex</code> action, so we can count the output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET 'http://127.0.0.1:9200/_cat/tasks?'  | grep 'data/write/reindex' | wc -l</span></code></pre></td></tr></table></div></figure>


<p>If the response is 0 then all the tasks completed and we can have a look at our index again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET 'http://127.0.0.1:9200/_cat/indices/my-index-2019.01.0*?v'
</span><span class='line'>health status index                    uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>green  open   my-index-2019.01.01      wbFEJCApSpSlbOXzb1Tjxw   5   1      22007            0      6.6mb          3.2mb
</span><span class='line'>green  open   my-index-2019.01.02      cbDmJR7pbpRT3O2x46fj20   5   1      28031            0      7.2mb          3.4mb
</span><span class='line'>..
</span><span class='line'>green  open   my-index-2019.01.01-07   mJR7pJ9O4T3O9jzyI943ca   1   1     322007            0     45.9mb         22.9mb</span></code></pre></td></tr></table></div></figure>


<p>Now that we can verify that the reindex tasks finished and we can see the aggregated result in our target index, we can delete our source indexes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XDELETE 'http://127.0.0.1:9200/my-index-2019.01.01,my-index-2019.01.02,my-index-2019.01.03,my-index-2019.01.04,my-index-2019.01.05,my-index-2019.01.06,my-index-2019.01.07'</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shrink Your Elasticsearch Index by Reducing the Shard Count With the Shards API]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/06/shrink-your-elasticsearch-index-by-reducing-the-shard-count-with-the-shards-api/"/>
    <updated>2019-04-06T15:33:48-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/06/shrink-your-elasticsearch-index-by-reducing-the-shard-count-with-the-shards-api</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/53352581-b3892f80-392b-11e9-9532-5db5cbfc8f1c.jpg" alt="elasticsearch" /></p>

<p>Resize your Elasticsearch Index with fewer Primary Shards by using the Shrink API.</p>

<p>In Elasticsearch, every index consists of multiple shards and every shard in your elasticsearch cluster contributes to the usage of your cpu, memory, file descriptors etc. This definitely helps for performance in parallel processing. As for an example with time series data, you would write and read a lot to an index with ie the current date.</p>

<p>If that index drops in requests and only read from the index every now and then, we dont need that many shards anymore and if we have multiple indexes, they may build up and take up unessacary compute power.</p>

<p>For a scenario where we want to reduce the size of our indexes, we can use the Shrink API to reduce the number of primary shards.</p>

<h2>The Shrink API</h2>

<p>The shrink index API allows you to shrink an existing index into a new index with fewer primary shards. The requested number of primary shards in the target index must be a factor of the number of shards in the source index. For example an index with 8 primary shards can be shrunk into 4, 2 or 1 primary shards or an index with 15 primary shards can be shrunk into 5, 3 or 1. If the number of shards in the index is a prime number it can only be shrunk into a single primary shard. Before shrinking, a (primary or replica) copy of every shard in the index must be present on the same node.</p>

<p>Steps on Shrinking:</p>

<p>Create the target index with the same definition as the source index, but with a smaller number of primary shards.
Then it hard-links segments from the source index into the target index.
Finally, it recovers the target index as though it were a closed index which had just been re-opened.</p>

<h2>Reduce the Primary Shards of an Index.</h2>

<p>As you may know, you can only set the Primary Shards on Index Creation time and Replica Shards you can set on the fly.</p>

<p>In this example we have a source index: <code>my-index-2019.01.10</code> with 5 primary shards and 1 replica shard, which gives us 10 shards for that index, that we would like to shrink to an index named: <code>archive_my-index-2019.01.10</code> with 1 primary shard and 1 replica shard, which will give us 2 shards for that index.</p>

<p>Have a look at your index:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET "http://127.0.0.1:9200/_cat/indices/my-index-2019.01.*?v"
</span><span class='line'>health status index                                     uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>green  open   my-index-2019.01.10                       xAijUTSevXirdyTZTN3cuA   5   1   80795533            0      5.9gb          2.9gb
</span><span class='line'>green  open   my-index-2019.01.11                       yb8Cjy9eQwqde8mJhR_vlw   5   5   80590481            0      5.7gb          2.8gb
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>And have a look at the nodes, as we will relocate the shards to a specific node:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://127.0.0.1:9200/_cat/nodes?v
</span><span class='line'>ip            heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name
</span><span class='line'>x.x.x.x             8          98   0    0.04    0.03     0.01 m         -      3E9yp60
</span><span class='line'>x.x.x.x            65          99   4    0.43    0.23     0.36 di        -      znFrs18</span></code></pre></td></tr></table></div></figure>


<p>In this demonstration we only have 2 nodes with a replication factor of 1, which means a index&rsquo;s shards will always reside on both nodes. In a case with more nodes, we need to ensure that we choose a node where a primary index reside on.</p>

<p>Look at the shards api, by passing the index name to get the index to shard allocation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://127.0.0.1:9200/_cat/shards/my-index-2019.01.10?v'
</span><span class='line'>index               shard prirep state   docs  store ip       node
</span><span class='line'>my-index-2019.01.10 2     p      STARTED  193  101mb x.x.x.x  Lq9P7eP
</span><span class='line'>my-index-2019.01.10 2     r      STARTED  193  101mb x.x.x.x  F5edOwK
</span><span class='line'>my-index-2019.01.10 4     p      STARTED  197  101mb x.x.x.x  Lq9P7eP
</span><span class='line'>my-index-2019.01.10 4     r      STARTED  197  101mb x.x.x.x  F5edOwK
</span><span class='line'>my-index-2019.01.10 3     r      STARTED  184  101mb x.x.x.x  Lq9P7eP
</span><span class='line'>my-index-2019.01.10 3     p      STARTED  184  101mb x.x.x.x  F5edOwK
</span><span class='line'>my-index-2019.01.10 1     r      STARTED  180  101mb x.x.x.x  Lq9P7eP
</span><span class='line'>my-index-2019.01.10 1     p      STARTED  180  101mb x.x.x.x  F5edOwK
</span><span class='line'>my-index-2019.01.10 0     p      STARTED  187  101mb x.x.x.x  Lq9P7eP
</span><span class='line'>my-index-2019.01.10 0     r      STARTED  187  101mb x.x.x.x  F5edOwK</span></code></pre></td></tr></table></div></figure>


<p>Create the target index:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XPUT -H 'Content-Type: application/json' http://127.0.0.1:9200/archive_my-index-2019.01.10 -d '
</span><span class='line'>{
</span><span class='line'>  "settings": {
</span><span class='line'>      "number_of_shards": "1",
</span><span class='line'>      "number_of_replicas": "1"
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>'</span></code></pre></td></tr></table></div></figure>


<p>Set the index as read only and relocate every copy of shard to node we indentified in a previous step:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XPUT -H 'Content-Type: application/json' http://127.0.0.1:9200/my-index-2019.01.10/_settings -d '
</span><span class='line'>{
</span><span class='line'>  "settings": {
</span><span class='line'>      "index.routing.allocation.require._name": "Lq9P7eP",
</span><span class='line'>      "index.blocks.write": true
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>'</span></code></pre></td></tr></table></div></figure>


<p>Now shrink the source index (my-index-2019.01.10) to the target index (archive_my-index-2019.01.10):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XPOST -H 'Content-Type: application/json' http://127.0.0.1:9200/my-index-2019.01.10/_shrink/archive_my-index-2019.01.10</span></code></pre></td></tr></table></div></figure>


<p>You can monitor the progress by using the Recovery API:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET "http://127.0.0.1:9200/_cat/recovery/my-index-2019.01.10?human&detailed=true"
</span><span class='line'>my-index-2019.01.10 0 23.3s peer done x.x.x.x  F5edOwK x.x.x.x Lq9P7eP n/a n/a 15 15 100.0% 15 635836677 635836677 100.0% 635836677 0 0 100.0%
</span><span class='line'>my-index-2019.01.10 1 22s   peer done x.x.x.x  Lq9P7eP x.x.x.x Lq9P7eP n/a n/a 15 15 100.0% 15 636392649 636392649 100.0% 636392649 0 0 100.0%
</span><span class='line'>my-index-2019.01.10 2 19.6s peer done x.x.x.x  F5edOwK x.x.x.x Lq9P7eP n/a n/a 15 15 100.0% 15 636809671 636809671 100.0% 636809671 0 0 100.0%
</span><span class='line'>my-index-2019.01.10 3 21.5s peer done x.x.x.x  Lq9P7eP x.x.x.x Lq9P7eP n/a n/a 15 15 100.0% 15 636378870 636378870 100.0% 636378870 0 0 100.0%
</span><span class='line'>my-index-2019.01.10 4 23.3s peer done x.x.x.x F5edOwK- x.x.x.x Lq9P7eP n/a n/a 15 15 100.0% 15 636545756 636545756 100.0% 636545756 0 0 100.0%</span></code></pre></td></tr></table></div></figure>


<p>You can also pass aliases as your table columns for output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET "http://127.0.0.1:9200/_cat/recovery/my-index-2019.01.10?v&detailed=true&h=index,shard,time,ty,st,shost,thost,f,fp,b,bp"
</span><span class='line'>index                            shard time  ty   st   shost         thost        f  fp     b         bp
</span><span class='line'>my-index-2019.01.10              0     23.3s peer done x.x.x.x x.x.x.x 15 100.0% 635836677 100.0%
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>When the job is done, have a look at your indexes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XGET "http://127.0.0.1:9200/_cat/indices/*my-index-2019.01.10?v"
</span><span class='line'>health status index                                     uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>green  open   archive_my-index-2019.01.10               PAijUTSeRvirdyTZTN3cuA   1   1   80795533            0      5.9gb          2.9gb
</span><span class='line'>green  open   my-index-2019.01.10                       Cb8Cjy9CQwqde8mJhR_vlw   5   1   80795533            0      2.9gb          2.9gb</span></code></pre></td></tr></table></div></figure>


<p>Remove the block on your old index in order to make it writable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XPUT -H 'Content-Type: application/json' http://127.0.0.1:9200/my-index-2019.01.10/_settings" -d '
</span><span class='line'>{
</span><span class='line'>  "settings": {
</span><span class='line'>      "index.routing.allocation.require._name": null,
</span><span class='line'>      "index.blocks.write": null
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>'</span></code></pre></td></tr></table></div></figure>


<p>Delete the old index:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XDELETE -H 'Content-Type: application/json' http://127.0.0.1:9200/my-index-2019.01.10</span></code></pre></td></tr></table></div></figure>


<p>Note:, On AWS Elasticsearch Service, if you dont remove the block and you trigger a redeployment, you will end up with something like this. Shard may still be constraint to a node.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET ${ES_HOST/_cat/allocation?v
</span><span class='line'>shards disk.indices disk.used disk.avail disk.total disk.percent host          ip  node
</span><span class='line'>     0           0b    51.2gb    956.5gb   1007.8gb            5 x.x.x.x  x.x.x.x  ap9Mx1R
</span><span class='line'>     1        3.6gb    54.9gb    952.8gb   1007.8gb            5 x.x.x.x  x.x.x.x  PqmoQpN   &lt;-----------
</span><span class='line'>     0           0b    51.2gb    956.5gb   1007.8gb            5 x.x.x.x  x.x.x.x  5p7x4Lc
</span><span class='line'>     0           0b    51.2gb    956.5gb   1007.8gb            5 x.x.x.x  x.x.x.x  c8kniP3
</span><span class='line'>     0           0b    51.2gb    956.5gb   1007.8gb            5 x.x.x.x  x.x.x.x  jPwlwsD
</span><span class='line'>     0           0b    51.2gb    956.5gb   1007.8gb            5 x.x.x.x  x.x.x.x  ljos4mu
</span><span class='line'>   481      904.1gb   990.3gb    521.3gb      1.4tb           65 x.x.x.x  x.x.x.x  qAF-gIU
</span><span class='line'>   481      820.2gb   903.6gb    608.1gb      1.4tb           59 x.x.x.x  x.x.x.x  dR3sNwA
</span><span class='line'>   481      824.6gb   909.1gb    602.6gb      1.4tb           60 x.x.x.x  x.x.x.x  fvL4A9X
</span><span class='line'>   481      792.7gb   876.5gb    635.2gb      1.4tb           57 x.x.x.x  x.x.x.x  lk4svht
</span><span class='line'>   481      779.2gb   864.4gb    647.3gb      1.4tb           57 x.x.x.x  x.x.x.x  uLsej9m
</span><span class='line'>     0           0b    51.2gb    956.5gb   1007.8gb            5 x.x.x.x  x.x.x.x  yM4Ka9l</span></code></pre></td></tr></table></div></figure>


<h2>Resources:</h2>

<ul>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shrink-index.html">https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shrink-index.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self Hosted Git and CICD Platform With Gitea and Drone on Docker]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/04/self-hosted-git-and-cicd-platform-with-gitea-and-drone-on-docker/"/>
    <updated>2019-04-04T17:57:16-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/04/self-hosted-git-and-cicd-platform-with-gitea-and-drone-on-docker</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55591102-f57c7100-5734-11e9-96cf-8a60d091a769.png" alt="" /></p>

<p>Both gitea and drone is built on golang runs on multiple platforms including a raspberry pi and its super lightweight. Oh yes, and its awesome!</p>

<p>In this tutorial we will see how we can implement our own git service and cicd platform by setting up gitea and drone on docker and commit a python flask application to gitea and build a pipeline on drone.</p>

<h2>Some definition</h2>

<p><strong>Gitea</strong>: will be your self hosted git server</p>

<p><strong>Drone Server</strong>: will be server being responsible for the web service, repositories, secrets, users, etc.</p>

<p><strong>Drone Agent</strong>: will be the workers that runs your builds, jobs etc.</p>

<h2>Server Confguration</h2>

<p>We will change our host&rsquo;s ssh port to something else as our git server&rsquo;s ssh method will be listening on port 22 and we would like to add our ssh key to gitea so that we can commit to our git server via ssh.</p>

<p>Change your server&rsquo;s ssh port to 2222, by opening <code>/etc/ssh/sshd_config</code> and edit the port to <code>2222</code> then restart sshd with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ /etc/init.d/sshd restart</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Your ssh connection will still be established, but you can exit and ssh to your server by specifying the new port:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -p 2222 user@host</span></code></pre></td></tr></table></div></figure>


<h2>Pre-Requirements</h2>

<p>Make sure you have <a href="https://docs.docker.com/install/">docker and docker-compose</a> installed</p>

<h2>Deploy Gitea and Drone</h2>

<p>Below is the docker-compose file for our deployment. Note that we are running a postgres database which gitea will be configured on, you can also use other databases like mysql, sqlite etc. Visit their <a href="https://docs.gitea.io/en-us/">documentation</a> for more info.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&quot;2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gitea-app</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">gitea/gitea:latest</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">gitea-app</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">USER_UID=1000</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">USER_GID=1000</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ROOT_URL=http://gitea:3000</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">SSH_DOMAIN=mydomain.com</span>
</span><span class='line'>    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">always</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./volumes/gitea_app:/data</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&quot;3000:3000&quot;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&quot;22:22&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">appnet</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">gitea-db</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">postgres:alpine</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">gitea-db</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">5440:5432</span>
</span><span class='line'>    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">always</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./volumes/gitea_db:/var/lib/postgresql/data</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">POSTGRES_USER=postgres</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">POSTGRES_PASSWORD=postgres</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">POSTGRES_DB=gitea</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">appnet</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">drone-server</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">drone/drone:0.8</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">drone-server</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">80:8000</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">9000</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./volumes/drone:/var/lib/drone/</span>
</span><span class='line'>    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">always</span>
</span><span class='line'>    <span class="l-Scalar-Plain">depends_on</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">gitea</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DRONE_OPEN=true</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DRONE_HOST=http://drone-server:8000</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DRONE_GITEA=true</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DRONE_GITEA_URL=http://gitea:3000</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DRONE_SECRET=secret</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DRONE_NETWORK=appnet</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">appnet</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">drone-agent</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">drone/agent:0.8</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">drone-agent</span>
</span><span class='line'>    <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">agent</span>
</span><span class='line'>    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">always</span>
</span><span class='line'>    <span class="l-Scalar-Plain">depends_on</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">drone-server</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/var/run/docker.sock:/var/run/docker.sock</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DRONE_SERVER=drone-server:9000</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DRONE_SECRET=secret</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">appnet</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gitea-app</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gitea-db</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">appnet</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">external</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the volumes path:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ mkdir volumes</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the external network:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker network create appnet</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some key configuration,</p>

<p>Our <code>SSH_DOMAIN</code> will be the domain that gets used for things like cloning a repository. When you register your gitea account, you will use the same credentials to logon to drone.</p>

<p>Deploy your stack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker-compose up -d</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Register on Gitea</h2>

<p>When your deployment is done, access your gitea server which should be available on <code>http://your-docker-ip:3000/</code> complete the registration, if you decide to go with postgres your username/password will be <code>postgres</code> and your host will be <code>gitea-db:5432</code>.</p>

<p>Make sure to complete the administrator account to get your admin credentials.</p>

<h2>Setup SSH Key and Repo</h2>

<p>Generate a ssh key that you will use for communicating to git over ssh. If you have already have an ssh key you can skip this step.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh-keygen -t rsa
</span><span class='line'><span class="c"># use the defaults</span>
</span></code></pre></td></tr></table></div></figure>


<p>Login on gitea, once you are logged in, head over to profile / settings / ssh keys: <code>http://your-docker-ip:3000/user/settings/keys</code>.</p>

<p>Add a new ssh key, go back to your terminal and copy the public key which we will provide to gitea:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat ~/.ssh/id_rsa.pub
</span><span class='line'>&lt;copy the contents to your clipboard&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Paste your public key and provide a descriptive title.</p>

<p>Head back to your dashboard and create your first repository:</p>

<p><img width="1277" alt="image" src="https://user-images.githubusercontent.com/567298/55589336-49388b80-5730-11e9-8ae5-2589fea7e2b2.png"></p>

<p>It should look more or less like this:</p>

<p><img width="1007" alt="image" src="https://user-images.githubusercontent.com/567298/55589473-9583cb80-5730-11e9-8124-3bdedc221a70.png"></p>

<h2>Enable Repo on Drone</h2>

<p>Head over to drone and select the repositores on the right hand side <a href="http://">http://</a><your-docker-ip>:80/account/repos and enable your repository by toggline the selector, it should look more or less like this:</p>

<p><img width="1275" alt="image" src="https://user-images.githubusercontent.com/567298/55589614-f3b0ae80-5730-11e9-9358-54a6be611198.png"></p>

<p>Once its enabled head back to gitea.</p>

<h2>Clone the repository</h2>

<p>On your repository select ssh and copy the ssh link for your repository:</p>

<p><img width="974" alt="image" src="https://user-images.githubusercontent.com/567298/55589710-3b373a80-5731-11e9-956b-c921c42e6a2d.png"></p>

<p>Then from your terminal add your private ssh key to your ssh agent and clone the repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">eval</span> <span class="k">$(</span>ssh-agent<span class="k">)</span>
</span><span class='line'><span class="nv">$ </span>ssh-add ~/.ssh/id_rsa
</span><span class='line'><span class="nv">$ </span>git clone git@your-docker-ip:your-user/your-repo.git
</span></code></pre></td></tr></table></div></figure>


<h2>Add Example Python Flask app to git</h2>

<p>I will use a basic python flask application with some tests.</p>

<p>Let&rsquo;s first add our pipeline definition for drone, so that drone understands how the pipeline should be run when gitea receives a commit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>touch .drone.yml
</span></code></pre></td></tr></table></div></figure>


<p>Our pipeline:</p>

<figure class='code'><figcaption><span>.drone.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">pipeline</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">build</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">python:3.5.1-alpine</span>
</span><span class='line'>    <span class="l-Scalar-Plain">commands</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">pip install --upgrade pip setuptools wheel</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">pip wheel -r requirements.txt --wheel-dir=wheeldir --find-links=wheeldir</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">pip install --no-index --find-links=wheeldir -r requirements.txt</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">flake8 app</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mkdir -p coverage</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">nosetests -v tests/</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lets add that to git:</p>

<figure class='code'><figcaption><span>.drone.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ git add .drone.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">$ git commit -m &quot;initial add of our pipeline&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">$ git push origin master</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our drone file should be in git, now our requirements dependency file for python:</p>

<figure class='code'><figcaption><span>requirements.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>flask
</span><span class='line'>nose
</span><span class='line'>flake8
</span></code></pre></td></tr></table></div></figure>


<p>Our blank file to make our application a module:</p>

<figure class='code'><figcaption><span>requirements.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir app
</span><span class='line'><span class="nv">$ </span>touch app/__init__.py
</span></code></pre></td></tr></table></div></figure>


<p>And our flask app:</p>

<figure class='code'><figcaption><span>app/app.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">hello</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Hello, World!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our tests directory and our python init file:</p>

<figure class='code'><figcaption><span>app/app.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">mkdir</span> <span class="n">tests</span>
</span><span class='line'><span class="err">$</span> <span class="n">touch</span> <span class="n">tests</span><span class="o">/</span><span class="n">__init__</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have all our files ready, commit and push to git:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;add python app&quot;</span>
</span><span class='line'><span class="nv">$ </span>git push origin master
</span></code></pre></td></tr></table></div></figure>


<h2>Look at Drone Running</h2>

<p>Head over to drone and look at the builds, you should see your build running at <code>http://&lt;docker-ip&gt;:80/&lt;user&gt;/&lt;repo-name&gt;</code>:</p>

<p><img width="1269" alt="image" src="https://user-images.githubusercontent.com/567298/55590369-f8766200-5732-11e9-82fb-2bda2c8ad40a.png"></p>

<p>If everything ran as expected you should see that it passed.</p>

<h2>Build Status Badges</h2>

<p>You can also include the build status badges from drone which will look like:</p>

<p><img width="1032" alt="image" src="https://user-images.githubusercontent.com/567298/55590552-82bec600-5733-11e9-91f2-a65c5a94fac5.png"></p>

<p>You can use the drone api: <code>http://drone-ip:80/api/badges/&lt;your-user&gt;/&lt;your-repo&gt;/status.svg</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>!<span class="o">[</span>Build Status<span class="o">](</span>http://your-ip/api/badges/your-user/your-repo/status.svg<span class="o">)</span>
</span><span class='line'><span class="o">[</span>!<span class="o">[](</span>https://images.microbadger.com/badges/image/gitea/gitea.svg<span class="o">)](</span>https://microbadger.com/images/gitea/gitea <span class="s2">&quot;Get your own image badge on microbadger.com&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">[</span>!<span class="o">[</span>GitHub release<span class="o">](</span>https://img.shields.io/github/release/go-gitea/gitea.svg<span class="o">)](</span>https://github.com/go-gitea/gitea/releases/latest<span class="o">)</span>
</span><span class='line'><span class="o">[</span>!<span class="o">[</span>Help Contribute to Open Source<span class="o">](</span>https://www.codetriage.com/go-gitea/gitea/badges/users.svg<span class="o">)](</span>https://www.codetriage.com/go-gitea/gitea<span class="o">)</span>
</span><span class='line'><span class="o">[</span>!<span class="o">[</span>Become a backer/sponsor of gitea<span class="o">](</span>https://opencollective.com/gitea/tiers/backer/badge.svg?label<span class="o">=</span>backer<span class="p">&amp;</span><span class="nv">color</span><span class="o">=</span>brightgreen<span class="o">)](</span>https://opencollective.com/gitea<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Overall gitea and drone is really amazing and quite impressed with it, especially from the low memory footprint and that its so easy to work with.</p>

<h2>Resources</h2>

<p>Have a look at this for more resources:</p>

<p><strong>Docs:</strong></p>

<ul>
<li><a href="https://github.com/drone/drone">https://github.com/drone/drone</a></li>
<li><a href="http://plugins.drone.io/drone-plugins/drone-docker/">http://plugins.drone.io/drone-plugins/drone-docker/</a></li>
<li><a href="https://docs.drone.io/reference/server/drone-user-create/">https://docs.drone.io/reference/server/drone-user-create/</a></li>
<li><a href="https://docs.gitea.io/en-us/install-with-docker/">https://docs.gitea.io/en-us/install-with-docker/</a></li>
</ul>


<p><strong>Examples:</strong></p>

<ul>
<li><a href="https://hackernoon.com/build-your-own-ci-cd-pipeline-with-drone-e43d7190989b">https://hackernoon.com/build-your-own-ci-cd-pipeline-with-drone-e43d7190989b</a></li>
<li><a href="https://github.com/drone-demos/drone-with-python">https://github.com/drone-demos/drone-with-python</a></li>
<li><a href="https://github.com/drone/awesome-drone">https://github.com/drone/awesome-drone</a></li>
<li><a href="https://github.com/juliantellez/drone-ci-pipeline">https://github.com/juliantellez/drone-ci-pipeline</a></li>
<li><a href="https://github.com/sguter90/docker-compose-gitea">https://github.com/sguter90/docker-compose-gitea</a></li>
<li><a href="https://gist.github.com/joffilyfe/1a99250cb74bb75e29cbe8d6ca8ceedb">https://gist.github.com/joffilyfe/1a99250cb74bb75e29cbe8d6ca8ceedb</a></li>
<li><a href="https://florian-latifi.at/2018/02/21/using-drone-to-build-and-deploy-a-jekyll-site/">https://florian-latifi.at/2018/02/21/using-drone-to-build-and-deploy-a-jekyll-site/</a></li>
<li><a href="https://angristan.xyz/host-your-own-ci-cd-server-with-drone/">https://angristan.xyz/host-your-own-ci-cd-server-with-drone/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Small Golang Docker Containers]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/03/build-small-golang-docker-containers/"/>
    <updated>2019-04-03T08:24:08-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/03/build-small-golang-docker-containers</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55478306-aabb0600-561b-11e9-9cc6-730fadb4beeb.png" alt="" /></p>

<p>In this tutorial I will show you how to build really small docker containers for golang applications. And I mean the difference between 310MB down to 2MB</p>

<h2>But Alpine..</h2>

<p>So we thinking lets go with alpine right? Yeah sure lets build a small, app running on go with alpine.</p>

<p>Our application code:</p>

<figure class='code'><figcaption><span>app.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;math/rand&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">lekkewords</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;dog&quot;</span><span class="p">,</span> <span class="s">&quot;cat&quot;</span><span class="p">,</span> <span class="s">&quot;fish&quot;</span><span class="p">,</span> <span class="s">&quot;giraffe&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;moo&quot;</span><span class="p">,</span> <span class="s">&quot;spider&quot;</span><span class="p">,</span> <span class="s">&quot;lion&quot;</span><span class="p">,</span> <span class="s">&quot;apple&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;tree&quot;</span><span class="p">,</span> <span class="s">&quot;moon&quot;</span><span class="p">,</span> <span class="s">&quot;snake&quot;</span><span class="p">,</span> <span class="s">&quot;mountain lion&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;trooper&quot;</span><span class="p">,</span> <span class="s">&quot;burger&quot;</span><span class="p">,</span> <span class="s">&quot;nasa&quot;</span><span class="p">,</span> <span class="s">&quot;yes&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">rand</span><span class="p">.</span><span class="nx">Seed</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">UnixNano</span><span class="p">())</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">zelength</span> <span class="kt">int</span> <span class="p">=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">lekkewords</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">indexnum</span> <span class="kt">int</span> <span class="p">=</span> <span class="nx">rand</span><span class="p">.</span><span class="nx">Intn</span><span class="p">(</span><span class="nx">zelength</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">word</span> <span class="o">:=</span> <span class="nx">lekkewords</span><span class="p">[</span><span class="nx">indexnum</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Number of words:&quot;</span><span class="p">,</span> <span class="nx">zelength</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Selected index number:&quot;</span><span class="p">,</span> <span class="nx">indexnum</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Selected word is:&quot;</span><span class="p">,</span> <span class="nx">word</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our Dockerfile:</p>

<figure class='code'><figcaption><span>Dockerfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='docker'><span class='line'><span class="k">FROM</span> golang:alpine
</span><span class='line'>
</span><span class='line'><span class="k">WORKDIR</span> <span class="nv">$GOPATH</span>/src/mylekkepackage/mylekkeapp/
</span><span class='line'>COPY app.go .
</span><span class='line'><span class="k">RUN</span> go build -o /go/app
</span><span class='line'>
</span><span class='line'><span class="k">CMD</span> <span class="o">[</span><span class="s2">&quot;/go/app&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s package our app to an image:</p>

<figure class='code'><figcaption><span>Dockerfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='docker'><span class='line'>❯ docker build -t mygolangapp:using-alpine .
</span></code></pre></td></tr></table></div></figure>


<p>Inspect the size of our image, as you can see it being <strong>310MB</strong></p>

<figure class='code'><figcaption><span>Dockerfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='docker'><span class='line'>❯ docker images <span class="s2">&quot;mygolangapp:*&quot;</span>
</span><span class='line'>REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE
</span><span class='line'>mygolangapp         using-alpine        eea1d7bde218        About a minute ago   310MB
</span></code></pre></td></tr></table></div></figure>


<p>Just make sure it actually works:</p>

<figure class='code'><figcaption><span>Dockerfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='docker'><span class='line'>❯ docker run mygolangapp:using-alpine
</span><span class='line'>Number of words: <span class="m">16</span>
</span><span class='line'>Selected index number: <span class="m">11</span>
</span><span class='line'>Selected word is: mountain lion
</span></code></pre></td></tr></table></div></figure>


<p>But for something just returning random selected text, 310MB is a bit crazy.</p>

<h2>Multi Stage Builds</h2>

<p>As Go binaries are self-contained, we can make use of docker&rsquo;s multi stage builds, where we can build our application on alpine and use the binary on a scratch image:</p>

<p>Our multi stage Dockerfile:</p>

<figure class='code'><figcaption><span>Dockerfile.mult</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='docker'><span class='line'><span class="k">FROM</span> golang:alpine AS builder
</span><span class='line'>
</span><span class='line'><span class="k">WORKDIR</span> <span class="nv">$GOPATH</span>/src/mylekkepackage/mylekkeapp/
</span><span class='line'>COPY app.go .
</span><span class='line'><span class="k">RUN</span> go build -o /go/app
</span><span class='line'>
</span><span class='line'><span class="k">FROM</span> scratch
</span><span class='line'>
</span><span class='line'>COPY --from<span class="o">=</span>builder /go/app /go/app
</span><span class='line'>
</span><span class='line'><span class="k">CMD</span> <span class="o">[</span><span class="s2">&quot;/go/app&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Build it:</p>

<figure class='code'><figcaption><span>Dockerfile.mult</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='docker'><span class='line'>❯ docker build -t mygolangapp:using-multistage -f Dockerfile.multi .
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the image is only <strong>2.01MB</strong>, say w000t!</p>

<figure class='code'><figcaption><span>Dockerfile.mult</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='docker'><span class='line'>❯ docker images <span class="s2">&quot;mygolangapp:*&quot;</span>
</span><span class='line'>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
</span><span class='line'>mygolangapp         using-multistage    31474c61ba5b        <span class="m">15</span> seconds ago      2.01MB
</span><span class='line'>mygolangapp         using-alpine        eea1d7bde218        <span class="m">2</span> minutes ago       310MB
</span></code></pre></td></tr></table></div></figure>


<p>Run the app:</p>

<figure class='code'><figcaption><span>Dockerfile.mult</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='docker'><span class='line'>❯ docker run mygolangapp:using-multistage
</span><span class='line'>Number of words: <span class="m">16</span>
</span><span class='line'>Selected index number: <span class="m">5</span>
</span><span class='line'>Selected word is: spider
</span></code></pre></td></tr></table></div></figure>


<h2>Resources</h2>

<p>Source code for this demonstration can be found at <a href="https://github.com/ruanbekker/golang-build-small-images">github.com/ruanbekker/golang-build-small-images</a></p>

<p><img src="https://user-images.githubusercontent.com/567298/55478904-236e9200-561d-11e9-9382-f31b25a9ae03.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Secure Your Elasticsearch Cluster With Basic Auth Using Nginx and SSL From Letsencrypt]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/02/secure-your-elasticsearch-cluster-with-basic-auth-using-nginx/"/>
    <updated>2019-04-02T14:55:58-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/02/secure-your-elasticsearch-cluster-with-basic-auth-using-nginx</id>
    <content type="html"><![CDATA[<p>In this tutorial we will setup a reverse proxy using nginx to translate and load balance traffic through to our elasticsearch nodes. We will also protect our elasticsearch cluster with basic auth and use letsencrypt to retrieve free ssl certificates.</p>

<p>We want to allow certain requests to be bypassed from authentication such as getting status from the cluster and certain requests we want to enforce authentication, such as indexing and deleting data.</p>

<h2>Install Nginx:</h2>

<p>Install nginx and the dependency package to create basic auth:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt install nginx apache2-utils -y
</span></code></pre></td></tr></table></div></figure>


<h2>Configure Nginx for Reverse Proxy</h2>

<p>We want to access our nginx proxy on port 80: <code>0.0.0.0:80</code> and the requests should be proxied through to elasticsearch private addresses: <code>10.0.0.10:9200</code> and <code>10.0.0.11:9200</code>. Traffic will be load balanced between our 2 nodes.</p>

<p>Edit the main nginx configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim /etc/nginx/nginx.conf
</span></code></pre></td></tr></table></div></figure>


<p>and populate the information as shown below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>user www-data<span class="p">;</span>
</span><span class='line'>worker_processes auto<span class="p">;</span>
</span><span class='line'>pid /run/nginx.pid<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>events <span class="o">{</span>
</span><span class='line'>  worker_connections 1024<span class="p">;</span>
</span><span class='line'>  <span class="c"># multi_accept on;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>http <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># basic Settings</span>
</span><span class='line'>  sendfile on<span class="p">;</span>
</span><span class='line'>  tcp_nopush on<span class="p">;</span>
</span><span class='line'>  tcp_nodelay on<span class="p">;</span>
</span><span class='line'>  keepalive_timeout 65<span class="p">;</span>
</span><span class='line'>  types_hash_max_size 2048<span class="p">;</span>
</span><span class='line'>  include /etc/nginx/mime.types<span class="p">;</span>
</span><span class='line'>  default_type application/octet-stream<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># ssl settings</span>
</span><span class='line'>  ssl_protocols TLSv1 TLSv1.1 TLSv1.2<span class="p">;</span>
</span><span class='line'>  ssl_prefer_server_ciphers on<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># logging settings</span>
</span><span class='line'>  access_log /var/log/nginx/access.log<span class="p">;</span>
</span><span class='line'>  error_log /var/log/nginx/error.log<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># gzip settings</span>
</span><span class='line'>  gzip on<span class="p">;</span>
</span><span class='line'>  gzip_disable <span class="s2">&quot;msie6&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># virtual host configs</span>
</span><span class='line'>  include /etc/nginx/conf.d/*.conf<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, edit the virtual host config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim /etc/nginx/conf.d/elasticsearch.conf
</span></code></pre></td></tr></table></div></figure>


<p>And populate the following config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># https://gist.github.com/sahilsk/b16cb51387847e6c3329</span>
</span><span class='line'>
</span><span class='line'>upstream elasticsearch <span class="o">{</span>
</span><span class='line'>    <span class="c"># define your es nodes</span>
</span><span class='line'>    server 10.0.0.10:9200<span class="p">;</span>
</span><span class='line'>    server 10.0.0.11:9200<span class="p">;</span>
</span><span class='line'>    <span class="c"># persistent http connections</span>
</span><span class='line'>    <span class="c"># https://www.elastic.co/blog/playing-http-tricks-nginx</span>
</span><span class='line'>    keepalive 15<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>server <span class="o">{</span>
</span><span class='line'>  listen 80<span class="p">;</span>
</span><span class='line'>  server_name elasticsearch.domain.com<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  auth_basic <span class="s2">&quot;server auth&quot;</span><span class="p">;</span>
</span><span class='line'>  auth_basic_user_file /etc/nginx/passwords<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  location / <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># deny node shutdown api</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="nv">$request_filename</span> ~ <span class="s2">&quot;_shutdown&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> 403<span class="p">;</span>
</span><span class='line'>      <span class="nb">break</span><span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    proxy_pass http://elasticsearch<span class="p">;</span>
</span><span class='line'>    proxy_http_version 1.1<span class="p">;</span>
</span><span class='line'>    proxy_set_header Connection <span class="s2">&quot;Keep-Alive&quot;</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header Proxy-Connection <span class="s2">&quot;Keep-Alive&quot;</span><span class="p">;</span>
</span><span class='line'>    proxy_redirect off<span class="p">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">location</span> <span class="o">=</span> / <span class="o">{</span>
</span><span class='line'>    proxy_pass http://elasticsearch<span class="p">;</span>
</span><span class='line'>    proxy_http_version 1.1<span class="p">;</span>
</span><span class='line'>    proxy_set_header Connection <span class="s2">&quot;Keep-Alive&quot;</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header Proxy-Connection <span class="s2">&quot;Keep-Alive&quot;</span><span class="p">;</span>
</span><span class='line'>    proxy_redirect off<span class="p">;</span>
</span><span class='line'>    auth_basic <span class="s2">&quot;off&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  location ~* ^<span class="o">(</span>/_cluster/health<span class="p">|</span>/_cat/health<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    proxy_pass http://elasticsearch<span class="p">;</span>
</span><span class='line'>    proxy_http_version 1.1<span class="p">;</span>
</span><span class='line'>    proxy_set_header Connection <span class="s2">&quot;Keep-Alive&quot;</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header Proxy-Connection <span class="s2">&quot;Keep-Alive&quot;</span><span class="p">;</span>
</span><span class='line'>    proxy_redirect off<span class="p">;</span>
</span><span class='line'>    auth_basic <span class="s2">&quot;off&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Set your username and password to protect your endpoint:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>htpasswd -c /etc/nginx/passwords admin
</span></code></pre></td></tr></table></div></figure>


<p>Enable nginx on boot and restart the process:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>systemctl <span class="nb">enable </span>nginx
</span><span class='line'><span class="nv">$ </span>systemctl restart nginx
</span></code></pre></td></tr></table></div></figure>


<h2>Test it</h2>

<p>Now make requests to elasticsearch via your nginx reverse proxy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -H <span class="s1">&#39;Content-Type: application/json&#39;</span> -u <span class="s1">&#39;admin:admin&#39;</span> http://myproxy.domain.com/_cat/indices?v
</span><span class='line'>health status index       uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>green  open   first-index 1o6yM7tCSqagqoeihKM7_g   <span class="m">5</span>   <span class="m">1</span>          <span class="m">3</span>            <span class="m">0</span>     40.6kb         20.3kb
</span></code></pre></td></tr></table></div></figure>


<h2>Letsencrypt SSL Certificates</h2>

<p>Add free SSL Certificates to your reverse proxy. Install certbot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt-get update
</span><span class='line'><span class="nv">$ </span>apt-get install software-properties-common -y
</span><span class='line'><span class="nv">$ </span>add-apt-repository universe
</span><span class='line'><span class="nv">$ </span>add-apt-repository ppa:certbot/certbot
</span><span class='line'><span class="nv">$ </span>apt-get update
</span><span class='line'><span class="nv">$ </span>apt-get install certbot python-certbot-nginx -y
</span></code></pre></td></tr></table></div></figure>


<p>Request a Certificate for your domain:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>certbot --manual certonly -d myproxy.domain.com -m my@email.com --preferred-challenges dns --agree-tos
</span><span class='line'>
</span><span class='line'>Obtaining a new certificate
</span><span class='line'>Performing the following challenges:
</span><span class='line'>dns-01 challenge <span class="k">for</span> myproxy.domain.com
</span></code></pre></td></tr></table></div></figure>


<p>You will be prompted to make a dns change, since we requested the dns challenge. While this screen is here, we can go our dns provider and make the TXT record change as shown below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Please deploy a DNS TXT record under the name
</span><span class='line'>_acme-challenge.myproxy.domain.com with the following value:
</span><span class='line'>
</span><span class='line'>xLP4y_YJvdAK7_aZMJ50gkudTDeIC3rX0x83aNJctGw
</span><span class='line'>
</span><span class='line'>Before continuing, verify the record is deployed.
</span><span class='line'>Press Enter to Continue
</span><span class='line'>Waiting <span class="k">for</span> verification...
</span><span class='line'>Cleaning up challenges
</span><span class='line'>
</span><span class='line'>IMPORTANT NOTES:
</span><span class='line'> - Congratulations! Your certificate and chain have been saved at:
</span><span class='line'>   /etc/letsencrypt/live/myproxy.domain.com/fullchain.pem
</span><span class='line'>   Your key file has been saved at:
</span><span class='line'>   /etc/letsencrypt/live/myproxy.domain.com/privkey.pem
</span><span class='line'>   Your cert will expire on 2019-07-01. To obtain a new or tweaked
</span><span class='line'>   version of this certificate in the future, simply run certbot
</span><span class='line'>   again. To non-interactively renew *all* of your certificates, run
</span><span class='line'>   <span class="s2">&quot;certbot renew&quot;</span>
</span><span class='line'> - If you like Certbot, please consider supporting our work by:
</span><span class='line'>
</span><span class='line'>   Donating to ISRG / Let<span class="err">&#39;</span>s Encrypt:   https://letsencrypt.org/donate
</span><span class='line'>   Donating to EFF:                    https://eff.org/donate-le
</span></code></pre></td></tr></table></div></figure>


<h2>Update Nginx Config</h2>

<p>Now that we have our ssl certificates, we need to update our nginx config to enable ssl, redirect http to https and point the ssl certificates and ssl private keys to the certificates that we retrieved from letsencrypt.</p>

<p>Open up the virtual host nginx configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim /etc/nginx/conf.d/elasticsearch.conf
</span></code></pre></td></tr></table></div></figure>


<p>Update the config like the one below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>upstream elasticsearch <span class="o">{</span>
</span><span class='line'>    server 10.0.0.10:9200<span class="p">;</span>
</span><span class='line'>    server 10.0.0.11:9200<span class="p">;</span>
</span><span class='line'>    keepalive 15<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>server <span class="o">{</span>
</span><span class='line'>  listen 80<span class="p">;</span>
</span><span class='line'>  server_name myproxy.domain.com<span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="m">301</span> https://<span class="nv">$host$request_uri</span><span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>server <span class="o">{</span>
</span><span class='line'>  listen <span class="m">443</span> ssl<span class="p">;</span>
</span><span class='line'>  server_name myproxy.domain.com<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  ssl_certificate /etc/letsencrypt/live/myproxy.domain.com/fullchain.pem<span class="p">;</span>
</span><span class='line'>  ssl_certificate_key /etc/letsencrypt/live/myproxy.domain.com/privkey.pem<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  auth_basic <span class="s2">&quot;server auth&quot;</span><span class="p">;</span>
</span><span class='line'>  auth_basic_user_file /etc/nginx/passwords<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  location ^~ /.well-known/acme-challenge/ <span class="o">{</span>
</span><span class='line'>    auth_basic off<span class="p">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  location / <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># deny node shutdown api</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="nv">$request_filename</span> ~ <span class="s2">&quot;_shutdown&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> 403<span class="p">;</span>
</span><span class='line'>      <span class="nb">break</span><span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    proxy_pass http://elasticsearch<span class="p">;</span>
</span><span class='line'>    proxy_http_version 1.1<span class="p">;</span>
</span><span class='line'>    proxy_set_header Connection <span class="s2">&quot;Keep-Alive&quot;</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header Proxy-Connection <span class="s2">&quot;Keep-Alive&quot;</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header X-Forwarded-For <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header X-Forwarded-Proto <span class="nv">$scheme</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header X-Real-IP <span class="nv">$remote_addr</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header Host <span class="nv">$http_host</span><span class="p">;</span>
</span><span class='line'>    proxy_redirect off<span class="p">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">location</span> <span class="o">=</span> / <span class="o">{</span>
</span><span class='line'>    proxy_pass http://elasticsearch<span class="p">;</span>
</span><span class='line'>    proxy_http_version 1.1<span class="p">;</span>
</span><span class='line'>    proxy_set_header Connection <span class="s2">&quot;Keep-Alive&quot;</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header Proxy-Connection <span class="s2">&quot;Keep-Alive&quot;</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header X-Forwarded-For <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header X-Forwarded-Proto <span class="nv">$scheme</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header X-Real-IP <span class="nv">$remote_addr</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header Host <span class="nv">$http_host</span><span class="p">;</span>
</span><span class='line'>    proxy_redirect off<span class="p">;</span>
</span><span class='line'>    auth_basic <span class="s2">&quot;off&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  location ~* ^<span class="o">(</span>/_cluster/health<span class="p">|</span>/_cat/health<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    proxy_pass http://elasticsearch<span class="p">;</span>
</span><span class='line'>    proxy_http_version 1.1<span class="p">;</span>
</span><span class='line'>    proxy_set_header Connection <span class="s2">&quot;Keep-Alive&quot;</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header Proxy-Connection <span class="s2">&quot;Keep-Alive&quot;</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header X-Forwarded-For <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header X-Forwarded-Proto <span class="nv">$scheme</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header X-Real-IP <span class="nv">$remote_addr</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header Host <span class="nv">$http_host</span><span class="p">;</span>
</span><span class='line'>    proxy_redirect off<span class="p">;</span>
</span><span class='line'>    auth_basic <span class="s2">&quot;off&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Restart the nginx process:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>systemctl restart nginx
</span></code></pre></td></tr></table></div></figure>


<h2>Test the Nginx Proxy with SSL</h2>

<p>Test the proxy with HTTP so that we can see that our nginx config redirects us to <a href="HTTPS:">HTTPS:</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -iL -u <span class="s1">&#39;admin:admin&#39;</span> http://myproxy.domain.com/_cat/nodes?v
</span><span class='line'>HTTP/1.1 <span class="m">301</span> Moved Permanently
</span><span class='line'>Server: nginx/1.14.0 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span><span class='line'>Date: Tue, <span class="m">02</span> Apr <span class="m">2019</span> 21:40:09 GMT
</span><span class='line'>Content-Type: text/html
</span><span class='line'>Content-Length: 194
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Location: https://myproxy.domain.com/_cat/nodes?v
</span><span class='line'>
</span><span class='line'>HTTP/1.1 <span class="m">200</span> OK
</span><span class='line'>Server: nginx/1.14.0 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span><span class='line'>Date: Tue, <span class="m">02</span> Apr <span class="m">2019</span> 21:40:10 GMT
</span><span class='line'>Content-Type: text/plain<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>UTF-8
</span><span class='line'>Content-Length: 276
</span><span class='line'>Connection: keep-alive
</span><span class='line'>
</span><span class='line'>ip            heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name
</span><span class='line'>10.0.0.10               <span class="m">40</span>          <span class="m">97</span>   <span class="m">3</span>    0.15    0.10     0.08 mdi       -      Lq9P7eP
</span><span class='line'>10.0.0.11               <span class="m">44</span>          <span class="m">96</span>   <span class="m">3</span>    0.21    0.10     0.09 mdi       *      F5edOwK
</span></code></pre></td></tr></table></div></figure>


<p>Test the proxy with <a href="HTTPS:">HTTPS:</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -i -u <span class="s1">&#39;admin:admin&#39;</span> https://myproxy.domain.com/_cat/nodes?v
</span><span class='line'>HTTP/1.1 <span class="m">200</span> OK
</span><span class='line'>Server: nginx/1.14.0 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span><span class='line'>Date: Tue, <span class="m">02</span> Apr <span class="m">2019</span> 21:40:22 GMT
</span><span class='line'>Content-Type: text/plain<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>UTF-8
</span><span class='line'>Content-Length: 276
</span><span class='line'>Connection: keep-alive
</span><span class='line'>
</span><span class='line'>ip            heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name
</span><span class='line'>10.0.0.10               <span class="m">44</span>          <span class="m">96</span>   <span class="m">4</span>    0.18    0.10     0.09 mdi       *      F5edOwK
</span><span class='line'>10.0.0.11               <span class="m">39</span>          <span class="m">97</span>   <span class="m">5</span>    0.13    0.09     0.08 mdi       -      Lq9P7eP
</span></code></pre></td></tr></table></div></figure>


<p>Setup a cronjob to auto renew the certificates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>crontab -e
</span></code></pre></td></tr></table></div></figure>


<p>Populate the following line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="m">6</span> 1,13 * * * /usr/bin/certbot renew --post-hook <span class="s2">&quot;systemctl restart nginx&quot;</span> --quiet
</span></code></pre></td></tr></table></div></figure>


<h2>Resources:</h2>

<ul>
<li><a href="https://certbot.eff.org/lets-encrypt/ubuntuxenial-nginx.html">https://certbot.eff.org/lets-encrypt/ubuntuxenial-nginx.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Kibana Dashboards for Nginx Log Data to Understand the Behavior]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/02/setup-kibana-dashboards-for-nginx-log-data-to-understand-the-behavior/"/>
    <updated>2019-04-02T12:34:18-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/02/setup-kibana-dashboards-for-nginx-log-data-to-understand-the-behavior</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55418811-b8b54c00-5573-11e9-810d-d244d27c4fb3.png" alt="kibana" /></p>

<p>In this tutorial we will setup a Basic Kibana Dashboard for a Web Server that is running a Blog on Nginx.</p>

<h2>What do we want to achieve?</h2>

<p>We will setup common visualizations to give us an idea on how our blog/website is doing.</p>

<p>In some situations we need to create visualizations to understand the behavior of our log data in order to answer these type of questions:</p>

<table>
<thead>
<tr>
<th> <strong>Number</strong> </th>
<th> <strong>Scenario</strong>                                                         </th>
</tr>
</thead>
<tbody>
<tr>
<td> 1          </td>
<td> Geographical map to see where people are connecting from             </td>
</tr>
<tr>
<td> 2          </td>
<td> Piechart that represents the percentage of cities accessing my blog  </td>
</tr>
<tr>
<td> 3          </td>
<td> Top 10 Most Accessed Pages                                           </td>
</tr>
<tr>
<td> 4          </td>
<td> Top 5 HTTP Status Codes                                              </td>
</tr>
<tr>
<td> 5          </td>
<td> Top 10 Pages that returned 404 Responses                             </td>
</tr>
<tr>
<td> 6          </td>
<td> The Top 10 User Agents                                               </td>
</tr>
<tr>
<td> 7          </td>
<td> Timeseries: Status Codes Over Time                                   </td>
</tr>
<tr>
<td> 8          </td>
<td> Timeseries: Successfull Website Hits over time                       </td>
</tr>
<tr>
<td> 9          </td>
<td> Counter with Website Hits                                            </td>
</tr>
<tr>
<td> 10         </td>
<td> Average Bytes Returned                                               </td>
</tr>
<tr>
<td> 11         </td>
<td> Tag Cloud with the City Names that Accessed my Blog                  </td>
</tr>
</tbody>
</table>


<h2>Pre-Requirements</h2>

<p>I am consuming my nginx access logs with filebeat and shipping them to elasticsearch. You can check out <a href="https://blog.ruanbekker.com/blog/2019/03/27/ship-your-logs-to-elasticsearch-with-filebeat/">this blogpost</a> to set that up.</p>

<p>The GeoIP Processor plugin is installed on elasticsearch to enrich our data with geographical information. You can check out <a href="https://blog.ruanbekker.com/blog/2018/09/12/using-the-geoip-processor-plugin-with-elasticsearch-to-enrich-your-location-based-data/">this blogpost</a> to setup geoip.</p>

<p>You can setup <a href="https://blog.ruanbekker.com/blog/2018/04/29/running-a-3-node-elasticsearch-cluster-with-docker-compose-on-your-laptop-for-testing/">Kibana and Elasticsearch on Docker</a> or setup a <a href="https://blog.ruanbekker.com/blog/2019/04/02/setup-a-5-node-highly-available-elasticsearch-cluster/">5 Node Elasticsearch Cluster</a></p>

<h2>Setup Kibana Visulizations</h2>

<p>Head over to Kibana, make sure that you have added the <code>filebeat-*</code> index patterns. If not, head over to Management -> Index Patterns -> Create Index -> Enter filebeat-* as you Index Pattern, select Next, select your @timestamp as your timestamp field, select create.</p>

<p>Now from the visualization section we will add 11 Visualizations. Everytime that you create a visualization, make sure that you select filebeat as your pattern (thats if you are using filebeat).</p>

<p>When configuring your visualization it will look like the configuration box from below:</p>

<p><img width="337" alt="image" src="https://user-images.githubusercontent.com/567298/55053831-1aeaea00-5066-11e9-93cf-edfd2ac98e44.png"></p>

<h2>Geomap: Map to see where people are connecting from</h2>

<p><img width="728" alt="kibana geomap" src="https://user-images.githubusercontent.com/567298/55258476-9cf83000-526b-11e9-8560-014098c435ee.png"></p>

<p>Select New Visualization: Coordinate Map</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  -&gt; Metrics, Value: Count. 
</span><span class='line'>     Buckets, Geo Coordinates, Aggregation: Geohash, 
</span><span class='line'>     Field: nginx.access.geoip.location. </span></code></pre></td></tr></table></div></figure>


<p>Save the visualization, in my case Nginx:GeoMap:Filebeat</p>

<h2>Piechart: Cities</h2>

<p>This can give us a quick overview on the percentage of people interested in our website grouped per city.</p>

<p><img width="688" alt="image" src="https://user-images.githubusercontent.com/567298/55258529-c44efd00-526b-11e9-900a-e93ed7eed11e.png"></p>

<p>Select New Visualization, Pie</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> -&gt; Metrics: Slice Size, Aggregation: Count
</span><span class='line'> -&gt; Buckets: Split Slices, 
</span><span class='line'>    Aggregation: Terms, Field: nginx.access.geoip.city_name, 
</span><span class='line'>    Order by: metric: count, 
</span><span class='line'>    Order: Descending, Size: 20</span></code></pre></td></tr></table></div></figure>


<p>Save Visualization.</p>

<h2>Top 10 Accessed Pages</h2>

<p>Great for seeing which page is popular, and Kibana makes it easy to see which page is doing good over a specific time.</p>

<p><img width="750" alt="image" src="https://user-images.githubusercontent.com/567298/55258583-f2ccd800-526b-11e9-98b8-4f1da917cb52.png"></p>

<p>New Visualization: Vertical</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  -&gt; Metrics: Y-Axis, Aggregation: Count
</span><span class='line'>  -&gt; Buckets: X-Axis, Aggregation: Terms, 
</span><span class='line'>     Field: nginx.access.url, 
</span><span class='line'>     Ordery by: Metric count, 
</span><span class='line'>     Order: Descending, Size 10</span></code></pre></td></tr></table></div></figure>


<p>I would like to remove <code>/rss</code> and <code>/</code> from my results, so in the search box:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NOT (nginx.access.url:"/" OR nginx.access.url:"/rss/" OR nginx.access.url:"/subscribe/" OR nginx.access.url:*.txt)</span></code></pre></td></tr></table></div></figure>


<p>Save Visualization.</p>

<h2>Top 5 HTTP Status Codes</h2>

<p>A Grouping of Status Codes (You should see more 200&rsquo;s) but its quick to identify when 404&rsquo;s spike etc.</p>

<p><img width="692" alt="image" src="https://user-images.githubusercontent.com/567298/55258695-44756280-526c-11e9-887c-bd58e9b25750.png"></p>

<p>Select new visualization: Vertical Bar</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  -&gt; Metrics: Y-Axis, Aggregation: Count
</span><span class='line'>  -&gt; Buckets: X-Axis, Aggregation: Terms, 
</span><span class='line'>     Field: nginx.access.response_code, 
</span><span class='line'>     Ordery by: Metric count, 
</span><span class='line'>     Order: Descending, Size 5</span></code></pre></td></tr></table></div></figure>


<p>Save Visualization</p>

<h2>Top 404 Pages</h2>

<p>So when people are requesting pages that does not exist, it could most probably be bots trying to attack your site, or trying to gain access etc. This is a great view to see which ones are they trying and then you can handle it from there.</p>

<p><img width="699" alt="image" src="https://user-images.githubusercontent.com/567298/55259089-5b688480-526d-11e9-963d-936a61285507.png"></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  -&gt; Metrics: Y-Axis, Aggregation: Count
</span><span class='line'>  -&gt; Buckets: X-Axis, Aggregation: Terms, 
</span><span class='line'>     Terms, Field: nginx.access.url, 
</span><span class='line'>     Order by: Metric count, 
</span><span class='line'>     Order: Descending, Size 20</span></code></pre></td></tr></table></div></figure>


<h2>Top 10 User Agents</h2>

<p>Some insights to see the top 10 browsers.</p>

<p><img width="611" alt="image" src="https://user-images.githubusercontent.com/567298/55258763-74246a80-526c-11e9-9873-da2766e4a518.png"></p>

<p>New Visualization: Data Table</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  -&gt; Metrics: Y-Axis, Aggregation: Count
</span><span class='line'>  -&gt; Buckets: Split Rows, 
</span><span class='line'>     Aggregation: Terms, 
</span><span class='line'>     Field: nginx.access.user_agent.name, 
</span><span class='line'>     Ordery by: Metric count, 
</span><span class='line'>     Order: Descending, Size 10</span></code></pre></td></tr></table></div></figure>


<p>Save Visualization</p>

<h2>Timeseries: Status Codes over Time</h2>

<p>With timeseries data its great to see when there was a spike in status codes, when you identify the time, you can further investigate why that happened.</p>

<p>New Visualization: Timelion</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.es(index=filebeat*, timefield='@timestamp', q=nginx.access.response_code:200).label('OK'), .es(index=filebeat*, timefield='@timestamp', q=nginx.access.response_code:404).label('Page Not Found')</span></code></pre></td></tr></table></div></figure>


<h2>Timeseries: Successfull Website Hits over Time</h2>

<p>This is a good view to see how your website is serving traffic over time.</p>

<p><img width="734" alt="image" src="https://user-images.githubusercontent.com/567298/55258920-eac16800-526c-11e9-85ca-5ebff8978b2b.png"></p>

<p>New Visualization: Timelion</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.es(index=filebeat*, timefield='@timestamp', q=nginx.access.response_code:200).label('200')</span></code></pre></td></tr></table></div></figure>


<h2>Count Metric: Website Hits</h2>

<p>A counter to see the number of website hits over time.</p>

<p><img width="606" alt="image" src="https://user-images.githubusercontent.com/567298/55258980-17757f80-526d-11e9-8664-91afda3db62c.png"></p>

<p>New Visualization: Metric</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  -&gt; Search Query: fields.blog_name:sysadmins AND nginx.access.response_code:200
</span><span class='line'>  -&gt; Metrics: Y-Axis, Aggregation: Count</span></code></pre></td></tr></table></div></figure>


<h2>Average Bytes Transferred</h2>

<p>Line chart with the amount of bandwidth being transferred.</p>

<p><img width="677" alt="image" src="https://user-images.githubusercontent.com/567298/55259036-3c69f280-526d-11e9-90fe-0853d2c0313d.png"></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>New Visualization: Line
</span><span class='line'>
</span><span class='line'>-&gt; Metrics: Y-Axis, Aggregation: Average, Field: nginx.access.body_sent.bytes
</span><span class='line'>-&gt; Buckets: X-Axis, Aggregation: Date Histogram, Field: @timestamp</span></code></pre></td></tr></table></div></figure>


<h2>Tag Cloud with Most Popular Cities</h2>

<p>I&rsquo;ve used cities here, but its a nice looking visualization to group the most accessed fields. With server logs you can use this for the usernames failed in ssh attempts for example.</p>

<p><img width="646" alt="image" src="https://user-images.githubusercontent.com/567298/55259343-14c75a00-526e-11e9-88dd-7c3a3f396280.png"></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  -&gt; Metrics: Tag size, Aggregation: Count
</span><span class='line'>  -&gt; Buckets: Tags, 
</span><span class='line'>     Aggregation: Terms, 
</span><span class='line'>     Field: nginx.access.geoip.city_name, 
</span><span class='line'>     Ordery by: Metric count, 
</span><span class='line'>     Order: Descending, Size 10</span></code></pre></td></tr></table></div></figure>


<h2>Create the Dashboard</h2>

<p>Now that we have all our visualizations, lets build the dashboard that hosts all our visualizations.</p>

<p>Select Dashboard -> Create New Dashboard -> Add -> Select your visualizations -> Reorder and Save</p>

<p>The visualizations in my dashboard looks like this:</p>

<p><img width="1266" alt="image" src="https://user-images.githubusercontent.com/567298/55418811-b8b54c00-5573-11e9-810d-d244d27c4fb3.png"></p>

<p>This is a basic dashboard but its just enough so that you can get your hands dirty and build some awesome visualizations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a 5 Node Highly Available Elasticsearch Cluster]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/02/setup-a-5-node-highly-available-elasticsearch-cluster/"/>
    <updated>2019-04-02T05:05:19-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/02/setup-a-5-node-highly-available-elasticsearch-cluster</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/53352581-b3892f80-392b-11e9-9532-5db5cbfc8f1c.jpg" alt="elasticsearch" /></p>

<p>This is post 1 of my big collection of <strong><a href="https://blog.ruanbekker.com/blog/categories/elasticsearch-tutorials">elasticsearch-tutorials</a></strong> which includes, setup, index, management, searching, etc. More details at the bottom.</p>

<p>In this tutorial we will setup a <strong>5 node highly available elasticsearch cluster</strong> that will consist of 3 Elasticsearch Master Nodes and 2 Elasticsearch Data Nodes.</p>

<blockquote><p>&ldquo;Three master nodes is the way to start, but only if you&rsquo;re building a full cluster, which at minimum is 3 master nodes plus at least 2 data nodes.&rdquo;
 - <a href="https://discuss.elastic.co/t/should-dedicated-master-nodes-and-data-nodes-be-considered-separately/75093/14">https://discuss.elastic.co/t/should-dedicated-master-nodes-and-data-nodes-be-considered-separately/75093/14</a></p></blockquote>

<h2>The Overview:</h2>

<p>In short the responsibilites of the node types:</p>

<p><strong>Master Nodes</strong>: Master nodes are responsible for Cluster related tasks, creating / deleting indexes, tracking of nodes, allocate shards to nodes, etc.</p>

<p><strong>Data Nodes</strong>: Data nodes are responsible for hosting the actual shards that has the indexed data also handles data related operations like CRUD, search, and aggregations.</p>

<p>For more concepts of Elasticsearch, have a look at their <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started-concepts.html">basic-concepts</a> documentation.</p>

<p>Our Inventory will consist of:</p>

<p><strong>Master Nodes:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hostname: es-master-1, Private IP: 172.31.0.77
</span><span class='line'>Hostname: es-master-2, Private IP: 172.31.0.45
</span><span class='line'>Hostname: es-master-3, Private IP: 172.31.1.31</span></code></pre></td></tr></table></div></figure>


<p><strong>Data Nodes:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hostname: es-data-1, Private IP:172.31.2.30
</span><span class='line'>Hostname: es-data-2, Private IP:172.31.0.83</span></code></pre></td></tr></table></div></figure>


<p><strong>Reserved Volumes</strong> for Data Nodes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>es-data-1: 10GB assigned to /dev/vdb
</span><span class='line'>es-data-2: 10GB assigned to /dev/vdb</span></code></pre></td></tr></table></div></figure>


<p><strong>Authentication:</strong></p>

<p>Note that I have configured the bind address for elasticsearch to <code>0.0.0.0</code> using <code>network.host: 0.0.0.0</code> for this demonstration, but this means that if your server has a public ip address with no firewall rules or no auth, that anyone will be able to interact with your cluster.</p>

<p>This address will also be reachable for all nodes to see each other.</p>

<p>It&rsquo;s advisable do protect your endpoint, either with <a href="https://blog.ruanbekker.com/blog/2017/08/31/secure-your-access-to-kibana-5-and-elasticsearch-5-with-nginx-for-aws/">basic auth using nginx</a> which can be found in the embedded link, or using firewall rules to protect communication from the outside (depending on your setup)</p>

<h2>Setup the Elasticsearch Master Nodes</h2>

<p>The setup below how to provision a elasticsearch master node. Repeat this on node: <code>es-master-1</code>, <code>es-master-2</code>, <code>es-master-3</code></p>

<p>Set your hosts file for name resolution (if you don&rsquo;t have private dns in place):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat &gt; /etc/hosts &lt;&lt; EOF
</span><span class='line'>127.0.0.1 localhost
</span><span class='line'>172.31.0.77 es-master-1
</span><span class='line'>172.31.0.45 es-master-2
</span><span class='line'>172.31.1.31 es-master-3
</span><span class='line'>172.31.2.30 es-data-1
</span><span class='line'>172.31.0.83 es-data-2
</span><span class='line'>EOF</span></code></pre></td></tr></table></div></figure>


<p>Get the elasticsearch repositories, install the java development kit dependency and install elasticsearch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update && apt upgrade -y
</span><span class='line'>$ apt install software-properties-common python-software-properties apt-transport-https -y
</span><span class='line'>$ wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
</span><span class='line'>$ echo "deb https://artifacts.elastic.co/packages/6.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-6.x.list
</span><span class='line'>$ apt update
</span><span class='line'>$ apt install default-jdk -y
</span><span class='line'>$ apt install elasticsearch -y</span></code></pre></td></tr></table></div></figure>


<p>The elasticsearch config, before we get to the full example config, I just want to show a snippet of how you could split up logs and data.</p>

<p>Note that you can seperate your logging between data/logs like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># example of log splitting:
</span><span class='line'>...
</span><span class='line'>path:
</span><span class='line'>  logs: /var/log/elasticsearch
</span><span class='line'>  data: /var/data/elasticsearch
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Also, your data can be divided between paths:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># example of data paths:
</span><span class='line'>...
</span><span class='line'>path:
</span><span class='line'>  data:
</span><span class='line'>    - /mnt/elasticsearch_1
</span><span class='line'>    - /mnt/elasticsearch_2
</span><span class='line'>    - /mnt/elasticsearch_3
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Bootstrap the elasticsearch config with a cluster name (all the nodes should have the same cluster name), set the nodes as master <code>node.master: true</code> disable the <code>node.data</code> and specify that the cluster should at least have a minimum of 2 master nodes before it stops. This is used to prevent split brain.</p>

<p>To avoid a split brain, this setting should be set to a quorum of master-eligible nodes:
<code>(master_eligible_nodes / 2) + 1</code></p>

<p>The full example config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat &gt; /etc/elasticsearch/elasticsearch.yml &lt;&lt; EOF
</span><span class='line'>cluster.name: es-cluster
</span><span class='line'>node.name: \${HOSTNAME}
</span><span class='line'>node.master: true
</span><span class='line'>node.data: false
</span><span class='line'>path.logs: /var/log/elasticsearch
</span><span class='line'>bootstrap.memory_lock: true
</span><span class='line'>network.host: 0.0.0.0
</span><span class='line'>discovery.zen.minimum_master_nodes: 2
</span><span class='line'>discovery.zen.ping.unicast.hosts: ["es-master-1", "es-master-2", "es-master-3"]
</span><span class='line'>EOF</span></code></pre></td></tr></table></div></figure>


<p>Important settings for your elasticsearch cluster is described on their <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/system-config.html">docs</a>:</p>

<ul>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-configuration-memory.html">Disable swapping</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/file-descriptors.html">Increase file descriptors</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/vm-max-map-count.html">Ensure sufficient virtual memory</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/max-number-of-threads.html">Ensure sufficient threads</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/networkaddress-cache-ttl.html">JVM DNS cache settings</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/executable-jna-tmpdir.html">Temporary directory not mounted with noexec</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat &gt; /etc/default/elasticsearch &lt;&lt; EOF
</span><span class='line'>ES_STARTUP_SLEEP_TIME=5
</span><span class='line'>MAX_OPEN_FILES=65536
</span><span class='line'>MAX_LOCKED_MEMORY=unlimited
</span><span class='line'>EOF</span></code></pre></td></tr></table></div></figure>


<p>Ensure that pages are not swapped out to disk by requesting the JVM to lock the heap in memory by setting <code>LimitMEMLOCK=infinity</code>. Set the maxiumim file descriptor number for this process: <code>LimitNOFILE</code> and increase the number of threads using <code>LimitNPROC</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /usr/lib/systemd/system/elasticsearch.service
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>LimitMEMLOCK=infinity
</span><span class='line'>LimitNOFILE=65535
</span><span class='line'>LimitNPROC=4096
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Increase the limit on the number of open files descriptors to user elasticsearch of 65536 or higher</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat &gt; /etc/security/limits.conf &lt;&lt; EOF
</span><span class='line'>elasticsearch soft memlock unlimited
</span><span class='line'>elasticsearch hard memlock unlimited
</span><span class='line'>EOF</span></code></pre></td></tr></table></div></figure>


<p>Increase the value of the mmap counts as elasticsearch uses mmapfs directory to store its indices:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sysctl -w vm.max_map_count=262144</span></code></pre></td></tr></table></div></figure>


<p>For a permanent setting, update <code>vm.max_map_count</code> in <code>/etc/sysctl.conf</code> and run</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sysctl -p /etc/sysctl.conf </span></code></pre></td></tr></table></div></figure>


<p>Prepare the directories and set the ownership to elasticsearch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir /usr/share/elasticsearch/data
</span><span class='line'>$ chown -R elasticsearch:elasticsearch /usr/share/elasticsearch/data</span></code></pre></td></tr></table></div></figure>


<p>Reload the systemd daemon, enable and start elasticsearch</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl daemon-reload
</span><span class='line'>$ systemctl enable elasticsearch
</span><span class='line'>$ systemctl restart elasticsearch</span></code></pre></td></tr></table></div></figure>


<p>Once all 3 elasticsearch masters has been started, verify that they are listening: <code>netstat -tulpn | grep 9200</code> then look at the cluster health:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://127.0.0.1:9200/_cluster/health?pretty
</span><span class='line'>{
</span><span class='line'>  "cluster_name" : "es-cluster",
</span><span class='line'>  "status" : "green",
</span><span class='line'>  "timed_out" : false,
</span><span class='line'>  "number_of_nodes" : 3,
</span><span class='line'>  "number_of_data_nodes" : 0,
</span><span class='line'>  "active_primary_shards" : 0,
</span><span class='line'>  "active_shards" : 0,
</span><span class='line'>  "relocating_shards" : 0,
</span><span class='line'>  "initializing_shards" : 0,
</span><span class='line'>  "unassigned_shards" : 0,
</span><span class='line'>  "delayed_unassigned_shards" : 0,
</span><span class='line'>  "number_of_pending_tasks" : 0,
</span><span class='line'>  "number_of_in_flight_fetch" : 0,
</span><span class='line'>  "task_max_waiting_in_queue_millis" : 0,
</span><span class='line'>  "active_shards_percent_as_number" : 100.0
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Have a look at the nodes, you will see that the node.role for now shows <code>mi</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://127.0.0.1:9200/_cat/nodes?v
</span><span class='line'>ip          heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name
</span><span class='line'>10.163.68.8           11          80  18    0.28    0.14     0.09 mi        -      es-master-2
</span><span class='line'>10.163.68.5           14          80  14    0.27    0.18     0.11 mi        *      es-master-1
</span><span class='line'>10.163.68.4           15          79   6    0.62    0.47     0.18 mi        -      es-master-3</span></code></pre></td></tr></table></div></figure>


<h2>Setup the Elasticsearch Data Nodes</h2>

<p>Now that we have our 3 elasticsearch master nodes running, its time to provision the 2 elasticsearch data nodes. This setup needs to be repeated on both <code>es-data-1</code> and <code>es-data-2</code>.</p>

<p>Configure the hosts file for name resolution:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat &gt; /etc/hosts &lt;&lt; EOF
</span><span class='line'>127.0.0.1 localhost
</span><span class='line'>172.31.0.77 es-master-1
</span><span class='line'>172.31.0.45 es-master-2
</span><span class='line'>172.31.1.31 es-master-3
</span><span class='line'>172.31.2.30 es-data-1
</span><span class='line'>172.31.0.83 es-data-2
</span><span class='line'>EOF</span></code></pre></td></tr></table></div></figure>


<p>Get the elasticsearch repositories, install the java development kit dependency and install elasticsearch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update && apt upgrade -y
</span><span class='line'>$ apt install software-properties-common python-software-properties apt-transport-https -y
</span><span class='line'>$ wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
</span><span class='line'>$ echo "deb https://artifacts.elastic.co/packages/6.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-6.x.list
</span><span class='line'>$ apt update
</span><span class='line'>$ apt install default-jdk -y
</span><span class='line'>$ apt install elasticsearch -y</span></code></pre></td></tr></table></div></figure>


<p>Since we attached an extra disk to our data nodes, verify that you can see the disk:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ lsblk
</span><span class='line'>NAME   MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
</span><span class='line'>vda    253:0    0  25G  0 disk
</span><span class='line'>└─vda1 253:1    0  25G  0 part /
</span><span class='line'>vdb    253:16   0  10G  0 disk             &lt;----</span></code></pre></td></tr></table></div></figure>


<p>Provision the block device with xfs or anything else that you prefer, create the directory where elasticsearch data will reside, change the ownership that elasticsearch has permission to write/read, set the device on startup and mount the disk:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkfs.xfs /dev/vdb
</span><span class='line'>$ mkdir /data
</span><span class='line'>$ mkdir /data/nodes
</span><span class='line'>$ chown -R elasticsearch:elasticsearch /data
</span><span class='line'>$ chown -R elasticsearch:elasticsearch /data/nodes
</span><span class='line'>$ echo '/dev/vdb /data xfs defaults 0 0' &gt;&gt; /etc/fstab
</span><span class='line'>$ mount -a</span></code></pre></td></tr></table></div></figure>


<p>Verify that the disk is mounted:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ df -h
</span><span class='line'>Filesystem      Size  Used Avail Use% Mounted on
</span><span class='line'>udev            994M     0  994M   0% /dev
</span><span class='line'>tmpfs           201M  3.1M  197M   2% /run
</span><span class='line'>/dev/vda1        25G  1.8G   23G   8% /
</span><span class='line'>/dev/vdb         10G   33M   10G   1% /data</span></code></pre></td></tr></table></div></figure>


<p>Bootstrap the elasticsearch config with a cluster name, set the <code>node.name</code> to an identifier, in this case I will use the servers hostname, set the <code>node.master</code> to false as this will be data nodes, also enable these nodes as data nodes: <code>node.data: true</code>, configure the <code>path.data: /data</code> to the path that we configured, etc:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat &gt; /etc/elasticsearch/elasticsearch.yml &lt;&lt; EOF
</span><span class='line'>cluster.name: es-cluster
</span><span class='line'>node.name: \${HOSTNAME}
</span><span class='line'>node.master: false
</span><span class='line'>node.data: true
</span><span class='line'>path.data: /data
</span><span class='line'>path.logs: /var/log/elasticsearch
</span><span class='line'>bootstrap.memory_lock: true
</span><span class='line'>network.host: 0.0.0.0
</span><span class='line'>discovery.zen.minimum_master_nodes: 2
</span><span class='line'>discovery.zen.ping.unicast.hosts: ["es-master-1", "es-master-2", "es-master-3"]
</span><span class='line'>EOF</span></code></pre></td></tr></table></div></figure>


<p>Set a couple of important settings for your elasticsearch cluster is described on their <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/system-config.html">docs</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat &gt; /etc/default/elasticsearch &lt;&lt; EOF
</span><span class='line'>ES_STARTUP_SLEEP_TIME=5
</span><span class='line'>MAX_OPEN_FILES=65536
</span><span class='line'>MAX_LOCKED_MEMORY=unlimited
</span><span class='line'>EOF</span></code></pre></td></tr></table></div></figure>


<p>Disable swapping, increase the file descriptors and increase the maximum number of threads:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /usr/lib/systemd/system/elasticsearch.service
</span><span class='line'>[Service]
</span><span class='line'>LimitMEMLOCK=infinity
</span><span class='line'>LimitNOFILE=65535
</span><span class='line'>LimitNPROC=4096</span></code></pre></td></tr></table></div></figure>


<p>Also update them via limits.conf:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat &gt; /etc/security/limits.conf &lt;&lt; EOF
</span><span class='line'>elasticsearch soft memlock unlimited
</span><span class='line'>elasticsearch hard memlock unlimited
</span><span class='line'>EOF</span></code></pre></td></tr></table></div></figure>


<p>Reload the systemd daemon, enable and start elasticsearch. Allow it to start and check if the ports are listening with <code>netstat -tulpn | grep 9200</code>, then:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl daemon-reload
</span><span class='line'>$ systemctl enable elasticsearch
</span><span class='line'>$ systemctl restart elasticsearch</span></code></pre></td></tr></table></div></figure>


<p>Verify that everything works as expected, look at the cluster health and look at the status and number of nodes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://127.0.0.1:9200/_cluster/health?pretty
</span><span class='line'>{
</span><span class='line'>  "cluster_name" : "es-cluster",
</span><span class='line'>  "status" : "green",
</span><span class='line'>  "timed_out" : false,
</span><span class='line'>  "number_of_nodes" : 5,
</span><span class='line'>  "number_of_data_nodes" : 2,
</span><span class='line'>  "active_primary_shards" : 0,
</span><span class='line'>  "active_shards" : 0,
</span><span class='line'>  "relocating_shards" : 0,
</span><span class='line'>  "initializing_shards" : 0,
</span><span class='line'>  "unassigned_shards" : 0,
</span><span class='line'>  "delayed_unassigned_shards" : 0,
</span><span class='line'>  "number_of_pending_tasks" : 0,
</span><span class='line'>  "number_of_in_flight_fetch" : 0,
</span><span class='line'>  "task_max_waiting_in_queue_millis" : 0,
</span><span class='line'>  "active_shards_percent_as_number" : 100.0
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Look at the nodes api and you will see that we now have the extra 2 nodes showing up on <code>node.role</code> as <code>di</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://127.0.0.1:9200/_cat/nodes?v
</span><span class='line'>ip           heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name
</span><span class='line'>10.163.68.7             9          96   6    0.12    0.11     0.03 di        -      es-data-2
</span><span class='line'>10.163.68.5            10          80   2    0.20    0.09     0.08 mi        *      es-master-1
</span><span class='line'>10.163.68.11           12          96   9    0.12    0.09     0.03 di        -      es-data-1
</span><span class='line'>10.163.68.4            10          79   0    0.00    0.12     0.11 mi        -      es-master-3
</span><span class='line'>10.163.68.8            12          79   1    0.05    0.06     0.07 mi        -      es-master-2</span></code></pre></td></tr></table></div></figure>


<h2>Interact with Elasticsearch</h2>

<p>Let&rsquo;s interact with elasticsearch, the overview:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://127.0.0.1:9200
</span><span class='line'>{
</span><span class='line'>  "name" : "es-data-1",
</span><span class='line'>  "cluster_name" : "es-cluster",
</span><span class='line'>  "cluster_uuid" : "5BLs4sxsSEK-4OxlGnmlmw",
</span><span class='line'>  "version" : {
</span><span class='line'>    "number" : "6.7.0",
</span><span class='line'>    "build_flavor" : "default",
</span><span class='line'>    "build_type" : "deb",
</span><span class='line'>    "build_hash" : "8453f77",
</span><span class='line'>    "build_date" : "2019-03-21T15:32:29.844721Z",
</span><span class='line'>    "build_snapshot" : false,
</span><span class='line'>    "lucene_version" : "7.7.0",
</span><span class='line'>    "minimum_wire_compatibility_version" : "5.6.0",
</span><span class='line'>    "minimum_index_compatibility_version" : "5.0.0"
</span><span class='line'>  },
</span><span class='line'>  "tagline" : "You Know, for Search"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s look at the Health API:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://127.0.0.1:9200/_cat/health?v
</span><span class='line'>epoch      timestamp cluster    status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent
</span><span class='line'>1554154652 21:37:32  es-cluster green           5         2     10   5    0    0        0             0                  -                100.0%</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s ingest some data into elasticsearch, we will create an index named <code>first-index</code> with some dummy data about people, username, name, surname, location and hobbies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H 'Content-Type: application/json' -XPOST http://127.0.0.1:9200/first-index/docs/ -d '{"username": "mikes", "name": "mike", "surname": "steyn", "location": {"country": "south africa", "city": "cape town"}, "hobbies": ["sport", "coffee"]}'
</span><span class='line'>
</span><span class='line'>$ curl -H 'Content-Type: application/json' -XPOST http://127.0.0.1:9200/first-index/docs/ -d '{"username": "clarissas", "name": "clarissa", "surname": "smith", "location": {"country": "ireland", "city": "dublin"}, "hobbies": ["shopping", "reading", "chess"]}'
</span><span class='line'>
</span><span class='line'>$ curl -H 'Content-Type: application/json' -XPOST http://127.0.0.1:9200/first-index/docs/ -d '{"username": "franka", "name": "frank", "surname": "adams", "location": {"country": "new zealand", "city": "auckland"}, "hobbies": ["programming", "swimming", "rugby"]}'</span></code></pre></td></tr></table></div></figure>


<p>Now that we ingested our data into elasticsearch, lets have a look at the Indices API, where the number of documents, size etc should reflect:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://127.0.0.1:9200/_cat/indices?v
</span><span class='line'>health status index       uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>green  open   first-index 1o6yM7tCSqagqoeihKM7_g   5   1          3            0     40.6kb         20.3kb</span></code></pre></td></tr></table></div></figure>


<p>Now lets request a search, which will give you by default 10 returned documents:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://127.0.0.1:9200/first-index/_search?pretty
</span><span class='line'>{
</span><span class='line'>  "took" : 116,
</span><span class='line'>  "timed_out" : false,
</span><span class='line'>  "_shards" : {
</span><span class='line'>    "total" : 5,
</span><span class='line'>    "successful" : 5,
</span><span class='line'>    "skipped" : 0,
</span><span class='line'>    "failed" : 0
</span><span class='line'>  },
</span><span class='line'>  "hits" : {
</span><span class='line'>    "total" : 3,
</span><span class='line'>    "max_score" : 1.0,
</span><span class='line'>    "hits" : [
</span><span class='line'>      {
</span><span class='line'>        "_index" : "first-index",
</span><span class='line'>        "_type" : "docs",
</span><span class='line'>        "_id" : "-NTO2mkB8pugP4aC2jtZ",
</span><span class='line'>        "_score" : 1.0,
</span><span class='line'>        "_source" : {
</span><span class='line'>          "username" : "mikes",
</span><span class='line'>          "name" : "mike",
</span><span class='line'>          "surname" : "steyn",
</span><span class='line'>          "location" : {
</span><span class='line'>            "country" : "south africa",
</span><span class='line'>            "city" : "cape town"
</span><span class='line'>          },
</span><span class='line'>          "hobbies" : [
</span><span class='line'>            "sport",
</span><span class='line'>            "coffee"
</span><span class='line'>          ]
</span><span class='line'>        }
</span><span class='line'>      },
</span><span class='line'>      {
</span><span class='line'>        "_index" : "first-index",
</span><span class='line'>        "_type" : "docs",
</span><span class='line'>        "_id" : "-tTR2mkB8pugP4aCAzvG",
</span><span class='line'>        "_score" : 1.0,
</span><span class='line'>        "_source" : {
</span><span class='line'>          "username" : "franka",
</span><span class='line'>          "name" : "frank",
</span><span class='line'>          "surname" : "adams",
</span><span class='line'>          "location" : {
</span><span class='line'>            "country" : "new zealand",
</span><span class='line'>            "city" : "auckland"
</span><span class='line'>          },
</span><span class='line'>          "hobbies" : [
</span><span class='line'>            "programming",
</span><span class='line'>            "swimming",
</span><span class='line'>            "rugby"
</span><span class='line'>          ]
</span><span class='line'>        }
</span><span class='line'>      },
</span><span class='line'>      {
</span><span class='line'>        "_index" : "first-index",
</span><span class='line'>        "_type" : "docs",
</span><span class='line'>        "_id" : "-dTP2mkB8pugP4aC1ztI",
</span><span class='line'>        "_score" : 1.0,
</span><span class='line'>        "_source" : {
</span><span class='line'>          "username" : "clarissas",
</span><span class='line'>          "name" : "clarissa",
</span><span class='line'>          "surname" : "smith",
</span><span class='line'>          "location" : {
</span><span class='line'>            "country" : "ireland",
</span><span class='line'>            "city" : "dublin"
</span><span class='line'>          },
</span><span class='line'>          "hobbies" : [
</span><span class='line'>            "shopping",
</span><span class='line'>            "reading",
</span><span class='line'>            "chess"
</span><span class='line'>          ]
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    ]
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s have a look at our shards using the Shards API, you will also see where each document is assigned to a specific shard, and also if its a primary or replica shard:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://127.0.0.1:9200/_cat/shards?v
</span><span class='line'>index       shard prirep state   docs store ip           node
</span><span class='line'>first-index 4     p      STARTED    0  230b 10.163.68.7  es-data-2
</span><span class='line'>first-index 4     r      STARTED    0  230b 10.163.68.11 es-data-1
</span><span class='line'>first-index 2     p      STARTED    0  230b 10.163.68.7  es-data-2
</span><span class='line'>first-index 2     r      STARTED    0  230b 10.163.68.11 es-data-1
</span><span class='line'>first-index 3     r      STARTED    1 6.6kb 10.163.68.7  es-data-2
</span><span class='line'>first-index 3     p      STARTED    1 6.6kb 10.163.68.11 es-data-1
</span><span class='line'>first-index 1     r      STARTED    2  13kb 10.163.68.7  es-data-2
</span><span class='line'>first-index 1     p      STARTED    2  13kb 10.163.68.11 es-data-1
</span><span class='line'>first-index 0     p      STARTED    0  230b 10.163.68.7  es-data-2
</span><span class='line'>first-index 0     r      STARTED    0  230b 10.163.68.11 es-data-1</span></code></pre></td></tr></table></div></figure>


<p>Then we can also use the Allocation API to see the size of our indices, disk space per node:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://127.0.0.1:9200/_cat/allocation?v
</span><span class='line'>shards disk.indices disk.used disk.avail disk.total disk.percent host         ip           node
</span><span class='line'>     5       20.3kb    32.4mb      9.9gb      9.9gb            0 10.163.68.11 10.163.68.11 es-data-1
</span><span class='line'>     5       20.3kb    32.4mb      9.9gb      9.9gb            0 10.163.68.7  10.163.68.7  es-data-2</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s search for anyone with the surname <code>smith</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s http://127.0.0.1:9200/first-index/_search?q=surname=smith | jq .
</span><span class='line'>{
</span><span class='line'>  "took": 22,
</span><span class='line'>  "timed_out": false,
</span><span class='line'>  "_shards": {
</span><span class='line'>    "total": 5,
</span><span class='line'>    "successful": 5,
</span><span class='line'>    "skipped": 0,
</span><span class='line'>    "failed": 0
</span><span class='line'>  },
</span><span class='line'>  "hits": {
</span><span class='line'>    "total": 1,
</span><span class='line'>    "max_score": 0.2876821,
</span><span class='line'>    "hits": [
</span><span class='line'>      {
</span><span class='line'>        "_index": "first-index",
</span><span class='line'>        "_type": "docs",
</span><span class='line'>        "_id": "-dTP2mkB8pugP4aC1ztI",
</span><span class='line'>        "_score": 0.2876821,
</span><span class='line'>        "_source": {
</span><span class='line'>          "username": "clarissas",
</span><span class='line'>          "name": "clarissa",
</span><span class='line'>          "surname": "smith",
</span><span class='line'>          "location": {
</span><span class='line'>            "country": "ireland",
</span><span class='line'>            "city": "dublin"
</span><span class='line'>          },
</span><span class='line'>          "hobbies": [
</span><span class='line'>            "shopping",
</span><span class='line'>            "reading",
</span><span class='line'>            "chess"
</span><span class='line'>          ]
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    ]
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s search for anyone with <code>rugby</code> as one of their hobbies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s http://127.0.0.1:9200/first-index/_search?q=hobbies=rugby | jq .
</span><span class='line'>{
</span><span class='line'>  "took": 23,
</span><span class='line'>  "timed_out": false,
</span><span class='line'>  "_shards": {
</span><span class='line'>    "total": 5,
</span><span class='line'>    "successful": 5,
</span><span class='line'>    "skipped": 0,
</span><span class='line'>    "failed": 0
</span><span class='line'>  },
</span><span class='line'>  "hits": {
</span><span class='line'>    "total": 1,
</span><span class='line'>    "max_score": 0.64072424,
</span><span class='line'>    "hits": [
</span><span class='line'>      {
</span><span class='line'>        "_index": "first-index",
</span><span class='line'>        "_type": "docs",
</span><span class='line'>        "_id": "-tTR2mkB8pugP4aCAzvG",
</span><span class='line'>        "_score": 0.64072424,
</span><span class='line'>        "_source": {
</span><span class='line'>          "username": "franka",
</span><span class='line'>          "name": "frank",
</span><span class='line'>          "surname": "adams",
</span><span class='line'>          "location": {
</span><span class='line'>            "country": "new zealand",
</span><span class='line'>            "city": "auckland"
</span><span class='line'>          },
</span><span class='line'>          "hobbies": [
</span><span class='line'>            "programming",
</span><span class='line'>            "swimming",
</span><span class='line'>            "rugby"
</span><span class='line'>          ]
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    ]
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>More on Elasticsearch</h2>

<p>I am planning to write up <strong>elasticsearch</strong> articles on the following topics:</p>

<ul>
<li><a href="">Setting up a 5 Node HA Elasticsearch Cluster</a></li>
<li>Indexes / Replicas</li>
<li>Search Queries</li>
<li>Delete Queries</li>
<li>Elasticsearch Snapshots and Restores on S3</li>
<li>Mapping Templates</li>
<li>Resizing Index Shards</li>
<li>Dealing with Old Timeseries Data</li>
<li>Elasticsearch Percentiles</li>
<li>Managing Yellow and Red Status Clusters</li>
<li>Managing High JVM Memory Pressure</li>
<li>and more</li>
</ul>


<p>As I finish up the writing of these posts they will be published under the <a href="https://blog.ruanbekker.com/blog/categories/elasticsearch-tutorials">#elasticsearch-tutorials</a> category on my blog and for any other elasticsearch tutorials, you can find them under the <a href="https://blog.ruanbekker.com/blog/categories/elasticsearch">#elasticsearch</a> category.</p>

<p>Oke byyyyyye :D</p>

<h2>Resources</h2>

<ul>
<li><a href="https://www.elastic.co/products/elasticsearch">Elasticsearch</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html">Elasticsearch Docs</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Snippet: Create Custom CloudWatch Metrics With Python]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/03/28/snippet-create-custom-cloudwatch-metrics-with-python/"/>
    <updated>2019-03-28T08:05:28-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/03/28/snippet-create-custom-cloudwatch-metrics-with-python</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/53865781-a984c200-3ff8-11e9-9ffa-ccad62ac08f6.png" alt="" /></p>

<p>A quick post on how create custom CloudWatch Metrics using Python on AWS.</p>

<p>After you produced the metrics into CloudWatch, you will be able to see them when navigating to:</p>

<ul>
<li>CloudWatch / Metrics / Custom Namespaces / statusdash/ec2client</li>
</ul>


<p>When selecting:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Select Metric: SomeKey1, SomeKey2
</span><span class='line'>Select MetricName HttpResponseTime</span></code></pre></td></tr></table></div></figure>


<p>And should look like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/53865426-d4224b00-3ff7-11e9-8bd5-bd04dfdd9f43.png" alt="" /></p>

<h2>The Script:</h2>

<p>The python script that will be using boto3 to talk to AWS:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="n">cloudwatch</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">region_name</span><span class="o">=</span><span class="s">&#39;eu-west-1&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s">&#39;cloudwatch&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="n">cloudwatch</span><span class="o">.</span><span class="n">put_metric_data</span><span class="p">(</span>
</span><span class='line'><span class="n">MetricData</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;MetricName&#39;</span><span class="p">:</span> <span class="s">&#39;HttpResponseTime&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;Dimensions&#39;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="s">&#39;Name&#39;</span><span class="p">:</span> <span class="s">&#39;Server&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&#39;Value&#39;</span><span class="p">:</span> <span class="s">&#39;app.example.com&#39;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="s">&#39;Name&#39;</span><span class="p">:</span> <span class="s">&#39;Client&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&#39;Value&#39;</span><span class="p">:</span> <span class="s">&#39;Client-ABC&#39;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="s">&#39;Unit&#39;</span><span class="p">:</span> <span class="s">&#39;Milliseconds&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;Value&#39;</span><span class="p">:</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">],</span>
</span><span class='line'><span class="n">Namespace</span> <span class="o">=</span> <span class="s">&#39;statusdash/ec2client&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">response</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Resources:</h2>

<p><a href="https://stackify.com/custom-metrics-aws-lambda/">https://stackify.com/custom-metrics-aws-lambda/</a>
<a href="https://www.syntouch.nl/custom-cloudwatch-metrics-in-python-yes-we-can/">https://www.syntouch.nl/custom-cloudwatch-metrics-in-python-yes-we-can/</a> &lt;- psutil
<a href="https://aws.amazon.com/blogs/devops/new-how-to-better-monitor-your-custom-application-metrics-using-amazon-cloudwatch-agent/">https://aws.amazon.com/blogs/devops/new-how-to-better-monitor-your-custom-application-metrics-using-amazon-cloudwatch-agent/</a>
<a href="https://medium.com/@mrdoro/aws-lambda-as-the-website-monitoring-tool-184b09202ae2">https://medium.com/@mrdoro/aws-lambda-as-the-website-monitoring-tool-184b09202ae2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concourse Pipeline to Build a Docker Image Automatically on Git Commit]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/03/27/concourse-pipeline-to-build-a-docker-image-automatically-on-git-commit/"/>
    <updated>2019-03-27T17:50:54-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/03/27/concourse-pipeline-to-build-a-docker-image-automatically-on-git-commit</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/gzkdu9.jpg?nocache=1511644783495" alt="" /></p>

<p>In this tutorial we will build a ci pipeline using concourse to build and push a image to dockerhub automatically, whenever a new git commit is made to the master branch.</p>

<h2>Our Project Setup</h2>

<p>Our Directory Tree:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>find .
</span><span class='line'>./Dockerfile
</span><span class='line'>./ci
</span><span class='line'>./ci/pipeline.yml
</span><span class='line'>./README.md
</span><span class='line'>./docker-tunnel
</span></code></pre></td></tr></table></div></figure>


<p>The project used in this example is not important, but you can check it out at <a href="https://github.com/ruanbekker/docker-remote-tunnel">https://github.com/ruanbekker/docker-remote-tunnel</a></p>

<h2>Our Pipeline</h2>

<p>A visual to see how the pipeline will look like in concourse:</p>

<p><img src="https://user-images.githubusercontent.com/567298/55114996-1832d800-50ec-11e9-85ef-bc283711fbde.png" alt="" /></p>

<p>Our pipeline definition will consist of 3 resources, <code>github repo</code>, <code>dockerhub image</code> and a <code>slack resource</code> to inform use whether a build has completed.</p>

<p>Then we are specifying that the job should be triggered on a git commit for the master branch, build and push to our dockerhub repo.</p>

<p>Our pipeline definition <code>ci/pipeline.yml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">resources</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git-repo</span>
</span><span class='line'>  <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git</span>
</span><span class='line'>  <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">uri</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git@github.com:ruanbekker/docker-remote-tunnel.git</span>
</span><span class='line'>    <span class="l-Scalar-Plain">branch</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">master</span>
</span><span class='line'>    <span class="l-Scalar-Plain">private_key</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((github_private_key))</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker-remote-tunnel-image</span>
</span><span class='line'>  <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker-image</span>
</span><span class='line'>  <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">repository</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ruanbekker/docker-remote-tunnel</span>
</span><span class='line'>    <span class="l-Scalar-Plain">tag</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">test</span>
</span><span class='line'>    <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((dockerhub_user))</span>
</span><span class='line'>    <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((dockerhub_password))</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack-alert</span>
</span><span class='line'>  <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack-notification</span>
</span><span class='line'>  <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((slack_notification_url))</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">resource_types</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack-notification</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker-image</span>
</span><span class='line'>    <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">repository</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cfcommunity/slack-notification-resource</span>
</span><span class='line'>      <span class="l-Scalar-Plain">tag</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">v1.3.0</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">jobs</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">build-cached-image</span>
</span><span class='line'>  <span class="l-Scalar-Plain">plan</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git-repo</span>
</span><span class='line'>    <span class="l-Scalar-Plain">trigger</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">task</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">build-cached-image-workspace</span>
</span><span class='line'>    <span class="l-Scalar-Plain">config</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">platform</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linux</span>
</span><span class='line'>      <span class="l-Scalar-Plain">image_resource</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker-image</span>
</span><span class='line'>        <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">repository</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rbekker87/build-tools</span>
</span><span class='line'>
</span><span class='line'>      <span class="l-Scalar-Plain">outputs</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">workspace</span>
</span><span class='line'>      <span class="l-Scalar-Plain">inputs</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git-repo</span>
</span><span class='line'>
</span><span class='line'>      <span class="l-Scalar-Plain">run</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/bin/sh</span>
</span><span class='line'>        <span class="l-Scalar-Plain">args</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">-c</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="p-Indicator">|</span>
</span><span class='line'>          <span class="no">output_dir=workspace</span>
</span><span class='line'>
</span><span class='line'>          <span class="no">cat &lt;&lt; EOF &gt; &quot;${output_dir}/Dockerfile&quot;</span>
</span><span class='line'>          <span class="no">FROM alpine</span>
</span><span class='line'>
</span><span class='line'>          <span class="no">ADD git-repo /tmp/git-repo</span>
</span><span class='line'>          <span class="no">RUN mv /tmp/git-repo/docker-tunnel /usr/bin/docker-tunnel</span>
</span><span class='line'>          <span class="no">RUN apk --no-cache add screen docker openssl openssh-client apache2-utils</span>
</span><span class='line'>          <span class="no">RUN /usr/bin/docker-tunnel -h</span>
</span><span class='line'>          <span class="no">RUN rm -rf /tmp/git-repo</span>
</span><span class='line'>          <span class="no">EOF</span>
</span><span class='line'>
</span><span class='line'>          <span class="no">cp -R ./git-repo &quot;${output_dir}/git-repo&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">put</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker-remote-tunnel-image</span>
</span><span class='line'>    <span class="l-Scalar-Plain">params</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">build</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">workspace</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">on_failure</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">put</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack-alert</span>
</span><span class='line'>      <span class="l-Scalar-Plain">params</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">channel</span><span class="p-Indicator">:</span> <span class="s">&#39;#system_events&#39;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="s">&#39;concourse&#39;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">icon_emoji</span><span class="p-Indicator">:</span> <span class="s">&#39;:concourse:&#39;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">silent</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>        <span class="l-Scalar-Plain">text</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>            <span class="no">*$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME* ($BUILD_NAME) FAILED to build image</span>
</span><span class='line'>            <span class="no">https://ci.domain.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME</span>
</span><span class='line'>    <span class="l-Scalar-Plain">on_success</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">put</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack-alert</span>
</span><span class='line'>      <span class="l-Scalar-Plain">params</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">channel</span><span class="p-Indicator">:</span> <span class="s">&#39;#system_events&#39;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="s">&#39;concourse&#39;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">icon_emoji</span><span class="p-Indicator">:</span> <span class="s">&#39;:concourse:&#39;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">silent</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>        <span class="l-Scalar-Plain">text</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>            <span class="no">*$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME* ($BUILD_NAME) SUCCESS - Image has been published</span>
</span><span class='line'>            <span class="no">https://ci.domain.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">test</span>
</span><span class='line'>  <span class="l-Scalar-Plain">plan</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker-remote-tunnel-image</span>
</span><span class='line'>    <span class="l-Scalar-Plain">passed</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">build-cached-image</span><span class="p-Indicator">]</span>
</span><span class='line'>    <span class="l-Scalar-Plain">trigger</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git-repo</span>
</span><span class='line'>    <span class="l-Scalar-Plain">passed</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">build-cached-image</span><span class="p-Indicator">]</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">task</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">run-tests</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker-remote-tunnel-image</span>
</span><span class='line'>    <span class="l-Scalar-Plain">config</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">platform</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linux</span>
</span><span class='line'>      <span class="l-Scalar-Plain">inputs</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git-repo</span>
</span><span class='line'>      <span class="l-Scalar-Plain">run</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">dir</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git-repo</span>
</span><span class='line'>        <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sh</span>
</span><span class='line'>        <span class="l-Scalar-Plain">args</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/usr/bin/docker-tunnel</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">--help</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">on_failure</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">put</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack-alert</span>
</span><span class='line'>      <span class="l-Scalar-Plain">params</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">channel</span><span class="p-Indicator">:</span> <span class="s">&#39;#system_events&#39;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="s">&#39;concourse&#39;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">icon_emoji</span><span class="p-Indicator">:</span> <span class="s">&#39;:concourse:&#39;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">silent</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>        <span class="l-Scalar-Plain">text</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>            <span class="no">*$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME* ($BUILD_NAME) FAILED - Testing image failure</span>
</span><span class='line'>            <span class="no">https://ci.domain.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME</span>
</span><span class='line'>    <span class="l-Scalar-Plain">on_success</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">put</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack-alert</span>
</span><span class='line'>      <span class="l-Scalar-Plain">params</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">channel</span><span class="p-Indicator">:</span> <span class="s">&#39;#system_events&#39;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="s">&#39;concourse&#39;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">icon_emoji</span><span class="p-Indicator">:</span> <span class="s">&#39;:concourse:&#39;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">silent</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>        <span class="l-Scalar-Plain">text</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>            <span class="no">*$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME* ($BUILD_NAME) SUCCESS - Testing image Succeeded</span>
</span><span class='line'>            <span class="no">https://ci.domain.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that our secret information is templatized and saved in our local <code>credentials.yml</code> which should never be stored in version control:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">slack_notification_url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://api.slack.com/aaa/bbb/ccc</span>
</span><span class='line'><span class="l-Scalar-Plain">dockerhub_user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">myuser</span>
</span><span class='line'><span class="l-Scalar-Plain">dockerhub_password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mypasswd</span>
</span><span class='line'><span class="l-Scalar-Plain">github_private_key</span><span class="p-Indicator">:</span> <span class="p-Indicator">|-</span>
</span><span class='line'>        <span class="no">-----BEGIN RSA PRIVATE KEY-----</span>
</span><span class='line'>        <span class="no">some-secret-data</span>
</span><span class='line'>        <span class="no">-----END RSA PRIVATE KEY------</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Set the Pipeline:</h2>

<p>Now that we have our pipeline definition, credentials and application code (stored in version control), go ahead and set the pipeline, which will save the pipeline configuration in concourse:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># pipeline name: my-docker-app-pipeline</span>
</span><span class='line'><span class="nv">$ </span>fly -t scw sp -n main -c pipeline.yml -p my-docker-app-pipeline -l credentials.yml
</span></code></pre></td></tr></table></div></figure>


<p>Now the pipeline is saved on concourse but in a paused state, go ahead and unpause the pipeline:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t scw up -p my-docker-app-pipeline
</span></code></pre></td></tr></table></div></figure>


<h2>Test your Pipeline</h2>

<p>Make a commit to master and head over to concourse and look at it go:</p>

<p><img src="https://user-images.githubusercontent.com/567298/55116018-a5772c00-50ee-11e9-861e-a5ddc74550e2.png" alt="" /></p>

<p>Thanks for reading, make sure to check out my other posts on <a href="https://blog.ruanbekker.com/blog/categories/concourse">#concourse</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ship Your Logs to Elasticsearch With Filebeat]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/03/27/ship-your-logs-to-elasticsearch-with-filebeat/"/>
    <updated>2019-03-27T10:52:21-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/03/27/ship-your-logs-to-elasticsearch-with-filebeat</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55086561-4b0baa80-50b1-11e9-8062-a9e6de5ab56a.png" alt="" /></p>

<p><strong><a href="https://www.elastic.co/guide/en/beats/filebeat/6.7/filebeat-overview.html">Filebeat</a></strong> by Elastic is a lightweight log shipper, that ships your logs to Elastic products such as Elasticsearch and Logstash. Filbeat monitors the logfiles from the given configuration and ships the to the locations that is specified.</p>

<h2>Filebeat Overview</h2>

<p>Filebeat runs as agents, monitors your logs and ships them in response of events, or whenever the logfile receives data.</p>

<p>Below is a overview (credit: elastic.co) how Filebeat works</p>

<p><img src="https://user-images.githubusercontent.com/567298/55086346-e18b9c00-50b0-11e9-8eac-ea4880cb1aff.png" alt="" /></p>

<h2>Installing Filebeat</h2>

<p>Let&rsquo;s go ahead and install Filebeat. I will be using version 6.7 as that will be the same version that I am running on my Elasticsearch. To check the version of your elasticsearch cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl http://127.0.0.1:9200/_cluster/health?pretty <span class="c"># i have es running locally</span>
</span></code></pre></td></tr></table></div></figure>


<p>Install the dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt install wget apt-transport-https -y
</span></code></pre></td></tr></table></div></figure>


<p>Get the public signing key:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch <span class="p">|</span> sudo apt-key add -
</span></code></pre></td></tr></table></div></figure>


<p>Get the repository definition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;deb https://artifacts.elastic.co/packages/6.x/apt stable main&quot;</span> <span class="p">|</span> tee -a /etc/apt/sources.list.d/elastic-6.x.list
</span></code></pre></td></tr></table></div></figure>


<p>Update the repositories:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt update <span class="o">&amp;&amp;</span> apt upgrade -y
</span></code></pre></td></tr></table></div></figure>


<p>Install Filebeat and enable the service on boot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt install filebeat -y
</span><span class='line'><span class="nv">$ </span>systemctl <span class="nb">enable </span>filebeat
</span></code></pre></td></tr></table></div></figure>


<h2>Configure Filebeat</h2>

<p>Let&rsquo;s configure our main configuration in filebeat, to specify our location where the data should be shipped to (in this case elasticsearch) and I will also like to set some extra fields that will apply to this specific server.</p>

<p>Open up <code>/etc/filebeat/filebeat.yml</code> and edit the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">filebeat.inputs</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">log</span>
</span><span class='line'>  <span class="l-Scalar-Plain">enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>  <span class="l-Scalar-Plain">paths</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/var/log/nginx/*.log</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">filebeat.config.modules</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">${path.config}/modules.d/*.yml</span>
</span><span class='line'>  <span class="l-Scalar-Plain">reload.enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">setup.template.settings</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">index.number_of_shards</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">fields</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">blog_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sysadmins</span>
</span><span class='line'>  <span class="l-Scalar-Plain">service_type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">webserver</span>
</span><span class='line'>  <span class="l-Scalar-Plain">cloud_provider</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">aws</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">setup.kibana</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="s">&quot;http://localhost:5601&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="s">&quot;elastic&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="s">&quot;changeme&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">output.elasticsearch</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;localhost:9200&quot;</span><span class="p-Indicator">]</span>
</span><span class='line'>  <span class="l-Scalar-Plain">protocol</span><span class="p-Indicator">:</span> <span class="s">&quot;http&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="s">&quot;elastic&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="s">&quot;changeme&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above, just setting my path to nginx access logs, some extra fields, including that it shoulds seed kibana with example visualizations and the output configuration of elasticsearch.</p>

<h2>Filebeat Modules</h2>

<p>Filebeat comes with modules that has context on specific applications like nginx, mysql etc. Lets enable system (syslog, auth, etc) and nginx for our web server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>filebeat modules <span class="nb">enable </span>system
</span><span class='line'><span class="nv">$ </span>filebeat modules <span class="nb">enable </span>nginx
</span></code></pre></td></tr></table></div></figure>


<p>Example of my <code>/etc/filebeat/modules.d/system.yml</code> configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">module</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">system</span>
</span><span class='line'>  <span class="l-Scalar-Plain">syslog</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>    <span class="l-Scalar-Plain">var.paths</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;/var/log/syslog&quot;</span><span class="p-Indicator">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">auth</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>    <span class="l-Scalar-Plain">var.paths</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;/var/log/auth.log&quot;</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Example of my <code>/etc/filebeat/modules.d/nginx.yml</code> configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">module</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nginx</span>
</span><span class='line'>  <span class="l-Scalar-Plain">access</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>    <span class="l-Scalar-Plain">var.paths</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;/var/log/nginx/access.log&quot;</span><span class="p-Indicator">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">error</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>    <span class="l-Scalar-Plain">var.paths</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;/var/log/nginx/error.log&quot;</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now setup the <a href="https://www.elastic.co/guide/en/beats/filebeat/6.7/filebeat-template.html">templates</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>filebeat setup
</span></code></pre></td></tr></table></div></figure>


<p>Then restart filebeat:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>/etc/init.d/filebeat restart
</span></code></pre></td></tr></table></div></figure>


<p>You can have a look at the logs, should you need to debug:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tail -f /var/log/filebeat/filebeat
</span></code></pre></td></tr></table></div></figure>


<p>Your data should now be shipped to elasticsearch, by default under the <code>filebeat-YYYY.mm.dd</code> index pattern.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl <span class="s1">&#39;http://127.0.0.1:9200/_cat/indices/filebeat*?v&#39;</span>
</span><span class='line'>health status index                     uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>green  open   filebeat-6.7.1-2019.03.27 CBdV7adjRKypN1wguwuHDA   <span class="m">3</span>   <span class="m">1</span>     <span class="m">453220</span>            <span class="m">0</span>    230.2mb        115.9mb
</span></code></pre></td></tr></table></div></figure>


<h2>Kibana</h2>

<p>You can head over to Kibana at <a href="http://localhost:5601">http://localhost:5601</a> (in this case) to visualize the data that is ingested into your filebeat index. I will write a tutorial on how to graph up most common dashboards later this week.</p>

<p>Thats it for now :D</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://www.elastic.co/guide/en/beats/filebeat/6.7/index.html">https://www.elastic.co/guide/en/beats/filebeat/6.7/index.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Deploy a Docker Swarm Cluster on Scaleway With Terraform]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/03/21/how-to-deploy-a-docker-swarm-cluster-on-scaleway-with-terraform/"/>
    <updated>2019-03-21T02:15:07-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/03/21/how-to-deploy-a-docker-swarm-cluster-on-scaleway-with-terraform</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/54737111-09fa2e80-4bb7-11e9-97f4-a94a31fc9a3a.png" alt="" /></p>

<p>We will deploy a 3 node docker swarm cluster with terraform on scaleway. I have used the base source code from <a href="https://github.com/stefanprodan/scaleway-swarm-terraform">this</a> repository but tweaked the configuration to my needs.</p>

<h2>Pre-Requisites</h2>

<p>Ensure terraform and jq is instaled:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install terraform
</span><span class='line'><span class="nv">$ </span>brew install jq
</span></code></pre></td></tr></table></div></figure>


<h2>Terraform</h2>

<p>You can have a look at the linked source at the top for the source code, but below I will provide each file that will make up our terraform deployment.</p>

<p>Ource <code>main.tf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>provider <span class="s2">&quot;scaleway&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">region</span> <span class="o">=</span> <span class="s2">&quot;${var.region}&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>data <span class="s2">&quot;scaleway_bootscript&quot;</span> <span class="s2">&quot;debian&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">architecture</span> <span class="o">=</span> <span class="s2">&quot;x86_64&quot;</span>
</span><span class='line'>  <span class="nv">name</span> <span class="o">=</span> <span class="s2">&quot;x86_64 mainline 4.15.11 rev1&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>data <span class="s2">&quot;scaleway_image&quot;</span> <span class="s2">&quot;debian_stretch&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">architecture</span> <span class="o">=</span> <span class="s2">&quot;x86_64&quot;</span>
</span><span class='line'>  <span class="nv">name</span>         <span class="o">=</span> <span class="s2">&quot;Debian Stretch&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>data <span class="s2">&quot;template_file&quot;</span> <span class="s2">&quot;docker_conf&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">template</span> <span class="o">=</span> <span class="s2">&quot;${file(&quot;</span>conf/docker.tpl<span class="s2">&quot;)}&quot;</span>
</span><span class='line'>
</span><span class='line'>  vars <span class="o">{</span>
</span><span class='line'>    <span class="nv">ip</span> <span class="o">=</span> <span class="s2">&quot;${var.docker_api_ip}&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>outputs.tf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>output <span class="s2">&quot;swarm_manager_public_ip&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">value</span> <span class="o">=</span> <span class="s2">&quot;${scaleway_ip.swarm_manager_ip.0.ip}&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>output <span class="s2">&quot;swarm_manager_private_ip&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">value</span> <span class="o">=</span> <span class="s2">&quot;${scaleway_server.swarm_manager.0.private_ip}&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>output <span class="s2">&quot;swarm_workers_public_ip&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">value</span> <span class="o">=</span> <span class="s2">&quot;${concat(scaleway_server.swarm_worker.*.name, scaleway_server.swarm_worker.*.public_ip)}&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>output <span class="s2">&quot;swarm_workers_private_ip&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">value</span> <span class="o">=</span> <span class="s2">&quot;${concat(scaleway_server.swarm_worker.*.name, scaleway_server.swarm_worker.*.private_ip)}&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>output <span class="s2">&quot;workspace&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">value</span> <span class="o">=</span> <span class="s2">&quot;${terraform.workspace}&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our <code>security-groups.tf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>resource <span class="s2">&quot;scaleway_security_group&quot;</span> <span class="s2">&quot;swarm_managers&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">name</span>        <span class="o">=</span> <span class="s2">&quot;swarm_managers&quot;</span>
</span><span class='line'>  <span class="nv">description</span> <span class="o">=</span> <span class="s2">&quot;Allow HTTP/S and SSH traffic&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;scaleway_security_group_rule&quot;</span> <span class="s2">&quot;ssh_accept&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">security_group</span> <span class="o">=</span> <span class="s2">&quot;${scaleway_security_group.swarm_managers.id}&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">action</span>    <span class="o">=</span> <span class="s2">&quot;accept&quot;</span>
</span><span class='line'>  <span class="nv">direction</span> <span class="o">=</span> <span class="s2">&quot;inbound&quot;</span>
</span><span class='line'>  <span class="nv">ip_range</span>  <span class="o">=</span> <span class="s2">&quot;0.0.0.0/0&quot;</span>
</span><span class='line'>  <span class="nv">protocol</span>  <span class="o">=</span> <span class="s2">&quot;TCP&quot;</span>
</span><span class='line'>  <span class="nv">port</span>      <span class="o">=</span> 22
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;scaleway_security_group_rule&quot;</span> <span class="s2">&quot;http_accept&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">security_group</span> <span class="o">=</span> <span class="s2">&quot;${scaleway_security_group.swarm_managers.id}&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">action</span>    <span class="o">=</span> <span class="s2">&quot;accept&quot;</span>
</span><span class='line'>  <span class="nv">direction</span> <span class="o">=</span> <span class="s2">&quot;inbound&quot;</span>
</span><span class='line'>  <span class="nv">ip_range</span>  <span class="o">=</span> <span class="s2">&quot;0.0.0.0/0&quot;</span>
</span><span class='line'>  <span class="nv">protocol</span>  <span class="o">=</span> <span class="s2">&quot;TCP&quot;</span>
</span><span class='line'>  <span class="nv">port</span>      <span class="o">=</span> 80
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;scaleway_security_group_rule&quot;</span> <span class="s2">&quot;https_accept&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">security_group</span> <span class="o">=</span> <span class="s2">&quot;${scaleway_security_group.swarm_managers.id}&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">action</span>    <span class="o">=</span> <span class="s2">&quot;accept&quot;</span>
</span><span class='line'>  <span class="nv">direction</span> <span class="o">=</span> <span class="s2">&quot;inbound&quot;</span>
</span><span class='line'>  <span class="nv">ip_range</span>  <span class="o">=</span> <span class="s2">&quot;0.0.0.0/0&quot;</span>
</span><span class='line'>  <span class="nv">protocol</span>  <span class="o">=</span> <span class="s2">&quot;TCP&quot;</span>
</span><span class='line'>  <span class="nv">port</span>      <span class="o">=</span> 443
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;scaleway_security_group&quot;</span> <span class="s2">&quot;swarm_workers&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">name</span>        <span class="o">=</span> <span class="s2">&quot;swarm_workers&quot;</span>
</span><span class='line'>  <span class="nv">description</span> <span class="o">=</span> <span class="s2">&quot;Allow SSH traffic&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;scaleway_security_group_rule&quot;</span> <span class="s2">&quot;ssh_accept_workers&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">security_group</span> <span class="o">=</span> <span class="s2">&quot;${scaleway_security_group.swarm_workers.id}&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">action</span>    <span class="o">=</span> <span class="s2">&quot;accept&quot;</span>
</span><span class='line'>  <span class="nv">direction</span> <span class="o">=</span> <span class="s2">&quot;inbound&quot;</span>
</span><span class='line'>  <span class="nv">ip_range</span>  <span class="o">=</span> <span class="s2">&quot;0.0.0.0/0&quot;</span>
</span><span class='line'>  <span class="nv">protocol</span>  <span class="o">=</span> <span class="s2">&quot;TCP&quot;</span>
</span><span class='line'>  <span class="nv">port</span>      <span class="o">=</span> 22
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our <code>variables.tf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>variable <span class="s2">&quot;docker_version&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">default</span> <span class="o">=</span> <span class="s2">&quot;18.06.3~ce~3-0~debian&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>variable <span class="s2">&quot;region&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">default</span> <span class="o">=</span> <span class="s2">&quot;ams1&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>variable <span class="s2">&quot;manager_instance_type&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">default</span> <span class="o">=</span> <span class="s2">&quot;START1-M&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>variable <span class="s2">&quot;worker_instance_type&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">default</span> <span class="o">=</span> <span class="s2">&quot;START1-M&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>variable <span class="s2">&quot;worker_instance_count&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">default</span> <span class="o">=</span> 2
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>variable <span class="s2">&quot;docker_api_ip&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">default</span> <span class="o">=</span> <span class="s2">&quot;127.0.0.1&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our <code>managers.tf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>resource <span class="s2">&quot;scaleway_ip&quot;</span> <span class="s2">&quot;swarm_manager_ip&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">count</span> <span class="o">=</span> 1
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;scaleway_server&quot;</span> <span class="s2">&quot;swarm_manager&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">count</span>          <span class="o">=</span> 1
</span><span class='line'>  <span class="nv">name</span>           <span class="o">=</span> <span class="s2">&quot;${terraform.workspace}-manager-${count.index + 1}&quot;</span>
</span><span class='line'>  <span class="nv">image</span>          <span class="o">=</span> <span class="s2">&quot;${data.scaleway_image.debian_stretch.id}&quot;</span>
</span><span class='line'>  <span class="nb">type</span>           <span class="o">=</span> <span class="s2">&quot;${var.manager_instance_type}&quot;</span>
</span><span class='line'>  <span class="nv">bootscript</span>     <span class="o">=</span> <span class="s2">&quot;${data.scaleway_bootscript.debian.id}&quot;</span>
</span><span class='line'>  <span class="nv">security_group</span> <span class="o">=</span> <span class="s2">&quot;${scaleway_security_group.swarm_managers.id}&quot;</span>
</span><span class='line'>  <span class="nv">public_ip</span>      <span class="o">=</span> <span class="s2">&quot;${element(scaleway_ip.swarm_manager_ip.*.ip, count.index)}&quot;</span>
</span><span class='line'>
</span><span class='line'>  volume <span class="o">{</span>
</span><span class='line'>    <span class="nv">size_in_gb</span> <span class="o">=</span> 50
</span><span class='line'>    <span class="nb">type</span>       <span class="o">=</span> <span class="s2">&quot;l_ssd&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  provisioner <span class="s2">&quot;remote-exec&quot;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">script</span> <span class="o">=</span> <span class="s2">&quot;scripts/mount-disk.sh&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  connection <span class="o">{</span>
</span><span class='line'>    <span class="nb">type</span> <span class="o">=</span> <span class="s2">&quot;ssh&quot;</span>
</span><span class='line'>    <span class="nv">user</span> <span class="o">=</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>    <span class="nv">private_key</span> <span class="o">=</span> <span class="s2">&quot;${file(&quot;</span>~/.ssh/id_rsa<span class="s2">&quot;)}&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  provisioner <span class="s2">&quot;remote-exec&quot;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">inline</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;mkdir -p /etc/systemd/system/docker.service.d&quot;</span>,
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  provisioner <span class="s2">&quot;file&quot;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">content</span>     <span class="o">=</span> <span class="s2">&quot;${data.template_file.docker_conf.rendered}&quot;</span>
</span><span class='line'>    <span class="nv">destination</span> <span class="o">=</span> <span class="s2">&quot;/etc/systemd/system/docker.service.d/docker.conf&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  provisioner <span class="s2">&quot;file&quot;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">source</span>      <span class="o">=</span> <span class="s2">&quot;scripts/install-docker-ce.sh&quot;</span>
</span><span class='line'>    <span class="nv">destination</span> <span class="o">=</span> <span class="s2">&quot;/tmp/install-docker-ce.sh&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  provisioner <span class="s2">&quot;file&quot;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">source</span>      <span class="o">=</span> <span class="s2">&quot;scripts/local-persist-plugin.sh&quot;</span>
</span><span class='line'>    <span class="nv">destination</span> <span class="o">=</span> <span class="s2">&quot;/tmp/local-persist-plugin.sh&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  provisioner <span class="s2">&quot;remote-exec&quot;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">inline</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;chmod +x /tmp/install-docker-ce.sh&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;/tmp/install-docker-ce.sh ${var.docker_version}&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;docker swarm init --advertise-addr ${self.private_ip}&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;chmod +x /tmp/local-persist-plugin.sh&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;/tmp/local-persist-plugin.sh&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our <code>workers.tf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>resource <span class="s2">&quot;scaleway_ip&quot;</span> <span class="s2">&quot;swarm_worker_ip&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">count</span> <span class="o">=</span> <span class="s2">&quot;${var.worker_instance_count}&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;scaleway_server&quot;</span> <span class="s2">&quot;swarm_worker&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">count</span>          <span class="o">=</span> <span class="s2">&quot;${var.worker_instance_count}&quot;</span>
</span><span class='line'>  <span class="nv">name</span>           <span class="o">=</span> <span class="s2">&quot;${terraform.workspace}-worker-${count.index + 1}&quot;</span>
</span><span class='line'>  <span class="nv">image</span>          <span class="o">=</span> <span class="s2">&quot;${data.scaleway_image.debian_stretch.id}&quot;</span>
</span><span class='line'>  <span class="nb">type</span>           <span class="o">=</span> <span class="s2">&quot;${var.worker_instance_type}&quot;</span>
</span><span class='line'>  <span class="nv">bootscript</span>     <span class="o">=</span> <span class="s2">&quot;${data.scaleway_bootscript.debian.id}&quot;</span>
</span><span class='line'>  <span class="nv">security_group</span> <span class="o">=</span> <span class="s2">&quot;${scaleway_security_group.swarm_workers.id}&quot;</span>
</span><span class='line'>  <span class="nv">public_ip</span>      <span class="o">=</span> <span class="s2">&quot;${element(scaleway_ip.swarm_worker_ip.*.ip, count.index)}&quot;</span>
</span><span class='line'>
</span><span class='line'>  volume <span class="o">{</span>
</span><span class='line'>    <span class="nv">size_in_gb</span> <span class="o">=</span> 50
</span><span class='line'>    <span class="nb">type</span>       <span class="o">=</span> <span class="s2">&quot;l_ssd&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  provisioner <span class="s2">&quot;remote-exec&quot;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">script</span> <span class="o">=</span> <span class="s2">&quot;scripts/mount-disk.sh&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  connection <span class="o">{</span>
</span><span class='line'>    <span class="nb">type</span> <span class="o">=</span> <span class="s2">&quot;ssh&quot;</span>
</span><span class='line'>    <span class="nv">user</span> <span class="o">=</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>    <span class="nv">private_key</span> <span class="o">=</span> <span class="s2">&quot;${file(&quot;</span>~/.ssh/id_rsa<span class="s2">&quot;)}&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  provisioner <span class="s2">&quot;remote-exec&quot;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">inline</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;mkdir -p /etc/systemd/system/docker.service.d&quot;</span>,
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  provisioner <span class="s2">&quot;file&quot;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">content</span>     <span class="o">=</span> <span class="s2">&quot;${data.template_file.docker_conf.rendered}&quot;</span>
</span><span class='line'>    <span class="nv">destination</span> <span class="o">=</span> <span class="s2">&quot;/etc/systemd/system/docker.service.d/docker.conf&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  provisioner <span class="s2">&quot;file&quot;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">source</span>      <span class="o">=</span> <span class="s2">&quot;scripts/install-docker-ce.sh&quot;</span>
</span><span class='line'>    <span class="nv">destination</span> <span class="o">=</span> <span class="s2">&quot;/tmp/install-docker-ce.sh&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  provisioner <span class="s2">&quot;file&quot;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">source</span>      <span class="o">=</span> <span class="s2">&quot;scripts/local-persist-plugin.sh&quot;</span>
</span><span class='line'>    <span class="nv">destination</span> <span class="o">=</span> <span class="s2">&quot;/tmp/local-persist-plugin.sh&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  provisioner <span class="s2">&quot;remote-exec&quot;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">inline</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;chmod +x /tmp/install-docker-ce.sh&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;/tmp/install-docker-ce.sh ${var.docker_version}&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;docker swarm join --token ${data.external.swarm_tokens.result.worker} ${scaleway_server.swarm_manager.0.private_ip}:2377&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;chmod +x /tmp/local-persist-plugin.sh&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;/tmp/local-persist-plugin.sh&quot;</span>,
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  provisioner <span class="s2">&quot;remote-exec&quot;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">when</span> <span class="o">=</span> <span class="s2">&quot;destroy&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">inline</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;docker node update --availability drain ${self.name}&quot;</span>,
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">on_failure</span> <span class="o">=</span> <span class="s2">&quot;continue&quot;</span>
</span><span class='line'>
</span><span class='line'>    connection <span class="o">{</span>
</span><span class='line'>      <span class="nb">type</span> <span class="o">=</span> <span class="s2">&quot;ssh&quot;</span>
</span><span class='line'>      <span class="nv">user</span> <span class="o">=</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>      <span class="nv">host</span> <span class="o">=</span> <span class="s2">&quot;${scaleway_ip.swarm_manager_ip.0.ip}&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  provisioner <span class="s2">&quot;remote-exec&quot;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">when</span> <span class="o">=</span> <span class="s2">&quot;destroy&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">inline</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;docker swarm leave&quot;</span>,
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">on_failure</span> <span class="o">=</span> <span class="s2">&quot;continue&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  provisioner <span class="s2">&quot;remote-exec&quot;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">when</span> <span class="o">=</span> <span class="s2">&quot;destroy&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">inline</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;docker node rm --force ${self.name}&quot;</span>,
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">on_failure</span> <span class="o">=</span> <span class="s2">&quot;continue&quot;</span>
</span><span class='line'>
</span><span class='line'>    connection <span class="o">{</span>
</span><span class='line'>      <span class="nb">type</span> <span class="o">=</span> <span class="s2">&quot;ssh&quot;</span>
</span><span class='line'>      <span class="nv">user</span> <span class="o">=</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>      <span class="nv">host</span> <span class="o">=</span> <span class="s2">&quot;${scaleway_ip.swarm_manager_ip.0.ip}&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>data <span class="s2">&quot;external&quot;</span> <span class="s2">&quot;swarm_tokens&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">program</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;./scripts/fetch-tokens.sh&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">query</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">host</span> <span class="o">=</span> <span class="s2">&quot;${scaleway_ip.swarm_manager_ip.0.ip}&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">depends_on</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;scaleway_server.swarm_manager&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our config for the docker daemon: <code>conf/docker.tpl</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>Service<span class="o">]</span>
</span><span class='line'><span class="nv">ExecStart</span><span class="o">=</span>
</span><span class='line'><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/dockerd -H fd:// <span class="se">\</span>
</span><span class='line'>  -H tcp://<span class="k">${</span><span class="nv">ip</span><span class="k">}</span>:2375 <span class="se">\</span>
</span><span class='line'>  --storage-driver<span class="o">=</span>overlay2 <span class="se">\</span>
</span><span class='line'>  --dns 8.8.4.4 --dns 8.8.8.8 <span class="se">\</span>
</span><span class='line'>  --log-driver json-file <span class="se">\</span>
</span><span class='line'>  --log-opt max-size<span class="o">=</span>50m --log-opt max-file<span class="o">=</span><span class="m">10</span> <span class="se">\</span>
</span><span class='line'>  --experimental<span class="o">=</span><span class="nb">true</span> <span class="se">\</span>
</span><span class='line'>  --metrics-addr 172.17.0.1:9323
</span></code></pre></td></tr></table></div></figure>


<p>Our script to mount our additional disk: <code>scripts/mount-disk.sh</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>apt update
</span><span class='line'>apt install xfsprogs attr -y
</span><span class='line'>mkfs -t xfs /dev/vdb
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;/dev/vdb /mnt xfs defaults 0 0&quot;</span> &gt;&gt; /etc/fstab
</span><span class='line'>mount -a
</span></code></pre></td></tr></table></div></figure>


<p>Our script to install docker: <code>scripts/install-docker-ce.sh</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">DOCKER_VERSION</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="nv">DEBIAN_FRONTEND</span><span class="o">=</span>noninteractive apt-get -qq update
</span><span class='line'>apt-get -qq install apt-transport-https ca-certificates curl software-properties-common
</span><span class='line'>curl -fsSL https://download.docker.com/linux/debian/gpg <span class="p">|</span> sudo apt-key add -
</span><span class='line'>add-apt-repository <span class="s2">&quot;deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable&quot;</span>
</span><span class='line'>
</span><span class='line'>apt-get -q update -y
</span><span class='line'>apt-get -q install -y docker-ce<span class="o">=</span><span class="nv">$DOCKER_VERSION</span> containerd.io
</span></code></pre></td></tr></table></div></figure>


<p>Our script that retrieves the swarm tokens: <code>scripts/fetch-tokens.sh</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Processing JSON in shell scripts</span>
</span><span class='line'><span class="c"># https://www.terraform.io/docs/providers/external/data_source.html#processing-json-in-shell-scripts</span>
</span><span class='line'>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'>
</span><span class='line'><span class="c"># Extract &quot;host&quot; argument from the input into HOST shell variable</span>
</span><span class='line'><span class="nb">eval</span> <span class="s2">&quot;$(jq -r &#39;@sh &quot;</span><span class="nv">HOST</span><span class="o">=</span><span class="se">\(</span>.host<span class="o">)</span><span class="s2">&quot;&#39;)&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">MANAGER</span><span class="o">=</span><span class="k">$(</span>ssh -o <span class="nv">StrictHostKeyChecking</span><span class="o">=</span>no -o <span class="nv">UserKnownHostsFile</span><span class="o">=</span>/dev/null root@<span class="nv">$HOST</span> docker swarm join-token manager -q<span class="k">)</span>
</span><span class='line'><span class="nv">WORKER</span><span class="o">=</span><span class="k">$(</span>ssh -o <span class="nv">StrictHostKeyChecking</span><span class="o">=</span>no -o <span class="nv">UserKnownHostsFile</span><span class="o">=</span>/dev/null root@<span class="nv">$HOST</span> docker swarm join-token worker -q<span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># produce a json object containing the tokens</span>
</span><span class='line'>jq -n --arg manager <span class="s2">&quot;$MANAGER&quot;</span> --arg worker <span class="s2">&quot;$WORKER&quot;</span> <span class="s1">&#39;{&quot;manager&quot;:$manager,&quot;worker&quot;:$worker}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our script to install the <a href="https://github.com/CWSpear/local-persist">local-persist docker volume</a> plugin: <code>scripts/local-persist-plugin.sh</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'>curl -fsSL https://raw.githubusercontent.com/CWSpear/local-persist/master/scripts/install.sh <span class="p">|</span> bash
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy your Swarm</h2>

<p>Note that we will be deploying 3x SMART1-M servers with Debian Stretch. At this moment the image id is the one of debian stretch but may change in the future. If you want to change the distro, update the install script, and the terraform files.</p>

<p><a href="https://www.scaleway.com/docs/generate-an-api-token/">Generate API Token on Scaleway</a> then export it to your current shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">SCALEWAY_ORGANIZATION</span><span class="o">=</span><span class="s2">&quot;&lt;organization-id&gt;&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">SCALEWAY_TOKEN</span><span class="o">=</span><span class="s2">&quot;&lt;secret&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make sure that your ssh private key is the intended one as in the config, in my example: <code>~/.ssh/id_rsa</code> and that they are allowed in your servers <code>authorized_keys</code> file</p>

<p>Create a new workspace:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>terraform new workspace swarm
</span></code></pre></td></tr></table></div></figure>


<p>Pull down the providers and initialize:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>terraform init
</span></code></pre></td></tr></table></div></figure>


<p>Deploy!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>terraform apply
</span><span class='line'>...
</span><span class='line'>...
</span><span class='line'>scaleway_server.swarm_worker<span class="o">[</span>0<span class="o">]</span>: Creation <span class="nb">complete </span>after 4m55s <span class="o">(</span>ID: xx-xx-xx-xx-xx<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Apply <span class="nb">complete</span>! Resources: <span class="m">14</span> added, <span class="m">0</span> changed, <span class="m">0</span> destroyed.
</span><span class='line'>Outputs:
</span><span class='line'>
</span><span class='line'><span class="nv">swarm_manager_private_ip</span> <span class="o">=</span> 10.21.x.x
</span><span class='line'><span class="nv">swarm_manager_public_ip</span> <span class="o">=</span> 51.xx.xx.xx
</span><span class='line'><span class="nv">swarm_workers_private_ip</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    swarm-worker-1,
</span><span class='line'>    swarm-worker-2,
</span><span class='line'>    10.20.xx.xx,
</span><span class='line'>    10.20.xx.xx,
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="nv">swarm_workers_public_ip</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    swarm-worker-1,
</span><span class='line'>    swarm-worker-2,
</span><span class='line'>    51.xx.xx.xx,
</span><span class='line'>    51.xx.xx.xx,
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="nv">workspace</span> <span class="o">=</span> swarm
</span></code></pre></td></tr></table></div></figure>


<p>Once your deployment is done you will be prompted with the public/private ip addresses of your nodes as seen above, you can also manually retrieve them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>terraform terraform output
</span></code></pre></td></tr></table></div></figure>


<p>Or for a specific node, such as the manager:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>terraform terraform output swarm-manager
</span><span class='line'>51.xx.xx.xx
</span></code></pre></td></tr></table></div></figure>


<p>Go ahead and ssh to your manager nodes and list the swarm nodes, boom, easy right.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker node ls
</span><span class='line'>ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
</span><span class='line'>2696o0vrt93x8qf2gblbfc8pf *   swarm-manager       Ready               Active              Leader              18.09.3
</span><span class='line'>72ava7rrp2acnyadisg52n7ym     swarm-worker-1      Ready               Active                                  18.09.3
</span><span class='line'>sy2otqn20qe9jc2v9io3a21jm     swarm-worker-2      Ready               Active                                  18.09.3
</span></code></pre></td></tr></table></div></figure>


<p>When you want to destroy the environment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>terraform destroy -force
</span></code></pre></td></tr></table></div></figure>


<h2>References:</h2>

<p>Big thanks goes to <a href="https://github.com/stefanprodan">@stefanprodan</a></p>

<ul>
<li><a href="https://www.terraform.io/docs/index.html">https://www.terraform.io/docs/index.html</a></li>
<li><a href="https://docs.docker.com/engine/swarm/">https://docs.docker.com/engine/swarm/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Scaleway Servers via the API in Python]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/03/20/deploy-scaleway-servers-via-the-api-in-python/"/>
    <updated>2019-03-20T19:04:00-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/03/20/deploy-scaleway-servers-via-the-api-in-python</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/54725016-2e81e680-4b76-11e9-9e69-ffe4cd470bb7.jpg" alt="" /></p>

<p>A quick post on how to deploy Scaleway Servers via their API using Python.</p>

<h2>API Documentation</h2>

<p>Scaleway has great <a href="https://developer.scaleway.com/#servers-servers">API Documentation</a> available, so for deeper info have a look at the link provided.</p>

<h2>Python</h2>

<p>Our python script has a function <code>create_server</code> that expects a server name, server size, the tag and the linux distribution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="n">SCW_API_KEY</span> <span class="o">=</span> <span class="s">&quot;&lt;your-api-key&gt;&quot;</span>
</span><span class='line'><span class="n">SCW_OGRA_ID</span> <span class="o">=</span> <span class="s">&quot;&lt;your-organization-id&gt;&quot;</span>
</span><span class='line'><span class="n">SCW_REGION</span> <span class="o">=</span> <span class="s">&quot;ams1&quot;</span>
</span><span class='line'><span class="n">SCW_COMPUTE_API_URL</span> <span class="o">=</span> <span class="s">&quot;https://cp-{region}.scaleway.com/{resource}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">region</span><span class="o">=</span><span class="n">SCW_REGION</span><span class="p">,</span> <span class="n">resource</span><span class="o">=</span><span class="s">&#39;servers&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">SCW_VOLUME_API_URL</span> <span class="o">=</span> <span class="s">&quot;https://cp-{region}.scaleway.com/{resource}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">region</span><span class="o">=</span><span class="n">SCW_REGION</span><span class="p">,</span> <span class="n">resource</span><span class="o">=</span><span class="s">&#39;volumes&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">SCW_HEADERS</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;X-Auth-Token&quot;</span><span class="p">:</span> <span class="n">SCW_API_KEY</span><span class="p">,</span> <span class="s">&quot;Content-Type&quot;</span><span class="p">:</span> <span class="s">&quot;application/json&quot;</span><span class="p">}</span>
</span><span class='line'><span class="n">SCW_IMAGES</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;ubuntu/18&quot;</span><span class="p">:</span> <span class="s">&quot;6a601340-19c1-4ca7-9c1c-0704bcc9f5fe&quot;</span><span class="p">,</span> <span class="s">&quot;debian/stretch&quot;</span><span class="p">:</span> <span class="s">&quot;710ff1fa-0d16-4f8f-93ac-0647c44fa21d&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_status</span><span class="p">(</span><span class="n">server_id</span><span class="p">):</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">SCW_COMPUTE_API_URL</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">server_id</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">SCW_HEADERS</span><span class="p">)</span>
</span><span class='line'>  <span class="n">state</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">state</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">create_server</span><span class="p">(</span><span class="n">instance_name</span><span class="p">,</span> <span class="n">instance_type</span><span class="p">,</span> <span class="n">instance_tag</span><span class="p">,</span> <span class="n">os_distro</span><span class="p">):</span>
</span><span class='line'>  <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">compute_payload</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="n">instance_name</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;image&quot;</span><span class="p">:</span> <span class="n">SCW_IMAGES</span><span class="p">[</span><span class="n">os_distro</span><span class="p">],</span>
</span><span class='line'>      <span class="s">&quot;commercial_type&quot;</span><span class="p">:</span> <span class="n">instance_type</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;tags&quot;</span><span class="p">:</span> <span class="p">[</span><span class="n">instance_tag</span><span class="p">],</span>
</span><span class='line'>      <span class="s">&quot;organization&quot;</span><span class="p">:</span> <span class="n">SCW_OGRA_ID</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="s">&quot;creating server&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">r_create</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">SCW_COMPUTE_API_URL</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">compute_payload</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">SCW_HEADERS</span><span class="p">)</span>
</span><span class='line'>  <span class="n">server_id</span> <span class="o">=</span> <span class="n">r_create</span><span class="o">.</span><span class="n">json</span><span class="p">()[</span><span class="s">&quot;server&quot;</span><span class="p">][</span><span class="s">&quot;id&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="n">action_payload</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;action&quot;</span><span class="p">:</span> <span class="s">&quot;poweron&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="n">r_start</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">SCW_COMPUTE_API_URL</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">server_id</span> <span class="o">+</span> <span class="s">&quot;/action&quot;</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">action_payload</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">SCW_HEADERS</span><span class="p">)</span>
</span><span class='line'>  <span class="n">r_describe</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">SCW_COMPUTE_API_URL</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">server_id</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">SCW_HEADERS</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">server_state</span> <span class="o">=</span> <span class="n">get_status</span><span class="p">(</span><span class="n">server_id</span><span class="p">)[</span><span class="s">&#39;server&#39;</span><span class="p">][</span><span class="s">&#39;state&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">server_state</span> <span class="o">!=</span> <span class="s">&quot;running&quot;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">90</span><span class="p">:</span>
</span><span class='line'>      <span class="n">r_delete</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">SCW_COMPUTE_API_URL</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">server_id</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">action_payload</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">SCW_HEADERS</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span><span class="s">&quot;message&quot;</span><span class="p">:</span> <span class="s">&quot;error&quot;</span><span class="p">,</span> <span class="s">&quot;description&quot;</span><span class="p">:</span> <span class="s">&quot;task timed out while waiting for server to boot&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;waiting for server to become ready&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="n">server_state</span> <span class="o">=</span> <span class="n">get_status</span><span class="p">(</span><span class="n">server_id</span><span class="p">)[</span><span class="s">&#39;server&#39;</span><span class="p">][</span><span class="s">&#39;state&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="n">resp</span> <span class="o">=</span> <span class="n">get_status</span><span class="p">(</span><span class="n">server_id</span><span class="p">)[</span><span class="s">&quot;server&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="n">output</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;id&quot;</span><span class="p">:</span> <span class="n">resp</span><span class="p">[</span><span class="s">&quot;id&quot;</span><span class="p">],</span>
</span><span class='line'>      <span class="s">&quot;hostname&quot;</span><span class="p">:</span> <span class="n">resp</span><span class="p">[</span><span class="s">&quot;hostname&quot;</span><span class="p">],</span>
</span><span class='line'>      <span class="s">&quot;instance_type&quot;</span><span class="p">:</span> <span class="n">resp</span><span class="p">[</span><span class="s">&quot;commercial_type&quot;</span><span class="p">],</span>
</span><span class='line'>      <span class="s">&quot;public_ip&quot;</span><span class="p">:</span> <span class="n">resp</span><span class="p">[</span><span class="s">&quot;public_ip&quot;</span><span class="p">][</span><span class="s">&quot;address&quot;</span><span class="p">],</span>
</span><span class='line'>      <span class="s">&quot;private_ip&quot;</span><span class="p">:</span> <span class="n">resp</span><span class="p">[</span><span class="s">&quot;private_ip&quot;</span><span class="p">],</span>
</span><span class='line'>      <span class="s">&quot;status&quot;</span><span class="p">:</span> <span class="n">resp</span><span class="p">[</span><span class="s">&quot;state&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">output</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="n">create_server</span><span class="p">(</span><span class="s">&quot;swarm-manager&quot;</span><span class="p">,</span> <span class="s">&quot;START1-M&quot;</span><span class="p">,</span> <span class="s">&quot;swarm&quot;</span><span class="p">,</span> <span class="s">&quot;ubuntu/18&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Deploying a server with the hostname: swarm-manager, instance-size: START1-M, tag: swarm and os distribution: ubuntu/18:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python scw.py
</span><span class='line'>creating server
</span><span class='line'>waiting <span class="k">for</span> server to become ready
</span><span class='line'>waiting <span class="k">for</span> server to become ready
</span><span class='line'>waiting <span class="k">for</span> server to become ready
</span><span class='line'><span class="o">{</span><span class="s1">&#39;status&#39;</span>: u<span class="s1">&#39;running&#39;</span>, <span class="s1">&#39;hostname&#39;</span>: u<span class="s1">&#39;swarm-manager&#39;</span>, <span class="s1">&#39;public_ip&#39;</span>: u<span class="s1">&#39;51.x.x.x&#39;</span>, <span class="s1">&#39;instance_type&#39;</span>: u<span class="s1">&#39;START1-M&#39;</span>, <span class="s1">&#39;private_ip&#39;</span>: u<span class="s1">&#39;10.x.x.x&#39;</span>, <span class="s1">&#39;id&#39;</span>: u<span class="s1">&#39;xx-xx-xx-xx-xx&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For more info on <a href="https://www.scaleway.com">Scaleway</a> please do check them out: <a href="https://www.scaleway.com">https://www.scaleway.com</a>}</p>
]]></content>
  </entry>
  
</feed>
