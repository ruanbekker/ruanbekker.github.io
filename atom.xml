<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2023-01-29T12:50:43-05:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Everything You Need to Know About Helm]]></title>
    <link href="https://blog.ruanbekker.com/blog/2023/01/24/everything-you-need-to-know-about-helm/"/>
    <updated>2023-01-24T16:02:22-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2023/01/24/everything-you-need-to-know-about-helm</id>
    <content type="html"><![CDATA[<p><img width="965" alt="image" src="https://user-images.githubusercontent.com/567298/214427983-29601304-9930-40b6-bbc6-e2ce68c04c23.png"></p>

<p>Helm, its one amazing piece of software that I use multiple times per day!</p>

<h2>What is Helm?</h2>

<p>You can think of helm as a package manager for kubernetes, but in fact its much more than that.</p>

<p>Think about it in the following way:</p>

<ul>
<li>Kubernetes Package Manager</li>
<li>Way to templatize your applications (this is the part im super excited about)</li>
<li>Easy way to install applications to your kubernetes cluster</li>
<li>Easy way to do upgrades to your applications</li>
<li>Websites such as artifacthub.io provides a nice interface to lookup any application an how to install or upgrade that application.</li>
</ul>


<h2>How does Helm work?</h2>

<p>Helm uses your kubernetes config to connect to your kubernetes cluster. In most cases it utilises the config defined by the <code>KUBECONFIG</code> environment variable, which in most cases points to <code>~/kube/config</code>.</p>

<p>If you want to follow along, you can view the following blog post to provision a kubernetes cluster locally:</p>

<ul>
<li><a href="https://blog.ruanbekker.com/blog/2022/09/20/kind-for-local-kubernetes-clusters/">https://blog.ruanbekker.com/blog/2022/09/20/kind-for-local-kubernetes-clusters/</a></li>
</ul>


<p>Once you have provisioned your kubernetes cluster locally, you can proceed to <a href="https://helm.sh/docs/intro/install/">install helm</a>, I will make the assumption that you are using Mac:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install helm
</span></code></pre></td></tr></table></div></figure>


<p>Once helm has been installed, you can test the installation by listing any helm releases, by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>helm list
</span></code></pre></td></tr></table></div></figure>


<h2>Helm Charts</h2>

<p>Helm uses a packaging format called charts, which is a collection of files that describes a related set of kubernetes resources. A sinlge helm chart m
ight be used to deploy something simple such as a deployment or something complex that deploys a deployment, ingress, horizontal pod autoscaler, etc.</p>

<h2>Using Helm to deploy applications</h2>

<p>So let&rsquo;s assume that we have our kubernetes cluster deployed, and now we are ready to deploy some applications to kubernetes, but we are unsure on how we would do that.</p>

<p>Let&rsquo;s assume we want to install Nginx.</p>

<p>First we would navigate to <a href="https://artifacthub.io">artifacthub.io</a>, which is a repository that holds a bunch of helm charts and the information on how to deploy helm charts to our cluster.</p>

<p>Then we would search for Nginx, which would ultimately let us land on:</p>

<ul>
<li><a href="https://artifacthub.io/packages/helm/bitnami/nginx">https://artifacthub.io/packages/helm/bitnami/nginx</a></li>
</ul>


<p>On this view, we have super useful information such as how to use this helm chart, the default values, etc.</p>

<p>Now that we have identified the chart that we want to install, we can have a look at their readme, which will indicate how to install the chart:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm repo add my-repo https://charts.bitnami.com/bitnami
</span><span class='line'><span class="nv">$ </span>helm install my-release my-repo/nginx
</span></code></pre></td></tr></table></div></figure>


<p>But before we do that, if we think about it, we add a repository, then before we install a release, we could first find information such as the release versions, etc.</p>

<p>So the way I would do it, is to first add the repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm repo add bitnami https://charts.bitnami.com/bitnami
</span></code></pre></td></tr></table></div></figure>


<p>Then since we have added the repository, we can update our repository to ensure that we have the latest release versions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm repo update
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have updated our local repositories, we want to find the release versions, and we can do that by listing the repository in question. For example, if we don&rsquo;t know the application name, we can search by the repository name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm search repo bitnami/ --versions
</span></code></pre></td></tr></table></div></figure>


<p>In this case we will get an output of all the applications that is currently being hosted by Bitnami.</p>

<p>If we know the repository and the release name, we can extend our search by using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm search repo bitnami/nginx --versions
</span></code></pre></td></tr></table></div></figure>


<p>In this case we get an output of all the Nginx release versions that is currently hosted by Bitnami.</p>

<h2>Installing a Helm Release</h2>

<p>Now that we have received a response from <code>helm search repo</code>, we can see that we have different release versions, as example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>NAME                             CHART VERSION   APP VERSION DESCRIPTION
</span><span class='line'>bitnami/nginx                     13.2.22         1.23.3      NGINX Open Source is a web server that can be a...
</span><span class='line'>bitnami/nginx                     13.2.21         1.23.3      NGINX Open Source is a web server that can be a...
</span></code></pre></td></tr></table></div></figure>


<p>For each helm chart, the chart has default values which means, when we install the helm release it will use the default values which is defined by the helm chart.</p>

<p>We have the concept of overriding the default values with a yaml configuration file we usually refer to <code>values.yaml</code>, that we can define the values that we want to override our default values with.</p>

<p>To get the current default values, we can use <code>helm show values</code>, which will look like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm show values bitnami/nginx --version 13.2.22
</span></code></pre></td></tr></table></div></figure>


<p>That will output to standard out, but we can redirect the output to a file using the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm show values bitnami/nginx --version 13.2.22 &gt; nginx-values.yaml
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have redirected the output to <code>nginx-values.yaml</code>, we can inspect the default values using <code>cat nginx-values.yaml</code>, and any values that we see that we want to override, we can edit the yaml file and once we are done we can save it.</p>

<p>Now that we have our override values, we can install a release to our kubernetes cluster.</p>

<p>Let&rsquo;s assume we want to install nginx to our cluster under the name <code>my-nginx</code> and we want to deploy it to the namespace called <code>web-servers</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm upgrade --install my-nginx bitnami/nginx --values nginx-values.yaml --namespace web-servers --create-namespace --version 13.2.22
</span></code></pre></td></tr></table></div></figure>


<p>In the example above, we defined the following:</p>

<ul>
<li><code>upgrade --install</code>                          - meaning we are installing a release, if already exists, do an upgrade</li>
<li><code>my-nginx</code>                                   - use the release name <code>my-nginx</code></li>
<li><code>bitnami/nginx</code>                              - use the repository and chart named nginx</li>
<li><code>--values nginx-values.yaml</code>                 - define the values file with the overrides</li>
<li><code>--namespace web-servers --create-namespace</code> - define the namespace where the release will be installed to, and create the namespace if not exists</li>
<li><code>--version 13.2.22</code>                          - specify the version of the chart to be installed</li>
</ul>


<h2>Information about the release</h2>

<p>We can view information about our release by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm list -n web-servers
</span></code></pre></td></tr></table></div></figure>


<h2>Creating your own helm charts</h2>

<p>It&rsquo;s very common to create your own helm charts when you follow a common pattern in a microservice architecture or something else, where you only want to override specific values such as the container image, etc.</p>

<p>In this case we can create our own helm chart using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir ~/charts
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/charts
</span><span class='line'><span class="nv">$ </span>helm create my-chart
</span></code></pre></td></tr></table></div></figure>


<p>This will create a scaffoliding project with the required information that we need to create our own helm chart. If we look at a tree view, it will look like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tree .
</span><span class='line'>.
</span><span class='line'>└── my-chart
</span><span class='line'>    ├── Chart.yaml
</span><span class='line'>    ├── charts
</span><span class='line'>    ├── templates
</span><span class='line'>    │   ├── NOTES.txt
</span><span class='line'>    │   ├── _helpers.tpl
</span><span class='line'>    │   ├── deployment.yaml
</span><span class='line'>    │   ├── hpa.yaml
</span><span class='line'>    │   ├── ingress.yaml
</span><span class='line'>    │   ├── service.yaml
</span><span class='line'>    │   ├── serviceaccount.yaml
</span><span class='line'>    │   └── tests
</span><span class='line'>    │       └── <span class="nb">test</span>-connection.yaml
</span><span class='line'>    └── values.yaml
</span><span class='line'>
</span><span class='line'><span class="m">4</span> directories, <span class="m">10</span> files
</span></code></pre></td></tr></table></div></figure>


<p>This example chart can already be used, to see what this chart will produce when running it with helm, we can use the <code>helm template</code> command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>my-chart
</span><span class='line'><span class="nv">$ </span>helm template example . --values values.yaml
</span></code></pre></td></tr></table></div></figure>


<p>The output will be something like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="c1"># Source: my-chart/templates/deployment.yaml</span>
</span><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">apps/v1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Deployment</span>
</span><span class='line'><span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">example-my-chart</span>
</span><span class='line'>  <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">helm.sh/chart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-chart-0.1.0</span>
</span><span class='line'>    <span class="l-Scalar-Plain">app.kubernetes.io/name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-chart</span>
</span><span class='line'>    <span class="l-Scalar-Plain">app.kubernetes.io/instance</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">example</span>
</span><span class='line'>    <span class="l-Scalar-Plain">app.kubernetes.io/version</span><span class="p-Indicator">:</span> <span class="s">&quot;1.16.0&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">app.kubernetes.io/managed-by</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Helm</span>
</span><span class='line'><span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">replicas</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>  <span class="l-Scalar-Plain">template</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">containers</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-chart</span>
</span><span class='line'>          <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="s">&quot;nginx:1.16.0&quot;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">...</span>
</span><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="nn">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>In our example it will create a service account, service, deployment, etc.</p>

<p>As you can see the <code>spec.template.spec.containers[].image</code> is set to <code>nginx:1.16.0</code>, and to see how that was computed, we can have a look at <code>templates/deployment.yaml</code>:</p>

<script src="https://gist.github.com/ruanbekker/908dfeef90ef6edf8d2e40dc6c49bebf.js"></script>


<p>As you can see in <code>image:</code> section we have <code>.Values.image.repository</code> and <code>.Values.image.tag</code>, and those values are being retrieved from the <code>values.yaml</code> file, and when we look at the <code>values.yaml</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">repository</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nginx</span>
</span><span class='line'>  <span class="l-Scalar-Plain">pullPolicy</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">IfNotPresent</span>
</span><span class='line'>  <span class="c1"># Overrides the image tag whose default is the chart appVersion.</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tag</span><span class="p-Indicator">:</span> <span class="s">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we want to override the image repository and image tag, we can update the <code>values.yaml</code> file to lets say:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">repository</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">busybox</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tag</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">latest</span>
</span><span class='line'>  <span class="l-Scalar-Plain">pullPolicy</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">IfNotPresent</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we run our helm template command again, we can see that the computed values changed to what we want:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm template example . --values values.yaml
</span><span class='line'>---
</span><span class='line'><span class="c"># Source: my-chart/templates/deployment.yaml</span>
</span><span class='line'>apiVersion: apps/v1
</span><span class='line'>kind: Deployment
</span><span class='line'>metadata:
</span><span class='line'>  name: example-my-chart
</span><span class='line'>spec:
</span><span class='line'>  replicas: 1
</span><span class='line'>  template:
</span><span class='line'>    spec:
</span><span class='line'>      containers:
</span><span class='line'>        - name: my-chart
</span><span class='line'>          image: <span class="s2">&quot;busybox:latest&quot;</span>
</span><span class='line'>          imagePullPolicy: IfNotPresent
</span><span class='line'>      ...
</span></code></pre></td></tr></table></div></figure>


<p>Another way is to use <code>--set</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm template example . --values values.yaml --set image.repository<span class="o">=</span>ruanbekker/containers,image.tag<span class="o">=</span>curl
</span><span class='line'>spec:
</span><span class='line'>  template:
</span><span class='line'>    spec:
</span><span class='line'>      containers:
</span><span class='line'>        - name: my-chart
</span><span class='line'>          image: <span class="s2">&quot;ruanbekker/containers:curl&quot;</span>
</span><span class='line'>      ...
</span></code></pre></td></tr></table></div></figure>


<p>The template subcommand provides a great way to debug your charts. To learn more about helm charts, view their <a href="https://helm.sh/docs/topics/charts/">documentation</a>.</p>

<h2>Publish your Helm Chart to ChartMuseum</h2>

<p><a href="https://chartmuseum.com/">ChartMuseum</a> is an open-source Helm Chart Repository server written in Go.</p>

<p>Running chartmuseum demonstration will be done locally on my workstation using Docker. To run the server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run --rm -it <span class="se">\</span>
</span><span class='line'>  -p 8080:8080 <span class="se">\</span>
</span><span class='line'>  -e <span class="nv">DEBUG</span><span class="o">=</span><span class="m">1</span> <span class="se">\</span>
</span><span class='line'>  -e <span class="nv">STORAGE</span><span class="o">=</span><span class="nb">local</span> <span class="se">\</span>
</span><span class='line'>  -e <span class="nv">STORAGE_LOCAL_ROOTDIR</span><span class="o">=</span>/charts <span class="se">\</span>
</span><span class='line'>  -v <span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>/charts:/charts <span class="se">\</span>
</span><span class='line'>  ghcr.io/helm/chartmuseum:v0.14.0
</span></code></pre></td></tr></table></div></figure>


<p>Now that ChartMuseum is running, we will need to install a helm plugin called <code>helm-push</code> which helps to push charts to our chartmusuem repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm plugin install https://github.com/chartmuseum/helm-push
</span></code></pre></td></tr></table></div></figure>


<p>We can verify if our plugin was installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm plugin list
</span><span class='line'>NAME      VERSION DESCRIPTION
</span><span class='line'>cm-push   0.10.3  Push chart package to ChartMuseum
</span></code></pre></td></tr></table></div></figure>


<p>Now we add our chartmuseum helm chart repository, which we will call <code>cm-local</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm repo add cm-local http://localhost:8080/
</span></code></pre></td></tr></table></div></figure>


<p>We can list our helm repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm repo list
</span><span class='line'>NAME                  URL
</span><span class='line'>cm-local              http://localhost:8080/
</span></code></pre></td></tr></table></div></figure>


<p>Now that our helm repository has been added, we can push our helm chart to our helm chart repository. Ensure that we are in our chart repository directory, where the <code>Chart.yaml</code> file should be in our current directory. We need this file as it holds metadata about our chart.</p>

<p>We can view the <code>Chart.yaml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">v2</span>
</span><span class='line'><span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-chart</span>
</span><span class='line'><span class="l-Scalar-Plain">description</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">A Helm chart for Kubernetes</span>
</span><span class='line'><span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">application</span>
</span><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0.1.0</span>
</span><span class='line'><span class="l-Scalar-Plain">appVersion</span><span class="p-Indicator">:</span> <span class="s">&quot;1.16.0&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Push the helm chart to chartmuseum:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm cm-push . http://localhost:8080/ --version 0.0.1
</span><span class='line'>Pushing my-chart-0.0.1.tgz to http://localhost:8080/...
</span><span class='line'>Done.
</span></code></pre></td></tr></table></div></figure>


<p>Now we should update our repositories so that we can get the latest changes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm repo update
</span></code></pre></td></tr></table></div></figure>


<p>Now we can list the charts under our repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm search repo cm-local/
</span><span class='line'>NAME              CHART VERSION   APP VERSION DESCRIPTION
</span><span class='line'>cm-local/my-chart 0.0.1           1.16.0      A Helm chart <span class="k">for</span> Kubernetes
</span></code></pre></td></tr></table></div></figure>


<p>We can now get the values for our helm chart by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm show values cm-local/my-chart
</span></code></pre></td></tr></table></div></figure>


<p>This returns the values yaml that we can use for our chart, so let&rsquo;s say you want to output the values yaml so that we can use to to deploy a release we can do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm show values cm-local/my-chart &gt; my-values.yaml
</span></code></pre></td></tr></table></div></figure>


<p>Now when we want to deploy a release, we can do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm upgrade --install my-release cm-local/my-chart --values my-values.yaml --namespace <span class="nb">test</span> --create-namespace --version 0.0.1
</span></code></pre></td></tr></table></div></figure>


<p>After the release was deployed, we can list the releases by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm list
</span></code></pre></td></tr></table></div></figure>


<p>And to view the release history:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>helm <span class="nb">history </span>my-release
</span></code></pre></td></tr></table></div></figure>


<h2>Resources</h2>

<p>Please find the following information with regards to Helm documentation:
- <a href="https://helm.sh/docs/">helm docs</a>
- <a href="https://helm.sh/docs/chart_template_guide/">helm cart template guide</a></p>

<p>If you need a kubernetes cluster and you would like to run this locally, find the following documentation in order to do that:
- <a href="https://blog.ruanbekker.com/blog/2022/09/20/kind-for-local-kubernetes-clusters/">using kind for local kubernetes clusters</a></p>

<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>

<ul>
<li>Linktree: <a href="https://go.ruan.dev/links">https://go.ruan.dev/links</a></li>
<li>Patreon: <a href="https://go.ruan.dev/patreon">https://go.ruan.dev/patreon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Wiremock]]></title>
    <link href="https://blog.ruanbekker.com/blog/2023/01/14/getting-started-with-wiremock/"/>
    <updated>2023-01-14T17:03:12-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2023/01/14/getting-started-with-wiremock</id>
    <content type="html"><![CDATA[<p>In this tutorial we will use docker to run an instance of wiremock to setup a mock api for us to test our api&rsquo;s.</p>

<h2>Wiremock</h2>

<p><a href="https://wiremock.org/">Wiremock</a> is a tool for building mock API&rsquo;s which enables us to build stable development environments.</p>

<h2>Docker and Wiremock</h2>

<p>Run a wiremock instance with docker:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run -it --rm -p 8080:8080 --name wiremock wiremock/wiremock:2.34.0
</span></code></pre></td></tr></table></div></figure>


<p>Then our wiremock instance will be exposed on port 8080 locally, which we can use to make a request against to create a api mapping:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -XPOST -H <span class="s2">&quot;Content-Type: application/json&quot;</span> <span class="se">\</span>
</span><span class='line'>  http://localhost:8080/__admin/mappings
</span><span class='line'>  -d <span class="s1">&#39;{&quot;request&quot;: {&quot;url&quot;: &quot;/testapi&quot;,&quot;method&quot;: &quot;GET&quot;}, &quot;response&quot;: {&quot;status&quot;: 200, &quot;body&quot;: &quot;{\&quot;result\&quot;: \&quot;ok\&quot;</span>
</span><span class='line'><span class="s1">}&quot;, &quot;headers&quot;: {&quot;Content-Type&quot;: &quot;application/json&quot;}}}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The response should be something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span> <span class="p">:</span> <span class="s2">&quot;223a2c0a-8b43-42dc-8ba6-fe973da1e420&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;request&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;url&quot;</span> <span class="p">:</span> <span class="s2">&quot;/testapi&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;method&quot;</span> <span class="p">:</span> <span class="s2">&quot;GET&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;response&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;status&quot;</span> <span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;body&quot;</span> <span class="p">:</span> <span class="s2">&quot;{\&quot;result\&quot;: \&quot;ok\&quot;}&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;headers&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Content-Type&quot;</span> <span class="p">:</span> <span class="s2">&quot;application/json&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;uuid&quot;</span> <span class="p">:</span> <span class="s2">&quot;223a2c0a-8b43-42dc-8ba6-fe973da1e420&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Test Wiremock</h2>

<p>If we make a GET request against our API:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl http://localhost:8080/testapi
</span></code></pre></td></tr></table></div></figure>


<p>Our response should be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;result&quot;</span><span class="p">:</span> <span class="s2">&quot;ok&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Export Wiremock Mappings</h2>

<p>We can export our mappings to a local file named <code>stubs.json</code> with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -s http://localhost:8080/__admin/mappings --output stubs.json
</span></code></pre></td></tr></table></div></figure>


<h2>Import Wiremock Mappings</h2>

<p>We can import our mappings from our <code>stubs.json</code> file with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -XPOST -v --data-binary @stubs.json http://localhost:8080/__admin/mappings/import
</span></code></pre></td></tr></table></div></figure>


<h2>Resources</h2>

<ul>
<li><a href="https://wiremock.org/docs/docker/">https://wiremock.org/docs/docker/</a></li>
<li><a href="https://github.com/WireMock-Net/WireMock.Net/wiki/Admin-API-Reference">https://github.com/WireMock-Net/WireMock.Net/wiki/Admin-API-Reference</a></li>
</ul>


<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>

<ul>
<li>Linktree: <a href="https://go.ruan.dev/links">https://go.ruan.dev/links</a></li>
<li>Patreon: <a href="https://go.ruan.dev/patreon">https://go.ruan.dev/patreon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logging With Docker Promtail and Grafana Loki]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/11/18/logging-with-docker-promtail-and-grafana-loki/"/>
    <updated>2022-11-18T00:42:49-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/11/18/logging-with-docker-promtail-and-grafana-loki</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/202631247-4ee94f01-b34a-471f-b428-6aba80b31e8c.png" alt="grafana-loki-promtail" /></p>

<p>In this post we will use Grafana Promtail to collect all our logs and ship it to Grafana Loki.</p>

<h2>About</h2>

<p>We will be using Docker Compose and mount the docker socket to Grafana Promtail so that it is aware of all the docker events and configure it that only containers with docker labels <code>logging=promtail</code> needs to be enabled for logging, which will then scrape those logs and send it to Grafana Loki where we will visualize it in Grafana.</p>

<h2>Promtail</h2>

<p>In our promtail configuration <code>config/promtail.yaml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># https://grafana.com/docs/loki/latest/clients/promtail/configuration/</span>
</span><span class='line'><span class="c1"># https://docs.docker.com/engine/api/v1.41/#operation/ContainerList</span>
</span><span class='line'><span class="l-Scalar-Plain">server</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">http_listen_port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">9080</span>
</span><span class='line'>  <span class="l-Scalar-Plain">grpc_listen_port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">positions</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">filename</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/tmp/positions.yaml</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">clients</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://loki:3100/loki/api/v1/push</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">scrape_configs</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">job_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">flog_scrape</span>
</span><span class='line'>    <span class="l-Scalar-Plain">docker_sd_configs</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">unix:///var/run/docker.sock</span>
</span><span class='line'>        <span class="l-Scalar-Plain">refresh_interval</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5s</span>
</span><span class='line'>        <span class="l-Scalar-Plain">filters</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">label</span>
</span><span class='line'>            <span class="l-Scalar-Plain">values</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;logging=promtail&quot;</span><span class="p-Indicator">]</span>
</span><span class='line'>    <span class="l-Scalar-Plain">relabel_configs</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">source_labels</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&#39;__meta_docker_container_name&#39;</span><span class="p-Indicator">]</span>
</span><span class='line'>        <span class="l-Scalar-Plain">regex</span><span class="p-Indicator">:</span> <span class="s">&#39;/(.*)&#39;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">target_label</span><span class="p-Indicator">:</span> <span class="s">&#39;container&#39;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">source_labels</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&#39;__meta_docker_container_log_stream&#39;</span><span class="p-Indicator">]</span>
</span><span class='line'>        <span class="l-Scalar-Plain">target_label</span><span class="p-Indicator">:</span> <span class="s">&#39;logstream&#39;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">source_labels</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&#39;__meta_docker_container_label_logging_jobname&#39;</span><span class="p-Indicator">]</span>
</span><span class='line'>        <span class="l-Scalar-Plain">target_label</span><span class="p-Indicator">:</span> <span class="s">&#39;job&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see we are using the <code>docker_sd_configs</code> provider and filter only docker containers with the docker labels <code>logging=promtail</code> and once we have those logs we relabel our labels to have the container name and we also use docker labels like <code>log_stream</code> and <code>logging_jobname</code> to add labels to our logs.</p>

<h2>Grafana Config</h2>

<p>We would like to auto configure our datasources for Grafana and in <code>config/grafana-datasources.yml</code> we have:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">datasources</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Loki</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">loki</span>
</span><span class='line'>    <span class="l-Scalar-Plain">access</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">proxy</span>
</span><span class='line'>    <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://loki:3100</span>
</span><span class='line'>    <span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>    <span class="l-Scalar-Plain">editable</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>    <span class="l-Scalar-Plain">isDefault</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Docker Compose</h2>

<p>Then lastly we have our <code>docker-compose.yml</code> that wire up all our containers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&#39;3.8&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">nginx-app</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nginx-app</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nginx</span>
</span><span class='line'>    <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">logging</span><span class="p-Indicator">:</span> <span class="s">&quot;promtail&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">logging_jobname</span><span class="p-Indicator">:</span> <span class="s">&quot;containerlogs&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">8080:80</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">app</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">grafana</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">grafana/grafana:latest</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">3000:3000</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yaml</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">GF_AUTH_ANONYMOUS_ENABLED=true</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">GF_AUTH_ANONYMOUS_ORG_ROLE=Admin</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">GF_AUTH_DISABLE_LOGIN_FORM=true</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">app</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">loki</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">grafana/loki:latest</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">3100:3100</span>
</span><span class='line'>    <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">-config.file=/etc/loki/local-config.yaml</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">app</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">promtail</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span>  <span class="l-Scalar-Plain">grafana/promtail:latest</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">promtail</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./config/promtail.yaml:/etc/promtail/docker-config.yaml</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/var/lib/docker/containers:/var/lib/docker/containers:ro</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/var/run/docker.sock:/var/run/docker.sock</span>
</span><span class='line'>    <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">-config.file=/etc/promtail/docker-config.yaml</span>
</span><span class='line'>    <span class="l-Scalar-Plain">depends_on</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">loki</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">app</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">app</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see with our nginx container we define our labels:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'>  <span class="l-Scalar-Plain">nginx-app</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nginx-app</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nginx</span>
</span><span class='line'>    <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">logging</span><span class="p-Indicator">:</span> <span class="s">&quot;promtail&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">logging_jobname</span><span class="p-Indicator">:</span> <span class="s">&quot;containerlogs&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which uses <code>logging: "promtail"</code> to let promtail know this log container&rsquo;s log to be scraped and <code>logging_jobname: "containerlogs"</code> which will assign containerlogs to the job label.</p>

<h2>Start the stack</h2>

<p>If you are following along all this configuration is available in my github repository <a href="https://github.com/ruanbekker/docker-promtail-loki">https://github.com/ruanbekker/docker-promtail-loki</a> .</p>

<p>Once you have everything in place you can start it with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-compose up -d
</span></code></pre></td></tr></table></div></figure>


<p>Access nginx on <a href="http://localhost:8080">http://localhost:8080</a></p>

<p><img width="1113" alt="image" src="https://user-images.githubusercontent.com/567298/202505252-3cbc2d03-d1d2-48e6-bea7-5db54233b9a2.png"></p>

<p>Then navigate to grafana on <a href="http://localhost:3000">http://localhost:3000</a> and select explore on the left and select the container:</p>

<p><img width="560" alt="image" src="https://user-images.githubusercontent.com/567298/202504989-e05a08a2-eb2f-41a1-85f4-9a11a8affd7c.png"></p>

<p>And you will see the logs:</p>

<p><img width="1425" alt="image" src="https://user-images.githubusercontent.com/567298/202505099-c47b76cc-3090-4eb9-8459-db659d0aac18.png"></p>

<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>

<ul>
<li>Linktree: <a href="https://go.ruan.dev/links">https://go.ruan.dev/links</a></li>
<li>Patreon: <a href="https://go.ruan.dev/patreon">https://go.ruan.dev/patreon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KinD for Local Kubernetes Clusters]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/09/20/kind-for-local-kubernetes-clusters/"/>
    <updated>2022-09-20T02:18:16-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/09/20/kind-for-local-kubernetes-clusters</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/191189852-44f2fd39-7ad7-4d0a-a36b-c2889a838649.png" alt="kubernetes-kind" /></p>

<p>In this tutorial we will demonstrate how to use KinD (Kubernetes in Docker) to provision local kubernetes clusters for local development.</p>

<h2>About</h2>

<p>KinD uses container images to run as &ldquo;nodes&rdquo;, so spinning up and tearing down clusters becomes really easy or running multiple or different versions, is as easy as pointing to a different container image.</p>

<p>Configuration such as node count, ports, volumes, image versions can either be controlled via the command line or via configuration, more information on that can be found on their documentation:</p>

<ul>
<li><a href="https://kind.sigs.k8s.io/docs/user/quick-start/">https://kind.sigs.k8s.io/docs/user/quick-start/</a></li>
<li><a href="https://kind.sigs.k8s.io/docs/user/configuration/">https://kind.sigs.k8s.io/docs/user/configuration/</a></li>
</ul>


<h2>Installation</h2>

<p>Follow the <a href="https://kind.sigs.k8s.io/docs/user/quick-start/#installing-with-a-package-manager">docs</a> for more information, but for mac:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install kind
</span></code></pre></td></tr></table></div></figure>


<p>To verify if kind was installed, you can run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kind version
</span></code></pre></td></tr></table></div></figure>


<h2>Create a Cluster</h2>

<p>Create the cluster with command line arguments, such as cluster name, the container image:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kind create cluster --name cluster-1 --image kindest/node:v1.24.0
</span></code></pre></td></tr></table></div></figure>


<p>And the output will look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Creating cluster <span class="s2">&quot;cluster-1&quot;</span> ...
</span><span class='line'> ✓ Ensuring node image <span class="o">(</span>kindest/node:v1.24.0<span class="o">)</span> 🖼
</span><span class='line'> ✓ Preparing nodes 📦
</span><span class='line'> ✓ Writing configuration 📜
</span><span class='line'> ✓ Starting control-plane 🕹️
</span><span class='line'> ✓ Installing CNI 🔌
</span><span class='line'> ✓ Installing StorageClass 💾
</span><span class='line'>Set kubectl context to <span class="s2">&quot;kind-cluster-1&quot;</span>
</span><span class='line'>You can now use your cluster with:
</span><span class='line'>
</span><span class='line'>kubectl cluster-info --context kind-cluster-1
</span><span class='line'>
</span><span class='line'>Have a question, bug, or feature request? Let us know! https://kind.sigs.k8s.io/#community 🙂
</span></code></pre></td></tr></table></div></figure>


<p>I <strong>highly recommend</strong> installing <a href="https://github.com/ahmetb/kubectx">kubectx</a>, which makes it easy to switch between kubernetes contexts.</p>

<h2>Create a Cluster with Config</h2>

<p>If you would like to define your cluster configuration as config, you can create a file <code>default-config.yaml</code> with the following as a 2 node cluster, and specifying version 1.24.0:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Cluster</span>
</span><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">kind.x-k8s.io/v1alpha4</span>
</span><span class='line'><span class="l-Scalar-Plain">nodes</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">role</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">control-plane</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">kindest/node:v1.24.0@sha256:0866296e693efe1fed79d5e6c7af8df71fc73ae45e3679af05342239cdc5bc8e</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">role</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">worker</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">kindest/node:v1.24.0@sha256:0866296e693efe1fed79d5e6c7af8df71fc73ae45e3679af05342239cdc5bc8e</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then create the cluster and point the config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kind create cluster --name kind-cluster --config default-config.yaml
</span></code></pre></td></tr></table></div></figure>


<h2>Interact with the Cluster</h2>

<p>View the cluster info:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl cluster-info --context kind-kind-cluster
</span></code></pre></td></tr></table></div></figure>


<p>View cluster contexts:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl config get-contexts
</span></code></pre></td></tr></table></div></figure>


<p>Use context:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl config use-context kind-kind-cluster
</span></code></pre></td></tr></table></div></figure>


<p>View nodes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl get nodes -o wide
</span><span class='line'>
</span><span class='line'>NAME                         STATUS   ROLES           AGE     VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE       KERNEL-VERSION      CONTAINER-RUNTIME
</span><span class='line'>kind-cluster-control-plane   Ready    control-plane   2m11s   v1.24.0   172.20.0.5    &lt;none&gt;        Ubuntu 21.10   5.10.104-linuxkit   containerd://1.6.4
</span><span class='line'>kind-cluster-worker          Ready    &lt;none&gt;          108s    v1.24.0   172.20.0.4    &lt;none&gt;        Ubuntu 21.10   5.10.104-linuxkit   containerd://1.6.4
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy Sample Application</h2>

<p>We will create a deployment, a service and port-forward to our service to access our application. You can also specify port configuration to your cluster so that you don&rsquo;t need to port-forward, which you can find in their <a href="https://kind.sigs.k8s.io/docs/user/configuration/#extra-port-mappings">port mappings documentation</a></p>

<p>I will be using the following commands to generate the manifests, but will also add them to this post:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl create deployment hostname --namespace default --replicas <span class="m">2</span> --image ruanbekker/containers:hostname --port <span class="m">8080</span> --dry-run<span class="o">=</span>client -o yaml &gt; hostname-deployment.yaml
</span><span class='line'>kubectl expose deployment hostname --namespace default --port<span class="o">=</span><span class="m">80</span> --target-port<span class="o">=</span><span class="m">8080</span> --name<span class="o">=</span>hostname-http --dry-run<span class="o">=</span>client -o yaml &gt; hostname-service.yaml
</span></code></pre></td></tr></table></div></figure>


<p>The manifest:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">apps/v1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Deployment</span>
</span><span class='line'><span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">creationTimestamp</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">null</span>
</span><span class='line'>  <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hostname</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hostname</span>
</span><span class='line'>  <span class="l-Scalar-Plain">namespace</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">default</span>
</span><span class='line'><span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">replicas</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2</span>
</span><span class='line'>  <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">matchLabels</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hostname</span>
</span><span class='line'>  <span class="l-Scalar-Plain">strategy</span><span class="p-Indicator">:</span> <span class="p-Indicator">{}</span>
</span><span class='line'>  <span class="l-Scalar-Plain">template</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">creationTimestamp</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">null</span>
</span><span class='line'>      <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hostname</span>
</span><span class='line'>    <span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">containers</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ruanbekker/containers:hostname</span>
</span><span class='line'>        <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">containers</span>
</span><span class='line'>        <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">containerPort</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">8080</span>
</span><span class='line'>        <span class="l-Scalar-Plain">resources</span><span class="p-Indicator">:</span> <span class="p-Indicator">{}</span>
</span><span class='line'><span class="l-Scalar-Plain">status</span><span class="p-Indicator">:</span> <span class="p-Indicator">{}</span>
</span><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">v1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Service</span>
</span><span class='line'><span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">creationTimestamp</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">null</span>
</span><span class='line'>  <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hostname</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hostname-http</span>
</span><span class='line'>  <span class="l-Scalar-Plain">namespace</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">default</span>
</span><span class='line'><span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">80</span>
</span><span class='line'>    <span class="l-Scalar-Plain">protocol</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">TCP</span>
</span><span class='line'>    <span class="l-Scalar-Plain">targetPort</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">8080</span>
</span><span class='line'>  <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hostname</span>
</span><span class='line'><span class="l-Scalar-Plain">status</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">loadBalancer</span><span class="p-Indicator">:</span> <span class="p-Indicator">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then apply them with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl apply -f &lt;name-of-manifest&gt;.yaml
</span></code></pre></td></tr></table></div></figure>


<p>Or if you used kubectl to create them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl apply -f hostname-deployment.yaml
</span><span class='line'>kubectl apply -f hostname-service.yaml
</span></code></pre></td></tr></table></div></figure>


<p>You can then view your resources with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl get deployment,pod,service
</span><span class='line'>
</span><span class='line'>NAME                       READY   UP-TO-DATE   AVAILABLE   AGE
</span><span class='line'>deployment.apps/hostname   2/2     <span class="m">2</span>            <span class="m">2</span>           9m27s
</span><span class='line'>
</span><span class='line'>NAME                            READY   STATUS    RESTARTS   AGE
</span><span class='line'>pod/hostname-7ff58c5644-67vhq   1/1     Running   <span class="m">0</span>          9m27s
</span><span class='line'>pod/hostname-7ff58c5644-wjjbw   1/1     Running   <span class="m">0</span>          9m27s
</span><span class='line'>
</span><span class='line'>NAME                    TYPE        CLUSTER-IP     EXTERNAL-IP   PORT<span class="o">(</span>S<span class="o">)</span>   AGE
</span><span class='line'>service/hostname-http   ClusterIP   10.96.218.58   &lt;none&gt;        80/TCP    5m48s
</span><span class='line'>service/kubernetes      ClusterIP   10.96.0.1      &lt;none&gt;        443/TCP   24m
</span></code></pre></td></tr></table></div></figure>


<p>Port forward to your service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kubectl port-forward svc/hostname-http 8080:80
</span></code></pre></td></tr></table></div></figure>


<p>Then access your application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl http://localhost:8080/
</span><span class='line'>
</span><span class='line'>Hostname: hostname-7ff58c5644-wjjbw
</span></code></pre></td></tr></table></div></figure>


<h2>Delete Kind Cluster</h2>

<p>View the clusters:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kind get clusters
</span></code></pre></td></tr></table></div></figure>


<p>Delete a cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kind delete cluster --name kind-cluster
</span></code></pre></td></tr></table></div></figure>


<h2>Extras</h2>

<p>I highly recommend using <code>kubectx</code> to switch contexts and <code>kubens</code> to set the default namespace, and aliases:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">k</span><span class="o">=</span>kubectl
</span><span class='line'><span class="nb">alias </span><span class="nv">kx</span><span class="o">=</span>kubectx
</span><span class='line'><span class="nb">alias </span><span class="nv">kns</span><span class="o">=</span>kubens
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>

<ul>
<li>Linktree: <a href="https://go.ruan.dev/links">https://go.ruan.dev/links</a></li>
<li>Patreon: <a href="https://go.ruan.dev/patreon">https://go.ruan.dev/patreon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ansible Playbook for Your Macbook Homebrew Packages]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/08/28/ansible-playbook-for-your-macbook-homebrew-packages/"/>
    <updated>2022-08-28T19:14:54-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/08/28/ansible-playbook-for-your-macbook-homebrew-packages</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/ansible-macbook.png" alt="ansible-macbook-homebrew" /></p>

<p>In this tutorial I will demonstrate how to use Ansible for Homebrew Configuration Management. The aim for using Ansible to manage your homebrew packages helps you to have a consistent list of packages on your macbook.</p>

<p>For me personally, when I get a new laptop it&rsquo;s always a mission to get the same packages installed as what I had before, and ansible solves that for us to have all our packages defined in configuration management.</p>

<h2>Install Ansible</h2>

<p>Install ansible with python and pip:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python3 -m pip install <span class="nv">ansible</span><span class="o">==</span>4.9.0
</span></code></pre></td></tr></table></div></figure>


<h2>Ansible Configuration</h2>

<p>Create the <code>ansible.cfg</code> configuration file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>defaults<span class="o">]</span>
</span><span class='line'><span class="nv">inventory</span> <span class="o">=</span> inventory.ini
</span><span class='line'><span class="nv">deprecation_warnings</span> <span class="o">=</span> False
</span></code></pre></td></tr></table></div></figure>


<p>Our <code>inventory.ini</code> will define the information about our target host, which will be localhost as we are using ansible to run against our local target which is our macbook:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>localhost<span class="o">]</span>
</span><span class='line'>my.laptop  <span class="nv">ansible_connection</span><span class="o">=</span><span class="nb">local</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>localhost:vars<span class="o">]</span>
</span><span class='line'><span class="nv">ansible_python_interpreter</span> <span class="o">=</span> /usr/bin/python3
</span></code></pre></td></tr></table></div></figure>


<h2>Ansible Playbook</h2>

<p>Our playbook <code>homebrew.yaml</code> will define the tasks to add the homebrew taps, cask packages and homebrew packages. You can change the packages as you desire, but these are the ones that I use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Macbook Playbook</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gather_facts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">False</span>
</span><span class='line'>  <span class="l-Scalar-Plain">vars</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">TFENV_ARCH</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">amd64</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Ensures taps are present via homebrew</span>
</span><span class='line'>      <span class="l-Scalar-Plain">community.general.homebrew_tap</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">state</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">present</span>
</span><span class='line'>      <span class="l-Scalar-Plain">with_items</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hashicorp/tap</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Ensures packages are present via homebrew cask</span>
</span><span class='line'>      <span class="l-Scalar-Plain">community.general.homebrew_cask</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">state</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">present</span>
</span><span class='line'>        <span class="l-Scalar-Plain">install_options</span><span class="p-Indicator">:</span> <span class="s">&#39;appdir=/Applications&#39;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">with_items</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">visual-studio-code</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">multipass</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">spotify</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Ensures packages are present via homebrew</span>
</span><span class='line'>      <span class="l-Scalar-Plain">community.general.homebrew</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="s">&quot;/Applications&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">state</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">present</span>
</span><span class='line'>      <span class="l-Scalar-Plain">with_items</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">openssl</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">readline</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">sqlite3</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">xz</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">zlib</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">jq</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">yq</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">wget</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">go</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">kubernetes-cli</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">fzf</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">sshuttle</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hugo</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">helm</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">kind</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">awscli</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">gnupg</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">kubectx</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">helm</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">stern</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">terraform</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">tfenv</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">pyenv</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">jsonnet</span>
</span><span class='line'>      <span class="l-Scalar-Plain">ignore_errors</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class='line'>      <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">packages</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy Playbook</h2>

<p>Now you can run the playbook using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ansible-playbook homebrew.yaml
</span></code></pre></td></tr></table></div></figure>


<h2>Source Code</h2>

<p>The code can be found in my github repository:
- <a href="https://github.com/ruanbekker/ansible-macbook-setup">https://github.com/ruanbekker/ansible-macbook-setup</a></p>

<h2>Thanks</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Multistage Builds for Hugo]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/07/31/docker-multistage-builds-for-hugo/"/>
    <updated>2022-07-31T02:23:51-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/07/31/docker-multistage-builds-for-hugo</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/182013196-aff6e76f-2cf3-4ec2-bfcc-3e977915a6aa.png" alt="blog-ruanbekker-multistage-builds" /></p>

<p>In this tutorial I will demonstrate how to keep your docker <strong>container images</strong> nice and <strong>slim</strong> with the use of <strong>multistage builds</strong> for a <strong>hugo</strong> documentation project.</p>

<p>Hugo is a static content generator so essentially that means that it will <strong>generate your markdown files into html</strong>. Therefore we don&rsquo;t need to include all the content from our project repository as we only need the static content (html, css, javascript) to reside on our <strong>final container image</strong>.</p>

<h2>What are we doing today</h2>

<p>We will use the <strong><a href="https://github.com/h-enk/doks">DOKS</a></strong> Modern Documentation theme for <strong><a href="https://gohugo.io/">Hugo</a></strong> as our project example, where we will build and run our documentation website on a docker container, but more importantly make use of multistage builds to <strong>optimize the size</strong> of our <strong>container image</strong>.</p>

<h2>Our Build Strategy</h2>

<p>Since hugo is a static content generator, we will use a <strong><a href="https://hub.docker.com/_/node">node</a></strong> container image as our base. We will then build and generate the content using <code>npm run build</code> which will generate the static content to <code>/src/public</code> in our build stage.</p>

<p>Since we then have static content, we can utilize a second stage using a <strong><a href="https://hub.docker.com/_/nginx">nginx</a></strong> container image with the purpose of a <strong>web server</strong> to host our <strong>static content</strong>. We will copy the static content from our <code>build</code> stage into our second stage and place it under our defined path in our nginx config.</p>

<p>This way we only include the required content on our final container image.</p>

<h2>Building our Container Image</h2>

<p>First clone the <a href="https://github.com/h-enk/doks">docs github repository</a> and change to the directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/h-enk/doks
</span><span class='line'><span class="nb">cd </span>doks
</span></code></pre></td></tr></table></div></figure>


<p>Now create a <code>Dockerfile</code> in the root path with the following content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='dockerfile'><span class='line'><span class="k">FROM</span> node:16.15.1 as build
</span><span class='line'><span class="k">WORKDIR</span> /src
</span><span class='line'><span class="k">ADD</span> . .
</span><span class='line'><span class="k">RUN</span> npm install
</span><span class='line'><span class="k">RUN</span> npm run build
</span><span class='line'>
</span><span class='line'><span class="k">FROM</span>  nginx:alpine
</span><span class='line'>LABEL demonstration.by Ruan Bekker &lt;@ruanbekker&gt;
</span><span class='line'>COPY  nginx/config/nginx.conf /etc/nginx/nginx.conf
</span><span class='line'>COPY  nginx/config/app.conf /etc/nginx/conf.d/app.conf
</span><span class='line'>COPY  --from<span class="o">=</span>build /src/public /usr/share/nginx/app
</span></code></pre></td></tr></table></div></figure>


<p>As we can see we are copying two nginx config files to our final image, which we will need to create.</p>

<p>Create the nginx config directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p nginx/config
</span></code></pre></td></tr></table></div></figure>


<p>The content for our main nginx config <code>nginx/config/nginx.conf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>user  nginx<span class="p">;</span>
</span><span class='line'>worker_processes  auto<span class="p">;</span>
</span><span class='line'>error_log  /var/log/nginx/error.log notice<span class="p">;</span>
</span><span class='line'>pid        /var/run/nginx.pid<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>events <span class="o">{</span>
</span><span class='line'>    worker_connections  1024<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>http <span class="o">{</span>
</span><span class='line'>    include       /etc/nginx/mime.types<span class="p">;</span>
</span><span class='line'>    default_type  application/octet-stream<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    log_format  main  <span class="s1">&#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span>
</span><span class='line'>                      <span class="s1">&#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span>
</span><span class='line'>                      <span class="s1">&#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    access_log  /var/log/nginx/access.log  main<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    sendfile        on<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># timeouts</span>
</span><span class='line'>    client_body_timeout 12<span class="p">;</span>
</span><span class='line'>    client_header_timeout 12<span class="p">;</span>
</span><span class='line'>    keepalive_timeout  25<span class="p">;</span>
</span><span class='line'>    send_timeout 10<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># buffer size</span>
</span><span class='line'>    client_body_buffer_size 10K<span class="p">;</span>
</span><span class='line'>    client_header_buffer_size 1k<span class="p">;</span>
</span><span class='line'>    client_max_body_size 8m<span class="p">;</span>
</span><span class='line'>    large_client_header_buffers <span class="m">4</span> 4k<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># gzip compression</span>
</span><span class='line'>    gzip  on<span class="p">;</span>
</span><span class='line'>    gzip_vary on<span class="p">;</span>
</span><span class='line'>    gzip_min_length 10240<span class="p">;</span>
</span><span class='line'>    gzip_proxied expired no-cache no-store private auth<span class="p">;</span>
</span><span class='line'>    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml<span class="p">;</span>
</span><span class='line'>    gzip_disable <span class="s2">&quot;MSIE [1-6]\.&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    include /etc/nginx/conf.d/app.conf<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in our main nginx config we are including a virtual host config <code>app.conf</code>, which we will create locally, and the content of <code>nginx/config/app.conf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>server <span class="o">{</span>
</span><span class='line'>    listen       80<span class="p">;</span>
</span><span class='line'>    server_name  localhost<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    location / <span class="o">{</span>
</span><span class='line'>        root   /usr/share/nginx/app<span class="p">;</span>
</span><span class='line'>        index  index.html index.htm<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#error_page  404              /404.html;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># redirect server error pages to the static page /50x.html</span>
</span><span class='line'>    error_page   <span class="m">500</span> <span class="m">502</span> <span class="m">503</span> <span class="m">504</span>  /50x.html<span class="p">;</span>
</span><span class='line'>    <span class="nv">location</span> <span class="o">=</span> /50x.html <span class="o">{</span>
</span><span class='line'>        root   /usr/share/nginx/html<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have our docker config in place, we can build our container image:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker build -t ruanbekker/hashnode-docs-blogpost:latest .
</span></code></pre></td></tr></table></div></figure>


<p>Then we can review the <strong>size</strong> of our container image, which is only <code>27.4MB</code> in size, pretty neat right.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker images --filter <span class="nv">reference</span><span class="o">=</span>ruanbekker/hashnode-docs-blogpost
</span><span class='line'>
</span><span class='line'>REPOSITORY                          TAG       IMAGE ID       CREATED          SIZE
</span><span class='line'>ruanbekker/hashnode-docs-blogpost   latest    5b60f30f40e6   <span class="m">21</span> minutes ago   27.4MB
</span></code></pre></td></tr></table></div></figure>


<h2>Running our Container</h2>

<p>Now that we&rsquo;ve built our container image, we can run our documentation site, by specifying our host port on the left to map to our container port on the right in <code>80:80</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run -it -p 80:80 ruanbekker/hashnode-docs-blogpost:latest
</span></code></pre></td></tr></table></div></figure>


<p>When you don&rsquo;t have port 80 already listening prior to running the previous command, when you head to <a href="http://localhost">http://localhost</a> (if you are running this locally), you should see our documentation site up and running:</p>

<p><img src="https://user-images.githubusercontent.com/567298/182018773-ecf3cd6c-ce2c-487a-a1bf-4a84fe1b6a09.png" alt="image" /></p>

<h2>Thank You</h2>

<p>I have published this container image to <a href="https://hub.docker.com/r/ruanbekker/hashnode-docs-blogpost">ruanbekker/hashnode-docs-blogpost</a>.</p>

<p>Thanks for reading, feel free to check out my <strong><a href="https://ruan.dev">website</a></strong>, feel free to subscribe to my <strong><a href="http://digests.ruanbekker.com/?via=hashnode">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote Builds With Docker Contexts]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/07/14/remote-builds-with-docker-contexts/"/>
    <updated>2022-07-14T01:57:34-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/07/14/remote-builds-with-docker-contexts</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/ruanbekker-docker-contexts.png" alt="using-docker-contexts" /></p>

<p>Often you want to save some battery life when you are doing docker builds and leverage a remote host to do the intensive work and we can utilise docker context over ssh to do just that.</p>

<h2>About</h2>

<p>In this tutorial I will show you how to use a remote docker engine to do docker builds, so you still run the docker client locally, but the context of your build will be sent to a remote docker engine via ssh.</p>

<p>We will setup password-less ssh, configure our ssh config, create the remote docker context, then use the remote docker context.</p>

<p><img src="https://user-images.githubusercontent.com/567298/178909518-26f580e9-2b96-41b3-bacd-a5ea5f848ebf.png" alt="image" /></p>

<h2>Password-less SSH</h2>

<p>I will be copying my public key to the remote host:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh-copy-id ruan@192.168.2.18
</span></code></pre></td></tr></table></div></figure>


<p>Setup my ssh config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat ~/.ssh/config
</span><span class='line'>Host home-server
</span><span class='line'>    Hostname 192.168.2.18
</span><span class='line'>    User ruan
</span><span class='line'>    IdentityFile ~/.ssh/id_rsa
</span><span class='line'>    StrictHostKeyChecking no
</span><span class='line'>    UserKnownHostsFile /dev/null
</span></code></pre></td></tr></table></div></figure>


<p>Test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh home-server whoami
</span><span class='line'>ruan
</span></code></pre></td></tr></table></div></figure>


<h2>Docker Context</h2>

<p>On the target host (192.168.2.18) we can verify that docker is installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker version
</span><span class='line'>Client: Docker Engine - Community
</span><span class='line'> Version:           20.10.12
</span><span class='line'> API version:       1.41
</span><span class='line'> Go version:        go1.16.12
</span><span class='line'> Git commit:        e91ed57
</span><span class='line'> Built:             Mon Dec <span class="m">13</span> 11:45:37 2021
</span><span class='line'> OS/Arch:           linux/amd64
</span><span class='line'> Context:           default
</span><span class='line'> Experimental:      <span class="nb">true</span>
</span><span class='line'>
</span><span class='line'>Server: Docker Engine - Community
</span><span class='line'> Engine:
</span><span class='line'>  Version:          20.10.12
</span><span class='line'>  API version:      1.41 <span class="o">(</span>minimum version 1.12<span class="o">)</span>
</span><span class='line'>  Go version:       go1.16.12
</span><span class='line'>  Git commit:       459d0df
</span><span class='line'>  Built:            Mon Dec <span class="m">13</span> 11:43:46 2021
</span><span class='line'>  OS/Arch:          linux/amd64
</span><span class='line'>  Experimental:     <span class="nb">false</span>
</span><span class='line'><span class="nb"> </span>containerd:
</span><span class='line'>  Version:          1.4.12
</span><span class='line'>  GitCommit:        7b11cfaabd73bb80907dd23182b9347b4245eb5d
</span><span class='line'> runc:
</span><span class='line'>  Version:          1.0.2
</span><span class='line'>  GitCommit:        v1.0.2-0-g52b36a2
</span><span class='line'> docker-init:
</span><span class='line'>  Version:          0.19.0
</span><span class='line'>  GitCommit:        de40ad0
</span></code></pre></td></tr></table></div></figure>


<p>On the client (my laptop in this example), we will create a docker context called &ldquo;home-server&rdquo; and point it to our target host:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker context create home-server --docker <span class="s2">&quot;host=ssh://home-server&quot;</span>
</span><span class='line'>home-server
</span><span class='line'>Successfully created context <span class="s2">&quot;home-server&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can list our contexts:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker context ls
</span><span class='line'>NAME                TYPE                DESCRIPTION                               DOCKER ENDPOINT               KUBERNETES ENDPOINT                                  ORCHESTRATOR
</span><span class='line'>default *           moby                Current DOCKER_HOST based configuration   unix:///var/run/docker.sock   https://k3d-master.127.0.0.1.nip.io:6445 <span class="o">(</span>default<span class="o">)</span>   swarm
</span><span class='line'>home-server         moby                                                          ssh://home-server
</span></code></pre></td></tr></table></div></figure>


<h2>Using Contexts</h2>

<p>We can verify if this works by listing our cached docker images locally and on our remote host:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker --context<span class="o">=</span>default images <span class="p">|</span> wc -l
</span><span class='line'> 16
</span></code></pre></td></tr></table></div></figure>


<p>And listing the remote images by specifying the context:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker --context<span class="o">=</span>home-server images <span class="p">|</span> wc -l
</span><span class='line'> 70
</span></code></pre></td></tr></table></div></figure>


<p>We can set the default context to our target host:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker context use home-server
</span><span class='line'>home-server
</span></code></pre></td></tr></table></div></figure>


<h2>Running Containers over Contexts</h2>

<p>So running containers with remote contexts essentially becomes running containers on remote hosts. In the past, I had to setup a ssh tunnel, point the docker host env var to that endpoint, then run containers on the remote host.</p>

<p>Thats something of the past, we can just point our docker context to our remote host and run the container. If you haven&rsquo;t set the default context, you can specify the context, so running a docker container on a remote host with your docker client locally:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker --context<span class="o">=</span>home-server run -it -p 8002:8080 ruanbekker/hostname
</span><span class='line'>2022/07/14 05:44:04 Server listening on port 8080
</span></code></pre></td></tr></table></div></figure>


<p>Now from our client (laptop), we can test our container on our remote host:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl http://192.168.2.18:8002
</span><span class='line'>Hostname: 8605d292e2b4
</span></code></pre></td></tr></table></div></figure>


<p>The same way can be used to do remote docker builds, you have your Dockerfile locally, but when you build, you point the context to the remote host, and your context (dockerfile and files referenced in your dockerfile) will be sent to the remote host. This way you can save a lot of battery life as the computation is done on the remote docker engine.</p>

<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a RAID5 Array With Mdadm on Linux]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/06/29/create-a-raid5-array-with-mdadm-on-linux/"/>
    <updated>2022-06-29T05:02:13-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/06/29/create-a-raid5-array-with-mdadm-on-linux</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/ruanbekker-raid5-array-linux.png" alt="setup-raid5-array-ubuntu-linux" /></p>

<p>In this tutorial we will setup a <a href="https://en.wikipedia.org/wiki/Standard_RAID_levels#RAID_5">RAID5</a> array, which is striping across multiple drives with distributed paritiy, which is good for redundancy. We will be using Ubuntu for our Linux Distribution, but the technique applies to other Linux Distributions as well.</p>

<h2>What are we trying to achieve</h2>

<p>We will run a server with one root disk and 6 extra disks, where we will first create our raid5 array with three disks, then I will show you how to expand your raid5 array by adding three other disks.</p>

<p>Things fail all the time, and it&rsquo;s not fun when hard drives breaks, therefore we want to do our best to prevent our applications from going down due to hardware failures. To achieve data redundancy, we want to use three hard drives, which we want to add into a raid configuration that will proviide us:</p>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Data_striping">striping</a>, which is the technique of segmenting logically sequential data, so that consecutive segments are stored on different physical storage devices.</li>
<li><a href="https://en.wikipedia.org/wiki/Parity_bit#RAID">distributed parity</a>, where parity data are distributed between the physical disks, where there is only one parity block per disk, this provide protection against one physical disk failure, where the minimum number of disks are three.</li>
</ul>


<p>This is how a RAID5 array looks like (image from diskpart.com):</p>

<p><img src="https://user-images.githubusercontent.com/567298/176410333-0ff98867-dfb5-4fe3-a037-cc5d20014ab5.png" alt="raid5" /></p>

<h2>Hardware Overview</h2>

<p>We will have a Linux server with one root disk and six extra disks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>lsblk
</span><span class='line'>NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
</span><span class='line'>xvda    202:0    <span class="m">0</span>    8G  <span class="m">0</span> disk
</span><span class='line'>└─xvda1 202:1    <span class="m">0</span>    8G  <span class="m">0</span> part /
</span><span class='line'>xvdb    202:16   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span><span class='line'>xvdc    202:32   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span><span class='line'>xvdd    202:48   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span><span class='line'>xvde    202:64   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span><span class='line'>xvdf    202:80   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span><span class='line'>xvdg    202:96   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span></code></pre></td></tr></table></div></figure>


<h2>Dependencies</h2>

<p>We require <code>mdadm</code> to create our raid configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt update
</span><span class='line'><span class="nv">$ </span>sudo apt install mdadm -y
</span></code></pre></td></tr></table></div></figure>


<h2>Format Disks</h2>

<p>First we will format and partition the following disks: <code>/dev/xvdb</code>, <code>/dev/xvdc</code>, <code>/dev/xvdd</code>, I will demonstrate the process for one disk, but repeat them for the other as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fdisk /dev/xvdc
</span><span class='line'>
</span><span class='line'>Welcome to fdisk <span class="o">(</span>util-linux 2.34<span class="o">)</span>.
</span><span class='line'>Changes will remain in memory only, <span class="k">until</span> you decide to write them.
</span><span class='line'>Be careful before using the write command.
</span><span class='line'>
</span><span class='line'>The old ext4 signature will be removed by a write command.
</span><span class='line'>
</span><span class='line'>Device does not contain a recognized partition table.
</span><span class='line'>Created a new DOS disklabel with disk identifier 0x26a2d2f6.
</span><span class='line'>
</span><span class='line'>Command <span class="o">(</span>m <span class="k">for</span> <span class="nb">help</span><span class="o">)</span>: n
</span><span class='line'>Partition <span class="nb">type</span>
</span><span class='line'><span class="nb">   </span>p   primary <span class="o">(</span><span class="m">0</span> primary, <span class="m">0</span> extended, <span class="m">4</span> free<span class="o">)</span>
</span><span class='line'>   e   extended <span class="o">(</span>container <span class="k">for</span> logical partitions<span class="o">)</span>
</span><span class='line'>Select <span class="o">(</span>default p<span class="o">)</span>: p
</span><span class='line'>Partition number <span class="o">(</span>1-4, default 1<span class="o">)</span>: 1
</span><span class='line'>First sector <span class="o">(</span>2048-20971519, default 2048<span class="o">)</span>:
</span><span class='line'>Last sector, +/-sectors or +/-size<span class="o">{</span>K,M,G,T,P<span class="o">}</span> <span class="o">(</span>2048-20971519, default 20971519<span class="o">)</span>:
</span><span class='line'>
</span><span class='line'>Created a new partition <span class="m">1</span> of <span class="nb">type</span> <span class="s1">&#39;Linux&#39;</span> and of size <span class="m">10</span> GiB.
</span><span class='line'>
</span><span class='line'>Command <span class="o">(</span>m <span class="k">for</span> <span class="nb">help</span><span class="o">)</span>: t
</span><span class='line'>Selected partition 1
</span><span class='line'>Hex code <span class="o">(</span><span class="nb">type </span>L to list all codes<span class="o">)</span>: fd
</span><span class='line'>Changed <span class="nb">type </span>of partition <span class="s1">&#39;Linux&#39;</span> to <span class="s1">&#39;Linux raid autodetect&#39;</span>.
</span><span class='line'>
</span><span class='line'>Command <span class="o">(</span>m <span class="k">for</span> <span class="nb">help</span><span class="o">)</span>: w
</span><span class='line'>The partition table has been altered.
</span><span class='line'>Calling ioctl<span class="o">()</span> to re-read partition table.
</span><span class='line'>Syncing disks.
</span></code></pre></td></tr></table></div></figure>


<h2>Create RAID5 Array</h2>

<p>Using <code>mdadm</code>, create the <code>/dev/md0</code> device, by specifying the raid level and the disks that we want to add to the array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mdadm --create /dev/md0 --level<span class="o">=</span><span class="m">5</span> --raid-devices<span class="o">=</span><span class="m">3</span> /dev/xvdb1 /dev/xvdc1 /dev/xvdd1
</span><span class='line'>mdadm: Defaulting to version 1.2 metadata
</span><span class='line'>mdadm: array /dev/md0 started.
</span></code></pre></td></tr></table></div></figure>


<p>Now that our device has been added, we can monitor the process:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /proc/mdstat
</span><span class='line'>Personalities : <span class="o">[</span>raid6<span class="o">]</span> <span class="o">[</span>raid5<span class="o">]</span> <span class="o">[</span>raid4<span class="o">]</span>
</span><span class='line'>md0 : active raid5 xvdd1<span class="o">[</span>3<span class="o">]</span> xvdc1<span class="o">[</span>1<span class="o">]</span> xvdb1<span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>      <span class="m">20951040</span> blocks super 1.2 level 5, 512k chunk, algorithm <span class="m">2</span> <span class="o">[</span>3/2<span class="o">]</span> <span class="o">[</span>UU_<span class="o">]</span>
</span><span class='line'>      <span class="o">[==</span>&gt;..................<span class="o">]</span>  <span class="nv">recovery</span> <span class="o">=</span> 11.5% <span class="o">(</span>1212732/10475520<span class="o">)</span> <span class="nv">finish</span><span class="o">=</span>4.7min <span class="nv">speed</span><span class="o">=</span>32103K/sec
</span><span class='line'>
</span><span class='line'>unused devices: &lt;none&gt;
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, currently its at 11.5%, give it some time to let it complete, you should treat the following as a completed state:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /proc/mdstat
</span><span class='line'>Personalities : <span class="o">[</span>raid6<span class="o">]</span> <span class="o">[</span>raid5<span class="o">]</span> <span class="o">[</span>raid4<span class="o">]</span>
</span><span class='line'>md0 : active raid5 xvdd1<span class="o">[</span>3<span class="o">]</span> xvdc1<span class="o">[</span>1<span class="o">]</span> xvdb1<span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>      <span class="m">20951040</span> blocks super 1.2 level 5, 512k chunk, algorithm <span class="m">2</span> <span class="o">[</span>3/3<span class="o">]</span> <span class="o">[</span>UUU<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>unused devices: &lt;none&gt;
</span></code></pre></td></tr></table></div></figure>


<p>We can also inspect devices with <code>mdadm</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mdadm -E /dev/xvd<span class="o">[</span>b-d<span class="o">]</span>1
</span><span class='line'>/dev/xvdb1:
</span><span class='line'>          Magic : a92b4efc
</span><span class='line'>        Version : 1.2
</span><span class='line'>    Feature Map : 0x0
</span><span class='line'>     Array UUID : ea997bce:a530519c:ae41022e:0f4306bf
</span><span class='line'>           Name : ip-172-31-3-57:0  <span class="o">(</span><span class="nb">local </span>to host ip-172-31-3-57<span class="o">)</span>
</span><span class='line'>  Creation Time : Wed Jan <span class="m">12</span> 13:36:39 2022
</span><span class='line'>     Raid Level : raid5
</span><span class='line'>   Raid Devices : 3
</span><span class='line'>
</span><span class='line'> Avail Dev Size : <span class="m">20951040</span> <span class="o">(</span>9.99 GiB 10.73 GB<span class="o">)</span>
</span><span class='line'>     Array Size : <span class="m">20951040</span> <span class="o">(</span>19.98 GiB 21.45 GB<span class="o">)</span>
</span><span class='line'>    Data Offset : <span class="m">18432</span> sectors
</span><span class='line'>   Super Offset : <span class="m">8</span> sectors
</span><span class='line'>   Unused Space : <span class="nv">before</span><span class="o">=</span><span class="m">18280</span> sectors, <span class="nv">after</span><span class="o">=</span><span class="m">0</span> sectors
</span><span class='line'>          State : clean
</span><span class='line'>    Device UUID : 8305a179:3ef96520:6c7b41dd:bdc7401f
</span><span class='line'>
</span><span class='line'>    Update Time : Wed Jan <span class="m">12</span> 13:42:14 2022
</span><span class='line'>  Bad Block Log : <span class="m">512</span> entries available at offset <span class="m">136</span> sectors
</span><span class='line'>       Checksum : 1f9b4887 - correct
</span><span class='line'>         Events : 18
</span><span class='line'>
</span><span class='line'>         Layout : left-symmetric
</span><span class='line'>     Chunk Size : 512K
</span><span class='line'>
</span><span class='line'>   Device Role : Active device 0
</span><span class='line'>   Array State : AAA <span class="o">(</span><span class="s1">&#39;A&#39;</span> <span class="o">==</span> active, <span class="s1">&#39;.&#39;</span> <span class="o">==</span> missing, <span class="s1">&#39;R&#39;</span> <span class="o">==</span> replacing<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To get information about your raid5 device:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mdadm --detail /dev/md0
</span><span class='line'>/dev/md0:
</span><span class='line'>           Version : 1.2
</span><span class='line'>     Creation Time : Wed Jan <span class="m">12</span> 13:36:39 2022
</span><span class='line'>        Raid Level : raid5
</span><span class='line'>        Array Size : <span class="m">20951040</span> <span class="o">(</span>19.98 GiB 21.45 GB<span class="o">)</span>
</span><span class='line'>     Used Dev Size : <span class="m">10475520</span> <span class="o">(</span>9.99 GiB 10.73 GB<span class="o">)</span>
</span><span class='line'>      Raid Devices : 3
</span><span class='line'>     Total Devices : 3
</span><span class='line'>       Persistence : Superblock is persistent
</span><span class='line'>
</span><span class='line'>       Update Time : Wed Jan <span class="m">12</span> 13:42:14 2022
</span><span class='line'>             State : clean
</span><span class='line'>    Active Devices : 3
</span><span class='line'>   Working Devices : 3
</span><span class='line'>    Failed Devices : 0
</span><span class='line'>     Spare Devices : 0
</span><span class='line'>
</span><span class='line'>            Layout : left-symmetric
</span><span class='line'>        Chunk Size : 512K
</span><span class='line'>
</span><span class='line'>Consistency Policy : resync
</span><span class='line'>
</span><span class='line'>              Name : ip-172-31-3-57:0  <span class="o">(</span><span class="nb">local </span>to host ip-172-31-3-57<span class="o">)</span>
</span><span class='line'>              UUID : ea997bce:a530519c:ae41022e:0f4306bf
</span><span class='line'>            Events : 18
</span><span class='line'>
</span><span class='line'>    Number   Major   Minor   RaidDevice State
</span><span class='line'>       <span class="m">0</span>     <span class="m">202</span>       <span class="m">17</span>        <span class="m">0</span>      active sync   /dev/xvdb1
</span><span class='line'>       <span class="m">1</span>     <span class="m">202</span>       <span class="m">33</span>        <span class="m">1</span>      active sync   /dev/xvdc1
</span><span class='line'>       <span class="m">3</span>     <span class="m">202</span>       <span class="m">49</span>        <span class="m">2</span>      active sync   /dev/xvdd1
</span></code></pre></td></tr></table></div></figure>


<h2>Create Filesystems</h2>

<p>We will use our <code>/dev/md0</code> device and create a <code>ext4</code> filesystem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkfs.ext4 /dev/md0
</span><span class='line'>mke2fs 1.45.5 <span class="o">(</span>07-Jan-2020<span class="o">)</span>
</span><span class='line'>Creating filesystem with <span class="m">5237760</span> 4k blocks and <span class="m">1310720</span> inodes
</span><span class='line'>Filesystem UUID: 579f045e-d270-4ff2-b36b-8dc506c27c5f
</span><span class='line'>Superblock backups stored on blocks:
</span><span class='line'>  32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
</span><span class='line'>  4096000
</span><span class='line'>
</span><span class='line'>Allocating group tables: <span class="k">done</span>
</span><span class='line'>Writing inode tables: <span class="k">done</span>
</span><span class='line'>Creating journal <span class="o">(</span><span class="m">32768</span> blocks<span class="o">)</span>: <span class="k">done</span>
</span><span class='line'>Writing superblocks and filesystem accounting information: <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can then verify that by looking at our block devices using <code>lsblk</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>lsblk
</span><span class='line'>NAME    MAJ:MIN RM  SIZE RO TYPE  MOUNTPOINT
</span><span class='line'>xvda    202:0    <span class="m">0</span>    8G  <span class="m">0</span> disk
</span><span class='line'>└─xvda1 202:1    <span class="m">0</span>    8G  <span class="m">0</span> part  /
</span><span class='line'>xvdb    202:16   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span><span class='line'>└─xvdb1 202:17   <span class="m">0</span>   10G  <span class="m">0</span> part
</span><span class='line'>  └─md0   9:0    <span class="m">0</span>   20G  <span class="m">0</span> raid5
</span><span class='line'>xvdc    202:32   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span><span class='line'>└─xvdc1 202:33   <span class="m">0</span>   10G  <span class="m">0</span> part
</span><span class='line'>  └─md0   9:0    <span class="m">0</span>   20G  <span class="m">0</span> raid5
</span><span class='line'>xvdd    202:48   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span><span class='line'>└─xvdd1 202:49   <span class="m">0</span>   10G  <span class="m">0</span> part
</span><span class='line'>  └─md0   9:0    <span class="m">0</span>   20G  <span class="m">0</span> raid5
</span><span class='line'>xvde    202:64   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span><span class='line'>xvdf    202:80   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span><span class='line'>xvdg    202:96   <span class="m">0</span>   10G  <span class="m">0</span> disk
</span></code></pre></td></tr></table></div></figure>


<p>Now we can mount our device to <code>/mnt</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mount /dev/md0 /mnt
</span></code></pre></td></tr></table></div></figure>


<p>We can verify that the device is mounted by using <code>df</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>df -h
</span><span class='line'>Filesystem      Size  Used Avail Use% Mounted on
</span><span class='line'>/dev/root       7.7G  1.5G  6.3G  19% /
</span><span class='line'>/dev/md0         20G   45M   19G   1% /mnt
</span></code></pre></td></tr></table></div></figure>


<p>To persist the device across reboots, add it to the <code>/etc/fstab</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /etc/fstab
</span><span class='line'>/dev/md0                /mnt     ext4   defaults                <span class="m">0</span> 0
</span></code></pre></td></tr></table></div></figure>


<p>Now our filesystem which is mounted at <code>/mnt</code> is ready to be used.</p>

<h2>RAID Configuration (across reboots)</h2>

<p>By default RAID doesn’t have a config file, therefore we need to save it manually. If this step is not followed RAID device will not be in md0, but perhaps something else.</p>

<p>So, we must have to save the configuration to persist across reboots, when it reboot it gets loaded to the kernel and RAID will also get loaded.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mdadm --detail --scan --verbose &gt;&gt; /etc/mdadm.conf
</span></code></pre></td></tr></table></div></figure>


<p>Note: Saving the configuration will keep the RAID level stable in the md0 device.</p>

<h2>Adding Spare Devices</h2>

<p>Earlier I mentioned that we have spare disks that we can use to expand our raid device. After they have been formatted we can add them as spare devices to our raid setup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mdadm --add /dev/md0 /dev/xvde1 /dev/xvdf1 /dev/xvdg1
</span><span class='line'>mdadm: added /dev/xvde1
</span><span class='line'>mdadm: added /dev/xvdf1
</span><span class='line'>mdadm: added /dev/xvdg1
</span></code></pre></td></tr></table></div></figure>


<p>Verify our change by viewing the detail of our device:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mdadm --detail /dev/md0
</span><span class='line'>/dev/md0:
</span><span class='line'>           Version : 1.2
</span><span class='line'>     Creation Time : Wed Jan <span class="m">12</span> 13:36:39 2022
</span><span class='line'>        Raid Level : raid5
</span><span class='line'>        Array Size : <span class="m">20951040</span> <span class="o">(</span>19.98 GiB 21.45 GB<span class="o">)</span>
</span><span class='line'>     Used Dev Size : <span class="m">10475520</span> <span class="o">(</span>9.99 GiB 10.73 GB<span class="o">)</span>
</span><span class='line'>      Raid Devices : 3
</span><span class='line'>     Total Devices : 6
</span><span class='line'>       Persistence : Superblock is persistent
</span><span class='line'>
</span><span class='line'>       Update Time : Wed Jan <span class="m">12</span> 14:28:23 2022
</span><span class='line'>             State : clean
</span><span class='line'>    Active Devices : 3
</span><span class='line'>   Working Devices : 6
</span><span class='line'>    Failed Devices : 0
</span><span class='line'>     Spare Devices : 3
</span><span class='line'>
</span><span class='line'>            Layout : left-symmetric
</span><span class='line'>        Chunk Size : 512K
</span><span class='line'>
</span><span class='line'>Consistency Policy : resync
</span><span class='line'>
</span><span class='line'>              Name : ip-172-31-3-57:0  <span class="o">(</span><span class="nb">local </span>to host ip-172-31-3-57<span class="o">)</span>
</span><span class='line'>              UUID : ea997bce:a530519c:ae41022e:0f4306bf
</span><span class='line'>            Events : 27
</span><span class='line'>
</span><span class='line'>    Number   Major   Minor   RaidDevice State
</span><span class='line'>       <span class="m">0</span>     <span class="m">202</span>       <span class="m">17</span>        <span class="m">0</span>      active sync   /dev/xvdb1
</span><span class='line'>       <span class="m">1</span>     <span class="m">202</span>       <span class="m">33</span>        <span class="m">1</span>      active sync   /dev/xvdc1
</span><span class='line'>       <span class="m">3</span>     <span class="m">202</span>       <span class="m">49</span>        <span class="m">2</span>      active sync   /dev/xvdd1
</span><span class='line'>
</span><span class='line'>       <span class="m">4</span>     <span class="m">202</span>       <span class="m">65</span>        -      spare   /dev/xvde1
</span><span class='line'>       <span class="m">5</span>     <span class="m">202</span>       <span class="m">81</span>        -      spare   /dev/xvdf1
</span><span class='line'>       <span class="m">6</span>     <span class="m">202</span>       <span class="m">97</span>        -      spare   /dev/xvdg1
</span></code></pre></td></tr></table></div></figure>


<p>As you can see it&rsquo;s only spares at this moment, we can use the spares for data storage, by growing our device:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mdadm --grow --raid-devices<span class="o">=</span><span class="m">6</span> /dev/md0
</span></code></pre></td></tr></table></div></figure>


<p>Verify:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mdadm --detail /dev/md0
</span><span class='line'>/dev/md0:
</span><span class='line'>           Version : 1.2
</span><span class='line'>     Creation Time : Wed Jan <span class="m">12</span> 13:36:39 2022
</span><span class='line'>        Raid Level : raid5
</span><span class='line'>        Array Size : <span class="m">20951040</span> <span class="o">(</span>19.98 GiB 21.45 GB<span class="o">)</span>
</span><span class='line'>     Used Dev Size : <span class="m">10475520</span> <span class="o">(</span>9.99 GiB 10.73 GB<span class="o">)</span>
</span><span class='line'>      Raid Devices : 6
</span><span class='line'>     Total Devices : 6
</span><span class='line'>       Persistence : Superblock is persistent
</span><span class='line'>
</span><span class='line'>       Update Time : Wed Jan <span class="m">12</span> 15:15:31 2022
</span><span class='line'>             State : clean, reshaping
</span><span class='line'>    Active Devices : 6
</span><span class='line'>   Working Devices : 6
</span><span class='line'>    Failed Devices : 0
</span><span class='line'>     Spare Devices : 0
</span><span class='line'>
</span><span class='line'>            Layout : left-symmetric
</span><span class='line'>        Chunk Size : 512K
</span><span class='line'>
</span><span class='line'>Consistency Policy : resync
</span><span class='line'>
</span><span class='line'>    Reshape Status : 0% <span class="nb">complete</span>
</span><span class='line'><span class="nb">     </span>Delta Devices : 3, <span class="o">(</span>3-&gt;6<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>              Name : ip-172-31-3-57:0  <span class="o">(</span><span class="nb">local </span>to host ip-172-31-3-57<span class="o">)</span>
</span><span class='line'>              UUID : ea997bce:a530519c:ae41022e:0f4306bf
</span><span class='line'>            Events : 36
</span><span class='line'>
</span><span class='line'>    Number   Major   Minor   RaidDevice State
</span><span class='line'>       <span class="m">0</span>     <span class="m">202</span>       <span class="m">17</span>        <span class="m">0</span>      active sync   /dev/xvdb1
</span><span class='line'>       <span class="m">1</span>     <span class="m">202</span>       <span class="m">33</span>        <span class="m">1</span>      active sync   /dev/xvdc1
</span><span class='line'>       <span class="m">3</span>     <span class="m">202</span>       <span class="m">49</span>        <span class="m">2</span>      active sync   /dev/xvdd1
</span><span class='line'>       <span class="m">6</span>     <span class="m">202</span>       <span class="m">97</span>        <span class="m">3</span>      active sync   /dev/xvdg1
</span><span class='line'>       <span class="m">5</span>     <span class="m">202</span>       <span class="m">81</span>        <span class="m">4</span>      active sync   /dev/xvdf1
</span><span class='line'>       <span class="m">4</span>     <span class="m">202</span>       <span class="m">65</span>        <span class="m">5</span>      active sync   /dev/xvde1
</span></code></pre></td></tr></table></div></figure>


<p>Wait for the raid to rebuild, by viewing the <code>mdstat</code>::</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /proc/mdstat
</span><span class='line'>Personalities : <span class="o">[</span>raid6<span class="o">]</span> <span class="o">[</span>raid5<span class="o">]</span> <span class="o">[</span>raid4<span class="o">]</span>
</span><span class='line'>md0 : active raid5 xvdg1<span class="o">[</span>6<span class="o">]</span> xvdf1<span class="o">[</span>5<span class="o">]</span> xvde1<span class="o">[</span>4<span class="o">]</span> xvdd1<span class="o">[</span>3<span class="o">]</span> xvdc1<span class="o">[</span>1<span class="o">]</span> xvdb1<span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>      <span class="m">20951040</span> blocks super 1.2 level 5, 512k chunk, algorithm <span class="m">2</span> <span class="o">[</span>6/6<span class="o">]</span> <span class="o">[</span>UUUUUU<span class="o">]</span>
</span><span class='line'>      <span class="o">[</span>&gt;....................<span class="o">]</span>  <span class="nv">reshape</span> <span class="o">=</span>  0.7% <span class="o">(</span>76772/10475520<span class="o">)</span> <span class="nv">finish</span><span class="o">=</span>18.0min <span class="nv">speed</span><span class="o">=</span>9596K/sec
</span><span class='line'>
</span><span class='line'>unused devices: &lt;none&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>Resizing our Filesystem</h2>

<p>Once we added the spares and growed our device, we need to run integrity checks, then we can resize the volume. But first, we need to unmount our filesystem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>umount /mnt
</span></code></pre></td></tr></table></div></figure>


<p>Run a integrity check:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>e2fsck -f /dev/md0
</span><span class='line'>e2fsck 1.45.5 <span class="o">(</span>07-Jan-2020<span class="o">)</span>
</span><span class='line'>Pass 1: Checking inodes, blocks, and sizes
</span><span class='line'>Pass 2: Checking directory structure
</span><span class='line'>Pass 3: Checking directory connectivity
</span><span class='line'>Pass 4: Checking reference counts
</span><span class='line'>Pass 5: Checking group summary information
</span><span class='line'>/dev/md0: 12/1310720 files <span class="o">(</span>0.0% non-contiguous<span class="o">)</span>, 126323/5237760 blocks
</span></code></pre></td></tr></table></div></figure>


<p>Once that has passed, resize the file system:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>resize2fs /dev/md0
</span><span class='line'>resize2fs 1.45.5 <span class="o">(</span>07-Jan-2020<span class="o">)</span>
</span><span class='line'>Resizing the filesystem on /dev/md0 to <span class="m">13094400</span> <span class="o">(</span>4k<span class="o">)</span> blocks.
</span><span class='line'>The filesystem on /dev/md0 is now <span class="m">13094400</span> <span class="o">(</span>4k<span class="o">)</span> blocks long.
</span></code></pre></td></tr></table></div></figure>


<p>Then we remount our filesystem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mount /dev/md0 /mnt
</span></code></pre></td></tr></table></div></figure>


<p>After the filesystem has been mounted, we can view the disk size and confirm that the size increased:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>df -h /mnt
</span><span class='line'>Filesystem      Size  Used Avail Use% Mounted on
</span><span class='line'>/dev/md0         50G   52M   47G   1% /mnt
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install a Specific Python Version on Ubuntu]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/06/23/install-a-specific-python-version-on-ubuntu/"/>
    <updated>2022-06-23T17:53:46-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/06/23/install-a-specific-python-version-on-ubuntu</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/ruanbekker-install-specific-python-version.png" alt="install-specific-python-version" /></p>

<p>In this short tutorial, I will demonstrate how to install a spcific version of Python on Ubuntu Linux.</p>

<p><a href="https://ruan.dev"><img src="https://img.shields.io/badge/website-ruan.dev-red.svg" alt="" /></a> <a href="https://twitter.com/ruanbekker"><img src="https://img.shields.io/badge/twitter-@ruanbekker-00acee.svg" alt="" /></a> <a href="https://github.com/ruanbekker"><img src="https://img.shields.io/badge/github-cheatsheets-orange.svg" alt="" /></a> <a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/dm-saythanks.io-07B63F.svg" alt="Say Thanks!" /></a>  <a href="https://ko-fi.com/ruanbekker"><img src="https://img.shields.io/badge/-Buy%20Me%20a%20Coffee-ff5f5f?logo=ko-fi&amp;logoColor=white" alt="Ko-fi" /></a></p>

<h2>Dependencies</h2>

<p>Update the apt repositories:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt update
</span></code></pre></td></tr></table></div></figure>


<p>Then install the required dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt install libssl-dev openssl wget build-essential zlib1g-dev -y
</span></code></pre></td></tr></table></div></figure>


<h2>Python Versions</h2>

<p>Head over to the <a href="https://www.python.org/downloads/">Python Downloads</a> section and select the version of your choice, in my case I will be using Python 3.8.13, once you have the download link, download it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget https://www.python.org/ftp/python/3.8.13/Python-3.8.13.tgz
</span></code></pre></td></tr></table></div></figure>


<p>Then extract the tarball:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tar -xvf Python-3.8.13.tgz
</span></code></pre></td></tr></table></div></figure>


<p>Once it completes, change to the directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>Python-3.8.13
</span></code></pre></td></tr></table></div></figure>


<h2>Installation</h2>

<p>Compile and add <code>--enable-optimizations</code> flag as an argument:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./configure --enable-optimizations
</span></code></pre></td></tr></table></div></figure>


<p>Run make and make install:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>make
</span><span class='line'><span class="nv">$ </span>sudo make install
</span></code></pre></td></tr></table></div></figure>


<p>Once it completes, you can symlink the python binary so that it&rsquo;s detected by your <code>PATH</code>, if you have no installed python versions or want to use it as the default, you can force overwriting the symlink:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo ln -fs /usr/local/bin/python3 /usr/bin/python3
</span></code></pre></td></tr></table></div></figure>


<p>Then we can test it by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python3 --version
</span><span class='line'>Python 3.8.13
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Persist Iptables Rules After Reboots]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/06/15/how-to-persist-iptables-rules-after-reboots/"/>
    <updated>2022-06-15T06:10:12-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/06/15/how-to-persist-iptables-rules-after-reboots</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/ruanbekker-blog-persist-iptables.png" alt="persist-iptables-after-reboot" /></p>

<p>In this tutorial we will demonstrate how to persist iptables rules across reboots.</p>

<h2>Rules Peristence</h2>

<p>By default, when you create iptables rules its active, but as soon as you restart your server, the rules will be gone. Therefore we need to persist these rules across reboots.</p>

<h2>Dependencies</h2>

<p>We require the package <code>iptables-persistent</code> and I will install it on a debian system so I will be using <code>apt</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt update
</span><span class='line'>sudo apt install iptables-persistent -y
</span></code></pre></td></tr></table></div></figure>


<p>Ensure that the service is enabled to start on boot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo systemctl <span class="nb">enable </span>netfilter-persistent
</span></code></pre></td></tr></table></div></figure>


<h2>Creating Iptables Rules</h2>

<p>In this case I will allow port 80 on TCP from all sources:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo iptables -I INPUT -p tcp --dport <span class="m">80</span> -j ACCEPT
</span></code></pre></td></tr></table></div></figure>


<p>To persist our current rules, we need to save them to <code>/etc/iptables/rules.v4</code> with <code>iptables-save</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo iptables-save &gt; /etc/iptables/rules.v4
</span></code></pre></td></tr></table></div></figure>


<p>Now when we restart, our rules will be loaded and our previous defined rules will be active.</p>

<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Read and Write Json Data With Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/06/14/how-to-read-and-write-json-data-with-python/"/>
    <updated>2022-06-14T19:02:53-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/06/14/how-to-read-and-write-json-data-with-python</id>
    <content type="html"><![CDATA[<p>This is a short tutorial on how to use python to write and read files.</p>

<h2>Example</h2>

<p>To write the following json data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;ruan&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To a file named <code>/tmp/data.json</code>, we will be using this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="s">&quot;ruan&quot;</span><span class="p">}</span>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;data.json&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we execute that code, we will find the data inside that file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /tmp/data.json
</span><span class='line'><span class="o">{</span><span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;ruan&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if we want to use python to read the data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;data.json&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>    <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we execute that code, we will see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span><span class="err">&#39;name&#39;:</span> <span class="err">&#39;ruan&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Linkding Bookmarks Manager on Docker]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/05/31/setup-linkding-bookmarks-manager-on-docker/"/>
    <updated>2022-05-31T15:50:24-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/05/31/setup-linkding-bookmarks-manager-on-docker</id>
    <content type="html"><![CDATA[<p><strong>Note</strong>:  <em>Originally posted on <a href="https://containers.fan/posts/setup-linkding-bookmarks-manager/">containers.fan</a></em></p>

<p>I&rsquo;ve stumbled upon a great bookmarks manager service called <strong><a href="https://github.com/sissbruecker/linkding/blob/master/README.md">Linkding</a></strong>. What I really like about it, it allows you to save your bookmarks, assign tags to it to search for it later, it has chrome and firefox browser extensions, and comes with an API.</p>

<h2>Installing Linkding</h2>

<p>We will be using Traefik to do SSL termination and host based routing, if you don’t have Traefik running already, you can follow this post to get that set up:</p>

<ul>
<li><a href="https://containers.fan/posts/setup-traefik-v2-docker-compose/">https://containers.fan/posts/setup-traefik-v2-docker-compose/</a></li>
</ul>


<p>You can follow the <a href="https://github.com/sissbruecker/linkding/blob/master/README.md">linkding documentation</a> for more detailed information.</p>

<p>The <code>docker-compose.yml</code> that I will be use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&quot;3.8&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">linkding</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sissbruecker/linkding:latest</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linkding</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./data:/etc/linkding/data</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">LD_DISABLE_BACKGROUND_TASKS=False</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">LD_DISABLE_URL_VALIDATION=False</span>
</span><span class='line'>    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">unless-stopped</span>
</span><span class='line'>    <span class="l-Scalar-Plain">cpus</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0.5</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mem_limit</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">512m</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">public</span>
</span><span class='line'>    <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&quot;traefik.enable=true&quot;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&quot;traefik.http.routers.linkding-app.rule=Host(`linkding.yourdomain.net`)&quot;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&quot;traefik.http.routers.linkding-app.entrypoints=https&quot;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&quot;traefik.http.routers.linkding-app.tls.certresolver=letsencrypt&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">logging</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span> <span class="s">&quot;json-file&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">max-size</span><span class="p-Indicator">:</span> <span class="s">&quot;1m&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">public</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">public</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make sure to replace the FQDN of your choice, as I used <code>linkding.yourdomain.net</code> as an example.</p>

<p>Once everything is in place, boot the stack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-compose up -d
</span></code></pre></td></tr></table></div></figure>


<h2>Admin Account Registration</h2>

<p>Once your linkding container has booted, you can create a admin user with the following command (ensure to replace where needed):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-compose <span class="nb">exec </span>linkding python manage.py createsuperuser --username<span class="o">=</span>admin --email<span class="o">=</span>root@localhost
</span></code></pre></td></tr></table></div></figure>


<p>Once you head over to the linkding url that you provided and you logon, you should be able to see something like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/171265323-2b23515f-8535-4c89-a195-6ab9b63eab68.png" alt="linkding" /></p>

<h2>Creating Bookmarks</h2>

<p>When you select &ldquo;Add Bookmark&rdquo; and you provide the URL, linkding will retrieve the title and the description and populate it for you, and you can provide the tags (seperated by spaces):</p>

<p><img src="https://user-images.githubusercontent.com/567298/171266278-ab31afc0-4aca-48fc-9795-4d49ae9b3508.png" alt="linkding-bookmark" /></p>

<h2>Browser Extensions</h2>

<p>To add a browser extension, select &ldquo;Settings&rdquo;, then &ldquo;Integrations&rdquo;, then you will find the link to the browser extension for Chrome and Firefox:</p>

<p><img src="https://user-images.githubusercontent.com/567298/171266713-3e2b2e5d-2ff0-43be-9713-5dd69a15d0cd.png" alt="linkding-browser-extension" /></p>

<p>After you install the browser extension and click on it for the first time, it will ask you to set the Linkding Base URL and API Authentication Token:</p>

<p><img src="https://user-images.githubusercontent.com/567298/171267455-123cad06-3758-4991-bb7e-40dc43a62996.png" alt="linkding-configuration" /></p>

<p>You can find that at the bottom of the &ldquo;Integrations&rdquo; section:</p>

<p><img src="https://user-images.githubusercontent.com/567298/171269639-45e65ab0-b413-4879-9c8f-0b82f5884096.png" alt="linkding-rest-api-access" /></p>

<h2>REST API</h2>

<p>You can follow the <a href="https://github.com/sissbruecker/linkding/blob/master/docs/API.md">API Docs</a> for more information, using an example to search for bookmarks with the term &ldquo;docker&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -sL -H <span class="s2">&quot;Authorization: Token ${LINKDING_API_TOKEN}&quot;</span> <span class="s2">&quot;https://linkding.${DOMAIN}/api/bookmarks?q=docker&quot;</span> <span class="p">|</span> python3 -m json.tool
</span></code></pre></td></tr></table></div></figure>


<p>In my case returns a response like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;count&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;next&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;previous&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;results&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;https://www.docker.com/blog/deploying-web-applications-quicker-and-easier-with-caddy-2/&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;website_title&quot;</span><span class="p">:</span> <span class="s2">&quot;Deploying Web Applications Quicker and Easier with Caddy 2 - Docker&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;website_description&quot;</span><span class="p">:</span> <span class="s2">&quot;Deploying web apps can be tough, even with leading server technologies. Learn how you can use Caddy 2 and Docker simplify this process.&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;is_archived&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;tag_names&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;caddy&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;docker&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="nt">&quot;date_added&quot;</span><span class="p">:</span> <span class="s2">&quot;2022-05-31T19:11:53.739002Z&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;date_modified&quot;</span><span class="p">:</span> <span class="s2">&quot;2022-05-31T19:11:53.739016Z&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Flask Forms With Jinja Templating]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/05/31/python-flask-forms-with-jinja-templating/"/>
    <updated>2022-05-31T02:39:30-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/05/31/python-flask-forms-with-jinja-templating</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/171112630-7fd74a3a-d216-4b4c-85a2-8d9de6428f45.png" alt="ruanbekker-blog" /></p>

<p>In this tutorial, we will demonstrate how to use <a href="https://flask.palletsprojects.com/en/2.1.x/">Python Flask</a> and <code>render_template</code> to use <a href="https://jinja.palletsprojects.com/en/3.1.x/">Jinja Templating</a> with our Form. The example is just a ui that accepts a firstname, lastname and email address and when we submit the form data, it renders on a table.</p>

<h2>Install Flask</h2>

<p>Create a virtual environment and install python flask</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python3 -m pip install virtualenv
</span><span class='line'>python3 -m virtualenv -p python3 .venv
</span><span class='line'><span class="nb">source</span> .venv/bin/activate
</span></code></pre></td></tr></table></div></figure>


<h2>The Code</h2>

<p>First we will create our application code in <code>app.py</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">render_template</span><span class="p">,</span> <span class="n">request</span>
</span><span class='line'>
</span><span class='line'><span class="n">app_version</span> <span class="o">=</span> <span class="s">&#39;1.1.0&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">root</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&#39;form.html&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/result&#39;</span><span class="p">,</span><span class="n">methods</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;POST&#39;</span><span class="p">,</span> <span class="s">&#39;GET&#39;</span><span class="p">])</span>
</span><span class='line'><span class="k">def</span> <span class="nf">result</span><span class="p">():</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&#39;POST&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">form</span>
</span><span class='line'>        <span class="n">json_result</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">json_result</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&quot;result.html&quot;</span><span class="p">,</span> <span class="n">result</span><span class="o">=</span><span class="n">result</span><span class="p">,</span> <span class="n">app_version</span><span class="o">=</span><span class="n">app_version</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">debug</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see our first route <code>/</code> will render the template in <code>form.html</code>. Our second route <code>/result</code> a couple of things are happening:</p>

<ul>
<li>If we received a POST method, we will capture the form data</li>
<li>We are then casting it to a dictionary data type</li>
<li>Print the results out of our form data (for debugging)</li>
<li>Then we are passing the result object and the app_version variable to our template where it will be parsed.</li>
</ul>


<p>When using <code>render_template</code> all html files resides under the <code>templates</code> directory, so let&rsquo;s first create our <code>base.html</code> file that we will use as a starting point in <code>templates/base.html</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">mkdir</span> <span class="n">templates</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then in your <code>templates/base.html</code>:</p>

<script src="https://gist.github.com/ruanbekker/4d6b3e91b629795b3429a15f5db72972.js"></script>


<p>In our <code>templates/form.html</code> we have our form template, and you can see we are referencing our <code>base.html</code> in our template to include the first bit:</p>

<script src="https://gist.github.com/ruanbekker/f9e0c78d12987e19862486e446378ed7.js"></script>


<p>Then our last template <code>templates/result.html</code> is used when we click on submit, when the form data is displayed in our table:</p>

<script src="https://gist.github.com/ruanbekker/ad40ae4c59a81e8c089e7df2d50c605a.js"></script>


<p>So our directory structure should look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>├── app.py
</span><span class='line'>└── templates
</span><span class='line'>    ├── base.html
</span><span class='line'>    ├── form.html
</span><span class='line'>    └── result.html
</span><span class='line'>
</span><span class='line'><span class="m">1</span> directory, <span class="m">4</span> files
</span></code></pre></td></tr></table></div></figure>


<p>Then run the server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python app.py
</span></code></pre></td></tr></table></div></figure>


<h2>Screenshots</h2>

<p>It should look like the following when you access <a href="http://localhost:5000/">http://localhost:5000/</a></p>

<p><img src="https://user-images.githubusercontent.com/567298/171111587-915935a6-1557-4039-bbd0-d1d95070c2ae.png" alt="python-flask-forms" /></p>

<p>After entering your form data, select &ldquo;Submit&rdquo;, then you should see the following:</p>

<p><img src="https://user-images.githubusercontent.com/567298/171111868-9f8974d2-90cc-45c9-b930-da2d6ec96cbf.png" alt="python-flask-forms" /></p>

<p>So you can see that our request data was parsed through the template and our app version variable as well.</p>

<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>

<p><a href="https://github.com/ruanbekker/cheatsheets" target="_blank"><img alt="ruanbekker-cheatsheets" src="https://user-images.githubusercontent.com/567298/169162832-ef3019de-bc49-4d6c-b2a6-8ac17c457d24.png"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prometheus Relabel Config Examples]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/05/30/prometheus-relabel-config-examples/"/>
    <updated>2022-05-30T03:01:01-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/05/30/prometheus-relabel-config-examples</id>
    <content type="html"><![CDATA[<p>This is a quick demonstration on how to use prometheus relabel configs, when you have scenarios for when example, you want to use a part of your hostname and assign it to a prometheus label.</p>

<h2>Prometheus Relabling</h2>

<p>Using a standard prometheus config to scrape two targets:
- <code>ip-192-168-64-29.multipass:9100</code>
- <code>ip-192-168-64-30.multipass:9100</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global:
</span><span class='line'>  scrape_interval:     15s
</span><span class='line'>  evaluation_interval: 15s
</span><span class='line'>  external_labels:
</span><span class='line'>    cluster: 'local'
</span><span class='line'>
</span><span class='line'>scrape_configs:
</span><span class='line'>  - job_name: 'prometheus'
</span><span class='line'>    scrape_interval: 15s
</span><span class='line'>    static_configs:
</span><span class='line'>    - targets: ['localhost:9090']
</span><span class='line'>
</span><span class='line'>  - job_name: 'multipass-nodes'
</span><span class='line'>    static_configs:
</span><span class='line'>    - targets: ['ip-192-168-64-29.multipass:9100']
</span><span class='line'>      labels:
</span><span class='line'>        test: 1
</span><span class='line'>    - targets: ['ip-192-168-64-30.multipass:9100']
</span><span class='line'>      labels:
</span><span class='line'>        test: 1</span></code></pre></td></tr></table></div></figure>


<p>The Result:</p>

<p><img width="924" alt="image" src="https://user-images.githubusercontent.com/567298/170823370-f2c6b3a3-68a8-4f5a-ad43-2f1b832c95e0.png"></p>

<p>When we want to relabel one of the source the prometheus <a href="https://grafana.com/blog/2022/03/21/how-relabeling-in-prometheus-works/#internal-labels">internal labels</a>, <code>__address__</code> which will be the given target including the port, then we apply regex: <code>(.*)</code> to catch everything from the source label, and since there is only one group we use the <code>replacement</code> as <code>${1}-randomtext</code> and use that value to apply it as the value of the given <code>target_label</code> which in this case is for <code>randomlabel</code>, which will be in this case:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global:
</span><span class='line'>  scrape_interval:     15s
</span><span class='line'>  evaluation_interval: 15s
</span><span class='line'>  external_labels:
</span><span class='line'>    cluster: 'local'
</span><span class='line'>
</span><span class='line'>scrape_configs:
</span><span class='line'>  - job_name: 'prometheus'
</span><span class='line'>    scrape_interval: 15s
</span><span class='line'>    static_configs:
</span><span class='line'>    - targets: ['localhost:9090']
</span><span class='line'>
</span><span class='line'>  - job_name: 'multipass-nodes'
</span><span class='line'>    static_configs:
</span><span class='line'>    - targets: ['ip-192-168-64-29.multipass:9100']
</span><span class='line'>      labels:
</span><span class='line'>        test: 3
</span><span class='line'>    - targets: ['ip-192-168-64-30.multipass:9100']
</span><span class='line'>      labels:
</span><span class='line'>        test: 3
</span><span class='line'>    relabel_configs:
</span><span class='line'>    - source_labels: [__address__]
</span><span class='line'>      regex: '(.+)'
</span><span class='line'>      replacement: '${1}-randomtext'
</span><span class='line'>      target_label: randomlabel</span></code></pre></td></tr></table></div></figure>


<p>The Result:</p>

<p><img width="1107" alt="image" src="https://user-images.githubusercontent.com/567298/170824588-44a79c3d-5131-4311-bcca-f5137d6acdad.png"></p>

<p>In this case we want to relabel the <code>__address__</code> and apply the value to the <code>instance</code> label, but we want to exclude the <code>:9100</code> from the <code>__address__</code> label:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Config: https://github.com/prometheus/prometheus/blob/release-2.36/config/testdata/conf.good.yml
</span><span class='line'>global:
</span><span class='line'>  scrape_interval:     15s
</span><span class='line'>  evaluation_interval: 15s
</span><span class='line'>  external_labels:
</span><span class='line'>    cluster: 'local'
</span><span class='line'>
</span><span class='line'>scrape_configs:
</span><span class='line'>  - job_name: 'prometheus'
</span><span class='line'>    scrape_interval: 15s
</span><span class='line'>    static_configs:
</span><span class='line'>    - targets: ['localhost:9090']
</span><span class='line'>
</span><span class='line'>  - job_name: 'multipass-nodes'
</span><span class='line'>    static_configs:
</span><span class='line'>    - targets: ['ip-192-168-64-29.multipass:9100']
</span><span class='line'>      labels:
</span><span class='line'>        test: 4
</span><span class='line'>    - targets: ['ip-192-168-64-30.multipass:9100']
</span><span class='line'>      labels:
</span><span class='line'>        test: 4
</span><span class='line'>    relabel_configs:
</span><span class='line'>    - source_labels: [__address__]
</span><span class='line'>      separator: ':'
</span><span class='line'>      regex: '(.*):(.*)'
</span><span class='line'>      replacement: '${1}'
</span><span class='line'>      target_label: instance</span></code></pre></td></tr></table></div></figure>


<p>The Result:</p>

<p><img width="950" alt="image" src="https://user-images.githubusercontent.com/567298/170824806-45f0f243-5fe7-4635-9e9a-335616a322da.png"></p>

<h2>AWS EC2 SD Configs</h2>

<p>On AWS EC2 you can make use of the <a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#ec2_sd_config">ec2_sd_config</a> where you can make use of EC2 Tags, to set the values of your tags to prometheus label values.</p>

<p>In this scenario, on my EC2 instances I have 3 tags:
- Key: PrometheusScrape, Value: Enabled
- Key: Name, Value: pdn-server-1
- Key: Environment, Value: dev</p>

<p>In our config, we only apply a node-exporter scrape config to instances which are tagged <code>PrometheusScrape=Enabled</code>, then we use the <code>Name</code> tag, and assign it&rsquo;s value to the <code>instance</code> tag, and the similarly we assign the <code>Environment</code> tag value to the <code>environment</code> promtheus label value.</p>

<p>Because this prometheus instance resides in the same VPC, I am using the <code>__meta_ec2_private_ip</code> which is the private ip address of the EC2 instance to assign it to the address where it needs to scrape the node exporter metrics endpoint:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">scrape_configs</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">job_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">node-exporter</span>
</span><span class='line'>    <span class="l-Scalar-Plain">scrape_interval</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">15s</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ec2_sd_configs</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">region</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">eu-west-1</span>
</span><span class='line'>      <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">9100</span>
</span><span class='line'>      <span class="l-Scalar-Plain">filters</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">tag:PrometheusScrape</span>
</span><span class='line'>          <span class="l-Scalar-Plain">values</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Enabled</span>
</span><span class='line'>    <span class="l-Scalar-Plain">relabel_configs</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">source_labels</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">__meta_ec2_private_ip</span><span class="p-Indicator">]</span>
</span><span class='line'>      <span class="l-Scalar-Plain">replacement</span><span class="p-Indicator">:</span> <span class="s">&#39;${1}:9100&#39;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">target_label</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">__address__</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">source_labels</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">__meta_ec2_tag_Name</span><span class="p-Indicator">]</span>
</span><span class='line'>      <span class="l-Scalar-Plain">target_label</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">instance</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">source_labels</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">__meta_ec2_tag_Environment</span><span class="p-Indicator">]</span>
</span><span class='line'>      <span class="l-Scalar-Plain">target_label</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">environment</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will need a EC2 Ready Only instance role (or access keys on the configuration) in order for prometheus to read the EC2 tags on your account.</p>

<p>See their <a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#ec2_sd_config">documentation</a> for more info.</p>

<h2>Stack</h2>

<p>The docker-compose used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&#39;3.8&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">prometheus</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">prom/prometheus</span>
</span><span class='line'>    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="s">&#39;prometheus&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">root</span>
</span><span class='line'>    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">unless-stopped</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./prometheus.yml:/etc/prometheus/prometheus.yml</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">prometheus-data:/prometheus</span>
</span><span class='line'>    <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&#39;--config.file=/etc/prometheus/prometheus.yml&#39;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&#39;--storage.tsdb.path=/prometheus&#39;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&#39;--storage.tsdb.retention=14d&#39;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&#39;--web.console.libraries=/etc/prometheus/console_libraries&#39;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&#39;--web.console.templates=/etc/prometheus/consoles&#39;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&#39;--web.external-url=http://prometheus.127.0.0.1.nip.io&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">9090:9090</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">public</span>
</span><span class='line'>    <span class="l-Scalar-Plain">logging</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span> <span class="s">&quot;json-file&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">max-size</span><span class="p-Indicator">:</span> <span class="s">&quot;1m&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">public</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">public</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">prometheus-data</span><span class="p-Indicator">:</span> <span class="p-Indicator">{}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>References</h2>

<p>Usful docs:</p>

<ul>
<li><a href="https://grafana.com/blog/2022/03/21/how-relabeling-in-prometheus-works/#internal-labels">https://grafana.com/blog/2022/03/21/how-relabeling-in-prometheus-works/#internal-labels</a></li>
<li><a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#ec2_sd_config">https://prometheus.io/docs/prometheus/latest/configuration/configuration/#ec2_sd_config</a></li>
<li><a href="https://regexr.com/">https://regexr.com/</a></li>
</ul>


<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a AWS Lambda Layer With Docker]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/05/27/create-a-aws-lambda-layer-with-docker/"/>
    <updated>2022-05-27T06:19:05-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/05/27/create-a-aws-lambda-layer-with-docker</id>
    <content type="html"><![CDATA[<p>In this tutorial we will be creating a AWS Lambda Python <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Layer</a> that will include the Python Requests package and we will compile the package with Docker and the LambCI image.</p>

<h2>Getting Started</h2>

<p>First we will create the directory where we will store the intermediate data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir lambda-layers
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>lambda-layers
</span></code></pre></td></tr></table></div></figure>


<p>Then we will create the directory structure, as you can see I will be using the python 3.8 runtime:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir -p requests/python/lib/python3.8
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>requests
</span></code></pre></td></tr></table></div></figure>


<p>Write the dependencies to the requirements file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;requests&quot;</span> &gt; requirements.txt
</span></code></pre></td></tr></table></div></figure>


<p>Install dependencies locally using docker, where we will be using the <code>lambci/lambda:build-python3.8</code> iamge and we are mounting our current working directory to <code>/var/task</code> inside the container, and then we will be running the command <code>pip install -r requirements.txt -t python/lib/python3.7/site-packages/; exit</code> inside the container, which will essentially dump the content to our working directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run -v <span class="nv">$PWD</span>:/var/task <span class="se">\</span>
</span><span class='line'>   lambci/lambda:build-python3.8 <span class="se">\</span>
</span><span class='line'>   sh -c <span class="s2">&quot;pip install -r requirements.txt -t python/lib/python3.8/site-packages/; exit&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Zip up the deployment package that we will push to AWS Lambda Layers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>zip -r package.zip python &gt; /dev/null
</span></code></pre></td></tr></table></div></figure>


<p>Publish the layer using the aws cli tools, by specifying the deployment package, the compatible runtime and a identifier:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws --profile dev lambda <span class="se">\</span>
</span><span class='line'>   publish-layer-version --layer-name python-requests <span class="se">\</span>
</span><span class='line'>   --description <span class="s2">&quot;Python Requests using 3.8 Runtime&quot;</span> <span class="se">\</span>
</span><span class='line'>   --zip-file fileb://package.zip <span class="se">\</span>
</span><span class='line'>   --compatible-runtime <span class="s2">&quot;python3.8&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then when you want to reference the layer on the functio that you want to create, you can do it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws lambda create-function --function-name <span class="nb">test</span>-requests <span class="se">\</span>
</span><span class='line'>   --runtime python3.8 <span class="se">\</span>
</span><span class='line'>   --handler lambda_function.lambda_handler <span class="se">\</span>
</span><span class='line'>   --role <span class="s2">&quot;&quot;</span> --layers <span class="s2">&quot;arn:aws:lambda:eu-west-1:xxxxxxxxxxxx:layer:test-requests&quot;</span> <span class="se">\</span>
</span><span class='line'>   --code <span class="s2">&quot;S3Bucket=string,S3Key=string&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>

<p>Credit to <a href="https://oznetnerd.com/2020/11/11/lambda-packaging-the-right-way/">oznetnerd.com</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customize VIM Editor With a Brand New Look]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/05/11/customize-vim-editor-with-a-brand-new-look/"/>
    <updated>2022-05-11T17:10:16-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/05/11/customize-vim-editor-with-a-brand-new-look</id>
    <content type="html"><![CDATA[<p>In this tutorial we will customize the vim editor, by adding the molokai color scheme, change a couple of basic settings (more suited for my preference - not too much) and add a couple of plugins that will change the look to something like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/161967893-c19e460a-a8f6-4841-b3cd-de8419522790.png" alt="image" /></p>

<h2>About Vim</h2>

<p><strong><a href="https://www.vim.org/">vim</a></strong> has always been my favorite linux text editor, which is super powerful and highly customizable</p>

<h2>Install Vim</h2>

<p>Update indexes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt update
</span></code></pre></td></tr></table></div></figure>


<p>Install vim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt install vim -y
</span></code></pre></td></tr></table></div></figure>


<h2>Color Scheme</h2>

<p>To find all existing vim color schemes installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find /usr/share/vim/vim*/colors/ -type f -name <span class="s2">&quot;*.vim&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output on mine shows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/share/vim/vim81/colors/desert.vim
</span><span class='line'>/usr/share/vim/vim81/colors/default.vim
</span><span class='line'>/usr/share/vim/vim81/colors/murphy.vim
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>I will be opting for <a href="https://github.com/tomasr/molokai">molokai</a>, so first create the directory where we will download our color scheme:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p ~/.vim/colors
</span></code></pre></td></tr></table></div></figure>


<p>Then download the color scheme:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -o ~/.vim/colors/molokai.vim https://raw.githubusercontent.com/tomasr/molokai/master/colors/molokai.vim
</span></code></pre></td></tr></table></div></figure>


<p>By default our color scheme will look like this when we create <code>foo.py</code>:</p>

<p><img src="https://user-images.githubusercontent.com/567298/161961784-ff536963-baca-492b-989b-5d61bc4dfa71.png" alt="image" /></p>

<p>When we hit the &ldquo;esc&rdquo; button, and enter <code>:colorscheme molokai</code> we can change the colorscheme to molokai, and then we should have the following:</p>

<p><img src="https://user-images.githubusercontent.com/567298/161962129-434f42ff-c894-4388-9d2e-5dbf1c80e1f5.png" alt="image" /></p>

<p>To persist these changes, open up <code>~/.vimrc</code> and paste the following as a starter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>colorscheme molokai
</span><span class='line'>syntax on
</span></code></pre></td></tr></table></div></figure>


<p>Now when we open up <code>foo.py</code> we will see that it defaults to the <code>molokai</code> color scheme.</p>

<h2>Vim Configuration</h2>

<p>Everyone has their own personal preference on vim configs, but I like to keep mine basic, and this is the content of my <code>~/.vimrc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>colorscheme molokai
</span><span class='line'>syntax on
</span><span class='line'><span class="nb">set </span>mouse-<span class="o">=</span>a
</span><span class='line'>
</span><span class='line'>filetype on
</span><span class='line'>filetype indent plugin on
</span><span class='line'><span class="nb">set </span>noexpandtab <span class="s2">&quot; tabs ftw</span>
</span><span class='line'><span class="s2">set smarttab &quot;</span> tab respects <span class="s1">&#39;tabstop&#39;</span>, <span class="s1">&#39;shiftwidth&#39;</span>, and <span class="s1">&#39;softtabstop&#39;</span>
</span><span class='line'><span class="nb">set </span><span class="nv">tabstop</span><span class="o">=</span><span class="m">4</span> <span class="s2">&quot; the visible width of tabs</span>
</span><span class='line'><span class="s2">set softtabstop=4 &quot;</span> edit as <span class="k">if</span> the tabs are <span class="m">4</span> characters wide
</span><span class='line'><span class="nb">set </span><span class="nv">shiftwidth</span><span class="o">=</span><span class="m">4</span> <span class="s2">&quot; number of spaces to use for indent and unindent</span>
</span><span class='line'><span class="s2">set shiftround &quot;</span> round indent to a multiple of <span class="s1">&#39;shiftwidth&#39;</span>
</span><span class='line'>
</span><span class='line'>autocmd FileType yml setlocal <span class="nv">ts</span><span class="o">=</span><span class="m">2</span> <span class="nv">sts</span><span class="o">=</span><span class="m">2</span> <span class="nv">sw</span><span class="o">=</span><span class="m">2</span> expandtab
</span><span class='line'>autocmd FileType yaml setlocal <span class="nv">ts</span><span class="o">=</span><span class="m">2</span> <span class="nv">sts</span><span class="o">=</span><span class="m">2</span> <span class="nv">sw</span><span class="o">=</span><span class="m">2</span> expandtab
</span></code></pre></td></tr></table></div></figure>


<h2>Plugins</h2>

<p>The <code>~/.vimrc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="s2">&quot;&quot;</span> https://github.com/VundleVim/Vundle.vim
</span><span class='line'><span class="nb">set </span>nocompatible
</span><span class='line'>filetype off
</span><span class='line'><span class="s2">&quot; set the runtime path to include Vundle and initialize</span>
</span><span class='line'><span class="s2">set rtp+=~/.vim/bundle/Vundle.vim</span>
</span><span class='line'><span class="s2">call vundle#begin()</span>
</span><span class='line'><span class="s2">&quot;</span> alternatively, pass a path where Vundle should install plugins
</span><span class='line'><span class="s2">&quot;call vundle#begin(&#39;~/some/path/here&#39;)</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span> <span class="nb">let </span>Vundle manage Vundle, required
</span><span class='line'>Plugin <span class="s1">&#39;VundleVim/Vundle.vim&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot; The following are examples of different formats supported.</span>
</span><span class='line'><span class="s2">&quot;</span> Keep Plugin commands between vundle#begin/end.
</span><span class='line'><span class="s2">&quot; plugin on GitHub repo</span>
</span><span class='line'><span class="s2">Plugin &#39;tpope/vim-fugitive&#39;</span>
</span><span class='line'><span class="s2">&quot;</span> plugin from http://vim-scripts.org/vim/scripts.html
</span><span class='line'><span class="s2">&quot; Plugin &#39;L9&#39;</span>
</span><span class='line'><span class="s2">&quot;</span> Git plugin not hosted on GitHub
</span><span class='line'>Plugin <span class="s1">&#39;git://git.wincent.com/command-t.git&#39;</span>
</span><span class='line'><span class="s2">&quot; git repos on your local machine (i.e. when working on your own plugin)</span>
</span><span class='line'><span class="s2">&quot;</span> Plugin <span class="s1">&#39;file:///home/gmarik/path/to/plugin&#39;</span>
</span><span class='line'><span class="s2">&quot; The sparkup vim script is in a subdirectory of this repo called vim.</span>
</span><span class='line'><span class="s2">&quot;</span> Pass the path to <span class="nb">set </span>the runtimepath properly.
</span><span class='line'>Plugin <span class="s1">&#39;rstacruz/sparkup&#39;</span>, <span class="o">{</span><span class="s1">&#39;rtp&#39;</span>: <span class="s1">&#39;vim/&#39;</span><span class="o">}</span>
</span><span class='line'><span class="s2">&quot; Install L9 and avoid a Naming conflict if you&#39;ve already installed a</span>
</span><span class='line'><span class="s2">&quot;</span> different version somewhere <span class="k">else</span>.
</span><span class='line'><span class="s2">&quot; Plugin &#39;ascenator/L9&#39;, {&#39;name&#39;: &#39;newL9&#39;}</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span> All of your Plugins must be added before the following line
</span><span class='line'>call vundle#end<span class="o">()</span>            <span class="s2">&quot; required</span>
</span><span class='line'><span class="s2">filetype plugin indent on    &quot;</span> required
</span><span class='line'><span class="s2">&quot; To ignore plugin indent changes, instead use:</span>
</span><span class='line'><span class="s2">&quot;</span>filetype plugin on
</span><span class='line'><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">&quot;</span> Brief <span class="nb">help</span>
</span><span class='line'><span class="s2">&quot; :PluginList       - lists configured plugins</span>
</span><span class='line'><span class="s2">&quot;</span> :PluginInstall    - installs plugins<span class="p">;</span> append <span class="sb">`</span>!<span class="sb">`</span> to update or just :PluginUpdate
</span><span class='line'><span class="s2">&quot; :PluginSearch foo - searches for foo; append `!` to refresh local cache</span>
</span><span class='line'><span class="s2">&quot;</span> :PluginClean      - confirms removal of unused plugins<span class="p">;</span> append <span class="sb">`</span>!<span class="sb">`</span> to auto-approve removal
</span><span class='line'><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">&quot;</span> see :h vundle <span class="k">for</span> more details or wiki <span class="k">for</span> FAQ
</span><span class='line'><span class="s2">&quot; Put your non-Plugin stuff after this line</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span> colorscheme duo-mini
</span><span class='line'><span class="s2">&quot; sets color themes</span>
</span><span class='line'><span class="s2">colorscheme molokai</span>
</span><span class='line'><span class="s2">syntax on</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span> sets the filename at the bottom
</span><span class='line'><span class="nb">set </span><span class="nv">laststatus</span><span class="o">=</span>2
</span><span class='line'><span class="s2">&quot; https://github.com/itchyny/lightline.vim</span>
</span><span class='line'><span class="s2">Plugin &#39;itchyny/lightline.vim&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span> https://github.com/Shougo/neobundle.vim
</span><span class='line'><span class="s2">&quot; Note: Skip initialization for vim-tiny or vim-small.</span>
</span><span class='line'><span class="s2">if 0 | endif</span>
</span><span class='line'>
</span><span class='line'><span class="s2">if &amp;compatible</span>
</span><span class='line'><span class="s2">  set nocompatible               &quot;</span> Be iMproved
</span><span class='line'>endif
</span><span class='line'>
</span><span class='line'><span class="s2">&quot; Required:</span>
</span><span class='line'><span class="s2">set runtimepath+=~/.vim/bundle/neobundle.vim/</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span> Required:
</span><span class='line'>call neobundle#begin<span class="o">(</span>expand<span class="o">(</span><span class="s1">&#39;~/.vim/bundle/&#39;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot; Let NeoBundle manage NeoBundle</span>
</span><span class='line'><span class="s2">&quot;</span> Required:
</span><span class='line'>NeoBundleFetch <span class="s1">&#39;Shougo/neobundle.vim&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot; My Bundles here:</span>
</span><span class='line'><span class="s2">&quot;</span> Refer to <span class="p">|</span>:NeoBundle-examples<span class="p">|</span>.
</span><span class='line'><span class="s2">&quot; Note: You don&#39;t set neobundle setting in .gvimrc!</span>
</span><span class='line'><span class="s2">NeoBundle &#39;itchyny/lightline.vim&#39;</span>
</span><span class='line'><span class="s2">call neobundle#end()</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span> Required:
</span><span class='line'>filetype plugin indent on
</span><span class='line'>
</span><span class='line'><span class="s2">&quot; If there are uninstalled bundles found on startup,</span>
</span><span class='line'><span class="s2">&quot;</span> this will conveniently prompt you to install them.
</span><span class='line'>NeoBundleCheck
</span><span class='line'>
</span><span class='line'><span class="s2">&quot; https://github.com/junegunn/vim-plug</span>
</span><span class='line'><span class="s2">&quot;</span> Specify a directory <span class="k">for</span> plugins
</span><span class='line'><span class="s2">&quot; - For Neovim: stdpath(&#39;data&#39;) . &#39;/plugged&#39;</span>
</span><span class='line'><span class="s2">&quot;</span> - Avoid using standard Vim directory names like <span class="s1">&#39;plugin&#39;</span>
</span><span class='line'>call plug#begin<span class="o">(</span><span class="s1">&#39;~/.vim/plugged&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot; Make sure you use single quotes</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span> Shorthand notation<span class="p">;</span> fetches https://github.com/junegunn/vim-easy-align
</span><span class='line'>Plug <span class="s1">&#39;junegunn/vim-easy-align&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot; Any valid git URL is allowed</span>
</span><span class='line'><span class="s2">Plug &#39;https://github.com/junegunn/vim-github-dashboard.git&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span> Multiple Plug commands can be written in a single line using <span class="p">|</span> separators
</span><span class='line'><span class="s2">&quot;Plug &#39;SirVer/ultisnips&#39; | Plug &#39;honza/vim-snippets&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span> On-demand loading
</span><span class='line'>Plug <span class="s1">&#39;scrooloose/nerdtree&#39;</span>, <span class="o">{</span> <span class="s1">&#39;on&#39;</span>:  <span class="s1">&#39;NERDTreeToggle&#39;</span> <span class="o">}</span>
</span><span class='line'>Plug <span class="s1">&#39;tpope/vim-fireplace&#39;</span>, <span class="o">{</span> <span class="s1">&#39;for&#39;</span>: <span class="s1">&#39;clojure&#39;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot; Using a non-master branch</span>
</span><span class='line'><span class="s2">Plug &#39;rdnetto/YCM-Generator&#39;, { &#39;branch&#39;: &#39;stable&#39; }</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span> Using a tagged release<span class="p">;</span> wildcard allowed <span class="o">(</span>requires git 1.9.2 or above<span class="o">)</span>
</span><span class='line'>Plug <span class="s1">&#39;fatih/vim-go&#39;</span>, <span class="o">{</span> <span class="s1">&#39;tag&#39;</span>: <span class="s1">&#39;*&#39;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot; Plugin options</span>
</span><span class='line'><span class="s2">Plug &#39;nsf/gocode&#39;, { &#39;tag&#39;: &#39;v.20150303&#39;, &#39;rtp&#39;: &#39;vim&#39; }</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span> Plugin outside ~/.vim/plugged with post-update hook
</span><span class='line'>Plug <span class="s1">&#39;junegunn/fzf&#39;</span>, <span class="o">{</span> <span class="s1">&#39;dir&#39;</span>: <span class="s1">&#39;~/.fzf&#39;</span>, <span class="s1">&#39;do&#39;</span>: <span class="s1">&#39;./install --all&#39;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot; Unmanaged plugin (manually installed and updated)</span>
</span><span class='line'><span class="s2">Plug &#39;~/my-prototype-plugin&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">Plug &#39;itchyny/lightline.vim&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span> Initialize plugin system
</span><span class='line'>call plug#end<span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot; sets the filename as the title up top</span>
</span><span class='line'><span class="s2">&quot;</span> <span class="nb">set </span>title
</span><span class='line'><span class="s2">&quot; let g:airline#extensions#tabline#enabled = 1</span>
</span><span class='line'>
</span><span class='line'><span class="s2">set noexpandtab &quot;</span> tabs ftw
</span><span class='line'><span class="nb">set </span>smarttab <span class="s2">&quot; tab respects &#39;tabstop&#39;, &#39;shiftwidth&#39;, and &#39;softtabstop&#39;</span>
</span><span class='line'><span class="s2">set tabstop=4 &quot;</span> the visible width of tabs
</span><span class='line'><span class="nb">set </span><span class="nv">softtabstop</span><span class="o">=</span><span class="m">4</span> <span class="s2">&quot; edit as if the tabs are 4 characters wide</span>
</span><span class='line'><span class="s2">set shiftwidth=4 &quot;</span> number of spaces to use <span class="k">for</span> indent and unindent
</span><span class='line'><span class="nb">set </span>shiftround <span class="err">&quot;</span> round indent to a multiple of <span class="s1">&#39;shiftwidth&#39;</span>
</span><span class='line'>autocmd FileType yml setlocal <span class="nv">ts</span><span class="o">=</span><span class="m">2</span> <span class="nv">sts</span><span class="o">=</span><span class="m">2</span> <span class="nv">sw</span><span class="o">=</span><span class="m">2</span> expandtab
</span><span class='line'>autocmd FileType yaml setlocal <span class="nv">ts</span><span class="o">=</span><span class="m">2</span> <span class="nv">sts</span><span class="o">=</span><span class="m">2</span> <span class="nv">sw</span><span class="o">=</span><span class="m">2</span> expandtab
</span></code></pre></td></tr></table></div></figure>


<p>Install the dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim
</span><span class='line'>curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
</span><span class='line'>git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
</span></code></pre></td></tr></table></div></figure>


<p>Install the plugins:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vim +NeoBundleInstall +qall
</span><span class='line'>vim +PluginInstall +qall
</span></code></pre></td></tr></table></div></figure>


<p>Your vim editor should look like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/161967893-c19e460a-a8f6-4841-b3cd-de8419522790.png" alt="image" /></p>

<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Discord Bot in Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/05/05/create-a-discord-bot-in-python/"/>
    <updated>2022-05-05T04:32:12-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/05/05/create-a-discord-bot-in-python</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/166907630-cfd0760e-ddff-46b4-9b82-f163fb90f0ee.png" alt="discord-logo" /></p>

<p>In this tutorial we will develop our own <strong><a href="https://discord.com/">Discord</a></strong> bot using <strong>Python</strong>.</p>

<p>The source code for this bot will be stored in my <a href="https://github.com/ruanbekker/discord-minecraft-python-bot">github repository</a></p>

<h2>About the bot</h2>

<p>First we will create a basic discord bot that will greet the message sender, and then we will create a Minecraft Bot, that will enable us to do the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:: Bot Usage ::
</span><span class='line'>!mc help          : shows help
</span><span class='line'>!mc serverusage   : shows system load in percentage
</span><span class='line'>!mc serverstatus  : shows if the server is online or offline
</span><span class='line'>!mc whoisonline   : shows who is online at the moment</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s get into it.</p>

<h2>Dependencies</h2>

<p>Create a python virtual environment and install the dependent packages:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python3 -m virtualenv .venv
</span><span class='line'>$ source .venv/bin/activate
</span><span class='line'>$ pip install discord
</span><span class='line'>$ pip install python-dotenv</span></code></pre></td></tr></table></div></figure>


<h2>Create the Discord Application</h2>

<p>We first need to create the application on discord and retrieve a token that our python app will require.</p>

<p>Create a application on discord:</p>

<ul>
<li><a href="https://discordapp.com/developers/applications">https://discordapp.com/developers/applications</a></li>
</ul>


<p>You should see:</p>

<p><img width="1782" alt="image" src="https://user-images.githubusercontent.com/567298/165783157-0747c6f1-af2d-434a-9e3f-1e554f7e69ef.png"></p>

<p>Click &ldquo;New Application&rdquo; and provide it a name:</p>

<p><img width="478" alt="image" src="https://user-images.githubusercontent.com/567298/165783246-68899cd9-c796-41a9-ae9d-88764a83ec0d.png"></p>

<p>Once you create the application you will get a screen to upload a logo, provide a description and most importantly get your application id as well as your public key:</p>

<p><img src="https://user-images.githubusercontent.com/567298/165911250-0fd11a0b-b851-4d65-a898-7049dd73aa60.png" alt="image" /></p>

<p>Then select the Bot section:</p>

<p><img width="1756" alt="image" src="https://user-images.githubusercontent.com/567298/165911940-a85498bd-d572-455b-b38a-50114e6b4144.png"></p>

<p>Then select &ldquo;Add Bot&rdquo;:</p>

<p><img width="717" alt="image" src="https://user-images.githubusercontent.com/567298/165912066-6cd72b29-e0fe-4c4f-b73d-269e48da61d6.png"></p>

<p>Select OAuth2 and select the &ldquo;bot&rdquo; scope:</p>

<p><img width="1751" alt="image" src="https://user-images.githubusercontent.com/567298/165912862-a51a9f29-d876-4ba7-b226-be78214c934d.png"></p>

<p>At the bottom of the page it will provide you with a URL that looks something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://discord.com/api/oauth2/authorize?client_id=xxxxxxxxxxx&permissions=0&scope=bot</span></code></pre></td></tr></table></div></figure>


<p>Paste the link in your browser and authorize the bot to your server of choice:</p>

<p><img src="https://user-images.githubusercontent.com/567298/165917380-6e8fbbed-9237-4017-a8bd-c27d58bcdc6d.png" alt="image" /></p>

<p>Then click authorize, and you should see your bot appearing on Discord:</p>

<p><img src="https://user-images.githubusercontent.com/567298/165917760-d8c132e9-18d4-4428-b551-c895d4a5102c.png" alt="image" /></p>

<h2>Developing the Discord Bot</h2>

<p>Now we will be building our python discord bot, head back to the &ldquo;Bot&rdquo; section and select &ldquo;Reset Token&rdquo;, then copy and store the token value to a file <code>.env</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DISCORD_TOKEN=xxxxxxxxx</span></code></pre></td></tr></table></div></figure>


<p>So in our current working directory, we should have a file <code>.env</code> with the following content:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat .env
</span><span class='line'>DISCORD_TOKEN=your-unique-token-value-will-be-here</span></code></pre></td></tr></table></div></figure>


<p>For this demonstration, I will create a private channel in discord called <code>minecraft-test</code> and add the bot <code>MinecraftBot</code> to the channel (this is only for testing, after testing you can add your bot to your other channels for other people to use):</p>

<p><img src="https://user-images.githubusercontent.com/567298/166233812-2596960b-5142-4ad1-809e-96d884ea5c58.png" alt="image" /></p>

<p>For our first test, a basic bot, where we would like to type <code>hello</code> and the bot should greet us by our username, in our <code>mc_discord_bot.py</code> file we will have:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">discord</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">dotenv</span> <span class="kn">import</span> <span class="n">load_dotenv</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOT_NAME</span> <span class="o">=</span> <span class="s">&quot;MinecraftBot&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">load_dotenv</span><span class="p">()</span>
</span><span class='line'><span class="n">DISCORD_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">&quot;DISCORD_TOKEN&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">bot</span> <span class="o">=</span> <span class="n">discord</span><span class="o">.</span><span class="n">Client</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@bot.event</span>
</span><span class='line'><span class="n">async</span> <span class="k">def</span> <span class="nf">on_ready</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">&#39;{bot.user} has logged in.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@bot.event</span>
</span><span class='line'><span class="n">async</span> <span class="k">def</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">message</span><span class="o">.</span><span class="n">author</span> <span class="o">==</span> <span class="n">bot</span><span class="o">.</span><span class="n">user</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">message</span><span class="o">.</span><span class="n">content</span> <span class="o">==</span> <span class="s">&#39;hello&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">await</span> <span class="n">message</span><span class="o">.</span><span class="n">channel</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">f</span><span class="s">&#39;Hey {message.author}&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">message</span><span class="o">.</span><span class="n">content</span> <span class="o">==</span> <span class="s">&#39;goodbye&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">await</span> <span class="n">message</span><span class="o">.</span><span class="n">channel</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">f</span><span class="s">&#39;Goodbye {message.author}&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">bot</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">DISCORD_TOKEN</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then run the bot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">python</span> <span class="n">mc_discord_bot</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="n">MinecraftBot</span> <span class="n">has</span> <span class="n">logged</span> <span class="ow">in</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>And when we type <code>hello</code> and <code>goodbye</code> you can see our bot responds on those values:</p>

<p><img src="https://user-images.githubusercontent.com/567298/166235388-7240a66c-2be4-4343-8f36-398077c4fcf6.png" alt="image" /></p>

<p>Now that we tested our bot, we can clear the <code>mc_discord_bot.py</code> and write our minecraft bot, the requirements of this bot is simple, but we would like the following:</p>

<ul>
<li>use the command <code>!mc</code> to trigger our bot and subcommands for what we want</li>
<li>able to see who is playing minecraft on our server at the moment</li>
<li>able to get the status if the minecraft server is online</li>
<li>able to get the server load percentage (as the bot runs on the minecraft server)</li>
</ul>


<p>This is our complete <code>mc_discord_bot.py</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">discord</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">discord.ext</span> <span class="kn">import</span> <span class="n">commands</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">dotenv</span> <span class="kn">import</span> <span class="n">load_dotenv</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">multiprocessing</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Variables</span>
</span><span class='line'><span class="n">BOT_NAME</span> <span class="o">=</span> <span class="s">&quot;MinecraftBot&quot;</span>
</span><span class='line'><span class="n">load_dotenv</span><span class="p">()</span>
</span><span class='line'><span class="n">DISCORD_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">&quot;DISCORD_TOKEN&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">minecraft_server_url</span> <span class="o">=</span> <span class="s">&quot;lightmc.fun&quot;</span> <span class="c"># this is just an example, and you should use your own minecraft server</span>
</span><span class='line'>
</span><span class='line'><span class="n">bot_help_message</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">:: Bot Usage ::</span>
</span><span class='line'><span class="s">`!mc help`                   : shows help</span>
</span><span class='line'><span class="s">`!mc serverusage`   : shows system load in percentage</span>
</span><span class='line'><span class="s">`!mc serverstatus` : shows if the server is online or offline</span>
</span><span class='line'><span class="s">`!mc whoisonline`   : shows who is online at the moment</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">available_commands</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;help&#39;</span><span class="p">,</span> <span class="s">&#39;serverusage&#39;</span><span class="p">,</span> <span class="s">&#39;serverstatus&#39;</span><span class="p">,</span> <span class="s">&#39;whoisonline&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Set the bot command prefix</span>
</span><span class='line'><span class="n">bot</span> <span class="o">=</span> <span class="n">commands</span><span class="o">.</span><span class="n">Bot</span><span class="p">(</span><span class="n">command_prefix</span><span class="o">=</span><span class="s">&quot;!&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Executes when the bot is ready</span>
</span><span class='line'><span class="nd">@bot.event</span>
</span><span class='line'><span class="n">async</span> <span class="k">def</span> <span class="nf">on_ready</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">&#39;{bot.user} succesfully logged in!&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Executes whenever there is an incoming message event</span>
</span><span class='line'><span class="nd">@bot.event</span>
</span><span class='line'><span class="n">async</span> <span class="k">def</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">&#39;Guild: {message.guild.name}, User: {message.author}, Message: {message.content}&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">message</span><span class="o">.</span><span class="n">author</span> <span class="o">==</span> <span class="n">bot</span><span class="o">.</span><span class="n">user</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">message</span><span class="o">.</span><span class="n">content</span> <span class="o">==</span> <span class="s">&#39;!mc&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">await</span> <span class="n">message</span><span class="o">.</span><span class="n">channel</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">bot_help_message</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;whosonline&#39;</span> <span class="ow">in</span> <span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">&#39;{message.author} used {message.content}&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">await</span> <span class="n">bot</span><span class="o">.</span><span class="n">process_commands</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Executes when the command mc is used and we trigger specific functions</span>
</span><span class='line'><span class="c"># when specific arguments are caught in our if statements</span>
</span><span class='line'><span class="nd">@bot.command</span><span class="p">()</span>
</span><span class='line'><span class="n">async</span> <span class="k">def</span> <span class="nf">mc</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">arg</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">arg</span> <span class="o">==</span> <span class="s">&#39;help&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">await</span> <span class="n">ctx</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">bot_help_message</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">arg</span> <span class="o">==</span> <span class="s">&#39;serverusage&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cpu_count</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">cpu_count</span><span class="p">()</span>
</span><span class='line'>        <span class="n">one</span><span class="p">,</span> <span class="n">five</span><span class="p">,</span> <span class="n">fifteen</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getloadavg</span><span class="p">()</span>
</span><span class='line'>        <span class="n">load_percentage</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">five</span> <span class="o">/</span> <span class="n">cpu_count</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>        <span class="n">await</span> <span class="n">ctx</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">f</span><span class="s">&#39;Server load is at {load_percentage}%&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">arg</span> <span class="o">==</span> <span class="s">&#39;serverstatus&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">f</span><span class="s">&#39;https://api.mcsrvstat.us/2/{minecraft_server_url}&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span><span class='line'>        <span class="n">server_status</span> <span class="o">=</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;online&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">server_status</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>            <span class="n">server_status</span> <span class="o">=</span> <span class="s">&#39;online&#39;</span>
</span><span class='line'>        <span class="n">await</span> <span class="n">ctx</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">f</span><span class="s">&#39;Server is {server_status}&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">arg</span> <span class="o">==</span> <span class="s">&#39;whoisonline&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;https://api.mcsrvstat.us/2/{minecraft_server_url}&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span><span class='line'>        <span class="n">players_status</span> <span class="o">=</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;players&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">players_status</span><span class="p">[</span><span class="s">&#39;online&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="n">players_online_message</span> <span class="o">=</span> <span class="s">&#39;No one is online&#39;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">players_status</span><span class="p">[</span><span class="s">&#39;online&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="n">players_online_username</span> <span class="o">=</span> <span class="n">players_status</span><span class="p">[</span><span class="s">&#39;list&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>            <span class="n">players_online_message</span> <span class="o">=</span> <span class="n">f</span><span class="s">&#39;1 player is online: {players_online_username}&#39;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">players_status</span><span class="p">[</span><span class="s">&#39;online&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="n">po</span> <span class="o">=</span> <span class="n">players_status</span><span class="p">[</span><span class="s">&#39;online&#39;</span><span class="p">]</span>
</span><span class='line'>            <span class="n">players_online_usernames</span> <span class="o">=</span> <span class="n">players_status</span><span class="p">[</span><span class="s">&#39;list&#39;</span><span class="p">]</span>
</span><span class='line'>            <span class="n">joined_usernames</span> <span class="o">=</span> <span class="s">&quot;, &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">players_online_usernames</span><span class="p">)</span>
</span><span class='line'>            <span class="n">players_online_message</span> <span class="o">=</span> <span class="n">f</span><span class="s">&#39;{po} players are online: {joined_usernames}&#39;</span>
</span><span class='line'>        <span class="n">await</span> <span class="n">ctx</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">f</span><span class="s">&#39;{players_online_message}&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">bot</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">DISCORD_TOKEN</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now we can start our bot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python mc_discord_bot.py
</span></code></pre></td></tr></table></div></figure>


<p>And we can run our help command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>!mc <span class="nb">help</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which will prompt our help message, and then test out the others:</p>

<p><img src="https://user-images.githubusercontent.com/567298/166237617-c2df1dd1-99bc-4558-8eb8-b1159e850836.png" alt="image" /></p>

<h2>Resources</h2>

<p>Thank you to the following authors, which really helped me doing this:</p>

<ul>
<li><a href="https://www.freecodecamp.org/news/create-a-discord-bot-with-python/">https://www.freecodecamp.org/news/create-a-discord-bot-with-python/</a></li>
<li><a href="https://betterprogramming.pub/coding-a-discord-bot-with-python-64da9d6cade7">https://betterprogramming.pub/coding-a-discord-bot-with-python-64da9d6cade7</a></li>
<li><a href="https://dev.to/codesphere/create-a-discord-bot-in-minutes-with-python-2jgp">https://dev.to/codesphere/create-a-discord-bot-in-minutes-with-python-2jgp</a></li>
</ul>


<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>

<p>The source code for this bot will be stored in my github repository:
- <a href="https://github.com/ruanbekker/discord-minecraft-python-bot">https://github.com/ruanbekker/discord-minecraft-python-bot</a></p>

<p>I&rsquo;ve started a brand new Discord server, not much happening at the moment, but planning to share and distribute tech content and a place for like minded people to hang out. If that&rsquo;s something you are interested in, feel free to join on <strong><a href="https://discord.gg/bPmc4Stchd">this link</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Publish and Use Your Ansible Role From Git]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/04/19/publish-and-use-your-ansible-role-from-git/"/>
    <updated>2022-04-19T04:35:09-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/04/19/publish-and-use-your-ansible-role-from-git</id>
    <content type="html"><![CDATA[<p>In this tutorial we will be creating a ansible role, publish our ansible role to github, then we will install the role locally and create a ansible playbook to use the ansible role.</p>

<p>The source code for this blog post will be available on my <a href="https://blog.ruanbekker.com/blog/2022/04/19/publish-and-use-your-ansible-role-from-git/">github</a> repository.</p>

<h2>Ansible Installation</h2>

<p>Create a virtual environment with Python:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ virtualenv .venv -p python3
</span><span class='line'>$ source .venv/bin/activate</span></code></pre></td></tr></table></div></figure>


<p>Install ansible with pip:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip install ansible==4.4.0</span></code></pre></td></tr></table></div></figure>


<p>Now that we have ansible installed, we can create our role.</p>

<h2>Initialize Ansible Role</h2>

<p>A Ansible Role consists of a couple of files, and using <code>ansible-galaxy</code> makes it easy initializing a boilerplate structure to begin with::</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ansible-galaxy init --init-path roles ssh_config
</span><span class='line'>- Role ssh_config was created successfully</span></code></pre></td></tr></table></div></figure>


<p>The role that we created is named <code>ssh_config</code> and will be placed under the directory <code>roles</code> under our current working directory.</p>

<h2>Define Role Tasks</h2>

<p>Create the dummy task under <code>roles/ssh_config/tasks/main.yml</code>:</p>

<script src="https://gist.github.com/ruanbekker/4971be45476915ba877bb444a9ff1c0b.js"></script>


<p>Then define the defaults environment values in the file <code>roles/ssh_config/defaults/main.yml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="c1"># defaults file for ssh_config</span>
</span><span class='line'><span class="l-Scalar-Plain">ssh_port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">22</span>
</span></code></pre></td></tr></table></div></figure>


<p>The value of <code>ssh_port</code> will default to <code>22</code> if we don&rsquo;t define it in our variables.</p>

<h2>Commit to Git</h2>

<p>The assumption is made here that you already created a git repository and that your access is sorted. Add the files and commit it to git:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ git add .</span>
</span><span class='line'><span class="l-Scalar-Plain">$ git commit -m &quot;Your message&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">$ git push origin main</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now your ansible role should be commited and visible in git.</p>

<h2>SSH Config Client Side</h2>

<p>I will be referencing the git source url via SSH, and since I am using my default ssh key, the ssh config isn&rsquo;t really needed, but if you are using a different version control system, with different ports or different ssh keys, the following ssh config snippet may be useful:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ cat ~/.ssh/config</span>
</span><span class='line'><span class="l-Scalar-Plain">Host github.com</span>
</span><span class='line'>    <span class="l-Scalar-Plain">User git</span>
</span><span class='line'>    <span class="l-Scalar-Plain">Port 22</span>
</span><span class='line'>    <span class="l-Scalar-Plain">IdentityFile ~/.ssh/id_rsa</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you won&rsquo;t be using SSH as the source url in your ansible setup for your role, you can skip the SSH setup.</p>

<h2>Installing the Ansible Role from Git</h2>

<p>When installing roles, ansible installs them by default under: <code>~/.ansible/roles</code>, <code>/usr/share/ansible/roles</code> or <code>/etc/ansible/roles</code>.</p>

<p>From our previous steps, we still have the ansible role content locally (not under the default installed directory), so by saying installing the role kinda sounds like we are doing double the work. But the intention is that you have your ansible role centralized and versioned on git, and on new servers or workstations where you want to consume the role from, that specific role, won&rsquo;t be present on that source.</p>

<p>To install the role from Git, we need to populate the <code>requirements.yml</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ mkdir ~/my-project</span>
</span><span class='line'><span class="l-Scalar-Plain">$ cd ~/my-project</span>
</span></code></pre></td></tr></table></div></figure>


<p>The requirements file is used to define where our role is located, which version and the type of version control, the <code>requirements.yml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">roles</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ssh_config</span>
</span><span class='line'>    <span class="l-Scalar-Plain">src</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ssh://git@github.com/ruanbekker/ansible-demo-role.git</span>
</span><span class='line'>    <span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main</span>
</span><span class='line'>    <span class="l-Scalar-Plain">scm</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git</span>
</span></code></pre></td></tr></table></div></figure>


<p>For other variations of using the requirements file, you can have a look at their <a href="https://galaxy.ansible.com/docs/using/installing.html#installing-multiple-roles-from-a-file">documentation</a></p>

<p>Then install the ansible role from our requirements file (I have used <code>--force</code> to overwrite my current one while testing):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ ansible-galaxy install -r requirements.yml --force</span>
</span><span class='line'><span class="l-Scalar-Plain">Starting galaxy role install process</span>
</span><span class='line'><span class="l-Scalar-Plain">- changing role ssh_config from main to main</span>
</span><span class='line'><span class="l-Scalar-Plain">- extracting ssh_config to /Users/ruan/.ansible/roles/ssh_config</span>
</span><span class='line'><span class="l-Scalar-Plain">- ssh_config (main) was installed successfully</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Ansible Playbook</h2>

<p>Define the ansible playbook to use the role that we installed from git, in a file called <code>playbook.yml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>  <span class="l-Scalar-Plain">roles</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ssh_config</span>
</span><span class='line'>  <span class="l-Scalar-Plain">vars</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ssh_port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2202</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the ansible playbook:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ ansible-playbook playbook.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">PLAY [localhost] *********************************************************************************************</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">TASK [Gathering Facts] ***************************************************************************************</span>
</span><span class='line'><span class="l-Scalar-Plain">ok</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">localhost</span><span class="p-Indicator">]</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">TASK [ssh_config</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Dummy task] *******************************************************************************</span>
</span><span class='line'><span class="l-Scalar-Plain">ok</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">localhost</span><span class="p-Indicator">]</span> <span class="l-Scalar-Plain">=&gt; {</span>
</span><span class='line'>    <span class="l-Scalar-Plain">&quot;msg&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;This</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">dummy</span><span class="nv"> </span><span class="s">task</span><span class="nv"> </span><span class="s">changing</span><span class="nv"> </span><span class="s">ssh</span><span class="nv"> </span><span class="s">port</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">2202.&quot;</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">PLAY RECAP ***************************************************************************************************</span>
</span><span class='line'><span class="l-Scalar-Plain">localhost</span>                  <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Provision a AWS EC2 Instance With Terraform]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/04/16/provision-a-aws-ec2-instance-with-terraform/"/>
    <updated>2022-04-16T19:04:08-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/04/16/provision-a-aws-ec2-instance-with-terraform</id>
    <content type="html"><![CDATA[<p>In this tutorial I will demonstrate how to use Terraform (a Infrastructure as Code Tool), to provision a AWS EC2 Instance and the source code that we will be using in this tutorial will be published to my <a href="https://github.com/ruanbekker/terraformfiles/tree/master/aws-ec2-instance">terraformfiles github repository</a>.</p>

<h2>Requirements</h2>

<p>To follow along this tutorial, you will need an AWS Account and Terraform installed</p>

<h2>Terraform</h2>

<p>To install Terraform for your operating system, you can follow <a href="https://learn.hashicorp.com/tutorials/terraform/install-cli">Terraform Installation Documentation</a>, I am using Mac OSx, so for me it will be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew tap hashicorp/tap
</span><span class='line'>brew install hashicorp/tap/terraform
</span></code></pre></td></tr></table></div></figure>


<p>To verify the installation, we can run <code>terraform version</code> and my output shows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Terraform v1.1.8
</span><span class='line'>on darwin_amd64
</span></code></pre></td></tr></table></div></figure>


<h2>Terraform Project Structure</h2>

<p>Create the directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir terraform-aws-ec2
</span><span class='line'><span class="nb">cd </span>terraform-aws-ec2
</span></code></pre></td></tr></table></div></figure>


<p>Create the following files: <code>main.tf</code>, <code>providers.tf</code>, <code>variables.tf</code>, <code>outputs.tf</code>, <code>locals.tf</code> and <code>terraform.tfvars</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>touch main.tf providers.tf variables.tf outputs.tf locals.tf terraform.tfvars
</span></code></pre></td></tr></table></div></figure>


<h2>Define Terraform Configuration Code</h2>

<p>First we need to define the aws provider, which we will do in <code>providers.tf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform <span class="o">{</span>
</span><span class='line'>  required_providers <span class="o">{</span>
</span><span class='line'>    <span class="nv">aws</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="nv">version</span> <span class="o">=</span> <span class="s2">&quot;~&gt; 3.27&quot;</span>
</span><span class='line'>      <span class="nb">source</span> <span class="o">=</span> <span class="s2">&quot;hashicorp/aws&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>provider <span class="s2">&quot;aws&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">region</span>  <span class="o">=</span> <span class="s2">&quot;eu-west-1&quot;</span>
</span><span class='line'>  <span class="nv">profile</span> <span class="o">=</span> <span class="s2">&quot;default&quot;</span>
</span><span class='line'>  <span class="nv">shared_credentials_file</span> <span class="o">=</span> <span class="s2">&quot;~/.aws/credentials&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will notice that I am defining my profile name <code>default</code> from the <code>~/.aws/credentials</code> credential provider in order for terraform to authenticate with AWS.</p>

<p>Next I am defining the <code>main.tf</code> which will be the file where we define our aws resources:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>data <span class="s2">&quot;aws_ami&quot;</span> <span class="s2">&quot;latest_ubuntu&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">most_recent</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nb">  </span><span class="nv">owners</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;099720109477&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  filter <span class="o">{</span>
</span><span class='line'>    <span class="nv">name</span>   <span class="o">=</span> <span class="s2">&quot;name&quot;</span>
</span><span class='line'>    <span class="nv">values</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;ubuntu/images/hvm-ssd/ubuntu-focal-20.04-*-server-*&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  filter <span class="o">{</span>
</span><span class='line'>    <span class="nv">name</span>   <span class="o">=</span> <span class="s2">&quot;virtualization-type&quot;</span>
</span><span class='line'>    <span class="nv">values</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;hvm&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  filter <span class="o">{</span>
</span><span class='line'>    <span class="nv">name</span>   <span class="o">=</span> <span class="s2">&quot;root-device-type&quot;</span>
</span><span class='line'>    <span class="nv">values</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;ebs&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  filter <span class="o">{</span>
</span><span class='line'>    <span class="nv">name</span>   <span class="o">=</span> <span class="s2">&quot;architecture&quot;</span>
</span><span class='line'>    <span class="nv">values</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;x86_64&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>data <span class="s2">&quot;aws_iam_policy_document&quot;</span> <span class="s2">&quot;assume_role_policy&quot;</span> <span class="o">{</span>
</span><span class='line'>  statement <span class="o">{</span>
</span><span class='line'>    <span class="nv">actions</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;sts:AssumeRole&quot;</span><span class="o">]</span>
</span><span class='line'>    principals <span class="o">{</span>
</span><span class='line'>      <span class="nb">type</span>        <span class="o">=</span> <span class="s2">&quot;Service&quot;</span>
</span><span class='line'>      <span class="nv">identifiers</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;ec2.amazonaws.com&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>data <span class="s2">&quot;aws_iam_policy&quot;</span> <span class="s2">&quot;ec2_read_only_access&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">arn</span> <span class="o">=</span> <span class="s2">&quot;arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;aws_iam_role&quot;</span> <span class="s2">&quot;ec2_access_role&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">name</span>               <span class="o">=</span> <span class="s2">&quot;${local.project_name}-ec2-role&quot;</span>
</span><span class='line'>  <span class="nv">assume_role_policy</span> <span class="o">=</span> data.aws_iam_policy_document.assume_role_policy.json
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;aws_iam_policy_attachment&quot;</span> <span class="s2">&quot;readonly_role_policy_attach&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">name</span>       <span class="o">=</span> <span class="s2">&quot;${local.project_name}-ec2-role-attachment&quot;</span>
</span><span class='line'>  <span class="nv">roles</span>      <span class="o">=</span> <span class="o">[</span>aws_iam_role.ec2_access_role.name<span class="o">]</span>
</span><span class='line'>  <span class="nv">policy_arn</span> <span class="o">=</span> data.aws_iam_policy.ec2_read_only_access.arn
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;aws_iam_instance_profile&quot;</span> <span class="s2">&quot;instance_profile&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">name</span>  <span class="o">=</span> <span class="s2">&quot;${local.project_name}-ec2-instance-profile&quot;</span>
</span><span class='line'>  <span class="nv">role</span> <span class="o">=</span> aws_iam_role.ec2_access_role.name
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;aws_security_group&quot;</span> <span class="s2">&quot;ec2&quot;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">name</span>        <span class="o">=</span> <span class="s2">&quot;${local.project_name}-ec2-sg&quot;</span>
</span><span class='line'>    <span class="nv">description</span> <span class="o">=</span> <span class="s2">&quot;${local.project_name}-ec2-sg&quot;</span>
</span><span class='line'>    <span class="nv">vpc_id</span>      <span class="o">=</span> var.vpc_id
</span><span class='line'>
</span><span class='line'>    <span class="nv">tags</span> <span class="o">=</span> merge<span class="o">(</span>
</span><span class='line'>      var.default_tags,
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>       <span class="nv">Name</span> <span class="o">=</span> <span class="s2">&quot;${local.project_name}-ec2-sg&quot;</span>
</span><span class='line'>      <span class="o">}</span>,
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;aws_security_group_rule&quot;</span> <span class="s2">&quot;ssh&quot;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">description</span>       <span class="o">=</span> <span class="s2">&quot;allows public ssh access to ec2&quot;</span>
</span><span class='line'>    <span class="nv">security_group_id</span> <span class="o">=</span> aws_security_group.ec2.id
</span><span class='line'>    <span class="nb">type</span>              <span class="o">=</span> <span class="s2">&quot;ingress&quot;</span>
</span><span class='line'>    <span class="nv">protocol</span>          <span class="o">=</span> <span class="s2">&quot;tcp&quot;</span>
</span><span class='line'>    <span class="nv">from_port</span>         <span class="o">=</span> 22
</span><span class='line'>    <span class="nv">to_port</span>           <span class="o">=</span> 22
</span><span class='line'>    <span class="nv">cidr_blocks</span>       <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;0.0.0.0/0&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;aws_security_group_rule&quot;</span> <span class="s2">&quot;egress&quot;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">description</span>       <span class="o">=</span> <span class="s2">&quot;allows egress&quot;</span>
</span><span class='line'>    <span class="nv">security_group_id</span> <span class="o">=</span> aws_security_group.ec2.id
</span><span class='line'>    <span class="nb">type</span>              <span class="o">=</span> <span class="s2">&quot;egress&quot;</span>
</span><span class='line'>    <span class="nv">protocol</span>          <span class="o">=</span> <span class="s2">&quot;-1&quot;</span>
</span><span class='line'>    <span class="nv">from_port</span>         <span class="o">=</span> 0
</span><span class='line'>    <span class="nv">to_port</span>           <span class="o">=</span> 0
</span><span class='line'>    <span class="nv">cidr_blocks</span>       <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;0.0.0.0/0&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>resource <span class="s2">&quot;aws_instance&quot;</span> <span class="s2">&quot;ec2&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">ami</span>                         <span class="o">=</span> data.aws_ami.latest_ubuntu.id
</span><span class='line'>  <span class="nv">instance_type</span>               <span class="o">=</span> var.instance_type
</span><span class='line'>  <span class="nv">subnet_id</span>                   <span class="o">=</span> var.subnet_id
</span><span class='line'>  <span class="nv">key_name</span>                    <span class="o">=</span> var.ssh_keyname
</span><span class='line'>  <span class="nv">vpc_security_group_ids</span>      <span class="o">=</span> <span class="o">[</span>aws_security_group.ec2.id<span class="o">]</span>
</span><span class='line'>  <span class="nv">associate_public_ip_address</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nb">  </span><span class="nv">monitoring</span>                  <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nb">  </span><span class="nv">iam_instance_profile</span>        <span class="o">=</span> aws_iam_instance_profile.instance_profile.name
</span><span class='line'>
</span><span class='line'>  lifecycle <span class="o">{</span>
</span><span class='line'>    <span class="nv">ignore_changes</span>            <span class="o">=</span> <span class="o">[</span>subnet_id, ami<span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  root_block_device <span class="o">{</span>
</span><span class='line'>      <span class="nv">volume_type</span>           <span class="o">=</span> <span class="s2">&quot;gp2&quot;</span>
</span><span class='line'>      <span class="nv">volume_size</span>           <span class="o">=</span> var.ebs_root_size_in_gb
</span><span class='line'>      <span class="nv">encrypted</span>             <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="nb">      </span><span class="nv">delete_on_termination</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">tags</span> <span class="o">=</span> merge<span class="o">(</span>
</span><span class='line'>    var.default_tags,
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>     <span class="nv">Name</span> <span class="o">=</span> <span class="s2">&quot;${local.project_name}&quot;</span>
</span><span class='line'>    <span class="o">}</span>,
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A couple of things are defined here:</p>

<ul>
<li>A data resource to fetch the latest Ubuntu 20.04 AMI</li>
<li>The IAM Role and Policy that we will use to associate to our EC2 Instance Profile</li>
<li>The EC2 Security Group</li>
<li>The EC2 Instance</li>
<li>The VPC ID and Subnet ID are required variables which we will set in <code>terraform.tfvars</code></li>
</ul>


<p>The next file will be our <code>variables.tf</code> file where we will define all our variable definitions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>variable <span class="s2">&quot;default_tags&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">default</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">Environment</span> <span class="o">=</span> <span class="s2">&quot;test&quot;</span>
</span><span class='line'>    <span class="nv">Owner</span>       <span class="o">=</span> <span class="s2">&quot;ruan.bekker&quot;</span>
</span><span class='line'>    <span class="nv">Project</span>     <span class="o">=</span> <span class="s2">&quot;terraform-blogpost&quot;</span>
</span><span class='line'>    <span class="nv">CostCenter</span>  <span class="o">=</span> <span class="s2">&quot;engineering&quot;</span>
</span><span class='line'>    <span class="nv">ManagedBy</span>   <span class="o">=</span> <span class="s2">&quot;terraform&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>variable <span class="s2">&quot;aws_region&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">type</span>        <span class="o">=</span> string
</span><span class='line'>  <span class="nv">default</span>     <span class="o">=</span> <span class="s2">&quot;eu-west-1&quot;</span>
</span><span class='line'>  <span class="nv">description</span> <span class="o">=</span> <span class="s2">&quot;the region to use in aws&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>variable <span class="s2">&quot;vpc_id&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">type</span>        <span class="o">=</span> string
</span><span class='line'>  <span class="nv">description</span> <span class="o">=</span> <span class="s2">&quot;the vpc to use&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>variable <span class="s2">&quot;ssh_keyname&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">type</span>        <span class="o">=</span> string
</span><span class='line'>  <span class="nv">description</span> <span class="o">=</span> <span class="s2">&quot;ssh key to use&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>variable <span class="s2">&quot;subnet_id&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">type</span>        <span class="o">=</span> string
</span><span class='line'>  <span class="nv">description</span> <span class="o">=</span> <span class="s2">&quot;the subnet id where the ec2 instance needs to be placed in&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>variable <span class="s2">&quot;instance_type&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">type</span>        <span class="o">=</span> string
</span><span class='line'>  <span class="nv">default</span>     <span class="o">=</span> <span class="s2">&quot;t3.nano&quot;</span>
</span><span class='line'>  <span class="nv">description</span> <span class="o">=</span> <span class="s2">&quot;the instance type to use&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>variable <span class="s2">&quot;project_id&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">type</span>        <span class="o">=</span> string
</span><span class='line'>  <span class="nv">default</span>     <span class="o">=</span> <span class="s2">&quot;terraform-blogpost&quot;</span>
</span><span class='line'>  <span class="nv">description</span> <span class="o">=</span> <span class="s2">&quot;the project name&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>variable <span class="s2">&quot;ebs_root_size_in_gb&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">type</span>        <span class="o">=</span> number
</span><span class='line'>  <span class="nv">default</span>     <span class="o">=</span> 10
</span><span class='line'>  <span class="nv">description</span> <span class="o">=</span> <span class="s2">&quot;the size in GB for the root disk&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>variable <span class="s2">&quot;environment_name&quot;</span> <span class="o">{</span>
</span><span class='line'>   <span class="nb">type</span>    <span class="o">=</span> string
</span><span class='line'>   <span class="nv">default</span> <span class="o">=</span> <span class="s2">&quot;dev&quot;</span>
</span><span class='line'>   <span class="nv">description</span> <span class="o">=</span> <span class="s2">&quot;the environment this resource will go to (assumption being made theres one account)&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next file is our <code>locals.tf</code> which just concatenates our project id and environment name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>locals <span class="o">{</span>
</span><span class='line'>  <span class="nv">project_name</span> <span class="o">=</span> <span class="s2">&quot;${var.project_id}-${var.environment_name}&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then our <code>outputs.tf</code> for the values that terraform should output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>output <span class="s2">&quot;id&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">description</span> <span class="o">=</span> <span class="s2">&quot;The ec2 instance id&quot;</span>
</span><span class='line'>  <span class="nv">value</span>       <span class="o">=</span> aws_instance.ec2.id
</span><span class='line'>  <span class="nv">sensitive</span>   <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>output <span class="s2">&quot;ip&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">description</span> <span class="o">=</span> <span class="s2">&quot;The ec2 instance public ip address&quot;</span>
</span><span class='line'>  <span class="nv">value</span>       <span class="o">=</span> aws_instance.ec2.public_ip
</span><span class='line'>  <span class="nv">sensitive</span>   <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>output <span class="s2">&quot;subnet_id&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">description</span> <span class="o">=</span> <span class="s2">&quot;the subnet id which will be used&quot;</span>
</span><span class='line'>  <span class="nv">value</span>       <span class="o">=</span> var.subnet_id
</span><span class='line'>  <span class="nv">sensitive</span>   <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then lastly our <code>terraform.tfvars</code>, which you will need to supply your own values to match your AWS Account:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># required</span>
</span><span class='line'><span class="nv">vpc_id</span> <span class="o">=</span> <span class="s2">&quot;vpc-063d7xxxxxxxxxxxx&quot;</span>
</span><span class='line'><span class="nv">ssh_keyname</span> <span class="o">=</span> <span class="s2">&quot;ireland-key&quot;</span>
</span><span class='line'><span class="nv">subnet_id</span> <span class="o">=</span> <span class="s2">&quot;subnet-04b3xxxxxxxxxxxxx&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy EC2 Instance</h2>

<p>Now that all our configuration is in place, we need to intialize terraform by downloading the providers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform init
</span></code></pre></td></tr></table></div></figure>


<p>Once the terraform init has completed, we can run a <code>terraform plan</code> which will show us what terraform will do. Since the <code>terraform.tfvars</code> are the default file for variables, we don&rsquo;t have to specify the name of the file, but since I want to be excplicit, I will include it (should you want to change the file name):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform plan -var-file<span class="o">=</span><span class="s2">&quot;terraform.tfvars&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now it&rsquo;s a good time to review what terraform wants to action by viewing the plan output, once you are happy you can deploy the changes by running a <code>terraform apply</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform apply -var-file<span class="o">=</span><span class="s2">&quot;terraform.tfvars&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Optional: You can override variables by either updating the <code>terraform.tfvars</code> or you can append them with terraform apply <code>-var-file="terraform.tfvars" -var="ssh_key=default_key"</code>, a successful output should show something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Outputs:
</span><span class='line'><span class="nv">id</span> <span class="o">=</span> <span class="s2">&quot;i-0dgacxxxxxxxxxxxx&quot;</span>
</span><span class='line'><span class="nv">ip</span> <span class="o">=</span> <span class="s2">&quot;18.26.xxx.92&quot;</span>
</span><span class='line'><span class="nv">subnet</span> <span class="o">=</span> <span class="s2">&quot;subnet-04b3xxxxxxxxxxxxx&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Access your EC2 Instance</h2>

<p>You can access the instance by SSH'ing to the IP that was returned by the output as well as the SSH key name that you provided, or you can make use of the <code>terraform output</code> to access the output value:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh -i ~/.ssh/id_rsa ubuntu@<span class="k">$(</span>terraform output -raw ip<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Cleanup</h2>

<p>To delete the infrastructure that Terraform provisioned:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terraform destroy
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matrix Bot Using SimpleMatrixBotlib in Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/03/29/matrix-bot-using-simplematrixbotlib-in-python/"/>
    <updated>2022-03-29T18:50:43-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/03/29/matrix-bot-using-simplematrixbotlib-in-python</id>
    <content type="html"><![CDATA[<p>In this tutorial we will setup a python bot for our matrix chat server. We will only do a couple of basic commands, so that you have a solid base to build from.</p>

<h2>Matrix Server</h2>

<p>In our <a href="https://blog.ruanbekker.com/blog/2022/03/29/setup-matrix-and-element-chat-server/">previous post</a> we&rsquo;ve setup a matrix and element server, so if you are following along, head over to that post to setup your matrix server before continuing.</p>

<h2>Matrix Python Bot</h2>

<p>We will be using <a href="https://simple-matrix-bot-lib.readthedocs.io/en/latest/index.html">simple-matrix-bot-lib</a> as our bot, so first we need to install it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python3 -m pip install simplematrixbotlib
</span><span class='line'>python3 -m pip install requests
</span></code></pre></td></tr></table></div></figure>


<p>We will need to authenticate with a user, so I will create a dedicated bot user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker <span class="nb">exec</span> -it matrix_synapse_1 bash
</span><span class='line'>&gt; register_new_matrix_user -c /data/homeserver.yaml http://localhost:8008
</span><span class='line'>
</span><span class='line'>New user localpart <span class="o">[</span>root<span class="o">]</span>: bot
</span><span class='line'>Password:
</span><span class='line'>Confirm password:
</span><span class='line'>Make admin <span class="o">[</span>no<span class="o">]</span>: no
</span><span class='line'>Sending registration request...
</span><span class='line'>Success!
</span></code></pre></td></tr></table></div></figure>


<p>The most basic bot is the echo bot, which just returns your message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">simplematrixbotlib</span> <span class="kn">as</span> <span class="nn">botlib</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">urllib.request</span> <span class="kn">import</span> <span class="n">ssl</span><span class="p">,</span> <span class="n">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">datetime</span><span class="o">,</span> <span class="nn">smtplib</span>
</span><span class='line'>
</span><span class='line'><span class="n">MATRIX_URL</span><span class="o">=</span><span class="s">&quot;https://matrix.foodmain.co.za&quot;</span>
</span><span class='line'><span class="n">MATRIX_USER</span><span class="o">=</span><span class="s">&quot;@foobot:matrix.foodmain.co.za&quot;</span>
</span><span class='line'><span class="n">MATRIX_PASS</span><span class="o">=</span><span class="s">&quot;foo&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">creds</span> <span class="o">=</span> <span class="n">botlib</span><span class="o">.</span><span class="n">Creds</span><span class="p">(</span><span class="n">MATRIX_URL</span><span class="p">,</span> <span class="n">MATRIX_USER</span><span class="p">,</span> <span class="n">MATRIX_PASS</span><span class="p">)</span>
</span><span class='line'><span class="n">bot</span> <span class="o">=</span> <span class="n">botlib</span><span class="o">.</span><span class="n">Bot</span><span class="p">(</span><span class="n">creds</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">PREFIX</span> <span class="o">=</span> <span class="s">&#39;!&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Help</span>
</span><span class='line'><span class="nd">@bot.listener.on_message_event</span>
</span><span class='line'><span class="n">async</span> <span class="k">def</span> <span class="nf">help</span><span class="p">(</span><span class="n">room</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>    <span class="n">match</span> <span class="o">=</span> <span class="n">botlib</span><span class="o">.</span><span class="n">MessageMatch</span><span class="p">(</span><span class="n">room</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">bot</span><span class="p">,</span> <span class="n">PREFIX</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">match</span><span class="o">.</span><span class="n">is_not_from_this_bot</span><span class="p">()</span> <span class="ow">and</span> <span class="n">match</span><span class="o">.</span><span class="n">prefix</span><span class="p">()</span> <span class="ow">and</span> <span class="n">match</span><span class="o">.</span><span class="n">command</span><span class="p">(</span><span class="s">&quot;help&quot;</span><span class="p">):</span>
</span><span class='line'>        <span class="n">help_message</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">        Help:</span>
</span><span class='line'><span class="s">         - !help</span>
</span><span class='line'><span class="s">        Echo</span>
</span><span class='line'><span class="s">         - !echo your message</span>
</span><span class='line'><span class="s">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">await</span> <span class="n">bot</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">send_markdown_message</span><span class="p">(</span><span class="n">room</span><span class="o">.</span><span class="n">room_id</span><span class="p">,</span> <span class="n">help_message</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Echo</span>
</span><span class='line'><span class="nd">@bot.listener.on_message_event</span>
</span><span class='line'><span class="n">async</span> <span class="k">def</span> <span class="nf">echo</span><span class="p">(</span><span class="n">room</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Example function that &quot;echoes&quot; arguements.</span>
</span><span class='line'><span class="sd">    Usage:</span>
</span><span class='line'><span class="sd">    user:  !echo say something</span>
</span><span class='line'><span class="sd">    bot:   say something</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">match</span> <span class="o">=</span> <span class="n">botlib</span><span class="o">.</span><span class="n">MessageMatch</span><span class="p">(</span><span class="n">room</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">bot</span><span class="p">,</span> <span class="n">PREFIX</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">match</span><span class="o">.</span><span class="n">is_not_from_this_bot</span><span class="p">()</span> <span class="ow">and</span> <span class="n">match</span><span class="o">.</span><span class="n">prefix</span><span class="p">()</span> <span class="ow">and</span> <span class="n">match</span><span class="o">.</span><span class="n">command</span><span class="p">(</span><span class="s">&quot;echo&quot;</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Room: {r}, User: {u}, Message: {m}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">r</span><span class="o">=</span><span class="n">room</span><span class="o">.</span><span class="n">room_id</span><span class="p">,</span> <span class="n">u</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">message</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;:&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span> <span class="n">m</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">message</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;:&#39;</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()))</span>
</span><span class='line'>        <span class="n">await</span> <span class="n">bot</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">send_text_message</span><span class="p">(</span><span class="n">room</span><span class="o">.</span><span class="n">room_id</span><span class="p">,</span> <span class="s">&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">arg</span> <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">match</span><span class="o">.</span><span class="n">args</span><span class="p">()))</span>
</span><span class='line'>
</span><span class='line'><span class="n">bot</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the bot, invite the bot user to a room and test it with <code>!echo hi</code></p>

<p>For a bot having to use the requests library, such as getting a quote from an api, we can use the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">simplematrixbotlib</span> <span class="kn">as</span> <span class="nn">botlib</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">urllib.request</span> <span class="kn">import</span> <span class="n">ssl</span><span class="p">,</span> <span class="n">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">datetime</span><span class="o">,</span> <span class="nn">smtplib</span>
</span><span class='line'>
</span><span class='line'><span class="n">MATRIX_URL</span><span class="o">=</span><span class="s">&quot;https://matrix.foodmain.co.za&quot;</span>
</span><span class='line'><span class="n">MATRIX_USER</span><span class="o">=</span><span class="s">&quot;@foobot:matrix.foodmain.co.za&quot;</span>
</span><span class='line'><span class="n">MATRIX_PASS</span><span class="o">=</span><span class="s">&quot;foo&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">creds</span> <span class="o">=</span> <span class="n">botlib</span><span class="o">.</span><span class="n">Creds</span><span class="p">(</span><span class="n">MATRIX_URL</span><span class="p">,</span> <span class="n">MATRIX_USER</span><span class="p">,</span> <span class="n">MATRIX_PASS</span><span class="p">)</span>
</span><span class='line'><span class="n">bot</span> <span class="o">=</span> <span class="n">botlib</span><span class="o">.</span><span class="n">Bot</span><span class="p">(</span><span class="n">creds</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">PREFIX</span> <span class="o">=</span> <span class="s">&#39;!&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Help</span>
</span><span class='line'><span class="nd">@bot.listener.on_message_event</span>
</span><span class='line'><span class="n">async</span> <span class="k">def</span> <span class="nf">help</span><span class="p">(</span><span class="n">room</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>    <span class="n">match</span> <span class="o">=</span> <span class="n">botlib</span><span class="o">.</span><span class="n">MessageMatch</span><span class="p">(</span><span class="n">room</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">bot</span><span class="p">,</span> <span class="n">PREFIX</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">match</span><span class="o">.</span><span class="n">is_not_from_this_bot</span><span class="p">()</span> <span class="ow">and</span> <span class="n">match</span><span class="o">.</span><span class="n">prefix</span><span class="p">()</span> <span class="ow">and</span> <span class="n">match</span><span class="o">.</span><span class="n">command</span><span class="p">(</span><span class="s">&quot;help&quot;</span><span class="p">):</span>
</span><span class='line'>        <span class="n">help_message</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">        Help:</span>
</span><span class='line'><span class="s">         - !help</span>
</span><span class='line'><span class="s">        Echo</span>
</span><span class='line'><span class="s">         - !echo msg</span>
</span><span class='line'><span class="s">        Fortune:</span>
</span><span class='line'><span class="s">         - !fortune</span>
</span><span class='line'><span class="s">        Quote:</span>
</span><span class='line'><span class="s">         - !quote</span>
</span><span class='line'><span class="s">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">await</span> <span class="n">bot</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">send_markdown_message</span><span class="p">(</span><span class="n">room</span><span class="o">.</span><span class="n">room_id</span><span class="p">,</span> <span class="n">help_message</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Echo</span>
</span><span class='line'><span class="nd">@bot.listener.on_message_event</span>
</span><span class='line'><span class="n">async</span> <span class="k">def</span> <span class="nf">echo</span><span class="p">(</span><span class="n">room</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Example function that &quot;echoes&quot; arguements.</span>
</span><span class='line'><span class="sd">    Usage:</span>
</span><span class='line'><span class="sd">    user: !echo say something</span>
</span><span class='line'><span class="sd">    bot:  say something</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">match</span> <span class="o">=</span> <span class="n">botlib</span><span class="o">.</span><span class="n">MessageMatch</span><span class="p">(</span><span class="n">room</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">bot</span><span class="p">,</span> <span class="n">PREFIX</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">match</span><span class="o">.</span><span class="n">is_not_from_this_bot</span><span class="p">()</span> <span class="ow">and</span> <span class="n">match</span><span class="o">.</span><span class="n">prefix</span><span class="p">()</span> <span class="ow">and</span> <span class="n">match</span><span class="o">.</span><span class="n">command</span><span class="p">(</span><span class="s">&quot;echo&quot;</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Room: {r}, User: {u}, Message: {m}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">r</span><span class="o">=</span><span class="n">room</span><span class="o">.</span><span class="n">room_id</span><span class="p">,</span> <span class="n">u</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">message</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;:&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span> <span class="n">m</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">message</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;:&#39;</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()))</span>
</span><span class='line'>        <span class="n">await</span> <span class="n">bot</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">send_text_message</span><span class="p">(</span><span class="n">room</span><span class="o">.</span><span class="n">room_id</span><span class="p">,</span> <span class="s">&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">arg</span> <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">match</span><span class="o">.</span><span class="n">args</span><span class="p">()))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Fortune</span>
</span><span class='line'><span class="nd">@bot.listener.on_message_event</span>
</span><span class='line'><span class="n">async</span> <span class="k">def</span> <span class="nf">fortune</span><span class="p">(</span><span class="n">room</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>    <span class="n">match</span> <span class="o">=</span> <span class="n">botlib</span><span class="o">.</span><span class="n">MessageMatch</span><span class="p">(</span><span class="n">room</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">bot</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">match</span><span class="o">.</span><span class="n">is_not_from_this_bot</span> <span class="ow">and</span> <span class="n">match</span><span class="o">.</span><span class="n">command</span><span class="p">(</span><span class="s">&#39;!fortune&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="n">fortune</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">([</span><span class="s">&#39;/usr/games/fortune&#39;</span><span class="p">],</span> <span class="n">capture_output</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;UTF-8&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">fortune</span><span class="p">)</span>
</span><span class='line'>        <span class="n">await</span> <span class="n">bot</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">send_text_message</span><span class="p">(</span><span class="n">room</span><span class="o">.</span><span class="n">room_id</span><span class="p">,</span> <span class="n">fortune</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Quotes</span>
</span><span class='line'><span class="nd">@bot.listener.on_message_event</span>
</span><span class='line'><span class="n">async</span> <span class="k">def</span> <span class="nf">quote</span><span class="p">(</span><span class="n">room</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>    <span class="n">match</span> <span class="o">=</span> <span class="n">botlib</span><span class="o">.</span><span class="n">MessageMatch</span><span class="p">(</span><span class="n">room</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">bot</span><span class="p">,</span> <span class="n">PREFIX</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">match</span><span class="o">.</span><span class="n">is_not_from_this_bot</span><span class="p">()</span> <span class="ow">and</span> <span class="n">match</span><span class="o">.</span><span class="n">prefix</span><span class="p">()</span> <span class="ow">and</span> <span class="p">(</span>
</span><span class='line'>            <span class="n">match</span><span class="o">.</span><span class="n">command</span><span class="p">(</span><span class="s">&quot;quote&quot;</span><span class="p">)</span> <span class="ow">or</span> <span class="n">match</span><span class="o">.</span><span class="n">command</span><span class="p">(</span><span class="s">&quot;q&quot;</span><span class="p">)):</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;https://goquotes-api.herokuapp.com/api/v1/random?count=1&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">json</span><span class="p">()[</span><span class="s">&#39;quotes&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="n">quote</span> <span class="o">=</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;text&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">author</span> <span class="o">=</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;author&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">tag</span> <span class="o">=</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;tag&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">formatted_message</span> <span class="o">=</span> <span class="n">f</span><span class="s">&quot;&quot;&quot;{quote}</span>
</span><span class='line'><span class="s">        - {author}</span>
</span><span class='line'><span class="s">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="c">#await bot.api.send_text_message(room.room_id, formatted_message)</span>
</span><span class='line'>        <span class="n">await</span> <span class="n">bot</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">send_markdown_message</span><span class="p">(</span><span class="n">room</span><span class="o">.</span><span class="n">room_id</span><span class="p">,</span>  <span class="n">formatted_message</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">bot</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Resources</h2>

<p>For more information, have a look at their <a href="https://simple-matrix-bot-lib.readthedocs.io/en/latest/index.html">documentation</a></p>

<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
</feed>
