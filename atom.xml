<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2020-02-21T00:12:47+02:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Persistent Volumes With K3d Kubernetes]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/02/21/persistent-volumes-with-k3d-kubernetes/"/>
    <updated>2020-02-21T00:07:48+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/02/21/persistent-volumes-with-k3d-kubernetes</id>
    <content type="html"><![CDATA[<p>With k3d we can mount the host to container path, and with persistent volumes we can set a hostPath for our persistent volumes. With k3d, all the nodes will be using the same volume mapping which maps back to the host.</p>

<p>We will test the data persistence by writing a file inside a container, kill the pod, then exec into the pod again and test if the data persisted</p>

<h2>The k3d Cluster</h2>

<p>Create the directory on the host where we will persist the data:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; mkdir -p /tmp/k3dvol</span></code></pre></td></tr></table></div></figure>


<p>Create the cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; k3d create --name "k3d-cluster" --volume /tmp/k3dvol:/tmp/k3dvol --publish "80:80" --workers 2
</span><span class='line'>&gt; export KUBECONFIG="$(k3d get-kubeconfig --name='k3d-cluster')"</span></code></pre></td></tr></table></div></figure>


<p>Our application will be a busybox container which will keep running with a ping command, map the persistent volume to <code>/data</code> inside the pod.</p>

<p>Our <code>app.yml</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apiVersion: v1
</span><span class='line'>kind: PersistentVolume
</span><span class='line'>metadata:
</span><span class='line'>  name: task-pv-volume
</span><span class='line'>  labels:
</span><span class='line'>    type: local
</span><span class='line'>spec:
</span><span class='line'>  storageClassName: manual
</span><span class='line'>  capacity:
</span><span class='line'>    storage: 1Gi
</span><span class='line'>  accessModes:
</span><span class='line'>    - ReadWriteOnce
</span><span class='line'>  hostPath:
</span><span class='line'>    path: "/tmp/k3dvol"
</span><span class='line'>---
</span><span class='line'>apiVersion: v1
</span><span class='line'>kind: PersistentVolumeClaim
</span><span class='line'>metadata:
</span><span class='line'>  name: task-pv-claim
</span><span class='line'>spec:
</span><span class='line'>  storageClassName: manual
</span><span class='line'>  accessModes:
</span><span class='line'>    - ReadWriteOnce
</span><span class='line'>  resources:
</span><span class='line'>    requests:
</span><span class='line'>      storage: 1Gi
</span><span class='line'>---
</span><span class='line'>apiVersion: apps/v1
</span><span class='line'>kind: Deployment
</span><span class='line'>metadata:
</span><span class='line'>  name: echo
</span><span class='line'>spec:
</span><span class='line'>  selector:
</span><span class='line'>    matchLabels:
</span><span class='line'>      app: echo
</span><span class='line'>  strategy:
</span><span class='line'>    type: Recreate
</span><span class='line'>  template:
</span><span class='line'>    metadata:
</span><span class='line'>      labels:
</span><span class='line'>        app: echo
</span><span class='line'>    spec:
</span><span class='line'>      volumes:
</span><span class='line'>        - name: task-pv-storage
</span><span class='line'>          persistentVolumeClaim:
</span><span class='line'>            claimName: task-pv-claim
</span><span class='line'>      containers:
</span><span class='line'>      - image: busybox
</span><span class='line'>        name: echo
</span><span class='line'>        volumeMounts:
</span><span class='line'>          - mountPath: "/data"
</span><span class='line'>            name: task-pv-storage
</span><span class='line'>        command: ["ping", "127.0.0.1"]</span></code></pre></td></tr></table></div></figure>


<p>Deploy the workload:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; kubectl apply -f app.yml
</span><span class='line'>persistentvolume/task-pv-volume created
</span><span class='line'>persistentvolumeclaim/task-pv-claim created
</span><span class='line'>deployment.apps/echo created</span></code></pre></td></tr></table></div></figure>


<p>View the persistent volumes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; kubectl get pv
</span><span class='line'>NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                    STORAGECLASS   REASON   AGE
</span><span class='line'>task-pv-volume                             1Gi        RWO            Retain           Bound    default/task-pv-claim    manual                  6s</span></code></pre></td></tr></table></div></figure>


<p>View the Persistent Volume Claims:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; kubectl get pvc
</span><span class='line'>NAME             STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
</span><span class='line'>task-pv-claim    Bound    task-pv-volume                             1Gi        RWO            manual         11s</span></code></pre></td></tr></table></div></figure>


<p>View the pods:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; kubectl get pods
</span><span class='line'>NAME                   READY   STATUS    RESTARTS   AGE
</span><span class='line'>echo-58fd7d9b6-x4rxj   1/1     Running   0          16s</span></code></pre></td></tr></table></div></figure>


<p>Exec into the pod:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; kubectl exec -it echo-58fd7d9b6-x4rxj sh
</span><span class='line'>/ # df -h
</span><span class='line'>Filesystem                Size      Used Available Use% Mounted on
</span><span class='line'>overlay                  58.4G     36.1G     19.3G  65% /
</span><span class='line'>osxfs                   233.6G    139.7G     86.3G  62% /data
</span><span class='line'>/dev/sda1                58.4G     36.1G     19.3G  65% /etc/hosts
</span><span class='line'>/dev/sda1                58.4G     36.1G     19.3G  65% /dev/termination-log
</span><span class='line'>/dev/sda1                58.4G     36.1G     19.3G  65% /etc/hostname
</span><span class='line'>/dev/sda1                58.4G     36.1G     19.3G  65% /etc/resolv.conf</span></code></pre></td></tr></table></div></figure>


<p>Write the hostname of the current pod to the persistent volume path:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/ # echo $(hostname)
</span><span class='line'>echo-58fd7d9b6-x4rxj
</span><span class='line'>/ # echo $(hostname) &gt; /data/hostname.txt
</span><span class='line'>/ # exit</span></code></pre></td></tr></table></div></figure>


<p>Exit the pod and read the content from the host (workstation/laptop):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; cat /tmp/k3dvol/hostname.txt
</span><span class='line'>echo-58fd7d9b6-x4rxj</span></code></pre></td></tr></table></div></figure>


<p>Look at the host where the pod is running on:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; kubectl get nodes -o wide
</span><span class='line'>NAME                       STATUS   ROLES    AGE   VERSION        INTERNAL-IP    EXTERNAL-IP   OS-IMAGE   KERNEL-VERSION     CONTAINER-RUNTIME
</span><span class='line'>k3d-k3d-cluster-server     Ready    master   13m   v1.17.2+k3s1   192.168.32.2   &lt;none&gt;        Unknown    4.9.184-linuxkit   containerd://1.3.3-k3s1
</span><span class='line'>k3d-k3d-cluster-worker-1   Ready    &lt;none&gt;   13m   v1.17.2+k3s1   192.168.32.4   &lt;none&gt;        Unknown    4.9.184-linuxkit   containerd://1.3.3-k3s1
</span><span class='line'>k3d-k3d-cluster-worker-0   Ready    &lt;none&gt;   13m   v1.17.2+k3s1   192.168.32.3   &lt;none&gt;        Unknown    4.9.184-linuxkit   containerd://1.3.3-k3s1</span></code></pre></td></tr></table></div></figure>


<p>Delete the pod:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; kubectl delete pod/echo-58fd7d9b6-x4rxj
</span><span class='line'>pod "echo-58fd7d9b6-x4rxj" deleted</span></code></pre></td></tr></table></div></figure>


<p>Wait until the pod is rescheduled again and verify if the pod is running on a different node:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; kubectl get pods -o wide
</span><span class='line'>NAME                   READY   STATUS    RESTARTS   AGE   IP          NODE                       NOMINATED NODE   READINESS GATES
</span><span class='line'>echo-58fd7d9b6-fkvbs   1/1     Running   0          35s   10.42.2.9   k3d-k3d-cluster-worker-1   &lt;none&gt;           &lt;none&gt;</span></code></pre></td></tr></table></div></figure>


<p>Exec into the new pod:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; kubectl exec -it echo-58fd7d9b6-fkvbs sh</span></code></pre></td></tr></table></div></figure>


<p>View if the data is persisted:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/ # hostname
</span><span class='line'>echo-58fd7d9b6-fkvbs
</span><span class='line'>
</span><span class='line'>/ # cat /data/hostname.txt
</span><span class='line'>echo-58fd7d9b6-x4rxj</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asynchronous Function With OpenFaas]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/02/17/python-asynchronous-function-with-openfaas/"/>
    <updated>2020-02-17T23:51:22+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/02/17/python-asynchronous-function-with-openfaas</id>
    <content type="html"><![CDATA[<p>In this post we will explore how to use asynchronous functions in OpenFaas.</p>

<h2>What are we doing</h2>

<p>A synchronous request blocks the client until operation completes, where a asynchronous request doesn’t block the client, which is nice to use for long-running tasks or function invocations to run in the background through the use of NATS Streaming.</p>

<p>We will be building a Python Flask API Server which will act as our webhook service. When we invoke our function by making a http request, we also include a callback url as a header which will be the address where the queue worker will post it&rsquo;s results.</p>

<p>Then we will make a http request to the synchronous function where we will get the response from the function and a http request to the asynchronous function, where we will get the response from the webhook service&rsquo;s logs</p>

<h2>Deploy OpenFaas</h2>

<p>Deploy OpenFaas on a k3d Kubernetes Cluster if you want to follow along on your laptop. You can follow this post to deploy a kubernetes cluster and deploying openfaas:</p>

<ul>
<li><a href="https://blog.ruanbekker.com/blog/2020/02/17/traefik-ingress-for-openfaas-on-kubernetes-k3d/">https://blog.ruanbekker.com/blog/2020/02/17/traefik-ingress-for-openfaas-on-kubernetes-k3d/</a></li>
</ul>


<h2>Webhook Service</h2>

<p>Lets build the Python Flask Webhook Service, our application code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">request</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">logging.config</span> <span class="kn">import</span> <span class="n">dictConfig</span>
</span><span class='line'>
</span><span class='line'><span class="n">dictConfig</span><span class="p">({</span>
</span><span class='line'>    <span class="s">&#39;version&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;formatters&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;default&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;format&#39;</span><span class="p">:</span> <span class="s">&#39;[</span><span class="si">%(asctime)s</span><span class="s">] </span><span class="si">%(levelname)s</span><span class="s"> in </span><span class="si">%(module)s</span><span class="s">: </span><span class="si">%(message)s</span><span class="s">&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}},</span>
</span><span class='line'>    <span class="s">&#39;handlers&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;wsgi&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;logging.StreamHandler&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;stream&#39;</span><span class="p">:</span> <span class="s">&#39;ext://flask.logging.wsgi_errors_stream&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;formatter&#39;</span><span class="p">:</span> <span class="s">&#39;default&#39;</span>
</span><span class='line'>    <span class="p">}},</span>
</span><span class='line'>    <span class="s">&#39;root&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;level&#39;</span><span class="p">:</span> <span class="s">&#39;INFO&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;handlers&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;wsgi&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;POST&quot;</span><span class="p">,</span> <span class="s">&quot;GET&quot;</span><span class="p">])</span>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&quot;GET&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">response</span><span class="p">[</span><span class="s">&quot;event&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;GET&quot;</span>
</span><span class='line'>        <span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&quot;Received Event: GET&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&quot;POST&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">response</span><span class="p">[</span><span class="s">&quot;event&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">get_data</span><span class="p">()</span>
</span><span class='line'>        <span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&quot;Receveid Event: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">response</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">response</span><span class="p">[</span><span class="s">&quot;event&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;OTHER&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Received Event:&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;event: {} </span><span class="se">\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">&quot;0.0.0.0&quot;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">5000</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our <code>Dockerfile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">FROM</span> <span class="n">python</span><span class="p">:</span><span class="mf">3.7</span><span class="o">-</span><span class="n">alpine</span>
</span><span class='line'><span class="n">RUN</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">flask</span>
</span><span class='line'><span class="n">ADD</span> <span class="n">app</span><span class="o">.</span><span class="n">py</span> <span class="o">/</span><span class="n">app</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="n">EXPOSE</span> <span class="mi">5000</span>
</span><span class='line'><span class="n">CMD</span> <span class="p">[</span><span class="s">&quot;python&quot;</span><span class="p">,</span> <span class="s">&quot;/app.py&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Building and Pushing to Docker Hub (or you can use my docker image):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">docker</span> <span class="n">build</span> <span class="o">-</span><span class="n">t</span> <span class="n">yourusername</span><span class="o">/</span><span class="n">python</span><span class="o">-</span><span class="n">flask</span><span class="o">-</span><span class="n">webhook</span><span class="p">:</span><span class="n">openfaas</span> <span class="o">.</span>
</span><span class='line'><span class="err">$</span> <span class="n">docker</span> <span class="n">push</span> <span class="n">yourusername</span><span class="o">/</span><span class="n">python</span><span class="o">-</span><span class="n">flask</span><span class="o">-</span><span class="n">webhook</span><span class="p">:</span><span class="n">openfaas</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the deployment manifest <code>webhook.yml</code> for our webhook service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">cat</span> <span class="o">&gt;</span> <span class="n">webhook</span><span class="o">.</span><span class="n">yml</span> <span class="o">&lt;&lt;</span> <span class="n">EOF</span>
</span><span class='line'><span class="n">apiVersion</span><span class="p">:</span> <span class="n">v1</span>
</span><span class='line'><span class="n">kind</span><span class="p">:</span> <span class="n">Service</span>
</span><span class='line'><span class="n">metadata</span><span class="p">:</span>
</span><span class='line'>  <span class="n">name</span><span class="p">:</span> <span class="n">webhook</span><span class="o">-</span><span class="n">service</span>
</span><span class='line'><span class="n">spec</span><span class="p">:</span>
</span><span class='line'>  <span class="n">selector</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="p">:</span> <span class="n">webhook</span>
</span><span class='line'>  <span class="n">ports</span><span class="p">:</span>
</span><span class='line'>    <span class="o">-</span> <span class="n">protocol</span><span class="p">:</span> <span class="n">TCP</span>
</span><span class='line'>      <span class="n">port</span><span class="p">:</span> <span class="mi">5000</span>
</span><span class='line'>      <span class="n">targetPort</span><span class="p">:</span> <span class="mi">5000</span>
</span><span class='line'>      <span class="n">name</span><span class="p">:</span> <span class="n">web</span>
</span><span class='line'><span class="o">---</span>
</span><span class='line'><span class="n">apiVersion</span><span class="p">:</span> <span class="n">extensions</span><span class="o">/</span><span class="n">v1beta1</span>
</span><span class='line'><span class="n">kind</span><span class="p">:</span> <span class="n">Ingress</span>
</span><span class='line'><span class="n">metadata</span><span class="p">:</span>
</span><span class='line'>  <span class="n">name</span><span class="p">:</span> <span class="n">webhook</span><span class="o">-</span><span class="n">ingress</span>
</span><span class='line'>  <span class="n">annotations</span><span class="p">:</span>
</span><span class='line'>    <span class="n">kubernetes</span><span class="o">.</span><span class="n">io</span><span class="o">/</span><span class="n">ingress</span><span class="o">.</span><span class="n">class</span><span class="p">:</span> <span class="n">traefik</span>
</span><span class='line'><span class="n">spec</span><span class="p">:</span>
</span><span class='line'>  <span class="n">rules</span><span class="p">:</span>
</span><span class='line'>  <span class="o">-</span> <span class="n">host</span><span class="p">:</span> <span class="n">webhook</span><span class="o">.</span><span class="n">localdns</span><span class="o">.</span><span class="n">xyz</span>
</span><span class='line'>    <span class="n">http</span><span class="p">:</span>
</span><span class='line'>      <span class="n">paths</span><span class="p">:</span>
</span><span class='line'>      <span class="o">-</span> <span class="n">backend</span><span class="p">:</span>
</span><span class='line'>          <span class="n">serviceName</span><span class="p">:</span> <span class="n">webhook</span><span class="o">-</span><span class="n">service</span>
</span><span class='line'>          <span class="n">servicePort</span><span class="p">:</span> <span class="mi">5000</span>
</span><span class='line'><span class="o">---</span>
</span><span class='line'><span class="n">apiVersion</span><span class="p">:</span> <span class="n">apps</span><span class="o">/</span><span class="n">v1</span>
</span><span class='line'><span class="n">kind</span><span class="p">:</span> <span class="n">Deployment</span>
</span><span class='line'><span class="n">metadata</span><span class="p">:</span>
</span><span class='line'>  <span class="n">labels</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="p">:</span> <span class="n">webhook</span>
</span><span class='line'>  <span class="n">name</span><span class="p">:</span> <span class="n">webhook</span>
</span><span class='line'><span class="n">spec</span><span class="p">:</span>
</span><span class='line'>  <span class="n">replicas</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">selector</span><span class="p">:</span>
</span><span class='line'>    <span class="n">matchLabels</span><span class="p">:</span>
</span><span class='line'>      <span class="n">app</span><span class="p">:</span> <span class="n">webhook</span>
</span><span class='line'>  <span class="n">template</span><span class="p">:</span>
</span><span class='line'>    <span class="n">metadata</span><span class="p">:</span>
</span><span class='line'>      <span class="n">labels</span><span class="p">:</span>
</span><span class='line'>        <span class="n">app</span><span class="p">:</span> <span class="n">webhook</span>
</span><span class='line'>    <span class="n">spec</span><span class="p">:</span>
</span><span class='line'>      <span class="n">containers</span><span class="p">:</span>
</span><span class='line'>      <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">webhook</span>
</span><span class='line'>        <span class="n">image</span><span class="p">:</span> <span class="n">ruanbekker</span><span class="o">/</span><span class="n">python</span><span class="o">-</span><span class="n">flask</span><span class="o">-</span><span class="n">webhook</span><span class="p">:</span><span class="n">openfaas</span>
</span><span class='line'>        <span class="n">imagePullPolicy</span><span class="p">:</span> <span class="n">IfNotPresent</span>
</span><span class='line'>        <span class="n">ports</span><span class="p">:</span>
</span><span class='line'>        <span class="o">-</span> <span class="n">containerPort</span><span class="p">:</span> <span class="mi">5000</span>
</span><span class='line'>          <span class="n">name</span><span class="p">:</span> <span class="n">http</span>
</span><span class='line'>          <span class="n">protocol</span><span class="p">:</span> <span class="n">TCP</span>
</span><span class='line'><span class="n">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now deploy to kubernetes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">kubectl</span> <span class="nb">apply</span> <span class="o">-</span><span class="n">f</span> <span class="n">webhook</span><span class="o">.</span><span class="n">yml</span>
</span></code></pre></td></tr></table></div></figure>


<p>After a minute or so, verify that you get a response when making a http request:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">curl</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">webhook</span><span class="o">.</span><span class="n">localdns</span><span class="o">.</span><span class="n">xyz</span>
</span><span class='line'><span class="n">event</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;event&#39;</span><span class="p">:</span> <span class="s">&#39;GET&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy the OpenFaas Function</h2>

<p>We will deploy a dockerfile type function which will return the data that we feed it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">faas</span><span class="o">-</span><span class="n">cli</span> <span class="n">new</span> <span class="o">--</span><span class="n">lang</span> <span class="n">dockerfile</span> <span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span>
</span><span class='line'><span class="err">$</span> <span class="n">faas</span><span class="o">-</span><span class="n">cli</span> <span class="n">up</span> <span class="o">-</span><span class="n">f</span> <span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span><span class="o">.</span><span class="n">yml</span>
</span><span class='line'>
</span><span class='line'><span class="n">Deploying</span><span class="p">:</span> <span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Deployed</span><span class="o">.</span> <span class="mi">202</span> <span class="n">Accepted</span><span class="o">.</span>
</span><span class='line'><span class="n">URL</span><span class="p">:</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">openfaas</span><span class="o">.</span><span class="n">localdns</span><span class="o">.</span><span class="n">xyz</span><span class="o">/</span><span class="n">function</span><span class="o">/</span><span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span>
</span></code></pre></td></tr></table></div></figure>


<p>List the functions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">faas</span><span class="o">-</span><span class="n">cli</span> <span class="nb">list</span>
</span><span class='line'><span class="n">Function</span>                       <span class="n">Invocations</span>      <span class="n">Replicas</span>
</span><span class='line'><span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span>            <span class="mi">0</span>               <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Describe the function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">faas</span><span class="o">-</span><span class="n">cli</span> <span class="n">describe</span> <span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span>
</span><span class='line'><span class="n">Name</span><span class="p">:</span>                <span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span>
</span><span class='line'><span class="n">Status</span><span class="p">:</span>              <span class="n">Ready</span>
</span><span class='line'><span class="n">Replicas</span><span class="p">:</span>            <span class="mi">1</span>
</span><span class='line'><span class="n">Available</span> <span class="n">replicas</span><span class="p">:</span>  <span class="mi">1</span>
</span><span class='line'><span class="n">Invocations</span><span class="p">:</span>         <span class="mi">0</span>
</span><span class='line'><span class="n">Image</span><span class="p">:</span>               <span class="n">ruanbekker</span><span class="o">/</span><span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span><span class="p">:</span><span class="n">latest</span>
</span><span class='line'><span class="n">Function</span> <span class="n">process</span><span class="p">:</span>
</span><span class='line'><span class="n">URL</span><span class="p">:</span>                 <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">openfaas</span><span class="o">.</span><span class="n">localdns</span><span class="o">.</span><span class="n">xyz</span><span class="o">/</span><span class="n">function</span><span class="o">/</span><span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span>
</span><span class='line'><span class="n">Async</span> <span class="n">URL</span><span class="p">:</span>           <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">openfaas</span><span class="o">.</span><span class="n">localdns</span><span class="o">.</span><span class="n">xyz</span><span class="o">/</span><span class="n">async</span><span class="o">-</span><span class="n">function</span><span class="o">/</span><span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span>
</span><span class='line'><span class="n">Labels</span><span class="p">:</span>              <span class="n">faas_function</span> <span class="p">:</span> <span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span>
</span><span class='line'><span class="n">Annotations</span><span class="p">:</span>         <span class="n">prometheus</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="n">scrape</span> <span class="p">:</span> <span class="n">false</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Testing</h2>

<p>Test synchronous function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">curl</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">openfaas</span><span class="o">.</span><span class="n">localdns</span><span class="o">.</span><span class="n">xyz</span><span class="o">/</span><span class="n">function</span><span class="o">/</span><span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span> <span class="o">-</span><span class="n">d</span> <span class="s">&quot;test&quot;</span>
</span><span class='line'><span class="n">test</span>
</span></code></pre></td></tr></table></div></figure>


<p>Test asynchronous function, remember, here we need to provide the callback url which the queue worker will inform, which will be our webhook service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">curl</span> <span class="o">-</span><span class="n">i</span> <span class="o">-</span><span class="n">H</span> <span class="s">&quot;X-Callback-Url: http://webhook-service.default.svc.cluster.local:5000&quot;</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">openfaas</span><span class="o">.</span><span class="n">localdns</span><span class="o">.</span><span class="n">xyz</span><span class="o">/</span><span class="n">async</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">function</span><span class="o">/</span><span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span> <span class="o">-</span><span class="n">d</span> <span class="s">&quot;asyyyyync&quot;</span>
</span><span class='line'><span class="n">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">202</span> <span class="n">Accepted</span>
</span><span class='line'><span class="n">Content</span><span class="o">-</span><span class="n">Length</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'><span class="n">Date</span><span class="p">:</span> <span class="n">Mon</span><span class="p">,</span> <span class="mi">17</span> <span class="n">Feb</span> <span class="mi">2020</span> <span class="mi">13</span><span class="p">:</span><span class="mi">57</span><span class="p">:</span><span class="mi">26</span> <span class="n">GMT</span>
</span><span class='line'><span class="n">Vary</span><span class="p">:</span> <span class="n">Accept</span><span class="o">-</span><span class="n">Encoding</span>
</span><span class='line'><span class="n">X</span><span class="o">-</span><span class="n">Call</span><span class="o">-</span><span class="n">Id</span><span class="p">:</span> <span class="n">d757c10f</span><span class="o">-</span><span class="mi">4293</span><span class="o">-</span><span class="mi">4</span><span class="n">daa</span><span class="o">-</span><span class="n">bf52</span><span class="o">-</span><span class="n">bbdc17b7dea3</span>
</span><span class='line'><span class="n">X</span><span class="o">-</span><span class="n">Start</span><span class="o">-</span><span class="n">Time</span><span class="p">:</span> <span class="mi">1581947846737501600</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check the logs of the webhook pod:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">kubectl</span> <span class="n">logs</span> <span class="o">-</span><span class="n">f</span> <span class="n">pod</span><span class="o">/</span><span class="err">$</span><span class="p">(</span><span class="n">kubectl</span> <span class="n">get</span> <span class="n">pods</span> <span class="o">--</span><span class="n">selector</span><span class="o">=</span><span class="n">app</span><span class="o">=</span><span class="n">webhook</span> <span class="o">--</span><span class="n">output</span><span class="o">=</span><span class="n">jsonpath</span><span class="o">=</span><span class="s">&quot;{.items..metadata.name}&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mi">2020</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mi">17</span> <span class="mi">13</span><span class="p">:</span><span class="mi">57</span><span class="p">:</span><span class="mi">26</span><span class="p">,</span><span class="mi">774</span><span class="p">]</span> <span class="n">INFO</span> <span class="ow">in</span> <span class="n">app</span><span class="p">:</span> <span class="n">Receveid</span> <span class="n">Event</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;event&#39;</span><span class="p">:</span> <span class="n">b</span><span class="s">&#39;asyyyyync&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">[</span><span class="mi">2020</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mi">17</span> <span class="mi">13</span><span class="p">:</span><span class="mi">57</span><span class="p">:</span><span class="mi">26</span><span class="p">,</span><span class="mi">775</span><span class="p">]</span> <span class="n">INFO</span> <span class="ow">in</span> <span class="n">internal</span><span class="p">:</span> <span class="mf">10.42</span><span class="o">.</span><span class="mf">0.6</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">17</span><span class="o">/</span><span class="n">Feb</span><span class="o">/</span><span class="mi">2020</span> <span class="mi">13</span><span class="p">:</span><span class="mi">57</span><span class="p">:</span><span class="mi">26</span><span class="p">]</span> <span class="s">&quot;POST / HTTP/1.1&quot;</span> <span class="mi">200</span> <span class="o">-</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check the logs of the queue worker:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">kubectl</span> <span class="n">logs</span> <span class="o">-</span><span class="n">f</span> <span class="n">deployment</span><span class="o">/</span><span class="n">queue</span><span class="o">-</span><span class="n">worker</span> <span class="o">-</span><span class="n">n</span> <span class="n">openfaas</span>
</span><span class='line'><span class="p">[</span><span class="mi">45</span><span class="p">]</span> <span class="n">Received</span> <span class="n">on</span> <span class="p">[</span><span class="n">faas</span><span class="o">-</span><span class="n">request</span><span class="p">]:</span> <span class="s">&#39;sequence:45 subject:&quot;faas-request&quot; data:&quot;{</span><span class="se">\&quot;</span><span class="s">Header</span><span class="se">\&quot;</span><span class="s">:{</span><span class="se">\&quot;</span><span class="s">Accept</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">*/*</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">Accept-Encoding</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">gzip</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">Content-Length</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">9</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">Content-Type</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">application/x-www-form-urlencoded</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">User-Agent</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">curl/7.54.0</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">X-Call-Id</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">d757c10f-4293-4daa-bf52-bbdc17b7dea3</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">X-Callback-Url</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">http://webhook-service.default.svc.cluster.local:5000</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">X-Forwarded-For</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">10.42.0.0</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">X-Forwarded-Host</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">openfaas.localdns.xyz</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">X-Forwarded-Port</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">80</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">X-Forwarded-Proto</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">http</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">X-Forwarded-Server</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">traefik-6787cddb4b-87zss</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">X-Real-Ip</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">10.42.0.0</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">X-Start-Time</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">1581947846737501600</span><span class="se">\&quot;</span><span class="s">]},</span><span class="se">\&quot;</span><span class="s">Host</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;</span><span class="s">openfaas.localdns.xyz</span><span class="se">\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">Body</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;</span><span class="s">YXN5eXl5eW5j</span><span class="se">\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">Method</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;</span><span class="s">POST</span><span class="se">\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">Path</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">QueryString</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">Function</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;</span><span class="s">openfaas-function-cat</span><span class="se">\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">CallbackUrl</span><span class="se">\&quot;</span><span class="s">:{</span><span class="se">\&quot;</span><span class="s">Scheme</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;</span><span class="s">http</span><span class="se">\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">Opaque</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">User</span><span class="se">\&quot;</span><span class="s">:null,</span><span class="se">\&quot;</span><span class="s">Host</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;</span><span class="s">webhook-service.default.svc.cluster.local:5000</span><span class="se">\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">Path</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">RawPath</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">ForceQuery</span><span class="se">\&quot;</span><span class="s">:false,</span><span class="se">\&quot;</span><span class="s">RawQuery</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">Fragment</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;\&quot;</span><span class="s">}}&quot; timestamp:1581947846738308800 &#39;</span>
</span><span class='line'><span class="n">Invoking</span><span class="p">:</span> <span class="n">openfaas</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">cat</span> <span class="k">with</span> <span class="mi">9</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">via</span><span class="p">:</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">gateway</span><span class="o">.</span><span class="n">openfaas</span><span class="o">.</span><span class="n">svc</span><span class="o">.</span><span class="n">cluster</span><span class="o">.</span><span class="n">local</span><span class="p">:</span><span class="mi">8080</span><span class="o">/</span><span class="n">function</span><span class="o">/</span><span class="n">openfaas</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">cat</span><span class="o">/</span>
</span><span class='line'><span class="n">Invoked</span><span class="p">:</span> <span class="n">openfaas</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">cat</span> <span class="p">[</span><span class="mi">200</span><span class="p">]</span> <span class="ow">in</span> <span class="mf">0.029029</span><span class="n">s</span>
</span><span class='line'><span class="n">Callback</span> <span class="n">to</span><span class="p">:</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">webhook</span><span class="o">-</span><span class="n">service</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">svc</span><span class="o">.</span><span class="n">cluster</span><span class="o">.</span><span class="n">local</span><span class="p">:</span><span class="mi">5000</span>
</span><span class='line'><span class="n">openfaas</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">cat</span> <span class="n">returned</span> <span class="mi">9</span> <span class="nb">bytes</span>
</span><span class='line'><span class="n">Posted</span> <span class="n">result</span> <span class="k">for</span> <span class="n">openfaas</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">cat</span> <span class="n">to</span> <span class="n">callback</span><span class="o">-</span><span class="n">url</span><span class="p">:</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">webhook</span><span class="o">-</span><span class="n">service</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">svc</span><span class="o">.</span><span class="n">cluster</span><span class="o">.</span><span class="n">local</span><span class="p">:</span><span class="mi">5000</span><span class="p">,</span> <span class="n">status</span><span class="p">:</span> <span class="mi">200</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make 1000 Requests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">date</span> <span class="o">&gt;</span> <span class="n">time</span><span class="o">.</span><span class="n">date</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">{</span><span class="mf">1.</span><span class="o">.</span><span class="mi">1000</span><span class="p">}</span>
</span><span class='line'>    <span class="n">do</span>
</span><span class='line'>      <span class="n">curl</span> <span class="o">-</span><span class="n">i</span> <span class="o">-</span><span class="n">H</span> <span class="s">&quot;X-Callback-Url: http://webhook-service.default.svc.cluster.local:5000&quot;</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">openfaas</span><span class="o">.</span><span class="n">localdns</span><span class="o">.</span><span class="n">xyz</span><span class="o">/</span><span class="n">async</span><span class="o">-</span><span class="n">function</span><span class="o">/</span><span class="n">openfaas</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">cat</span> <span class="o">-</span><span class="n">d</span> <span class="s">&quot;asyyyyync&quot;</span>
</span><span class='line'>    <span class="n">done</span>
</span><span class='line'>  <span class="n">date</span> <span class="o">&gt;&gt;</span> <span class="n">time</span><span class="o">.</span><span class="n">date</span>
</span></code></pre></td></tr></table></div></figure>


<p>View the log file that we wrote before we started and finished our requests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">cat</span> <span class="n">time</span><span class="o">.</span><span class="n">date</span>
</span><span class='line'><span class="n">Mon</span> <span class="n">Feb</span> <span class="mi">17</span> <span class="mi">16</span><span class="p">:</span><span class="mo">03</span><span class="p">:</span><span class="mi">16</span> <span class="n">SAST</span> <span class="mi">2020</span>
</span><span class='line'><span class="n">Mon</span> <span class="n">Feb</span> <span class="mi">17</span> <span class="mi">16</span><span class="p">:</span><span class="mo">03</span><span class="p">:</span><span class="mi">48</span> <span class="n">SAST</span> <span class="mi">2020</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last request was actioned at:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">[</span><span class="mi">2020</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mi">17</span> <span class="mi">14</span><span class="p">:</span><span class="mo">03</span><span class="p">:</span><span class="mi">52</span><span class="p">,</span><span class="mi">421</span><span class="p">]</span> <span class="n">INFO</span> <span class="ow">in</span> <span class="n">internal</span><span class="p">:</span> <span class="mf">10.42</span><span class="o">.</span><span class="mf">0.6</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">17</span><span class="o">/</span><span class="n">Feb</span><span class="o">/</span><span class="mi">2020</span> <span class="mi">14</span><span class="p">:</span><span class="mo">03</span><span class="p">:</span><span class="mi">52</span><span class="p">]</span> <span class="s">&quot;POST / HTTP/1.1&quot;</span> <span class="mi">200</span> <span class="o">-</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>This was a basic example to demonstrate async functions using OpenFaas</p>

<h2>OpenFaas Documentation:</h2>

<ul>
<li><a href="https://docs.openfaas.com">https://docs.openfaas.com</a></li>
<li><a href="https://docs.openfaas.com/reference/async/">https://docs.openfaas.com/reference/async/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Traefik Ingress for OpenFaas on Kubernetes (K3d)]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/02/17/traefik-ingress-for-openfaas-on-kubernetes-k3d/"/>
    <updated>2020-02-17T23:36:33+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/02/17/traefik-ingress-for-openfaas-on-kubernetes-k3d</id>
    <content type="html"><![CDATA[<p>In this post we will deploy <a href="https://www.openfaas.com/">OpenFaas</a> on Kubernetes locally using <a href="https://github.com/alexellis/k3sup">k3sup</a> and <a href="https://github.com/rancher/k3d">k3d</a>, then deploy a Traefik Ingress so that we can access the OpenFaas Gateway on HTTP over the standard port 80.</p>

<p>K3d is a amazing wrapper that deploys a k3s cluster on docker, and k3sup makes it very easy to provision OpenFaas to your Kubernetes cluster.</p>

<h2>Deploy a Kubernetes Cluster</h2>

<p>If you have not installed k3d, you can install k3d on mac with brew:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install k3d</span></code></pre></td></tr></table></div></figure>


<p>We will deploy our cluster with 2 worker nodes and publish port 80 to the containers port 80:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ k3d create --name="demo" --workers="2" --publish="80:80"</span></code></pre></td></tr></table></div></figure>


<p>Point the kubeconfig to the location that k3d generated:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export KUBECONFIG="$(k3d get-kubeconfig --name='demo')"</span></code></pre></td></tr></table></div></figure>


<h2>Deploy OpenFaas</h2>

<p>First we need to get k3sup:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -sLfS https://get.k3sup.dev | sudo sh</span></code></pre></td></tr></table></div></figure>


<p>Once k3sup is installed, deploy OpenFaas to your cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ k3sup app install openfaas</span></code></pre></td></tr></table></div></figure>


<p>Give it a minute or so and check if everything is running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get pods -n openfaas
</span><span class='line'>NAMESPACE     NAME                                 READY   STATUS      RESTARTS   AGE
</span><span class='line'>openfaas      alertmanager-546f66b6c6-qtb69        1/1     Running     0          5m
</span><span class='line'>openfaas      basic-auth-plugin-79b9878b7b-7vlln   1/1     Running     0          4m59s
</span><span class='line'>openfaas      faas-idler-db8cd9c7d-8xfpp           1/1     Running     2          4m57s
</span><span class='line'>openfaas      gateway-7dcc6d694d-dmvqn             2/2     Running     0          4m56s
</span><span class='line'>openfaas      nats-d6d574749-rt9vw                 1/1     Running     0          4m56s
</span><span class='line'>openfaas      prometheus-d99669d9b-mfxc8           1/1     Running     0          4m53s
</span><span class='line'>openfaas      queue-worker-75f44b56b9-mhhbv        1/1     Running     0          4m52s</span></code></pre></td></tr></table></div></figure>


<h2>Traefik Ingress</h2>

<p>In my scenario, I am using <code>openfaas.localdns.xyz</code> which resolves to <code>127.0.0.1</code>. Next we need to know to which service to route the traffic to, we can find that by:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get svc/gateway -n openfaas
</span><span class='line'>NAME      TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE
</span><span class='line'>gateway   ClusterIP   10.43.174.57   &lt;none&gt;        8080/TCP   23m</span></code></pre></td></tr></table></div></figure>


<p>Below is our ingress.yml:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apiVersion: extensions/v1beta1
</span><span class='line'>kind: Ingress
</span><span class='line'>metadata:
</span><span class='line'>  name: openfaas-gateway-ingress
</span><span class='line'>  namespace: openfaas
</span><span class='line'>  annotations:
</span><span class='line'>    kubernetes.io/ingress.class: traefik
</span><span class='line'>spec:
</span><span class='line'>  rules:
</span><span class='line'>  - host: openfaas.localdns.xyz
</span><span class='line'>    http:
</span><span class='line'>      paths:
</span><span class='line'>      - backend:
</span><span class='line'>          serviceName: gateway
</span><span class='line'>          servicePort: 8080</span></code></pre></td></tr></table></div></figure>


<p>Apply the ingress:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f ingress.yml
</span><span class='line'>ingress.extensions/openfaas-gateway-ingress created</span></code></pre></td></tr></table></div></figure>


<p>We can the verify that our ingress is visible:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get ingress -n openfaas
</span><span class='line'>NAMESPACE   NAME                       HOSTS               ADDRESS      PORTS   AGE
</span><span class='line'>openfaas    openfaas-gateway-ingress   openfaas.co.local   172.25.0.4   80      28s</span></code></pre></td></tr></table></div></figure>


<h2>OpenFaas CLI</h2>

<p>Install the OpenFaas CLI:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -SLsf https://cli.openfaas.com | sudo sh</span></code></pre></td></tr></table></div></figure>


<p>Export the <code>OPENFAAS_URL</code> to our ingress endpoint and <code>OPENFAAS_PREFIX</code> for your dockerhub username:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export OPENFAAS_URL=http://openfaas.localdns.xyz
</span><span class='line'>$ export OPENFAAS_PREFIX=ruanbekker # change to your username</span></code></pre></td></tr></table></div></figure>


<p>Get your credentials for the OpenFaas Gateway and login with the OpenFaas CLI:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ PASSWORD=$(kubectl get secret -n openfaas basic-auth -o jsonpath="{.data.basic-auth-password}" | base64 --decode; echo)
</span><span class='line'>$ echo -n $PASSWORD | faas-cli login --username admin --password-stdin</span></code></pre></td></tr></table></div></figure>


<h2>Deploy a Function</h2>

<p>Deploy the figlet function as an example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ faas-cli store deploy figlet
</span><span class='line'>
</span><span class='line'>Deployed. 202 Accepted.
</span><span class='line'>URL: http://openfaas.localdns.xyz/function/figlet</span></code></pre></td></tr></table></div></figure>


<p>Invoke the function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://openfaas.localdns.xyz/function/figlet -d 'hello, world'
</span><span class='line'> _          _ _                             _     _
</span><span class='line'>| |__   ___| | | ___    __      _____  _ __| | __| |
</span><span class='line'>| '_ \ / _ \ | |/ _ \   \ \ /\ / / _ \| '__| |/ _` |
</span><span class='line'>| | | |  __/ | | (_) |   \ V  V / (_) | |  | | (_| |
</span><span class='line'>|_| |_|\___|_|_|\___( )   \_/\_/ \___/|_|  |_|\__,_|
</span><span class='line'>                    |/</span></code></pre></td></tr></table></div></figure>


<h2>Delete the Cluster</h2>

<p>Delete your k3d Kubernetes Cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ k3d delete --name demo</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install OpenFaas on K3d Kubernetes]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/02/12/install-openfaas-on-k3d-kubernetes/"/>
    <updated>2020-02-12T00:57:47+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/02/12/install-openfaas-on-k3d-kubernetes</id>
    <content type="html"><![CDATA[<p>In this post we will deploy i<a href="https://www.openfaas.com">openfaas</a> on kubernetes (<a href="https://github.com/rancher/k3d">k3d</a>)</p>

<h2>Kubernetes on k3d</h2>

<p>k3d is a helper tool that provisions a kubernetes distribution, called k3s on docker. To deploy a kubernetes cluster on k3d, you can follow <a href="https://blog.ruanbekker.com/blog/2020/02/12/lightweight-development-kubernetes-options-k3d/">this blog post</a></p>

<h2>Deploy a 3 Node Kubernetes Cluster</h2>

<p>Using k3d, let&rsquo;s deploy a kubernetes cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>k3d create --name<span class="o">=</span><span class="s2">&quot;demo&quot;</span> --workers<span class="o">=</span><span class="s2">&quot;2&quot;</span> --publish<span class="o">=</span><span class="s2">&quot;80:80&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Export the kubeconfig:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">KUBECONFIG</span><span class="o">=</span><span class="s2">&quot;$(k3d get-kubeconfig --name=&#39;demo&#39;)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Verify that you are able to communicate with your kubernetes cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get nodes
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy OpenFaas</h2>

<p>First we need to get <a href="https://k3sup.dev">k3sup</a> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -sLfS https://get.k3sup.dev <span class="p">|</span> sudo sh
</span></code></pre></td></tr></table></div></figure>


<p>Once k3sup is installed, deploy openfaas to your cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>k3sup app install openfaas
</span></code></pre></td></tr></table></div></figure>


<p>Give it a minute or so and check if everything is running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get pods -n openfaas
</span><span class='line'>NAMESPACE     NAME                                 READY   STATUS      RESTARTS   AGE
</span><span class='line'>openfaas      alertmanager-546f66b6c6-qtb69        1/1     Running     <span class="m">0</span>          5m
</span><span class='line'>openfaas      basic-auth-plugin-79b9878b7b-7vlln   1/1     Running     <span class="m">0</span>          4m59s
</span><span class='line'>openfaas      faas-idler-db8cd9c7d-8xfpp           1/1     Running     <span class="m">2</span>          4m57s
</span><span class='line'>openfaas      gateway-7dcc6d694d-dmvqn             2/2     Running     <span class="m">0</span>          4m56s
</span><span class='line'>openfaas      nats-d6d574749-rt9vw                 1/1     Running     <span class="m">0</span>          4m56s
</span><span class='line'>openfaas      prometheus-d99669d9b-mfxc8           1/1     Running     <span class="m">0</span>          4m53s
</span><span class='line'>openfaas      queue-worker-75f44b56b9-mhhbv        1/1     Running     <span class="m">0</span>          4m52s
</span></code></pre></td></tr></table></div></figure>


<p>Install the openfaas-cli:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -SLsf https://cli.openfaas.com <span class="p">|</span> sudo sh
</span></code></pre></td></tr></table></div></figure>


<p>In a screen session, forward port 8080 to the gateway service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>screen -S portfwd-process -m -d sh -c <span class="s2">&quot;kubectl port-forward -n openfaas svc/gateway 8080:8080&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Expose the gateway password as an environment variable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ PASSWORD</span><span class="o">=</span><span class="k">$(</span>kubectl get secret -n openfaas basic-auth -o <span class="nv">jsonpath</span><span class="o">=</span><span class="s2">&quot;{.data.basic-auth-password}&quot;</span> <span class="p">|</span> base64 --decode<span class="p">;</span> <span class="nb">echo</span><span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then login to the gateway:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> -n <span class="nv">$PASSWORD</span> <span class="p">|</span> faas-cli login --username admin --password-stdin
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy a OpenFaas Function</h2>

<p>To list all the functions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli store list
</span></code></pre></td></tr></table></div></figure>


<p>To deploy the figlet function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli store deploy figlet
</span><span class='line'>
</span><span class='line'>Deployed. <span class="m">202</span> Accepted.
</span><span class='line'>URL: http://127.0.0.1:8080/function/figlet
</span></code></pre></td></tr></table></div></figure>


<p>List your deployed functions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli list
</span><span class='line'>Function                          Invocations     Replicas
</span><span class='line'>figlet                            <span class="m">0</span>                1
</span></code></pre></td></tr></table></div></figure>


<p>Invoke your function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl http://127.0.0.1:8080/function/figlet -d <span class="s1">&#39;hello, world&#39;</span>
</span><span class='line'> _          _ _                             _     _
</span><span class='line'><span class="p">|</span> <span class="p">|</span>__   ___<span class="p">|</span> <span class="p">|</span> <span class="p">|</span> ___    __      _____  _ __<span class="p">|</span> <span class="p">|</span> __<span class="p">|</span> <span class="p">|</span>
</span><span class='line'><span class="p">|</span> <span class="s1">&#39;_ \ / _ \ | |/ _ \   \ \ /\ / / _ \| &#39;</span>__<span class="p">|</span> <span class="p">|</span>/ _<span class="sb">`</span> <span class="p">|</span>
</span><span class='line'><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span>  __/ <span class="p">|</span> <span class="p">|</span> <span class="o">(</span>_<span class="o">)</span> <span class="p">|</span>   <span class="se">\ </span>V  V / <span class="o">(</span>_<span class="o">)</span> <span class="p">|</span> <span class="p">|</span>  <span class="p">|</span> <span class="p">|</span> <span class="o">(</span>_<span class="p">|</span> <span class="p">|</span>
</span><span class='line'><span class="p">|</span>_<span class="p">|</span> <span class="p">|</span>_<span class="p">|</span><span class="se">\_</span>__<span class="p">|</span>_<span class="p">|</span>_<span class="p">|</span><span class="se">\_</span>__<span class="o">(</span> <span class="o">)</span>   <span class="se">\_</span>/<span class="se">\_</span>/ <span class="se">\_</span>__/<span class="p">|</span>_<span class="p">|</span>  <span class="p">|</span>_<span class="p">|</span><span class="se">\_</span>_,_<span class="p">|</span>
</span><span class='line'>                    <span class="p">|</span>/
</span></code></pre></td></tr></table></div></figure>


<h2>Delete your Cluster</h2>

<p>When you are done, delete your kubernetes cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>k3d delete --name demo
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thank you for reading. If you like my content, feel free to visit me at <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<p><a href="https://twitter.com/ruanbekker"><img src="https://user-images.githubusercontent.com/567298/71188576-e2410f80-2289-11ea-8667-08f0c14ab7b5.png" alt="" /></a></p>

<p><a href="https://ko-fi.com/A6423ZIQ"><img src="https://www.ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lightweight Development Kubernetes Options: K3d]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/02/12/lightweight-development-kubernetes-options-k3d/"/>
    <updated>2020-02-12T00:27:00+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/02/12/lightweight-development-kubernetes-options-k3d</id>
    <content type="html"><![CDATA[<p>In this post we will cover a lightweight development kubernetes called, &ldquo;<a href="https://github.com/rancher/k3d">k3d</a>&rdquo; which we will deploy on a mac.</p>

<h2>What is k3d</h2>

<p><a href="https://github.com/rancher/k3d">k3d</a> is a binary that provisions a <a href="https://github.com/rancher/k3s">k3s</a> kubernetes cluster on docker</p>

<h2>Pre-Requirements</h2>

<p>You will require docker and we will be using brew to install k3d on a mac.</p>

<h2>Install k3d</h2>

<p>Installing k3d is as easy as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install k3d
</span></code></pre></td></tr></table></div></figure>


<p>Verify your installation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>k3d --version
</span><span class='line'>k3d version v1.3.1
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy a 3 Node Cluster</h2>

<p>Using k3d, we will deploy a 3 node k3s cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>k3d create --name<span class="o">=</span><span class="s2">&quot;demo&quot;</span> --workers<span class="o">=</span><span class="s2">&quot;2&quot;</span> --publish<span class="o">=</span><span class="s2">&quot;80:80&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will deploy a master and 2 worker nodes and we will also publish our host port 80 to our container port 80 (k3s comes default with traefik)</p>

<p>Set your kubeconfig:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">KUBECONFIG</span><span class="o">=</span><span class="s2">&quot;$(k3d get-kubeconfig --name=&#39;demo&#39;)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Test it out by listing your nodes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get nodes
</span><span class='line'>NAME                STATUS   ROLES    AGE    VERSION
</span><span class='line'>k3d-demo-server     Ready    master   102s   v1.14.6-k3s.1
</span><span class='line'>k3d-demo-worker-0   Ready    worker   102s   v1.14.6-k3s.1
</span><span class='line'>k3d-demo-worker-1   Ready    worker   102s   v1.14.6-k3s.1
</span></code></pre></td></tr></table></div></figure>


<p>That was easy right?</p>

<h2>Deploy a Sample App</h2>

<p>We will deploy a simple golang web application that will return the container name upon a http request. We will also make use of the traefik ingress for demonstration.</p>

<p>Our deployment manifest that I will save as <code>app.yml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">extensions/v1beta1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Deployment</span>
</span><span class='line'><span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">k3s-demo</span>
</span><span class='line'>  <span class="l-Scalar-Plain">namespace</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">default</span>
</span><span class='line'><span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">replicas</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2</span>
</span><span class='line'>  <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">matchLabels</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">k3d-demo</span>
</span><span class='line'>  <span class="l-Scalar-Plain">template</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">k3d-demo</span>
</span><span class='line'>    <span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">containers</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">k3d-demo</span>
</span><span class='line'>        <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ruanbekker/hostname:latest</span>
</span><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">v1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Service</span>
</span><span class='line'><span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">k3d-demo</span>
</span><span class='line'>  <span class="l-Scalar-Plain">namespace</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">default</span>
</span><span class='line'><span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http</span>
</span><span class='line'>    <span class="l-Scalar-Plain">targetPort</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">8000</span>
</span><span class='line'>    <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">80</span>
</span><span class='line'>  <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">k3d-demo</span>
</span><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">extensions/v1beta1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Ingress</span>
</span><span class='line'><span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">k3d-demo</span>
</span><span class='line'>  <span class="l-Scalar-Plain">annotations</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">kubernetes.io/ingress.class</span><span class="p-Indicator">:</span> <span class="s">&quot;traefik&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">rules</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">k3d-demo.example.org</span>
</span><span class='line'>    <span class="l-Scalar-Plain">http</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">paths</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/</span>
</span><span class='line'>        <span class="l-Scalar-Plain">backend</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">serviceName</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">k3d-demo</span>
</span><span class='line'>          <span class="l-Scalar-Plain">servicePort</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http</span>
</span></code></pre></td></tr></table></div></figure>


<p>Deploy our application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl apply -f app.yml
</span><span class='line'>deployment.extensions/k3s-demo created
</span><span class='line'>service/k3d-demo created
</span><span class='line'>ingress.extensions/k3d-demo created
</span></code></pre></td></tr></table></div></figure>


<p>Verify that the pods are running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get pods
</span><span class='line'>NAME                       READY   STATUS    RESTARTS   AGE
</span><span class='line'>k3s-demo-f76d866b9-dv5z9   1/1     Running   <span class="m">0</span>          10s
</span><span class='line'>k3s-demo-f76d866b9-qxltk   1/1     Running   <span class="m">0</span>          10s
</span></code></pre></td></tr></table></div></figure>


<p>Make a http request:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -H <span class="s2">&quot;Host: k3d-demo.example.org&quot;</span> http://localhost
</span><span class='line'>Hostname: k3d-demo-f76d866b9-qxltk
</span></code></pre></td></tr></table></div></figure>


<h2>Deleting your Cluster</h2>

<p>To delete your cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>k3d delete --name demo
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thank you for reading. If you like my content, feel free to visit me at <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<p><a href="https://twitter.com/ruanbekker"><img src="https://user-images.githubusercontent.com/567298/71188576-e2410f80-2289-11ea-8667-08f0c14ab7b5.png" alt="" /></a></p>

<p><a href="https://ko-fi.com/A6423ZIQ"><img src="https://www.ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Localstack as a Service Container for AWS Mock Services on Drone CI]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/02/04/run-localstack-as-a-service-container-for-aws-mock-services-on-drone-ci/"/>
    <updated>2020-02-04T23:43:30+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/02/04/run-localstack-as-a-service-container-for-aws-mock-services-on-drone-ci</id>
    <content type="html"><![CDATA[<p>In this tutorial we will setup a basic pipeline in drone to make use of service containers, we will provision localstack so that we can provision AWS mock services.</p>

<p>We will create a kinesis stream on localstack, when the service is up, we will create a stream, put 100 records in the stream, read them from the stream and delete the kinesis stream.</p>

<h2>Gitea and Drone Stack</h2>

<p>If you don’t have the stack setup, have a look at <a href="https://blog.ruanbekker.com/blog/2020/02/04/setup-gitea-and-drone-on-docker-2020-edition/">this post</a> where I go into detail on how to get that setup.</p>

<h2>Create the Drone Config</h2>

<p>In gitea, I have created a new git repository and created my drone config as <code>.drone.yml</code> with this pipeline config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>kind: pipeline
</span><span class='line'>type: docker
</span><span class='line'>name: localstack
</span><span class='line'>
</span><span class='line'>platform:
</span><span class='line'>  os: linux
</span><span class='line'>  arch: amd64
</span><span class='line'>
</span><span class='line'>steps:
</span><span class='line'>  - name: wait-for-localstack
</span><span class='line'>    image: busybox
</span><span class='line'>    commands:
</span><span class='line'>      - sleep 10
</span><span class='line'>
</span><span class='line'>  - name: list-kinesis-streams
</span><span class='line'>    image: ruanbekker/awscli
</span><span class='line'>    environment:
</span><span class='line'>      AWS_ACCESS_KEY_ID: 123
</span><span class='line'>      AWS_SECRET_ACCESS_KEY: xyz
</span><span class='line'>      AWS_DEFAULT_REGION: eu-west-1
</span><span class='line'>    commands:
</span><span class='line'>      - aws --endpoint-url=http://localstack:4568 kinesis list-streams
</span><span class='line'>
</span><span class='line'>  - name: create-kinesis-streams
</span><span class='line'>    image: ruanbekker/awscli
</span><span class='line'>    environment:
</span><span class='line'>      AWS_ACCESS_KEY_ID: 123
</span><span class='line'>      AWS_SECRET_ACCESS_KEY: xyz
</span><span class='line'>      AWS_DEFAULT_REGION: eu-west-1
</span><span class='line'>    commands:
</span><span class='line'>      - aws --endpoint-url=http://localstack:4568 kinesis create-stream --stream-name mystream --shard-count 1
</span><span class='line'>
</span><span class='line'>  - name: describe-kinesis-streams
</span><span class='line'>    image: ruanbekker/awscli
</span><span class='line'>    environment:
</span><span class='line'>      AWS_ACCESS_KEY_ID: 123
</span><span class='line'>      AWS_SECRET_ACCESS_KEY: xyz
</span><span class='line'>      AWS_DEFAULT_REGION: eu-west-1
</span><span class='line'>    commands:
</span><span class='line'>      - aws --endpoint-url=http://localstack:4568 kinesis describe-stream --stream-name mystream
</span><span class='line'>
</span><span class='line'>  - name: put-record-into-kinesis
</span><span class='line'>    image: ruanbekker/awscli
</span><span class='line'>    environment:
</span><span class='line'>      AWS_ACCESS_KEY_ID: 123
</span><span class='line'>      AWS_SECRET_ACCESS_KEY: xyz
</span><span class='line'>      AWS_DEFAULT_REGION: eu-west-1
</span><span class='line'>    commands:
</span><span class='line'>      - for record in $$(seq 1 100); do aws --endpoint-url=http://localstack:4568 kinesis put-record --stream-name mystream --partition-key 123 --data testdata_$$record ; done
</span><span class='line'>
</span><span class='line'>  - name: get-record-from-kinesis
</span><span class='line'>    image: ruanbekker/awscli
</span><span class='line'>    environment:
</span><span class='line'>      AWS_ACCESS_KEY_ID: 123
</span><span class='line'>      AWS_SECRET_ACCESS_KEY: xyz
</span><span class='line'>      AWS_DEFAULT_REGION: eu-west-1
</span><span class='line'>    commands:
</span><span class='line'>      - SHARD_ITERATOR=$$(aws --endpoint-url=http://localstack:4568 kinesis get-shard-iterator --shard-id shardId-000000000000 --shard-iterator-type TRIM_HORIZON --stream-name mystream --query 'ShardIterator' --output text)
</span><span class='line'>      - for each in $$(aws --endpoint-url=http://localstack:4568 kinesis get-records --shard-iterator $$SHARD_ITERATOR | jq -cr '.Records[].Data'); do echo $each | base64 -d ; echo "" ; done
</span><span class='line'>
</span><span class='line'>  - name: delete-kinesis-stream
</span><span class='line'>    image: ruanbekker/awscli
</span><span class='line'>    environment:
</span><span class='line'>      AWS_ACCESS_KEY_ID: 123
</span><span class='line'>      AWS_SECRET_ACCESS_KEY: xyz
</span><span class='line'>      AWS_DEFAULT_REGION: eu-west-1
</span><span class='line'>    commands:
</span><span class='line'>      - aws --endpoint-url=http://localstack:4568 kinesis delete-stream --stream-name mystream
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  - name: localstack
</span><span class='line'>    image: localstack/localstack
</span><span class='line'>    privileged: true
</span><span class='line'>    environment:
</span><span class='line'>      DOCKER_HOST: unix:///var/run/docker.sock
</span><span class='line'>    volumes:
</span><span class='line'>      - name: docker-socket
</span><span class='line'>        path: /var/run/docker.sock
</span><span class='line'>      - name: localstack-vol
</span><span class='line'>        path: /tmp/localstack
</span><span class='line'>    ports:
</span><span class='line'>      - 8080
</span><span class='line'>
</span><span class='line'>volumes:
</span><span class='line'>- name: localstack-vol
</span><span class='line'>  temp: {}
</span><span class='line'>- name: docker-socket
</span><span class='line'>  host:
</span><span class='line'>    path: /var/run/docker.sock</span></code></pre></td></tr></table></div></figure>


<p>To explain what we are doing, we are bringing up localstack as a service container, then using the aws cli tools we point to the localstack kinesis endpoint, creating a kinesis stream, put 100 records to the stream, then we read from the stream and delete thereafter.</p>

<h2>Trigger the Pipeline</h2>

<p>Then I head to drone activate my new git repository and select the repository as &ldquo;Trusted&rdquo;. I commited a dummy file to trigger the pipeline and it should look like this:</p>

<p><img width="893" alt="image" src="https://user-images.githubusercontent.com/567298/73788817-63a32180-47a6-11ea-96c7-6abba7af2b27.png"></p>

<p>List Streams:</p>

<p><img width="974" alt="image" src="https://user-images.githubusercontent.com/567298/73788860-73bb0100-47a6-11ea-9c80-f2b8bfc18d53.png"></p>

<p>Put Records:</p>

<p><img width="896" alt="image" src="https://user-images.githubusercontent.com/567298/73788895-87666780-47a6-11ea-8d90-2c454ec9174a.png"></p>

<p>Delete Stream:</p>

<p><img width="924" alt="image" src="https://user-images.githubusercontent.com/567298/73788988-aebd3480-47a6-11ea-85d9-9ed7424c648b.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Kubernetes (K3s) as a Service Container on Drone CI]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/02/04/run-kubernetes-k3s-as-a-service-container-on-drone-ci/"/>
    <updated>2020-02-04T22:37:06+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/02/04/run-kubernetes-k3s-as-a-service-container-on-drone-ci</id>
    <content type="html"><![CDATA[<p><a href="https://docs.drone.io/pipeline/docker/syntax/services/">Drone services</a> allow you to run a service container and will be available for the duration of your build, which is great if you want a ephemeral service to test your applications against.</p>

<p>Today we will experiment with services on <a href="https://github.com/drone/drone">drone</a>  and will deploy a <a href="https://github.com/rancher/k3s">k3s</a> (a kubernetes distribution built by rancher) cluster as a drone service and interact with our cluster using kubectl.</p>

<p>I will be using multiple pipelines, where we will first deploy our &ldquo;dev cluster&rdquo;, when it&rsquo;s up, we will use kubectl to interact with the cluster, once that is done, we will deploy our &ldquo;staging cluster&rdquo; and do the same.</p>

<p>This is very basic and we are not doing anything special, but this is a starting point and you can do pretty much whatever you want.</p>

<h2>What is Drone</h2>

<p>If you are not aware of Drone, Drone is a container-native continious deliver platform built on Go and you can check them out <a href="https://github.com/drone/drone">here: github.com/drone</a></p>

<h2>Setup Gitea and Drone</h2>

<p>If you don&rsquo;t have the stack setup, have a look at <a href="https://blog.ruanbekker.com/blog/2020/02/04/setup-gitea-and-drone-on-docker-2020-edition/">this post</a> where I go into detail on how to get that setup.</p>

<h2>Create your Git Repo</h2>

<p>Go ahead and create a git repo, you can name it anything, then it should look something like this:</p>

<p><img width="1171" alt="image" src="https://user-images.githubusercontent.com/567298/73783555-90ead200-479c-11ea-8386-12518fb21b22.png"></p>

<p>Create a drone configuration, <code>.drone.yml</code> my pipeline will look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>kind: pipeline
</span><span class='line'>type: docker
</span><span class='line'>name: dev
</span><span class='line'>
</span><span class='line'>platform:
</span><span class='line'>  os: linux
</span><span class='line'>  arch: amd64
</span><span class='line'>
</span><span class='line'>steps:
</span><span class='line'>  - name: wait-for-k3s
</span><span class='line'>    image: ruanbekker/build-tools
</span><span class='line'>    commands:
</span><span class='line'>      - sleep 30
</span><span class='line'>
</span><span class='line'>  - name: prepare-k3s-kubeconfig
</span><span class='line'>    image: alpine
</span><span class='line'>    volumes:
</span><span class='line'>      - name: k3s-kubeconfig
</span><span class='line'>        path: /k3s-kubeconfig
</span><span class='line'>    detach: false
</span><span class='line'>    commands:
</span><span class='line'>      - sed -i -e "s/127.0.0.1/k3s/g" /k3s-kubeconfig/kubeconfig.yaml
</span><span class='line'>
</span><span class='line'>  - name: test-kubernetes
</span><span class='line'>    image: ruanbekker/kubectl
</span><span class='line'>    volumes:
</span><span class='line'>      - name: k3s-kubeconfig
</span><span class='line'>        path: /tmp
</span><span class='line'>    environment:
</span><span class='line'>      KUBECONFIG: /tmp/kubeconfig.yaml
</span><span class='line'>    commands:
</span><span class='line'>      - kubectl get nodes -o wide
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  - name: k3s
</span><span class='line'>    image: rancher/k3s:v0.9.1
</span><span class='line'>    privileged: true
</span><span class='line'>    command:
</span><span class='line'>      - server
</span><span class='line'>    environment:
</span><span class='line'>      K3S_KUBECONFIG_OUTPUT: /k3s-kubeconfig/kubeconfig.yaml
</span><span class='line'>      K3S_KUBECONFIG_MODE: 777
</span><span class='line'>    volumes:
</span><span class='line'>      - name: k3s-kubeconfig
</span><span class='line'>        path: /k3s-kubeconfig
</span><span class='line'>    ports:
</span><span class='line'>      - 6443
</span><span class='line'>
</span><span class='line'>volumes:
</span><span class='line'>- name: k3s-kubeconfig
</span><span class='line'>  temp: {}
</span><span class='line'>
</span><span class='line'>---
</span><span class='line'>kind: pipeline
</span><span class='line'>type: docker
</span><span class='line'>name: staging
</span><span class='line'>
</span><span class='line'>platform:
</span><span class='line'>  os: linux
</span><span class='line'>  arch: amd64
</span><span class='line'>
</span><span class='line'>steps:
</span><span class='line'>  - name: wait-for-k3s
</span><span class='line'>    image: ruanbekker/build-tools
</span><span class='line'>    commands:
</span><span class='line'>      - sleep 30
</span><span class='line'>
</span><span class='line'>  - name: prepare-k3s-kubeconfig
</span><span class='line'>    image: alpine
</span><span class='line'>    volumes:
</span><span class='line'>      - name: k3s-kubeconfig
</span><span class='line'>        path: /k3s-kubeconfig
</span><span class='line'>    detach: false
</span><span class='line'>    commands:
</span><span class='line'>      - sed -i -e "s/127.0.0.1/k3s/g" /k3s-kubeconfig/kubeconfig.yaml
</span><span class='line'>
</span><span class='line'>  - name: test-kubernetes
</span><span class='line'>    image: ruanbekker/kubectl
</span><span class='line'>    volumes:
</span><span class='line'>      - name: k3s-kubeconfig
</span><span class='line'>        path: /tmp
</span><span class='line'>    environment:
</span><span class='line'>      KUBECONFIG: /tmp/kubeconfig.yaml
</span><span class='line'>    commands:
</span><span class='line'>      - kubectl get nodes -o wide
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  - name: k3s
</span><span class='line'>    image: rancher/k3s:v0.9.1
</span><span class='line'>    privileged: true
</span><span class='line'>    command:
</span><span class='line'>      - server
</span><span class='line'>    environment:
</span><span class='line'>      K3S_KUBECONFIG_OUTPUT: /k3s-kubeconfig/kubeconfig.yaml
</span><span class='line'>      K3S_KUBECONFIG_MODE: 777
</span><span class='line'>    volumes:
</span><span class='line'>      - name: k3s-kubeconfig
</span><span class='line'>        path: /k3s-kubeconfig
</span><span class='line'>    ports:
</span><span class='line'>      - 6443
</span><span class='line'>
</span><span class='line'>volumes:
</span><span class='line'>- name: k3s-kubeconfig
</span><span class='line'>  temp: {}
</span><span class='line'>
</span><span class='line'>depends_on:
</span><span class='line'>- dev</span></code></pre></td></tr></table></div></figure>


<p>In this pipeline you can see that the staging pipeline depends on dev, so dev pipeline will start by creating the k3s service container, once its up I am using a step just to sleep for 30 seconds to allow it to boot.</p>

<p>Then I have defined a volume that will be persistent during the build time, which we will use to dump our kubeconfig file and update the hostname of our kubernetes endpoint. Once that is done our last step will set that file to the environment and use kubectl to interact with kubernetes.</p>

<p>Once our dev pipeline has finished, our staging pipeline will start.</p>

<h2>Activate the Repo in Drone</h2>

<p>Head over to drone on port <code>80</code> and activate the newly created git repo (and make sure that you select &ldquo;Trusted&rdquo;) and you will see the activity feed being empty:</p>

<p><img width="1008" alt="image" src="https://user-images.githubusercontent.com/567298/73784085-80872700-479d-11ea-9005-4cac54ac000d.png"></p>

<p>Commit a dummy file to git and you should see your pipeline being triggered:</p>

<p><img width="1013" alt="image" src="https://user-images.githubusercontent.com/567298/73784286-dd82dd00-479d-11ea-93f4-6363da53c1c1.png"></p>

<p>Once your pipeline has finished and everything succeeded, you should see the output of your nodes in your kubernetes service container:</p>

<p><img width="1068" alt="image" src="https://user-images.githubusercontent.com/567298/73784435-220e7880-479e-11ea-8f9d-a9856632302d.png"></p>

<p>As I mentioned earlier, we are not doing anything special but service containers allows us to do some awesome things.</p>

<p>Thank you for reading. If you like my content, feel free to visit me at <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<p><a href="https://twitter.com/ruanbekker"><img src="https://user-images.githubusercontent.com/567298/71188576-e2410f80-2289-11ea-8667-08f0c14ab7b5.png" alt="" /></a></p>

<p><a href="https://ko-fi.com/A6423ZIQ"><img src="https://www.ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Gitea and Drone on Docker 2020 Edition]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/02/04/setup-gitea-and-drone-on-docker-2020-edition/"/>
    <updated>2020-02-04T21:58:39+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/02/04/setup-gitea-and-drone-on-docker-2020-edition</id>
    <content type="html"><![CDATA[<p>This post will show how to setup gitea and drone on a docker host with docker-compose. The drone example in this tutorial will be very basic, but in future posts I will focus more on pipeline examples using drone.</p>

<p>As this post I will use to link back for those who needs to setup the stack first.</p>

<h2>Deploy Gitea and Drone</h2>

<p>Get the docker-compose.yml:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget -O docker-compose.yml https://gist.githubusercontent.com/ruanbekker/27d2cb2e3f4194ee5cfe2bcdc9c4bf52/raw/25590a23e87190a871d70fd57ab461ce303cd286/2020.02.04-gitea-drone_docker-compose.yml</span></code></pre></td></tr></table></div></figure>


<p>Verify the environment variables and adjust the defaults if you want to change something, if you want your git clone ssh url to point to a dns name as well as the url for gitea, then change the following to your dns:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  gitea:
</span><span class='line'>    ...
</span><span class='line'>    environment:
</span><span class='line'>      - ROOT_URL=http://gi.myresolvable.dns:3000
</span><span class='line'>      - SSH_DOMAIN=git.myresolvable.dns</span></code></pre></td></tr></table></div></figure>


<p>then deploy:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose up -d</span></code></pre></td></tr></table></div></figure>


<h2>Access your Stack</h2>

<p>The default port for Gitea in this setup is port <code>3000</code>:</p>

<p><img width="1273" alt="image" src="https://user-images.githubusercontent.com/567298/73778916-9b08d280-4794-11ea-88a6-8aafcd6e2656.png"></p>

<p>Initial configuration will be pre-populated from our environment variables:</p>

<p><img width="859" alt="image" src="https://user-images.githubusercontent.com/567298/73778973-b378ed00-4794-11ea-8615-d8deeee07b32.png"></p>

<p>From the additional settings section, create your admin user (this user is referenced in our docker-compose as well)</p>

<p><img width="871" alt="image" src="https://user-images.githubusercontent.com/567298/73779102-df946e00-4794-11ea-9177-712904e9dbee.png"></p>

<p>Because I am using gitea as my hostname, you will be redirected to <code>http://gitea:3000/user/login</code>, if you don&rsquo;t have a host entry setup for that it will fail, but you can just replace your servers ip in the request url and it will take you to the login screen, and after logging on, you should see this screen:</p>

<p><img width="1269" alt="image" src="https://user-images.githubusercontent.com/567298/73779494-752ffd80-4795-11ea-9c34-ff9eee269b0c.png"></p>

<p>Access drone on port 80, you will be directed to the login screen:</p>

<p><img width="773" alt="image" src="https://user-images.githubusercontent.com/567298/73779560-9395f900-4795-11ea-8f90-e420aa4c383d.png"></p>

<p>Use the same credentials that you have used to sign up with gitea, and after logging on, you should see this:</p>

<p><img width="1280" alt="image" src="https://user-images.githubusercontent.com/567298/73779651-b2948b00-4795-11ea-9939-51531467b600.png"></p>

<p>If ever your login does not work, just delete the drone access token on gitea (gitea:3000/user/settings/applications)</p>

<h2>Create a Git Repository</h2>

<p>On gitea, create a new git repository:</p>

<p><img width="698" alt="image" src="https://user-images.githubusercontent.com/567298/73779800-fdae9e00-4795-11ea-9422-938a24c08eb3.png"></p>

<p>You should now see your git repository:</p>

<p><img width="1005" alt="image" src="https://user-images.githubusercontent.com/567298/73779843-10c16e00-4796-11ea-98c6-2f70519146f0.png"></p>

<p>Create a new file <code>.drone.yml</code> with the following content:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kind: pipeline
</span><span class='line'>name: hello-world
</span><span class='line'>type: docker
</span><span class='line'>
</span><span class='line'>steps:
</span><span class='line'>  - name: say-hello
</span><span class='line'>    image: busybox
</span><span class='line'>    commands:
</span><span class='line'>      - echo hello-world</span></code></pre></td></tr></table></div></figure>


<p>It should look like this:</p>

<p><img width="1019" alt="image" src="https://user-images.githubusercontent.com/567298/73779989-4fefbf00-4796-11ea-8e65-8441d3440d19.png"></p>

<h2>Configure Drone</h2>

<p>Commit the file in your git repository and head over to drone (which should be available on port <code>80</code>) and select &ldquo;Sync&rdquo;, after a couple of seconds you should see the git repository:</p>

<p><img width="860" alt="image" src="https://user-images.githubusercontent.com/567298/73780087-7f063080-4796-11ea-92ce-3d216c4e4097.png"></p>

<p>Select &ldquo;Activate&rdquo; and &ldquo;Activate Repository&rdquo;, on the next screen select &ldquo;Trusted&rdquo;, verify that the configuration file name is the same as which we created, then select save:</p>

<p><img width="860" alt="image" src="https://user-images.githubusercontent.com/567298/73780208-b543b000-4796-11ea-98f1-0f072eeae0ef.png"></p>

<h2>Trigger the Build</h2>

<p>If you click on &ldquo;Activity Feed&rdquo; you should see a empty feed. Head back to git and commit a dummy file to trigger the build to start. I will create a file name <code>trigger</code> with the value as <code>1</code> for my dummy file.</p>

<p>After committing the file, you will see on drone that the build started:</p>

<p><img width="900" alt="image" src="https://user-images.githubusercontent.com/567298/73780444-297e5380-4797-11ea-94e6-58c01ae11143.png"></p>

<p>When we select the build, you can see we have a clone step and the step that we defined to echo &ldquo;hello-world&rdquo;:</p>

<p><img width="851" alt="image" src="https://user-images.githubusercontent.com/567298/73780516-46b32200-4797-11ea-8a07-0563dea90d83.png"></p>

<h2>Thank You</h2>

<p>This was a basic introduction for gitea and drone, but I will use this post in conjunction with more gitea examples in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Thanos on Docker: A Highly Available Prometheus]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/02/01/setup-thanos-on-docker-a-highly-available-prometheus/"/>
    <updated>2020-02-01T01:28:12+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/02/01/setup-thanos-on-docker-a-highly-available-prometheus</id>
    <content type="html"><![CDATA[<p>Today we will look at Thanos, a open source, highly available prometheus setup with long term storage capabilites, that we will run on docker to simplify the setup.</p>

<p>Note that running this proof of concept does not make it highly available as we will run everything on one host, but it will give you a feel what Thanos is about. In a future post, I will setup Thanos in a multi node environment.</p>

<h2>Prometheus</h2>

<p>If you are not familiar with <a href="https://prometheus.io">Prometheus</a>, then have a look at their documentation, but in short, prometheus is a open source monitoring system and time series database developed by soundcloud.</p>

<p>Prometheus is a monitoring system includes a rich, multidimensional data model, a concise and powerful query language called PromQL, an efficient embedded timeseries database, and over 150 integrations with third-party systems.</p>

<h2>Thanos</h2>

<p>Thanos is a highly available prometheus setup with long term storage capabilities.</p>

<p>Thanos allows you to ship your data to S3/Minio for long storage capabilites, so you could for example only store your &ldquo;live&rdquo; data on prometheus for 2 weeks, then everything older than that gets sent to object storage such as amazon s3 or minio. This helps your prometheus instance not to be flooded with data or prevents you from running out of storage space. The nice thing is, when you query for data older than 2 weeks, it will fetch the data from object storage.</p>

<p>Thanos has a global query view, which essentially means you can query your prometheus metrics from one endpoint backed by multiple prometheus servers or cluster.</p>

<p>You can still use the same tools such as Grafana as it utilizes the same Prometheus Query API.</p>

<p>Thanos provides downsampling and compaction, so that you downsample your historical data for massive query speedup when querying large time ranges.</p>

<h2>Thanos Components</h2>

<p>Thanos is a clustered system of components which can be categorized as follows:</p>

<ul>
<li><p>Metric sources</p>

<ul>
<li>Thanos provides two components that act as data sources: Prometheus Sidecar and Rule Nodes</li>
<li>Sidecar implements gRPC service on top of Prometheus</li>
<li>Rule Node directly implements it on top of the Prometheus storage engine it is running</li>
<li>Data sources that persist their data for long term storage, do so via the Prometheus 2.0 storage engine</li>
<li>Storage engine periodically produces immutable blocks of data for a fixed time range</li>
<li>A blocks top-level directory includes chunks, index and meta.json files</li>
<li>Chunk files hold a few hundred MB worth of chunks each</li>
<li>The index file holds all information needed to lookup specific series by their labels and the positions of their chunks.</li>
<li>The <code>meta.json</code> file holds metadata about block like stats, time range, and compaction level</li>
</ul>
</li>
<li><p>Stores</p>

<ul>
<li>A Store Node acts as a Gateway to block data that is stored in an object storage bucket</li>
<li>It implements the same gRPC API as Data Sources to provide access to all metric data found in the bucket</li>
<li>Continuously synchronizes which blocks exist in the bucket and translates requests for metric data into object storage requests</li>
<li>Implements various strategies to minimize the number of requests to the object storage</li>
<li>Prometheus 2.0 storage layout is optimized for minimal read amplification</li>
<li>At this time of writing, only index data is cached</li>
<li>Stores and Data Sources are the same, store nodes and data sources expose the same gRPC Store API</li>
<li>Store API allows to look up data by a set of label matchers and a time range</li>
<li>It then returns compressed chunks of samples as they are found in the block data</li>
<li>So it&rsquo;s purely a data retrieval API and does not provide complex query execution</li>
</ul>
</li>
<li><p>Query Layer</p>

<ul>
<li>Queriers are stateless and horizontally scalable instances that implement PromQL on top of the Store APIs exposed in the cluster</li>
<li>Queriers participate in the cluster to be able to resiliently discover all data sources and store nodes</li>
<li>Rule nodes in return can discover query nodes to evaluate recording and alerting rules</li>
<li>Based on the metadata of store and source nodes, they attempt to minimize the request fanout to fetch data for a particular query</li>
<li>The only scalable components of Thanos is the query nodes as none of the Thanos components provide sharding</li>
<li>Scaling of storage capacity is ensured by relying on an external object storage system</li>
<li>Store, rule, and compactor nodes are all expected to scale significantly within a single instance or high availability pair</li>
</ul>
</li>
</ul>


<p>The information from above was retrieved from their <a href="https://thanos.io/design.md/">website</a>, feel free to check them out if you want to read more on the concepts of thanos.</p>

<p>The Architecture Overview of Thanos looks like this:</p>

<p><img src="https://github.com/thanos-io/thanos/blob/master/docs/img/arch.jpg?raw=true" alt="" /></p>

<h2>What are we doing today</h2>

<p>We will setup a Thanos Cluster with Minio, Node-Exporter, Grafana on Docker. Our Thanos setup will consist of 3 prometheus containers, each one running with a sidecar container, a store container, 2 query containers, then we have the remotewrite and receive containers which node-exporter will use to ship its metrics to.</p>

<p>The minio container will be used as our long-term storage and the mc container will be used to initialize the storage bucket which is used by thanos.</p>

<h2>Deploy the Cluster</h2>

<p>Below is the docker-compose.yml and the script to generate the configs for thanos:</p>

<script src="https://gist.github.com/ruanbekker/acd1b17d3aea4c71031e72dfc8ebbb4d.js"></script>


<p>Once you have saved the compose as <code>docker-compose.yml</code> and the script as <code>configs.sh</code> you can create the configs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bash configs.sh</span></code></pre></td></tr></table></div></figure>


<p>The script from above creates the data directory and place all the configs that thanos will use in there. Next deploy the thanos cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose -f docker-compose.yml up</span></code></pre></td></tr></table></div></figure>


<p>It should look something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose -f docker-compose.yml up
</span><span class='line'>Starting node-exporter ... done
</span><span class='line'>Starting minio         ... done
</span><span class='line'>Starting grafana        ... done
</span><span class='line'>Starting prometheus0    ... done
</span><span class='line'>Starting prometheus1     ... done
</span><span class='line'>Starting thanos-receive  ... done
</span><span class='line'>Starting thanos-store    ... done
</span><span class='line'>Starting prometheus2     ... done
</span><span class='line'>Starting mc             ... done
</span><span class='line'>Starting thanos-sidecar0 ... done
</span><span class='line'>Starting thanos-sidecar1     ... done
</span><span class='line'>Starting thanos-sidecar2     ... done
</span><span class='line'>Starting thanos-remote-write ... done
</span><span class='line'>Starting thanos-query1       ... done
</span><span class='line'>Starting thanos-query0       ... done
</span><span class='line'>Attaching to node-exporter, minio, grafana, mc, prometheus0, prometheus1, thanos-store, prometheus2, thanos-receive, thanos-sidecar0, thanos-sidecar1, thanos-sidecar2, thanos-remote-write, thanos-query0, thanos-query1</span></code></pre></td></tr></table></div></figure>


<p>Access the Query UI, which looks identical to the Prometheus UI:
- <a href="http://localhost:10904/graph">http://localhost:10904/graph</a></p>

<p>It will look more or less like this:</p>

<p><img width="1280" alt="image" src="https://user-images.githubusercontent.com/567298/73583506-4e26b280-449b-11ea-96ca-9b0cefec0acd.png"></p>

<p>When we access minio on:
- <a href="http://localhost:9000/minio">http://localhost:9000/minio</a></p>

<p>And under the thanos bucket you will see the objects being persisted:</p>

<p><img width="1278" alt="image" src="https://user-images.githubusercontent.com/567298/73583542-7ca48d80-449b-11ea-955c-7b1e766229a3.png"></p>

<p>When we access grafana on:
- <a href="http://localhost:3000/">http://localhost:3000/</a></p>

<p>Select datasources, add a prometheus datasource and select the endpoint: <code>http://query0:10904</code>, which should look like this:</p>

<p><img width="618" alt="image" src="https://user-images.githubusercontent.com/567298/73583601-d73de980-449b-11ea-9a71-c94e8184336f.png"></p>

<p>When we create a dashboard, you can test a query with <code>thanos_sidecar_prometheus_up</code> and it should look something like this:</p>

<p><img width="1279" alt="image" src="https://user-images.githubusercontent.com/567298/73583684-49aec980-449c-11ea-97bd-35145ff8330c.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Save Output to Local File With Ansible]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/01/24/save-output-to-local-file-with-ansible/"/>
    <updated>2020-01-24T19:56:01+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/01/24/save-output-to-local-file-with-ansible</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55700285-f3cdda00-59ce-11e9-9c00-a05b9d469e23.png" alt="" /></p>

<p>This playbook demonstrates how you can redirect shell output to a local file</p>

<h2>Inventory</h2>

<p>Our <code>inventory.ini</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[localhost]
</span><span class='line'>localhost</span></code></pre></td></tr></table></div></figure>


<h2>The Script</h2>

<p>Our script: <code>/tmp/foo</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;foo&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;bar&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Apply executable permissions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>chmod +x /tmp/foo
</span></code></pre></td></tr></table></div></figure>


<h2>Playbook</h2>

<p>Our playbook: <code>debug.yml</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/tmp/foo</span>
</span><span class='line'>      <span class="l-Scalar-Plain">register</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">foo_result</span>
</span><span class='line'>      <span class="l-Scalar-Plain">ignore_errors</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">True</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">local_action</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">copy content= dest=file</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Running</h2>

<p>Running the Ansible Playbook:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ ansible-playbook -i inventory.ini debug.yml</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">PLAY [localhost] ********************************************************************************************************************************************************************</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">TASK [shell] ************************************************************************************************************************************************************************</span>
</span><span class='line'><span class="l-Scalar-Plain">changed</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">localhost</span><span class="p-Indicator">]</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">TASK [copy] *************************************************************************************************************************************************************************</span>
</span><span class='line'><span class="l-Scalar-Plain">changed</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">localhost -&gt; localhost</span><span class="p-Indicator">]</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">PLAY RECAP **************************************************************************************************************************************************************************</span>
</span><span class='line'><span class="l-Scalar-Plain">localhost</span>                  <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ok=2    changed=2    unreachable=0    failed=0</span>
</span></code></pre></td></tr></table></div></figure>


<p>View the local saved file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ cat file</span>
</span><span class='line'><span class="l-Scalar-Plain">foo</span>
</span><span class='line'><span class="l-Scalar-Plain">bar</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Read More</h2>

<p>For more content on <a href="https://blog.ruanbekker.com/blog/categories/ansible/">Ansible</a> check out my <a href="https://blog.ruanbekker.com/blog/categories/ansible/">Ansible</a> category</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Environment Variables With Ansible]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/01/24/environment-variables-with-ansible/"/>
    <updated>2020-01-24T19:28:16+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/01/24/environment-variables-with-ansible</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55700285-f3cdda00-59ce-11e9-9c00-a05b9d469e23.png" alt="" /></p>

<p>This is a quick post on how to use environment variables in ansible</p>

<h2>Inventory</h2>

<p>Our <code>inventory.ini</code> file looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[localhost]
</span><span class='line'>localhost</span></code></pre></td></tr></table></div></figure>


<h2>Across Tasks</h2>

<p>You can set environment variables across tasks, and let your tasks inherit the variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>  <span class="l-Scalar-Plain">vars</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">var_mysecret</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">secret123</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">echo my env var</span>
</span><span class='line'>      <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">MYNAME</span><span class="p-Indicator">:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="s">&quot;echo</span><span class="nv"> </span><span class="s">hello</span><span class="nv"> </span><span class="s">$MYNAME</span><span class="nv"> </span><span class="s">&gt;</span><span class="nv"> </span><span class="s">/tmp/bla.txt&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">args</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">creates</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/tmp/bla.txt</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we run the task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ansible-playbook -i inventory.ini -u ruan task.yml
</span></code></pre></td></tr></table></div></figure>


<p>Check the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /tmp/bla.txt
</span><span class='line'>hello secret123
</span></code></pre></td></tr></table></div></figure>


<h2>Environment Variables Per Task</h2>

<p>You can set environment variables per task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">dev</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">echo my env var</span>
</span><span class='line'>      <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">MYNAME</span><span class="p-Indicator">:</span> <span class="s">&quot;RUAN&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="s">&quot;echo</span><span class="nv"> </span><span class="s">hello</span><span class="nv"> </span><span class="s">$MYNAME</span><span class="nv"> </span><span class="s">&gt;</span><span class="nv"> </span><span class="s">/tmp/bla2.txt&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">args</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">creates</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/tmp/bla2.txt</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running the task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ ansible-playbook -i inventory.ini -u ruan task.yml</span>
</span></code></pre></td></tr></table></div></figure>


<p>Checking the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ cat /tmp/bla2.txt</span>
</span><span class='line'><span class="l-Scalar-Plain">hello RUAN</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Read More</h2>

<p>Read more on environment variables in ansible in their <a href="https://docs.ansible.com/ansible/latest/plugins/lookup/env.html">documentation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a WireGuard VPN Server on Linux]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/01/11/setup-a-wireguard-vpn-server-on-linux/"/>
    <updated>2020-01-11T23:37:03+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/01/11/setup-a-wireguard-vpn-server-on-linux</id>
    <content type="html"><![CDATA[<h2>Installation</h2>

<p>I will be installing my wireguard vpn server on a ubuntu 18 server, for other distributions you can have a look at their <a href="https://www.wireguard.com/install/">docs</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo add-apt-repository ppa:wireguard/wireguard
</span><span class='line'>$ sudo apt update
</span><span class='line'>$ sudo apt install wireguard -y</span></code></pre></td></tr></table></div></figure>


<h2>Configuration</h2>

<p>On the Server, create they keys directory where we will save our keys:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p /etc/wireguard/keys</span></code></pre></td></tr></table></div></figure>


<p>Create the private and public key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wg genkey | tee privatekey | wg pubkey &gt; publickey</span></code></pre></td></tr></table></div></figure>


<p>Generate the pre-shared key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wg genpsk &gt; client.psk</span></code></pre></td></tr></table></div></figure>


<p>On the client, create the keys directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p ~/wireguard/keys</span></code></pre></td></tr></table></div></figure>


<p>Create the private and public keys:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd ~/wireguard/keys
</span><span class='line'>$ wg genkey | tee privatekey | wg pubkey &gt; publickey</span></code></pre></td></tr></table></div></figure>


<p>Populate the server config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/wireguard/wg0.conf
</span><span class='line'>[Interface]
</span><span class='line'>PrivateKey = &lt;output-of-client.privatekey&gt;
</span><span class='line'>Address = 192.168.199.1/32
</span><span class='line'>ListenPort = 8999
</span><span class='line'>PostUp = sysctl -w net.ipv4.ip_forward=1; iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o ens3 -j MASQUERADE
</span><span class='line'>PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o ens3 -j MASQUERADE
</span><span class='line'>
</span><span class='line'>[Peer]
</span><span class='line'>PublicKey = &lt;output-of-server.publickey&gt;
</span><span class='line'>PresharedKey = &lt;output-of-client.psk&gt;
</span><span class='line'>AllowedIPs = 192.168.199.2/32</span></code></pre></td></tr></table></div></figure>


<p>Populate the client config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat ~/wireguard/wg0.conf
</span><span class='line'>[Interface]
</span><span class='line'>PrivateKey = &lt;output-of-client.privatekey&gt;
</span><span class='line'>Address = 192.168.199.2/24
</span><span class='line'>DNS = 1.1.1.1
</span><span class='line'>
</span><span class='line'>[Peer]
</span><span class='line'>PublicKey = &lt;output-of-server.publickey&gt;
</span><span class='line'>PresharedKey = &lt;output-of-client.psk&gt;
</span><span class='line'>Endpoint = &lt;server-public-ip&gt;:8999
</span><span class='line'>AllowedIPs = 0.0.0.0/0
</span><span class='line'>PersistentKeepalive = 25</span></code></pre></td></tr></table></div></figure>


<h2>Start the Server</h2>

<p>On the server, enable and start the service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl enable wg-quick@wg0.service
</span><span class='line'>$ wg-quick up wg0</span></code></pre></td></tr></table></div></figure>


<p>On the client, connect the VPN:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wg-quick up ~/wireguard/wg0.conf</span></code></pre></td></tr></table></div></figure>


<p>Verify the status:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wg show
</span><span class='line'>interface: wg0
</span><span class='line'>  public key: +Giwk8Y5KS5wx9mw0nEIdQODI+DsR+3TcbMxjJqfZys=
</span><span class='line'>  private key: (hidden)
</span><span class='line'>  listening port: 8999
</span><span class='line'>
</span><span class='line'>peer: Q8LGMj6CeCYQJp+sTu74mLMRoPFAprV8PsnS0cu9fDI=
</span><span class='line'>  preshared key: (hidden)
</span><span class='line'>  endpoint: 102.132.208.80:57800
</span><span class='line'>  allowed ips: 192.168.199.2/32
</span><span class='line'>  latest handshake: 22 seconds ago
</span><span class='line'>  transfer: 292.00 KiB received, 322.15 KiB sent</span></code></pre></td></tr></table></div></figure>


<p>Check if you can ping the private ip address of the VPN:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ping 192.168.199.2
</span><span class='line'>PING 192.168.199.2 (192.168.199.2): 56 data bytes
</span><span class='line'>64 bytes from 192.168.199.2: icmp_seq=0 ttl=63 time=304.844 ms</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Background Processes With Screen]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/01/02/managing-background-processes-with-screen/"/>
    <updated>2020-01-02T10:42:54+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/01/02/managing-background-processes-with-screen</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/71659085-e6bbfc80-2d4e-11ea-9264-5ce0c848f9f3.png" alt="image" /></p>

<p>This is a quick post on how to create, manage and delete background processes with screen</p>

<h2>About</h2>

<p>Screen allows you to run processes in a different session, so when you exit your terminal the process will still be running.</p>

<h2>Install</h2>

<p>Install screen on the operating system of choice, for debian based systems it will be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt install screen -y
</span></code></pre></td></tr></table></div></figure>


<h2>Working with Screen</h2>

<p>To create a screen session, you can just run <code>screen</code> or you can provide an argument to provide a name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>screen -S my-screen-session
</span></code></pre></td></tr></table></div></figure>


<p>Now you will be dropped into a screen session, run a ping:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ping 8.8.8.8
</span></code></pre></td></tr></table></div></figure>


<p>Now to allow the ping process to run in the background, send the commands to detach the screen session:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Ctrl + a, <span class="k">then</span> press d
</span></code></pre></td></tr></table></div></figure>


<p>To view the screen session:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>screen -ls
</span><span class='line'>There is a screen on:
</span><span class='line'>  45916.my-screen-session <span class="o">(</span>Detached<span class="o">)</span>
</span><span class='line'><span class="m">1</span> Socket in /var/folders/jr/dld7mjhn0sx6881xs_0s7rtc0000gn/T/.screen.
</span></code></pre></td></tr></table></div></figure>


<p>To resume the screen session, pass the screen id or screen name as a argument:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>screen -r my-screen-session
</span><span class='line'><span class="m">64</span> bytes from 8.8.8.8: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">297</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">55</span> <span class="nb">time</span><span class="o">=</span>7.845 ms
</span><span class='line'><span class="m">64</span> bytes from 8.8.8.8: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">298</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">55</span> <span class="nb">time</span><span class="o">=</span>6.339 ms
</span></code></pre></td></tr></table></div></figure>


<h2>Scripting</h2>

<p>To use a one liner to send a process as a detached screen session for scripting as an example, you can do that like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>screen -S ping-process -m -d sh -c <span class="s2">&quot;ping 8.8.8.8&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Listing the screen session:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>screen -ls
</span><span class='line'>There is a screen on:
</span><span class='line'>  46051.ping-process  <span class="o">(</span>Detached<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Terminating the screen session:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>screen -S ping-process -X quit
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Let me know what you think. If you liked my content, feel free to visit me at <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<p><a href="https://twitter.com/ruanbekker"><img src="https://user-images.githubusercontent.com/567298/71188576-e2410f80-2289-11ea-8667-08f0c14ab7b5.png" alt="" /></a></p>

<p><a href="https://ko-fi.com/A6423ZIQ"><img src="https://www.ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2019: My Personal Highlights for the Year]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/01/01/2019-my-personal-highlights-for-the-year/"/>
    <updated>2020-01-01T12:23:08+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/01/01/2019-my-personal-highlights-for-the-year</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/71640913-bd8e6400-2c9b-11ea-994c-b49231a6147e.png" alt="image" /></p>

<p>2019 was a great year! I met some awesome people from <a href="https://twitter.com/civocloud">Civo</a>, <a href="https://twitter.com/traefik">Traefik</a>, <a href="https://twitter.com/Rancher_Labs">Rancher</a>, <a href="https://twitter.com/openfaas">OpenFaas</a>, <a href="https://twitter.com/docker">Docker</a>, <a href="https://twitter.com/elastic">Elastic</a>, <a href="https://twitter.com/awscloud">AWS</a> and the list goes on.</p>

<p>Thank you to everyone of you that helped me during this year, to the ones inspired me, all the great motivation, support and shout outs! There&rsquo;s so many people to thank, even for the people that is not mentioned, if you ever interacted with me, helped me or supported me, thank you to each and everyone of you!</p>

<p>Below is a list of some of my personal highlights:</p>

<h2>Number of Blogposts per Website:</h2>

<ul>
<li><a href="https://blog.ruanbekker.com/blog/archives/">83 Posts on blog.ruanbekker.com</a></li>
<li><a href="https://sysadmins.co.za/author/ruan/">54 Posts on sysadmins.co.za</a></li>
<li><a href="https://medium.com/@ruanbekker">7 Posts on medium.com</a></li>
<li><a href="https://dev.to/ruanbekker">6 Posts on dev.to</a></li>
<li><a href="https://devconnected.com/author/ruan_bekker/">1 Post on devconnected.com</a></li>
<li><a href="https://www.civo.com/learn/setup-a-3-node-docker-swarm">1 Post on civo.com</a></li>
</ul>


<h2>Learnings</h2>

<ul>
<li>You cannot be good at everything</li>
<li>You need to switch off every now and then</li>
<li>Work / Life balance is important</li>
<li>A hobby other than work does wonders to help switch off every now and then</li>
</ul>


<h2>Contributions on Github</h2>

<p>Contributions for 2019:</p>

<p><a href="https://github.com/ruanbekker"><img src="https://user-images.githubusercontent.com/567298/71640391-c7ab6500-2c91-11ea-8b75-5c6016b38d6c.png" alt="image" /></a></p>

<p>Most Starred Github Repository:</p>

<p><a href="https://github.com/ruanbekker/ansible-docker-swarm"><img src="https://user-images.githubusercontent.com/567298/71640413-2cff5600-2c92-11ea-8f14-4ed0748c4a8d.png" alt="image" /></a></p>

<p>Most Starred Gist:</p>

<p><a href="https://gist.github.com/ruanbekker/e8a09604b14f37e8d2f743a87b930f93"><img src="https://user-images.githubusercontent.com/567298/71640429-646e0280-2c92-11ea-9075-23572e166e8c.png" alt="image" /></a></p>

<h2>Analytics</h2>

<p>Some analytics for my blog posts:</p>

<h3>blog.ruanbekker.com</h3>

<p>Analytics for <a href="https://blog.ruanbekker.com/?utm_source=blog&amp;utm_medium=blog-ruanbekker-com&amp;utm_campaign=year_in_review_2019">blog.ruanbekker.com</a>:</p>

<p><img src="https://user-images.githubusercontent.com/567298/71640457-ffff7300-2c92-11ea-9e3f-916614e70b7f.png" alt="image" /></p>

<p>Top 10 Most Viewed Pages:</p>

<p><img src="https://user-images.githubusercontent.com/567298/71640465-24f3e600-2c93-11ea-8cdc-fe74c5c80c13.png" alt="image" /></p>

<p>Most Viewed by Country:</p>

<p><img src="https://user-images.githubusercontent.com/567298/71640475-61bfdd00-2c93-11ea-923d-2099b46a75fd.png" alt="image" /></p>

<h4>sysadmins.co.za</h4>

<p>Analytics for <a href="https://sysadmins.co.za/?utm_source=blog&amp;utm_medium=blog-ruanbekker-com&amp;utm_campaign=year_in_review_2019">sysadmins.co.za</a>:</p>

<p><img src="https://user-images.githubusercontent.com/567298/71640485-a2b7f180-2c93-11ea-8d4e-fa1251070008.png" alt="image" /></p>

<p>Top 10 Most Viewed Pages:</p>

<p><img src="https://user-images.githubusercontent.com/567298/71640496-d85cda80-2c93-11ea-9983-230d6e85171d.png" alt="image" /></p>

<p>Most Viewed by Country:</p>

<p><img src="https://user-images.githubusercontent.com/567298/71640505-080be280-2c94-11ea-88f8-aaad194983b3.png" alt="image" /></p>

<h2>Authors on Blogposts:</h2>

<p>A list of places where I blog on:</p>

<ul>
<li><a href="https://devconnected.com/author/ruan_bekker/">devconnected.com</a></li>
<li><a href="https://medium.com/faun/tutorial-on-using-gitlab-ci-cd-pipelines-to-deploy-your-python-flask-restful-api-with-postgres-on-cad91a3638c4">faun.dev</a></li>
<li><a href="https://medium.com/@ruanbekker">medium.com</a></li>
<li><a href="https://www.civo.com/learn/setup-a-3-node-docker-swarm">civo.com</a></li>
<li><a href="https://dev.to/ruanbekker">dev.to</a></li>
<li><a href="http://blog.pistack.co.za/author/ruan/">blog.pistack.co.za</a></li>
<li><a href="https://sysadmins.co.za/author/ruan/">sysadmins.co.za</a></li>
<li><a href="https://blog.ruanbekker.com/blog/archives/">blog.ruanbekker.com</a></li>
<li><a href="https://ruan.dev/blog/">ruan.dev</a></li>
</ul>


<h2>Proud Moments</h2>

<p>Some of my proud moments on Twitter:</p>

<h4>2019.06.11 - Scaleway Tweet on Kapsule</h4>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Thanks <a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw">@ruanbekker</a> for your series of blogposts about Scaleway Kapsule. ;) <a href="https://t.co/4IGUuXneA7">https://t.co/4IGUuXneA7</a></p>&mdash; Scaleway (@Scaleway) <a href="https://twitter.com/Scaleway/status/1138371911837200387?ref_src=twsrc%5Etfw">June 11, 2019</a></blockquote>


<h4>2019.06.11 - Traefik Tweet on Kubernetes</h4>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">🎉 Check out this great community post by <a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw">@ruanbekker</a>! &quot;Setup Traefik as an Ingress Controller on <a href="https://twitter.com/hashtag/Kubernetes?src=hash&amp;ref_src=twsrc%5Etfw">#Kubernetes</a>&quot; Thanks, Ruan! 🤗<a href="https://t.co/BHVmI46gmx">https://t.co/BHVmI46gmx</a> <a href="https://twitter.com/hashtag/traefik?src=hash&amp;ref_src=twsrc%5Etfw">#traefik</a> <a href="https://t.co/9N8NOkZNrk">pic.twitter.com/9N8NOkZNrk</a></p>&mdash; Traefik (@traefik) <a href="https://twitter.com/traefik/status/1138415586898264065?ref_src=twsrc%5Etfw">June 11, 2019</a></blockquote>


<h4>2019.07.13 - Mention from OpenFaas on VSCode Demo</h4>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Run everything in your browser with VSCode! <a href="https://t.co/ZasPSfibI8">https://t.co/ZasPSfibI8</a></p>&mdash; OpenFaaS (@openfaas) <a href="https://twitter.com/openfaas/status/1150145331138613250?ref_src=twsrc%5Etfw">July 13, 2019</a></blockquote>


<h4>2019.07.14 - Elasticsearch Tweet from Devconnected</h4>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Are you curious about how to setup a complete Elasticsearch (<a href="https://twitter.com/elastic?ref_src=twsrc%5Etfw">@elastic</a>) cluster on Ubuntu 18.04?<br><br>System Development Engineer <a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw">@ruanbekker</a> wrote an entire guide about it, and you should read it!<a href="https://t.co/fyoulehOce">https://t.co/fyoulehOce</a><a href="https://twitter.com/hashtag/elasticsearch?src=hash&amp;ref_src=twsrc%5Etfw">#elasticsearch</a> <a href="https://twitter.com/hashtag/devops?src=hash&amp;ref_src=twsrc%5Etfw">#devops</a> <a href="https://twitter.com/hashtag/opensource?src=hash&amp;ref_src=twsrc%5Etfw">#opensource</a> <a href="https://t.co/2uRrqjXDxC">pic.twitter.com/2uRrqjXDxC</a></p>&mdash; devconnected.com (@devconnectedcom) <a href="https://twitter.com/devconnectedcom/status/1150824768536489986?ref_src=twsrc%5Etfw">July 15, 2019</a></blockquote>


<h4>2019.08.14 - Rancher&rsquo;s Tweet on my Rpi K3s Blogpost</h4>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">&#39;Running Kubernetes (K3S) on RaspberryPi 4&#39; by <a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw">@ruanbekker</a> <a href="https://twitter.com/hashtag/kubernetes?src=hash&amp;ref_src=twsrc%5Etfw">#kubernetes</a> <a href="https://twitter.com/hashtag/k3s?src=hash&amp;ref_src=twsrc%5Etfw">#k3s</a> <a href="https://twitter.com/hashtag/RaspberryPi?src=hash&amp;ref_src=twsrc%5Etfw">#RaspberryPi</a> <a href="https://twitter.com/hashtag/arm?src=hash&amp;ref_src=twsrc%5Etfw">#arm</a> <a href="https://t.co/sukR1FwyG8">https://t.co/sukR1FwyG8</a></p>&mdash; Rancher Labs (@Rancher_Labs) <a href="https://twitter.com/Rancher_Labs/status/1161289162831605761?ref_src=twsrc%5Etfw">August 13, 2019</a></blockquote>


<h4>2019.08.19 - Civo Learn Guide</h4>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Learn guide: Set up a 3 node <a href="https://twitter.com/Docker?ref_src=twsrc%5Etfw">@Docker</a> swarm on Ubuntu. Guide by <a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw">@ruanbekker</a> <a href="https://t.co/QxOxv6eRAy">https://t.co/QxOxv6eRAy</a> <a href="https://t.co/NgzSlprE06">pic.twitter.com/NgzSlprE06</a></p>&mdash; Civo Cloud (@CivoCloud) <a href="https://twitter.com/CivoCloud/status/1163448790675861504?ref_src=twsrc%5Etfw">August 19, 2019</a></blockquote>




<blockquote class="twitter-tweet"><p lang="en" dir="ltr">I have to say, this one made intuitively more sense to me than a lot of containerisation articles! And I&#39;m not just saying that because I hit publish on it :D</p>&mdash; Kai (@KaiPMDH) <a href="https://twitter.com/KaiPMDH/status/1163732578148462594?ref_src=twsrc%5Etfw">August 20, 2019</a></blockquote>


<h4>2019.10.09 - Civo Marketplace MongoDB</h4>

<ul>
<li><a href="https://github.com/civo/kubernetes-marketplace/pull/8">https://github.com/civo/kubernetes-marketplace/pull/8</a></li>
</ul>


<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Thank you very much <a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw">@ruanbekker</a> for adding <a href="https://twitter.com/MongoDB?ref_src=twsrc%5Etfw">@MongoDB</a> to our open source Kubernetes marketplace! <a href="https://t.co/04Na1XFEtW">https://t.co/04Na1XFEtW</a> <a href="https://twitter.com/hashtag/kubernetes?src=hash&amp;ref_src=twsrc%5Etfw">#kubernetes</a> <a href="https://twitter.com/hashtag/k8s?src=hash&amp;ref_src=twsrc%5Etfw">#k8s</a> <a href="https://twitter.com/hashtag/k3s?src=hash&amp;ref_src=twsrc%5Etfw">#k3s</a> <a href="https://twitter.com/hashtag/KUBE100?src=hash&amp;ref_src=twsrc%5Etfw">#KUBE100</a> <a href="https://twitter.com/hashtag/mongodb?src=hash&amp;ref_src=twsrc%5Etfw">#mongodb</a> <a href="https://t.co/FMi4mMPn3A">pic.twitter.com/FMi4mMPn3A</a></p>&mdash; Civo Cloud (@CivoCloud) <a href="https://twitter.com/CivoCloud/status/1181910916469858305?ref_src=twsrc%5Etfw">October 9, 2019</a></blockquote>


<h4>2019.10.23 - Civo Marketplace Jenkins</h4>

<ul>
<li><a href="https://github.com/civo/kubernetes-marketplace/pull/12">https://github.com/civo/kubernetes-marketplace/pull/12</a></li>
</ul>


<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Thanks to <a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw">@ruanbekker</a> for submitting <a href="https://twitter.com/jenkinsci?ref_src=twsrc%5Etfw">@jenkinsci</a> to our open Kubernetes Marketplace running on the world&#39;s first managed k3s service! <a href="https://twitter.com/hashtag/jenkins?src=hash&amp;ref_src=twsrc%5Etfw">#jenkins</a> <a href="https://twitter.com/hashtag/k3s?src=hash&amp;ref_src=twsrc%5Etfw">#k3s</a> <a href="https://twitter.com/hashtag/opensource?src=hash&amp;ref_src=twsrc%5Etfw">#opensource</a> <a href="https://twitter.com/hashtag/kubernetes?src=hash&amp;ref_src=twsrc%5Etfw">#kubernetes</a> <a href="https://t.co/aW1FVKOqfY">pic.twitter.com/aW1FVKOqfY</a></p>&mdash; Civo Cloud (@CivoCloud) <a href="https://twitter.com/CivoCloud/status/1186967773655773184?ref_src=twsrc%5Etfw">October 23, 2019</a></blockquote>


<h4>2019.11.05 - Traefik Swag</h4>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">We are honored to send that! Thanks for being an amazing community member, and writing awesome posts!! 🎁<a href="https://twitter.com/hashtag/traefik?src=hash&amp;ref_src=twsrc%5Etfw">#traefik</a></p>&mdash; Traefik (@traefik) <a href="https://twitter.com/traefik/status/1191786730153639936?ref_src=twsrc%5Etfw">November 5, 2019</a></blockquote>


<h4>2019.11.14 - Mentions on Civo Blog for KUBE100</h4>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">New blog! <a href="https://twitter.com/hashtag/KUBE100?src=hash&amp;ref_src=twsrc%5Etfw">#KUBE100</a>: The Story So Far.<br><br>Detailing our journey launching the world&#39;s first managed k3s service!<br><br>👉<a href="https://t.co/p7SyhcMXPb">https://t.co/p7SyhcMXPb</a><a href="https://twitter.com/hashtag/k8s?src=hash&amp;ref_src=twsrc%5Etfw">#k8s</a> <a href="https://twitter.com/hashtag/kubernetes?src=hash&amp;ref_src=twsrc%5Etfw">#kubernetes</a> <a href="https://twitter.com/hashtag/k3s?src=hash&amp;ref_src=twsrc%5Etfw">#k3s</a></p>&mdash; Civo Cloud (@CivoCloud) <a href="https://twitter.com/CivoCloud/status/1194994631240540160?ref_src=twsrc%5Etfw">November 14, 2019</a></blockquote>


<p>Some proud moments from mentions on blog posts:</p>

<h4>2019.08.06 - VPNCloud Peer to Peer Docs</h4>

<ul>
<li><a href="https://vpncloud.ddswd.de/docs/">https://vpncloud.ddswd.de/docs/</a></li>
</ul>


<p><img src="https://user-images.githubusercontent.com/30043398/62545960-efbda600-b862-11e9-9777-236ae30e15e3.png" alt="image" /></p>

<h4>2019.08.06 - MarkHeath Blog Post Mention</h4>

<ul>
<li><a href="https://markheath.net/post/exploring-elasticsearch-with-docker">https://markheath.net/post/exploring-elasticsearch-with-docker</a></li>
</ul>


<p><img src="https://user-images.githubusercontent.com/30043398/62548509-37463100-b867-11e9-9dba-046d6ec6f1cf.png" alt="image" /></p>

<h4>2019.08.08 - Civo Docker Swarm Blogpost</h4>

<ul>
<li><a href="https://www.civo.com/learn/setup-a-3-node-docker-swarm">https://www.civo.com/learn/setup-a-3-node-docker-swarm</a></li>
</ul>


<h4>2019.08.13 - Raspberry Pi Post (teamserverless)</h4>

<ul>
<li><a href="https://github.com/teamserverless/k8s-on-raspbian/pull/20">https://github.com/teamserverless/k8s-on-raspbian/pull/20</a></li>
</ul>


<h4>2019.10.11 - Serverless Email - Migration OpenFaas Blog post:</h4>

<ul>
<li><a href="https://serverless.email/issues/122">https://serverless.email/issues/122</a></li>
</ul>


<h2>Certifications:</h2>

<p>MongoDB Basics:</p>

<p><img src="https://user-images.githubusercontent.com/567298/71640576-435ae100-2c95-11ea-8f07-e29c1ebd2972.png" alt="image" /></p>

<p>MongoDB Cluster Administration:</p>

<p><img src="https://user-images.githubusercontent.com/567298/71640586-5968a180-2c95-11ea-82b5-7ae0f8d30cd2.png" alt="image" /></p>

<h2>Thank You</h2>

<p>Thank you for reading. If you like my content, feel free to visit me at <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<p><a href="https://twitter.com/ruanbekker"><img src="https://user-images.githubusercontent.com/567298/71188576-e2410f80-2289-11ea-8667-08f0c14ab7b5.png" alt="" /></a></p>

<p><a href="https://ko-fi.com/A6423ZIQ"><img src="https://www.ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting the Correct Service Name in Datadog Logging for Docker Swarm]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/12/11/setting-the-correct-service-name-in-datadog-logging-for-docker-swarm/"/>
    <updated>2019-12-11T23:35:53+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/12/11/setting-the-correct-service-name-in-datadog-logging-for-docker-swarm</id>
    <content type="html"><![CDATA[<p>For some reason, when logging to datadog from your applications running on docker swarm, the service names in datadog appears to have the names on the docker image. The application talks to the datadog agent which runs in global mode on swarm.</p>

<p>Setting <code>DATADOG_SERVICE_NAME</code> or <code>DD_SERVICE_NAME</code> as environment variables on the swarm service has zero affect, as they keep showing the service name as the docker image name, as example:</p>

<p><img width="1268" alt="08496333-01C4-4492-807E-FAC40826AFDE" src="https://user-images.githubusercontent.com/567298/70661591-49007080-1c6d-11ea-8230-0dbe086bd168.png"></p>

<p>If we inspect the tags, we can see that the docker image shows as the source and maps through as the docker service name. As you can see the swarm service name is what we want to be the service name (not alpine):</p>

<p><img width="1269" alt="783C6D52-62B2-4F2B-A6D4-28150CC58005" src="https://user-images.githubusercontent.com/567298/70661651-65041200-1c6d-11ea-858b-90034099c319.png"></p>

<p>One way how to fix this is to setup a pipeline processor, head over to Logs -> Configuration:</p>

<p><img width="267" alt="93CEE277-55A6-4DE1-8AE6-A02C64B0ACAD" src="https://user-images.githubusercontent.com/567298/70661767-adbbcb00-1c6d-11ea-8274-ad5da6ddfdd7.png"></p>

<p>Select &ldquo;Pipelines&rdquo; and add a new pipeline, select the filter <code>source:alpine</code> to limit down the results to the alpine image, and name your processor:</p>

<p><img width="763" alt="0BF3D6A6-9646-442D-A494-8DF489C5217F" src="https://user-images.githubusercontent.com/567298/70661837-cdeb8a00-1c6d-11ea-8fb4-2c272fda596f.png"></p>

<p>Next add a new processor and set the type to remapper, select the tag group as &ldquo;swarm_service&rdquo; and set the attribute to service and name the processor:</p>

<p><img width="762" alt="C02092F4-0EEC-4AF9-9E2A-F7A126560CD8" src="https://user-images.githubusercontent.com/567298/70662081-3a668900-1c6e-11ea-9ea9-9f80dfc669f3.png"></p>

<p>Add a new processor:</p>

<p><img width="1151" alt="5C2F7FB9-8948-4588-A283-86E94BC07513" src="https://user-images.githubusercontent.com/567298/70661901-e6f43b00-1c6d-11ea-9dbc-8c4c3a24b51b.png"></p>

<p>Select a service remapper, set the attribute to service and name the processor:</p>

<p><img width="761" alt="852904AE-9395-4B4B-B1F4-54427D88C970" src="https://user-images.githubusercontent.com/567298/70661986-0ab78100-1c6e-11ea-9edc-5fd748d73d0c.png"></p>

<p>Now when you go back to logs, you will find that the service name is being set to the correct service name in datadog:</p>

<p><img width="1159" alt="0F11DDC4-E99C-4A2F-B6AB-7409B4E7546C" src="https://user-images.githubusercontent.com/567298/70662290-95987b80-1c6e-11ea-8d8c-bec4d44cde60.png"></p>

<p>When you inspect one of the logs, you will see that the attribute is being set to the log:</p>

<p><img width="633" alt="4B098970-6345-40B9-9F90-411D8FE6A9E6" src="https://user-images.githubusercontent.com/567298/70662330-a9dc7880-1c6e-11ea-8b48-51900161cf01.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup AWS S3 Cross Account Access]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/11/26/setup-aws-s3-cross-account-access/"/>
    <updated>2019-11-26T22:40:12+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/11/26/setup-aws-s3-cross-account-access</id>
    <content type="html"><![CDATA[<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <a href="https://github.com/ruanbekker"><img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /></a></p>

<p><a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @ruanbekker</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>In this tutorial I will demonstrate how to setup cross account access from S3.</p>

<h2>Scenario</h2>

<p>We will have 2 AWS Accounts:</p>

<ol>
<li><p>a Green AWS Account which will host the IAM Users, this account will only be used for our IAM Accounts.</p></li>
<li><p>a Blue AWS Account which will be the account that hosts our AWS Resources, S3 in this scenario.</p></li>
</ol>


<p>We will the allow the Green Account to access the Blue Account&rsquo;s S3 Bucket.</p>

<h2>Setup the Blue Account</h2>

<p>In the Blue Account, we will setup the S3 Bucket, as well as the Trust Relationship with the Policy, which is where we will define what we want to allow for the Green Account.</p>

<p><img width="1280" alt="9488F107-A5B0-4A9E-A7A4-5A91B9805DE3" src="https://user-images.githubusercontent.com/567298/69668149-fe40ff00-1097-11ea-896a-5f3106fe5dfa.png"></p>

<p>Now we need to setup the IAM Role which will allow the Green Account and also define what needs to be allowed.</p>

<p>Go ahead to your IAM Console and create a IAM Policy (just remember to replace the bucket name if you are following along)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "Version": "2012-10-17",
</span><span class='line'>    "Statement": [
</span><span class='line'>        {
</span><span class='line'>            "Sid": "PutGetListAccessOnS3",
</span><span class='line'>            "Effect": "Allow",
</span><span class='line'>            "Action": [
</span><span class='line'>                "s3:PutObject",
</span><span class='line'>                "s3:GetObject",
</span><span class='line'>                "s3:ListBucket"
</span><span class='line'>            ],
</span><span class='line'>            "Resource": [
</span><span class='line'>                "arn:aws:s3:::ruanbekker-prod-s3-bucket",
</span><span class='line'>                "arn:aws:s3:::ruanbekker-prod-s3-bucket/*"
</span><span class='line'>            ]
</span><span class='line'>        }
</span><span class='line'>    ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>In my case I have named my IAM Policy <code>CrossAccountS3Access</code>. After you have created your IAM Policy, go ahead and create a IAM Role. Here we need the source account that we want to allow as a trusted entity, which will be the AWS AccountId of the Green Account:</p>

<p><img width="1277" alt="E73FC957-EBFA-4E41-AFDB-D994D6D3110E" src="https://user-images.githubusercontent.com/567298/69668615-ee75ea80-1098-11ea-8536-b32c6c034f7a.png"></p>

<p>Associate the IAM Policy that you created earlier:</p>

<p><img width="1280" alt="610814A8-E8CB-45F7-A038-FE4274FD425C" src="https://user-images.githubusercontent.com/567298/69668712-19603e80-1099-11ea-8ba0-2d0bc84e21cf.png"></p>

<p>After you have done that, you should see a summary screen:</p>

<p><img width="1278" alt="ABAADD0E-9140-4EB1-855A-0B0E46F429FF" src="https://user-images.githubusercontent.com/567298/69668817-50ceeb00-1099-11ea-8bb2-98537a742857.png"></p>

<p>Make note of your IAM Role ARN, it will look something like this: <code>arn:aws:iam::xxxxxxxxxxxx:role/CrossAccountS3Access-Role</code></p>

<h2>Setup the Green Account</h2>

<p>In the Green Account is where we will create the IAM User and the credentials will be provided to the user which requires to access the S3 Bucket.</p>

<p>Let&rsquo;s create a IAM Group, I will name mine <code>prod-s3-users</code>. I will just create the group, as I will attach the policy later:</p>

<p><img width="1280" alt="459D98BF-7A5D-49B4-BBD9-11717655188D" src="https://user-images.githubusercontent.com/567298/69669190-07cb6680-109a-11ea-8193-db476f5fa1db.png"></p>

<p>From the IAM Group, select the Permissions tab and create a New Inline Policy:</p>

<p><img width="1280" alt="E55E521D-A3C1-4669-B0AB-C23A5BA51E21" src="https://user-images.githubusercontent.com/567298/69669427-81635480-109a-11ea-8b4b-7bd79f2a12cd.png"></p>

<p>Select the &ldquo;STS&rdquo; service, select the &ldquo;AssumeRole&rdquo; action, and provide the Role ARN of the Blue Account that we created earlier:</p>

<p><img width="1280" alt="FDECEF7C-14F1-41DC-94F5-B6E63FE46A7D" src="https://user-images.githubusercontent.com/567298/69669597-d8692980-109a-11ea-804c-914c9a8cb608.png"></p>

<p>This will allow the Blue account to assume the credentials from the Green account. And the Blue account will only obtain permissions to access the resources that we have defined in the policy document of the Blue Account. In summary, it should look like this:</p>

<p><img width="1280" alt="0133A1AF-D2B0-4A61-B179-B4B40B81953C" src="https://user-images.githubusercontent.com/567298/69669773-30079500-109b-11ea-83bd-69c8301c4f21.png"></p>

<p>Select the Users tab on the left hand side, create a New IAM User (I will name mine s3-prod-user) and select the &ldquo;Programmatic Access&rdquo; check box as we need API keys as we will be using the CLI to access S3:</p>

<p><img width="1278" alt="ACE1F066-4400-4000-A9D8-0FD438DB7028" src="https://user-images.githubusercontent.com/567298/69669927-82e14c80-109b-11ea-9adf-de5c01cec41c.png"></p>

<p>Then from the next window, add the user to the group that we have created earlier:</p>

<p><img width="1279" alt="0AEC8E84-091F-44CB-966D-BDA93970C881" src="https://user-images.githubusercontent.com/567298/69669976-9987a380-109b-11ea-9c16-ea63cebe2e82.png"></p>

<h2>Test Cross Account Access</h2>

<p>Let&rsquo;s configure our AWS CLI with the API Keys that we received. Our credential provider will consist with 2 profiles, the Green Profile which holds the API Keys of the Green Account:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws configure --profile green
</span><span class='line'>AWS Access Key ID [None]: AKIATPRT2G4SAHA7ZQU2
</span><span class='line'>AWS Secret Access Key [None]: x
</span><span class='line'>Default region name [None]: eu-west-1
</span><span class='line'>Default output format [None]: json</span></code></pre></td></tr></table></div></figure>


<p>And configure the Blue profile that will reference the Green account as a source profile and also specify the IAM Role ARN of the Blue Account:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim ~/.aws/credentials</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[blue]
</span><span class='line'>role_arn=arn:aws:iam::xxxxxxxxxxxx:role/CrossAccountS3Access-Role
</span><span class='line'>source_profile=green
</span><span class='line'>region=eu-west-1</span></code></pre></td></tr></table></div></figure>


<p>Now we can test if we can authenticate with our Green AWS Account:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws --profile green sts get-caller-identity
</span><span class='line'>{
</span><span class='line'>    "UserId": "AKIATPRT2G4SAHA7ZQU2",
</span><span class='line'>    "Account": "xxxxxxxxxxxx",
</span><span class='line'>    "Arn": "arn:aws:iam:: xxxxxxxxxxxx:user/s3-prod-user"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s upload an object to S3 using our blue profile:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws --profile blue s3 cp foo s3://ruanbekker-prod-s3-bucket/
</span><span class='line'>upload: ./foo to s3://ruanbekker-prod-s3-bucket/foo</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s verify if we can see the object:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws --profile blue s3 ls s3://ruanbekker-prod-s3-bucket/
</span><span class='line'>2019-10-03 22:13:30      14582 foo</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Let me know what you think. If you liked my content, feel free to checkout my content on <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<center><script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script></center>


<p><br></p>

<p>I&rsquo;ve recently started a <a href="https://bekkerclothing.com/collections/developer">Developer Range</a> t-shirts, let me know what you think:</p>

<div id='product-component-1574800622582'></div>


<script type="text/javascript">
/*&lt;![CDATA[*/
(function () {
  var scriptURL = 'https://sdks.shopifycdn.com/buy-button/latest/buy-button-storefront.min.js';
  if (window.ShopifyBuy) {
    if (window.ShopifyBuy.UI) {
      ShopifyBuyInit();
    } else {
      loadScript();
    }
  } else {
    loadScript();
  }
  function loadScript() {
    var script = document.createElement('script');
    script.async = true;
    script.src = scriptURL;
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(script);
    script.onload = ShopifyBuyInit;
  }
  function ShopifyBuyInit() {
    var client = ShopifyBuy.buildClient({
      domain: 'bekkerclothing.myshopify.com',
      storefrontAccessToken: '68eb29a6d90539cb0321ea90bb043fae',
    });
    ShopifyBuy.UI.onReady(client).then(function (ui) {
      ui.createComponent('product', {
        id: '4392613544020',
        node: document.getElementById('product-component-1574800622582'),
        moneyFormat: '%24%7B%7Bamount%7D%7D',
        options: {
  "product": {
    "styles": {
      "product": {
        "@media (min-width: 601px)": {
          "max-width": "calc(25% - 20px)",
          "margin-left": "20px",
          "margin-bottom": "50px"
        }
      }
    },
    "text": {
      "button": "Add to cart"
    }
  },
  "productSet": {
    "styles": {
      "products": {
        "@media (min-width: 601px)": {
          "margin-left": "-20px"
        }
      }
    }
  },
  "modalProduct": {
    "contents": {
      "img": false,
      "imgWithCarousel": true,
      "button": false,
      "buttonWithQuantity": true
    },
    "styles": {
      "product": {
        "@media (min-width: 601px)": {
          "max-width": "100%",
          "margin-left": "0px",
          "margin-bottom": "0px"
        }
      }
    },
    "text": {
      "button": "Add to cart"
    }
  },
  "cart": {
    "text": {
      "total": "Subtotal",
      "button": "Checkout"
    }
  }
},
      });
    });
  }
})();
/*]]&gt;*/
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Setup VPC Peering on AWS]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/11/23/how-to-setup-vpc-peering-on-aws/"/>
    <updated>2019-11-23T09:09:40+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/11/23/how-to-setup-vpc-peering-on-aws</id>
    <content type="html"><![CDATA[<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <a href="https://github.com/ruanbekker"><img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /></a></p>

<p><a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @ruanbekker</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>In this tutorial I will demonstrate how to create a VPC Peering Connection between Two AWS Accounts and how to route traffic between them and then show you how we create Two EC2 Instances and demonstrate how to SSH to each other via it&rsquo;s Private IP Address.</p>

<h2>Scenario Information</h2>

<p>We will have Two AWS Accounts in this demonstration, a &ldquo;Green AWS Account&rdquo; and a &ldquo;Blue AWS Account&rdquo;.</p>

<p>In this scenario, we will have two teams, both teams manage their own account and in this scenario the two teams need to be able to communicate to each other. To keep it simple, each team has a EC2 instance and the two EC2 instances need to be able to communicate with each other.</p>

<p>Therefore we will setup a VPC Peering Connection between the two accounts. Both accounts will be operating in the eu-west-2 (London) region.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Account, CIDR
</span><span class='line'>green: 10.1.0.0/16
</span><span class='line'>blue:  10.2.0.0/16</span></code></pre></td></tr></table></div></figure>


<h2>Getting Started</h2>

<p>This will be our <strong>Green</strong> AWS Account:</p>

<p><img width="1291" alt="140424C7-6FD5-4D74-AD26-AA1077D3DA92" src="https://user-images.githubusercontent.com/567298/69486624-55579180-0e56-11ea-897c-55607680fb58.png"></p>

<p>This will be our <strong>Blue</strong> AWS Account:</p>

<p><img src="https://user-images.githubusercontent.com/567298/69486632-61435380-0e56-11ea-86d1-3af018fe5fe3.png" alt="AAFBF715-897D-4D54-BDF2-9A5282A60165" /></p>

<h2>Creating the VPCs</h2>

<p>From our <strong>green</strong> account, head over to VPC and create a new VPC with a CIDR of <code>10.1.0.0/16</code>:</p>

<p><img width="1291" alt="55FB3F87-9F73-4CDD-845B-8748700B0981" src="https://user-images.githubusercontent.com/567298/69486652-d6af2400-0e56-11ea-9f4d-9331001625f4.png"></p>

<p>Then head over to the <strong>blue</strong> account, head over to VPC and create a new VPC with CIDR of <code>10.2.0.0/16</code>:</p>

<p><img src="https://user-images.githubusercontent.com/567298/69486659-f1819880-0e56-11ea-8c3c-5aff2f84e2aa.png" alt="854DC039-7F83-4E6F-BD28-6843BE417EEB" /></p>

<p>So in summary we have the following resources:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Green: vpc-0af4b247a1353b78b | 10.1.0.0/16
</span><span class='line'>Blue: vpc-031c4ce3f56660c30 | 10.2.0.0/16</span></code></pre></td></tr></table></div></figure>


<h2>Creating the Subnets</h2>

<p>Now we need to create subnets for the VPC&rsquo;s that we created. We will create the following subnets in our VPC, each subnet in its own availability zone:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>10.1.0.0/20 (az-2a)
</span><span class='line'>10.1.16.0/20 (az-2b)
</span><span class='line'>10.1.32.0/20 (az-2c)</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s go ahead and do this, head over to your <strong>green</strong> account, from the VPC section select &ldquo;Subnets&rdquo;:</p>

<p><img width="1292" alt="BBB38DDB-D9CF-4BD4-AEA0-C30B6998F016" src="https://user-images.githubusercontent.com/567298/69486747-92705380-0e57-11ea-86da-5cafd9c22701.png"></p>

<p>Go ahead and create a subnet where you will need to specify the VPC that you created, slect the first CIDR block, in my case 10.1.0.0/20 and select the first AZ:</p>

<p><img width="1292" alt="BB1627EE-A92D-4274-BF97-40AE4E01A9A4" src="https://user-images.githubusercontent.com/567298/69486786-0d396e80-0e58-11ea-9860-7febe6e65f7d.png"></p>

<p>Do this for the other two subnets as well and then when you are done, it may look more or less like this:</p>

<p><img width="1290" alt="051767FD-2D52-48BD-B495-01ACB431B358" src="https://user-images.githubusercontent.com/567298/69487635-3660fb80-0e66-11ea-8b59-71364414d3ae.png"></p>

<p>Repeat this process that you have three subnets for your <strong>blue</strong> account as well:</p>

<p><img src="https://user-images.githubusercontent.com/567298/69486798-3823c280-0e58-11ea-8991-6518d986de31.png" alt="881A973C-7C9A-423C-B6F4-555CE78E0A16" /></p>

<h2>Setup VPC Peering Connection</h2>

<p>Now that we&rsquo;ve created our VPC&rsquo;s and subnets for each VPC we want to peer our two VPC&rsquo;s with each other so that we have a direct connection between our VPC&rsquo;s so that our EC2 instances from our <strong>green</strong> account is able to connect with our EC2 instances in our <strong>blue</strong> account.</p>

<p>Head over to your <strong>green</strong> account&rsquo;s VPC section and select &ldquo;Peering Connections&rdquo;:</p>

<p><img width="1292" alt="21972956-D24A-4C45-94C5-10A6FC742D98" src="https://user-images.githubusercontent.com/567298/69486833-c8620780-0e58-11ea-8638-de60804bdb65.png"></p>

<p>Create a new peering connection, we will first need to name our peering connection, select the source VPC which will be our green account&rsquo;s VPC, since the VPC that we want to peer with is in another account, get the AWS Account ID from the <strong>blue</strong> account, and select &ldquo;Another account&rdquo; and provide the account id that we want to peer with, select the AWS Region and provide the VPC ID of the <strong>blue</strong> account:</p>

<p><img width="1291" alt="1BDCB500-7BF0-4C5F-B171-9E09463A956A" src="https://user-images.githubusercontent.com/567298/69487659-817b0e80-0e66-11ea-83b6-4ec7c941804f.png"></p>

<p>Once you create the peering connection, you will find the peering request details:</p>

<p><img width="1291" alt="C74BAE40-9C78-45FE-BE7F-3AC495E93A41" src="https://user-images.githubusercontent.com/567298/69486874-9c935180-0e59-11ea-99a2-a54bd5982ab1.png"></p>

<p>Now let&rsquo;s head over to our <strong>blue</strong> Account, head over to VPC, select Peering connections and you will find the peering request from our <strong>green</strong> account:</p>

<p><img src="https://user-images.githubusercontent.com/567298/69486892-dbc1a280-0e59-11ea-983d-b7814257c323.png" alt="05DB8A16-6CF4-48F1-920C-20AE7492E381" /></p>

<p>From the top, hit &ldquo;Actions&rdquo; and accept the request:</p>

<p><img src="https://user-images.githubusercontent.com/567298/69486900-014eac00-0e5a-11ea-9cc2-025ef35ad921.png" alt="0FF04F44-F5B7-4AAF-9D66-89396EC2AA06" /></p>

<p>You should see that the VPC Peering connection has been established:</p>

<p><img src="https://user-images.githubusercontent.com/567298/69486904-14617c00-0e5a-11ea-8459-ab1bdf6141b0.png" alt="2D1D101F-3574-4A40-A1A6-F2F875B29158" /></p>

<p>From the <strong>blue</strong> account you should see that the VPC Peering Connection is active:</p>

<p><img src="https://user-images.githubusercontent.com/567298/69486911-2a6f3c80-0e5a-11ea-833c-bea298c55326.png" alt="A2070A8B-6247-4D75-BFF8-D5AE152EFA42" /></p>

<p>If you head back to the <strong>green</strong> account, you will see under Peering Connections that the connection has been established:</p>

<p><img width="1290" alt="1A50F913-9C6E-4F6D-A61C-5954617EBE5B" src="https://user-images.githubusercontent.com/567298/69486921-64d8d980-0e5a-11ea-86fa-cd37b44cbfdb.png"></p>

<p>We have now successfully created our VPC peering connection and the two VPC&rsquo;s from different accounts has been peered. Now we would like to launch our EC2 instances in our VPC, we will connect to our EC2 instance in our <strong>green</strong> account via the internet and then SSH to our EC2 instance in our <strong>blue</strong> account via the VPC peering connection via the Private IP Address.</p>

<h2>Setup Internet Gateway</h2>

<p>In order to connect to a Public Elastic IP, we first need to create a Internet Gateway on our VPC and add a route to route all public traffic via our Internet Gateway. This allows our resources in that VPC to be able to connect to the Internet.</p>

<p>Head over to &ldquo;Internet Gateways&rdquo;, and create a new Internet Gateway:</p>

<p><img width="1283" alt="9750329C-E89E-425E-9DCC-D420D092C5E6" src="https://user-images.githubusercontent.com/567298/69486997-5212d480-0e5b-11ea-9455-0c3d94f4d6e9.png"></p>

<p>Our IGW (Internet Gateway) will now be in a detached state, we now need to attach our IGW to our VPC. Hit &ldquo;Actions&rdquo;, then select &ldquo;Attach to VPC&rdquo;, and select your VPC:</p>

<p><img width="1281" alt="0BF7CB7A-C40A-483C-8083-410DBFFBA171" src="https://user-images.githubusercontent.com/567298/69487007-91412580-0e5b-11ea-8d3f-4ca7dff0976d.png"></p>

<p>You should now see that your IGW has been attached to your VPC:</p>

<p><img width="1073" alt="B6C3094F-233C-4A6C-A6FC-C5FD7727FBBD" src="https://user-images.githubusercontent.com/567298/69487019-b6ce2f00-0e5b-11ea-903a-cb576ab29f11.png"></p>

<p>Now that we have created an IGW and associated it to our VPC, we now need to configure our routing table so that it knows how to route non-local traffic via the IGW.</p>

<h2>Configure Routing Table</h2>

<p>Head over to VPC, select your VPC, select the &ldquo;Route Tables&rdquo; section from the left and you should see the following when you select the &ldquo;Routes&rdquo; section:</p>

<p><img width="1286" alt="FF7E141E-2C8D-4D87-BE67-513AB44784F2" src="https://user-images.githubusercontent.com/567298/69487055-55f32680-0e5c-11ea-8ce9-81de2bf5eab5.png"></p>

<p>Select &ldquo;Edit Routes&rdquo; and add a route with the destination <code>0.0.0.0/0</code> select the Internet Gateway as a target and it will filter through your available IGW&rsquo;s and select the IGW that you created earlier, then select save. (If your blue account needs internet access, repeat these steps on the blue account as well.)</p>

<p><img width="1274" alt="E223A267-1A4F-4DA4-B23A-37CE6EDAFEF5" src="https://user-images.githubusercontent.com/567298/69487097-ea5d8900-0e5c-11ea-97f6-66cd6604035f.png"></p>

<p>While we are at our routing tables configuration, we should also inform our VPC how to reach the subnet from the VPC from the other account. So that our <strong>Green</strong> App (10.1.0.0/16) can reach our <strong>blue</strong> app (10.2.0.0/16) via the Peering Connection.</p>

<p>We do this by adding a route to our routing table. From the <strong>green</strong> account&rsquo;s VPC&rsquo;s routing table add a new route with the destination of <code>10.2.0.0/16</code>, select &ldquo;Peering Connection&rdquo; as the target and it should resolve to the peering connection resource that we created, then select save:</p>

<p><img width="1271" alt="B5E8CF35-0C06-4261-9668-6C091BA19E2A" src="https://user-images.githubusercontent.com/567298/69487275-a3bd5e00-0e5f-11ea-8d4f-a2d270b3e57b.png"></p>

<p>Now our <strong>green</strong> Account knows how to route traffic to our <strong>blue</strong> account and also knows which network traffic to route. But we also need to route traffic back. Head over to your <strong>blue</strong> Account and add a route <code>10.1.0.0/16</code> to the peering connection so that we can route traffic back to our <strong>green</strong> Account:</p>

<p><img src="https://user-images.githubusercontent.com/567298/69487287-e41cdc00-0e5f-11ea-86cd-b9c9f6d77ad5.png" alt="885DCDE3-ACA5-4136-851D-3DF9D2D9D62D" /></p>

<h2>Launch EC2 Instances</h2>

<p>Now we want to launch a EC2 instance in each account and ensure to launch them into the VPC&rsquo;s that we created, I will also be creating two new SSH keys (blue-keypair + green-keypair) And I have created a Security Group that allows ICMP and SSH from anywhere, this is purely for demonstration (always review the sources that you want to allow).</p>

<p>For our <strong>green</strong> account:</p>

<p><img width="1284" alt="C60E3DAD-DD12-4670-97CD-AC524269C20E" src="https://user-images.githubusercontent.com/567298/69487311-4ece1780-0e60-11ea-9b66-b00568184790.png"></p>

<p>For our <strong>blue</strong> account:</p>

<p><img src="https://user-images.githubusercontent.com/567298/69487313-57265280-0e60-11ea-8814-fcdf4465967c.png" alt="1BFBF8B9-D090-4883-8E2B-92F29B19AEDE" /></p>

<p>Once the EC2 instances are deployed, you should see something like this. For my <strong>green</strong> account:</p>

<p><img width="1278" alt="image" src="https://user-images.githubusercontent.com/567298/69487370-2bf03300-0e61-11ea-89a5-c9fcef4ee50a.png"></p>

<p>And for my <strong>blue</strong> account:</p>

<p><img src="https://user-images.githubusercontent.com/567298/69487324-7ae99880-0e60-11ea-9d46-fb4ebcb14e07.png" alt="74F20740-17EE-46C9-9A51-D3ACAB8937B5" /></p>

<h2>Public IP Addressing</h2>

<p>Now that our EC2 instances are provisioned, we will be connecting to our <strong>green</strong> EC2 instances using a Public IP, therefore we need to create a Elastic IP. From EC2, select Elastic IPs and allocate a New Address:</p>

<p><img width="1283" alt="C4B9AC94-7AFC-465D-8D51-0497ABA475B3" src="https://user-images.githubusercontent.com/567298/69487353-d9167b80-0e60-11ea-85dd-26c94b227494.png"></p>

<p>Select the IP, hit &ldquo;Actions&rdquo; and select &ldquo;Associate Address&rdquo;, then select the EC2 instance to which you want to associate the Elastic IP to:</p>

<p><img width="771" alt="E3AA99D6-CD59-4530-B818-422E1D584932" src="https://user-images.githubusercontent.com/567298/69487364-fc412b00-0e60-11ea-88b4-f1b0b7ad83dc.png"></p>

<p>You should know see that the EC2 instance has a Public IP assigned to it:</p>

<p><img width="1048" alt="FE545350-0A45-453C-9855-4F65CC0783C6" src="https://user-images.githubusercontent.com/567298/69487694-d7e84d00-0e66-11ea-8cec-ad8142f01b9b.png"></p>

<h2>Test Network Connectivity</h2>

<p>From the downloaded SSH keypairs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls | grep keyp
</span><span class='line'>blue-keypair.pem.txt
</span><span class='line'>green-keypair.pem.txt</span></code></pre></td></tr></table></div></figure>


<p>Apply the correct permissions to our keypairs so that we can use them to SSH:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod 0400 blue-keypair.pem.txt green-keypair.pem.txt</span></code></pre></td></tr></table></div></figure>


<p>We will want to add both SSH keys to our agent so we can include them when we SSH:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ eval $(ssh-agent -t 36000)
</span><span class='line'>Agent pid 6613</span></code></pre></td></tr></table></div></figure>


<p>Add both keys to your ssh-agent:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh-add blue-keypair.pem.txt
</span><span class='line'>Identity added: blue-keypair.pem.txt (blue-keypair.pem.txt)
</span><span class='line'>
</span><span class='line'>$ ssh-add green-keypair.pem.txt
</span><span class='line'>Identity added: green-keypair.pem.txt (green-keypair.pem.txt)</span></code></pre></td></tr></table></div></figure>


<p>SSH to our <strong>Green</strong> EC2 instance:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -A ec2-user@3.11.6.171
</span><span class='line'>
</span><span class='line'>       __|  __|_  )
</span><span class='line'>       _|  (     /   Amazon Linux 2 AMI
</span><span class='line'>      ___|\___|___|
</span><span class='line'>
</span><span class='line'>https://aws.amazon.com/amazon-linux-2/
</span><span class='line'>[ec2-user@ip-10-1-1-190 ~]$</span></code></pre></td></tr></table></div></figure>


<p>Now lets ping our <strong>Blue</strong> EC2 Instance which will be accessible via our VPC Peering Connection:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ec2-user@ip-10-1-1-190 ~]$ ping 10.2.1.167
</span><span class='line'>PING 10.2.1.167 (10.2.1.167) 56(84) bytes of data.
</span><span class='line'>64 bytes from 10.2.1.167: icmp_seq=1 ttl=255 time=0.754 ms
</span><span class='line'>64 bytes from 10.2.1.167: icmp_seq=2 ttl=255 time=0.854 ms</span></code></pre></td></tr></table></div></figure>


<p>And since we&rsquo;ve allowed SSH traffic, we should be able to SSH to our instance via its Private IP Address:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ec2-user@ip-10-1-1-190 ~]$ ssh 10.2.1.167
</span><span class='line'>
</span><span class='line'>       __|  __|_  )
</span><span class='line'>       _|  (     /   Amazon Linux 2 AMI
</span><span class='line'>      ___|\___|___|
</span><span class='line'>
</span><span class='line'>https://aws.amazon.com/amazon-linux-2/
</span><span class='line'>[ec2-user@ip-10-2-1-167 ~]$</span></code></pre></td></tr></table></div></figure>


<p>Now we have successfully created a VPC Peering Connection between Two AWS Accounts and demonstrated how to communicate to and from resources in those VPC&rsquo;s.</p>

<h2>Thank You</h2>

<p>Let me know what you think. If you liked my content, feel free to checkout my content on <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<center><script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script></center>


<p><br></p>

<p>Feel free to have a look at my <strong><a href="https://bekkerclothing.com/collections/developer">Developer T-Shirt Range</a>:</strong></p>

<div id='product-component-1574559271268'></div>


<script type="text/javascript">
/*&lt;![CDATA[*/
(function () {
  var scriptURL = 'https://sdks.shopifycdn.com/buy-button/latest/buy-button-storefront.min.js';
  if (window.ShopifyBuy) {
    if (window.ShopifyBuy.UI) {
      ShopifyBuyInit();
    } else {
      loadScript();
    }
  } else {
    loadScript();
  }
  function loadScript() {
    var script = document.createElement('script');
    script.async = true;
    script.src = scriptURL;
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(script);
    script.onload = ShopifyBuyInit;
  }
  function ShopifyBuyInit() {
    var client = ShopifyBuy.buildClient({
      domain: 'bekkerclothing.myshopify.com',
      storefrontAccessToken: '68eb29a6d90539cb0321ea90bb043fae',
    });
    ShopifyBuy.UI.onReady(client).then(function (ui) {
      ui.createComponent('product', {
        id: '4391499104340',
        node: document.getElementById('product-component-1574559271268'),
        moneyFormat: '%24%7B%7Bamount%7D%7D',
        options: {
  "product": {
    "styles": {
      "product": {
        "@media (min-width: 601px)": {
          "max-width": "calc(25% - 20px)",
          "margin-left": "20px",
          "margin-bottom": "50px"
        }
      }
    },
    "text": {
      "button": "Add to cart"
    }
  },
  "productSet": {
    "styles": {
      "products": {
        "@media (min-width: 601px)": {
          "margin-left": "-20px"
        }
      }
    }
  },
  "modalProduct": {
    "contents": {
      "img": false,
      "imgWithCarousel": true,
      "button": false,
      "buttonWithQuantity": true
    },
    "styles": {
      "product": {
        "@media (min-width: 601px)": {
          "max-width": "100%",
          "margin-left": "0px",
          "margin-bottom": "0px"
        }
      }
    },
    "text": {
      "button": "Add to cart"
    }
  },
  "cart": {
    "text": {
      "total": "Subtotal",
      "button": "Checkout"
    }
  }
},
      });
    });
  }
})();
/*]]&gt;*/
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Deploy a Webapp on a AWS EKS Kubernetes Cluster]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/11/17/how-to-deploy-a-webapp-on-a-aws-eks-kubernetes-cluster/"/>
    <updated>2019-11-17T00:21:19+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/11/17/how-to-deploy-a-webapp-on-a-aws-eks-kubernetes-cluster</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/68999897-f59a3d00-08cf-11ea-83c7-8624e6048106.png" alt="kubernetes-eks-deploy-webapp" /></p>

<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <a href="https://github.com/ruanbekker"><img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /></a></p>

<p><a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @ruanbekker</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>In our previous post, <a href="https://blog.ruanbekker.com/blog/2019/11/16/how-to-setup-a-aws-eks-kubernetes-cluster/">Part 1 - Setup a EKS Cluster</a> we went through the steps on how to Setup a EKS Cluster.</p>

<h2>What are we doing today</h2>

<p>In this post, we will deploy a sample web application to EKS and access our application using a ELB that EKS provides us.</p>

<h2>Deployment Manifests</h2>

<p>We will have two manifests that we will deploy to Kubernetes, a deployment manifest that will hold the information about our application and a service manifest that will hold the information about the service load balancer.</p>

<p>The deployment manifest, you will notice that we are specifying that we want 3 containers, we are using labels so that our service and deployment can find each other and we are using a basic http web application that will listen on port 8000 inside the container:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat deployment.yml
</span><span class='line'>apiVersion: apps/v1
</span><span class='line'>kind: Deployment
</span><span class='line'>metadata:
</span><span class='line'>  name: my-hostname-app
</span><span class='line'>spec:
</span><span class='line'>  replicas: 3
</span><span class='line'>  selector:
</span><span class='line'>    matchLabels:
</span><span class='line'>      app: my-app
</span><span class='line'>  template:
</span><span class='line'>    metadata:
</span><span class='line'>      labels:
</span><span class='line'>        app: my-app
</span><span class='line'>    spec:
</span><span class='line'>      containers:
</span><span class='line'>        - name: my-app-container
</span><span class='line'>          image: ruanbekker/hostname
</span><span class='line'>          ports:
</span><span class='line'>          - name: http
</span><span class='line'>            containerPort: 8000
</span></code></pre></td></tr></table></div></figure>


<p>The service manifest, you will notice that we are specifying <code>type: LoadBalancer</code> in our service manifest, this will tell EKS to provision a ELB for your application so that we can access our application from the internet.</p>

<p>You will see that the selector is specifying <code>my-app</code> which we also provided in our deployment.yml so that our service know where to find our backend application. We are also stating that the service is listening on port 80, and will forward its traffic to our deployment on port 8000:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat service.yml
</span><span class='line'>apiVersion: v1
</span><span class='line'>kind: Service
</span><span class='line'>metadata:
</span><span class='line'>  name: my-hostname-app-service
</span><span class='line'>  labels:
</span><span class='line'>    app: my-app
</span><span class='line'>spec:
</span><span class='line'>  ports:
</span><span class='line'>  - port: 80
</span><span class='line'>    targetPort: 8000
</span><span class='line'>  selector:
</span><span class='line'>    app: my-app
</span><span class='line'>  <span class="nb">type</span>: LoadBalancer
</span></code></pre></td></tr></table></div></figure>


<h2>Deployment Time</h2>

<p>Deploy our application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl apply -f deployment.yml
</span><span class='line'>deployment.apps/my-hostname-app created
</span></code></pre></td></tr></table></div></figure>


<p>Deploy our service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl apply -f service.yml
</span><span class='line'>service/my-hostname-app-service created
</span></code></pre></td></tr></table></div></figure>


<p>Now when we look at our deployment, we should see that 3 replicas of our application is running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get deployments
</span><span class='line'>NAME              READY   UP-TO-DATE   AVAILABLE   AGE
</span><span class='line'>my-hostname-app   3/3     <span class="m">3</span>            <span class="m">3</span>           4m38s
</span></code></pre></td></tr></table></div></figure>


<p>To see the pods of that deployment, look at the pods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get pods
</span><span class='line'>NAME                               READY   STATUS    RESTARTS   AGE
</span><span class='line'>my-hostname-app-5dcd48dfc5-2j8zm   1/1     Running   <span class="m">0</span>          24s
</span><span class='line'>my-hostname-app-5dcd48dfc5-58vkc   1/1     Running   <span class="m">0</span>          24s
</span><span class='line'>my-hostname-app-5dcd48dfc5-cmjwj   1/1     Running   <span class="m">0</span>          24s
</span></code></pre></td></tr></table></div></figure>


<p>As we have more than one service in our EKS cluster, we can specify the labels that we have applied on our manifests to filter what we want to see (<code>app: my-app</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get service --selector <span class="nv">app</span><span class="o">=</span>my-app
</span><span class='line'>NAME                      TYPE           CLUSTER-IP       EXTERNAL-IP                                                              PORT<span class="o">(</span>S<span class="o">)</span>        AGE
</span><span class='line'>my-hostname-app-service   LoadBalancer   10.100.114.166   a460661ce089b11ea97cd06dd7513db6-669054126.eu-west-1.elb.amazonaws.com   80:30648/TCP   2m29s
</span></code></pre></td></tr></table></div></figure>


<p>As we can see EKS provisioned a ELB for us, and we can access the application by making a HTTP request:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -i http://a460661ce089b11ea97cd06dd7513db6-669054126.eu-west-1.elb.amazonaws.com
</span><span class='line'>HTTP/1.1 <span class="m">200</span> OK
</span><span class='line'>Date: Sat, <span class="m">16</span> Nov <span class="m">2019</span> 18:05:27 GMT
</span><span class='line'>Content-Length: 43
</span><span class='line'>Content-Type: text/plain<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>
</span><span class='line'>Hostname: my-hostname-app-5dcd48dfc5-2j8zm
</span></code></pre></td></tr></table></div></figure>


<h2>Scaling our Deployment</h2>

<p>Let&rsquo;s scale our deployment to 5 replicas:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl scale deployment/my-hostname-app --replicas 5
</span><span class='line'>deployment.extensions/my-hostname-app scaled
</span></code></pre></td></tr></table></div></figure>


<p>After all the pods has been deployed, you should be able to see the 5 out of 5 pods that we provisioned, should be running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get deployments
</span><span class='line'>NAME              READY   UP-TO-DATE   AVAILABLE   AGE
</span><span class='line'>my-hostname-app   5/5     <span class="m">5</span>            <span class="m">5</span>           5m7s
</span></code></pre></td></tr></table></div></figure>


<p>We can then also see the pods that our deployment is referencing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get pods
</span><span class='line'>NAME                               READY   STATUS    RESTARTS   AGE
</span><span class='line'>my-hostname-app-5dcd48dfc5-2j8zm   1/1     Running   <span class="m">0</span>          6m8s
</span><span class='line'>my-hostname-app-5dcd48dfc5-58vkc   1/1     Running   <span class="m">0</span>          6m8s
</span><span class='line'>my-hostname-app-5dcd48dfc5-cmjwj   1/1     Running   <span class="m">0</span>          6m8s
</span><span class='line'>my-hostname-app-5dcd48dfc5-m4xcq   1/1     Running   <span class="m">0</span>          67s
</span><span class='line'>my-hostname-app-5dcd48dfc5-zf6xl   1/1     Running   <span class="m">0</span>          68s
</span></code></pre></td></tr></table></div></figure>


<h2>Further Reading on Kubernetes</h2>

<p>This is one amazing resource that covers a lot of kubernetes topics and will help you throughout your EKS journey:</p>

<ul>
<li><a href="https://eksworkshop.com/introduction/">EKSWorkshop</a></li>
<li><a href="https://docs.aws.amazon.com/eks/latest/userguide/worker.html">Worker Nodes Documentation</a></li>
<li><a href="https://docs.aws.amazon.com/eks/latest/userguide/eks-guestbook.html">Guestbook Kubernetes Sample Application</a></li>
</ul>


<h2>Thank You</h2>

<p>Let me know what you think. If you liked my content, feel free to checkout my content on <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<center><script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script></center>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Setup a AWS EKS Kubernetes Cluster]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/11/16/how-to-setup-a-aws-eks-kubernetes-cluster/"/>
    <updated>2019-11-16T22:31:36+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/11/16/how-to-setup-a-aws-eks-kubernetes-cluster</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/68999066-b8c84900-08c3-11ea-9669-5c859590296c.png" alt="kubernetes-eks-aws-cluster" /></p>

<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <a href="https://github.com/ruanbekker"><img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /></a></p>

<p><a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @ruanbekker</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>This will be a tutorial split up in two posts, where I will show you how to provision a EKS Cluster (Elastic Kubernetes Service) on AWS and in the <a href="https://blog.ruanbekker.com/blog/2019/11/17/how-to-deploy-a-webapp-on-a-aws-eks-kubernetes-cluster/">next post</a>, how to deploy a web application to your cluster (<a href="https://blog.ruanbekker.com/blog/2019/11/17/how-to-deploy-a-webapp-on-a-aws-eks-kubernetes-cluster/">Part2 - Deploy a Web App to EKS</a>.)</p>

<h2>And then came EKS</h2>

<p>As some of you may know, I&rsquo;m a massive AWS fan boy, and since AWS released their managed Kubernetes service, I was quite excited to test it out. A couple of months passed and I got the opportunity to test out on-the-job as we moved to Kubernetes.</p>

<p>A couple of moths has passed, and serving multiple production workloads on EKS, and I am really impressed with the service.</p>

<p>Amazon provides a vanilla Kubernetes version, they manage the master nodes and they have a extra component called the cloud controller that runs on the master nodes, which is the aws native component that talks to other aws services (as far as I can recall)</p>

<h2>What are we doing today</h2>

<p>We will cover this in this post:</p>

<table>
<thead>
<tr>
<th> <strong>Topic</strong>                                                    </th>
</tr>
</thead>
<tbody>
<tr>
<td> Deploy a EKS Cluster                                         </td>
</tr>
<tr>
<td> View the resources to see what was provisioned on AWS        </td>
</tr>
<tr>
<td> Interact with Kubernetes using kubectl                       </td>
</tr>
<tr>
<td> Terminate a Node and verify that the ASG replaces the node   </td>
</tr>
<tr>
<td> Scale down your worker nodes                                 </td>
</tr>
<tr>
<td> Run a pod on your cluster                                    </td>
</tr>
</tbody>
</table>


<p>In the <a href="https://blog.ruanbekker.com/blog/2019/11/17/how-to-deploy-a-webapp-on-a-aws-eks-kubernetes-cluster/">next post</a> we will deploy a web service to our EKS cluster.</p>

<h2>Install Pre-Requirements</h2>

<p>We require <code>awscli</code>, <code>eksctl</code> and <code>kubectl</code> before we continue. I will be installing this on MacOS, but you can have a look at the following links if you are using a different operating system:</p>

<ul>
<li><a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html">Install awscli</a></li>
<li><a href="https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html">Install eksctl</a></li>
<li><a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">Install kubectl</a></li>
</ul>


<p>Install awscli:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pip install awscli
</span></code></pre></td></tr></table></div></figure>


<p>Install kubectl:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew update
</span><span class='line'><span class="nv">$ </span>brew install kubernetes-cli
</span></code></pre></td></tr></table></div></figure>


<p>Install eksctl:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew tap weaveworks/tap
</span><span class='line'><span class="nv">$ </span>brew install weaveworks/tap/eksctl
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy EKS</h2>

<p>Create a SSH key if you would like to SSH to your worker nodes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh-keygen -b <span class="m">2048</span> -f ~/.ssh/eks -t rsa -q -N <span class="s2">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Import your public key to EC2:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws --profile dev --region eu-west-1 ec2 import-key-pair --key-name <span class="s2">&quot;eks&quot;</span> --public-key-material file://~/.ssh/eks.pub
</span></code></pre></td></tr></table></div></figure>


<p>Provision your cluster using eksctl. This will deploy two cloudformation stacks, one for the kubernetes cluster, and one for the node group.</p>

<p>I am creating a kubernetes cluster with 3 nodes of instance type (t2.small) and using version 1.14:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>eksctl --profile dev --region eu-west-1 create cluster --name my-eks-cluster --version 1.14 --nodes <span class="m">3</span> --node-type t2.small --ssh-public-key eks
</span><span class='line'>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  eksctl version 0.9.0
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  using region eu-west-1
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  setting availability zones to <span class="o">[</span>eu-west-1a eu-west-1b eu-west-1c<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  subnets <span class="k">for</span> eu-west-1a - public:192.168.0.0/19 private:192.168.96.0/19
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  subnets <span class="k">for</span> eu-west-1b - public:192.168.32.0/19 private:192.168.128.0/19
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  subnets <span class="k">for</span> eu-west-1c - public:192.168.64.0/19 private:192.168.160.0/19
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  nodegroup <span class="s2">&quot;ng-f27f560e&quot;</span> will use <span class="s2">&quot;ami-059c6874350e63ca9&quot;</span> <span class="o">[</span>AmazonLinux2/1.14<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  using Kubernetes version 1.14
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  creating EKS cluster <span class="s2">&quot;my-eks-cluster&quot;</span> in <span class="s2">&quot;eu-west-1&quot;</span> region
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  will create <span class="m">2</span> separate CloudFormation stacks <span class="k">for</span> cluster itself and the initial nodegroup
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  <span class="k">if</span> you encounter any issues, check CloudFormation console or try <span class="s1">&#39;eksctl utils describe-stacks --region=eu-west-1 --cluster=my-eks-cluster&#39;</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  CloudWatch logging will not be enabled <span class="k">for</span> cluster <span class="s2">&quot;my-eks-cluster&quot;</span> in <span class="s2">&quot;eu-west-1&quot;</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  you can <span class="nb">enable </span>it with <span class="s1">&#39;eksctl utils update-cluster-logging --region=eu-west-1 --cluster=my-eks-cluster&#39;</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  Kubernetes API endpoint access will use default of <span class="o">{</span><span class="nv">publicAccess</span><span class="o">=</span><span class="nb">true</span>, <span class="nv">privateAccess</span><span class="o">=</span><span class="nb">false</span><span class="o">}</span> <span class="k">for</span> cluster <span class="s2">&quot;my-eks-cluster&quot;</span> in <span class="s2">&quot;eu-west-1&quot;</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  <span class="m">2</span> sequential tasks: <span class="o">{</span> create cluster control plane <span class="s2">&quot;my-eks-cluster&quot;</span>, create nodegroup <span class="s2">&quot;ng-f27f560e&quot;</span> <span class="o">}</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  building cluster stack <span class="s2">&quot;eksctl-my-eks-cluster-cluster&quot;</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  deploying stack <span class="s2">&quot;eksctl-my-eks-cluster-cluster&quot;</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  building nodegroup stack <span class="s2">&quot;eksctl-my-eks-cluster-nodegroup-ng-f27f560e&quot;</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  --nodes-min<span class="o">=</span><span class="m">3</span> was <span class="nb">set </span>automatically <span class="k">for</span> nodegroup ng-f27f560e
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  --nodes-max<span class="o">=</span><span class="m">3</span> was <span class="nb">set </span>automatically <span class="k">for</span> nodegroup ng-f27f560e
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  deploying stack <span class="s2">&quot;eksctl-my-eks-cluster-nodegroup-ng-f27f560e&quot;</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span>  all EKS cluster resources <span class="k">for</span> <span class="s2">&quot;my-eks-cluster&quot;</span> have been created
</span><span class='line'><span class="o">[</span>+<span class="o">]</span>  saved kubeconfig as <span class="s2">&quot;/Users/ruan/.kube/config&quot;</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  adding identity <span class="s2">&quot;arn:aws:iam::000000000000:role/eksctl-my-eks-cluster-nodegroup-n-NodeInstanceRole-SNVIW5C3J3SM&quot;</span> to auth ConfigMap
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  nodegroup <span class="s2">&quot;ng-f27f560e&quot;</span> has <span class="m">0</span> node<span class="o">(</span>s<span class="o">)</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  waiting <span class="k">for</span> at least <span class="m">3</span> node<span class="o">(</span>s<span class="o">)</span> to become ready in <span class="s2">&quot;ng-f27f560e&quot;</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  nodegroup <span class="s2">&quot;ng-f27f560e&quot;</span> has <span class="m">3</span> node<span class="o">(</span>s<span class="o">)</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  node <span class="s2">&quot;ip-192-168-42-186.eu-west-1.compute.internal&quot;</span> is ready
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  node <span class="s2">&quot;ip-192-168-75-87.eu-west-1.compute.internal&quot;</span> is ready
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  node <span class="s2">&quot;ip-192-168-8-167.eu-west-1.compute.internal&quot;</span> is ready
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  kubectl <span class="nb">command </span>should work with <span class="s2">&quot;/Users/ruan/.kube/config&quot;</span>, try <span class="s1">&#39;kubectl get nodes&#39;</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span>  EKS cluster <span class="s2">&quot;my-eks-cluster&quot;</span> in <span class="s2">&quot;eu-west-1&quot;</span> region is ready
</span></code></pre></td></tr></table></div></figure>


<p>Now that our EKS cluster has been provisioned, let&rsquo;s browse through our AWS Management Console to understand what was provisioned.</p>

<h2>View the Provisioned Resources</h2>

<p>If we have a look at the Cloudformation stacks, we can see the two stacks that I mentioned previously:</p>

<p><img width="1057" alt="image" src="https://user-images.githubusercontent.com/567298/68996480-58c1aa80-08a3-11ea-95c1-0fcf0bc1863b.png"></p>

<p>Navigating to our EC2 Instances dashboard, we can see the three worker nodes that we provisioned. Remember that AWS manages the master nodes and we cant see them.</p>

<p><img width="1106" alt="image" src="https://user-images.githubusercontent.com/567298/68996520-ea311c80-08a3-11ea-8ea3-e9e481e4ba6f.png"></p>

<p>We have a ASG (Auto Scaling Group) associated with our worker nodes, nodegroup. We can make use of autoscaling and also have desired state, so we will test this out later where we will delete a worker node and verify if it gets replaced:</p>

<p><img width="1113" alt="image" src="https://user-images.githubusercontent.com/567298/68996551-2e242180-08a4-11ea-8df6-7b962b9aa03a.png"></p>

<h2>Navigate using Kubectl:</h2>

<p>Eksctl already applied the kubeconfig to <code>~/.kube/config</code>, so we can start using kubectl. Let&rsquo;s start by viewing the nodes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get nodes
</span><span class='line'>NAME                                           STATUS   ROLES    AGE     VERSION
</span><span class='line'>ip-192-168-42-186.eu-west-1.compute.internal   Ready    &lt;none&gt;   8m50s   v1.14.7-eks-1861c5
</span><span class='line'>ip-192-168-75-87.eu-west-1.compute.internal    Ready    &lt;none&gt;   8m55s   v1.14.7-eks-1861c5
</span><span class='line'>ip-192-168-8-167.eu-west-1.compute.internal    Ready    &lt;none&gt;   8m54s   v1.14.7-eks-1861c5
</span></code></pre></td></tr></table></div></figure>


<p>Viewing our pods from our <code>kube-system</code> namespace (we dont have any pods in our default namespace at the moment):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get pods --namespace kube-system
</span><span class='line'>NAME                       READY   STATUS    RESTARTS   AGE
</span><span class='line'>aws-node-btfbk             1/1     Running   <span class="m">0</span>          11m
</span><span class='line'>aws-node-c6ktk             1/1     Running   <span class="m">0</span>          11m
</span><span class='line'>aws-node-wf8mc             1/1     Running   <span class="m">0</span>          11m
</span><span class='line'>coredns-759d6fc95f-ljxzf   1/1     Running   <span class="m">0</span>          17m
</span><span class='line'>coredns-759d6fc95f-s6lg6   1/1     Running   <span class="m">0</span>          17m
</span><span class='line'>kube-proxy-db46b           1/1     Running   <span class="m">0</span>          11m
</span><span class='line'>kube-proxy-ft4mc           1/1     Running   <span class="m">0</span>          11m
</span><span class='line'>kube-proxy-s5q2w           1/1     Running   <span class="m">0</span>          11m
</span></code></pre></td></tr></table></div></figure>


<p>And our services from all our namespaces:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get services --all-namespaces
</span><span class='line'>NAMESPACE     NAME         TYPE        CLUSTER-IP    EXTERNAL-IP   PORT<span class="o">(</span>S<span class="o">)</span>         AGE
</span><span class='line'>default       kubernetes   ClusterIP   10.100.0.1    &lt;none&gt;        443/TCP         19m
</span><span class='line'>kube-system   kube-dns     ClusterIP   10.100.0.10   &lt;none&gt;        53/UDP,53/TCP   19m
</span></code></pre></td></tr></table></div></figure>


<h2>Testing the ASG</h2>

<p>Let&rsquo;s view our current nodes in our cluster, then select the first node, delete it and verify if the ASG replaces that node.</p>

<p>First, view the nodes and select one node&rsquo;s address:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get nodes
</span><span class='line'>NAME                                           STATUS   ROLES    AGE   VERSION
</span><span class='line'>ip-192-168-42-186.eu-west-1.compute.internal   Ready    &lt;none&gt;   37m   v1.14.7-eks-1861c5
</span><span class='line'>ip-192-168-75-87.eu-west-1.compute.internal    Ready    &lt;none&gt;   37m   v1.14.7-eks-1861c5
</span><span class='line'>ip-192-168-8-167.eu-west-1.compute.internal    Ready    &lt;none&gt;   37m   v1.14.7-eks-1861c5
</span></code></pre></td></tr></table></div></figure>


<p>Use the awscli to lookup the EC2 instance id, as we will need this id to delete the node:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws --profile dev ec2 describe-instances --query <span class="s1">&#39;Reservations[*].Instances[?PrivateDnsName==`ip-192-168-42-186.eu-west-1.compute.internal`].[InstanceId][]&#39;</span> --output text
</span><span class='line'>i-0d016de17a46d5178
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have the EC2 instance id, delete the node:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws --profile dev ec2 terminate-instances --instance-id i-0d016de17a46d51782
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;TerminatingInstances&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;CurrentState&quot;</span>: <span class="o">{</span>
</span><span class='line'>                <span class="s2">&quot;Code&quot;</span>: 32,
</span><span class='line'>                <span class="s2">&quot;Name&quot;</span>: <span class="s2">&quot;shutting-down&quot;</span>
</span><span class='line'>            <span class="o">}</span>,
</span><span class='line'>            <span class="s2">&quot;InstanceId&quot;</span>: <span class="s2">&quot;i-0d016de17a46d5178&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;PreviousState&quot;</span>: <span class="o">{</span>
</span><span class='line'>                <span class="s2">&quot;Code&quot;</span>: 16,
</span><span class='line'>                <span class="s2">&quot;Name&quot;</span>: <span class="s2">&quot;running&quot;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have deleted the EC2 instance, view the nodes and you will see the node has been terminated:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get nodes
</span><span class='line'>NAME                                          STATUS   ROLES    AGE   VERSION
</span><span class='line'>ip-192-168-75-87.eu-west-1.compute.internal   Ready    &lt;none&gt;   41m   v1.14.7-eks-1861c5
</span><span class='line'>ip-192-168-8-167.eu-west-1.compute.internal   Ready    &lt;none&gt;   41m   v1.14.7-eks-1861c5
</span></code></pre></td></tr></table></div></figure>


<p>Allow about a minute so that the ASG can replace the node, and when you list again you will see that the ASG replaced the node :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get nodes
</span><span class='line'>NAME                                          STATUS   ROLES    AGE   VERSION
</span><span class='line'>ip-192-168-42-61.eu-west-1.compute.internal   Ready    &lt;none&gt;   50s   v1.14.7-eks-1861c5
</span><span class='line'>ip-192-168-75-87.eu-west-1.compute.internal   Ready    &lt;none&gt;   42m   v1.14.7-eks-1861c5
</span><span class='line'>ip-192-168-8-167.eu-west-1.compute.internal   Ready    &lt;none&gt;   42m   v1.14.7-eks-1861c5
</span></code></pre></td></tr></table></div></figure>


<h2>Run a Pod</h2>

<p>Run a busybox pod on your EKS cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl run --rm -it --generator run-pod/v1 my-busybox-pod --image busybox -- /bin/sh
</span></code></pre></td></tr></table></div></figure>


<p>You will be dropped into a shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/ <span class="c"># busybox | head -1</span>
</span><span class='line'>BusyBox v1.31.1 <span class="o">(</span>2019-10-28 18:40:01 UTC<span class="o">)</span> multi-call binary.
</span></code></pre></td></tr></table></div></figure>


<p>And exit the shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/ <span class="c"># exit</span>
</span><span class='line'>Session ended, resume using <span class="s1">&#39;kubectl attach my-busybox-pod -c my-busybox-pod -i -t&#39;</span> <span class="nb">command </span>when the pod is running
</span><span class='line'>pod <span class="s2">&quot;my-busybox-pod&quot;</span> deleted
</span></code></pre></td></tr></table></div></figure>


<h2>Scaling Nodes</h2>

<p>While I will not be covering auto-scaling in this post, we can manually scale the worker node count. Let&rsquo;s scale it down to 1 node.</p>

<p>First we need to get the EKS cluster name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>eksctl --profile dev --region eu-west-1 get clusters
</span><span class='line'>NAME      REGION
</span><span class='line'>my-eks-cluster    eu-west-1
</span></code></pre></td></tr></table></div></figure>


<p>Then we need the node group id:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>eksctl --profile dev --region eu-west-1 get nodegroup --cluster my-eks-cluster
</span><span class='line'>CLUSTER       NODEGROUP   CREATED         MIN SIZE    MAX SIZE    DESIRED CAPACITY    INSTANCE TYPE   IMAGE ID
</span><span class='line'>my-eks-cluster    ng-f27f560e 2019-11-16T16:55:41Z    3       3       3           t2.small    ami-059c6874350e63ca9
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have the node group id, we can scale the node count:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>eksctl --profile dev --region eu-west-1 scale nodegroup --cluster my-eks-cluster --nodes <span class="m">1</span> ng-f27f560e
</span><span class='line'>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  scaling nodegroup stack <span class="s2">&quot;eksctl-my-eks-cluster-nodegroup-ng-f27f560e&quot;</span> in cluster eksctl-my-eks-cluster-cluster
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  scaling nodegroup, desired capacity from <span class="m">3</span> to 1, min size from <span class="m">3</span> to 1
</span></code></pre></td></tr></table></div></figure>


<p>Now when we use kubectl to view the nodes, we will see we only have 1 worker node:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get nodes
</span><span class='line'>NAME                                          STATUS   ROLES    AGE   VERSION
</span><span class='line'>ip-192-168-8-167.eu-west-1.compute.internal   Ready    &lt;none&gt;   73m   v1.14.7-eks-1861c5
</span></code></pre></td></tr></table></div></figure>


<h2>Clean Up</h2>

<p>If you want to follow along deploying a web application to your EKS cluster before we terminate the cluster, have a look at <a href="https://blog.ruanbekker.com/blog/2019/11/17/how-to-deploy-a-webapp-on-a-aws-eks-kubernetes-cluster/">Part 2 - EKS Tutorial</a> before continuing.</p>

<p>Once you are ready to terminate your EKS cluster, you can go ahead and terminate the cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>eksctl --profile dev --region eu-west-1 delete cluster --name my-eks-cluster
</span><span class='line'>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  eksctl version 0.9.0
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  using region eu-west-1
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  deleting EKS cluster <span class="s2">&quot;my-eks-cluster&quot;</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span>  kubeconfig has been updated
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  cleaning up LoadBalancer services
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  <span class="m">2</span> sequential tasks: <span class="o">{</span> delete nodegroup <span class="s2">&quot;ng-f27f560e&quot;</span>, delete cluster control plane <span class="s2">&quot;my-eks-cluster&quot;</span> <span class="o">[</span>async<span class="o">]</span> <span class="o">}</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  will delete stack <span class="s2">&quot;eksctl-my-eks-cluster-nodegroup-ng-f27f560e&quot;</span>
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  waiting <span class="k">for</span> stack <span class="s2">&quot;eksctl-my-eks-cluster-nodegroup-ng-f27f560e&quot;</span> to get deleted
</span><span class='line'><span class="o">[</span>ℹ<span class="o">]</span>  will delete stack <span class="s2">&quot;eksctl-my-eks-cluster-cluster&quot;</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span>  all cluster resources were deleted
</span></code></pre></td></tr></table></div></figure>


<h2>Further Reading on Kubernetes</h2>

<p>This is one amazing resource that covers a lot of kubernetes topics and will help you throughout your EKS journey:
- <a href="https://eksworkshop.com/introduction/">EKSWorkshop</a></p>

<h2>Thank You</h2>

<p>Let me know what you think. If you liked my content, feel free to checkout my content on <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<center><script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script></center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing AWS Lambda Functions Locally on Docker With LambCi]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/11/14/testing-aws-lambda-functions-locally-on-docker-with-lambci/"/>
    <updated>2019-11-14T23:57:10+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/11/14/testing-aws-lambda-functions-locally-on-docker-with-lambci</id>
    <content type="html"><![CDATA[<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <a href="https://github.com/ruanbekker"><img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /></a></p>

<p><a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @ruanbekker</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>I discovered a Docker image called <strong>LambCi</strong> that allows you to test lambda functions locally on docker and wanted to share with you how it works.</p>

<h2>Python Lambda Function</h2>

<p>We will create a basic lambda function to demonstrate how it works.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir task
</span><span class='line'>$ cat &gt; task/lambda_function.py &lt;&lt; EOF
</span><span class='line'>import json
</span><span class='line'>
</span><span class='line'>def lambda_handler(event, context):
</span><span class='line'>    if event:
</span><span class='line'>
</span><span class='line'>        try:
</span><span class='line'>            event['name']
</span><span class='line'>            name = event['name']
</span><span class='line'>            output_string = 'My name is {}'.format(name.capitalize())
</span><span class='line'>
</span><span class='line'>        except KeyError:
</span><span class='line'>            output_string = 'A name was not defined in the event payload'
</span><span class='line'>
</span><span class='line'>    return output_string
</span><span class='line'>EOF</span></code></pre></td></tr></table></div></figure>


<p>Now that we&rsquo;ve created the function, run the docker container with the parameters of the functions handler method and the event parameters:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run --rm -v "$PWD/task":/var/task lambci/lambda:python3.7 lambda_function.lambda_handler '{"name": "ruan"}'
</span><span class='line'>START RequestId: 70025895-1233-1362-8006-c2784b5d80b6 Version: $LATEST
</span><span class='line'>END RequestId: 70025895-1233-1362-8006-c2784b5d80b6
</span><span class='line'>REPORT RequestId: 70025895-1233-1362-8006-c2784b5d80b6    Duration: 7.51 ms   Billed Duration: 100 ms Memory Size: 1536 MB    Max Memory Used: 23 MB
</span><span class='line'>"My name is Ruan"</span></code></pre></td></tr></table></div></figure>


<p>And another call:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run --rm -v "$PWD/task":/var/task lambci/lambda:python3.7 lambda_function.lambda_handler '{"nam": "ruan"}'
</span><span class='line'>START RequestId: f7ab2e97-05db-1184-a009-11b92638534f Version: $LATEST
</span><span class='line'>END RequestId: f7ab2e97-05db-1184-a009-11b92638534f
</span><span class='line'>REPORT RequestId: f7ab2e97-05db-1184-a009-11b92638534f    Duration: 5.32 ms   Billed Duration: 100 ms Memory Size: 1536 MB    Max Memory Used: 23 MB
</span><span class='line'>"A name was not defined in the event payload"</span></code></pre></td></tr></table></div></figure>


<p>Checkout the dockerhub page for more info:
- <a href="https://hub.docker.com/r/lambci/lambda/">https://hub.docker.com/r/lambci/lambda/</a></p>

<h2>Thank You</h2>

<p>Let me know what you think. If you liked my content, feel free to checkout my content on <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<center><script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script></center>

]]></content>
  </entry>
  
</feed>
