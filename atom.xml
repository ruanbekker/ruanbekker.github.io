<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-11-12T12:00:36-05:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Get Application Performance Metrics on Python Flask With Elastic APM on Kibana and Elasticsearch]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/11/11/get-application-performance-metrics-on-python-flask-with-elastic-apm-on-kibana-and-elasticsearch/"/>
    <updated>2018-11-11T13:09:18-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/11/11/get-application-performance-metrics-on-python-flask-with-elastic-apm-on-kibana-and-elasticsearch</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-banner.png" alt="" /></p>

<p>In this post we will setup a Python Flask Application which includes the APM Agent which will collect metrics, that gets pushed to the APM Server. If you have not setup the Elastic Stack with / or APM Server, you <a href="https://blog.ruanbekker.com/blog/2018/11/11/setup-apm-server-on-ubuntu-for-your-elastic-stack-to-get-insights-in-your-application-performance-metrics/">can follow this post</a> to setup the needed.</p>

<p>Then we will make a bunch of HTTP Requests to our Application and will go through the metrics per request type.</p>

<h2>Application Metrics</h2>

<p>Our Application will have the following Request Paths:</p>

<ul>
<li><code>/</code> - Returns static text</li>
<li><code>/delay</code> - random delays to simulate increased response latencies</li>
<li><code>/upstream</code> - get data from a upstream provider, if statements to provide dummy 200, 404 and 502 reponses to visualize</li>
<li><code>/5xx</code> - request path that will raise an exception so that we can see the error via apm</li>
<li><code>/sql-write</code> - inserts 5 rows into a sqlite database</li>
<li><code>/sql-read</code> - executes a select all from the database</li>
<li><code>/sql-group</code> - sql query to group all the cities and count them</li>
</ul>


<p>This is just simple request paths to demonstrate the metrics via APM (Application Performance Monitoring) on Kibana.</p>

<h2>Install Flask and APM Agent</h2>

<p>Create a virtual environment and install the dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt install python python-setuptools -y
</span><span class='line'><span class="nv">$ </span>easy_install pip
</span><span class='line'><span class="nv">$ </span>pip install virtualenv
</span><span class='line'><span class="nv">$ </span>pip install elastic-apm<span class="o">[</span>flask<span class="o">]</span>
</span><span class='line'><span class="nv">$ </span>pip install flask
</span></code></pre></td></tr></table></div></figure>


<p>For more info on <a href="https://www.elastic.co/guide/en/apm/agent/python/current/getting-started.html">APM Configuration</a>.</p>

<h2>Instrument a Bare Bones Python Flask app with APM:</h2>

<p>A Barebones app with APM Configured will look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">jsonify</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">elasticapm.contrib.flask</span> <span class="kn">import</span> <span class="n">ElasticAPM</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">elasticapm.handlers.logging</span> <span class="kn">import</span> <span class="n">LoggingHandler</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'><span class="n">apm</span> <span class="o">=</span> <span class="n">ElasticAPM</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">server_url</span><span class="o">=</span><span class="s">&#39;http://localhost:8200&#39;</span><span class="p">,</span> <span class="n">service_name</span><span class="o">=</span><span class="s">&#39;flask-app-1&#39;</span><span class="p">,</span> <span class="n">logging</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span><span class="s">&quot;message&quot;</span><span class="p">:</span> <span class="s">&quot;response ok&quot;</span><span class="p">}),</span> <span class="mi">200</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">80</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will provide metrics on the <code>/</code> request path. In order to trace transaction ids from the metrics, we need to configure the index on Kibana. To do this, head over to Kibana, Management, Index Patterns, Add Index Pattern, <code>apm*</code>, select <code>@timestamp</code> as the time filter field name.</p>

<p>This will allow you to see the data when tracing the transaction id&rsquo;s via the Discover UI.</p>

<h2>Create the Python Flask App</h2>

<p>Create the Flask App with the request paths as mentioned in the beginning:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sqlite3</span><span class="o">,</span> <span class="nn">requests</span><span class="o">,</span> <span class="nn">time</span><span class="o">,</span> <span class="nn">logging</span><span class="o">,</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">jsonify</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">elasticapm.contrib.flask</span> <span class="kn">import</span> <span class="n">ElasticAPM</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">elasticapm.handlers.logging</span> <span class="kn">import</span> <span class="n">LoggingHandler</span>
</span><span class='line'>
</span><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;ruan&#39;</span><span class="p">,</span> <span class="s">&#39;stefan&#39;</span><span class="p">,</span> <span class="s">&#39;philip&#39;</span><span class="p">,</span> <span class="s">&#39;norman&#39;</span><span class="p">,</span> <span class="s">&#39;frank&#39;</span><span class="p">,</span> <span class="s">&#39;pete&#39;</span><span class="p">,</span> <span class="s">&#39;johnny&#39;</span><span class="p">,</span> <span class="s">&#39;peter&#39;</span><span class="p">,</span> <span class="s">&#39;adam&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">cities</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;cape town&#39;</span><span class="p">,</span> <span class="s">&#39;johannesburg&#39;</span><span class="p">,</span> <span class="s">&#39;pretoria&#39;</span><span class="p">,</span> <span class="s">&#39;dublin&#39;</span><span class="p">,</span> <span class="s">&#39;kroonstad&#39;</span><span class="p">,</span> <span class="s">&#39;bloemfontein&#39;</span><span class="p">,</span> <span class="s">&#39;port elizabeth&#39;</span><span class="p">,</span> <span class="s">&#39;auckland&#39;</span><span class="p">,</span> <span class="s">&#39;sydney&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">lastnames</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;smith&#39;</span><span class="p">,</span> <span class="s">&#39;bekker&#39;</span><span class="p">,</span> <span class="s">&#39;admams&#39;</span><span class="p">,</span> <span class="s">&#39;phillips&#39;</span><span class="p">,</span> <span class="s">&#39;james&#39;</span><span class="p">,</span> <span class="s">&#39;adamson&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&#39;database.db&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;CREATE TABLE IF NOT EXISTS people (name STRING, age INTEGER, surname STRING, city STRING)&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c">#sqlquery_write = conn.execute(&#39;INSERT INTO people VALUES(&quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;)&#39;.format(random.choice(names), random.randint(18,40), random.choice(lastnames), random.choice(cities)))</span>
</span><span class='line'><span class="n">seconds</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.002</span><span class="p">,</span> <span class="mf">0.003</span><span class="p">,</span> <span class="mf">0.004</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.009</span><span class="p">,</span> <span class="mf">0.015</span><span class="p">,</span> <span class="mf">0.02</span><span class="p">,</span> <span class="mf">0.225</span><span class="p">,</span> <span class="mf">0.009</span><span class="p">,</span> <span class="mf">0.001</span><span class="p">,</span> <span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.030</span><span class="p">,</span> <span class="mf">0.018</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'><span class="n">apm</span> <span class="o">=</span> <span class="n">ElasticAPM</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">server_url</span><span class="o">=</span><span class="s">&#39;http://localhost:8200&#39;</span><span class="p">,</span> <span class="n">service_name</span><span class="o">=</span><span class="s">&#39;my-app-01&#39;</span><span class="p">,</span> <span class="n">logging</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span><span class="s">&quot;message&quot;</span><span class="p">:</span> <span class="s">&quot;response ok&quot;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/delay&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">delay</span><span class="p">():</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">seconds</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span><span class="s">&quot;message&quot;</span><span class="p">:</span> <span class="s">&quot;response delay&quot;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/upstream&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">upstream</span><span class="p">():</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;https://api.ruanbekker.com/people&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span><span class='line'>    <span class="n">r</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;country&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">r</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;country&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="s">&#39;italy&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;Italalia!&#39;</span><span class="p">,</span> <span class="mi">200</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">r</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;country&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="s">&#39;canada&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;Canada!&#39;</span><span class="p">,</span> <span class="mi">502</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;Not Found&#39;</span><span class="p">,</span> <span class="mi">404</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/5xx&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">fail_with_5xx</span><span class="p">():</span>
</span><span class='line'>    <span class="n">value</span> <span class="o">=</span> <span class="s">&#39;a&#39;</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span><span class="s">&quot;message&quot;</span><span class="p">:</span> <span class="n">value</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/sql-write&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">sqlw</span><span class="p">():</span>
</span><span class='line'>    <span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&#39;database.db&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;INSERT INTO people VALUES(&quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;)&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">names</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span><span class="mi">40</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">lastnames</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">cities</span><span class="p">)))</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;INSERT INTO people VALUES(&quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;)&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">names</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span><span class="mi">40</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">lastnames</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">cities</span><span class="p">)))</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;INSERT INTO people VALUES(&quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;)&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">names</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span><span class="mi">40</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">lastnames</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">cities</span><span class="p">)))</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;INSERT INTO people VALUES(&quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;)&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">names</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span><span class="mi">40</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">lastnames</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">cities</span><span class="p">)))</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;INSERT INTO people VALUES(&quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;)&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">names</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span><span class="mi">40</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">lastnames</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">cities</span><span class="p">)))</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;ok&#39;</span><span class="p">,</span> <span class="mi">200</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/sql-read&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">sqlr</span><span class="p">():</span>
</span><span class='line'>    <span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&#39;database.db&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">row_factory</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">Row</span>
</span><span class='line'>    <span class="n">cur</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span><span class='line'>    <span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;select * from people&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rows</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">fetchall</span><span class="p">()</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;ok&#39;</span><span class="p">,</span> <span class="mi">200</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/sql-group&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">slqg</span><span class="p">():</span>
</span><span class='line'>    <span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&#39;database.db&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">row_factory</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">Row</span>
</span><span class='line'>    <span class="n">cur</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span><span class='line'>    <span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;select count(*) as num, city from people group by city&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rows</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">fetchall</span><span class="p">()</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;ok&#39;</span><span class="p">,</span> <span class="mi">200</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">80</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python app.py
</span></code></pre></td></tr></table></div></figure>


<p>At this point, we wont have any data on APM as we need to make requests to our application. Let&rsquo;s make 10 HTTP GET Requests on the <code>/</code> Request Path:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ count</span><span class="o">=</span><span class="m">0</span> <span class="o">&amp;&amp;</span> <span class="k">while</span> <span class="o">[</span> <span class="nv">$count</span> -lt <span class="m">10</span> <span class="o">]</span><span class="p">;</span> <span class="k">do</span> curl http://application-routable-address:80/<span class="p">;</span> sleep 1<span class="p">;</span> <span class="nv">count</span><span class="o">=</span><span class="k">$((</span>count+1<span class="k">))</span><span class="p">;</span> <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Visualize the Root Request Path</h2>

<p>Head over to Kibana, Select APM and you will see something similar like below when selecting the timepicker to 15 minutes at the right top corner. This page will give you the overview of all your configured applications and the average response times over the selected time, transactions per minute, errors per minute etc:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-home-root.png" alt="" /></p>

<p>When you select your application, you will find the graphs on you response times and requests per minute, also a breakdown per request path:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-app-view-1.png" alt="" /></p>

<p>When selecting the request path, in this case <code>GET /</code>, you will find a breakdown of metrics only for that request and also the response time distribution for that request path, if you select frame from the response time distribution, it will filter the focus to that specific transaction.</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-req-view-1.png" alt="" /></p>

<p>When you scroll a bit down to the Transaction Sample section, you will find data about the request, response, system etc:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-app-transaction-1.png" alt="" /></p>

<p>From the Transaction Sample, you can select the View Transaction in Discover button, which will trace that transaction id on the Discover UI:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-transaction-disc-1.png" alt="" /></p>

<p>Increasing the http curl clients running simultaneously from different servers and increasing the time for 15 minutes to have more metrics will result in the screenshot below, notice the 6ms response time can easily be traced selecting it in the response time distribution, then discovering it in the UI, which will give you the raw data from that request:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-req-view-2.png" alt="" /></p>

<h2>Viewing Application Errors in APM</h2>

<p>Make a couple of requests to <code>/5xx</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl http://application-routable-endpoint:80/5xx
</span></code></pre></td></tr></table></div></figure>


<p>Navigate to the app, select Errors, then you will see the exception details that was returned. Here we can see that in our code we tried to concatenate integers with strings:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-error-1.png" alt="" /></p>

<p>Furthermore we can select that error and it will provide us a direct view on where in our code the error gets generated:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-error-details-1.png" alt="" /></p>

<p>Pretty cool right?! You can also further select the library frames, which will take you to the lower level code that raised the exception. If this errors can be drilled down via the discover ui, to group by source address etc.</p>

<h2>Simulate Response Latencies:</h2>

<p>Make a couple of requests to the <code>/delay</code> request path, and you should see the increased response times from earlier:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-app-view-delay.png" alt="" /></p>

<h2>Requests where Database Calls are Executed</h2>

<p>The while loop to call random request paths:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">count</span><span class="o">=</span><span class="m">0</span> <span class="o">&amp;&amp;</span> <span class="k">while</span> <span class="o">[</span> <span class="nv">$count</span> -lt <span class="m">1000</span> <span class="o">]</span><span class="p">;</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-za-server&quot;</span> -i http://x.x.x.x/sql-write<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-za-server&quot;</span> -i http://x.x.x.x/sql-read<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-za-server&quot;</span> -i http://x.x.x.x/sql-group<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-eu-server&quot;</span> -i http://x.x.x.x/sql-write<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-us-server&quot;</span> -i http://x.x.x.x/sql-write<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-za-server&quot;</span> -i http://x.x.x.x/sql-write<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-za-server&quot;</span> -i http://x.x.x.x/sql-write<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-za-server&quot;</span> -i http://x.x.x.x/sql-read<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-eu-server&quot;</span> -i http://x.x.x.x/sql-group<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-us-server&quot;</span> -i http://x.x.x.x/sql-group<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-za-server&quot;</span> -i http://x.x.x.x/sql-write<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-za-server&quot;</span> -i http://x.x.x.x/sql-write<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-eu-server&quot;</span> -i http://x.x.x.x/sql-group<span class="p">;</span>
</span><span class='line'>  curl -H <span class="s2">&quot;Host: my-za-server&quot;</span> -i http://x.x.x.x/sql-group<span class="p">;</span>
</span><span class='line'>  <span class="nv">count</span><span class="o">=</span><span class="k">$((</span>count+1<span class="k">))</span><span class="p">;</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we look at our applications performance monitoring overview, we can see the writes provide more latencies as the group by&rsquo;s:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-view-1.png" alt="" /></p>

<p>The <code>/sql-write</code> request overview:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlwrite-1.png" alt="" /></p>

<p>When selecting a transaction sample, we can see the timeline of each database call:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlwrite-1-details.png" alt="" /></p>

<p>When looking at the <code>/sql-group</code> request overview, we can see that the response times increasing overtime, as more data is written to the database, it takes longer to read and group all the data from the database:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlgroup-1.png" alt="" /></p>

<p>The transaction details shows the timeline of the database query from that request:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlgroup-1-details.png" alt="" /></p>

<p>When you select the database select query on the timeline view, it will take you to the exact database query that was executed:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlgroup-1-span.png" alt="" /></p>

<p>When we include a database call with a external request to a remote http endpoint, we will see something like:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlread-ext.png" alt="" /></p>

<h2>Viewing 4xx and 5xx Response Codes</h2>

<p>From the application code we are returning 2xx, 4xx, and 5xx response codes for this demonstration to visualize them:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-app-response-codes.png" alt="" /></p>

<h2>Configuring more Applications</h2>

<p>Once more apps are configured, and they start serving traffic, they will start appearing on the APM UI as below:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-apps.png" alt="" /></p>

<p>APM is available for other languages as well and provides a getting started snippets from the APM UI. For more information on APM, have a look at their <a href="https://www.elastic.co/solutions/apm">Documentation</a></p>

<p>Hope this was useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup APM Server on Ubuntu for Your Elastic Stack to Get Insights in Your Application Performance Metrics]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/11/11/setup-apm-server-on-ubuntu-for-your-elastic-stack-to-get-insights-in-your-application-performance-metrics/"/>
    <updated>2018-11-11T12:31:43-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/11/11/setup-apm-server-on-ubuntu-for-your-elastic-stack-to-get-insights-in-your-application-performance-metrics</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-overview.png" alt="" /></p>

<p>In this post we will setup the Elastic Stack with Elasticsearc, Kibana and APM . The APM Server (Application Performance Metrics) which will receive the metric data from the application side, and is then pushed to apm indices on Elasticsearch.</p>

<p>This will be a 2 post blog on APM:</p>

<ul>
<li>1) <a href="">Setup the Elastic Stack with Elasticsearch, Kibana and APM Server</a> - this post</li>
<li>2) <a href="https://blog.ruanbekker.com/blog/2018/11/11/get-application-performance-metrics-on-python-flask-with-elastic-apm-on-kibana-and-elasticsearch/">Setup a Python Flask application with the APM Agent</a></li>
</ul>


<h2>What is APM</h2>

<p>From their website APM is described as: &ldquo;Elastic APM is an application performance monitoring system built on the Elastic Stack. It allows you to monitor software services and applications in real time, collecting detailed performance information on response time for incoming requests, database queries, calls to caches, external HTTP requests, etc.&rdquo;</p>

<p>You get metrics like average, p99 response times etc, and also have insights when errors occur, it even allows you to look at the stacktrace, poinpointing on which line of your code it ocurred etc.</p>

<ul>
<li><a href="https://www.elastic.co/solutions/apm">More Info</a></li>
</ul>


<h2>APM Agents:</h2>

<p>The APM Agents will be loaded inside your application, application metrics will then be pushed to the APM Server (which we will setup in this post), which then gets pushed to Elasticsearch and is then consumed by Kibana.</p>

<p>At the time of writing, the APM Agents are supported in the following languages:</p>

<ul>
<li>Node.js</li>
<li>Django</li>
<li>Flask</li>
<li>Ruby on Rails</li>
<li>Rack</li>
<li>RUM</li>
<li>Golang</li>
<li>Java</li>
</ul>


<h2>Setup the Elastic Stack</h2>

<p>One thing to note, every service in your Elastic Stack needs to be running on the same version. In this post we will setup Elasticsearch, APM and Kibana all running on version <code>6.4.3</code></p>

<h2>Setup the Pre-Requirements:</h2>

<p>Elasticsearch depends on Java, se we will go ahead and setup the repositories:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch <span class="p">|</span> sudo apt-key add -
</span><span class='line'><span class="nv">$ </span>apt-get install apt-transport-https -y
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;deb https://artifacts.elastic.co/packages/6.x/apt stable main&quot;</span> <span class="p">|</span> sudo tee -a /etc/apt/sources.list.d/elastic-6.x.list
</span><span class='line'><span class="nv">$ </span>apt update <span class="o">&amp;&amp;</span> apt upgrade -y
</span><span class='line'><span class="nv">$ </span>apt install openjdk-8-jdk -y
</span></code></pre></td></tr></table></div></figure>


<p>Verify that Java is installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>java -version
</span><span class='line'>openjdk version <span class="s2">&quot;1.8.0_181&quot;</span>
</span><span class='line'>OpenJDK Runtime Environment <span class="o">(</span>build 1.8.0_181-8u181-b13-1ubuntu0.16.04.1-b13<span class="o">)</span>
</span><span class='line'>OpenJDK 64-Bit Server VM <span class="o">(</span>build 25.181-b13, mixed mode<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Setup Kernel parameters for Elasticsearch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sysctl -w vm.max_map_count<span class="o">=</span>262144
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;vm.max_map_count=262144&#39;</span> &gt;&gt; /etc/sysctl.conf
</span></code></pre></td></tr></table></div></figure>


<h2>Setup Elasticsearch:</h2>

<p>Search for the latest versions (when already having elasticsearch, either upgrade or install apm on the same version as elasticsearch/kibana):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt-cache madison elasticsearch
</span><span class='line'>elasticsearch <span class="p">|</span>      6.4.3 <span class="p">|</span> https://artifacts.elastic.co/packages/6.x/apt stable/main amd64 Packages
</span><span class='line'>elasticsearch <span class="p">|</span>      6.4.2 <span class="p">|</span> https://artifacts.elastic.co/packages/6.x/apt stable/main amd64 Packages
</span></code></pre></td></tr></table></div></figure>


<p>Install Elasticsearch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt-get install <span class="nv">elasticsearch</span><span class="o">=</span>6.4.3 -y
</span></code></pre></td></tr></table></div></figure>


<p>Configure Elasticsearch to lock the memory on startup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -i <span class="s1">&#39;s/#bootstrap.memory_lock: true/bootstrap.memory_lock: true/g&#39;</span> /etc/elasticsearch/elasticsearch.yml
</span></code></pre></td></tr></table></div></figure>


<p>Enable Elasticsearch on startup and start the service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>systemctl daemon-reload
</span><span class='line'><span class="nv">$ </span>systemctl <span class="nb">enable </span>elasticsearch.service
</span><span class='line'><span class="nv">$ </span>systemctl start elasticsearch.service
</span></code></pre></td></tr></table></div></figure>


<h2>Install Kibana:</h2>

<p>Install Kibana version <code>6.4.3</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt install <span class="nv">kibana</span><span class="o">=</span>6.4.3 -y
</span></code></pre></td></tr></table></div></figure>


<p>For demonstration, I will configure Kibana to listen on all interfaces on port <code>5601</code>, but note this will enable access for everyone, you can [follow this blogpost] to setup a Nginx Reverse Proxy to upstream to localhost on port 5601.</p>

<p>Since this demonstration we are using Elasticsearch locally, so if you have a remote cluster, configuration can be applied where needed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sed -i <span class="s1">&#39;s/#server.host: &quot;localhost&quot;/server.host: &quot;0.0.0.0&quot;/&#39;</span>g /etc/kibana/kibana.yml
</span><span class='line'><span class="nv">$ </span>sed -i <span class="s1">&#39;s/#elasticsearch.url: &quot;http:\/\/localhost:9200&quot;/elasticsearch.url: &quot;http:\/\/localhost:9200&quot;/&#39;</span>g /etc/kibana/kibana.yml
</span></code></pre></td></tr></table></div></figure>


<p>Enable Kibana on startup and start the service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>systemctl <span class="nb">enable </span>kibana.service
</span><span class='line'><span class="nv">$ </span>systemctl restart kibana.service
</span></code></pre></td></tr></table></div></figure>


<h2>Install the APM Server</h2>

<p>Install APM Server version <code>6.4.3</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt install apm-server<span class="o">=</span>6.4.3 -y
</span></code></pre></td></tr></table></div></figure>


<p>Since we have everything locally, the configuration can be kept as is, but if you need to configure the elasticsearch or kibana hosts, it can be done via <code>/etc/apm-server/apm-server.yml</code></p>

<p>Then once Kibana and Elasticsearch is started, load the mapping templates, enable and start the service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apm-server setup
</span><span class='line'><span class="nv">$ </span>systemctl <span class="nb">enable </span>apm-server.service
</span><span class='line'><span class="nv">$ </span>systemctl restart apm-server.service
</span></code></pre></td></tr></table></div></figure>


<p>Ensure all the services are running with <code>netstat -tulpn</code> and port <code>9200</code>, <code>9300</code>, <code>5601</code> and <code>8300</code> should be listening</p>

<h2>Access Your Elastic Stack</h2>

<p>Access Kibana on your routable endpoint on port <code>5601</code> and you should see something like this:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-startup.png" alt="" /></p>

<h2>Configuring a Application to push metrics to APM</h2>

<p>In the <a href="https://blog.ruanbekker.com/blog/2018/11/11/get-application-performance-metrics-on-python-flask-with-elastic-apm-on-kibana-and-elasticsearch/">next post</a> I will setup a Python Flask Application on APM</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Benchmark Website Response Times With CURL]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/31/benchmark-website-response-times-with-curl/"/>
    <updated>2018-10-31T02:17:12-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/31/benchmark-website-response-times-with-curl</id>
    <content type="html"><![CDATA[<p>We can gain insights when making requests to websites such as:</p>

<ul>
<li>Lookup time</li>
<li>Connect time</li>
<li>AppCon time</li>
<li>Redirect time</li>
<li>PreXfer time</li>
<li>StartXfer time</li>
</ul>


<p>We will make a request to a website that has caching enabled, the first hit will be a MISS:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -s -w <span class="s1">&#39;\nLookup time:\t%{time_namelookup}\nConnect time:\t%{time_connect}\nAppCon time:\t%{time_appconnect}\nRedirect time:\t%{time_redirect}\nPreXfer time:\t%{time_pretransfer}\nStartXfer time:\t%{time_starttransfer}\n\nTotal time:\t%{time_total}\n&#39;</span> -o /dev/null obj-cache.cloud.ruanbekker.com/elasticsearch-2.jpg
</span><span class='line'>
</span><span class='line'>Lookup <span class="nb">time</span>:  1.524465
</span><span class='line'>Connect <span class="nb">time</span>: 1.707561
</span><span class='line'>AppCon <span class="nb">time</span>:  0.000000
</span><span class='line'>Redirect <span class="nb">time</span>:    0.000000
</span><span class='line'>PreXfer <span class="nb">time</span>: 1.707656
</span><span class='line'>StartXfer <span class="nb">time</span>:   1.897660
</span><span class='line'>
</span><span class='line'>Total <span class="nb">time</span>:   2.451824
</span></code></pre></td></tr></table></div></figure>


<p>The next hit will be a HIT:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -s -w <span class="s1">&#39;\nLookup time:\t%{time_namelookup}\nConnect time:\t%{time_connect}\nAppCon time:\t%{time_appconnect}\nRedirect time:\t%{time_redirect}\nPreXfer time:\t%{time_pretransfer}\nStartXfer time:\t%{time_starttransfer}\n\nTotal time:\t%{time_total}\n&#39;</span> -o /dev/null obj-cache.cloud.ruanbekker.com/elasticsearch-2.jpg
</span><span class='line'>
</span><span class='line'>Lookup <span class="nb">time</span>:  0.004441
</span><span class='line'>Connect <span class="nb">time</span>: 0.188065
</span><span class='line'>AppCon <span class="nb">time</span>:  0.000000
</span><span class='line'>Redirect <span class="nb">time</span>:    0.000000
</span><span class='line'>PreXfer <span class="nb">time</span>: 0.188160
</span><span class='line'>StartXfer <span class="nb">time</span>:   0.381344
</span><span class='line'>
</span><span class='line'>Total <span class="nb">time</span>:   0.926420
</span></code></pre></td></tr></table></div></figure>


<p>Similar Posts:</p>

<ul>
<li><a href="https://blog.josephscott.org/2011/10/14/timing-details-with-curl/">https://blog.josephscott.org/2011/10/14/timing-details-with-curl/</a></li>
<li><a href="https://ops.tips/gists/measuring-http-response-times-curl/">https://ops.tips/gists/measuring-http-response-times-curl/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Bootstrap Nodes With Python Using Ansible]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/31/how-to-bootstrap-nodes-with-python-using-ansible/"/>
    <updated>2018-10-31T01:48:15-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/31/how-to-bootstrap-nodes-with-python-using-ansible</id>
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/rbekker/image/upload/v1531083331/ansible_tojf8l.png" alt="" /></p>

<p>As Ansible depends on Python, therefore we can bootstrap our nodes with Python using a Ansible Playbook</p>

<h2>Inventory</h2>

<p>The nodes we want to bootstrap:</p>

<figure class='code'><figcaption><span>inventory.ini</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>new<span class="o">]</span>
</span><span class='line'>node-1
</span><span class='line'>node-2
</span><span class='line'>node-3
</span><span class='line'>
</span><span class='line'><span class="o">[</span>new:vars<span class="o">]</span>
</span><span class='line'><span class="nv">ansible_python_interpreter</span><span class="o">=</span>/usr/bin/python3
</span></code></pre></td></tr></table></div></figure>


<h2>Playbook</h2>

<p>Our playbook with what we want to do:</p>

<figure class='code'><figcaption><span>bootstrap-python.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">all</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gather_facts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">False</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">install python</span>
</span><span class='line'>    <span class="l-Scalar-Plain">raw</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">test -e /usr/bin/python || ( apt update &amp;&amp; apt install python -y )</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy</h2>

<p>Deploy with Ansible:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ansible-playbook -i inventory.ini bootstrap-python.yml
</span><span class='line'>
</span><span class='line'>PLAY <span class="o">[</span>all<span class="o">]</span> ***********************************************************************************************************************************************************************************************
</span><span class='line'>
</span><span class='line'>TASK <span class="o">[</span>install python<span class="o">]</span> ************************************************************************************************************************************************************************************
</span><span class='line'>changed: <span class="o">[</span>node-1<span class="o">]</span>
</span><span class='line'>changed: <span class="o">[</span>node-2<span class="o">]</span>
</span><span class='line'>changed: <span class="o">[</span>node-3<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>PLAY RECAP ***********************************************************************************************************************************************************************************************
</span><span class='line'>node-1                     : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">2</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>node-2                     : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">2</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>node-3                     : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">2</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure>


<p>This is it for this post, all posts for this tutorial will be posted under <a href="http://blog.ruanbekker.com/blog/categories/ansible-tutorial">#ansible-tutorial</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Install Packages on Remote Systems With Ansible]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/31/how-to-install-packages-on-remote-systems-with-ansible/"/>
    <updated>2018-10-31T01:28:18-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/31/how-to-install-packages-on-remote-systems-with-ansible</id>
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/rbekker/image/upload/v1531083331/ansible_tojf8l.png" alt="" /></p>

<p>We will use Ansible to deploy packages to remote systems and in this case all the remote systems are running Debian, therefore we will be using the APT package manager.</p>

<h2>Pre-Requisites:</h2>

<p>Ensure that you have installed Ansible and setup the SSH Config for your remote systems, how to do that can be found under the post: <a href="https://blog.ruanbekker.com/blog/2018/07/08/getting-started-with-ansible-on-ubuntu/">setting up ansible</a></p>

<h2>Our Inventory</h2>

<p>The inventory file that describes our hosts:</p>

<figure class='code'><figcaption><span>inventory.ini</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>scaleway<span class="o">]</span>
</span><span class='line'>cluster-node-1
</span><span class='line'>cluster-node-2
</span><span class='line'>
</span><span class='line'><span class="o">[</span>hetzner<span class="o">]</span>
</span><span class='line'>docker-node-1
</span><span class='line'>docker-node-2
</span><span class='line'>docker-node-3
</span><span class='line'>glusterfs-node-1
</span><span class='line'>glusterfs-node-2
</span><span class='line'>elasticsearch-node-1
</span><span class='line'>elasticsearch-node-2
</span><span class='line'>
</span><span class='line'><span class="o">[</span>scaleway:vars<span class="o">]</span>
</span><span class='line'><span class="nv">ansible_python_interpreter</span><span class="o">=</span>/usr/bin/python3
</span><span class='line'><span class="nv">location</span><span class="o">=</span>france
</span><span class='line'>
</span><span class='line'><span class="o">[</span>hetzner:vars<span class="o">]</span>
</span><span class='line'><span class="nv">ansible_python_interpreter</span><span class="o">=</span>/usr/bin/python3
</span><span class='line'><span class="nv">location</span><span class="o">=</span>germany
</span></code></pre></td></tr></table></div></figure>


<h2>Playbook</h2>

<p>Our playbook that we will define that we want to deploy packages using apt to all hosts:</p>

<figure class='code'><figcaption><span>packages.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">all</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Install Packages</span>
</span><span class='line'>    <span class="l-Scalar-Plain">apt</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">name= state=latest update_cache=yes</span>
</span><span class='line'>    <span class="l-Scalar-Plain">with_items</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ntp</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">python</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">tcpdump</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">wget</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">openssl</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">curl</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy</h2>

<p>Running the playbook to deploy the packages to the remote servers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ansible-playbook -i inventory.ini packages.yml
</span><span class='line'>
</span><span class='line'>PLAY <span class="o">[</span>all<span class="o">]</span> ***********************************************************************************************************************************************************************************************
</span><span class='line'>
</span><span class='line'>TASK <span class="o">[</span>Gathering Facts<span class="o">]</span> ***********************************************************************************************************************************************************************************
</span><span class='line'>ok: <span class="o">[</span>glusterfs-node-2<span class="o">]</span>
</span><span class='line'>ok: <span class="o">[</span>glusterfs-node-1<span class="o">]</span>
</span><span class='line'>ok: <span class="o">[</span>docker-node-1<span class="o">]</span>
</span><span class='line'>ok: <span class="o">[</span>docker-node-2<span class="o">]</span>
</span><span class='line'>ok: <span class="o">[</span>docker-node-3<span class="o">]</span>
</span><span class='line'>ok: <span class="o">[</span>elasticsearch-node-1<span class="o">]</span>
</span><span class='line'>ok: <span class="o">[</span>elasticsearch-node-2<span class="o">]</span>
</span><span class='line'>ok: <span class="o">[</span>cluster-node-1<span class="o">]</span>
</span><span class='line'>ok: <span class="o">[</span>cluster-node-2<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>TASK <span class="o">[</span>Install Packages<span class="o">]</span> **********************************************************************************************************************************************************************************
</span><span class='line'>changed: <span class="o">[</span>docker-node-1<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">=[</span>u<span class="s1">&#39;ntp&#39;</span>, u<span class="s1">&#39;python&#39;</span>, u<span class="s1">&#39;tcpdump&#39;</span>, u<span class="s1">&#39;wget&#39;</span>, u<span class="s1">&#39;openssl&#39;</span>, u<span class="s1">&#39;curl&#39;</span><span class="o">])</span>
</span><span class='line'>changed: <span class="o">[</span>docker-node-2<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">=[</span>u<span class="s1">&#39;ntp&#39;</span>, u<span class="s1">&#39;python&#39;</span>, u<span class="s1">&#39;tcpdump&#39;</span>, u<span class="s1">&#39;wget&#39;</span>, u<span class="s1">&#39;openssl&#39;</span>, u<span class="s1">&#39;curl&#39;</span><span class="o">])</span>
</span><span class='line'>changed: <span class="o">[</span>docker-node-3<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">=[</span>u<span class="s1">&#39;ntp&#39;</span>, u<span class="s1">&#39;python&#39;</span>, u<span class="s1">&#39;tcpdump&#39;</span>, u<span class="s1">&#39;wget&#39;</span>, u<span class="s1">&#39;openssl&#39;</span>, u<span class="s1">&#39;curl&#39;</span><span class="o">])</span>
</span><span class='line'>changed: <span class="o">[</span>elasticsearch-node-1<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">=[</span>u<span class="s1">&#39;ntp&#39;</span>, u<span class="s1">&#39;python&#39;</span>, u<span class="s1">&#39;tcpdump&#39;</span>, u<span class="s1">&#39;wget&#39;</span>, u<span class="s1">&#39;openssl&#39;</span>, u<span class="s1">&#39;curl&#39;</span><span class="o">])</span>
</span><span class='line'>changed: <span class="o">[</span>glusterfs-node-1<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">=[</span>u<span class="s1">&#39;ntp&#39;</span>, u<span class="s1">&#39;python&#39;</span>, u<span class="s1">&#39;tcpdump&#39;</span>, u<span class="s1">&#39;wget&#39;</span>, u<span class="s1">&#39;openssl&#39;</span>, u<span class="s1">&#39;curl&#39;</span><span class="o">])</span>
</span><span class='line'>changed: <span class="o">[</span>glusterfs-node-2<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">=[</span>u<span class="s1">&#39;ntp&#39;</span>, u<span class="s1">&#39;python&#39;</span>, u<span class="s1">&#39;tcpdump&#39;</span>, u<span class="s1">&#39;wget&#39;</span>, u<span class="s1">&#39;openssl&#39;</span>, u<span class="s1">&#39;curl&#39;</span><span class="o">])</span>
</span><span class='line'>changed: <span class="o">[</span>elasticsearch-node-2<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">=[</span>u<span class="s1">&#39;ntp&#39;</span>, u<span class="s1">&#39;python&#39;</span>, u<span class="s1">&#39;tcpdump&#39;</span>, u<span class="s1">&#39;wget&#39;</span>, u<span class="s1">&#39;openssl&#39;</span>, u<span class="s1">&#39;curl&#39;</span><span class="o">])</span>
</span><span class='line'>ok: <span class="o">[</span>cluster-node-1<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">=[</span>u<span class="s1">&#39;ntp&#39;</span>, u<span class="s1">&#39;python&#39;</span>, u<span class="s1">&#39;tcpdump&#39;</span>, u<span class="s1">&#39;wget&#39;</span>, u<span class="s1">&#39;openssl&#39;</span>, u<span class="s1">&#39;curl&#39;</span><span class="o">])</span>
</span><span class='line'>ok: <span class="o">[</span>cluster-node-2<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">=[</span>u<span class="s1">&#39;ntp&#39;</span>, u<span class="s1">&#39;python&#39;</span>, u<span class="s1">&#39;tcpdump&#39;</span>, u<span class="s1">&#39;wget&#39;</span>, u<span class="s1">&#39;openssl&#39;</span>, u<span class="s1">&#39;curl&#39;</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'>PLAY RECAP ***********************************************************************************************************************************************************************************************
</span><span class='line'>docker-node-1              : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">1</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>docker-node-2              : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">1</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>docker-node-3              : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">1</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>elasticsearch-node-1       : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">1</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>elasticsearch-node-2       : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">1</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>glusterfs-node-1           : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">1</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>glusterfs-node-2           : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">1</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>cluster-node-1             : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>cluster-node-2             : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure>


<p>This is it for this post, all posts for this tutorial will be posted under <a href="http://blog.ruanbekker.com/blog/categories/ansible-tutorial">#ansible-tutorials</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Query 24 Hours Worth of Data Using BatchGet on Amazon DynamoDB Using Scan and Filter Without a GSI]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/30/query-24-hours-worth-of-data-using-batchget-on-amazon-dynamodb-using-scan-and-filter-without-a-gsi/"/>
    <updated>2018-10-30T14:53:43-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/30/query-24-hours-worth-of-data-using-batchget-on-amazon-dynamodb-using-scan-and-filter-without-a-gsi</id>
    <content type="html"><![CDATA[<p>I&rsquo;m testing how to query data in DynamoDB which will always be the retrieval of yesterdays data, without using a Global Secondary Index.</p>

<p>This is done just to see what other ways you can use to query data based on a specific timeframe.</p>

<h2>Use-Case:</h2>

<p>Data from DynamoDB needs to be batch processed (daily for the last 24-hours), into a external datasource. Data will be written into DynamoDB, the HK (uuid) and RK (timestamp) will be duplicated to the daily table. But only uuid and timestamp will be duplicated to the daily table, and only data for that day will be written into that datestamp formatted table name.</p>

<p>Let&rsquo;s say data for 2018-10-30 needs to be written into our external data source, we will do a scan on table <code>tbl-test_20181030</code>, then from our response we will have a list of HashKeys (uuid) which we will use to do a BatchGet Item on our base table: <code>tbl-test_base</code>, which essentially grabs all the data for that day.</p>

<p>If deeper filtering needs to be done on that day, the FilterExpression can be used to do a deeper filtering which leads to grabbing only the filtered down data from the base table.</p>

<p><em>Note:</em> The base table might have millions of items, so a Scan operation on the Base table would be really expensive, as it reads all the items in the table.</p>

<p>Once the data has been processed, the daily or metadata table can be removed.</p>

<h2>DynamoDB Table Design</h2>

<p>The base table: <code>tbl-test_base</code> will have:</p>

<ul>
<li>HashKey: uuid (string)</li>
<li>RangeKey: timestamp (number)</li>
<li>Attributes: city, stream, transaction_date, name, metric_uri</li>
<li>Item will look like:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s">u&#39;uuid&#39;</span><span class="p">:</span> <span class="s">u&#39;fb4ddeb9-3b5e-47b3-bbab-1aa1d8e8f47b&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">u&#39;timestamp&#39;</span><span class="p">:</span> <span class="mi">1540891276</span><span class="p">,</span>
</span><span class='line'>  <span class="s">u&#39;city&#39;</span><span class="p">:</span> <span class="s">u&#39;sydney&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">u&#39;stream&#39;</span><span class="p">:</span> <span class="s">u&#39;NONE&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">u&#39;transaction_date&#39;</span><span class="p">:</span> <span class="s">u&#39;2018-10-30 11:21:16&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">u&#39;metric_uri&#39;</span><span class="p">:</span> <span class="s">u&#39;some-dummy-metric-uri&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;frank&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>he Daily Table: <code>tbl-test_20181030</code> will look like:</p>

<ul>
<li>HashKey: <code>uuid</code></li>
<li>Attributes: <code>timestamp</code></li>
<li>Item will look like:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s">u&#39;uuid&#39;</span><span class="p">:</span> <span class="s">u&#39;fb4ddeb9-3b5e-47b3-bbab-1aa1d8e8f47b&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">u&#39;timestamp&#39;</span><span class="p">:</span> <span class="mi">1540891276</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Demonstration using Python</h2>

<p>Creating the Metadata table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span><span class="o">,</span> <span class="nn">time</span><span class="o">,</span> <span class="nn">uuid</span><span class="o">,</span> <span class="nn">random</span>
</span><span class='line'>
</span><span class='line'><span class="n">session</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">region_name</span><span class="o">=</span><span class="s">&#39;eu-west-1&#39;</span><span class="p">,</span> <span class="n">profile_name</span><span class="o">=</span><span class="s">&#39;dev&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">resource</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s">&#39;dynamodb&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s">&#39;dynamodb&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">create_table</span><span class="p">():</span>
</span><span class='line'>    <span class="n">table_name</span> <span class="o">=</span> <span class="s">&quot;tbl-test_{0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%Y%m</span><span class="si">%d</span><span class="s">&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">resource</span><span class="o">.</span><span class="n">create_table</span><span class="p">(</span>
</span><span class='line'>        <span class="n">TableName</span><span class="o">=</span><span class="n">table_name</span><span class="p">,</span>
</span><span class='line'>        <span class="n">KeySchema</span><span class="o">=</span><span class="p">[{</span>
</span><span class='line'>            <span class="s">&#39;AttributeName&#39;</span><span class="p">:</span> <span class="s">&#39;uuid&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;KeyType&#39;</span><span class="p">:</span> <span class="s">&#39;HASH&#39;</span>
</span><span class='line'>        <span class="p">}],</span>
</span><span class='line'>        <span class="n">AttributeDefinitions</span><span class="o">=</span><span class="p">[{</span>
</span><span class='line'>            <span class="s">&#39;AttributeName&#39;</span><span class="p">:</span> <span class="s">&#39;uuid&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;AttributeType&#39;</span><span class="p">:</span> <span class="s">&#39;S&#39;</span>
</span><span class='line'>        <span class="p">}],</span>
</span><span class='line'>        <span class="n">ProvisionedThroughput</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;ReadCapacityUnits&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;WriteCapacityUnits&#39;</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">resource</span><span class="o">.</span><span class="n">Table</span><span class="p">(</span><span class="n">table_name</span><span class="p">)</span><span class="o">.</span><span class="n">wait_until_exists</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">arn</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">describe_table</span><span class="p">(</span><span class="n">TableName</span><span class="o">=</span><span class="n">table_name</span><span class="p">)[</span><span class="s">&#39;Table&#39;</span><span class="p">][</span><span class="s">&#39;TableArn&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">client</span><span class="o">.</span><span class="n">tag_resource</span><span class="p">(</span>
</span><span class='line'>        <span class="n">ResourceArn</span><span class="o">=</span><span class="n">arn</span><span class="p">,</span>
</span><span class='line'>        <span class="n">Tags</span><span class="o">=</span><span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="s">&#39;Key&#39;</span><span class="p">:</span> <span class="s">&#39;Name&#39;</span><span class="p">,</span><span class="s">&#39;Value&#39;</span><span class="p">:</span> <span class="s">&#39;dynamo_table&#39;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="s">&#39;Key&#39;</span><span class="p">:</span> <span class="s">&#39;Environment&#39;</span><span class="p">,</span><span class="s">&#39;Value&#39;</span><span class="p">:</span> <span class="s">&#39;Dev&#39;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="s">&#39;Key&#39;</span><span class="p">:</span> <span class="s">&#39;CreatedBy&#39;</span><span class="p">,</span><span class="s">&#39;Value&#39;</span><span class="p">:</span> <span class="s">&#39;Ruan&#39;</span><span class="p">}</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">resource</span><span class="o">.</span><span class="n">Table</span><span class="p">(</span><span class="n">table_name</span><span class="p">)</span><span class="o">.</span><span class="n">table_status</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">create_table</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>Write 400 Items to DynamoDB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span><span class="o">,</span> <span class="nn">time</span><span class="o">,</span> <span class="nn">uuid</span><span class="o">,</span> <span class="nn">random</span>
</span><span class='line'>
</span><span class='line'><span class="n">session</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">region_name</span><span class="o">=</span><span class="s">&#39;eu-west-1&#39;</span><span class="p">,</span> <span class="n">profile_name</span><span class="o">=</span><span class="s">&#39;dev&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">resource</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s">&#39;dynamodb&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s">&#39;dynamodb&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">base_table</span> <span class="o">=</span> <span class="s">&#39;tbl-test_base&#39;</span>
</span><span class='line'><span class="n">meta_table</span> <span class="o">=</span> <span class="s">&#39;tbl-test_{0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%Y%m</span><span class="si">%d</span><span class="s">&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">people</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;james&#39;</span><span class="p">,</span> <span class="s">&#39;john&#39;</span><span class="p">,</span> <span class="s">&#39;frank&#39;</span><span class="p">,</span> <span class="s">&#39;paul&#39;</span><span class="p">,</span> <span class="s">&#39;nathan&#39;</span><span class="p">,</span> <span class="s">&#39;kevin&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">cities</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;ireland&#39;</span><span class="p">,</span> <span class="s">&#39;cape town&#39;</span><span class="p">,</span> <span class="s">&#39;pretoria&#39;</span><span class="p">,</span> <span class="s">&#39;paris&#39;</span><span class="p">,</span> <span class="s">&#39;amsterdam&#39;</span><span class="p">,</span> <span class="s">&#39;auckland&#39;</span><span class="p">,</span> <span class="s">&#39;sydney&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">write_dynamo</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">timestamp</span><span class="p">):</span>
</span><span class='line'>    <span class="n">resource</span><span class="o">.</span><span class="n">Table</span><span class="p">(</span><span class="n">base_table</span><span class="p">)</span><span class="o">.</span><span class="n">put_item</span><span class="p">(</span>
</span><span class='line'>        <span class="n">Item</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;uuid&#39;</span><span class="p">:</span> <span class="n">uuid</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;timestamp&#39;</span><span class="p">:</span> <span class="n">timestamp</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;metric_uri&#39;</span><span class="p">:</span> <span class="s">&#39;some-dummy-metric-uri&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;transaction_date&#39;</span><span class="p">:</span> <span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%Y-%m-</span><span class="si">%d</span><span class="s"> %H:%M:%S&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">people</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&#39;stream&#39;</span><span class="p">:</span> <span class="s">&#39;NONE&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;city&#39;</span><span class="p">:</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">cities</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">resource</span><span class="o">.</span><span class="n">Table</span><span class="p">(</span><span class="n">meta_table</span><span class="p">)</span><span class="o">.</span><span class="n">put_item</span><span class="p">(</span>
</span><span class='line'>        <span class="n">Item</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;uuid&#39;</span><span class="p">:</span> <span class="n">uuid</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;timestamp&#39;</span><span class="p">:</span> <span class="n">timestamp</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;Written&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">400</span><span class="p">):</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">write_dynamo</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="o">.</span><span class="n">uuid4</span><span class="p">()),</span> <span class="nb">int</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()))</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Getting Data for 20181030 but also filter data greater than the timestamp attribute, greater than <code>1540841144</code> in epoch time (which will give us about 254 items).</p>

<p>The BatchGet Item supports up to 100 items per call, we will limit the scans on 100 items per call, then paginate using the ExlusiveStartKey with the value of our LastEvaluatedKey that we will get from our response:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span><span class="o">,</span><span class="nn">time</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">boto3.dynamodb.conditions</span> <span class="kn">import</span> <span class="n">Key</span>
</span><span class='line'>
</span><span class='line'><span class="n">base_table</span> <span class="o">=</span> <span class="s">&#39;tbl-test_base&#39;</span>
</span><span class='line'><span class="n">meta_table</span> <span class="o">=</span> <span class="s">&#39;tbl-test_20181030&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">session</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">region_name</span><span class="o">=</span><span class="s">&#39;eu-west-1&#39;</span><span class="p">,</span> <span class="n">profile_name</span><span class="o">=</span><span class="s">&#39;dev&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">resource</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s">&#39;dynamodb&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">table</span> <span class="o">=</span> <span class="n">resource</span><span class="o">.</span><span class="n">Table</span><span class="p">(</span><span class="n">meta_table</span><span class="p">)</span>
</span><span class='line'><span class="n">filtering_expression</span> <span class="o">=</span> <span class="n">Key</span><span class="p">(</span><span class="s">&#39;timestamp&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">gt</span><span class="p">(</span><span class="mi">1540841144</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="n">table</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="n">FilterExpression</span><span class="o">=</span><span class="n">filtering_expression</span><span class="p">,</span> <span class="n">Limit</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">finished</span><span class="o">=</span><span class="bp">False</span>
</span><span class='line'><span class="k">while</span> <span class="n">finished</span> <span class="o">!=</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;LastEvaluatedKey&#39;</span> <span class="ow">in</span> <span class="n">response</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Getting {} Items&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">response</span><span class="p">[</span><span class="s">&#39;Count&#39;</span><span class="p">]))</span>
</span><span class='line'>        <span class="n">items</span> <span class="o">=</span> <span class="n">resource</span><span class="o">.</span><span class="n">batch_get_item</span><span class="p">(</span><span class="n">RequestItems</span><span class="o">=</span><span class="p">{</span><span class="n">base_table</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;Keys&#39;</span><span class="p">:</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;Items&#39;</span><span class="p">]}})</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">items</span><span class="p">[</span><span class="s">&#39;Responses&#39;</span><span class="p">][</span><span class="n">base_table</span><span class="p">])</span>
</span><span class='line'>        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="n">table</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="n">FilterExpression</span><span class="o">=</span><span class="n">filtering_expression</span><span class="p">,</span> <span class="n">Limit</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">ExclusiveStartKey</span><span class="o">=</span><span class="n">response</span><span class="p">[</span><span class="s">&#39;LastEvaluatedKey&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Getting {} Items&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">response</span><span class="p">[</span><span class="s">&#39;Count&#39;</span><span class="p">]))</span>
</span><span class='line'>        <span class="n">items</span> <span class="o">=</span> <span class="n">resource</span><span class="o">.</span><span class="n">batch_get_item</span><span class="p">(</span><span class="n">RequestItems</span><span class="o">=</span><span class="p">{</span><span class="n">base_table</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;Keys&#39;</span><span class="p">:</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;Items&#39;</span><span class="p">]}})</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">items</span><span class="p">[</span><span class="s">&#39;Responses&#39;</span><span class="p">][</span><span class="n">base_table</span><span class="p">])</span>
</span><span class='line'>        <span class="n">finished</span><span class="o">=</span><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python dynamodb-batch-get.py
</span><span class='line'>Getting <span class="m">100</span> Items
</span><span class='line'><span class="o">[{</span>u<span class="s1">&#39;city&#39;</span>: u<span class="s1">&#39;pretoria&#39;</span>, u<span class="s1">&#39;uuid&#39;</span>: u<span class="s1">&#39;e8bc0d1c-2b57-4de2-b0e1-35ef1fe0edf1&#39;</span>, u<span class="s1">&#39;stream&#39;</span>: u<span class="s1">&#39;NONE&#39;</span>, u<span class="s1">&#39;timestamp&#39;</span>: Decimal<span class="o">(</span><span class="s1">&#39;1540846990&#39;</span><span class="o">)</span>, u<span class="s1">&#39;transaction_date&#39;</span>: u<span class="s1">&#39;2018-10-29 23:03:10&#39;</span>, u<span class="s1">&#39;metric_uri&#39;</span>: u<span class="s1">&#39;some-dummy-metric-uri&#39;</span>, u<span class="s1">&#39;name&#39;</span>: u<span class="s1">&#39;frank&#39;</span><span class="o">}</span>, <span class="o">{</span>u<span class="s1">&#39;city&#39;</span>: u<span class="s1">&#39;amsterdam&#39;</span>, u<span class="s1">&#39;uuid&#39;</span>:
</span><span class='line'>...
</span><span class='line'>Getting <span class="m">100</span> Items
</span><span class='line'><span class="o">[{</span>u<span class="s1">&#39;city&#39;</span>: u<span class="s1">&#39;sydney&#39;</span>, u<span class="s1">&#39;uuid&#39;</span>: u<span class="s1">&#39;5bc51ce9-2809-46c9-a3f2-ff8180086d92&#39;</span>, u<span class="s1">&#39;stream&#39;</span>: u<span class="s1">&#39;NONE&#39;</span>, u<span class="s1">&#39;timestamp&#39;</span>: Decimal<span class="o">(</span><span class="s1">&#39;1540848599&#39;</span><span class="o">)</span>, u<span class="s1">&#39;transaction_date&#39;</span>: u<span class="s1">&#39;2018-10-29 23:29:59&#39;</span>, u<span class="s1">&#39;metric_uri&#39;</span>: u<span class="s1">&#39;some-dummy-metric-uri&#39;</span>, u<span class="s1">&#39;name&#39;</span>: u<span class="s1">&#39;frank&#39;</span><span class="o">}</span>
</span><span class='line'>...
</span><span class='line'>Getting <span class="m">54</span> Items
</span><span class='line'><span class="o">[{</span>u<span class="s1">&#39;city&#39;</span>: u<span class="s1">&#39;cape town&#39;</span>, u<span class="s1">&#39;uuid&#39;</span>: u<span class="s1">&#39;5e069f34-0e97-4a49-9ca9-da2213edb689&#39;</span>...
</span></code></pre></td></tr></table></div></figure>


<p>Verifying that each call only scans 100 at a time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="n">table</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="n">FilterExpression</span><span class="o">=</span><span class="n">filtering_expression</span><span class="p">,</span> <span class="n">Limit</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">response</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="s">u&#39;Count&#39;</span><span class="p">,</span> <span class="s">u&#39;Items&#39;</span><span class="p">,</span> <span class="s">u&#39;LastEvaluatedKey&#39;</span><span class="p">,</span> <span class="s">u&#39;ScannedCount&#39;</span><span class="p">,</span> <span class="s">&#39;ResponseMetadata&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">response</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;LastEvaluatedKey&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;uuid&#39;</span><span class="p">:</span> <span class="s">u&#39;e8c52a55-ca9e-4718-83d2-1b44a90f43e6&#39;</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">response</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;Count&#39;</span><span class="p">)</span>
</span><span class='line'><span class="mi">100</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">response</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;ScannedCount&#39;</span><span class="p">)</span>
</span><span class='line'><span class="mi">100</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Other Thoughts:</h2>

<p>Querying data is a lot easier using a Global Secondary Index where you could similarly have the metric_uri as the HashKey and transaction_date as the RangeKey:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="n">table</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>
</span><span class='line'>    <span class="n">IndexName</span><span class="o">=</span><span class="s">&#39;metric_uri-transaction_date-index&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">KeyConditionExpression</span><span class="o">=</span><span class="n">Key</span><span class="p">(</span><span class="s">&#39;metric_uri&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">eq</span><span class="p">(</span><span class="s">&#39;some-dummy-metric-uri&#39;</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">Key</span><span class="p">(</span><span class="s">&#39;transaction_date&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">begins_with</span><span class="p">(</span><span class="s">&#39;2018-10-30&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;Count&#39;</span><span class="p">]</span>
</span><span class='line'><span class="mi">400</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also note that depending on how you setup your GSI, in most cases its a exact duplicate in storage from your base table, so could potentially be double the costs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Python Flask and JavaScript for Client Side Filtering Through Returned Data]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/24/using-python-flask-and-javascript-for-client-side-filtering-through-returned-data/"/>
    <updated>2018-10-24T05:39:33-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/24/using-python-flask-and-javascript-for-client-side-filtering-through-returned-data</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/python-logo.png" alt="" /></p>

<p>This post will cover 2 sections, using Python Flask and Javascript to filter returned data, where you could have a table that represents 100 items, and you want to have a search box to filter down your results as you type.</p>

<p>The other section will be used as a demo, with solving a problem with Amazon CloudWatch Logs. I&rsquo;m a Massive AWS Fanatic, but when it comes to CloudWatch Logs, I&rsquo;m not so big of a fan of that specific service. Especially when you use Docker Swarm for AWS and have your logdriver set to CloudWatch Logs.</p>

<h2>The Problem I have with CloudWatch Logs</h2>

<p>When you point to your CloudWatch LogGroups, you can search for your streams, and in my case searching for a specific swarm service, but you can&rsquo;t sort by date, like this:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/cloudwatch-logs-date-issue.png" alt="" /></p>

<p>This makes it really tedious when trying to search find your logs in a quick way.</p>

<h2>Python Flask to the Resque</h2>

<p>We will create a Python Flask application that retrieves your data about all your Docker Swarm Services and Container Id&rsquo;s running on each node. For this demonstration, I have hard coded the services and container id&rsquo;s, but using it in a real environment, you can utilise the Docker API or some logic that retrieves it from a datastore where a process populates it to.</p>

<p>The Application Code will do the following:</p>

<ul>
<li>returns a list of your swarm services (mock data in the code)</li>
<li>when you select a service, it will get a list of the container ids and run through a for loop unsing jinja templates and display them in table format</li>
<li>when you select the containerId, it will populate the containerId to the cloudwatch logs filter, giving you the exact logstream which you are looking for</li>
<li><p>this will do a redirect to the AWS Console, and you will see the data in the sorted time of interest</p></li>
<li><p><code>app.py</code></p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">render_template</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># faking datasets that can be returned from a api or database</span>
</span><span class='line'><span class="n">swarm_services</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;my-web-service&#39;</span><span class="p">,</span> <span class="s">&#39;my-api-service&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">swarm_tasks</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;my-web-service&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;container_names&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="s">&quot;my-web-service.1.alfjshoehfosfn&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&quot;my-web-service.2.fuebchduehakjdu&quot;</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">&quot;my-api-service&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;container_names&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="s">&quot;my-api-service.1.oprudhyuythvbzx&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&quot;my-api-service.2.sjduebansifotuf&quot;</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_container_name</span><span class="p">(</span><span class="n">app_name</span><span class="p">):</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">swarm_tasks</span><span class="p">[</span><span class="n">app_name</span><span class="p">]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">container</span> <span class="ow">in</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;container_names&#39;</span><span class="p">]:</span>
</span><span class='line'>        <span class="n">data</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">container</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&#39;index.html&#39;</span><span class="p">,</span> <span class="n">app_name</span><span class="o">=</span><span class="n">app_name</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">list</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&#39;list.html&#39;</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">swarm_services</span><span class="p">),</span> <span class="n">apps</span><span class="o">=</span><span class="n">swarm_services</span><span class="p">,</span> <span class="n">aws_region</span><span class="o">=</span><span class="s">&#39;eu-west-1&#39;</span><span class="p">,</span> <span class="n">cloudwatch_log_stream</span><span class="o">=</span><span class="s">&#39;docker-swarm-lg&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/describe/&lt;string:app_name&gt;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_app</span><span class="p">(</span><span class="n">app_name</span><span class="p">):</span>
</span><span class='line'>    <span class="n">app</span> <span class="o">=</span> <span class="n">get_container_name</span><span class="p">(</span><span class="n">app_name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">app</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>index.html</code>:</p>

<script src="https://gist.github.com/ruanbekker/08b02a3ef30367ea7306a31eb5f33cb1.js"></script>


<p>The <code>list.html</code> :</p>

<script src="https://gist.github.com/ruanbekker/98eab090e218bbbf0e46d5efc1595e04.js"></script>


<h2>Filtering the Data</h2>

<p>So at this moment all your data will be returned when a list is done, if you are in a case where you have lots of information, it can be overwelming and you will need to search for the service of interest. Using HTML and JavaScript, you can filter through the results:</p>

<p>The JavaScript Function: <code>assets/js/filter.js</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">SearchAndFilterThingy</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">input</span><span class="p">,</span> <span class="nx">filter</span><span class="p">,</span> <span class="nx">table</span><span class="p">,</span> <span class="nx">tr</span><span class="p">,</span> <span class="nx">td</span><span class="p">,</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">input</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;UserInput&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">filter</span> <span class="o">=</span> <span class="nx">input</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">table</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;ServicesTable&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">tr</span> <span class="o">=</span> <span class="nx">table</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&quot;tr&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">tr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">td</span> <span class="o">=</span> <span class="nx">tr</span><span class="p">[</span><span class="nx">x</span><span class="p">].</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&quot;td&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">td</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">td</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">().</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">filter</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">tr</span><span class="p">[</span><span class="nx">x</span><span class="p">].</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">tr</span><span class="p">[</span><span class="nx">x</span><span class="p">].</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s2">&quot;none&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Screenshot</h2>

<p>Once you search for a specific keyword on the service you are looking for the output should more or less look like the following:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/docker-flask-running-services.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Ghost Version 2 Blog for the RaspberryPi]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/23/building-ghost-version-2-blog-for-the-raspberrypi/"/>
    <updated>2018-10-23T17:37:49-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/23/building-ghost-version-2-blog-for-the-raspberrypi</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/ghost-blog-main.png" alt="" /></p>

<p>In this post we will setup Ghost 2.0.3 for the Raspberry Pi on Docker Swarm</p>

<h2>Dockerfile</h2>

<p>Our dockerfile:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM rbekker87/armhf-node:8.11
</span><span class='line'>
</span><span class='line'>RUN apk add --no-cache 'su-exec&gt;=0.2' && apk --update add bash gcc g++ make python && npm install sqlite3 --build-from-source
</span><span class='line'>
</span><span class='line'>ENV NODE_ENV production
</span><span class='line'>ENV GHOST_CLI_VERSION 1.9.1
</span><span class='line'>ENV GHOST_VERSION 2.0.3
</span><span class='line'>ENV GHOST_INSTALL /var/lib/ghost
</span><span class='line'>ENV GHOST_CONTENT /var/lib/ghost/content
</span><span class='line'>
</span><span class='line'>RUN npm install -g "ghost-cli@$GHOST_CLI_VERSION"
</span><span class='line'>
</span><span class='line'>RUN set -ex; \
</span><span class='line'>        mkdir -p "$GHOST_INSTALL" \
</span><span class='line'>        && adduser -s /bin/sh -D node \
</span><span class='line'>        && chown node:node "$GHOST_INSTALL" \
</span><span class='line'>        && su-exec node ghost install "$GHOST_VERSION" --db sqlite3 --no-prompt --no-stack --no-setup --dir "$GHOST_INSTALL" \
</span><span class='line'>        && cd "$GHOST_INSTALL" \
</span><span class='line'>        && su-exec node ghost config --ip 0.0.0.0 --port 2368 --no-prompt --db sqlite3 --url http://localhost:2368 --dbpath "$GHOST_CONTENT/data/ghost.db" \
</span><span class='line'>        && su-exec node ghost config paths.contentPath "$GHOST_CONTENT" \
</span><span class='line'>        && su-exec node ln -s config.production.json "$GHOST_INSTALL/config.development.json" \
</span><span class='line'>        && readlink -f "$GHOST_INSTALL/config.development.json" \
</span><span class='line'>        && mv "$GHOST_CONTENT" "$GHOST_INSTALL/content.orig" \
</span><span class='line'>        && mkdir -p "$GHOST_CONTENT" && chown node:node "$GHOST_CONTENT" \
</span><span class='line'>        && "$GHOST_INSTALL/current/node_modules/knex-migrator/bin/knex-migrator" --version
</span><span class='line'>
</span><span class='line'>ENV PATH $PATH:$GHOST_INSTALL/current/node_modules/knex-migrator/bin
</span><span class='line'>
</span><span class='line'>WORKDIR $GHOST_INSTALL
</span><span class='line'>
</span><span class='line'>COPY docker-entrypoint.sh /usr/local/bin
</span><span class='line'>RUN chmod +x /usr/local/bin/docker-entrypoint.sh
</span><span class='line'>
</span><span class='line'>ENTRYPOINT ["docker-entrypoint.sh"]
</span><span class='line'>
</span><span class='line'>CMD ["node", "current/index.js"]</span></code></pre></td></tr></table></div></figure>


<h2>Our Boot Script</h2>

<p>Our entrypoint script <code>docker-entrypoint.sh</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>set -e
</span><span class='line'>
</span><span class='line'>if [[ "$*" == node*current/index.js* ]] && [ "$(id -u)" = '0' ];
</span><span class='line'>  then
</span><span class='line'>    chown -R node "$GHOST_CONTENT"
</span><span class='line'>    exec su-exec node "$BASH_SOURCE" "$@"
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>if [[ "$*" == node*current/index.js* ]];
</span><span class='line'>  then
</span><span class='line'>    baseDir="$GHOST_INSTALL/content.orig"
</span><span class='line'>    for src in "$baseDir"/*/ "$baseDir"/themes/*;
</span><span class='line'>      do
</span><span class='line'>        src="${src%/}"
</span><span class='line'>        target="$GHOST_CONTENT/${src#$baseDir/}"
</span><span class='line'>        mkdir -p "$(dirname "$target")"
</span><span class='line'>        if [ ! -e "$target" ];
</span><span class='line'>          then
</span><span class='line'>            tar -cC "$(dirname "$src")" "$(basename "$src")" | tar -xC "$(dirname "$target")"
</span><span class='line'>        fi
</span><span class='line'>      done
</span><span class='line'>
</span><span class='line'>    knex-migrator-migrate --init --mgpath "$GHOST_INSTALL/current"
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>prod() {
</span><span class='line'>cat &gt; /var/lib/ghost/config.development.json &lt;&lt; EOF
</span><span class='line'>{
</span><span class='line'>  "url": "http://${SERVER_URL:-localhost}:${SERVER_PORT:-2368}",
</span><span class='line'>  "server": {
</span><span class='line'>    "port": ${SERVER_PORT:-2368},
</span><span class='line'>    "host": "0.0.0.0"
</span><span class='line'>  },
</span><span class='line'>  "database": {
</span><span class='line'>    "client": "sqlite3",
</span><span class='line'>    "connection": {
</span><span class='line'>      "filename": "/var/lib/ghost/content/data/ghost.db"
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  "mail": {
</span><span class='line'>    "transport": "SMTP",
</span><span class='line'>    "from": "${FROM_NAME:-MyBlog} &lt;${FROM_EMAIL:-ghost-blog@localhost}&gt;",
</span><span class='line'>    "options": {
</span><span class='line'>      "service": "Mailgun",
</span><span class='line'>      "host": "${SMTP_HOST:-localhost}",
</span><span class='line'>      "port": ${SMTP_PORT:-25},
</span><span class='line'>      "auth": {
</span><span class='line'>        "user": "${SMTP_AUTH_USERNAME:-root}",
</span><span class='line'>        "pass": "${SMTP_AUTH_PASSWORD:-password}"
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  "logging": {
</span><span class='line'>    "transports": [
</span><span class='line'>      "file",
</span><span class='line'>      "stdout"
</span><span class='line'>    ]
</span><span class='line'>  },
</span><span class='line'>  "process": "systemd",
</span><span class='line'>  "paths": {
</span><span class='line'>    "contentPath": "/var/lib/ghost/content"
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>EOF
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>dev() {
</span><span class='line'>cat &gt; /var/lib/ghost/config.development.json &lt;&lt; EOF
</span><span class='line'>{
</span><span class='line'>  "url": "http://${SERVER_URL:-localhost}:${SERVER_PORT:-2368}",
</span><span class='line'>  "server": {
</span><span class='line'>    "port": ${SERVER_PORT:-2368},
</span><span class='line'>    "host": "0.0.0.0"
</span><span class='line'>  },
</span><span class='line'>  "database": {
</span><span class='line'>    "client": "sqlite3",
</span><span class='line'>    "connection": {
</span><span class='line'>      "filename": "/var/lib/ghost/content/data/ghost.db"
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  "mail": {
</span><span class='line'>    "transport": "Direct"
</span><span class='line'>  },
</span><span class='line'>  "logging": {
</span><span class='line'>    "transports": [
</span><span class='line'>      "file",
</span><span class='line'>      "stdout"
</span><span class='line'>    ]
</span><span class='line'>  },
</span><span class='line'>  "process": "systemd",
</span><span class='line'>  "paths": {
</span><span class='line'>    "contentPath": "/var/lib/ghost/content"
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>EOF
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>test(){
</span><span class='line'>cat &gt; /var/lib/ghost/config.development.json &lt;&lt; EOF
</span><span class='line'>{
</span><span class='line'>  "url": "http://localhost:2368",
</span><span class='line'>  "server": {
</span><span class='line'>    "port": 2368,
</span><span class='line'>    "host": "0.0.0.0"
</span><span class='line'>  },
</span><span class='line'>  "database": {
</span><span class='line'>    "client": "sqlite3",
</span><span class='line'>    "connection": {
</span><span class='line'>      "filename": "/var/lib/ghost/content/data/ghost.db"
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  "mail": {
</span><span class='line'>    "transport": "Direct"
</span><span class='line'>  },
</span><span class='line'>  "logging": {
</span><span class='line'>    "transports": [
</span><span class='line'>      "file",
</span><span class='line'>      "stdout"
</span><span class='line'>    ]
</span><span class='line'>  },
</span><span class='line'>  "process": "systemd",
</span><span class='line'>  "paths": {
</span><span class='line'>    "contentPath": "/var/lib/ghost/content"
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>EOF
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>if  [ "${ENV_TYPE}" = "PROD" ]
</span><span class='line'>  then prod
</span><span class='line'>
</span><span class='line'>elif [ "${ENV_TYPE}" = "DEV" ]
</span><span class='line'>  then dev
</span><span class='line'>  else test
</span><span class='line'>
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>exec "$@"</span></code></pre></td></tr></table></div></figure>


<p>The entrypoint script takes a couple of environment variables, as you can see if they are not defined, defaults will be inherited.</p>

<p>Configurable Environment Variables:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  - ENV_TYPE=PROD
</span><span class='line'>  - SERVER_PORT=2368
</span><span class='line'>  - SERVER_URL=myblog.pistack.co.za
</span><span class='line'>  - FROM_NAME=MyName
</span><span class='line'>  - SMTP_HOST=mail.mydomain.co.za
</span><span class='line'>  - SMTP_PORT=587
</span><span class='line'>  - SMTP_AUTH_USERNAME=me@mydomain.co.za
</span><span class='line'>  - SMTP_AUTH_PASSWORD=secret</span></code></pre></td></tr></table></div></figure>


<h2>Building our Ghost Image</h2>

<p>I have a public image available if you dont want to build/push, but for building:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker build -t your-name/repo:tag</span></code></pre></td></tr></table></div></figure>


<h2>Deploy Ghost with Traefik</h2>

<p>Our <code>ghost-compose.yml</code> with traefik will look like the following, note that I mounted the source path to the container&rsquo;s path, the source path is running on a replicated glusterfs volume, which can be setup following <a href="https://blog.ruanbekker.com/blog/2018/10/23/setting-up-a-docker-swarm-cluster-on-3-raspberrypi-nodes/">this post</a></p>

<p>Also for this demonstration I was using the domain pistack.co.za, where you need to utilize the domain of your choice.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>version: "3.4"
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  ghost:
</span><span class='line'>    image: rbekker87/armhf-ghost:2.0.3
</span><span class='line'>    networks:
</span><span class='line'>      - appnet
</span><span class='line'>    volumes:
</span><span class='line'>      - type: bind
</span><span class='line'>        source: /mnt/volumes/myblog/content/data
</span><span class='line'>        target: /var/www/ghost/content/data
</span><span class='line'>    environment:
</span><span class='line'>      - ENV_TYPE=PROD
</span><span class='line'>      - SERVER_PORT=2368
</span><span class='line'>      - SERVER_URL=myblog.pistack.co.za
</span><span class='line'>      - FROM_NAME=MyName
</span><span class='line'>      - SMTP_HOST=mail.mydomain.co.za
</span><span class='line'>      - SMTP_PORT=587
</span><span class='line'>      - SMTP_AUTH_USERNAME=me@mydomain.co.za
</span><span class='line'>      - SMTP_AUTH_PASSWORD=secret
</span><span class='line'>    deploy:
</span><span class='line'>      replicas: 1
</span><span class='line'>      labels:
</span><span class='line'>        - "traefik.enable=true"
</span><span class='line'>        - "traefik.backend=ghost"
</span><span class='line'>        - "traefik.backend.loadbalancer.swarm=true"
</span><span class='line'>        - "traefik.docker.network=appnet"
</span><span class='line'>        - "traefik.port=2368"
</span><span class='line'>        - "traefik.frontend.passHostHeader=true"
</span><span class='line'>        - "traefik.frontend.rule=Host:myblog.pistack.co.za"
</span><span class='line'>      replicas: 3
</span><span class='line'>      update_config:
</span><span class='line'>        parallelism: 2
</span><span class='line'>        delay: 10s
</span><span class='line'>      restart_policy:
</span><span class='line'>        condition: on-failure
</span><span class='line'>      placement:
</span><span class='line'>        constraints: [node.role == worker]
</span><span class='line'>
</span><span class='line'>networks:
</span><span class='line'>  appnet:
</span><span class='line'>    external: true</span></code></pre></td></tr></table></div></figure>


<p>Deploy the stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker stack deploy -c ghost-compose.yml web</span></code></pre></td></tr></table></div></figure>


<p>Once the service is up, you will be able to reach your blog on the provided <code>traefik.frontend.rule</code>. If you don&rsquo;t have traefik running, you can follow <a href="https://blog.ruanbekker.com/blog/2018/10/23/build-a-traefik-proxy-image-for-your-raspberry-pi-on-docker-swarm/">this post</a> to get traefik up and running.</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://hub.docker.com/r/rbekker87/armhf-ghost/">https://hub.docker.com/r/rbekker87/armhf-ghost/</a></li>
<li><a href="https://github.com/ruanbekker/ghost-armhf">https://github.com/ruanbekker/ghost-armhf</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Traefik Proxy Image for Your Raspberry Pi on Docker Swarm]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/23/build-a-traefik-proxy-image-for-your-raspberry-pi-on-docker-swarm/"/>
    <updated>2018-10-23T17:31:02-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/23/build-a-traefik-proxy-image-for-your-raspberry-pi-on-docker-swarm</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/traefik-logo-routing.png" alt="" /></p>

<p>In this post we will setup a Docker Image for Traefik Proxy on the ARM Architecture, specifically on the Raspberry Pi, which we will deploy to our Raspberry Pi Docker Swarm.</p>

<p>Then we will build and push our image to a registry, then setup traefik and also setup a web application that sits behind our Traefik Proxy.</p>

<h2>What is Traefik</h2>

<p><a href="https://traefik.io/">Traefik</a> is a modern load balancer and reverse proxy built for micro services.</p>

<h2>Dockerfile</h2>

<p>We will be running Traefik on Alpine 3.8:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='dockerfile'><span class='line'><span class="k">FROM</span> rbekker87/armhf-alpine:3.8
</span><span class='line'>
</span><span class='line'><span class="k">ENV</span> TRAEFIK_VERSION 1.7.0-rc3
</span><span class='line'><span class="k">ENV</span> ARCH arm
</span><span class='line'>
</span><span class='line'><span class="k">ADD</span> https://github.com/containous/traefik/releases/download/v<span class="k">${</span><span class="nv">TRAEFIK_VERSION</span><span class="k">}</span>/traefik_linux-<span class="k">${</span><span class="nv">ARCH</span><span class="k">}</span> /traefik
</span><span class='line'>
</span><span class='line'><span class="k">RUN</span> apk add --no-cache ca-certificates <span class="err">\</span>
</span><span class='line'>    <span class="o">&amp;&amp;</span> chmod +x /traefik <span class="err">\</span>
</span><span class='line'>    <span class="o">&amp;&amp;</span> rm -rf /var/cache/apk/*
</span><span class='line'>
</span><span class='line'><span class="k">EXPOSE</span> <span class="m">80</span> <span class="m">8080</span> <span class="m">443</span>
</span><span class='line'>
</span><span class='line'><span class="k">ENTRYPOINT</span> <span class="o">[</span><span class="s2">&quot;/traefik&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Build and Push</h2>

<p>Build and Push your image to your registry of choice:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker build -t your-user/repo:tag .
</span><span class='line'><span class="nv">$ </span>docker push your-user/repo:tag
</span></code></pre></td></tr></table></div></figure>


<p>If you do not want to push to a registry, I have a public image available at <a href="https://hub.docker.com/r/rbekker87/armhf-traefik/">https://hub.docker.com/r/rbekker87/armhf-traefik/</a>, the image itself is <code>rbekker87/armhf-traefik:1.7.0-rc3</code></p>

<h2>Deploy Traefik to the Swarm</h2>

<p>From our <code>traefik-compose.yml</code>, you will notice that I have set that our network is external, so the network should exist prior to deploying the stack.</p>

<p>Let&rsquo;s create the overlay network:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker network create --driver overlay appnet
</span></code></pre></td></tr></table></div></figure>


<p>Below, the <code>traefik-compose.yml</code>, note that I&rsquo;m using pistack.co.za as my domain:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&quot;3.4&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">traefik</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rbekker87/armhf-traefik:1.7.0-rc3</span>
</span><span class='line'>    <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&quot;--api&quot;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&quot;--docker&quot;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&quot;--docker.swarmmode&quot;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&quot;--docker.domain=pistack.co.za&quot;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&quot;--docker.watch&quot;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&quot;--logLevel=DEBUG&quot;</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="s">&quot;--web&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">appnet</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/var/run/docker.sock:/var/run/docker.sock</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">80:80</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">8080:8080</span>
</span><span class='line'>    <span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">mode</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">global</span>
</span><span class='line'>      <span class="l-Scalar-Plain">restart_policy</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">condition</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">on-failure</span>
</span><span class='line'>      <span class="l-Scalar-Plain">placement</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">constraints</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">node.role == manager</span><span class="p-Indicator">]</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">appnet</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">external</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Deploy the stack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker stack deploy -c traefik-compose.yml proxy
</span></code></pre></td></tr></table></div></figure>


<p>List the stacks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker stack ls
</span><span class='line'>NAME                SERVICES
</span><span class='line'>proxy               1
</span></code></pre></td></tr></table></div></figure>


<p>Check if the services in your stack is running. Since our deploy mode was global, there will be a replica running on each node, and in my swarm I&rsquo;ve got 3 nodes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker stack services proxy
</span><span class='line'>ID                  NAME                MODE                REPLICAS            IMAGE                    PORTS
</span><span class='line'>16x31j7o0f0r        proxy_traefik       global              3/3                 rbekker87/armhf-traefik:1.7.0-rc3   *:80-&gt;80/tcp,*:8080-&gt;8080/tcp
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy a Web Service hooked up to Traefik</h2>

<p>Pre-Requirement:</p>

<p>To register subdomains on the fly, set you DNS for your domain to the following (im using pistack.co.za in this example):</p>

<ul>
<li><code>pistack.co.za</code> <code>A</code> <code>x.x.x.x</code></li>
<li><code>*.pistack.co.za</code> <code>A</code> <code>x.x.x.x</code></li>
</ul>


<p>Next, we will deploy we app that will be associated to our Traefik service domain, so we will inform Traefik that our web app fqdn and port that will be registered with the proxy.</p>

<p>Our <code>app-compose.yml</code> file for our webapp:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&quot;3.4&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">whoami</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rbekker87/golang-whoami:alpine-amrhf</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">appnet</span>
</span><span class='line'>    <span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">replicas</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span>
</span><span class='line'>      <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&quot;traefik.backend=whoami&quot;</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&quot;traefik.port=80&quot;</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&quot;traefik.frontend.rule=Host:whoami.pistack.co.za&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">update_config</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">parallelism</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>        <span class="l-Scalar-Plain">delay</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10s</span>
</span><span class='line'>      <span class="l-Scalar-Plain">restart_policy</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">condition</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">on-failure</span>
</span><span class='line'>      <span class="l-Scalar-Plain">placement</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">constraints</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">node.role == worker</span><span class="p-Indicator">]</span>
</span><span class='line'>    <span class="l-Scalar-Plain">healthcheck</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nc -vz 127.0.0.1 80 || exit 1</span>
</span><span class='line'>      <span class="l-Scalar-Plain">interval</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">60s</span>
</span><span class='line'>      <span class="l-Scalar-Plain">timeout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3s</span>
</span><span class='line'>      <span class="l-Scalar-Plain">retries</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">appnet</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">external</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above compose, you will notice that our traefik backend is set to our service name, our port is the port that the proxy will forward requests to the containers port, since the proxy and the whoami container is in the same network, they will be able to communicate with each other. Then we also have our frontend rule which will be the endpoint we will reach our application on.</p>

<p>Deploy the stack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker stack deploy -c whoami.yml web
</span><span class='line'>Creating service web_whoami
</span></code></pre></td></tr></table></div></figure>


<p>List the tasks running in our web stack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker stack services web
</span><span class='line'>ID                  NAME                MODE                REPLICAS            IMAGE                                  PORTS
</span><span class='line'>31ylfcfb7uyw        web_whoami          replicated          3/3                 rbekker87/golang-whoami:alpine-amrhf
</span></code></pre></td></tr></table></div></figure>


<p>Once all the replicas is running, move along to test the application</p>

<h2>Testing our Application:</h2>

<p>I have 3 replicas each running on their own container, so each container will respond with its own hostname:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker service ps web_whoami
</span><span class='line'>ID                  NAME                IMAGE                                  NODE                DESIRED STATE       CURRENT STATE            ERROR                              PORTS
</span><span class='line'>ivn8fgfosvgd        web_whoami.1        rbekker87/golang-whoami:alpine-amrhf   rpi-01              Running             Running <span class="m">26</span> minutes ago
</span><span class='line'>rze6u6z56aop        web_whoami.2        rbekker87/golang-whoami:alpine-amrhf   rpi-02              Running             Running <span class="m">26</span> minutes ago
</span><span class='line'>6fjua869r498        web_whoami.3        rbekker87/golang-whoami:alpine-amrhf   rpi-04              Running             Running <span class="m">23</span> minutes ago
</span></code></pre></td></tr></table></div></figure>


<p>Making our 1st GET request:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ $ </span>curl http://whoami.pistack.co.za/
</span><span class='line'>Hostname: 43f5f0a6682f
</span><span class='line'>IP: 127.0.0.1
</span><span class='line'>IP: 10.0.0.138
</span><span class='line'>IP: 10.0.0.218
</span><span class='line'>IP: 172.18.0.4
</span><span class='line'>GET / HTTP/1.1
</span><span class='line'>Host: whoami.pistack.co.za
</span><span class='line'>User-Agent: curl/7.38.0
</span><span class='line'>Accept: */*
</span><span class='line'>Accept-Encoding: gzip
</span><span class='line'>X-Forwarded-For: 165.73.96.95, 10.255.0.2
</span><span class='line'>X-Forwarded-Host: whoami.pistack.co.za
</span><span class='line'>X-Forwarded-Port: 80
</span><span class='line'>X-Forwarded-Proto: http
</span><span class='line'>X-Forwarded-Server: 31b37f9714d3
</span><span class='line'>X-Real-Ip: 10.255.0.2
</span></code></pre></td></tr></table></div></figure>


<p>Our 2nd GET Request:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl http://whoami.pistack.co.za/
</span><span class='line'>Hostname: d1c17a476414
</span><span class='line'>IP: 127.0.0.1
</span><span class='line'>IP: 10.0.0.138
</span><span class='line'>IP: 10.0.0.71
</span><span class='line'>IP: 172.19.0.5
</span><span class='line'>GET / HTTP/1.1
</span><span class='line'>Host: whoami.pistack.co.za
</span><span class='line'>User-Agent: curl/7.38.0
</span><span class='line'>Accept: */*
</span><span class='line'>Accept-Encoding: gzip
</span><span class='line'>X-Forwarded-For: 165.73.96.95, 10.255.0.2
</span><span class='line'>X-Forwarded-Host: whoami.pistack.co.za
</span><span class='line'>X-Forwarded-Port: 80
</span><span class='line'>X-Forwarded-Proto: http
</span><span class='line'>X-Forwarded-Server: 02b0ff6eab73
</span><span class='line'>X-Real-Ip: 10.255.0.2
</span></code></pre></td></tr></table></div></figure>


<p>And our 3rd GET Request:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl http://whoami.pistack.co.za/
</span><span class='line'>Hostname: 17c817a1813b
</span><span class='line'>IP: 172.18.0.6
</span><span class='line'>IP: 127.0.0.1
</span><span class='line'>IP: 10.0.0.138
</span><span class='line'>IP: 10.0.0.73
</span><span class='line'>GET / HTTP/1.1
</span><span class='line'>Host: whoami.pistack.co.za
</span><span class='line'>User-Agent: curl/7.38.0
</span><span class='line'>Accept: */*
</span><span class='line'>Accept-Encoding: gzip
</span><span class='line'>X-Forwarded-For: 165.73.96.95, 10.255.0.2
</span><span class='line'>X-Forwarded-Host: whoami.pistack.co.za
</span><span class='line'>X-Forwarded-Port: 80
</span><span class='line'>X-Forwarded-Proto: http
</span><span class='line'>X-Forwarded-Server: 31b37f9714d3
</span><span class='line'>X-Real-Ip: 10.255.0.2
</span></code></pre></td></tr></table></div></figure>


<p>Hope this was useful.</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://hub.docker.com/r/rbekker87/armhf-traefik/tags/">https://hub.docker.com/r/rbekker87/armhf-traefik/tags/</a></li>
<li><a href="https://github.com/containous/traefik/releases">https://github.com/containous/traefik/releases</a></li>
<li><a href="https://github.com/ruanbekker/traefik-armhf/blob/master/Dockerfile">https://github.com/ruanbekker/traefik-armhf/blob/master/Dockerfile</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Raspberry Pi Nginx Image With Caching on Alpine for Docker Swarm]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/23/building-a-raspberry-pi-nginx-image-with-caching-on-alpine-for-docker-swarm/"/>
    <updated>2018-10-23T17:00:02-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/23/building-a-raspberry-pi-nginx-image-with-caching-on-alpine-for-docker-swarm</id>
    <content type="html"><![CDATA[<p>In this guide, we will be creating a nginx reverse proxy with the ability to cache static content using a alpine image.</p>

<p>We will then push the image to gitlab&rsquo;s private registry, and then run the service on docker swarm.</p>

<h2>Create the backend service:</h2>

<p>We will upstream to our blog using ghost, which you can deploy using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker service create --name blog --network docknet rbekker87/armhf-ghost:2.0.3
</span></code></pre></td></tr></table></div></figure>


<h2>Current File Structure:</h2>

<p>Our file structure for the assets we need to build the reverse proxy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>find .
</span><span class='line'>./conf.d
</span><span class='line'>./conf.d/blog.conf
</span><span class='line'>./Dockerfile
</span><span class='line'>./nginx.conf
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>Dockerfile</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>FROM hypriot/rpi-alpine-scratch
</span><span class='line'>MAINTAINER Ruan Bekker
</span><span class='line'>
</span><span class='line'>RUN apk update <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    apk add nginx <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    rm -rf /etc/nginx/nginx.conf <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    chown -R nginx:nginx /var/lib/nginx <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    rm -rf /var/cache/apk/*
</span><span class='line'>
</span><span class='line'>ADD nginx.conf /etc/nginx/
</span><span class='line'>ADD conf.d/blog.conf /etc/nginx/conf.d/
</span><span class='line'>
</span><span class='line'>EXPOSE 80
</span><span class='line'>
</span><span class='line'>CMD <span class="o">[</span><span class="s2">&quot;nginx&quot;</span>, <span class="s2">&quot;-g&quot;</span>, <span class="s2">&quot;daemon off;&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>nginx.conf</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>user nginx<span class="p">;</span>
</span><span class='line'>worker_processes 1<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>events <span class="o">{</span>
</span><span class='line'>    worker_connections 1024<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>error_log  /var/log/nginx/nginx_error.log warn<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>http <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    sendfile        on<span class="p">;</span>
</span><span class='line'>    tcp_nodelay         on<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    gzip              on<span class="p">;</span>
</span><span class='line'>    gzip_http_version 1.0<span class="p">;</span>
</span><span class='line'>    gzip_proxied      any<span class="p">;</span>
</span><span class='line'>    gzip_min_length   500<span class="p">;</span>
</span><span class='line'>    gzip_disable      <span class="s2">&quot;MSIE [1-6]\.&quot;</span><span class="p">;</span>
</span><span class='line'>    gzip_types        text/plain text/xml text/css
</span><span class='line'>                      text/comma-separated-values
</span><span class='line'>                      text/javascript
</span><span class='line'>                      application/x-javascript
</span><span class='line'>                      application/atom+xml<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    log_format  main  <span class="s1">&#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span>
</span><span class='line'>                      <span class="s1">&#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span>
</span><span class='line'>                      <span class="s1">&#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    access_log  /var/log/nginx/access.log  main<span class="p">;</span>
</span><span class='line'>    error_log   /var/log/nginx/error.log<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    proxy_cache_path /var/cache/nginx/ <span class="nv">levels</span><span class="o">=</span>1:2 <span class="nv">keys_zone</span><span class="o">=</span>nginx_cache:5m <span class="nv">max_size</span><span class="o">=</span>128m <span class="nv">inactive</span><span class="o">=</span>60m<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    keepalive_timeout  60<span class="p">;</span>
</span><span class='line'>    server_tokens      off<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    include /etc/nginx/conf.d/*.conf<span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hostname resolution to our Ghost Blog Service: In our swarm we have a service called blog which is associated to the docknet network, so the dns resolution will resolve to the vip of the service. As seen in the figure below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker service ls
</span><span class='line'>ID                  NAME                MODE                REPLICAS            IMAGE                                                    PORTS
</span><span class='line'>nq42a6jfwx3d        blog                replicated          1/1                 rbekker87/armhf-ghost:2.0.3
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>conf.d/blog.conf</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>upstream ghost_blog <span class="o">{</span>
</span><span class='line'>    server blog:2368<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>server <span class="o">{</span>
</span><span class='line'>    listen 80<span class="p">;</span>
</span><span class='line'>    server_name blog.yourdomain.com<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    access_log  /var/log/nginx/blog_access.log  main<span class="p">;</span>
</span><span class='line'>    error_log   /var/log/nginx/blog_error.log<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    location / <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        proxy_cache                 nginx_cache<span class="p">;</span>
</span><span class='line'>        add_header                  X-Proxy-Cache <span class="nv">$upstream_cache_status</span><span class="p">;</span>
</span><span class='line'>        proxy_ignore_headers        Cache-Control<span class="p">;</span>
</span><span class='line'>        proxy_cache_valid any       10m<span class="p">;</span>
</span><span class='line'>        proxy_cache_use_stale       error timeout http_500 http_502 http_503 http_504<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        proxy_pass                  http://ghost_blog<span class="p">;</span>
</span><span class='line'>        proxy_redirect              off<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        proxy_set_header            Host <span class="nv">$host</span><span class="p">;</span>
</span><span class='line'>        proxy_set_header            X-Real-IP <span class="nv">$remote_addr</span><span class="p">;</span>
</span><span class='line'>        proxy_set_header            X-Forwarded-For <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class='line'>        proxy_set_header            X-Forwarded-Host <span class="nv">$server_name</span><span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Building the Image and Pushing to Gitlab</h2>

<p>I&rsquo;m using Gitlab in this demonstration, but you can use the registry of your choice:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker login registry.gitlab.com
</span><span class='line'><span class="nv">$ </span>docker build -t registry.gitlab.com/user/docker/arm-nginx:caching .
</span><span class='line'><span class="nv">$ </span>docker tag registry.gitlab.com/user/docker/arm-nginx:caching registry.gitlab.com/user/docker/arm-nginx:caching
</span><span class='line'><span class="nv">$ </span>docker push registry.gitlab.com/user/docker/arm-nginx:caching
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy</h2>

<p>Create the Nginx Reverse Proxy Service on Docker Swarm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker service create --name nginx_proxy <span class="se">\</span>
</span><span class='line'>--network docknet <span class="se">\</span>
</span><span class='line'>--publish 80:80 <span class="se">\</span>
</span><span class='line'>--replicas <span class="m">1</span> <span class="se">\</span>
</span><span class='line'>--with-registry-auth registry.gitlab.com/user/docker/arm-nginx:caching
</span></code></pre></td></tr></table></div></figure>


<p>Listing our Services:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker service ls
</span><span class='line'>ID                  NAME                MODE                REPLICAS            IMAGE                                                    PORTS
</span><span class='line'>je7x21l7egoh        nginx_proxy         replicated          1/1                 registry.gitlab.com/user/docker/arm-nginx:caching   *:80-&gt;80/tcp
</span><span class='line'>nq42a6jfwx3d        blog                replicated          1/1                 rbekker87/armhf-ghost:2.0.3
</span></code></pre></td></tr></table></div></figure>


<p>Once you access your proxy on port 80, you should see your Ghost Blog Homepage like below:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/ghost-blog-main.png" alt="" /></p>

<p>Have a look at the <a href="https://blog.ruanbekker.com/blog/2018/10/23/nginx-caching-performance-for-static-content-on-docker-swarm-with-raspberrypi/">benchmark performance</a> when using Nginx with caching enabled</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://hub.docker.com/r/rbekker87/armhf-ghost/">https://hub.docker.com/r/rbekker87/armhf-ghost/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx Caching Performance for Static Content on Docker Swarm With RaspberryPi]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/23/nginx-caching-performance-for-static-content-on-docker-swarm-with-raspberrypi/"/>
    <updated>2018-10-23T16:41:41-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/23/nginx-caching-performance-for-static-content-on-docker-swarm-with-raspberrypi</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/nginx-logo.png" alt="" /></p>

<h2>The Environment:</h2>

<p>I had my Ghost Blog listening on port 2368 and exposing port 80 on Docker so that the port translation directs port 80 traffic to port 2368 on Ghost directly.</p>

<p>Alex responded on my tweet and introduced Nginx Caching:</p>

<ul>
<li><a href="https://twitter.com/alexellisuk/status/882347698636165121">https://twitter.com/alexellisuk/status/882347698636165121</a></li>
</ul>


<p><img src="https://objects.ruanbekker.com/assets/images/tweet-alexellis-04072017.png" alt="" /></p>

<p>With this approach benchmarking results was not so great in terms of requests per second, and as this hostname will be only used for a blog, its a great idea to cache the content, this was achieved with the help from Alex&rsquo;s blog: <a href="https://blog.alexellis.io/save-and-boost-with-nginx/">blog.alexellis.io/save-and-boost-with-nginx/</a></p>

<h2>How Nginx was Configured:</h2>

<p>I have a <a href="http://rbkr.ddns.net/building-nginx-on-alpine-image-for-docker-swarm-with-caching-enabled-config/">blogpost</a> on how I setup Nginx on an Alpine Image, where I setup caching and proxy-pass the connections through to my ghost blog.</p>

<h2>Benchmarking: Before Nginx with Caching was Implemented:</h2>

<p>When doing an apache benchmark I got <b>9.31 requests per second</b> performing the test on my LAN:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ab -n <span class="m">500</span> -c <span class="m">10</span> http://rbkr.ddns.net/
</span><span class='line'>
</span><span class='line'>This is ApacheBench, Version 2.3 &lt;<span class="nv">$Revision</span>: <span class="m">1706008</span> <span class="nv">$&gt;</span>
</span><span class='line'>Copyright <span class="m">1996</span> Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
</span><span class='line'>Licensed to The Apache Software Foundation, http://www.apache.org/
</span><span class='line'>
</span><span class='line'>Benchmarking rbkr.ddns.net <span class="o">(</span>be patient<span class="o">)</span>
</span><span class='line'>Completed <span class="m">100</span> requests
</span><span class='line'>Completed <span class="m">200</span> requests
</span><span class='line'>Completed <span class="m">300</span> requests
</span><span class='line'>Completed <span class="m">400</span> requests
</span><span class='line'>Completed <span class="m">500</span> requests
</span><span class='line'>Finished <span class="m">500</span> requests
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Server Software:
</span><span class='line'>Server Hostname:        blog.pistack.co.za
</span><span class='line'>Server Port:            80
</span><span class='line'>
</span><span class='line'>Document Path:          /
</span><span class='line'>Document Length:        <span class="m">5470</span> bytes
</span><span class='line'>
</span><span class='line'>Concurrency Level:      10
</span><span class='line'>Time taken <span class="k">for</span> tests:   53.725 seconds
</span><span class='line'>Complete requests:      500
</span><span class='line'>Failed requests:        0
</span><span class='line'>Total transferred:      <span class="m">2863000</span> bytes
</span><span class='line'>HTML transferred:       <span class="m">2735000</span> bytes
</span><span class='line'>Requests per second:    9.31 <span class="o">[</span><span class="c">#/sec] (mean)</span>
</span><span class='line'>Time per request:       1074.501 <span class="o">[</span>ms<span class="o">]</span> <span class="o">(</span>mean<span class="o">)</span>
</span><span class='line'>Time per request:       107.450 <span class="o">[</span>ms<span class="o">]</span> <span class="o">(</span>mean, across all concurrent requests<span class="o">)</span>
</span><span class='line'>Transfer rate:          52.04 <span class="o">[</span>Kbytes/sec<span class="o">]</span> received
</span><span class='line'>
</span><span class='line'>Connection Times <span class="o">(</span>ms<span class="o">)</span>
</span><span class='line'>              min  mean<span class="o">[</span>+/-sd<span class="o">]</span> median   max
</span><span class='line'>Connect:        <span class="m">1</span>    <span class="m">2</span>   0.5      <span class="m">2</span>       6
</span><span class='line'>Processing:   <span class="m">685</span> <span class="m">1068</span>  68.7   <span class="m">1057</span>    1306
</span><span class='line'>Waiting:      <span class="m">683</span> <span class="m">1067</span>  68.6   <span class="m">1056</span>    1306
</span><span class='line'>Total:        <span class="m">689</span> <span class="m">1070</span>  68.7   <span class="m">1058</span>    1312
</span><span class='line'>
</span><span class='line'>Percentage of the requests served within a certain <span class="nb">time</span> <span class="o">(</span>ms<span class="o">)</span>
</span><span class='line'>  50%   1058
</span><span class='line'>  66%   1088
</span><span class='line'>  75%   1102
</span><span class='line'>  80%   1110
</span><span class='line'>  90%   1163
</span><span class='line'>  95%   1218
</span><span class='line'>  98%   1240
</span><span class='line'>  99%   1247
</span><span class='line'> 100%   <span class="m">1312</span> <span class="o">(</span>longest request<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Benchmarking: After Nginx Caching was Implemented:</h2>

<p>After Nginx Caching was Implemented, I got <b>1067.73 requests per second</b> using apache benchmark over a LAN connection! Absolutely awesome!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ab -n <span class="m">500</span> -c <span class="m">10</span> http://blog.pistack.co.za/
</span><span class='line'>This is ApacheBench, Version 2.3 &lt;<span class="nv">$Revision</span>: <span class="m">1706008</span> <span class="nv">$&gt;</span>
</span><span class='line'>Copyright <span class="m">1996</span> Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
</span><span class='line'>Licensed to The Apache Software Foundation, http://www.apache.org/
</span><span class='line'>
</span><span class='line'>Benchmarking blog.pistack.co.za <span class="o">(</span>be patient<span class="o">)</span>
</span><span class='line'>Completed <span class="m">100</span> requests
</span><span class='line'>Completed <span class="m">200</span> requests
</span><span class='line'>Completed <span class="m">300</span> requests
</span><span class='line'>Completed <span class="m">400</span> requests
</span><span class='line'>Completed <span class="m">500</span> requests
</span><span class='line'>Finished <span class="m">500</span> requests
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Server Software:        nginx
</span><span class='line'>Server Hostname:        blog.pistack.co.za
</span><span class='line'>Server Port:            80
</span><span class='line'>
</span><span class='line'>Document Path:          /
</span><span class='line'>Document Length:        <span class="m">5470</span> bytes
</span><span class='line'>
</span><span class='line'>Concurrency Level:      10
</span><span class='line'>Time taken <span class="k">for</span> tests:   0.468 seconds
</span><span class='line'>Complete requests:      500
</span><span class='line'>Failed requests:        0
</span><span class='line'>Total transferred:      <span class="m">2880500</span> bytes
</span><span class='line'>HTML transferred:       <span class="m">2735000</span> bytes
</span><span class='line'>Requests per second:    1067.73 <span class="o">[</span><span class="c">#/sec] (mean)</span>
</span><span class='line'>Time per request:       9.366 <span class="o">[</span>ms<span class="o">]</span> <span class="o">(</span>mean<span class="o">)</span>
</span><span class='line'>Time per request:       0.937 <span class="o">[</span>ms<span class="o">]</span> <span class="o">(</span>mean, across all concurrent requests<span class="o">)</span>
</span><span class='line'>Transfer rate:          6007.05 <span class="o">[</span>Kbytes/sec<span class="o">]</span> received
</span><span class='line'>
</span><span class='line'>Connection Times <span class="o">(</span>ms<span class="o">)</span>
</span><span class='line'>              min  mean<span class="o">[</span>+/-sd<span class="o">]</span> median   max
</span><span class='line'>Connect:        <span class="m">3</span>    <span class="m">4</span>   1.4      <span class="m">4</span>      10
</span><span class='line'>Processing:     <span class="m">3</span>    <span class="m">5</span>   1.6      <span class="m">4</span>      10
</span><span class='line'>Waiting:        <span class="m">2</span>    <span class="m">4</span>   1.6      <span class="m">4</span>      10
</span><span class='line'>Total:          <span class="m">6</span>    <span class="m">9</span>   2.7      <span class="m">8</span>      17
</span><span class='line'>
</span><span class='line'>Percentage of the requests served within a certain <span class="nb">time</span> <span class="o">(</span>ms<span class="o">)</span>
</span><span class='line'>  50%      8
</span><span class='line'>  66%      8
</span><span class='line'>  75%      9
</span><span class='line'>  80%      9
</span><span class='line'>  90%     15
</span><span class='line'>  95%     15
</span><span class='line'>  98%     15
</span><span class='line'>  99%     16
</span><span class='line'> 100%     <span class="m">17</span> <span class="o">(</span>longest request<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Resources:</h2>

<p>Thanks to Alex Ellis for the suggestion on this, and definitely have a look at <a href="https://blog.alexellis.io/tag/nginx/">blog.alexellis.io</a> as he has some epic content on his blog!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up a Docker Swarm Cluster on 3 RaspberryPi Nodes]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/23/setting-up-a-docker-swarm-cluster-on-3-raspberrypi-nodes/"/>
    <updated>2018-10-23T16:24:00-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/23/setting-up-a-docker-swarm-cluster-on-3-raspberrypi-nodes</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/rpi-docker-swarm.png" alt="" /></p>

<p>As the curious person that I am, I like to play around with new stuff that I stumble upon, and one of them was having a docker swarm cluster running on 3 Raspberry Pi&rsquo;s on my LAN.</p>

<p>The idea is to have 3 Raspberry Pi&rsquo;s (Model 3 B), a Manager Node, and 2 Worker Nodes, each with a 32 GB SanDisk SD Card, which I will also be part of a 3x Replicated GlusterFS Volume that will come in handy later for some data that needs persistent data.</p>

<p>More Inforamtion on: <a href="https://docs.docker.com/engine/swarm/">Docker Swarm</a></p>

<h2>Provision Raspbian on each RaspberryPi</h2>

<p>Grab the <a href="https://downloads.raspberrypi.org/raspbian_lite_latest">Latest Raspbian Lite ISO</a> and the following <a href="https://www.raspberrypi.org/documentation/installation/installing-images/">source</a> will help provisioning your RaspberryPi with Raspbian.</p>

<h2>Installing Docker on Raspberry PI</h2>

<p>On each node, run the following to install docker, and also add your user to the docker group, so that you can run docker commands with a normal user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt-get update <span class="o">&amp;&amp;</span> sudo apt-get upgrade -y
</span><span class='line'><span class="nv">$ </span>sudo apt-get remove docker.io
</span><span class='line'><span class="nv">$ </span>curl https://get.docker.com <span class="p">|</span> sudo bash
</span><span class='line'><span class="nv">$ </span>sudo usermod -aG docker pi
</span></code></pre></td></tr></table></div></figure>


<p>If you have an internal DNS Server, set an A Record for each node, or for simplicity, set your hosts file on each node so that your hostname for each node responds to it&rsquo;s provisioned IP Address:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /etc/hosts
</span><span class='line'>192.168.0.2   rpi-01
</span><span class='line'>192.168.0.3   rpi-02
</span><span class='line'>192.168.0.4   rpi-03
</span></code></pre></td></tr></table></div></figure>


<p>Also, to have passwordless SSH, from each node:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh-keygen -t rsa
</span><span class='line'><span class="nv">$ </span>ssh-copy-id rpi-01
</span><span class='line'><span class="nv">$ </span>ssh-copy-id rpi-02
</span><span class='line'><span class="nv">$ </span>ssh-copy-id rpi-03
</span></code></pre></td></tr></table></div></figure>


<h2>Initialize the Swarm</h2>

<p>Time to set up our swarm. As we have more than one network interface, we will need to setup our swarm by specifying the IP Address of our network interface that is accessible from our LAN:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ifconfig eth0
</span><span class='line'>eth0      Link encap:Ethernet  HWaddr a1:12:bc:d3:cd:4d
</span><span class='line'>          inet addr:192.168.0.2  Bcast:192.168.0.255  Mask:255.255.255.0
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have our IP Address, initialize the swarm on the manager node:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@rpi-01:~ <span class="nv">$ </span>docker swarm init --advertise-addr 192.168.0.2
</span><span class='line'>Swarm initialized: current node <span class="o">(</span>siqyf3yricsvjkzvej00a9b8h<span class="o">)</span> is now a manager.
</span><span class='line'>
</span><span class='line'>To add a worker to this swarm, run the following <span class="nb">command</span>:
</span><span class='line'>
</span><span class='line'>    docker swarm join <span class="se">\</span>
</span><span class='line'>    --token SWMTKN-1-0eith07xkcg93lzftuhjmxaxwfa6mbkjsmjzb3d3sx9cobc2zp-97s6xzdt27y2gk3kpm0cgo6y2 <span class="se">\</span>
</span><span class='line'>    192.168.0.2:2377
</span><span class='line'>
</span><span class='line'>To add a manager to this swarm, run <span class="s1">&#39;docker swarm join-token manager&#39;</span> and follow the instructions.
</span></code></pre></td></tr></table></div></figure>


<p>Then from <code>rpi-02</code> join the manager node of the swarm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@rpi-02:~ <span class="nv">$ </span>docker swarm join --token SWMTKN-1-0eith07xkcg93lzftuhjmxaxwfa6mbkjsmjzb3d3sx9cobc2zp-97s6xzdt27y2gk3kpm0cgo6y2 192.168.0.2:2377
</span><span class='line'>This node joined a swarm as a worker.
</span></code></pre></td></tr></table></div></figure>


<p>Then from <code>rpi-03</code> join the manager node of the swarm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@rpi-03:~ <span class="nv">$ </span>docker swarm join --token SWMTKN-1-0eith07xkcg93lzftuhjmxaxwfa6mbkjsmjzb3d3sx9cobc2zp-97s6xzdt27y2gk3kpm0cgo6y2 192.168.0.2:2377
</span><span class='line'>This node joined a swarm as a worker.
</span></code></pre></td></tr></table></div></figure>


<p>Then from the manager node: <code>rpi-01</code>, ensure that the nodes are checked in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@rpi-01:~ <span class="nv">$ </span>docker node ls
</span><span class='line'>ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS
</span><span class='line'>62s7gx1xdm2e3gp5qoca2ru0d     rpi-03              Ready               Active
</span><span class='line'>6fhyfy9yt761ar9pl84dkxck3 *   rpi-01              Ready               Active              Leader
</span><span class='line'>pg0nyy9l27mtfc13qnv9kywe7     rpi-02              Ready               Active
</span></code></pre></td></tr></table></div></figure>


<h2>Setting Up a Replicated GlusterFS Volume</h2>

<p>I have decided to setup a replicated glusterfs volume to have data replicated throughout the cluster if I would like to have some persistent data. From each node, install the GlusterFS Client and Server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt install glusterfs-server glusterfs-client -y <span class="o">&amp;&amp;</span> sudo systemctl <span class="nb">enable </span>glusterfs-server
</span></code></pre></td></tr></table></div></figure>


<p>Probe the other nodes from the manager node:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@rpi-01:~ <span class="nv">$ </span>sudo gluster peer probe rpi-02
</span><span class='line'>peer probe: success.
</span><span class='line'>
</span><span class='line'>pi@rpi-01:~ <span class="nv">$ </span>sudo gluster peer probe rpi-03
</span><span class='line'>peer probe: success.
</span></code></pre></td></tr></table></div></figure>


<p>Ensure that we can see all 3 nodes in our GlusterFS Pool:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@rpi-01:~ <span class="nv">$ </span>sudo gluster pool list
</span><span class='line'>UUID                                    Hostname        State
</span><span class='line'>778c7463-ba48-43de-9f97-83a960bba99e    rpi-02          Connected
</span><span class='line'>00a20a3c-5902-477e-a8fe-da35aa955b5e    rpi-03          Connected
</span><span class='line'>d82fb688-c50b-405d-a26f-9cb2922cce75    localhost       Connected
</span></code></pre></td></tr></table></div></figure>


<p>From each node, create the directory where GlusterFS will store the data for the bricks that we will specify when creating the volume:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@rpi-01:~ <span class="nv">$ </span>sudo mkdir -p /gluster/brick
</span><span class='line'>pi@rpi-02:~ <span class="nv">$ </span>sudo mkdir -p /gluster/brick
</span><span class='line'>pi@rpi-03:~ <span class="nv">$ </span>sudo mkdir -p /gluster/brick
</span></code></pre></td></tr></table></div></figure>


<p>Next, create a 3 Way Replicated GlusterFS Volume:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@rpi-01:~ <span class="nv">$ </span>sudo gluster volume create rpi-gfs replica <span class="m">3</span> <span class="se">\</span>
</span><span class='line'>rpi-01:/gluster/brick <span class="se">\</span>
</span><span class='line'>rpi-02:/gluster/brick <span class="se">\</span>
</span><span class='line'>rpi-03:/gluster/brick <span class="se">\</span>
</span><span class='line'>force
</span><span class='line'>
</span><span class='line'>volume create: rpi-gfs: success: please start the volume to access data
</span></code></pre></td></tr></table></div></figure>


<p>Start the GlusterFS Volume:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@rpi-01:~ <span class="nv">$ </span>sudo gluster volume start rpi-gfs
</span><span class='line'>volume start: rpi-gfs: success
</span></code></pre></td></tr></table></div></figure>


<p>Verify the GlusterFS Volume Info, and from the below output you will see that the volume is replicated 3 ways from the 3 bricks that we specified</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@rpi-01:~ <span class="nv">$ </span>sudo gluster volume info
</span><span class='line'>
</span><span class='line'>Volume Name: rpi-gfs
</span><span class='line'>Type: Replicate
</span><span class='line'>Volume ID: b879db15-63e9-44ca-ad76-eeaa3e247623
</span><span class='line'>Status: Started
</span><span class='line'>Number of Bricks: <span class="m">1</span> x <span class="nv">3</span> <span class="o">=</span> 3
</span><span class='line'>Transport-type: tcp
</span><span class='line'>Bricks:
</span><span class='line'>Brick1: rpi-01:/gluster/brick
</span><span class='line'>Brick2: rpi-02:/gluster/brick
</span><span class='line'>Brick3: rpi-03:/gluster/brick
</span></code></pre></td></tr></table></div></figure>


<p>Mount the GlusterFS Volume on each Node, first on <code>rpi-01</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@rpi-01:~ <span class="nv">$ </span>sudo umount /mnt
</span><span class='line'>pi@rpi-01:~ <span class="nv">$ </span>sudo <span class="nb">echo</span> <span class="s1">&#39;localhost:/rpi-gfs /mnt glusterfs defaults,_netdev,backupvolfile-server=localhost 0 0&#39;</span> &gt;&gt; /etc/fstab
</span><span class='line'>pi@rpi-01:~ <span class="nv">$ </span>sudo mount.glusterfs localhost:/rpi-gfs /mnt
</span><span class='line'>pi@rpi-01:~ <span class="nv">$ </span>sudo chown -R pi:docker /mnt
</span></code></pre></td></tr></table></div></figure>


<p>Then on <code>rpi-02</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@rpi-02:~ <span class="nv">$ </span>sudo umount /mnt
</span><span class='line'>pi@rpi-02:~ <span class="nv">$ </span>sudo <span class="nb">echo</span> <span class="s1">&#39;localhost:/rpi-gfs /mnt glusterfs defaults,_netdev,backupvolfile-server=localhost 0 0&#39;</span> &gt;&gt; /etc/fstab
</span><span class='line'>pi@rpi-02:~ <span class="nv">$ </span>sudo mount.glusterfs localhost:/rpi-gfs /mnt
</span><span class='line'>pi@rpi-02:~ <span class="nv">$ </span>sudo chown -R pi:docker /mnt
</span></code></pre></td></tr></table></div></figure>


<p>And lastly on <code>rpi-03</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@rpi-03:~ <span class="nv">$ </span>sudo umount /mnt
</span><span class='line'>pi@rpi-03:~ <span class="nv">$ </span>sudo <span class="nb">echo</span> <span class="s1">&#39;localhost:/rpi-gfs /mnt glusterfs defaults,_netdev,backupvolfile-server=localhost 0 0&#39;</span> &gt;&gt; /etc/fstab
</span><span class='line'>pi@rpi-03:~ <span class="nv">$ </span>sudo mount.glusterfs localhost:/rpi-gfs /mnt
</span><span class='line'>pi@rpi-03:~ <span class="nv">$ </span>sudo chown -R pi:docker /mnt
</span></code></pre></td></tr></table></div></figure>


<p>Then your GlusterFS Volume will be mounted on all the nodes, and when a file is written to the <code>/mnt/</code> partition, data will be replicated to all the nodes in the Cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@rpi-01:~ <span class="nv">$ </span>df -h
</span><span class='line'>Filesystem          Size  Used Avail Use% Mounted on
</span><span class='line'>/dev/root            30G  4.5G   24G  16% /
</span><span class='line'>localhost:/rpi-gfs   30G  4.5G   24G  16% /mnt
</span></code></pre></td></tr></table></div></figure>


<h2>Create a Web Service on Docker Swarm:</h2>

<p>Let&rsquo;s create a Web Service in our Swarm, called <code>web</code> and by specifying <code>1</code> replica and publishing the exposed port <code>80</code> to our containers port <code>80</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@rpi-01:~ <span class="nv">$ </span>docker service create --name web --replicas <span class="m">1</span> --publish 80:80 hypriot/rpi-busybox-httpd
</span><span class='line'>vsvyanuw6q6yf4jr52m5z7vr1
</span></code></pre></td></tr></table></div></figure>


<p>Verifying that our Service is Started and equals to the desired replica count:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@rpi-01:~ <span class="nv">$ </span>docker service ls
</span><span class='line'>ID                  NAME                MODE                REPLICAS            IMAGE                                                    PORTS
</span><span class='line'>vsvyanuw6q6y        web                 replicated          1/1                 hypriot/rpi-busybox-httpd:latest                         *:891-&gt;80/tcp
</span></code></pre></td></tr></table></div></figure>


<p>Inspecting the Service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@rpi-01:~ <span class="nv">$ </span>docker service inspect web
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;ID&quot;</span>: <span class="s2">&quot;vsvyanuw6q6yf4jr52m5z7vr1&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;Version&quot;</span>: <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;Index&quot;</span>: 2493
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="s2">&quot;CreatedAt&quot;</span>: <span class="s2">&quot;2017-07-16T21:20:00.017836646Z&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;UpdatedAt&quot;</span>: <span class="s2">&quot;2017-07-16T21:20:00.026359794Z&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;Spec&quot;</span>: <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;Name&quot;</span>: <span class="s2">&quot;web&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;Labels&quot;</span>: <span class="o">{}</span>,
</span><span class='line'>            <span class="s2">&quot;TaskTemplate&quot;</span>: <span class="o">{</span>
</span><span class='line'>                <span class="s2">&quot;ContainerSpec&quot;</span>: <span class="o">{</span>
</span><span class='line'>                    <span class="s2">&quot;Image&quot;</span>: <span class="s2">&quot;hypriot/rpi-busybox-httpd:latest@sha256:c00342f952d97628bf5dda457d3b409c37df687c859df82b9424f61264f54cd1&quot;</span>,
</span><span class='line'>                    <span class="s2">&quot;StopGracePeriod&quot;</span>: 10000000000,
</span><span class='line'>                    <span class="s2">&quot;DNSConfig&quot;</span>: <span class="o">{}</span>
</span><span class='line'>                <span class="o">}</span>,
</span><span class='line'>                <span class="s2">&quot;Resources&quot;</span>: <span class="o">{</span>
</span><span class='line'>                    <span class="s2">&quot;Limits&quot;</span>: <span class="o">{}</span>,
</span><span class='line'>                    <span class="s2">&quot;Reservations&quot;</span>: <span class="o">{}</span>
</span><span class='line'>                <span class="o">}</span>,
</span><span class='line'>                <span class="s2">&quot;RestartPolicy&quot;</span>: <span class="o">{</span>
</span><span class='line'>                    <span class="s2">&quot;Condition&quot;</span>: <span class="s2">&quot;any&quot;</span>,
</span><span class='line'>                    <span class="s2">&quot;Delay&quot;</span>: 5000000000,
</span><span class='line'>                    <span class="s2">&quot;MaxAttempts&quot;</span>: 0
</span><span class='line'>                <span class="o">}</span>,
</span><span class='line'>                <span class="s2">&quot;Placement&quot;</span>: <span class="o">{}</span>,
</span><span class='line'>                <span class="s2">&quot;ForceUpdate&quot;</span>: 0
</span><span class='line'>            <span class="o">}</span>,
</span><span class='line'>            <span class="s2">&quot;Mode&quot;</span>: <span class="o">{</span>
</span><span class='line'>                <span class="s2">&quot;Replicated&quot;</span>: <span class="o">{</span>
</span><span class='line'>                    <span class="s2">&quot;Replicas&quot;</span>: 1
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>,
</span><span class='line'>            <span class="s2">&quot;UpdateConfig&quot;</span>: <span class="o">{</span>
</span><span class='line'>                <span class="s2">&quot;Parallelism&quot;</span>: 1,
</span><span class='line'>                <span class="s2">&quot;FailureAction&quot;</span>: <span class="s2">&quot;pause&quot;</span>,
</span><span class='line'>                <span class="s2">&quot;Monitor&quot;</span>: 5000000000,
</span><span class='line'>                <span class="s2">&quot;MaxFailureRatio&quot;</span>: 0,
</span><span class='line'>                <span class="s2">&quot;Order&quot;</span>: <span class="s2">&quot;stop-first&quot;</span>
</span><span class='line'>            <span class="o">}</span>,
</span><span class='line'>            <span class="s2">&quot;RollbackConfig&quot;</span>: <span class="o">{</span>
</span><span class='line'>                <span class="s2">&quot;Parallelism&quot;</span>: 1,
</span><span class='line'>                <span class="s2">&quot;FailureAction&quot;</span>: <span class="s2">&quot;pause&quot;</span>,
</span><span class='line'>                <span class="s2">&quot;Monitor&quot;</span>: 5000000000,
</span><span class='line'>                <span class="s2">&quot;MaxFailureRatio&quot;</span>: 0,
</span><span class='line'>                <span class="s2">&quot;Order&quot;</span>: <span class="s2">&quot;stop-first&quot;</span>
</span><span class='line'>            <span class="o">}</span>,
</span><span class='line'>            <span class="s2">&quot;EndpointSpec&quot;</span>: <span class="o">{</span>
</span><span class='line'>                <span class="s2">&quot;Mode&quot;</span>: <span class="s2">&quot;vip&quot;</span>,
</span><span class='line'>                <span class="s2">&quot;Ports&quot;</span>: <span class="o">[</span>
</span><span class='line'>                    <span class="o">{</span>
</span><span class='line'>                        <span class="s2">&quot;Protocol&quot;</span>: <span class="s2">&quot;tcp&quot;</span>,
</span><span class='line'>                        <span class="s2">&quot;TargetPort&quot;</span>: 80,
</span><span class='line'>                        <span class="s2">&quot;PublishedPort&quot;</span>: 80,
</span><span class='line'>                        <span class="s2">&quot;PublishMode&quot;</span>: <span class="s2">&quot;ingress&quot;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">]</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="s2">&quot;Endpoint&quot;</span>: <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;Spec&quot;</span>: <span class="o">{</span>
</span><span class='line'>                <span class="s2">&quot;Mode&quot;</span>: <span class="s2">&quot;vip&quot;</span>,
</span><span class='line'>                <span class="s2">&quot;Ports&quot;</span>: <span class="o">[</span>
</span><span class='line'>                    <span class="o">{</span>
</span><span class='line'>                        <span class="s2">&quot;Protocol&quot;</span>: <span class="s2">&quot;tcp&quot;</span>,
</span><span class='line'>                        <span class="s2">&quot;TargetPort&quot;</span>: 80,
</span><span class='line'>                        <span class="s2">&quot;PublishedPort&quot;</span>: 80,
</span><span class='line'>                        <span class="s2">&quot;PublishMode&quot;</span>: <span class="s2">&quot;ingress&quot;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">]</span>
</span><span class='line'>            <span class="o">}</span>,
</span><span class='line'>            <span class="s2">&quot;Ports&quot;</span>: <span class="o">[</span>
</span><span class='line'>                <span class="o">{</span>
</span><span class='line'>                    <span class="s2">&quot;Protocol&quot;</span>: <span class="s2">&quot;tcp&quot;</span>,
</span><span class='line'>                    <span class="s2">&quot;TargetPort&quot;</span>: 80,
</span><span class='line'>                    <span class="s2">&quot;PublishedPort&quot;</span>: 80,
</span><span class='line'>                    <span class="s2">&quot;PublishMode&quot;</span>: <span class="s2">&quot;ingress&quot;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">]</span>,
</span><span class='line'>            <span class="s2">&quot;VirtualIPs&quot;</span>: <span class="o">[</span>
</span><span class='line'>                <span class="o">{</span>
</span><span class='line'>                    <span class="s2">&quot;NetworkID&quot;</span>: <span class="s2">&quot;zjerz0xsw39icnh24enja4cgk&quot;</span>,
</span><span class='line'>                    <span class="s2">&quot;Addr&quot;</span>: <span class="s2">&quot;10.255.0.13/16&quot;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">]</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Docker Swarm&rsquo;s Routing mesh takes care of the internal routing, so requests will respond even if the container is not running on the node that you are making the request against.</p>

<p>With that said, verifying on which node our service is running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@rpi-01:~ <span class="nv">$ </span>docker service ps web
</span><span class='line'>ID                  NAME                IMAGE                              NODE                DESIRED STATE       CURRENT STATE           ERROR               PORTS
</span><span class='line'>sd67cd18s5m0        web.1               hypriot/rpi-busybox-httpd:latest   rpi-02              Running             Running <span class="m">2</span> minutes ago
</span></code></pre></td></tr></table></div></figure>


<p>When we make a HTTP Request to one of these Nodes IP Addresses, our request will be responded with this awesome static page:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/armed-with-hypriot.jpg" alt="" /></p>

<p>We can see we only have one container in our swarm, let&rsquo;s scale that up to <code>3</code> containers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@rpi-01:~ <span class="nv">$ </span>docker service scale <span class="nv">web01</span><span class="o">=</span>3
</span><span class='line'>web01 scaled to 3
</span></code></pre></td></tr></table></div></figure>


<p>Now that the service is scaled to 3 containers, requests will be handled using the round-robin algorithm. To ensured that the service scaled, we will see that we will have 3 replicas:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@rpi-01:~ <span class="nv">$ </span>docker service ls
</span><span class='line'>ID                  NAME                MODE                REPLICAS            IMAGE                                                    PORTS
</span><span class='line'>vsvyanuw6q6y        web                 replicated          3/3                 hypriot/rpi-busybox-httpd:latest                         *:891-&gt;80/tcp
</span></code></pre></td></tr></table></div></figure>


<p>Verifying where these containers are running on:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@rpi-01:~ <span class="nv">$ </span>docker service ps web01
</span><span class='line'>ID                  NAME                IMAGE                              NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS
</span><span class='line'>sd67cd18s5m0        web.1               hypriot/rpi-busybox-httpd:latest   rpi-02              Running             Running <span class="m">2</span> minutes ago
</span><span class='line'>ope3ya7hh9j4        web.2               hypriot/rpi-busybox-httpd:latest   rpi-03              Running             Running <span class="m">30</span> seconds ago
</span><span class='line'>07m1ww7ptxro        web.3               hypriot/rpi-busybox-httpd:latest   rpi-01              Running             Running <span class="m">28</span> seconds ago
</span></code></pre></td></tr></table></div></figure>


<p>Lastly, removing the service from our swarm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@rpi-01:~ <span class="nv">$ </span>docker service rm web01
</span><span class='line'>web01
</span></code></pre></td></tr></table></div></figure>


<h2>Massive Thanks:</h2>

<p>a Massive thanks to <a href="https://twitter.com/alexellisuk">Alex Ellis</a> for mentioning me on one of his blogposts:</p>

<ul>
<li><a href="https://blog.alexellis.io/blog-community-inspiration/">https://blog.alexellis.io/blog-community-inspiration/</a></li>
</ul>


<p><img src="https://objects.ruanbekker.com/assets/images/tweet-alexellis-21072017.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My PiStack Blog Proudly Hosted on My RaspberryPi Swarm Cluster]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/23/my-pistack-blog-proudly-hosted-on-my-raspberrypi-swarm-cluster/"/>
    <updated>2018-10-23T16:11:19-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/23/my-pistack-blog-proudly-hosted-on-my-raspberrypi-swarm-cluster</id>
    <content type="html"><![CDATA[<p>This is a repost of my <a href="http://blog.pistack.co.za/my-blog-proudly-hosted-on-my-raspberrypi-cluster/">first blogpost which is hosted on my Raspberry Pi Cluster (04 July 2017)</a>, that runs Docker Swarm and is served from my Home in South Africa, and can be accessed on <a href="http://blog.pistack.co.za">http://blog.pistack.co.za</a></p>

<h2>Just Look at It!</h2>

<ul>
<li>3x Raspberry Pi 3 Model B</li>
<li>Quad Core 1.2GHz Broadcom BCM2837 64bit CPU</li>
<li>1GB RAM</li>
<li>BCM43438 wireless LAN and Bluetooth Low Energy (BLE) on board</li>
<li>3x 32GB Sandisk SD Cards (Replicated GlusterFS Volume for <code>/gluster</code> partition)</li>
<li>Upgraded switched Micro USB power source up to 2.5A</li>
</ul>


<p><img src="https://objects.ruanbekker.com/assets/images/rpi-cluster.jpg" alt="" /></p>

<h2>My Setup:</h2>

<p>I have 3x <a href="https://www.raspberrypi.org/products/raspberry-pi-3-model-b/">Raspberrypi 3&rsquo;s</a>, each with a <a href="https://www.sandisk.com/home/memory-cards/sd-cards/ultra-sd">32GB SanDisk SD Card</a>, formatted with <a href="https://www.raspberrypi.org/downloads/raspbian/">Raspbian Jessie Lite</a>, powered by a <a href="https://www.pishop.co.za/store/rpi-power/anid%C3%A9es-6-port-50w-high-power-usb-hub-25aport">6 Port USB Hub</a> and networked with a <a href="https://m.takealot.com/#product_1?id=35258721">Totolink 5 Port Gigabit Switch</a>, but note that: <em>the Rpi does not support Gigabit Networking</em></p>

<p>For persistent storage I have setup a Replicated GlusterFS Volume across the 3 nodes.</p>

<p>More details on how I did the setup, can be found from the <a href="https://blog.ruanbekker.com/blog/2018/10/23/setting-up-a-docker-swarm-cluster-on-3-raspberrypi-nodes/">Setting Up a Docker Swarm Cluster on RaspberryPi Nodes</a> blog post.</p>

<h2>Thanks!</h2>

<p>Thanks for the visit, I will blog about awesome Docker and RaspberryPi related stuff as my mind stumble along awesome ideas :)</p>

<p><p>
<script id="mNCC" language="javascript">
    medianet_width = &ldquo;728&rdquo;;
    medianet_height = &ldquo;90&rdquo;;
    medianet_crid = &ldquo;346651356&rdquo;;
    medianet_versionId = &ldquo;3111299&rdquo;;
  </script>
<script src="//contextual.media.net/nmedianet.js?cid=8CUD78FSV"></script>
<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capturing 54 Million Passwords With a Docker SSH Honeypot]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/11/capturing-54-million-passwords-with-a-docker-ssh-honeypot/"/>
    <updated>2018-10-11T16:38:52-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/11/capturing-54-million-passwords-with-a-docker-ssh-honeypot</id>
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/rbekker/image/upload/v1539291851/ssh-docker-honeypot_eyhzc7.png" alt="" /></p>

<p>The last couple of days I picked up on my ELK Stack a couple thousands of SSH Brute Force Attacks, so I decided I will just revisit my SSH Server configuration, and change my SSH Port to something else for the interim. The dashboard that showed me the results at that point in time:</p>

<p><img src="https://res.cloudinary.com/rbekker/image/upload/v1539292443/kibana-failed-ssh-auth_udkxkl.png" alt="" /></p>

<p>Then I decided I actually would like to setup a SSH Honeypot to listen on Port 22 and change my SSH Server to listen on 222 and capture their IP Addresses, Usernames and Passwords that they are trying to use and dump it all in a file so that I can build up my own password dictionary :D</p>

<h2>SSH Configuration:</h2>

<p>Changing the SSH Port:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo vim /etc/ssh/sshd_config
</span></code></pre></td></tr></table></div></figure>


<p>Change the port to 222:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Port 222
</span></code></pre></td></tr></table></div></figure>


<p>Restart the SSH Server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo /etc/init.d/ssh restart
</span></code></pre></td></tr></table></div></figure>


<p>Verify that the SSH Server is running on the new port:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo netstat -tulpn <span class="p">|</span> grep sshd
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:222            0.0.0.0:*               LISTEN      28838/sshd
</span></code></pre></td></tr></table></div></figure>


<h2>Docker SSH Honeypot:</h2>

<p>Thanks to <a href="https://github.com/random-robbie/docker-ssh-honey">random-robbie</a>, as he had everything I was looking for on Github.</p>

<p>Setup the SSH Honeypot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone https://github.com/random-robbie/docker-ssh-honey
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>docker-ssh-honey/
</span><span class='line'><span class="nv">$ </span>docker build . -t <span class="nb">local</span>:ssh-honepot
</span><span class='line'><span class="nv">$ </span>docker run -itd --name ssh-honeypot -p 22:22 <span class="nb">local</span>:ssh-honepot
</span></code></pre></td></tr></table></div></figure>


<p>Once people attempt to ssh, you will get the output to stdout:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker logs -f <span class="k">$(</span>docker ps -f <span class="nv">name</span><span class="o">=</span>ssh-honeypot -q<span class="k">)</span> <span class="p">|</span> grep -v <span class="s1">&#39;Error exchanging&#39;</span> <span class="p">|</span> head -10
</span><span class='line'><span class="o">[</span>Tue Jul <span class="m">31</span> 01:13:41 2018<span class="o">]</span> ssh-honeypot 0.0.8 by Daniel Roberson started on port 22. PID 5
</span><span class='line'><span class="o">[</span>Tue Jul <span class="m">31</span> 01:19:49 2018<span class="o">]</span> 1xx.1xx.1xx.1x gambaa gambaa
</span><span class='line'><span class="o">[</span>Tue Jul <span class="m">31</span> 01:23:26 2018<span class="o">]</span> 1xx.9x.1xx.1xx root toor
</span><span class='line'><span class="o">[</span>Tue Jul <span class="m">31</span> 01:25:57 2018<span class="o">]</span> 1xx.2xx.1xx.1xx root Passw0rd1234
</span><span class='line'><span class="o">[</span>Tue Jul <span class="m">31</span> 01:26:00 2018<span class="o">]</span> 1xx.2xx.1xx.1xx root Qwer1234
</span><span class='line'><span class="o">[</span>Tue Jul <span class="m">31</span> 01:26:00 2018<span class="o">]</span> 1xx.2xx.1xx.1xx root Abcd1234
</span><span class='line'><span class="o">[</span>Tue Jul <span class="m">31</span> 01:26:08 2018<span class="o">]</span> 1xx.2xx.1xx.1xx root ubuntu
</span><span class='line'><span class="o">[</span>Tue Jul <span class="m">31</span> 01:26:09 2018<span class="o">]</span> 1xx.2xx.1xx.1xx root PassWord
</span><span class='line'><span class="o">[</span>Tue Jul <span class="m">31</span> 01:26:10 2018<span class="o">]</span> 1xx.2xx.1xx.1xx root password321
</span><span class='line'><span class="o">[</span>Tue Jul <span class="m">31</span> 01:26:15 2018<span class="o">]</span> 1xx.2xx.1xx.1xx root zxcvbnm
</span></code></pre></td></tr></table></div></figure>


<h2>Saving results to disk:</h2>

<p>Redirecting the output to a log file, running in the foreground as a screen session:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>screen -S honeypot
</span><span class='line'><span class="nv">$ </span>docker logs -f f6cb <span class="p">|</span> grep -v <span class="s1">&#39;Error exchanging&#39;</span> <span class="p">|</span> awk <span class="s1">&#39;{print $6, $7, $8}&#39;</span> &gt;&gt; /var/log/ssh-honeypot.log
</span></code></pre></td></tr></table></div></figure>


<p>Detach from your screen session:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Ctrl + a<span class="p">;</span> d
</span></code></pre></td></tr></table></div></figure>


<p>Checking out the logs</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>head -3 /var/log/ssh-honeypot.log
</span><span class='line'>2.7.2x.1x root jiefan
</span><span class='line'>4x.7.2x.1x root HowAreYou
</span><span class='line'>4x.7.2x.1x root Sqladmin
</span></code></pre></td></tr></table></div></figure>


<p>Leaving this running for a couple of months, and I have a massive password database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wc -l /var/log/honeypot/ssh.log
</span><span class='line'><span class="m">54184260</span> /var/log/honeypot/ssh.log
</span></code></pre></td></tr></table></div></figure>


<p>That is correct, 54 million password attempts. 5372 Unique IPs, 4082 Unique Usernames, 88829 Unique Passwords.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Splitting Query String Parameters From a URL in Python]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/04/splitting-query-string-parameters-from-a-url-in-python/"/>
    <updated>2018-10-04T09:58:46-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/04/splitting-query-string-parameters-from-a-url-in-python</id>
    <content type="html"><![CDATA[<p>I&rsquo;m working on capturing some data that I want to use for analytics, and a big part of that is capturing the query string parameters that is in the request URL.</p>

<p>So essentially I would like to break the data up into key value pairs, using Python and the urllib module, which will then pushed into a database like MongoDB or DynamoDB.</p>

<h2>Our URL:</h2>

<p>So the URL&rsquo;s that we will have, will more or less look like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>https://surveys.mydomain.com/one/abc123?companyId<span class="o">=</span>178231<span class="p">&amp;</span><span class="nv">group_name</span><span class="o">=</span>abc_12<span class="p">&amp;</span><span class="nv">utm_source</span><span class="o">=</span>survey<span class="p">&amp;</span><span class="nv">utm_medium</span><span class="o">=</span>email<span class="p">&amp;</span><span class="nv">utm_campaign</span><span class="o">=</span>survey-top-1
</span></code></pre></td></tr></table></div></figure>


<p>So we have a couple of utm parameters, company id, group name etc, which will be use for analysis</p>

<h2>Python to Capture the Parameters:</h2>

<p>Using Python, it&rsquo;s quite easy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">urllib</span> <span class="kn">import</span> <span class="n">parse</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&#39;https://surveys.mydomain.com/one/abc123?companyId=178231&amp;group_name=abc_12&amp;utm_source=survey&amp;utm_medium=email&amp;utm_campaign=survey-top-1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">parse</span><span class="o">.</span><span class="n">urlsplit</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'><span class="n">SplitResult</span><span class="p">(</span><span class="n">scheme</span><span class="o">=</span><span class="s">&#39;https&#39;</span><span class="p">,</span> <span class="n">netloc</span><span class="o">=</span><span class="s">&#39;surveys.mydomain.com&#39;</span><span class="p">,</span> <span class="n">path</span><span class="o">=</span><span class="s">&#39;/one/abc123&#39;</span><span class="p">,</span> <span class="n">query</span><span class="o">=</span><span class="s">&#39;companyId=178231&amp;group_name=abc_12&amp;utm_source=survey&amp;utm_medium=email&amp;utm_campaign=survey-top-1&#39;</span><span class="p">,</span> <span class="n">fragment</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">parse</span><span class="o">.</span><span class="n">parse_qsl</span><span class="p">(</span><span class="n">parse</span><span class="o">.</span><span class="n">urlsplit</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'><span class="p">[(</span><span class="s">&#39;companyId&#39;</span><span class="p">,</span> <span class="s">&#39;178231&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;group_name&#39;</span><span class="p">,</span> <span class="s">&#39;abc_12&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;utm_source&#39;</span><span class="p">,</span> <span class="s">&#39;survey&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;utm_medium&#39;</span><span class="p">,</span> <span class="s">&#39;email&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;utm_campaign&#39;</span><span class="p">,</span> <span class="s">&#39;survey-top-1&#39;</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now to get our data in a dictionary, we can just convert it using the <code>dict()</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">dict</span><span class="p">(</span><span class="n">parse</span><span class="o">.</span><span class="n">parse_qsl</span><span class="p">(</span><span class="n">parse</span><span class="o">.</span><span class="n">urlsplit</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">query</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;companyId&#39;</span><span class="p">:</span> <span class="s">&#39;178231&#39;</span><span class="p">,</span> <span class="s">&#39;group_name&#39;</span><span class="p">:</span> <span class="s">&#39;abc_12&#39;</span><span class="p">,</span> <span class="s">&#39;utm_source&#39;</span><span class="p">:</span> <span class="s">&#39;survey&#39;</span><span class="p">,</span> <span class="s">&#39;utm_medium&#39;</span><span class="p">:</span> <span class="s">&#39;email&#39;</span><span class="p">,</span> <span class="s">&#39;utm_campaign&#39;</span><span class="p">:</span> <span class="s">&#39;survey-top-1&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This data can then be used to write to a database, which can then be used for analysis.</p>

<h2>Resources:</h2>

<ul>
<li><a href="http://blog.rafflecopter.com/2014/04/utm-parameters-best-practices/">http://blog.rafflecopter.com/2014/04/utm-parameters-best-practices/</a></li>
<li><a href="https://stackoverflow.com/questions/21584545/url-query-parameters-to-dict-python">https://stackoverflow.com/questions/21584545/url-query-parameters-to-dict-python</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the GeoIP Processor Plugin With Elasticsearch to Enrich Your Location Based Data]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/09/12/using-the-geoip-processor-plugin-with-elasticsearch-to-enrich-your-location-based-data/"/>
    <updated>2018-09-12T10:14:30-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/09/12/using-the-geoip-processor-plugin-with-elasticsearch-to-enrich-your-location-based-data</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/kibana-map-plot-1.png" alt="" /></p>

<p>So we have documents ingested into Elasticsearch, and one of the fields has a IP Address, but at this moment it&rsquo;s just an IP Address, the goal is to have more information from this IP Address, so that we can use Kibana&rsquo;s Coordinate Maps to map our data on a Geographical Map.</p>

<p>In order to do this we need to make use of the GeoIP Ingest Processor Plugin, which adds information about the grographical location of the IP Address that it receives. This information is retrieved from the <a href="http://dev.maxmind.com/geoip/geoip2/geolite2/">Maxmind Datases</a>.</p>

<p>So when we pass our IP Address through the processor, for example one of Github&rsquo;s IP Addresses: <code>192.30.253.113</code> we will in return get:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"_source" : {
</span><span class='line'>  "geoip" : {
</span><span class='line'>    "continent_name" : "North America",
</span><span class='line'>    "city_name" : "San Francisco",
</span><span class='line'>    "country_iso_code" : "US",
</span><span class='line'>    "region_name" : "California",
</span><span class='line'>    "location" : {
</span><span class='line'>      "lon" : -122.3933,
</span><span class='line'>      "lat" : 37.7697
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  "ip" : "192.30.253.113",
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Installation</h2>

<p>First we need to install the <code>ingest-geoip</code> plugin. Change to your elasticsearch home path:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /usr/share/elasticsearch/
</span><span class='line'>$ sudo bin/elasticsearch-plugin install ingest-geoip</span></code></pre></td></tr></table></div></figure>


<h2>Setting up the Pipeline</h2>

<p>Now that we&rsquo;ve installed the plugin, lets setup our Pipeline where we will reference our GeoIP Processor:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H 'Content-Type: application/json' -XPUT 'http://localhost:9200/_ingest/pipeline/geoip' -d '
</span><span class='line'>{
</span><span class='line'>  "description" : "Add GeoIP Info",
</span><span class='line'>  "processors" : [
</span><span class='line'>    {
</span><span class='line'>      "geoip" : {
</span><span class='line'>        "field" : "ip"
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>  ]
</span><span class='line'>}
</span><span class='line'>'</span></code></pre></td></tr></table></div></figure>


<h2>Ingest and Test</h2>

<p>Let&rsquo;s create the Index and apply the mapping:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -H <span class="s1">&#39;Content-Type: application/json&#39;</span> -XPUT <span class="s1">&#39;http://localhost:9200/my_index&#39;</span> -d <span class="s1">&#39;</span>
</span><span class='line'><span class="s1">{</span>
</span><span class='line'><span class="s1">  &quot;mappings&quot;: {</span>
</span><span class='line'><span class="s1">    &quot;doc&quot;: {</span>
</span><span class='line'><span class="s1">      &quot;properties&quot;: {</span>
</span><span class='line'><span class="s1">        &quot;geoip&quot;: {</span>
</span><span class='line'><span class="s1">          &quot;properties&quot;: {</span>
</span><span class='line'><span class="s1">            &quot;location&quot;: {</span>
</span><span class='line'><span class="s1">              &quot;type&quot;: &quot;geo_point&quot;</span>
</span><span class='line'><span class="s1">            }</span>
</span><span class='line'><span class="s1">          }</span>
</span><span class='line'><span class="s1">        }</span>
</span><span class='line'><span class="s1">      }</span>
</span><span class='line'><span class="s1">    }</span>
</span><span class='line'><span class="s1">  }</span>
</span><span class='line'><span class="s1">}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the Document and specify the pipeline name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -H <span class="s1">&#39;Content-Type: application/json&#39;</span> -XPOST <span class="s1">&#39;http://localhost:9200/my_index/metrics/?pipeline=geoip&#39;</span> -d <span class="s1">&#39;</span>
</span><span class='line'><span class="s1">{</span>
</span><span class='line'><span class="s1">  &quot;identifier&quot;: &quot;github&quot;, </span>
</span><span class='line'><span class="s1">  &quot;service&quot;: &quot;test&quot;, </span>
</span><span class='line'><span class="s1">  &quot;os&quot;: &quot;linux&quot;, </span>
</span><span class='line'><span class="s1">  &quot;ip&quot;: &quot;192.30.253.113&quot;</span>
</span><span class='line'><span class="s1">}</span>
</span><span class='line'><span class="s1">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once the document is ingested, have a look at the document:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XGET <span class="s1">&#39;http://localhost:9200/my_index/_search?q=identifier:github&amp;pretty&#39;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;took&quot;</span> : 4,
</span><span class='line'>  <span class="s2">&quot;timed_out&quot;</span> : <span class="nb">false</span>,
</span><span class='line'>  <span class="s2">&quot;_shards&quot;</span> : <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;total&quot;</span> : 5,
</span><span class='line'>    <span class="s2">&quot;successful&quot;</span> : 5,
</span><span class='line'>    <span class="s2">&quot;skipped&quot;</span> : 0,
</span><span class='line'>    <span class="s2">&quot;failed&quot;</span> : 0
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="s2">&quot;hits&quot;</span> : <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;total&quot;</span> : 1,
</span><span class='line'>    <span class="s2">&quot;max_score&quot;</span> : 0.6931472,
</span><span class='line'>    <span class="s2">&quot;hits&quot;</span> : <span class="o">[</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;_index&quot;</span> : <span class="s2">&quot;my_index&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;_type&quot;</span> : <span class="s2">&quot;doc&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;_id&quot;</span> : <span class="s2">&quot;2QVXzmUBZLvWjZA0DvLO&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;_score&quot;</span> : 0.6931472,
</span><span class='line'>        <span class="s2">&quot;_source&quot;</span> : <span class="o">{</span>
</span><span class='line'>          <span class="s2">&quot;identifier&quot;</span> : <span class="s2">&quot;github&quot;</span>,
</span><span class='line'>          <span class="s2">&quot;geoip&quot;</span> : <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;continent_name&quot;</span> : <span class="s2">&quot;North America&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;city_name&quot;</span> : <span class="s2">&quot;San Francisco&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;country_iso_code&quot;</span> : <span class="s2">&quot;US&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;region_name&quot;</span> : <span class="s2">&quot;California&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;location&quot;</span> : <span class="o">{</span>
</span><span class='line'>              <span class="s2">&quot;lon&quot;</span> : -122.3933,
</span><span class='line'>              <span class="s2">&quot;lat&quot;</span> : 37.7697
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>,
</span><span class='line'>          <span class="s2">&quot;service&quot;</span> : <span class="s2">&quot;test&quot;</span>,
</span><span class='line'>          <span class="s2">&quot;ip&quot;</span> : <span class="s2">&quot;192.30.253.113&quot;</span>,
</span><span class='line'>          <span class="s2">&quot;os&quot;</span> : <span class="s2">&quot;linux&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Kibana</h2>

<p>Let&rsquo;s plot our data on Kibana:</p>

<ul>
<li>From Management: Select Index Patterns, Create index pattern, set: <code>my_index</code></li>
<li>From Visualize: Select Geo Coordinates, select your index: <code>my_index</code></li>
<li>From Buckets select Geo Corrdinates, Aggregation by GeoHash, then field, select <code>geoip.location</code> then hit run and you should see something like this:</li>
</ul>


<p><img src="https://objects.ruanbekker.com/assets/images/kibana-geoip-1.png" alt="" /></p>

<h2>Resources:</h2>

<ul>
<li><a href="https://www.elastic.co/blog/geoip-in-the-elastic-stack">https://www.elastic.co/blog/geoip-in-the-elastic-stack</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/plugins/5.3/using-ingest-geoip.html">https://www.elastic.co/guide/en/elasticsearch/plugins/5.3/using-ingest-geoip.html</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.3/put-pipeline-api.html">https://www.elastic.co/guide/en/elasticsearch/reference/5.3/put-pipeline-api.html</a></li>
<li><a href="https://ring.nlnog.net/api/1.0/nodes">https://ring.nlnog.net/api/1.0/nodes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Investigating High Request Latencies on Amazon DynamoDB]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/09/05/investigating-high-request-latencies-on-amazon-dynamodb/"/>
    <updated>2018-09-05T18:03:09-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/09/05/investigating-high-request-latencies-on-amazon-dynamodb</id>
    <content type="html"><![CDATA[<p>While testing DynamoDB for a specific use case I picked up at times where a GetItem will incur about 150ms in RequestLatency on the Max Statistic. This made me want to understand the behavior that I&rsquo;m observing.</p>

<p>I will go through my steps drilling down on pointers where latency can be reduced.</p>

<h2>DynamoDB Performance Testing Overview</h2>

<p>Tests:</p>

<ul>
<li>Create 2 Tables with 10 WCU / 10 RCU, one encrypted, one non-encrypted</li>
<li>Seed both tables with 10 items, 18KB per item</li>
<li>Do 4 tests:

<ul>
<li>Encrypted: Consistent Reads</li>
<li>Encrypted: Eventual Consistent Reads</li>
<li>Non-Encrypted: Consistent Reads</li>
<li>Non-Encrypted: Eventual Consistent Reads</li>
</ul>
</li>
</ul>


<h2>Seed the Table(s):</h2>

<p>Seed the Table with 10 items, 18KB per item:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from boto3 import Session as boto3_session
</span><span class='line'>from time import sleep, strftime
</span><span class='line'>from random import sample
</span><span class='line'>
</span><span class='line'># session ids that will be fetched in a random.choice order
</span><span class='line'>session_ids = [
</span><span class='line'>    '77c81e29-c86a-411e-a5b3-9a8fb3b2595f',
</span><span class='line'>    'b9a2b8ee-17ab-423c-8dbc-91020cd66097',
</span><span class='line'>    'cbe01734-c506-4998-8727-45f1aa0de7e3',
</span><span class='line'>    'e789f69b-420b-4e6d-9095-cd4482820454',
</span><span class='line'>    'c808a4e6-311e-48d2-b3fd-e9b0602a16ac',
</span><span class='line'>    '2ddf0416-6206-4c95-b6e5-d88b5325a7b1',
</span><span class='line'>    'e8157439-95f4-49a9-91e3-d1afc60a812f',
</span><span class='line'>    'f032115b-b04f-423c-9dfe-e004445b771b',
</span><span class='line'>    'dd6904c5-b65b-4da4-b0b2-f9e1c5895086',
</span><span class='line'>    '075e59be-9114-447b-8187-a0acf1b2f127'
</span><span class='line'>]
</span><span class='line'>
</span><span class='line'>generated_string = ''
</span><span class='line'>
</span><span class='line'># instantiating dynamodb client
</span><span class='line'>session = boto3_session(region_name='eu-west-1', profile_name='perf')
</span><span class='line'>dynamodb = session.client('dynamodb')
</span><span class='line'>
</span><span class='line'>timestamp = strftime("%Y-%m-%dT-%H:%M")
</span><span class='line'>results = open('dynamodb-put-results_{}.txt'.format(timestamp), 'a')
</span><span class='line'>count = 0
</span><span class='line'>
</span><span class='line'>for sid in session_ids:
</span><span class='line'>    count += 1
</span><span class='line'>    gen_data = ''.join(sample(generated_string, len(generated_string)))
</span><span class='line'>    sleep(1)
</span><span class='line'>
</span><span class='line'>    response = dynamodb.put_item(
</span><span class='line'>        TableName='ddb-perf-testing',
</span><span class='line'>        Item={
</span><span class='line'>            'session_id': {'S': sid },
</span><span class='line'>            'data': {'S': gen_data },
</span><span class='line'>            'item_num': {'S': str(count) }
</span><span class='line'>        }
</span><span class='line'>    )
</span><span class='line'>
</span><span class='line'>    results.write('Call Number: {call_num} \n'.format(call_num=count))
</span><span class='line'>    results.write('Call ResponseMetadata: {metadata} \n\n'.format(metadata=response['ResponseMetadata']))
</span><span class='line'>
</span><span class='line'>results.close()</span></code></pre></td></tr></table></div></figure>


<h2>Read from the Table(s):</h2>

<ul>
<li>Read 18KB per second for 3 Hours:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from boto3 import Session as boto3_session
</span><span class='line'>from time import sleep, strftime
</span><span class='line'>from random import choice
</span><span class='line'>
</span><span class='line'># delay between each iteration
</span><span class='line'>iteration_delay = 1
</span><span class='line'>
</span><span class='line'># iterations number - 3 hours
</span><span class='line'>iterations = 10800
</span><span class='line'>
</span><span class='line'># session ids that will be fetched in a random.choice order
</span><span class='line'>session_ids = [
</span><span class='line'>    '77c81e29-c86a-411e-a5b3-9a8fb3b2595f',
</span><span class='line'>    'b9a2b8ee-17ab-423c-8dbc-91020cd66097',
</span><span class='line'>    'cbe01734-c506-4998-8727-45f1aa0de7e3',
</span><span class='line'>    'e789f69b-420b-4e6d-9095-cd4482820454',
</span><span class='line'>    'c808a4e6-311e-48d2-b3fd-e9b0602a16ac',
</span><span class='line'>    '2ddf0416-6206-4c95-b6e5-d88b5325a7b1',
</span><span class='line'>    'e8157439-95f4-49a9-91e3-d1afc60a812f',
</span><span class='line'>    'f032115b-b04f-423c-9dfe-e004445b771b',
</span><span class='line'>    'dd6904c5-b65b-4da4-b0b2-f9e1c5895086',
</span><span class='line'>    '075e59be-9114-447b-8187-a0acf1b2f127'
</span><span class='line'>]
</span><span class='line'>
</span><span class='line'># instantiating dynamodb client
</span><span class='line'>session = boto3_session(region_name='eu-west-1', profile_name='perf')
</span><span class='line'>dynamodb = session.client('dynamodb')
</span><span class='line'>dynamodb-table = 'ddb-perf-testing'
</span><span class='line'>
</span><span class='line'>timestamp = strftime("%Y-%m-%dT-%H:%M")
</span><span class='line'>results = open('dynamodb-results_{}.txt'.format(timestamp), 'a')
</span><span class='line'>
</span><span class='line'>for iteration in range(iterations):
</span><span class='line'>    count = iteration + 1
</span><span class='line'>    print(count)
</span><span class='line'>    sleep(iteration_delay)
</span><span class='line'>
</span><span class='line'>    response = dynamodb.get_item(
</span><span class='line'>        TableName=dynamodb-table,
</span><span class='line'>        Key={'session_id': {'S': choice(session_ids)}},
</span><span class='line'>        ConsistentRead=False
</span><span class='line'>    )
</span><span class='line'>
</span><span class='line'>    results.write('Call Number: {cur_iter}/{max_iter} \n'.format(cur_iter=count, max_iter=iterations))
</span><span class='line'>    results.write('Call Item Response =&gt; Key: {attr_id}, Key Number:{attr_num} \n'.format(attr_id=response['Item']['session_id']['S'], attr_num=response['Item']['item_num']['S']))
</span><span class='line'>    results.write('Call ResponseMetadata: {metadata} \n\n'.format(metadata=response['ResponseMetadata']))
</span><span class='line'>
</span><span class='line'>results.close()</span></code></pre></td></tr></table></div></figure>


<h2>Results</h2>

<p><img src="https://cdn.pbrd.co/images/Hp8NsH8.png" alt="" /></p>

<h2>Notes from AWS Support:</h2>

<p>Reasons for High Latencies:</p>

<ul>
<li>RequestLatency is a Server Side Metric</li>
<li>Long requests could relate to metadata lookups</li>
<li>Executing Relative Low Amount of Requests there is Frequent Metadata Lookups; This may cause a spike in latency</li>
<li>Consistent Requests can have higher average latency then Eventual Consistent Reads</li>
<li>Requests in general can encounter higher then normal latency at times, due to network issue, storage node issue, metadata issue.</li>
<li>The p90 should still be single digit</li>
<li>Using Encryption has to interact with KMS API as well (mechanisms in place to deal with KMS integration though to still offer p90 under 10 ms)</li>
<li>DAX: Strongly consistent reads will be passed on to DynamoDB and not handled by the cache</li>
<li>1 RCU reading in Eventual Consistent manner can read 8 kb</li>
<li>Consistent read costs double an eventual consistent read</li>
<li>DDB not 100% of requests will be under 10 ms</li>
</ul>


<p>Resources:
- <a href="https://aws.amazon.com/blogs/developer/tuning-the-aws-sdk-for-java-to-improve-resiliency/">https://aws.amazon.com/blogs/developer/tuning-the-aws-sdk-for-java-to-improve-resiliency/</a>
- <a href="https://aws.amazon.com/blogs/developer/enabling-metrics-with-the-aws-sdk-for-java/">https://aws.amazon.com/blogs/developer/enabling-metrics-with-the-aws-sdk-for-java/</a>
- <a href="https://en.wikipedia.org/wiki/Eventual_consistency">https://en.wikipedia.org/wiki/Eventual_consistency</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Give Your Database a Break and Use Memcached to Return Frequently Accessed Data]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/09/01/give-your-database-a-break-and-use-memcached-to-return-frequently-accessed-data/"/>
    <updated>2018-09-01T17:05:10-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/09/01/give-your-database-a-break-and-use-memcached-to-return-frequently-accessed-data</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/memcached-logo.png" alt="" /></p>

<p>So let&rsquo;s take this scenario:</p>

<p>Your database is getting hammered with requests and building up some load over time and we would like to place a caching layer in front of our database that will return data from the caching layer, to reduce some traffic to our database and also improve our performance for our application.</p>

<h2>The Scenario:</h2>

<p>Our scenario will be very simple for this demonstration:</p>

<ul>
<li>Database will be using SQLite with product information (product_name, product_description)</li>
<li>Caching Layer will be Memcached</li>
<li>Our Client will be written in Python, which checks if the product name is in cache, if not a <code>GET_MISS</code> will be returned, then the data will be fetched from the database, returns it to the client and save it to the cache</li>
<li>Next time the item will be read, a <code>GET_HIT</code> will be received, then the item will be delivered to the client directly from the cache</li>
</ul>


<h2>SQL Database:</h2>

<p>As mentioned we will be using sqlite for demonstration.</p>

<p>Create the table, populate some very basic data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="err">$</span> <span class="n">sqlite3</span> <span class="n">db</span><span class="p">.</span><span class="k">sql</span> <span class="o">-</span><span class="n">header</span> <span class="o">-</span><span class="k">column</span>
</span><span class='line'><span class="n">import</span> <span class="n">sqlite3</span> <span class="k">as</span> <span class="k">sql</span>
</span><span class='line'><span class="n">SQLite</span> <span class="k">version</span> <span class="mi">3</span><span class="p">.</span><span class="mi">16</span><span class="p">.</span><span class="mi">0</span> <span class="mi">2016</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">04</span> <span class="mi">19</span><span class="p">:</span><span class="mi">09</span><span class="p">:</span><span class="mi">39</span>
</span><span class='line'><span class="n">Enter</span> <span class="ss">&quot;.help&quot;</span> <span class="k">for</span> <span class="k">usage</span> <span class="n">hints</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">create</span> <span class="k">table</span> <span class="n">products</span> <span class="p">(</span><span class="n">product_name</span> <span class="n">STRING</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span> <span class="n">product_description</span> <span class="n">STRING</span><span class="p">(</span><span class="mi">32</span><span class="p">));</span>
</span><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">products</span> <span class="k">values</span><span class="p">(</span><span class="s1">&#39;apple&#39;</span><span class="p">,</span> <span class="s1">&#39;fruit called apple&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">products</span> <span class="k">values</span><span class="p">(</span><span class="s1">&#39;guitar&#39;</span><span class="p">,</span> <span class="s1">&#39;musical instrument&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Read all the data from the table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">products</span><span class="p">;</span>
</span><span class='line'><span class="n">product_name</span>  <span class="n">product_description</span>
</span><span class='line'><span class="c1">------------  -------------------</span>
</span><span class='line'><span class="n">apple</span>         <span class="n">fruit</span> <span class="k">called</span> <span class="n">apple</span>
</span><span class='line'><span class="n">guitar</span>        <span class="n">musical</span> <span class="n">instrument</span>
</span><span class='line'><span class="n">sqlite</span><span class="o">&gt;</span> <span class="p">.</span><span class="n">exit</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Run a Memcached Container:</h2>

<p>We will use docker to run a memcached container on our workstation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run -itd --name memcached -p 11211:11211 rbekker87/memcached:alpine
</span></code></pre></td></tr></table></div></figure>


<h2>Our Application Code:</h2>

<p>I will use <a href="https://pymemcache.readthedocs.io/en/latest/getting_started.html">pymemcache</a> as our client library. Install:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>virtualenv .venv <span class="o">&amp;&amp;</span> <span class="nb">source</span> .venv/bin/activate
</span><span class='line'><span class="nv">$ </span>pip install pymemcache
</span></code></pre></td></tr></table></div></figure>


<p>Our Application Code which will be in Python</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sqlite3</span> <span class="kn">as</span> <span class="nn">sql</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pymemcache.client</span> <span class="kn">import</span> <span class="n">base</span>
</span><span class='line'>
</span><span class='line'><span class="n">product_name</span> <span class="o">=</span> <span class="s">&#39;guitar&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">base</span><span class="o">.</span><span class="n">Client</span><span class="p">((</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">11211</span><span class="p">))</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">product_name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">query_db</span><span class="p">(</span><span class="n">product_name</span><span class="p">):</span>
</span><span class='line'>    <span class="n">db_connection</span> <span class="o">=</span> <span class="n">sql</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&#39;db.sql&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="n">db_connection</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">c</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;select product_description from products where product_name = &quot;{k}&quot;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">k</span><span class="o">=</span><span class="n">product_name</span><span class="p">))</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">fetchone</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="n">db_connection</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="k">except</span><span class="p">:</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="s">&#39;invalid&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">data</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">result</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;got a miss, need to get the data from db&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">query_db</span><span class="p">(</span><span class="n">product_name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">result</span> <span class="o">==</span> <span class="s">&#39;invalid&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;requested data does not exist in db&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;returning data to client from db&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;=&gt; Product: {p}, Description: {d}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="n">product_name</span><span class="p">,</span> <span class="n">d</span><span class="o">=</span><span class="n">result</span><span class="p">))</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;setting the data to memcache&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">client</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">product_name</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;got the data directly from memcache&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;=&gt; Product: {p}, Description: {d}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="n">product_name</span><span class="p">,</span> <span class="n">d</span><span class="o">=</span><span class="n">result</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Explanation:</p>

<ul>
<li>We have a function that takes a argument of the product name, that makes the call to the database and returns the description of that product</li>
<li>We will make a get operation to memcached, if nothing is returned, then we know the item does not exists in our cache,</li>
<li>Then we will call our function to get the data from the database and return it directly to our client, and</li>
<li>Save it to the cache in memcached so the next time the same product is queried, it will be delivered directly from the cache</li>
</ul>


<h2>The Demo:</h2>

<p>Our Product Name is <code>guitar</code>, lets call the product, which will be the first time so memcached wont have the item in its cache:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python app.py
</span><span class='line'>got a miss, need to get the data from db
</span><span class='line'>returning data to client from <span class="nv">db</span>
</span><span class='line'><span class="o">=</span>&gt; Product: guitar, Description: musical instrument
</span><span class='line'>setting the data to memcache
</span></code></pre></td></tr></table></div></figure>


<p>Now from the output, we can see that the item was delivered from the database and saved to the cache, lets call that same product and observe the behavior:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python app.py
</span><span class='line'>got the data directly from <span class="nv">memcache</span>
</span><span class='line'><span class="o">=</span>&gt; Product: guitar, Description: musical instrument
</span></code></pre></td></tr></table></div></figure>


<p>When our cache instance gets rebooted we will lose our data that is in the cache, but since the source of truth will be in our database, data will be re-added to the cache as they are requested. That is one good reason not to rely on a cache service to be your primary data source.</p>

<p>What if the product we request is not in our cache or database, let&rsquo;s say the product <code>tree</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python app.py
</span><span class='line'>got a miss, need to get the data from db
</span><span class='line'>requested data does not exist in db
</span></code></pre></td></tr></table></div></figure>


<p>This was a really simple scenario, but when working with masses amount of data, you can benefit from a lot of performance using caching.</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://realpython.com/python-memcache-efficient-caching/">https://realpython.com/python-memcache-efficient-caching/</a></li>
<li><a href="https://github.com/ruanbekker/dockerhub-sources/tree/master/memcached/alpine">https://github.com/ruanbekker/dockerhub-sources/tree/master/memcached/alpine</a></li>
<li><a href="https://pymemcache.readthedocs.io/en/latest/getting_started.html#basic-usage">https://pymemcache.readthedocs.io/en/latest/getting_started.html#basic-usage</a></li>
<li><a href="https://sebastianraschka.com/Articles/2014_sqlite_in_python_tutorial.html">https://sebastianraschka.com/Articles/2014_sqlite_in_python_tutorial.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerizing a Memcached Server for Docker on Alpine]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/09/01/dockerizing-a-memcached-server-for-docker-on-alpine/"/>
    <updated>2018-09-01T16:01:09-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/09/01/dockerizing-a-memcached-server-for-docker-on-alpine</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/memcached-logo.png" alt="" /></p>

<p>This post I will demostrate how to dockerize a memcached server on Alpine and how to create a boot script that allows you to pass environment variables through to the application.</p>

<h2>What is Memcached</h2>

<p>Memcached is a multi-threaded, in-memory key/value store for small chunks of arbitrary data (strings, objects) from results of database calls, API calls, etc. More on <a href="https://memcached.org/about">Memcached</a></p>

<h2>The Dockerfile:</h2>

<p>Our Dockerfile will consist of a simple install of memcached and add a boot script that we will start it from:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='docker'><span class='line'><span class="k">FROM</span> alpine:3.7
</span><span class='line'>
</span><span class='line'>COPY boot.sh /boot.sh
</span><span class='line'><span class="k">RUN</span> apk --no-cache add memcached <span class="o">&amp;&amp;</span> chmod +x /boot.sh
</span><span class='line'>
</span><span class='line'>USER memcached
</span><span class='line'><span class="k">CMD</span> <span class="o">[</span><span class="s2">&quot;/boot.sh&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The Boot Script:</h2>

<p>As you can see we have set defaults so when the user does not specify any environment variables, that it will inherit the default values</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'>/usr/bin/memcached <span class="se">\</span>
</span><span class='line'>  --user<span class="o">=</span><span class="k">${</span><span class="nv">MEMCACHED_USER</span><span class="k">:-</span><span class="nv">memcached</span><span class="k">}</span> <span class="se">\</span>
</span><span class='line'>  --listen<span class="o">=</span><span class="k">${</span><span class="nv">MEMCACHED_HOST</span><span class="k">:-</span><span class="nv">0</span><span class="p">.0.0.0</span><span class="k">}</span> <span class="se">\</span>
</span><span class='line'>  --port<span class="o">=</span><span class="k">${</span><span class="nv">MEMCACHED_PORT</span><span class="k">:-</span><span class="nv">11211</span><span class="k">}</span> <span class="se">\</span>
</span><span class='line'>  --memory-limit<span class="o">=</span><span class="k">${</span><span class="nv">MEMCACHED_MEMUSAGE</span><span class="k">:-</span><span class="nv">64</span><span class="k">}</span> <span class="se">\</span>
</span><span class='line'>  --conn-limit<span class="o">=</span><span class="k">${</span><span class="nv">MEMCACHED_MAXCONN</span><span class="k">:-</span><span class="nv">1024</span><span class="k">}</span> <span class="se">\</span>
</span><span class='line'>  --threads<span class="o">=</span><span class="k">${</span><span class="nv">MEMCACHED_THREADS</span><span class="k">:-</span><span class="nv">4</span><span class="k">}</span> <span class="se">\</span>
</span><span class='line'>  --max-reqs-per-event<span class="o">=</span><span class="k">${</span><span class="nv">MEMCACHED_REQUESTS_PER_EVENT</span><span class="k">:-</span><span class="nv">20</span><span class="k">}</span> <span class="se">\</span>
</span><span class='line'>  --verbose
</span></code></pre></td></tr></table></div></figure>


<h2>Build and Deploy:</h2>

<p>Build the image, if you just want to run the container you can use my public image in the next step:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker build -t <span class="nb">local</span>/memcached:0.1 .
</span></code></pre></td></tr></table></div></figure>


<p>Run the Memcached Container:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run -itd --name memcached -p 11211:11211 -e <span class="nv">MEMCACHED_MEMUSAGE</span><span class="o">=</span><span class="m">32</span> <span class="nb">local</span>/memcached:0.1
</span></code></pre></td></tr></table></div></figure>


<p>Or my Public Image from Docker Hub:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run -itd --name memcached -p 11211:11211 -e <span class="nv">MEMCACHED_MEMUSAGE</span><span class="o">=</span><span class="m">32</span> rbekker87/memcached:alpine
</span></code></pre></td></tr></table></div></figure>


<h2>Check out the Stats:</h2>

<p>Pass the command <code>stats</code> through the exposed port:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> -e <span class="s2">&quot;stats&quot;</span> <span class="p">|</span> nc localhost <span class="m">11211</span>
</span><span class='line'>STAT pid 8
</span><span class='line'>STAT uptime 2
</span><span class='line'>STAT <span class="nb">time </span>1535833177
</span><span class='line'>STAT version 1.5.6
</span><span class='line'>STAT libevent 2.1.8-stable
</span><span class='line'>STAT pointer_size 64
</span><span class='line'>STAT rusage_user 0.030000
</span><span class='line'>STAT rusage_system 0.000000
</span><span class='line'>STAT max_connections 1024
</span><span class='line'>STAT curr_connections 1
</span><span class='line'>STAT total_connections 2
</span><span class='line'>STAT rejected_connections 0
</span><span class='line'>STAT connection_structures 2
</span><span class='line'>STAT reserved_fds 20
</span><span class='line'>STAT cmd_get 0
</span><span class='line'>STAT cmd_set 0
</span><span class='line'>STAT cmd_flush 0
</span><span class='line'>STAT cmd_touch 0
</span><span class='line'>STAT get_hits 0
</span><span class='line'>STAT get_misses 0
</span><span class='line'>STAT get_expired 0
</span><span class='line'>STAT get_flushed 0
</span><span class='line'>STAT delete_misses 0
</span><span class='line'>STAT delete_hits 0
</span><span class='line'>STAT incr_misses 0
</span><span class='line'>STAT incr_hits 0
</span><span class='line'>STAT decr_misses 0
</span><span class='line'>STAT decr_hits 0
</span><span class='line'>STAT cas_misses 0
</span><span class='line'>STAT cas_hits 0
</span><span class='line'>STAT cas_badval 0
</span><span class='line'>STAT touch_hits 0
</span><span class='line'>STAT touch_misses 0
</span><span class='line'>STAT auth_cmds 0
</span><span class='line'>STAT auth_errors 0
</span><span class='line'>STAT bytes_read 6
</span><span class='line'>STAT bytes_written 0
</span><span class='line'>STAT limit_maxbytes 33554432
</span><span class='line'>STAT accepting_conns 1
</span><span class='line'>STAT listen_disabled_num 0
</span><span class='line'>STAT time_in_listen_disabled_us 0
</span><span class='line'>STAT threads 4
</span><span class='line'>STAT conn_yields 0
</span><span class='line'>STAT hash_power_level 16
</span><span class='line'>STAT hash_bytes 524288
</span><span class='line'>STAT hash_is_expanding 0
</span><span class='line'>STAT slab_reassign_rescues 0
</span><span class='line'>STAT slab_reassign_chunk_rescues 0
</span><span class='line'>STAT slab_reassign_evictions_nomem 0
</span><span class='line'>STAT slab_reassign_inline_reclaim 0
</span><span class='line'>STAT slab_reassign_busy_items 0
</span><span class='line'>STAT slab_reassign_busy_deletes 0
</span><span class='line'>STAT slab_reassign_running 0
</span><span class='line'>STAT slabs_moved 0
</span><span class='line'>STAT lru_crawler_running 0
</span><span class='line'>STAT lru_crawler_starts 255
</span><span class='line'>STAT lru_maintainer_juggles 155
</span><span class='line'>STAT malloc_fails 0
</span><span class='line'>STAT log_worker_dropped 0
</span><span class='line'>STAT log_worker_written 0
</span><span class='line'>STAT log_watcher_skipped 0
</span><span class='line'>STAT log_watcher_sent 0
</span><span class='line'>STAT bytes 0
</span><span class='line'>STAT curr_items 0
</span><span class='line'>STAT total_items 0
</span><span class='line'>STAT slab_global_page_pool 0
</span><span class='line'>STAT expired_unfetched 0
</span><span class='line'>STAT evicted_unfetched 0
</span><span class='line'>STAT evicted_active 0
</span><span class='line'>STAT evictions 0
</span><span class='line'>STAT reclaimed 0
</span><span class='line'>STAT crawler_reclaimed 0
</span><span class='line'>STAT crawler_items_checked 0
</span><span class='line'>STAT lrutail_reflocked 0
</span><span class='line'>STAT moves_to_cold 0
</span><span class='line'>STAT moves_to_warm 0
</span><span class='line'>STAT moves_within_lru 0
</span><span class='line'>STAT direct_reclaims 0
</span><span class='line'>STAT lru_bumps_dropped 0
</span><span class='line'>END
</span></code></pre></td></tr></table></div></figure>


<p>Some descriptions:</p>

<p><code>evictions</code> - when items are evicted from the cache
<code>total_items</code> - the number of items the server has stored since it was started
<code>current_items</code> - the number of items in the cache
<code>bytes</code> - the current number of bytes used to store items
<code>limit_maxbytes</code> - the number of bytes the server is allowed to use for storage
<code>get_misses</code> - the number of times a item has been requested, but not found
<code>get_hits</code> - the number of times a item has been served from the cache</p>

<p>To get specific stats, like evictions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> -e <span class="s2">&quot;stats&quot;</span> <span class="p">|</span> nc localhost <span class="m">11211</span> <span class="p">|</span> grep -w evictions
</span><span class='line'>STAT evictions 0
</span></code></pre></td></tr></table></div></figure>


<p>When you see evictions value increases, this essentially means that memcache had to remove the oldest items from memory for new or more frequent used items. If this number remains high, consider increasing your memory allocated to memcache.</p>

<p>Slab Stats: returns information about each of the slabs created by memcached during runtime:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> -e <span class="s2">&quot;stats slabs&quot;</span> <span class="p">|</span> nc localhost <span class="m">11211</span>
</span><span class='line'>STAT active_slabs 0
</span><span class='line'>STAT total_malloced 0
</span></code></pre></td></tr></table></div></figure>


<p><code>active_slabs</code> - Total number of slab classes allocated.
<code>total_malloced</code> - Total amount of memory allocated to slab pages.</p>

<p>For detailed description about statistics, have a look at their github resource:
- <a href="https://github.com/memcached/memcached/blob/master/doc/protocol.txt">https://github.com/memcached/memcached/blob/master/doc/protocol.txt</a></p>

<h2>Resources:</h2>

<ul>
<li><a href="https://memcached.org/">https://memcached.org/</a></li>
<li><a href="https://blog.serverdensity.com/monitor-memcached/">https://blog.serverdensity.com/monitor-memcached/</a></li>
<li><a href="https://wiki.mikejung.biz/Memcached">https://wiki.mikejung.biz/Memcached</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review and Secure Your Facebook Account]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/08/29/review-and-secure-your-facebook-account/"/>
    <updated>2018-08-29T15:03:10-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/08/29/review-and-secure-your-facebook-account</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/fb-security-logo.png" alt="" /></p>

<p>This post is a bit different from my other posts, but I feel it&rsquo;s a important one: Facebook Security.</p>

<p>Facebook, everyone loves it right? Yeah, but what happens when you get locked out of your account, or an attacker gains access to your account and start doing things that you dont want to, and especially all the photos / messages that needs to remain private, can potentially end up in the wrong hands.</p>

<p>Facebook usually detects strange behavior, but being able to be pro-active on security on this can help a lot.</p>

<p>There&rsquo;s a couple of ways how attackers can gain access to your account, but I won&rsquo;t go into that, google will be your friend if you are curious how they do it.</p>

<h2>Scenario: Something suspicious is up / weird behavior / getting unusual messages from groups etc</h2>

<p>Usually Facebook will detect this, but if not you can and should do the following:</p>

<ul>
<li>Reset your password</li>
<li>Enable Two-Factor Authentication</li>
<li>Terminate or Logout all sessions from your account, if you find unknown sessions, report it to facebook and log them out.</li>
<li>Review your account&rsquo;s activity</li>
<li>Review Group Activity, if you are subscribed to groups, unsubscribe</li>
<li>Reach out to facebook support</li>
</ul>


<h2>Head over to your Facebook Accounts Settings Page:</h2>

<p>Head over to <a href="https://www.facebook.com/settings">https://www.facebook.com/settings</a> , this will be the main view where you are able to configure/review your account. It should look like this:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/fb-1.png" alt="" /></p>

<p>When you select the &ldquo;Security and Login&rdquo; tab: <a href="https://www.facebook.com/settings?tab=security">https://www.facebook.com/settings?tab=security</a> , you will be presented with a couple of login options:</p>

<h2>Security and Login Info:</h2>

<p>The list of your devices that is currently logged on:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/fb-2.png" alt="" /></p>

<p>Hit the <code>See More</code> dropdown to review all your devices, which is currently logged onto Facebook, if you are not aware of the sessions, hit the <code>Log Out</code> button to terminate that session, or select <code>Not You</code> if you are not aware of that session, then continue to report the activity to Facebook, so that they can look into it.</p>

<p><img src="https://objects.ruanbekker.com/assets/images/fb-3.png" alt="" /></p>

<p>You can follow up on your incident via <a href="https://www.facebook.com/support/">https://www.facebook.com/support/</a> .</p>

<h2>Password and Two Factor Authentication:</h2>

<p>This is actually the first thing that I would do, is to change your password. If someone did manage to gain access to your password and you are still logged on, change it immediately. If they reset your password before you do, game over. Well kind of..</p>

<p>From the same page, change your password:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/fb-4.png" alt="" /></p>

<p>Enable <code>"Two-Factor Authentication"</code>, when you are logged out, or trying to logon from a new device, a notification will be sent to your device where Facebook is installed, or alternatively, you will receive a code sent to you which you will need to enter after you have logged on, just to provide you with a extra layer of security.</p>

<p><img src="https://objects.ruanbekker.com/assets/images/fb-5.png" alt="" /></p>

<p>Enable <code>"Get alerts about unrecognized logins"</code>, which allows you to set up to 5 friends that can help you unlock your account, if your account has been locked out.</p>

<p><img src="https://objects.ruanbekker.com/assets/images/fb-6.png" alt="" /></p>

<h2>Review your Activity Log</h2>

<p>From <a href="https://www.facebook.com/settings?tab=your_facebook_information">https://www.facebook.com/settings?tab=your_facebook_information</a> , head over to <code>"Activity Log"</code>:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/fb-7.png" alt="" /></p>

<p>Select <code>"Activity Log"</code>, to review your recent activity:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/fb-8.png" alt="" /></p>

<p>Below <code>Comments</code>, select <code>more</code>, then <code>Security and Login Information</code>:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/fb-9.png" alt="" /></p>

<p>Then we will be presented with the <code>Active Sessions</code>, <code>Login and Logouts</code> and <code>Recognized Devices</code>.</p>

<p>First look at <code>Active Sessions</code>:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/fb-10.png" alt="" /></p>

<p>Then <code>Logins and Logouts</code>:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/fb-11.png" alt="" /></p>

<p>From this same page you can review other activity like <code>Search History</code>, <code>Groups</code>. etc.</p>

<p><img src="https://objects.ruanbekker.com/assets/images/fb-12.png" alt="" /></p>

<p>If someone had to access/subscribed to groups, you will be able to review the activity, within 3 different views:</p>

<ul>
<li>Groups: any interaction with groups, such as likes, comments etc.</li>
<li>Membership Activity: Any group memberships</li>
<li>Posts and Comments: Self explanatory.</li>
</ul>


<h2>Final Note:</h2>

<p>People try to access accounts all the time, watch out for the following:</p>

<ul>
<li>Friend Requests: people have a lot of private information on facebook, keep it private</li>
<li>Watch out for strange applications that wants your permission, review the permission levels closely</li>
<li>Reset your password time to time, use unique passwords, and not the same password as the password that your main email account is associated with</li>
<li>Watch out for links, some of them can end you up in a bad spot.</li>
<li>When you see weird activity from your friends account, report it, so that facebook can investigate it. It happened to a friend and Facebook sorted it out within 20 minutes.</li>
</ul>


<h2>Resources:</h2>

<ul>
<li><a href="https://www.facebook.com/security/">https://www.facebook.com/security/</a></li>
<li><a href="https://www.facebook.com/support">https://www.facebook.com/support</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
