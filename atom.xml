<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2020-04-29T00:21:00+02:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nginx Analysis Dashboard Using Grafana and Elasticsearch]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/04/28/nginx-analysis-dashboard-using-grafana-and-elasticsearch/"/>
    <updated>2020-04-28T20:07:22+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/04/28/nginx-analysis-dashboard-using-grafana-and-elasticsearch</id>
    <content type="html"><![CDATA[<p>In this post we will be setting up a <strong>analytical dashboard</strong> using <strong>grafana</strong> to visualize our <strong>nginx access logs</strong>.</p>

<p>In this tutorial I will be using my other blog <code>sysadmins.co.za</code> which is being served on nginx. We will also be setting up the other components such as filebeat, logstash, elasticsearch and redis, which require if you would like to follow along.</p>

<h2>The End Result</h2>

<p>We will be able to analyze our Nginx Access logs to answer questions such as:</p>

<ul>
<li>Whats the Top 10 Countries accessing your website in the last 24 hours</li>
<li>Who&rsquo;s the Top 10 Referers?</li>
<li>Whats the most popular page for the past 24 hours?</li>
<li>How does the percentage of 200&rsquo;s vs 404&rsquo;s look like?</li>
<li>Ability to view results based on status code</li>
<li>Everyone loves a World Map to view hotspots</li>
</ul>


<p>At the end of the tutorial, your dashboard will look similar to this:</p>

<p><img width="1123" alt="grafana-elasticsearch-nginx-dashboard" src="https://user-images.githubusercontent.com/567298/80523974-32925180-898f-11ea-96b6-e8e559655745.png"></p>

<h2>High Level Overview</h2>

<p>Our infrastructure will require Nginx with Filebeat, Redis, Logstash, Elasticsearch and Grafana and will look like this:</p>

<p><img width="871" alt="grafana-elasticsearch-logs-setup" src="https://user-images.githubusercontent.com/567298/80526020-6d49b900-8992-11ea-9a39-67331ccc3808.png"></p>

<p>I will drill down how everything is connected:</p>

<ol>
<li>Nginx has a custom <code>log_format</code> that we define, that will write to <code>/var/log/nginx/access_json.log</code>, which will be picked up by <strong>Filebeat</strong> as a input.</li>
<li>and <strong>Filebeat</strong> has an output that pushes the data to <strong>Redis</strong></li>
<li><strong>Logstash</strong> is configured with <strong>Redis</strong> as an input with configured filter section to transform the data and outputs to <strong>Elasticsearch</strong></li>
<li>From <strong>Grafana</strong> we have a configured <strong>Elasticsearch</strong> datasource</li>
<li>Use the grafana template to build this awesome dashboard on Grafana</li>
</ol>


<p>But first, a massive thank you to <a href="https://www.akiraka.net">akiraka</a> for templatizing this dashboard and made it available on <a href="https://grafana.com/orgs/akiraka">grafana</a></p>

<h2>Let&rsquo;s build all the things</h2>

<p>I will be using LXD to run my system/server containers (running ubuntu 18), but you can use a vps, cloud instance, multipass, virtualbox, or anything to host your servers that we will be deploying redis, logstash, etc.</p>

<p>Servers provisioned for this setup:</p>

<ul>
<li>Nginx</li>
<li>Redis</li>
<li>Logstash</li>
<li>Elasticsearch</li>
<li>Grafana</li>
<li>Prometheus</li>
</ul>


<h2>Elasticsearch</h2>

<p>If you don&rsquo;t have a cluster running already, you can follow <strong><a href="https://blog.ruanbekker.com/blog/2019/04/02/setup-a-5-node-highly-available-elasticsearch-cluster/">this tutorial</a></strong> which will help you deploy a HA Elasticsearch Cluster, or if you prefer docker, you can follow <strong><a href="https://blog.ruanbekker.com/blog/2018/04/29/running-a-3-node-elasticsearch-cluster-with-docker-compose-on-your-laptop-for-testing/">this tutorial</a></strong></p>

<h2>Redis</h2>

<p>For our in-memory data store, I will be securing my redis installation with a password as well.</p>

<p>Install redis:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update && apt install redis-server -y</span></code></pre></td></tr></table></div></figure>


<p>Generate a password:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ openssl rand -base64 36
</span><span class='line'>9V5YlWvm8WuC4n1KZLYUEbLruLJLNJEnDzhu4WnAIfgxMmlv</span></code></pre></td></tr></table></div></figure>


<p>In your redis config <code>/etc/redis/redis.conf</code>, you need to change the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>bind 0.0.0.0
</span><span class='line'>port 6379
</span><span class='line'>daemonize yes
</span><span class='line'>supervised systemd
</span><span class='line'>requirepass 9V5YlWvm8WuC4n1KZLYUEbLruLJLNJEnDzhu4WnAIfgxMmlv
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Restart redis to activate your changes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart redis.service</span></code></pre></td></tr></table></div></figure>


<p>and then set and get a key using your password:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ redis-cli -a "9V5YlWvm8WuC4n1KZLYUEbLruLJLNJEnDzhu4WnAIfgxMmlv" set test ok
</span><span class='line'>$ redis-cli -a "9V5YlWvm8WuC4n1KZLYUEbLruLJLNJEnDzhu4WnAIfgxMmlv" get test
</span><span class='line'>ok</span></code></pre></td></tr></table></div></figure>


<h2>Logstash</h2>

<p>On the logstash server, install the requirements:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update && apt install wget apt-transport-https default-jre -y
</span><span class='line'>$ wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add -
</span><span class='line'>$ echo "deb https://artifacts.elastic.co/packages/7.x/apt stable main" | tee -a /etc/apt/sources.list.d/elastic-7.x.list</span></code></pre></td></tr></table></div></figure>


<p>Now the repository for elastic is setup now we need to update and install logstash:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update && apt install logstash -y</span></code></pre></td></tr></table></div></figure>


<p>Once logstash is installed, we need to provide logstash with a configuration, in our scenario we will have a input for redis, a filter section to transform and output as elasticsearch.</p>

<p>Just make sure of the following:</p>

<ul>
<li>Populate the connection details of redis (we will define the key in filebeat later)</li>
<li>Ensure that <code>GeoLite2-City.mmdb</code> is in the path that I have under filter</li>
<li>Populate the connectiond details of Elasticsearch and choose a suitable index name, we will need to provide that index name in Grafana later</li>
</ul>


<p>Create the config: <code>/etc/logstash/conf.d/logs.conf</code> and my config will look like the following. (<a href="https://grafana.com/grafana/dashboards/11190">config source</a>)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>input {
</span><span class='line'>  redis {
</span><span class='line'>    data_type =&gt;"list"
</span><span class='line'>    key =&gt;"nginx_logs"
</span><span class='line'>    host =&gt;"10.47.127.37"
</span><span class='line'>    port =&gt; 6379
</span><span class='line'>    password =&gt; "9V5YlWvm8WuC4n1KZLYUEbLruLJLNJEnDzhu4WnAIfgxMmlv"
</span><span class='line'>    db =&gt; 0
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>filter {
</span><span class='line'>  geoip {
</span><span class='line'>    target =&gt; "geoip"
</span><span class='line'>    source =&gt; "client_ip"
</span><span class='line'>    database =&gt; "/usr/share/logstash/vendor/bundle/jruby/2.5.0/gems/logstash-filter-geoip-6.0.3-java/vendor/GeoLite2-City.mmdb"
</span><span class='line'>    add_field =&gt; [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
</span><span class='line'>    add_field =&gt; [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]
</span><span class='line'>    remove_field =&gt; ["[geoip][latitude]", "[geoip][longitude]", "[geoip][country_code]", "[geoip][country_code2]", "[geoip][country_code3]", "[geoip][timezone]", "[geoip][continent_code]", "[geoip][region_code]"]
</span><span class='line'>  }
</span><span class='line'>  mutate {
</span><span class='line'>    convert =&gt; [ "size", "integer" ]
</span><span class='line'>    convert =&gt; [ "status", "integer" ]
</span><span class='line'>    convert =&gt; [ "responsetime", "float" ]
</span><span class='line'>    convert =&gt; [ "upstreamtime", "float" ]
</span><span class='line'>    convert =&gt; [ "[geoip][coordinates]", "float" ]
</span><span class='line'>    remove_field =&gt; [ "ecs","agent","host","cloud","@version","input","logs_type" ]
</span><span class='line'>  }
</span><span class='line'>  useragent {
</span><span class='line'>    source =&gt; "http_user_agent"
</span><span class='line'>    target =&gt; "ua"
</span><span class='line'>    remove_field =&gt; [ "[ua][minor]","[ua][major]","[ua][build]","[ua][patch]","[ua][os_minor]","[ua][os_major]" ]
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>output {
</span><span class='line'>  elasticsearch {
</span><span class='line'>    hosts =&gt; ["10.47.127.132", "10.47.127.199", "10.47.127.130"]
</span><span class='line'>    #user =&gt; "myusername"
</span><span class='line'>    #password =&gt; "mypassword"
</span><span class='line'>    index =&gt; "logstash-nginx-sysadmins-%{+YYYY.MM.dd}"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Nginx</h2>

<p>On our nginx server we will install nginx and filebeat, then configure nginx to log to a custom log format, and configure filebeat to read the logs and push it to redis.</p>

<p>Installing nginx:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update && apt install nginx -y</span></code></pre></td></tr></table></div></figure>


<p>Installing <a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-installation.html">filebeat</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.6.2-amd64.deb
</span><span class='line'>$ dpkg -i filebeat-7.6.2-amd64.deb</span></code></pre></td></tr></table></div></figure>


<p>Next we will configure nginx to log to a seperate file with a custom log format to include data such as the, request method, upstream response time, hostname, remote address, etc.</p>

<p>Under the <code>http</code> directive in your <code>/etc/nginx/nginx.conf</code>, configure the <code>log_format</code> and <code>access_log</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http {
</span><span class='line'>...
</span><span class='line'>        log_format json_logs '{"@timestamp":"$time_iso8601","host":"$hostname",'
</span><span class='line'>                            '"server_ip":"$server_addr","client_ip":"$remote_addr",'
</span><span class='line'>                            '"xff":"$http_x_forwarded_for","domain":"$host",'
</span><span class='line'>                            '"url":"$uri","referer":"$http_referer",'
</span><span class='line'>                            '"args":"$args","upstreamtime":"$upstream_response_time",'
</span><span class='line'>                            '"responsetime":"$request_time","request_method":"$request_method",'
</span><span class='line'>                            '"status":"$status","size":"$body_bytes_sent",'
</span><span class='line'>                            '"request_body":"$request_body","request_length":"$request_length",'
</span><span class='line'>                            '"protocol":"$server_protocol","upstreamhost":"$upstream_addr",'
</span><span class='line'>                            '"file_dir":"$request_filename","http_user_agent":"$http_user_agent"'
</span><span class='line'>                            '}';
</span><span class='line'>
</span><span class='line'>        access_log  /var/log/nginx/access_json.log  json_logs;
</span><span class='line'>...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Restart nginx to activate the changes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart nginx</span></code></pre></td></tr></table></div></figure>


<p>Next we need to configure filebeat to read from our nginx access logs and configure the output to redis. Edit the filebeat config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/filebeat/filebeat.yml</span></code></pre></td></tr></table></div></figure>


<p>And configure filebeat with the following and make sure to change the values where you need to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># config source: akiraka.net
</span><span class='line'># filebeat input 
</span><span class='line'>filebeat.inputs:
</span><span class='line'>- type: log
</span><span class='line'>  enabled: true
</span><span class='line'>  paths:
</span><span class='line'>    - /var/log/nginx/access_json.log
</span><span class='line'>  json.keys_under_root: true
</span><span class='line'>  json.overwrite_keys: true
</span><span class='line'>  json.add_error_key: true
</span><span class='line'>
</span><span class='line'># filebeat modules 
</span><span class='line'>filebeat.config.modules:
</span><span class='line'>  # remove the escape character before the wildcard below
</span><span class='line'>  path: ${path.config}/modules.d/\*.yml
</span><span class='line'>  reload.enabled: false
</span><span class='line'>
</span><span class='line'># elasticsearch template settings
</span><span class='line'>setup.template.settings:
</span><span class='line'>  index.number_of_shards: 3
</span><span class='line'>
</span><span class='line'># redis output
</span><span class='line'>output.redis:
</span><span class='line'>  hosts: ["10.47.127.140:6379"]
</span><span class='line'>  password: "9V5YlWvm8WuC4n1KZLYUEbLruLJLNJEnDzhu4WnAIfgxMmlv"
</span><span class='line'>  key: "nginx_logs"
</span><span class='line'>  # ^ this key needs to be the same as the configured key on logstash 
</span><span class='line'>  db: 0
</span><span class='line'>  timeout: 5</span></code></pre></td></tr></table></div></figure>


<p>Restart filebeat:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart filebeat</span></code></pre></td></tr></table></div></figure>


<p>When you make a request to your nginx server, you should see a similar logline like below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tail -n1 /var/log/nginx/access_elg.log
</span><span class='line'>{"@timestamp":"2020-04-28T20:05:03+00:00","host":"sysadmins-blog","server_ip":"10.68.100.89","client_ip":"x.x.x.x","xff":"x.x.x.x","domain":"sysadmins.co.za","url":"/","referer":"-","args":"-","upstreamtime":"0.310","responsetime":"0.312","request_method":"GET","status":"200","size":"4453","request_body":"-","request_length":"519","protocol":"HTTP/1.1","upstreamhost":"127.0.0.1:2369","file_dir":"/var/www/web/root/","http_user_agent":"Mozilla/5.0"}</span></code></pre></td></tr></table></div></figure>


<h2>Grafana</h2>

<p>On the grafana server, install grafana:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update && apt install apt-transport-https software-properties-common wget -y
</span><span class='line'>$ wget -q -O - https://packages.grafana.com/gpg.key | apt-key add -
</span><span class='line'>$ add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"
</span><span class='line'>$ apt update && apt install grafana -y</span></code></pre></td></tr></table></div></figure>


<p>Now we need to install a couple of grafana plugins that we require for our dashboards:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ grafana-cli plugins install grafana-worldmap-panel
</span><span class='line'>$ grafana-cli plugins install grafana-clock-panel
</span><span class='line'>$ grafana-cli plugins install grafana-piechart-panel</span></code></pre></td></tr></table></div></figure>


<p>Now reload systemd and restart grafana:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl daemon-reload
</span><span class='line'>$ systemctl restart grafana-server</span></code></pre></td></tr></table></div></figure>


<p>If you would like to setup nginx as a reverse proxy to grafana, you can have a look at <strong><a href="https://blog.ruanbekker.com/blog/2019/05/17/install-grafana-to-visualize-your-metrics-from-datasources-such-as-prometheus-on-linux/">this blogpost</a></strong> on how to do that.</p>

<h2>Prometheus</h2>

<p>If you don&rsquo;t have Prometheus installed already, you can view my <a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">blogpost</a> on setting up Prometheus.</p>

<h2>Verifying</h2>

<p>To verify if everything works as expected, make a request to your nginx server, then have a look if your index count on elasticsearch increases:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://elasticsearch-endpoint-address:9200/_cat/indices/logstash-*?v
</span><span class='line'>health status index                               uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>green  open   logstash-nginx-x-2020.04.28 SWbHCer-TeOcw6bi_695Xw   5   1      58279            0     32.6mb         16.3mb</span></code></pre></td></tr></table></div></figure>


<p>If you dont, make sure that all the processes are running on the servers, and that each server is able to reach each other on the targeted ports.</p>

<h2>The Fun Part: Dashboarding</h2>

<p>Now that we have everything in place, the fun part is to build the dashboards, first we need to configure elasticsearch as our datasource and specify the index we want to read from. Open grafana on <code>http://ip.of.grafana.server:3000</code>, default user and password is admin.</p>

<p>Select config on the left and select datasources, add a datasource, select elasticsearch and specify your datasource name, mine is <strong>es-nginx</strong> in this example, the <strong>url</strong> of your elasticsearch endpoint, if you have secured your elasticsearch cluster with authentication, provide the auth, then provide your index name as as provided in logstash.</p>

<p>My configured index will look like <code>logstash-nginx-sysadmins-YYYY-MM-dd</code>, therefore I specified index name as <code>logstash-nginx-sysadmins-*</code> and my timefield as <code>@timestamp</code>, the version, and select save and test, which would look like this:</p>

<p><img width="569" alt="AC025E20-38D0-4676-B576-9F5932913BA1" src="https://user-images.githubusercontent.com/567298/80538019-48ab0c80-89a5-11ea-8f4f-a30384991ab9.png"></p>

<p>Now we will import our dashboard template (Once again a massive thank you to <a href="https://grafana.com/grafana/dashboards/11190">Shenxiang, Qingkong and Ruixi</a> which made this template available!), head over to dashboards and select import, then provide the ID: <code>11190</code>, after that it will prompt what your dashboard needs to be named and you need to select your Elasticsearch and Prometheus datasource.</p>

<p>The description of the panels is in Chinese, if you would like it in english, I have translated mine to english and made the dashboard json available in <a href="https://gist.githubusercontent.com/ruanbekker/699fca31ebd7223b675d0acd25ea84bc/raw/316a015a0464989117cd72a1e8e056854d582178/nginx_grafana_dashboard_11190_eng.json">this gist</a></p>

<h2>Tour of our Dashboard Panels</h2>

<p>Looking at our hotspot map:</p>

<p><img width="1212" alt="grafana" src="https://user-images.githubusercontent.com/567298/80539136-48ac0c00-89a7-11ea-869d-597da4fa4d92.png"></p>

<p>The summary and top 10 pages:</p>

<p><img width="1243" alt="76E8CBE1-4B03-4226-8041-B98879BAD66A" src="https://user-images.githubusercontent.com/567298/80540596-e86a9980-89a9-11ea-924d-29f777a7c15a.png"></p>

<p>Page views, historical trends:</p>

<p><img width="1239" alt="grafana-page-views" src="https://user-images.githubusercontent.com/567298/80539728-4eeeb800-89a8-11ea-959e-5e2915387b7b.png"></p>

<p>Top 10 referers and table data of our logs:</p>

<p><img width="1235" alt="B17C4F55-DF91-4EA0-9669-C237FF560459" src="https://user-images.githubusercontent.com/567298/80540381-772ae680-89a9-11ea-9067-61cd519c9d8a.png"></p>

<h2>Thank You</h2>

<p>I hope this was useful, if you have any issues with this feel free to reach out to me. If you like my work, please feel free to share this post or follow me on Twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Do Port Forwarding With Iptables]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/04/27/how-to-do-port-forwarding-with-iptables/"/>
    <updated>2020-04-27T13:42:41+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/04/27/how-to-do-port-forwarding-with-iptables</id>
    <content type="html"><![CDATA[<p>This is a quick post on how to do port forwarding with iptables on linux.</p>

<h2>What would we like to achieve</h2>

<p>We have a lxc container running a <strong>redis</strong> server and we would like to do port forwarding so that we can reach the server over the internet</p>

<h2>LXC Host</h2>

<p>On our host that hosts our lxc containers, we want to forward the host port <code>5379</code> to <code>6379</code> of the container (10.37.117.37), so we can connect on a non-standard redis port:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -t nat -I PREROUTING -p tcp --dport 5379 -j DNAT --to-destination 10.37.117.37:6379</span></code></pre></td></tr></table></div></figure>


<h2>Test over the Internet</h2>

<p>Test the connection by connecting to the LXC Host&rsquo;s IP:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ redis-cli -h lxc.host.ip.address -p 5379 -a "${REDIS_PW}"  get test
</span><span class='line'>"It's working!"</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thanks for reading my short post on how to use iptables to do port forwarding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Set a Static IP in Ubuntu 18]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/04/27/how-to-set-a-static-ip-in-ubuntu-18/"/>
    <updated>2020-04-27T13:39:19+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/04/27/how-to-set-a-static-ip-in-ubuntu-18</id>
    <content type="html"><![CDATA[<p>This is a short post on how to set a <strong>static ip address</strong> on <strong>ubuntu 18.04</strong> using <strong>netplan</strong></p>

<h2>Netplan</h2>

<p>At the moment my network interfaces uses dhcp, and we can see that below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/netplan/50-cloud-init.yaml
</span><span class='line'>network:
</span><span class='line'>    version: 2
</span><span class='line'>    ethernets:
</span><span class='line'>        eth0:
</span><span class='line'>            dhcp4: true</span></code></pre></td></tr></table></div></figure>


<p>Changing the configuration to static:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/netplan/50-cloud-init.yaml
</span><span class='line'>network:
</span><span class='line'>    version: 2
</span><span class='line'>    ethernets:
</span><span class='line'>        eth0:
</span><span class='line'>            dhcp4: false
</span><span class='line'>            addresses: [10.37.117.37/24]
</span><span class='line'>            gateway4: 10.37.117.1
</span><span class='line'>            nameservers:
</span><span class='line'>                addresses: [127.0.0.53,8.8.8.8]</span></code></pre></td></tr></table></div></figure>


<p>After changing the configuration, you need to apply your changes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ netplan apply</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thank you for reading my short post on how to change a static ip address on ubuntu 18.04 using netplan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graphing Covid-19 Stats With Grafana and Elasticsearch Using Python]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/04/26/graphing-covid-19-stats-with-grafana-and-elasticsearch-using-python/"/>
    <updated>2020-04-26T02:24:27+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/04/26/graphing-covid-19-stats-with-grafana-and-elasticsearch-using-python</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/80421197-62345180-88dc-11ea-9e0a-557199aaf613.png" alt="coronavirus-covid19-grafana-metrics" /></p>

<p>I stumbled upon a <a href="https://github.com/pomber/covid19/">github repository</a> that stores time-series data in json format of corona virus / covid19 statistics, which get updated daily.</p>

<p>I was curious to see data about my country and want to see how metrics will look like after our lockdown started, so I decided to consume that data with <strong>Python</strong> and the requests library, then ingest data about covid19 into <strong>Elasticsearch</strong> and the visualize the data with <strong>Grafana</strong>.</p>

<h2>Sample of the Data</h2>

<p>Let&rsquo;s have a peek at the data to determine how we will use it to write to Elasticsearch. Let&rsquo;s consume the data with python:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; import requests
</span><span class='line'>&gt;&gt;&gt; import json
</span><span class='line'>&gt;&gt;&gt; response = requests.get('https://pomber.github.io/covid19/timeseries.json').json()</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s determine the data type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; type(response)
</span><span class='line'>&lt;type 'dict'&gt;</span></code></pre></td></tr></table></div></figure>


<p>Now as it&rsquo;s a dictionary, let&rsquo;s look at they keys:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; response.keys()
</span><span class='line'>[u'Canada', u'Sao Tome and Principe', u'Lithuania', u'Cambodia', u'Ethiopia',....</span></code></pre></td></tr></table></div></figure>


<p>So let&rsquo;s take a look how the data looks like if we do a lookup for Canada:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; type(response['Canada'])
</span><span class='line'>&lt;type 'list'&gt;</span></code></pre></td></tr></table></div></figure>


<p>As we can see it&rsquo;s a list, we can count how many items is in our list:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; len(response['Canada'])
</span><span class='line'>94</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s peek at the data by accessing our first index of our list:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; response['Canada'][0]
</span><span class='line'>{u'date': u'2020-1-22', u'confirmed': 0, u'recovered': 0, u'deaths': 0}</span></code></pre></td></tr></table></div></figure>


<p>So our data will look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  [
</span><span class='line'>    'Country Name': [
</span><span class='line'>      {
</span><span class='line'>        'date': '&lt;string&gt;', 
</span><span class='line'>        'confirmed': '&lt;int&gt;', 
</span><span class='line'>        'recovered': '&lt;int&gt;', 
</span><span class='line'>        'deaths': '&lt;int&gt;'
</span><span class='line'>      },
</span><span class='line'>      {
</span><span class='line'>        'date': '&lt;string&gt;',
</span><span class='line'>        'confirmed': '&lt;int&gt;',
</span><span class='line'>        'recovered': '&lt;int&gt;',
</span><span class='line'>        'deaths': '&lt;int&gt;'
</span><span class='line'>      },
</span><span class='line'>    ],
</span><span class='line'>    'Country Name': [
</span><span class='line'>      ...
</span><span class='line'>    ]
</span><span class='line'>  ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Some issues we need to fix</h2>

<p>As you can see the date is displayed as <code>2020-1-22</code> instead of <code>2020-01-22</code>, I want to make it consistent as I will be ingesting the data with a <code>@timestamp</code> key which we will use the date from the returned data. So first we will need to convert that before we ingest the data.</p>

<p>The other thing I was thinking of is that, if for some reason we need to ingest this data again, we dont want to sit with duplicates (same document with different _id&rsquo;s), so for that I decided to generate a hash value that consist of the date and the country, so if the script run to ingest the data, it will use the same id for the specific document, which would just overwrite it, therefore we won&rsquo;t sit with duplicates.</p>

<p>So the idea is to ingest a document to elasticsearch like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>doc = {
</span><span class='line'>    "_id": "sha_hash_value",
</span><span class='line'>    "day": "2020-01-22",
</span><span class='line'>    "timestamp": "@2020-01-22 00:00:00",
</span><span class='line'>    "country": "CountryName",
</span><span class='line'>    "confirmed": 0,
</span><span class='line'>    "recovered": 0,
</span><span class='line'>    "deaths": 0
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>How we will ingest the data</h2>

<p>The first run will load all the data and ingest all the data up to the current day to elasticsearch. Once that is done, we will add code to our script to only ingest the most recent day&rsquo;s data into elasticsearch, which we will control with a cronjob.</p>

<p>Create a index with a mapping to let Elasticsearch know <code>timestamp</code> will be a date field:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XPUT -H 'Content-Type: application/json' \
</span><span class='line'>  -u username:pass 'https://es.domain.com/coronastats' -d \
</span><span class='line'>  '{"mappings": {"foo1": {"properties": {"timestamp" : {"type" : "date","format" : "yyyy-MM-dd HH:mm:ss"}}}}}'</span></code></pre></td></tr></table></div></figure>


<p>Once our index is created, create the python script that will load the data, loop through each country&rsquo;s daily data and ingest it into elasticsearch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">datetime</span> <span class="kn">as</span> <span class="nn">dt</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">hashlib</span>
</span><span class='line'>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s">&#39;https://pomber.github.io/covid19/timeseries.json&#39;</span>
</span><span class='line'><span class="n">elasticsearch_url</span> <span class="o">=</span> <span class="s">&quot;https://es.domain.com&quot;</span>
</span><span class='line'><span class="n">elasticsearch_username</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">elasticsearch_password</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">api_response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">convert_datestamp</span><span class="p">(</span><span class="n">day</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">day</span><span class="p">,</span> <span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s">&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">hash_function</span><span class="p">(</span><span class="n">country</span><span class="p">,</span> <span class="n">date</span><span class="p">):</span>
</span><span class='line'>    <span class="n">string_to_hash</span> <span class="o">=</span> <span class="n">country</span> <span class="o">+</span> <span class="n">date</span>
</span><span class='line'>    <span class="n">hash_obj</span>  <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">(</span><span class="n">string_to_hash</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">hash_value</span> <span class="o">=</span> <span class="n">hash_obj</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">hash_value</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">map_es_doc</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">country</span><span class="p">):</span>
</span><span class='line'>    <span class="n">doc</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;day&quot;</span><span class="p">:</span> <span class="n">payload</span><span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="s">&quot;timestamp&quot;</span><span class="p">:</span> <span class="n">convert_datestamp</span><span class="p">(</span><span class="n">payload</span><span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">]),</span>
</span><span class='line'>        <span class="s">&quot;country&quot;</span><span class="p">:</span> <span class="n">country</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;confirmed&quot;</span><span class="p">:</span> <span class="n">payload</span><span class="p">[</span><span class="s">&#39;confirmed&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="s">&quot;recovered&quot;</span><span class="p">:</span> <span class="n">payload</span><span class="p">[</span><span class="s">&#39;recovered&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="s">&quot;deaths&quot;</span><span class="p">:</span> <span class="n">payload</span><span class="p">[</span><span class="s">&#39;deaths&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">doc</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">ingest</span><span class="p">(</span><span class="n">doc_id</span><span class="p">,</span> <span class="n">payload</span><span class="p">):</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">put</span><span class="p">(</span>
</span><span class='line'>        <span class="n">elasticsearch_url</span> <span class="o">+</span> <span class="s">&#39;/coronastats/coronastats/&#39;</span> <span class="o">+</span> <span class="n">doc_id</span><span class="p">,</span>
</span><span class='line'>        <span class="n">auth</span><span class="o">=</span><span class="p">(</span><span class="n">elasticsearch_username</span><span class="p">,</span> <span class="n">elasticsearch_password</span><span class="p">),</span>
</span><span class='line'>        <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;content-type&#39;</span><span class="p">:</span> <span class="s">&#39;application/json&#39;</span><span class="p">},</span>
</span><span class='line'>        <span class="n">json</span><span class="o">=</span><span class="n">payload</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">country</span> <span class="ow">in</span> <span class="n">api_response</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">each_payload</span> <span class="ow">in</span> <span class="n">api_response</span><span class="p">[</span><span class="n">country</span><span class="p">]:</span>
</span><span class='line'>            <span class="n">doc_id</span> <span class="o">=</span> <span class="n">hash_function</span><span class="p">(</span><span class="n">country</span><span class="p">,</span> <span class="n">each_payload</span><span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">])</span>
</span><span class='line'>            <span class="n">doc</span> <span class="o">=</span> <span class="n">map_es_doc</span><span class="p">(</span><span class="n">each_payload</span><span class="p">,</span> <span class="n">country</span><span class="p">)</span>
</span><span class='line'>            <span class="n">response</span> <span class="o">=</span> <span class="n">ingest</span><span class="p">(</span><span class="n">doc_id</span><span class="p">,</span> <span class="n">doc</span><span class="p">)</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the script to ingest all the data into elasticsearch. Now we will create the script that will run daily to only ingest the previous day&rsquo;s data, so that we only ingest the latest data and not all the data from scratch again.</p>

<p>I will create this file in <code>/opt/scripts/corona_covid19_ingest.py</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">datetime</span> <span class="kn">as</span> <span class="nn">dt</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">hashlib</span>
</span><span class='line'>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s">&#39;https://pomber.github.io/covid19/timeseries.json&#39;</span>
</span><span class='line'><span class="n">elasticsearch_url</span> <span class="o">=</span> <span class="s">&quot;https://es.domain.com&quot;</span>
</span><span class='line'><span class="n">elasticsearch_username</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">elasticsearch_password</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">api_response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">yesterdays_date</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">()</span> <span class="o">-</span> <span class="n">dt</span><span class="o">.</span><span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">convert_datestamp</span><span class="p">(</span><span class="n">day</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">day</span><span class="p">,</span> <span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s">&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">hash_function</span><span class="p">(</span><span class="n">country</span><span class="p">,</span> <span class="n">date</span><span class="p">):</span>
</span><span class='line'>    <span class="n">string_to_hash</span> <span class="o">=</span> <span class="n">country</span> <span class="o">+</span> <span class="n">date</span>
</span><span class='line'>    <span class="n">hash_obj</span>  <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">(</span><span class="n">string_to_hash</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">hash_value</span> <span class="o">=</span> <span class="n">hash_obj</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">hash_value</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">map_es_doc</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">country</span><span class="p">):</span>
</span><span class='line'>    <span class="n">doc</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;day&quot;</span><span class="p">:</span> <span class="n">payload</span><span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="s">&quot;timestamp&quot;</span><span class="p">:</span> <span class="n">convert_datestamp</span><span class="p">(</span><span class="n">payload</span><span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">]),</span>
</span><span class='line'>        <span class="s">&quot;country&quot;</span><span class="p">:</span> <span class="n">country</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;confirmed&quot;</span><span class="p">:</span> <span class="n">payload</span><span class="p">[</span><span class="s">&#39;confirmed&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="s">&quot;recovered&quot;</span><span class="p">:</span> <span class="n">payload</span><span class="p">[</span><span class="s">&#39;recovered&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="s">&quot;deaths&quot;</span><span class="p">:</span> <span class="n">payload</span><span class="p">[</span><span class="s">&#39;deaths&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">doc</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">ingest</span><span class="p">(</span><span class="n">doc_id</span><span class="p">,</span> <span class="n">payload</span><span class="p">):</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">put</span><span class="p">(</span>
</span><span class='line'>        <span class="n">elasticsearch_url</span> <span class="o">+</span> <span class="s">&#39;/coronastats/coronastats/&#39;</span> <span class="o">+</span> <span class="n">doc_id</span><span class="p">,</span>
</span><span class='line'>        <span class="n">auth</span><span class="o">=</span><span class="p">(</span><span class="n">elasticsearch_username</span><span class="p">,</span> <span class="n">elasticsearch_password</span><span class="p">),</span>
</span><span class='line'>        <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;content-type&#39;</span><span class="p">:</span> <span class="s">&#39;application/json&#39;</span><span class="p">},</span>
</span><span class='line'>        <span class="n">json</span><span class="o">=</span><span class="n">payload</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">country</span> <span class="ow">in</span> <span class="n">api_response</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">each_payload</span> <span class="ow">in</span> <span class="n">api_response</span><span class="p">[</span><span class="n">country</span><span class="p">]:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">convert_datestamp</span><span class="p">(</span><span class="n">each_payload</span><span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="nb">str</span><span class="p">(</span><span class="n">yesterdays_date</span><span class="p">):</span>
</span><span class='line'>                <span class="k">print</span><span class="p">(</span><span class="s">&quot;ingesting latest data for {country}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">country</span><span class="o">=</span><span class="n">country</span><span class="p">))</span>
</span><span class='line'>                <span class="n">doc_id</span> <span class="o">=</span> <span class="n">hash_function</span><span class="p">(</span><span class="n">country</span><span class="p">,</span> <span class="n">each_payload</span><span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">])</span>
</span><span class='line'>                <span class="n">doc</span> <span class="o">=</span> <span class="n">map_es_doc</span><span class="p">(</span><span class="n">each_payload</span><span class="p">,</span> <span class="n">country</span><span class="p">)</span>
</span><span class='line'>                <span class="n">response</span> <span class="o">=</span> <span class="n">ingest</span><span class="p">(</span><span class="n">doc_id</span><span class="p">,</span> <span class="n">doc</span><span class="p">)</span>
</span><span class='line'>                <span class="k">print</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only difference with this script is that it checks if the date is equals to yesterday&rsquo;s date, and if so the document will be prepared and ingested into elasticsearch. We will create a cronjob that runs this script every morning at 08:45.</p>

<p>First make the file executable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">scripts</span><span class="o">/</span><span class="n">corona_covid19_ingest</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run <code>crontab -e</code> and add the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mi">45</span> <span class="mi">8</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">scripts</span><span class="o">/</span><span class="n">corona_covid19_ingest</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Visualize the Data with Grafana</h2>

<p>We will create this dashboard:</p>

<p><img src="https://user-images.githubusercontent.com/567298/80418135-35ca0680-88d7-11ea-83f6-3432a903333d.png" alt="corona-covid-19-dashboard" /></p>

<p>We need a elasticsearch datasource that points to the index that we ingest our data into. Head over to datasources, add a elasticsearch datasource and set the index to <code>coronastats</code> and add the timefield as <code>timestamp</code>.</p>

<p>We want to make the dashboard dynamic to have a <strong>&ldquo;country&rdquo;</strong> dropdown selector, for that go to the dashboard settings, select variable and add a country variable:</p>

<p><img src="https://user-images.githubusercontent.com/567298/80419463-7cb8fb80-88d9-11ea-959f-8f37ae3f6dc7.png" alt="covid19-dashboard-variables" /></p>

<p>First panel: &ldquo;Reported Cases per Day&rdquo;:</p>

<p><img src="https://user-images.githubusercontent.com/567298/80419572-af62f400-88d9-11ea-802e-7eeacb61ee19.png" alt="covid19-reported-cases" /></p>

<p>Second panel: &ldquo;Confirmed Cases&rdquo;:</p>

<p><img src="https://user-images.githubusercontent.com/567298/80419675-db7e7500-88d9-11ea-98a5-3aae4d9a6c87.png" alt="covid19-confirmed-cases" /></p>

<p>Third panel: &ldquo;Recovered Cases&rdquo;:</p>

<p><img src="https://user-images.githubusercontent.com/567298/80419750-fa7d0700-88d9-11ea-82a3-f26ff8c807ef.png" alt="covid19-recovered-cases" /></p>

<p>Now, if we select Italy, Spain and France as an example, we will see something like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/80419966-56479000-88da-11ea-8f30-39ac3da27007.png" alt="covid19-country-stats" /></p>

<h2>Thank You</h2>

<p>Although its pretty cool visualizing data, the issue that we are in at the moment with coronavirus / covid19 is really scary and we should all do our part to try and stay home, sanitize and try not to spread the virus. Together we can all do great things by reducing the spread of this virus.</p>

<p>Stay safe everyone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx Metrics on Prometheus With the Nginx Log Exporter]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/04/25/nginx-metrics-on-prometheus-with-the-nginx-log-exporter/"/>
    <updated>2020-04-25T01:42:35+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/04/25/nginx-metrics-on-prometheus-with-the-nginx-log-exporter</id>
    <content type="html"><![CDATA[<p>In this post we will setup a nginx log exporter for prometeus to get metrics of our nginx web server, such as number of requests per method, status code, processed bytes etc. Then we will configure prometheus to scrape our nginx metric endpoint and also create a basic dashbaord to visualize our data.</p>

<p>If you follow along on this tutorial, it assumes that you have <a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">Prometheus</a> and <a href="https://blog.ruanbekker.com/blog/2019/05/17/install-grafana-to-visualize-your-metrics-from-datasources-such-as-prometheus-on-linux/">Grafana</a> up and running. But if not the embedded links will take you to the blog posts to set it up.</p>

<h2>Nginx Webserver</h2>

<p>Install nginx:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update
</span><span class='line'>$ apt install nginx -y</span></code></pre></td></tr></table></div></figure>


<p>Configure your nginx server&rsquo;s log format to match the nginx log exporter&rsquo;s expected format, we will name it custom:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  log_format custom   '$remote_addr - $remote_user [$time_local] '
</span><span class='line'>                      '"$request" $status $body_bytes_sent '
</span><span class='line'>                      '"$http_referer" "$http_user_agent" "$http_x_forwarded_for"';
</span></code></pre></td></tr></table></div></figure>


<p>Edit your main nginx config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/nginx/nginx.conf</span></code></pre></td></tr></table></div></figure>


<p>This is how my complete config looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user www-data;
</span><span class='line'>worker_processes auto;
</span><span class='line'>pid /run/nginx.pid;
</span><span class='line'># remote the escape char if you are going to use this config
</span><span class='line'>include /etc/nginx/modules-enabled/\*.conf;
</span><span class='line'>
</span><span class='line'>events {
</span><span class='line'>  worker_connections 768;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>http {
</span><span class='line'>
</span><span class='line'>  # basic config
</span><span class='line'>  sendfile on;
</span><span class='line'>  tcp_nopush on;
</span><span class='line'>  tcp_nodelay on;
</span><span class='line'>  keepalive_timeout 65;
</span><span class='line'>  types_hash_max_size 2048;
</span><span class='line'>  include /etc/nginx/mime.types;
</span><span class='line'>  default_type application/octet-stream;
</span><span class='line'>
</span><span class='line'>  # ssl config
</span><span class='line'>  ssl_protocols TLSv1 TLSv1.1 TLSv1.2; 
</span><span class='line'>  ssl_prefer_server_ciphers on;
</span><span class='line'>
</span><span class='line'>  # logging config
</span><span class='line'>  log_format custom   '$remote_addr - $remote_user [$time_local] '
</span><span class='line'>                      '"$request" $status $body_bytes_sent '
</span><span class='line'>                      '"$http_referer" "$http_user_agent" "$http_x_forwarded_for"';
</span><span class='line'>
</span><span class='line'>  access_log /var/log/nginx/access.log custom;
</span><span class='line'>  error_log /var/log/nginx/error.log;
</span><span class='line'>
</span><span class='line'>  # gzip
</span><span class='line'>  gzip on;
</span><span class='line'>
</span><span class='line'>  # virtual host config
</span><span class='line'>  include /etc/nginx/conf.d/myapp.conf;
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>I will delete the default host config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rm -rf /etc/nginx/sites-enabled/default</span></code></pre></td></tr></table></div></figure>


<p>And then create my <code>/etc/nginx/conf.d/myapp.conf</code> as referenced in my main config, with the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>
</span><span class='line'>  listen 80 default_server;
</span><span class='line'>  # remove the escape char if you are going to use this config
</span><span class='line'>  server_name \_;
</span><span class='line'>
</span><span class='line'>  root /var/www/html;
</span><span class='line'>  index index.html index.htm index.nginx-debian.html;
</span><span class='line'>
</span><span class='line'>  location / {
</span><span class='line'>    try_files $uri $uri/ =404;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>When you make a GET request to your server, you should see something like this in your access log:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>10x.1x.2x.1x - - [25/Apr/2020:00:31:11 +0000] "GET / HTTP/1.1" 200 396 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1 Safari/605.1.15" "-"</span></code></pre></td></tr></table></div></figure>


<h2>Nginx Log Exporter</h2>

<p>Head over to the <a href="https://github.com/martin-helmich/prometheus-nginxlog-exporter/releases">prometheus-nginxlog-exporter releases</a> page and get the latest version, in the time of writing it is v1.4.0:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://github.com/martin-helmich/prometheus-nginxlog-exporter/releases/download/v1.4.0/prometheus-nginxlog-exporter</span></code></pre></td></tr></table></div></figure>


<p>Make it executable and move it to your path:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod +x prometheus-nginxlog-exporter
</span><span class='line'>$ mv prometheus-nginxlog-exporter /usr/bin/prometheus-nginxlog-exporter</span></code></pre></td></tr></table></div></figure>


<p>Create the directory where we will place our config for our exporter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir /etc/prometheus</span></code></pre></td></tr></table></div></figure>


<p>Create the config file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/prometheus/nginxlog_exporter.yml</span></code></pre></td></tr></table></div></figure>


<p>You can follow the instructions from <a href="https://github.com/martin-helmich/prometheus-nginxlog-exporter">github.com/prometheus-nginxlog-exporter</a> for more information on configuration, but I will be using the following config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>listen:
</span><span class='line'>  port: 4040
</span><span class='line'>  address: "0.0.0.0"
</span><span class='line'>
</span><span class='line'>consul:
</span><span class='line'>  enable: false
</span><span class='line'>
</span><span class='line'>namespaces:
</span><span class='line'>  - name: myapp
</span><span class='line'>    format: "$remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent \"$http_referer\" \"$http_user_agent\" \"$http_x_forwarded_for\""
</span><span class='line'>    source:
</span><span class='line'>      files:
</span><span class='line'>        - /var/log/nginx/access.log
</span><span class='line'>    labels:
</span><span class='line'>      service: "myapp"
</span><span class='line'>      environment: "production"
</span><span class='line'>      hostname: "myapp.example.com"
</span><span class='line'>    histogram_buckets: [.005, .01, .025, .05, .1, .25, .5, 1, 2.5, 5, 10]</span></code></pre></td></tr></table></div></figure>


<p>Create the systemd unit file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/systemd/system/nginxlog_exporter.service</span></code></pre></td></tr></table></div></figure>


<p>And my configuration that I will be using:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'>Description=Prometheus Log Exporter
</span><span class='line'>Wants=network-online.target
</span><span class='line'>After=network-online.target
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>User=root
</span><span class='line'>Group=root
</span><span class='line'>Type=simple
</span><span class='line'>ExecStart=/usr/bin/prometheus-nginxlog-exporter -config-file /etc/prometheus/nginxlog_exporter.yml
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=multi-user.target</span></code></pre></td></tr></table></div></figure>


<p>Reload systemd and enable the service on boot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl daemon-reload
</span><span class='line'>$ systemctl enable nginxlog_exporter</span></code></pre></td></tr></table></div></figure>


<p>Restart the service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart nginxlog_exporter</span></code></pre></td></tr></table></div></figure>


<p>Ensure that the service is running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl status nginxlog_exporter
</span><span class='line'>
</span><span class='line'>● nginxlog_exporter.service - Prometheus Log Exporter
</span><span class='line'>   Loaded: loaded (/etc/systemd/system/nginxlog_exporter.service; disabled; vendor preset: enabled)
</span><span class='line'>   Active: active (running) since Sat 2020-04-25 00:50:06 UTC; 5s ago
</span><span class='line'> Main PID: 4561 (prometheus-ngin)
</span><span class='line'>    Tasks: 7 (limit: 2317)
</span><span class='line'>   CGroup: /system.slice/nginxlog_exporter.service
</span><span class='line'>           └─4561 /usr/bin/prometheus-nginxlog-exporter -config-file /etc/prometheus/nginxlog_exporter.yml
</span><span class='line'>
</span><span class='line'>Apr 25 00:50:06 nginx-log-exporter systemd[1]: Started Prometheus Log Exporter.
</span><span class='line'>Apr 25 00:50:06 nginx-log-exporter prometheus-nginxlog-exporter[4561]: loading configuration file /etc/prometheus/nginxlog_exporter.yml
</span><span class='line'>Apr 25 00:50:06 nginx-log-exporter prometheus-nginxlog-exporter[4561]: using configuration {Listen:{Port:4040 Address:0.0.0.0} Consul:{Enable:false Address: Datacenter: Scheme: Toke
</span><span class='line'>Apr 25 00:50:06 nginx-log-exporter prometheus-nginxlog-exporter[4561]: starting listener for namespace myapp
</span><span class='line'>Apr 25 00:50:06 nginx-log-exporter prometheus-nginxlog-exporter[4561]: running HTTP server on address 0.0.0.0:4040
</span><span class='line'>Apr 25 00:50:06 nginx-log-exporter prometheus-nginxlog-exporter[4561]: 2020/04/25 00:50:06 Seeked /var/log/nginx/access.log - &{Offset:0 Whence:2}</span></code></pre></td></tr></table></div></figure>


<h2>Test the exporter</h2>

<p>Make a couple of requests against your webserver:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ for each in {1..10}; do curl http://78.141.211.49 ; done</span></code></pre></td></tr></table></div></figure>


<p>So prometheus will now scrape the exporter http endpoint (<code>:4040/metrics</code>) and push the returned values into prometheus. But to get a feel on how the metrics look like, make a request to the metrics endpoint:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:4040/metrics
</span><span class='line'>...
</span><span class='line'># HELP myapp_http_response_count_total Amount of processed HTTP requests
</span><span class='line'># TYPE myapp_http_response_count_total counter
</span><span class='line'>myapp_http_response_count_total{environment="production",hostname="myapp.example.com",method="GET",service="myapp",status="200"} 10
</span><span class='line'>myapp_http_response_count_total{environment="production",hostname="myapp.example.com",method="POST",service="myapp",status="404"} 1
</span><span class='line'># HELP myapp_http_response_size_bytes Total amount of transferred bytes
</span><span class='line'># TYPE myapp_http_response_size_bytes counter
</span><span class='line'>myapp_http_response_size_bytes{environment="production",hostname="myapp.example.com",method="GET",service="myapp",status="200"} 6120
</span><span class='line'>myapp_http_response_size_bytes{environment="production",hostname="myapp.example.com",method="POST",service="myapp",status="404"} 152
</span><span class='line'># HELP myapp_parse_errors_total Total number of log file lines that could not be parsed
</span><span class='line'># TYPE myapp_parse_errors_total counter
</span><span class='line'>myapp_parse_errors_total 0
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>As you can see we are getting metrics such as response count total, response size, errors, etc.</p>

<h2>Configure Prometheus</h2>

<p>Let&rsquo;s configure prometheus to scrape this endpoint. Head over to your prometheus instance, and edit your prometheus config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/prometheus/prometheus.yml</span></code></pre></td></tr></table></div></figure>


<p>Note that in my config I have 2 endpoints that I am scraping, the prometheus endpoint which exists and I will be adding the nginx endpoint, so in full, this is how my config will look like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global:
</span><span class='line'>  scrape_interval: 15s
</span><span class='line'>
</span><span class='line'>scrape_configs:
</span><span class='line'>  - job_name: 'prometheus'
</span><span class='line'>    scrape_interval: 5s
</span><span class='line'>    static_configs:
</span><span class='line'>      - targets: ['localhost:9090']
</span><span class='line'>
</span><span class='line'>  - job_name: 'nginx'
</span><span class='line'>    scrape_interval: 15s
</span><span class='line'>    static_configs:
</span><span class='line'>      - targets: ['ip.of.nginx.exporter:4040']</span></code></pre></td></tr></table></div></figure>


<p>Restart prometheus:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart prometheus</span></code></pre></td></tr></table></div></figure>


<p>To verify that the exporter is working as expected, head over to your prometheus ui on port 9090, and query <code>up{}</code> to see if your exporters are returning 1:</p>

<p><img width="1280" alt="image" src="https://user-images.githubusercontent.com/567298/80267654-7b51be00-86a2-11ea-98e2-a48a5c2a1e4f.png"></p>

<p>We can then query prometheus with <code>myapp_http_response_count_total{service="myapp"}</code> to see the response counts:</p>

<p><img width="1273" alt="image" src="https://user-images.githubusercontent.com/567298/80267823-590c7000-86a3-11ea-9098-28e37e7941d7.png"></p>

<h2>Dashboarding in Grafana</h2>

<p>If you don&rsquo;t have Grafana installed, you can look at my <a href="https://blog.ruanbekker.com/blog/2019/05/17/install-grafana-to-visualize-your-metrics-from-datasources-such-as-prometheus-on-linux/">Grafana Installation</a> post to get that up and running.</p>

<p>If you have not created the Prometheus datasource, on Grafana, head over to the configuration section on your left, select Datasources, add a Prometheus datasource and add the following (this is assuming grafana runs on the prometheus node - which is fine for testing):</p>

<p><img width="592" alt="image" src="https://user-images.githubusercontent.com/567298/80267986-48a8c500-86a4-11ea-9046-3fba601d41cf.png"></p>

<p>Create a new dashboard and add a new panel:</p>

<p><img width="605" alt="image" src="https://user-images.githubusercontent.com/567298/80267884-b3a5cc00-86a3-11ea-8624-797e5310de80.png"></p>

<p>Let&rsquo;s query our data to show us HTTP Method and Status code per 30s: <code>rate(myapp_http_response_count_total{service="myapp"}[$__interval])</code></p>

<p><img width="1271" alt="image" src="https://user-images.githubusercontent.com/567298/80269073-e607f700-86ac-11ea-8d42-4814084dfb4a.png"></p>

<h2>Thank You</h2>

<p>Hope you found this helpful, if you haven&rsquo;t seen my other posts on Prometheus, have a look at the following:</p>

<ul>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">Setup Prometheus</a></li>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/17/install-grafana-to-visualize-your-metrics-from-datasources-such-as-prometheus-on-linux/">Setup Grafana</a></li>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">Setup Node Exporter</a></li>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/17/install-blackbox-exporter-to-monitor-websites-with-prometheus/">Setup Blackbox Exporter</a></li>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/17/install-alertmanager-to-alert-based-on-metrics-from-prometheus/">Setup Alertmanager</a></li>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/17/install-pushgateway-to-expose-metrics-to-prometheus/">Setup Pushgateway</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IPSec Site to Site VPN With Dynamic IPs With Openswan]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/04/19/ipsec-site-to-site-vpn-with-dynamic-ips-with-openswan/"/>
    <updated>2020-04-19T20:58:17+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/04/19/ipsec-site-to-site-vpn-with-dynamic-ips-with-openswan</id>
    <content type="html"><![CDATA[<p>In this tutorial we will setup a site to site ipsec vpn with strongswan and we will enable each server to discover the other vpn server via dynamic dns. We will also append to our config the ability of roadwarriors so that you will be able to connect to your homelab from any mobile or laptop device from any remote source.</p>

<h2>Some background</h2>

<p>Me and one of my friends decided to build a site to site vpn with strongswan so that our homelabs could be reachable to each other over private networks.</p>

<p>One challenge that I thought of is that both of our internet providers don&rsquo;t support static ip addressing, so each vpn server needs to know where to connect to whenever the ip address changes.</p>

<h2>What we will be doing</h2>

<p>We will setup strongswan vpn on both servers and allow the private LAN ranges to be reachable for both sides. As I have a domain hosted on cloudflare, I will be using cloudflare&rsquo;s api to update the A record of each sides dns whenever the IP changes.</p>

<h2>Environment</h2>

<p>On my side, which I will be referring to as <strong>Side-A</strong>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Public DNS Name: side-a.example.com
</span><span class='line'>Private Range: 192.168.0.0/24
</span><span class='line'>VPN Server IP: 192.168.0.2</span></code></pre></td></tr></table></div></figure>


<p>On my friend&rsquo;s side, which I will be referring to as <strong>Side-B</strong>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Public DNS Name: side-b.example.com
</span><span class='line'>Private Range: 192.168.1.0/24
</span><span class='line'>VPN Server IP: 192.168.1.2</span></code></pre></td></tr></table></div></figure>


<h2>Cloudflare Dynamic DNS</h2>

<p>You don&rsquo;t need to use Cloudflare, theres services such as dyndns.com, no-ip.com. But for this tutorial I will be using cloudflare to utilize my own domain.</p>

<p>I will be using the <a href="https://github.com/LINKIWI/cloudflare-ddns-client">cloudflare-ddns-client</a></p>

<p>First we need to create a API Token, head over to your dashboard: <a href="https://dash.cloudflare.com">dash.cloudflare.com</a>, head over to &ldquo;my profile&rdquo;, select &ldquo;API Tokens&rdquo;, then allow &ldquo;Read Zones&rdquo; and &ldquo;Edit DNS&rdquo;, then select &ldquo;Create Token&rdquo;. Keep the returned token value in a safe place.</p>

<p>Install the pre-requirements:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt install python python-dev python-pip make curl build-essential -y</span></code></pre></td></tr></table></div></figure>


<p>Get the source and install:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/LINKIWI/cloudflare-ddns-client.git
</span><span class='line'>$ cd cloudflare-ddns-client
</span><span class='line'>$ make install</span></code></pre></td></tr></table></div></figure>


<p>We will now configure the cloudflare dynamic dns client, this will be done on both sides, but will only demonstrate for side-a:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cloudflare-ddns --configure
</span><span class='line'>Use API token or API key to authenticate?
</span><span class='line'>Choose [T]oken or [K]ey: T
</span><span class='line'>Enter the API token you created at https://dash.cloudflare.com/profile/api-tokens.
</span><span class='line'>Required permissions are READ Account.Access: Organizations, Identity Providers, and Groups; READ Zone.Zone; EDIT Zone.DNS
</span><span class='line'>CloudFlare API token: [redacted]
</span><span class='line'>Enter the domains for which you would like to automatically update the DNS records, delimited by a single comma.
</span><span class='line'>Comma-delimited domains: side-a.example.com</span></code></pre></td></tr></table></div></figure>


<p>Testing it out to ensure the A record can be updated:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cloudflare-ddns --update-now
</span><span class='line'>Found external IPv4: "1.x.x.x"
</span><span class='line'>Listing all zones.
</span><span class='line'>Finding all DNS records.
</span><span class='line'>Updating the A record (ID x) of (sub)domain side-a.example.com (ID x) to 1.x.x.x.
</span><span class='line'>DNS record updated successfully!</span></code></pre></td></tr></table></div></figure>


<p>We can run this command from above in a cron, but I will use a bash script to only run when the public ip changed: <code>/opt/scripts/detect_ip_change.sh</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>set -ex
</span><span class='line'>MY_DDNS_HOST="side-a.example.com"
</span><span class='line'>
</span><span class='line'>if [ $(dig ${MY_DDNS_HOST} +short) == $(curl -s icanhazip.com) ];
</span><span class='line'>  then exit 0;
</span><span class='line'>  else /usr/local/bin/cloudflare-ddns --update-now;
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure>


<p>Make the file executable: <code>chmod +x /opt/scripts/detect_ip_change.sh</code> then edit your cronjobs: <code>crontab -e</code> and add the script:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* * * * * /opt/scripts/detect_ip_change.sh</span></code></pre></td></tr></table></div></figure>


<p>This will keep your DNS updated, this needs to be done on both sides, if you want to use dynamic dns.</p>

<h2>Port Forwarding</h2>

<p>We will need to forward UDP traffic from the router to the VPN server, on both sides:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Port: UDP/500 
</span><span class='line'>Target: VPN-Server-IP:500
</span><span class='line'>
</span><span class='line'>Port: UDP/4500
</span><span class='line'>Target: VPN-Server-IP:4500</span></code></pre></td></tr></table></div></figure>


<h2>Create a Pre-Shared Key</h2>

<p>Create a preshared key that will be used on both sides to authenticate:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ openssl rand -base64 36
</span><span class='line'>pgDU4eKZaQNL7GNRWJPvZbaSYFn2PAFjK9vDOvxAQ85p7qc4</span></code></pre></td></tr></table></div></figure>


<p>This value will be used on both sides, which we will need later.</p>

<h2>Install Strongswan on Side-A</h2>

<p>Install strongswan and enable the service on boot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt install strongswan -y
</span><span class='line'>$ systemctl enable strongswan</span></code></pre></td></tr></table></div></figure>


<p>The left side will be the side we are configuring and the right side will be the remote side.</p>

<p>Create the config: <code>/etc/ipsec.conf</code> and provide the following config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config setup
</span><span class='line'>    charondebug="all"
</span><span class='line'>    uniqueids=yes
</span><span class='line'>    virtual_private=
</span><span class='line'>    cachecrls=no
</span><span class='line'>
</span><span class='line'>conn vpn-to-side-b
</span><span class='line'>    type=tunnel
</span><span class='line'>    authby=secret
</span><span class='line'>    left=%defaultroute
</span><span class='line'>    leftid=side-a.example.com
</span><span class='line'>    leftsubnet=192.168.0.0/24
</span><span class='line'>    right=%side-b.example.com
</span><span class='line'>    rightid=side-b.example.com
</span><span class='line'>    rightsubnet=192.168.1.0/24
</span><span class='line'>    ike=aes256-sha2_256-modp1024!
</span><span class='line'>    esp=aes256-sha2_256!
</span><span class='line'>    keyingtries=0
</span><span class='line'>    ikelifetime=1h
</span><span class='line'>    lifetime=8h
</span><span class='line'>    dpddelay=30
</span><span class='line'>    dpdtimeout=120
</span><span class='line'>    dpdaction=restart
</span><span class='line'>    auto=start</span></code></pre></td></tr></table></div></figure>


<p>Create the secrets file: <code>/etc/ipsec.secrets</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>side-b.example.com : PSK "pgDU4eKZaQNL7GNRWJPvZbaSYFn2PAFjK9vDOvxAQ85p7qc4"</span></code></pre></td></tr></table></div></figure>


<p>Append the following kernel parameters to <code>/etc/sysctl.conf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>net.ipv4.ip_forward = 1
</span><span class='line'>net.ipv4.conf.all.accept_redirects = 0
</span><span class='line'>net.ipv4.conf.all.send_redirects = 0</span></code></pre></td></tr></table></div></figure>


<p>Save:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sysctl -p</span></code></pre></td></tr></table></div></figure>


<p>We now want to add a POSTROUTING and FORWARD rule using iptables:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -t nat -A POSTROUTING -s 192.168.1.0/24  -d 192.168.0.0/24 -j MASQUERADE
</span><span class='line'>$ iptables -A FORWARD -s 192.168.1.0/24 -d 192.168.0.0/24 -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<p>Now we need to route back:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ip route add 192.168.1.0/24 via 192.168.0.2 dev eth0</span></code></pre></td></tr></table></div></figure>


<p>We want to persist the iptables and static route across reboots, so edit the <code>/etc/rc.local</code> file, if it&rsquo;s not there create it with the following values:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>iptables -t nat -A POSTROUTING -s 192.168.1.0/24  -d 192.168.0.0/24 -j MASQUERADE
</span><span class='line'>iptables -A FORWARD -s 192.168.1.0/24 -d 192.168.0.0/24 -j ACCEPT
</span><span class='line'>ip route add 192.168.1.0/24 via 192.168.0.2 dev eth0
</span><span class='line'>exit 0</span></code></pre></td></tr></table></div></figure>


<p>If you created the file, make sure to apply executable permissions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod +x /etc/rc.local</span></code></pre></td></tr></table></div></figure>


<p>Read the secrets and restart strongswan:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ipsec rereadsecrets
</span><span class='line'>$ systemctl restart strongswan</span></code></pre></td></tr></table></div></figure>


<h2>Install Strongswan on Side-B</h2>

<p>Install strongswan and enable the service on boot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt install strongswan -y
</span><span class='line'>$ systemctl enable strongswan</span></code></pre></td></tr></table></div></figure>


<p>The left side will be the side we are configuring and the right side will be the remote side.</p>

<p>Create the config: <code>/etc/ipsec.conf</code> and provide the following config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config setup
</span><span class='line'>    charondebug="all"
</span><span class='line'>    uniqueids=yes
</span><span class='line'>    virtual_private=
</span><span class='line'>    cachecrls=no
</span><span class='line'>
</span><span class='line'>conn vpn-to-side-a
</span><span class='line'>    type=tunnel
</span><span class='line'>    authby=secret
</span><span class='line'>    left=%defaultroute
</span><span class='line'>    leftid=side-b.example.com
</span><span class='line'>    leftsubnet=192.168.1.0/24
</span><span class='line'>    right=%side-a.example.com
</span><span class='line'>    rightid=side-a.example.com
</span><span class='line'>    rightsubnet=192.168.0.0/24
</span><span class='line'>    ike=aes256-sha2_256-modp1024!
</span><span class='line'>    esp=aes256-sha2_256!
</span><span class='line'>    keyingtries=0
</span><span class='line'>    ikelifetime=1h
</span><span class='line'>    lifetime=8h
</span><span class='line'>    dpddelay=30
</span><span class='line'>    dpdtimeout=120
</span><span class='line'>    dpdaction=restart
</span><span class='line'>    auto=start</span></code></pre></td></tr></table></div></figure>


<p>Create the secrets file: <code>/etc/ipsec.secrets</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>side-a.example.com : PSK "pgDU4eKZaQNL7GNRWJPvZbaSYFn2PAFjK9vDOvxAQ85p7qc4"</span></code></pre></td></tr></table></div></figure>


<p>Append the following kernel parameters to <code>/etc/sysctl.conf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>net.ipv4.ip_forward = 1
</span><span class='line'>net.ipv4.conf.all.accept_redirects = 0
</span><span class='line'>net.ipv4.conf.all.send_redirects = 0</span></code></pre></td></tr></table></div></figure>


<p>Save:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sysctl -p</span></code></pre></td></tr></table></div></figure>


<p>We now want to add a POSTROUTING and FORWARD rule using iptables:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -t nat -A POSTROUTING -s 192.168.0.0/24  -d 192.168.1.0/24 -j MASQUERADE
</span><span class='line'>$ iptables -A FORWARD -s 192.168.0.0/24 -d 192.168.1.0/24 -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<p>Now we need to route back:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ip route add 192.168.0.0/24 via 192.168.1.2 dev eth0</span></code></pre></td></tr></table></div></figure>


<p>We want to persist the iptables and static route across reboots, so edit the <code>/etc/rc.local</code> file, if it&rsquo;s not there create it with the following values:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>iptables -t nat -A POSTROUTING -s 192.168.0.0/24  -d 192.168.1.0/24 -j MASQUERADE
</span><span class='line'>iptables -A FORWARD -s 192.168.0.0/24 -d 192.168.1.0/24 -j ACCEPT
</span><span class='line'>ip route add 192.168.0.0/24 via 192.168.1.2 dev eth0
</span><span class='line'>exit 0</span></code></pre></td></tr></table></div></figure>


<p>If you created the file, make sure to apply executable permissions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod +x /etc/rc.local</span></code></pre></td></tr></table></div></figure>


<p>Read the secrets and restart strongswan:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ipsec rereadsecrets
</span><span class='line'>$ systemctl restart strongswan</span></code></pre></td></tr></table></div></figure>


<h2>Verify Status</h2>

<p>Verify that the ipsec tunnel is up on side-a:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ipsec statusall
</span><span class='line'>
</span><span class='line'>Connections:
</span><span class='line'>  vpn-to-side-b:  %any...side-b.example.com,0.0.0.0/0,::/0  IKEv1/2
</span><span class='line'>  vpn-to-side-b:   local:  [side-a.example.com] uses pre-shared key authentication
</span><span class='line'>  vpn-to-side-b:   remote: [side-b.example.com] uses pre-shared key authentication
</span><span class='line'>  vpn-to-side-b:   child:  192.168.0.0/24 === 192.168.1.0/24 TUNNEL
</span><span class='line'>Security Associations (1 up, 0 connecting):
</span><span class='line'>  vpn-to-side-b[1]: ESTABLISHED 28 minutes ago, 192.168.0.2[side-a.example.com]...4x.x.x.214[side-b.example.com]
</span><span class='line'>  vpn-to-side-b[1]: IKEv2 SPIs: 81996170df1c927d_i e8294946491ddf08_r, pre-shared key reauthentication in 2 hours
</span><span class='line'>  vpn-to-side-b[1]: IKE proposal: AES_CBC_128/HMAC_SHA2_256_128/PRF_HMAC_SHA2_256/ECP_256
</span><span class='line'>  vpn-to-side-b{2}:  INSTALLED, TUNNEL, reqid 1, ESP in UDP SPIs: cc4504be_i c294cb26_o
</span><span class='line'>  vpn-to-side-b{2}:  AES_CBC_128/HMAC_SHA2_256_128, 0 bytes_i, 240 bytes_o (4 pkts, 7s ago), rekeying in 18 minutes
</span><span class='line'>  vpn-to-side-b{2}:   192.168.0.0/24 === 192.168.1.0/24</span></code></pre></td></tr></table></div></figure>


<p>Verify that the ipsec tunnel is up on side-b:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ipsec statusall
</span><span class='line'>
</span><span class='line'>Connections:
</span><span class='line'> vpn-to-side-a:  %any...side-a.example.com,0.0.0.0/0,::/0  IKEv1/2
</span><span class='line'> vpn-to-side-a:   local:  [side-b.example.com] uses pre-shared key authentication
</span><span class='line'> vpn-to-side-a:   remote: [side-a.example.com] uses pre-shared key authentication
</span><span class='line'> vpn-to-side-a:   child:  192.168.1.0/24 === 192.168.0.0/24 TUNNEL
</span><span class='line'>Security Associations (1 up, 0 connecting):
</span><span class='line'> vpn-to-side-a[2]: ESTABLISHED 20 minutes ago, 192.168.1.2[side-b.example.com]...14x.x.x.x[side-a.example.com]
</span><span class='line'> vpn-to-side-a[2]: IKEv2 SPIs: 81996170df1c927d_i e8294946491ddf08_r, pre-shared key reauthentication in 2 hours
</span><span class='line'> vpn-to-side-a[2]: IKE proposal: AES_CBC_128/HMAC_SHA2_256_128/PRF_HMAC_SHA2_256/ECP_256
</span><span class='line'> vpn-to-side-a{2}:  INSTALLED, TUNNEL, reqid 1, ESP in UDP SPIs: c294cb26_i cc4504be_o
</span><span class='line'> vpn-to-side-a{2}:  AES_CBC_128/HMAC_SHA2_256_128, 0 bytes_i, 0 bytes_o, rekeying in 26 minutes
</span><span class='line'> vpn-to-side-a{2}:   192.168.1.0/24 === 192.168.0.0/24</span></code></pre></td></tr></table></div></figure>


<p>From side-a (192.168.0.2) ping the gateway on side-b (192.168.1.1):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ $ ping -c2 192.168.1.1
</span><span class='line'>PING 10.3.96.2 (192.168.1.1) 56(84) bytes of data.
</span><span class='line'>64 bytes from 192.168.1.1: icmp_seq=1 ttl=62 time=11.9 ms</span></code></pre></td></tr></table></div></figure>


<p>If you want to be able to reach the private range of the other side of the vpn from any device on your network, you should add a static route on your router to inform your default gateway where to route traffic to.</p>

<p>In this case on side-a (192.168.0.0/24) we want to inform our default gateway to route (192.168.1.0/24) to the VPN as it knows to route that destination over the VPN.</p>

<p>On side-a, on your router, add a static route:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Route: 192.168.1.0
</span><span class='line'>Subnet: 255.255.255.0
</span><span class='line'>Gateway: 192.168.0.2</span></code></pre></td></tr></table></div></figure>


<p>On side-b, on your router, add a static route:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Route: 192.168.0.0
</span><span class='line'>Subnet: 255.255.255.0
</span><span class='line'>Gateway: 192.168.1.2</span></code></pre></td></tr></table></div></figure>


<h2>Optional: Roadwarrior VPN Clients</h2>

<p>This step is optional, but since we can access each others homelabs, we thought it would be nice to be able to access the resources from mobile devices or laptops when we are on remote locations.</p>

<p>We made it that each VPN owner will connect to its own endpoint (for roadwarriors), so side-a (which will be me) will connect to its own dns endpoint to connect when away from home..</p>

<p>I will only demonstrate how to append your config to add the ability for a roadwarrion vpn connection, append to the <code>/etc/ipsec.conf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ...
</span><span class='line'>conn ikev2-vpn
</span><span class='line'>    auto=add
</span><span class='line'>    type=tunnel
</span><span class='line'>    authby=secret
</span><span class='line'>    left=%any
</span><span class='line'>    leftid=side-a.roadwarrior
</span><span class='line'>    leftsubnet=0.0.0.0/0
</span><span class='line'>    right=%any
</span><span class='line'>    rightid=%any
</span><span class='line'>    rightsourceip=10.10.0.0/24
</span><span class='line'>    rightdns=192.168.0.1,8.8.8.8
</span><span class='line'>    auto=start</span></code></pre></td></tr></table></div></figure>


<p>Append the secret in <code>/etc/ipsec.secrets</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ...
</span><span class='line'>side-a.roadwarrior my-laptop : PSK "MySuperSecureSecret123"</span></code></pre></td></tr></table></div></figure>


<p>Add the vpn ip&rsquo;s that we will assign to the roardwarrior clients to the routing table:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ip route add 10.10.0.0/24 via 192.168.0.2 dev eth0</span></code></pre></td></tr></table></div></figure>


<p>If you only want the roadwarriors to be able to reach your network, you will only forward to the local network such as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A FORWARD -s 10.10.0.0/24 -d 192.168.0.0/24 -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<p>But we will be forwarding traffic to all destinations:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A FORWARD -s 10.10.0.0/24 -d 0.0.0.0/0 -j ACCEPT
</span><span class='line'>$ iptables -t nat -A POSTROUTING -s 10.10.0.0/24 -d 0.0.0.0/0 -j MASQUERADE</span></code></pre></td></tr></table></div></figure>


<p>Remember to append the routes to <code>/etc/rc.local</code> to persist across reboots.</p>

<p>Reread the secrets and restart strongswan:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ipsec rereadsecrets
</span><span class='line'>$ systemctl restart strongswan</span></code></pre></td></tr></table></div></figure>


<p>Connecting your VPN Client, I will be using my Laptop, with the following details:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>VPN Type: IKEv2
</span><span class='line'>Description: Home VPN
</span><span class='line'>Server: side-a.example.com
</span><span class='line'>Remote ID: side-a.roadwarrior
</span><span class='line'>Local ID: my-laptop
</span><span class='line'>User Authentication: None
</span><span class='line'>Secret: MySuperSecureSecret123</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>In this tutorial I demonstrated how to setup a site to site ipsec vpn between 2 sides that consists of internet connections that has dynamic ip&rsquo;s and also appending roadwarrior config so that you can connect to your homelab from anywhere in the world.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Persistent Volumes With K3d Kubernetes]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/02/21/persistent-volumes-with-k3d-kubernetes/"/>
    <updated>2020-02-21T00:07:48+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/02/21/persistent-volumes-with-k3d-kubernetes</id>
    <content type="html"><![CDATA[<p>With k3d we can mount the host to container path, and with persistent volumes we can set a hostPath for our persistent volumes. With k3d, all the nodes will be using the same volume mapping which maps back to the host.</p>

<p>We will test the data persistence by writing a file inside a container, kill the pod, then exec into the pod again and test if the data persisted</p>

<h2>The k3d Cluster</h2>

<p>Create the directory on the host where we will persist the data:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; mkdir -p /tmp/k3dvol</span></code></pre></td></tr></table></div></figure>


<p>Create the cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; k3d create --name "k3d-cluster" --volume /tmp/k3dvol:/tmp/k3dvol --publish "80:80" --workers 2
</span><span class='line'>&gt; export KUBECONFIG="$(k3d get-kubeconfig --name='k3d-cluster')"</span></code></pre></td></tr></table></div></figure>


<p>Our application will be a busybox container which will keep running with a ping command, map the persistent volume to <code>/data</code> inside the pod.</p>

<p>Our <code>app.yml</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apiVersion: v1
</span><span class='line'>kind: PersistentVolume
</span><span class='line'>metadata:
</span><span class='line'>  name: task-pv-volume
</span><span class='line'>  labels:
</span><span class='line'>    type: local
</span><span class='line'>spec:
</span><span class='line'>  storageClassName: manual
</span><span class='line'>  capacity:
</span><span class='line'>    storage: 1Gi
</span><span class='line'>  accessModes:
</span><span class='line'>    - ReadWriteOnce
</span><span class='line'>  hostPath:
</span><span class='line'>    path: "/tmp/k3dvol"
</span><span class='line'>---
</span><span class='line'>apiVersion: v1
</span><span class='line'>kind: PersistentVolumeClaim
</span><span class='line'>metadata:
</span><span class='line'>  name: task-pv-claim
</span><span class='line'>spec:
</span><span class='line'>  storageClassName: manual
</span><span class='line'>  accessModes:
</span><span class='line'>    - ReadWriteOnce
</span><span class='line'>  resources:
</span><span class='line'>    requests:
</span><span class='line'>      storage: 1Gi
</span><span class='line'>---
</span><span class='line'>apiVersion: apps/v1
</span><span class='line'>kind: Deployment
</span><span class='line'>metadata:
</span><span class='line'>  name: echo
</span><span class='line'>spec:
</span><span class='line'>  selector:
</span><span class='line'>    matchLabels:
</span><span class='line'>      app: echo
</span><span class='line'>  strategy:
</span><span class='line'>    type: Recreate
</span><span class='line'>  template:
</span><span class='line'>    metadata:
</span><span class='line'>      labels:
</span><span class='line'>        app: echo
</span><span class='line'>    spec:
</span><span class='line'>      volumes:
</span><span class='line'>        - name: task-pv-storage
</span><span class='line'>          persistentVolumeClaim:
</span><span class='line'>            claimName: task-pv-claim
</span><span class='line'>      containers:
</span><span class='line'>      - image: busybox
</span><span class='line'>        name: echo
</span><span class='line'>        volumeMounts:
</span><span class='line'>          - mountPath: "/data"
</span><span class='line'>            name: task-pv-storage
</span><span class='line'>        command: ["ping", "127.0.0.1"]</span></code></pre></td></tr></table></div></figure>


<p>Deploy the workload:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; kubectl apply -f app.yml
</span><span class='line'>persistentvolume/task-pv-volume created
</span><span class='line'>persistentvolumeclaim/task-pv-claim created
</span><span class='line'>deployment.apps/echo created</span></code></pre></td></tr></table></div></figure>


<p>View the persistent volumes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; kubectl get pv
</span><span class='line'>NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                    STORAGECLASS   REASON   AGE
</span><span class='line'>task-pv-volume                             1Gi        RWO            Retain           Bound    default/task-pv-claim    manual                  6s</span></code></pre></td></tr></table></div></figure>


<p>View the Persistent Volume Claims:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; kubectl get pvc
</span><span class='line'>NAME             STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
</span><span class='line'>task-pv-claim    Bound    task-pv-volume                             1Gi        RWO            manual         11s</span></code></pre></td></tr></table></div></figure>


<p>View the pods:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; kubectl get pods
</span><span class='line'>NAME                   READY   STATUS    RESTARTS   AGE
</span><span class='line'>echo-58fd7d9b6-x4rxj   1/1     Running   0          16s</span></code></pre></td></tr></table></div></figure>


<p>Exec into the pod:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; kubectl exec -it echo-58fd7d9b6-x4rxj sh
</span><span class='line'>/ # df -h
</span><span class='line'>Filesystem                Size      Used Available Use% Mounted on
</span><span class='line'>overlay                  58.4G     36.1G     19.3G  65% /
</span><span class='line'>osxfs                   233.6G    139.7G     86.3G  62% /data
</span><span class='line'>/dev/sda1                58.4G     36.1G     19.3G  65% /etc/hosts
</span><span class='line'>/dev/sda1                58.4G     36.1G     19.3G  65% /dev/termination-log
</span><span class='line'>/dev/sda1                58.4G     36.1G     19.3G  65% /etc/hostname
</span><span class='line'>/dev/sda1                58.4G     36.1G     19.3G  65% /etc/resolv.conf</span></code></pre></td></tr></table></div></figure>


<p>Write the hostname of the current pod to the persistent volume path:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/ # echo $(hostname)
</span><span class='line'>echo-58fd7d9b6-x4rxj
</span><span class='line'>/ # echo $(hostname) &gt; /data/hostname.txt
</span><span class='line'>/ # exit</span></code></pre></td></tr></table></div></figure>


<p>Exit the pod and read the content from the host (workstation/laptop):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; cat /tmp/k3dvol/hostname.txt
</span><span class='line'>echo-58fd7d9b6-x4rxj</span></code></pre></td></tr></table></div></figure>


<p>Look at the host where the pod is running on:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; kubectl get nodes -o wide
</span><span class='line'>NAME                       STATUS   ROLES    AGE   VERSION        INTERNAL-IP    EXTERNAL-IP   OS-IMAGE   KERNEL-VERSION     CONTAINER-RUNTIME
</span><span class='line'>k3d-k3d-cluster-server     Ready    master   13m   v1.17.2+k3s1   192.168.32.2   &lt;none&gt;        Unknown    4.9.184-linuxkit   containerd://1.3.3-k3s1
</span><span class='line'>k3d-k3d-cluster-worker-1   Ready    &lt;none&gt;   13m   v1.17.2+k3s1   192.168.32.4   &lt;none&gt;        Unknown    4.9.184-linuxkit   containerd://1.3.3-k3s1
</span><span class='line'>k3d-k3d-cluster-worker-0   Ready    &lt;none&gt;   13m   v1.17.2+k3s1   192.168.32.3   &lt;none&gt;        Unknown    4.9.184-linuxkit   containerd://1.3.3-k3s1</span></code></pre></td></tr></table></div></figure>


<p>Delete the pod:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; kubectl delete pod/echo-58fd7d9b6-x4rxj
</span><span class='line'>pod "echo-58fd7d9b6-x4rxj" deleted</span></code></pre></td></tr></table></div></figure>


<p>Wait until the pod is rescheduled again and verify if the pod is running on a different node:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; kubectl get pods -o wide
</span><span class='line'>NAME                   READY   STATUS    RESTARTS   AGE   IP          NODE                       NOMINATED NODE   READINESS GATES
</span><span class='line'>echo-58fd7d9b6-fkvbs   1/1     Running   0          35s   10.42.2.9   k3d-k3d-cluster-worker-1   &lt;none&gt;           &lt;none&gt;</span></code></pre></td></tr></table></div></figure>


<p>Exec into the new pod:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; kubectl exec -it echo-58fd7d9b6-fkvbs sh</span></code></pre></td></tr></table></div></figure>


<p>View if the data is persisted:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/ # hostname
</span><span class='line'>echo-58fd7d9b6-fkvbs
</span><span class='line'>
</span><span class='line'>/ # cat /data/hostname.txt
</span><span class='line'>echo-58fd7d9b6-x4rxj</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asynchronous Function With OpenFaas]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/02/17/python-asynchronous-function-with-openfaas/"/>
    <updated>2020-02-17T23:51:22+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/02/17/python-asynchronous-function-with-openfaas</id>
    <content type="html"><![CDATA[<p>In this post we will explore how to use asynchronous functions in OpenFaas.</p>

<h2>What are we doing</h2>

<p>A synchronous request blocks the client until operation completes, where a asynchronous request doesn’t block the client, which is nice to use for long-running tasks or function invocations to run in the background through the use of NATS Streaming.</p>

<p>We will be building a Python Flask API Server which will act as our webhook service. When we invoke our function by making a http request, we also include a callback url as a header which will be the address where the queue worker will post it&rsquo;s results.</p>

<p>Then we will make a http request to the synchronous function where we will get the response from the function and a http request to the asynchronous function, where we will get the response from the webhook service&rsquo;s logs</p>

<h2>Deploy OpenFaas</h2>

<p>Deploy OpenFaas on a k3d Kubernetes Cluster if you want to follow along on your laptop. You can follow this post to deploy a kubernetes cluster and deploying openfaas:</p>

<ul>
<li><a href="https://blog.ruanbekker.com/blog/2020/02/17/traefik-ingress-for-openfaas-on-kubernetes-k3d/">https://blog.ruanbekker.com/blog/2020/02/17/traefik-ingress-for-openfaas-on-kubernetes-k3d/</a></li>
</ul>


<h2>Webhook Service</h2>

<p>Lets build the Python Flask Webhook Service, our application code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">request</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">logging.config</span> <span class="kn">import</span> <span class="n">dictConfig</span>
</span><span class='line'>
</span><span class='line'><span class="n">dictConfig</span><span class="p">({</span>
</span><span class='line'>    <span class="s">&#39;version&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;formatters&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;default&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;format&#39;</span><span class="p">:</span> <span class="s">&#39;[</span><span class="si">%(asctime)s</span><span class="s">] </span><span class="si">%(levelname)s</span><span class="s"> in </span><span class="si">%(module)s</span><span class="s">: </span><span class="si">%(message)s</span><span class="s">&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}},</span>
</span><span class='line'>    <span class="s">&#39;handlers&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;wsgi&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;logging.StreamHandler&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;stream&#39;</span><span class="p">:</span> <span class="s">&#39;ext://flask.logging.wsgi_errors_stream&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;formatter&#39;</span><span class="p">:</span> <span class="s">&#39;default&#39;</span>
</span><span class='line'>    <span class="p">}},</span>
</span><span class='line'>    <span class="s">&#39;root&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;level&#39;</span><span class="p">:</span> <span class="s">&#39;INFO&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;handlers&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;wsgi&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;POST&quot;</span><span class="p">,</span> <span class="s">&quot;GET&quot;</span><span class="p">])</span>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&quot;GET&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">response</span><span class="p">[</span><span class="s">&quot;event&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;GET&quot;</span>
</span><span class='line'>        <span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&quot;Received Event: GET&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&quot;POST&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">response</span><span class="p">[</span><span class="s">&quot;event&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">get_data</span><span class="p">()</span>
</span><span class='line'>        <span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&quot;Receveid Event: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">response</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">response</span><span class="p">[</span><span class="s">&quot;event&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;OTHER&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Received Event:&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;event: {} </span><span class="se">\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">&quot;0.0.0.0&quot;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">5000</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our <code>Dockerfile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">FROM</span> <span class="n">python</span><span class="p">:</span><span class="mf">3.7</span><span class="o">-</span><span class="n">alpine</span>
</span><span class='line'><span class="n">RUN</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">flask</span>
</span><span class='line'><span class="n">ADD</span> <span class="n">app</span><span class="o">.</span><span class="n">py</span> <span class="o">/</span><span class="n">app</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="n">EXPOSE</span> <span class="mi">5000</span>
</span><span class='line'><span class="n">CMD</span> <span class="p">[</span><span class="s">&quot;python&quot;</span><span class="p">,</span> <span class="s">&quot;/app.py&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Building and Pushing to Docker Hub (or you can use my docker image):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">docker</span> <span class="n">build</span> <span class="o">-</span><span class="n">t</span> <span class="n">yourusername</span><span class="o">/</span><span class="n">python</span><span class="o">-</span><span class="n">flask</span><span class="o">-</span><span class="n">webhook</span><span class="p">:</span><span class="n">openfaas</span> <span class="o">.</span>
</span><span class='line'><span class="err">$</span> <span class="n">docker</span> <span class="n">push</span> <span class="n">yourusername</span><span class="o">/</span><span class="n">python</span><span class="o">-</span><span class="n">flask</span><span class="o">-</span><span class="n">webhook</span><span class="p">:</span><span class="n">openfaas</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the deployment manifest <code>webhook.yml</code> for our webhook service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">cat</span> <span class="o">&gt;</span> <span class="n">webhook</span><span class="o">.</span><span class="n">yml</span> <span class="o">&lt;&lt;</span> <span class="n">EOF</span>
</span><span class='line'><span class="n">apiVersion</span><span class="p">:</span> <span class="n">v1</span>
</span><span class='line'><span class="n">kind</span><span class="p">:</span> <span class="n">Service</span>
</span><span class='line'><span class="n">metadata</span><span class="p">:</span>
</span><span class='line'>  <span class="n">name</span><span class="p">:</span> <span class="n">webhook</span><span class="o">-</span><span class="n">service</span>
</span><span class='line'><span class="n">spec</span><span class="p">:</span>
</span><span class='line'>  <span class="n">selector</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="p">:</span> <span class="n">webhook</span>
</span><span class='line'>  <span class="n">ports</span><span class="p">:</span>
</span><span class='line'>    <span class="o">-</span> <span class="n">protocol</span><span class="p">:</span> <span class="n">TCP</span>
</span><span class='line'>      <span class="n">port</span><span class="p">:</span> <span class="mi">5000</span>
</span><span class='line'>      <span class="n">targetPort</span><span class="p">:</span> <span class="mi">5000</span>
</span><span class='line'>      <span class="n">name</span><span class="p">:</span> <span class="n">web</span>
</span><span class='line'><span class="o">---</span>
</span><span class='line'><span class="n">apiVersion</span><span class="p">:</span> <span class="n">extensions</span><span class="o">/</span><span class="n">v1beta1</span>
</span><span class='line'><span class="n">kind</span><span class="p">:</span> <span class="n">Ingress</span>
</span><span class='line'><span class="n">metadata</span><span class="p">:</span>
</span><span class='line'>  <span class="n">name</span><span class="p">:</span> <span class="n">webhook</span><span class="o">-</span><span class="n">ingress</span>
</span><span class='line'>  <span class="n">annotations</span><span class="p">:</span>
</span><span class='line'>    <span class="n">kubernetes</span><span class="o">.</span><span class="n">io</span><span class="o">/</span><span class="n">ingress</span><span class="o">.</span><span class="n">class</span><span class="p">:</span> <span class="n">traefik</span>
</span><span class='line'><span class="n">spec</span><span class="p">:</span>
</span><span class='line'>  <span class="n">rules</span><span class="p">:</span>
</span><span class='line'>  <span class="o">-</span> <span class="n">host</span><span class="p">:</span> <span class="n">webhook</span><span class="o">.</span><span class="n">localdns</span><span class="o">.</span><span class="n">xyz</span>
</span><span class='line'>    <span class="n">http</span><span class="p">:</span>
</span><span class='line'>      <span class="n">paths</span><span class="p">:</span>
</span><span class='line'>      <span class="o">-</span> <span class="n">backend</span><span class="p">:</span>
</span><span class='line'>          <span class="n">serviceName</span><span class="p">:</span> <span class="n">webhook</span><span class="o">-</span><span class="n">service</span>
</span><span class='line'>          <span class="n">servicePort</span><span class="p">:</span> <span class="mi">5000</span>
</span><span class='line'><span class="o">---</span>
</span><span class='line'><span class="n">apiVersion</span><span class="p">:</span> <span class="n">apps</span><span class="o">/</span><span class="n">v1</span>
</span><span class='line'><span class="n">kind</span><span class="p">:</span> <span class="n">Deployment</span>
</span><span class='line'><span class="n">metadata</span><span class="p">:</span>
</span><span class='line'>  <span class="n">labels</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="p">:</span> <span class="n">webhook</span>
</span><span class='line'>  <span class="n">name</span><span class="p">:</span> <span class="n">webhook</span>
</span><span class='line'><span class="n">spec</span><span class="p">:</span>
</span><span class='line'>  <span class="n">replicas</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">selector</span><span class="p">:</span>
</span><span class='line'>    <span class="n">matchLabels</span><span class="p">:</span>
</span><span class='line'>      <span class="n">app</span><span class="p">:</span> <span class="n">webhook</span>
</span><span class='line'>  <span class="n">template</span><span class="p">:</span>
</span><span class='line'>    <span class="n">metadata</span><span class="p">:</span>
</span><span class='line'>      <span class="n">labels</span><span class="p">:</span>
</span><span class='line'>        <span class="n">app</span><span class="p">:</span> <span class="n">webhook</span>
</span><span class='line'>    <span class="n">spec</span><span class="p">:</span>
</span><span class='line'>      <span class="n">containers</span><span class="p">:</span>
</span><span class='line'>      <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">webhook</span>
</span><span class='line'>        <span class="n">image</span><span class="p">:</span> <span class="n">ruanbekker</span><span class="o">/</span><span class="n">python</span><span class="o">-</span><span class="n">flask</span><span class="o">-</span><span class="n">webhook</span><span class="p">:</span><span class="n">openfaas</span>
</span><span class='line'>        <span class="n">imagePullPolicy</span><span class="p">:</span> <span class="n">IfNotPresent</span>
</span><span class='line'>        <span class="n">ports</span><span class="p">:</span>
</span><span class='line'>        <span class="o">-</span> <span class="n">containerPort</span><span class="p">:</span> <span class="mi">5000</span>
</span><span class='line'>          <span class="n">name</span><span class="p">:</span> <span class="n">http</span>
</span><span class='line'>          <span class="n">protocol</span><span class="p">:</span> <span class="n">TCP</span>
</span><span class='line'><span class="n">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now deploy to kubernetes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">kubectl</span> <span class="nb">apply</span> <span class="o">-</span><span class="n">f</span> <span class="n">webhook</span><span class="o">.</span><span class="n">yml</span>
</span></code></pre></td></tr></table></div></figure>


<p>After a minute or so, verify that you get a response when making a http request:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">curl</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">webhook</span><span class="o">.</span><span class="n">localdns</span><span class="o">.</span><span class="n">xyz</span>
</span><span class='line'><span class="n">event</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;event&#39;</span><span class="p">:</span> <span class="s">&#39;GET&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy the OpenFaas Function</h2>

<p>We will deploy a dockerfile type function which will return the data that we feed it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">faas</span><span class="o">-</span><span class="n">cli</span> <span class="n">new</span> <span class="o">--</span><span class="n">lang</span> <span class="n">dockerfile</span> <span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span>
</span><span class='line'><span class="err">$</span> <span class="n">faas</span><span class="o">-</span><span class="n">cli</span> <span class="n">up</span> <span class="o">-</span><span class="n">f</span> <span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span><span class="o">.</span><span class="n">yml</span>
</span><span class='line'>
</span><span class='line'><span class="n">Deploying</span><span class="p">:</span> <span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Deployed</span><span class="o">.</span> <span class="mi">202</span> <span class="n">Accepted</span><span class="o">.</span>
</span><span class='line'><span class="n">URL</span><span class="p">:</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">openfaas</span><span class="o">.</span><span class="n">localdns</span><span class="o">.</span><span class="n">xyz</span><span class="o">/</span><span class="n">function</span><span class="o">/</span><span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span>
</span></code></pre></td></tr></table></div></figure>


<p>List the functions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">faas</span><span class="o">-</span><span class="n">cli</span> <span class="nb">list</span>
</span><span class='line'><span class="n">Function</span>                       <span class="n">Invocations</span>      <span class="n">Replicas</span>
</span><span class='line'><span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span>            <span class="mi">0</span>               <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Describe the function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">faas</span><span class="o">-</span><span class="n">cli</span> <span class="n">describe</span> <span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span>
</span><span class='line'><span class="n">Name</span><span class="p">:</span>                <span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span>
</span><span class='line'><span class="n">Status</span><span class="p">:</span>              <span class="n">Ready</span>
</span><span class='line'><span class="n">Replicas</span><span class="p">:</span>            <span class="mi">1</span>
</span><span class='line'><span class="n">Available</span> <span class="n">replicas</span><span class="p">:</span>  <span class="mi">1</span>
</span><span class='line'><span class="n">Invocations</span><span class="p">:</span>         <span class="mi">0</span>
</span><span class='line'><span class="n">Image</span><span class="p">:</span>               <span class="n">ruanbekker</span><span class="o">/</span><span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span><span class="p">:</span><span class="n">latest</span>
</span><span class='line'><span class="n">Function</span> <span class="n">process</span><span class="p">:</span>
</span><span class='line'><span class="n">URL</span><span class="p">:</span>                 <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">openfaas</span><span class="o">.</span><span class="n">localdns</span><span class="o">.</span><span class="n">xyz</span><span class="o">/</span><span class="n">function</span><span class="o">/</span><span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span>
</span><span class='line'><span class="n">Async</span> <span class="n">URL</span><span class="p">:</span>           <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">openfaas</span><span class="o">.</span><span class="n">localdns</span><span class="o">.</span><span class="n">xyz</span><span class="o">/</span><span class="n">async</span><span class="o">-</span><span class="n">function</span><span class="o">/</span><span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span>
</span><span class='line'><span class="n">Labels</span><span class="p">:</span>              <span class="n">faas_function</span> <span class="p">:</span> <span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span>
</span><span class='line'><span class="n">Annotations</span><span class="p">:</span>         <span class="n">prometheus</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="n">scrape</span> <span class="p">:</span> <span class="n">false</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Testing</h2>

<p>Test synchronous function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">curl</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">openfaas</span><span class="o">.</span><span class="n">localdns</span><span class="o">.</span><span class="n">xyz</span><span class="o">/</span><span class="n">function</span><span class="o">/</span><span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span> <span class="o">-</span><span class="n">d</span> <span class="s">&quot;test&quot;</span>
</span><span class='line'><span class="n">test</span>
</span></code></pre></td></tr></table></div></figure>


<p>Test asynchronous function, remember, here we need to provide the callback url which the queue worker will inform, which will be our webhook service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">curl</span> <span class="o">-</span><span class="n">i</span> <span class="o">-</span><span class="n">H</span> <span class="s">&quot;X-Callback-Url: http://webhook-service.default.svc.cluster.local:5000&quot;</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">openfaas</span><span class="o">.</span><span class="n">localdns</span><span class="o">.</span><span class="n">xyz</span><span class="o">/</span><span class="n">async</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">function</span><span class="o">/</span><span class="n">function</span><span class="o">-</span><span class="n">async</span><span class="o">-</span><span class="n">task</span> <span class="o">-</span><span class="n">d</span> <span class="s">&quot;asyyyyync&quot;</span>
</span><span class='line'><span class="n">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">202</span> <span class="n">Accepted</span>
</span><span class='line'><span class="n">Content</span><span class="o">-</span><span class="n">Length</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'><span class="n">Date</span><span class="p">:</span> <span class="n">Mon</span><span class="p">,</span> <span class="mi">17</span> <span class="n">Feb</span> <span class="mi">2020</span> <span class="mi">13</span><span class="p">:</span><span class="mi">57</span><span class="p">:</span><span class="mi">26</span> <span class="n">GMT</span>
</span><span class='line'><span class="n">Vary</span><span class="p">:</span> <span class="n">Accept</span><span class="o">-</span><span class="n">Encoding</span>
</span><span class='line'><span class="n">X</span><span class="o">-</span><span class="n">Call</span><span class="o">-</span><span class="n">Id</span><span class="p">:</span> <span class="n">d757c10f</span><span class="o">-</span><span class="mi">4293</span><span class="o">-</span><span class="mi">4</span><span class="n">daa</span><span class="o">-</span><span class="n">bf52</span><span class="o">-</span><span class="n">bbdc17b7dea3</span>
</span><span class='line'><span class="n">X</span><span class="o">-</span><span class="n">Start</span><span class="o">-</span><span class="n">Time</span><span class="p">:</span> <span class="mi">1581947846737501600</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check the logs of the webhook pod:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">kubectl</span> <span class="n">logs</span> <span class="o">-</span><span class="n">f</span> <span class="n">pod</span><span class="o">/</span><span class="err">$</span><span class="p">(</span><span class="n">kubectl</span> <span class="n">get</span> <span class="n">pods</span> <span class="o">--</span><span class="n">selector</span><span class="o">=</span><span class="n">app</span><span class="o">=</span><span class="n">webhook</span> <span class="o">--</span><span class="n">output</span><span class="o">=</span><span class="n">jsonpath</span><span class="o">=</span><span class="s">&quot;{.items..metadata.name}&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mi">2020</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mi">17</span> <span class="mi">13</span><span class="p">:</span><span class="mi">57</span><span class="p">:</span><span class="mi">26</span><span class="p">,</span><span class="mi">774</span><span class="p">]</span> <span class="n">INFO</span> <span class="ow">in</span> <span class="n">app</span><span class="p">:</span> <span class="n">Receveid</span> <span class="n">Event</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;event&#39;</span><span class="p">:</span> <span class="n">b</span><span class="s">&#39;asyyyyync&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">[</span><span class="mi">2020</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mi">17</span> <span class="mi">13</span><span class="p">:</span><span class="mi">57</span><span class="p">:</span><span class="mi">26</span><span class="p">,</span><span class="mi">775</span><span class="p">]</span> <span class="n">INFO</span> <span class="ow">in</span> <span class="n">internal</span><span class="p">:</span> <span class="mf">10.42</span><span class="o">.</span><span class="mf">0.6</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">17</span><span class="o">/</span><span class="n">Feb</span><span class="o">/</span><span class="mi">2020</span> <span class="mi">13</span><span class="p">:</span><span class="mi">57</span><span class="p">:</span><span class="mi">26</span><span class="p">]</span> <span class="s">&quot;POST / HTTP/1.1&quot;</span> <span class="mi">200</span> <span class="o">-</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check the logs of the queue worker:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">kubectl</span> <span class="n">logs</span> <span class="o">-</span><span class="n">f</span> <span class="n">deployment</span><span class="o">/</span><span class="n">queue</span><span class="o">-</span><span class="n">worker</span> <span class="o">-</span><span class="n">n</span> <span class="n">openfaas</span>
</span><span class='line'><span class="p">[</span><span class="mi">45</span><span class="p">]</span> <span class="n">Received</span> <span class="n">on</span> <span class="p">[</span><span class="n">faas</span><span class="o">-</span><span class="n">request</span><span class="p">]:</span> <span class="s">&#39;sequence:45 subject:&quot;faas-request&quot; data:&quot;{</span><span class="se">\&quot;</span><span class="s">Header</span><span class="se">\&quot;</span><span class="s">:{</span><span class="se">\&quot;</span><span class="s">Accept</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">*/*</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">Accept-Encoding</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">gzip</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">Content-Length</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">9</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">Content-Type</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">application/x-www-form-urlencoded</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">User-Agent</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">curl/7.54.0</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">X-Call-Id</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">d757c10f-4293-4daa-bf52-bbdc17b7dea3</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">X-Callback-Url</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">http://webhook-service.default.svc.cluster.local:5000</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">X-Forwarded-For</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">10.42.0.0</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">X-Forwarded-Host</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">openfaas.localdns.xyz</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">X-Forwarded-Port</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">80</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">X-Forwarded-Proto</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">http</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">X-Forwarded-Server</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">traefik-6787cddb4b-87zss</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">X-Real-Ip</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">10.42.0.0</span><span class="se">\&quot;</span><span class="s">],</span><span class="se">\&quot;</span><span class="s">X-Start-Time</span><span class="se">\&quot;</span><span class="s">:[</span><span class="se">\&quot;</span><span class="s">1581947846737501600</span><span class="se">\&quot;</span><span class="s">]},</span><span class="se">\&quot;</span><span class="s">Host</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;</span><span class="s">openfaas.localdns.xyz</span><span class="se">\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">Body</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;</span><span class="s">YXN5eXl5eW5j</span><span class="se">\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">Method</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;</span><span class="s">POST</span><span class="se">\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">Path</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">QueryString</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">Function</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;</span><span class="s">openfaas-function-cat</span><span class="se">\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">CallbackUrl</span><span class="se">\&quot;</span><span class="s">:{</span><span class="se">\&quot;</span><span class="s">Scheme</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;</span><span class="s">http</span><span class="se">\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">Opaque</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">User</span><span class="se">\&quot;</span><span class="s">:null,</span><span class="se">\&quot;</span><span class="s">Host</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;</span><span class="s">webhook-service.default.svc.cluster.local:5000</span><span class="se">\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">Path</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">RawPath</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">ForceQuery</span><span class="se">\&quot;</span><span class="s">:false,</span><span class="se">\&quot;</span><span class="s">RawQuery</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;\&quot;</span><span class="s">,</span><span class="se">\&quot;</span><span class="s">Fragment</span><span class="se">\&quot;</span><span class="s">:</span><span class="se">\&quot;\&quot;</span><span class="s">}}&quot; timestamp:1581947846738308800 &#39;</span>
</span><span class='line'><span class="n">Invoking</span><span class="p">:</span> <span class="n">openfaas</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">cat</span> <span class="k">with</span> <span class="mi">9</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">via</span><span class="p">:</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">gateway</span><span class="o">.</span><span class="n">openfaas</span><span class="o">.</span><span class="n">svc</span><span class="o">.</span><span class="n">cluster</span><span class="o">.</span><span class="n">local</span><span class="p">:</span><span class="mi">8080</span><span class="o">/</span><span class="n">function</span><span class="o">/</span><span class="n">openfaas</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">cat</span><span class="o">/</span>
</span><span class='line'><span class="n">Invoked</span><span class="p">:</span> <span class="n">openfaas</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">cat</span> <span class="p">[</span><span class="mi">200</span><span class="p">]</span> <span class="ow">in</span> <span class="mf">0.029029</span><span class="n">s</span>
</span><span class='line'><span class="n">Callback</span> <span class="n">to</span><span class="p">:</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">webhook</span><span class="o">-</span><span class="n">service</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">svc</span><span class="o">.</span><span class="n">cluster</span><span class="o">.</span><span class="n">local</span><span class="p">:</span><span class="mi">5000</span>
</span><span class='line'><span class="n">openfaas</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">cat</span> <span class="n">returned</span> <span class="mi">9</span> <span class="nb">bytes</span>
</span><span class='line'><span class="n">Posted</span> <span class="n">result</span> <span class="k">for</span> <span class="n">openfaas</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">cat</span> <span class="n">to</span> <span class="n">callback</span><span class="o">-</span><span class="n">url</span><span class="p">:</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">webhook</span><span class="o">-</span><span class="n">service</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">svc</span><span class="o">.</span><span class="n">cluster</span><span class="o">.</span><span class="n">local</span><span class="p">:</span><span class="mi">5000</span><span class="p">,</span> <span class="n">status</span><span class="p">:</span> <span class="mi">200</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make 1000 Requests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">date</span> <span class="o">&gt;</span> <span class="n">time</span><span class="o">.</span><span class="n">date</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">{</span><span class="mf">1.</span><span class="o">.</span><span class="mi">1000</span><span class="p">}</span>
</span><span class='line'>    <span class="n">do</span>
</span><span class='line'>      <span class="n">curl</span> <span class="o">-</span><span class="n">i</span> <span class="o">-</span><span class="n">H</span> <span class="s">&quot;X-Callback-Url: http://webhook-service.default.svc.cluster.local:5000&quot;</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">openfaas</span><span class="o">.</span><span class="n">localdns</span><span class="o">.</span><span class="n">xyz</span><span class="o">/</span><span class="n">async</span><span class="o">-</span><span class="n">function</span><span class="o">/</span><span class="n">openfaas</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">cat</span> <span class="o">-</span><span class="n">d</span> <span class="s">&quot;asyyyyync&quot;</span>
</span><span class='line'>    <span class="n">done</span>
</span><span class='line'>  <span class="n">date</span> <span class="o">&gt;&gt;</span> <span class="n">time</span><span class="o">.</span><span class="n">date</span>
</span></code></pre></td></tr></table></div></figure>


<p>View the log file that we wrote before we started and finished our requests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">cat</span> <span class="n">time</span><span class="o">.</span><span class="n">date</span>
</span><span class='line'><span class="n">Mon</span> <span class="n">Feb</span> <span class="mi">17</span> <span class="mi">16</span><span class="p">:</span><span class="mo">03</span><span class="p">:</span><span class="mi">16</span> <span class="n">SAST</span> <span class="mi">2020</span>
</span><span class='line'><span class="n">Mon</span> <span class="n">Feb</span> <span class="mi">17</span> <span class="mi">16</span><span class="p">:</span><span class="mo">03</span><span class="p">:</span><span class="mi">48</span> <span class="n">SAST</span> <span class="mi">2020</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last request was actioned at:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">[</span><span class="mi">2020</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mi">17</span> <span class="mi">14</span><span class="p">:</span><span class="mo">03</span><span class="p">:</span><span class="mi">52</span><span class="p">,</span><span class="mi">421</span><span class="p">]</span> <span class="n">INFO</span> <span class="ow">in</span> <span class="n">internal</span><span class="p">:</span> <span class="mf">10.42</span><span class="o">.</span><span class="mf">0.6</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">17</span><span class="o">/</span><span class="n">Feb</span><span class="o">/</span><span class="mi">2020</span> <span class="mi">14</span><span class="p">:</span><span class="mo">03</span><span class="p">:</span><span class="mi">52</span><span class="p">]</span> <span class="s">&quot;POST / HTTP/1.1&quot;</span> <span class="mi">200</span> <span class="o">-</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>This was a basic example to demonstrate async functions using OpenFaas</p>

<h2>OpenFaas Documentation:</h2>

<ul>
<li><a href="https://docs.openfaas.com">https://docs.openfaas.com</a></li>
<li><a href="https://docs.openfaas.com/reference/async/">https://docs.openfaas.com/reference/async/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Traefik Ingress for OpenFaas on Kubernetes (K3d)]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/02/17/traefik-ingress-for-openfaas-on-kubernetes-k3d/"/>
    <updated>2020-02-17T23:36:33+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/02/17/traefik-ingress-for-openfaas-on-kubernetes-k3d</id>
    <content type="html"><![CDATA[<p>In this post we will deploy <a href="https://www.openfaas.com/">OpenFaas</a> on Kubernetes locally using <a href="https://github.com/alexellis/k3sup">k3sup</a> and <a href="https://github.com/rancher/k3d">k3d</a>, then deploy a Traefik Ingress so that we can access the OpenFaas Gateway on HTTP over the standard port 80.</p>

<p>K3d is a amazing wrapper that deploys a k3s cluster on docker, and k3sup makes it very easy to provision OpenFaas to your Kubernetes cluster.</p>

<h2>Deploy a Kubernetes Cluster</h2>

<p>If you have not installed k3d, you can install k3d on mac with brew:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install k3d</span></code></pre></td></tr></table></div></figure>


<p>We will deploy our cluster with 2 worker nodes and publish port 80 to the containers port 80:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ k3d create --name="demo" --workers="2" --publish="80:80"</span></code></pre></td></tr></table></div></figure>


<p>Point the kubeconfig to the location that k3d generated:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export KUBECONFIG="$(k3d get-kubeconfig --name='demo')"</span></code></pre></td></tr></table></div></figure>


<h2>Deploy OpenFaas</h2>

<p>First we need to get k3sup:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -sLfS https://get.k3sup.dev | sudo sh</span></code></pre></td></tr></table></div></figure>


<p>Once k3sup is installed, deploy OpenFaas to your cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ k3sup app install openfaas</span></code></pre></td></tr></table></div></figure>


<p>Give it a minute or so and check if everything is running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get pods -n openfaas
</span><span class='line'>NAMESPACE     NAME                                 READY   STATUS      RESTARTS   AGE
</span><span class='line'>openfaas      alertmanager-546f66b6c6-qtb69        1/1     Running     0          5m
</span><span class='line'>openfaas      basic-auth-plugin-79b9878b7b-7vlln   1/1     Running     0          4m59s
</span><span class='line'>openfaas      faas-idler-db8cd9c7d-8xfpp           1/1     Running     2          4m57s
</span><span class='line'>openfaas      gateway-7dcc6d694d-dmvqn             2/2     Running     0          4m56s
</span><span class='line'>openfaas      nats-d6d574749-rt9vw                 1/1     Running     0          4m56s
</span><span class='line'>openfaas      prometheus-d99669d9b-mfxc8           1/1     Running     0          4m53s
</span><span class='line'>openfaas      queue-worker-75f44b56b9-mhhbv        1/1     Running     0          4m52s</span></code></pre></td></tr></table></div></figure>


<h2>Traefik Ingress</h2>

<p>In my scenario, I am using <code>openfaas.localdns.xyz</code> which resolves to <code>127.0.0.1</code>. Next we need to know to which service to route the traffic to, we can find that by:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get svc/gateway -n openfaas
</span><span class='line'>NAME      TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE
</span><span class='line'>gateway   ClusterIP   10.43.174.57   &lt;none&gt;        8080/TCP   23m</span></code></pre></td></tr></table></div></figure>


<p>Below is our ingress.yml:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apiVersion: extensions/v1beta1
</span><span class='line'>kind: Ingress
</span><span class='line'>metadata:
</span><span class='line'>  name: openfaas-gateway-ingress
</span><span class='line'>  namespace: openfaas
</span><span class='line'>  annotations:
</span><span class='line'>    kubernetes.io/ingress.class: traefik
</span><span class='line'>spec:
</span><span class='line'>  rules:
</span><span class='line'>  - host: openfaas.localdns.xyz
</span><span class='line'>    http:
</span><span class='line'>      paths:
</span><span class='line'>      - backend:
</span><span class='line'>          serviceName: gateway
</span><span class='line'>          servicePort: 8080</span></code></pre></td></tr></table></div></figure>


<p>Apply the ingress:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f ingress.yml
</span><span class='line'>ingress.extensions/openfaas-gateway-ingress created</span></code></pre></td></tr></table></div></figure>


<p>We can the verify that our ingress is visible:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get ingress -n openfaas
</span><span class='line'>NAMESPACE   NAME                       HOSTS               ADDRESS      PORTS   AGE
</span><span class='line'>openfaas    openfaas-gateway-ingress   openfaas.co.local   172.25.0.4   80      28s</span></code></pre></td></tr></table></div></figure>


<h2>OpenFaas CLI</h2>

<p>Install the OpenFaas CLI:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -SLsf https://cli.openfaas.com | sudo sh</span></code></pre></td></tr></table></div></figure>


<p>Export the <code>OPENFAAS_URL</code> to our ingress endpoint and <code>OPENFAAS_PREFIX</code> for your dockerhub username:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export OPENFAAS_URL=http://openfaas.localdns.xyz
</span><span class='line'>$ export OPENFAAS_PREFIX=ruanbekker # change to your username</span></code></pre></td></tr></table></div></figure>


<p>Get your credentials for the OpenFaas Gateway and login with the OpenFaas CLI:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ PASSWORD=$(kubectl get secret -n openfaas basic-auth -o jsonpath="{.data.basic-auth-password}" | base64 --decode; echo)
</span><span class='line'>$ echo -n $PASSWORD | faas-cli login --username admin --password-stdin</span></code></pre></td></tr></table></div></figure>


<h2>Deploy a Function</h2>

<p>Deploy the figlet function as an example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ faas-cli store deploy figlet
</span><span class='line'>
</span><span class='line'>Deployed. 202 Accepted.
</span><span class='line'>URL: http://openfaas.localdns.xyz/function/figlet</span></code></pre></td></tr></table></div></figure>


<p>Invoke the function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://openfaas.localdns.xyz/function/figlet -d 'hello, world'
</span><span class='line'> _          _ _                             _     _
</span><span class='line'>| |__   ___| | | ___    __      _____  _ __| | __| |
</span><span class='line'>| '_ \ / _ \ | |/ _ \   \ \ /\ / / _ \| '__| |/ _` |
</span><span class='line'>| | | |  __/ | | (_) |   \ V  V / (_) | |  | | (_| |
</span><span class='line'>|_| |_|\___|_|_|\___( )   \_/\_/ \___/|_|  |_|\__,_|
</span><span class='line'>                    |/</span></code></pre></td></tr></table></div></figure>


<h2>Delete the Cluster</h2>

<p>Delete your k3d Kubernetes Cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ k3d delete --name demo</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install OpenFaas on K3d Kubernetes]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/02/12/install-openfaas-on-k3d-kubernetes/"/>
    <updated>2020-02-12T00:57:47+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/02/12/install-openfaas-on-k3d-kubernetes</id>
    <content type="html"><![CDATA[<p>In this post we will deploy i<a href="https://www.openfaas.com">openfaas</a> on kubernetes (<a href="https://github.com/rancher/k3d">k3d</a>)</p>

<h2>Kubernetes on k3d</h2>

<p>k3d is a helper tool that provisions a kubernetes distribution, called k3s on docker. To deploy a kubernetes cluster on k3d, you can follow <a href="https://blog.ruanbekker.com/blog/2020/02/12/lightweight-development-kubernetes-options-k3d/">this blog post</a></p>

<h2>Deploy a 3 Node Kubernetes Cluster</h2>

<p>Using k3d, let&rsquo;s deploy a kubernetes cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>k3d create --name<span class="o">=</span><span class="s2">&quot;demo&quot;</span> --workers<span class="o">=</span><span class="s2">&quot;2&quot;</span> --publish<span class="o">=</span><span class="s2">&quot;80:80&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Export the kubeconfig:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">KUBECONFIG</span><span class="o">=</span><span class="s2">&quot;$(k3d get-kubeconfig --name=&#39;demo&#39;)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Verify that you are able to communicate with your kubernetes cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get nodes
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy OpenFaas</h2>

<p>First we need to get <a href="https://k3sup.dev">k3sup</a> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -sLfS https://get.k3sup.dev <span class="p">|</span> sudo sh
</span></code></pre></td></tr></table></div></figure>


<p>Once k3sup is installed, deploy openfaas to your cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>k3sup app install openfaas
</span></code></pre></td></tr></table></div></figure>


<p>Give it a minute or so and check if everything is running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get pods -n openfaas
</span><span class='line'>NAMESPACE     NAME                                 READY   STATUS      RESTARTS   AGE
</span><span class='line'>openfaas      alertmanager-546f66b6c6-qtb69        1/1     Running     <span class="m">0</span>          5m
</span><span class='line'>openfaas      basic-auth-plugin-79b9878b7b-7vlln   1/1     Running     <span class="m">0</span>          4m59s
</span><span class='line'>openfaas      faas-idler-db8cd9c7d-8xfpp           1/1     Running     <span class="m">2</span>          4m57s
</span><span class='line'>openfaas      gateway-7dcc6d694d-dmvqn             2/2     Running     <span class="m">0</span>          4m56s
</span><span class='line'>openfaas      nats-d6d574749-rt9vw                 1/1     Running     <span class="m">0</span>          4m56s
</span><span class='line'>openfaas      prometheus-d99669d9b-mfxc8           1/1     Running     <span class="m">0</span>          4m53s
</span><span class='line'>openfaas      queue-worker-75f44b56b9-mhhbv        1/1     Running     <span class="m">0</span>          4m52s
</span></code></pre></td></tr></table></div></figure>


<p>Install the openfaas-cli:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -SLsf https://cli.openfaas.com <span class="p">|</span> sudo sh
</span></code></pre></td></tr></table></div></figure>


<p>In a screen session, forward port 8080 to the gateway service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>screen -S portfwd-process -m -d sh -c <span class="s2">&quot;kubectl port-forward -n openfaas svc/gateway 8080:8080&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Expose the gateway password as an environment variable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ PASSWORD</span><span class="o">=</span><span class="k">$(</span>kubectl get secret -n openfaas basic-auth -o <span class="nv">jsonpath</span><span class="o">=</span><span class="s2">&quot;{.data.basic-auth-password}&quot;</span> <span class="p">|</span> base64 --decode<span class="p">;</span> <span class="nb">echo</span><span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then login to the gateway:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> -n <span class="nv">$PASSWORD</span> <span class="p">|</span> faas-cli login --username admin --password-stdin
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy a OpenFaas Function</h2>

<p>To list all the functions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli store list
</span></code></pre></td></tr></table></div></figure>


<p>To deploy the figlet function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli store deploy figlet
</span><span class='line'>
</span><span class='line'>Deployed. <span class="m">202</span> Accepted.
</span><span class='line'>URL: http://127.0.0.1:8080/function/figlet
</span></code></pre></td></tr></table></div></figure>


<p>List your deployed functions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli list
</span><span class='line'>Function                          Invocations     Replicas
</span><span class='line'>figlet                            <span class="m">0</span>                1
</span></code></pre></td></tr></table></div></figure>


<p>Invoke your function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl http://127.0.0.1:8080/function/figlet -d <span class="s1">&#39;hello, world&#39;</span>
</span><span class='line'> _          _ _                             _     _
</span><span class='line'><span class="p">|</span> <span class="p">|</span>__   ___<span class="p">|</span> <span class="p">|</span> <span class="p">|</span> ___    __      _____  _ __<span class="p">|</span> <span class="p">|</span> __<span class="p">|</span> <span class="p">|</span>
</span><span class='line'><span class="p">|</span> <span class="s1">&#39;_ \ / _ \ | |/ _ \   \ \ /\ / / _ \| &#39;</span>__<span class="p">|</span> <span class="p">|</span>/ _<span class="sb">`</span> <span class="p">|</span>
</span><span class='line'><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span>  __/ <span class="p">|</span> <span class="p">|</span> <span class="o">(</span>_<span class="o">)</span> <span class="p">|</span>   <span class="se">\ </span>V  V / <span class="o">(</span>_<span class="o">)</span> <span class="p">|</span> <span class="p">|</span>  <span class="p">|</span> <span class="p">|</span> <span class="o">(</span>_<span class="p">|</span> <span class="p">|</span>
</span><span class='line'><span class="p">|</span>_<span class="p">|</span> <span class="p">|</span>_<span class="p">|</span><span class="se">\_</span>__<span class="p">|</span>_<span class="p">|</span>_<span class="p">|</span><span class="se">\_</span>__<span class="o">(</span> <span class="o">)</span>   <span class="se">\_</span>/<span class="se">\_</span>/ <span class="se">\_</span>__/<span class="p">|</span>_<span class="p">|</span>  <span class="p">|</span>_<span class="p">|</span><span class="se">\_</span>_,_<span class="p">|</span>
</span><span class='line'>                    <span class="p">|</span>/
</span></code></pre></td></tr></table></div></figure>


<h2>Delete your Cluster</h2>

<p>When you are done, delete your kubernetes cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>k3d delete --name demo
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thank you for reading. If you like my content, feel free to visit me at <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<p><a href="https://twitter.com/ruanbekker"><img src="https://user-images.githubusercontent.com/567298/71188576-e2410f80-2289-11ea-8667-08f0c14ab7b5.png" alt="" /></a></p>

<p><a href="https://ko-fi.com/A6423ZIQ"><img src="https://www.ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lightweight Development Kubernetes Options: K3d]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/02/12/lightweight-development-kubernetes-options-k3d/"/>
    <updated>2020-02-12T00:27:00+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/02/12/lightweight-development-kubernetes-options-k3d</id>
    <content type="html"><![CDATA[<p>In this post we will cover a lightweight development kubernetes called, &ldquo;<a href="https://github.com/rancher/k3d">k3d</a>&rdquo; which we will deploy on a mac.</p>

<h2>What is k3d</h2>

<p><a href="https://github.com/rancher/k3d">k3d</a> is a binary that provisions a <a href="https://github.com/rancher/k3s">k3s</a> kubernetes cluster on docker</p>

<h2>Pre-Requirements</h2>

<p>You will require docker and we will be using brew to install k3d on a mac.</p>

<h2>Install k3d</h2>

<p>Installing k3d is as easy as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install k3d
</span></code></pre></td></tr></table></div></figure>


<p>Verify your installation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>k3d --version
</span><span class='line'>k3d version v1.3.1
</span></code></pre></td></tr></table></div></figure>


<h2>Deploy a 3 Node Cluster</h2>

<p>Using k3d, we will deploy a 3 node k3s cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>k3d create --name<span class="o">=</span><span class="s2">&quot;demo&quot;</span> --workers<span class="o">=</span><span class="s2">&quot;2&quot;</span> --publish<span class="o">=</span><span class="s2">&quot;80:80&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will deploy a master and 2 worker nodes and we will also publish our host port 80 to our container port 80 (k3s comes default with traefik)</p>

<p>Set your kubeconfig:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">KUBECONFIG</span><span class="o">=</span><span class="s2">&quot;$(k3d get-kubeconfig --name=&#39;demo&#39;)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Test it out by listing your nodes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get nodes
</span><span class='line'>NAME                STATUS   ROLES    AGE    VERSION
</span><span class='line'>k3d-demo-server     Ready    master   102s   v1.14.6-k3s.1
</span><span class='line'>k3d-demo-worker-0   Ready    worker   102s   v1.14.6-k3s.1
</span><span class='line'>k3d-demo-worker-1   Ready    worker   102s   v1.14.6-k3s.1
</span></code></pre></td></tr></table></div></figure>


<p>That was easy right?</p>

<h2>Deploy a Sample App</h2>

<p>We will deploy a simple golang web application that will return the container name upon a http request. We will also make use of the traefik ingress for demonstration.</p>

<p>Our deployment manifest that I will save as <code>app.yml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">extensions/v1beta1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Deployment</span>
</span><span class='line'><span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">k3s-demo</span>
</span><span class='line'>  <span class="l-Scalar-Plain">namespace</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">default</span>
</span><span class='line'><span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">replicas</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2</span>
</span><span class='line'>  <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">matchLabels</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">k3d-demo</span>
</span><span class='line'>  <span class="l-Scalar-Plain">template</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">k3d-demo</span>
</span><span class='line'>    <span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">containers</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">k3d-demo</span>
</span><span class='line'>        <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ruanbekker/hostname:latest</span>
</span><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">v1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Service</span>
</span><span class='line'><span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">k3d-demo</span>
</span><span class='line'>  <span class="l-Scalar-Plain">namespace</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">default</span>
</span><span class='line'><span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http</span>
</span><span class='line'>    <span class="l-Scalar-Plain">targetPort</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">8000</span>
</span><span class='line'>    <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">80</span>
</span><span class='line'>  <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">k3d-demo</span>
</span><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">extensions/v1beta1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Ingress</span>
</span><span class='line'><span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">k3d-demo</span>
</span><span class='line'>  <span class="l-Scalar-Plain">annotations</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">kubernetes.io/ingress.class</span><span class="p-Indicator">:</span> <span class="s">&quot;traefik&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">rules</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">k3d-demo.example.org</span>
</span><span class='line'>    <span class="l-Scalar-Plain">http</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">paths</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/</span>
</span><span class='line'>        <span class="l-Scalar-Plain">backend</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">serviceName</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">k3d-demo</span>
</span><span class='line'>          <span class="l-Scalar-Plain">servicePort</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http</span>
</span></code></pre></td></tr></table></div></figure>


<p>Deploy our application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl apply -f app.yml
</span><span class='line'>deployment.extensions/k3s-demo created
</span><span class='line'>service/k3d-demo created
</span><span class='line'>ingress.extensions/k3d-demo created
</span></code></pre></td></tr></table></div></figure>


<p>Verify that the pods are running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>kubectl get pods
</span><span class='line'>NAME                       READY   STATUS    RESTARTS   AGE
</span><span class='line'>k3s-demo-f76d866b9-dv5z9   1/1     Running   <span class="m">0</span>          10s
</span><span class='line'>k3s-demo-f76d866b9-qxltk   1/1     Running   <span class="m">0</span>          10s
</span></code></pre></td></tr></table></div></figure>


<p>Make a http request:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -H <span class="s2">&quot;Host: k3d-demo.example.org&quot;</span> http://localhost
</span><span class='line'>Hostname: k3d-demo-f76d866b9-qxltk
</span></code></pre></td></tr></table></div></figure>


<h2>Deleting your Cluster</h2>

<p>To delete your cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>k3d delete --name demo
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thank you for reading. If you like my content, feel free to visit me at <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<p><a href="https://twitter.com/ruanbekker"><img src="https://user-images.githubusercontent.com/567298/71188576-e2410f80-2289-11ea-8667-08f0c14ab7b5.png" alt="" /></a></p>

<p><a href="https://ko-fi.com/A6423ZIQ"><img src="https://www.ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Localstack as a Service Container for AWS Mock Services on Drone CI]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/02/04/run-localstack-as-a-service-container-for-aws-mock-services-on-drone-ci/"/>
    <updated>2020-02-04T23:43:30+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/02/04/run-localstack-as-a-service-container-for-aws-mock-services-on-drone-ci</id>
    <content type="html"><![CDATA[<p>In this tutorial we will setup a basic pipeline in drone to make use of service containers, we will provision localstack so that we can provision AWS mock services.</p>

<p>We will create a kinesis stream on localstack, when the service is up, we will create a stream, put 100 records in the stream, read them from the stream and delete the kinesis stream.</p>

<h2>Gitea and Drone Stack</h2>

<p>If you don’t have the stack setup, have a look at <a href="https://blog.ruanbekker.com/blog/2020/02/04/setup-gitea-and-drone-on-docker-2020-edition/">this post</a> where I go into detail on how to get that setup.</p>

<h2>Create the Drone Config</h2>

<p>In gitea, I have created a new git repository and created my drone config as <code>.drone.yml</code> with this pipeline config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>kind: pipeline
</span><span class='line'>type: docker
</span><span class='line'>name: localstack
</span><span class='line'>
</span><span class='line'>platform:
</span><span class='line'>  os: linux
</span><span class='line'>  arch: amd64
</span><span class='line'>
</span><span class='line'>steps:
</span><span class='line'>  - name: wait-for-localstack
</span><span class='line'>    image: busybox
</span><span class='line'>    commands:
</span><span class='line'>      - sleep 10
</span><span class='line'>
</span><span class='line'>  - name: list-kinesis-streams
</span><span class='line'>    image: ruanbekker/awscli
</span><span class='line'>    environment:
</span><span class='line'>      AWS_ACCESS_KEY_ID: 123
</span><span class='line'>      AWS_SECRET_ACCESS_KEY: xyz
</span><span class='line'>      AWS_DEFAULT_REGION: eu-west-1
</span><span class='line'>    commands:
</span><span class='line'>      - aws --endpoint-url=http://localstack:4568 kinesis list-streams
</span><span class='line'>
</span><span class='line'>  - name: create-kinesis-streams
</span><span class='line'>    image: ruanbekker/awscli
</span><span class='line'>    environment:
</span><span class='line'>      AWS_ACCESS_KEY_ID: 123
</span><span class='line'>      AWS_SECRET_ACCESS_KEY: xyz
</span><span class='line'>      AWS_DEFAULT_REGION: eu-west-1
</span><span class='line'>    commands:
</span><span class='line'>      - aws --endpoint-url=http://localstack:4568 kinesis create-stream --stream-name mystream --shard-count 1
</span><span class='line'>
</span><span class='line'>  - name: describe-kinesis-streams
</span><span class='line'>    image: ruanbekker/awscli
</span><span class='line'>    environment:
</span><span class='line'>      AWS_ACCESS_KEY_ID: 123
</span><span class='line'>      AWS_SECRET_ACCESS_KEY: xyz
</span><span class='line'>      AWS_DEFAULT_REGION: eu-west-1
</span><span class='line'>    commands:
</span><span class='line'>      - aws --endpoint-url=http://localstack:4568 kinesis describe-stream --stream-name mystream
</span><span class='line'>
</span><span class='line'>  - name: put-record-into-kinesis
</span><span class='line'>    image: ruanbekker/awscli
</span><span class='line'>    environment:
</span><span class='line'>      AWS_ACCESS_KEY_ID: 123
</span><span class='line'>      AWS_SECRET_ACCESS_KEY: xyz
</span><span class='line'>      AWS_DEFAULT_REGION: eu-west-1
</span><span class='line'>    commands:
</span><span class='line'>      - for record in $$(seq 1 100); do aws --endpoint-url=http://localstack:4568 kinesis put-record --stream-name mystream --partition-key 123 --data testdata_$$record ; done
</span><span class='line'>
</span><span class='line'>  - name: get-record-from-kinesis
</span><span class='line'>    image: ruanbekker/awscli
</span><span class='line'>    environment:
</span><span class='line'>      AWS_ACCESS_KEY_ID: 123
</span><span class='line'>      AWS_SECRET_ACCESS_KEY: xyz
</span><span class='line'>      AWS_DEFAULT_REGION: eu-west-1
</span><span class='line'>    commands:
</span><span class='line'>      - SHARD_ITERATOR=$$(aws --endpoint-url=http://localstack:4568 kinesis get-shard-iterator --shard-id shardId-000000000000 --shard-iterator-type TRIM_HORIZON --stream-name mystream --query 'ShardIterator' --output text)
</span><span class='line'>      - for each in $$(aws --endpoint-url=http://localstack:4568 kinesis get-records --shard-iterator $$SHARD_ITERATOR | jq -cr '.Records[].Data'); do echo $each | base64 -d ; echo "" ; done
</span><span class='line'>
</span><span class='line'>  - name: delete-kinesis-stream
</span><span class='line'>    image: ruanbekker/awscli
</span><span class='line'>    environment:
</span><span class='line'>      AWS_ACCESS_KEY_ID: 123
</span><span class='line'>      AWS_SECRET_ACCESS_KEY: xyz
</span><span class='line'>      AWS_DEFAULT_REGION: eu-west-1
</span><span class='line'>    commands:
</span><span class='line'>      - aws --endpoint-url=http://localstack:4568 kinesis delete-stream --stream-name mystream
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  - name: localstack
</span><span class='line'>    image: localstack/localstack
</span><span class='line'>    privileged: true
</span><span class='line'>    environment:
</span><span class='line'>      DOCKER_HOST: unix:///var/run/docker.sock
</span><span class='line'>    volumes:
</span><span class='line'>      - name: docker-socket
</span><span class='line'>        path: /var/run/docker.sock
</span><span class='line'>      - name: localstack-vol
</span><span class='line'>        path: /tmp/localstack
</span><span class='line'>    ports:
</span><span class='line'>      - 8080
</span><span class='line'>
</span><span class='line'>volumes:
</span><span class='line'>- name: localstack-vol
</span><span class='line'>  temp: {}
</span><span class='line'>- name: docker-socket
</span><span class='line'>  host:
</span><span class='line'>    path: /var/run/docker.sock</span></code></pre></td></tr></table></div></figure>


<p>To explain what we are doing, we are bringing up localstack as a service container, then using the aws cli tools we point to the localstack kinesis endpoint, creating a kinesis stream, put 100 records to the stream, then we read from the stream and delete thereafter.</p>

<h2>Trigger the Pipeline</h2>

<p>Then I head to drone activate my new git repository and select the repository as &ldquo;Trusted&rdquo;. I commited a dummy file to trigger the pipeline and it should look like this:</p>

<p><img width="893" alt="image" src="https://user-images.githubusercontent.com/567298/73788817-63a32180-47a6-11ea-96c7-6abba7af2b27.png"></p>

<p>List Streams:</p>

<p><img width="974" alt="image" src="https://user-images.githubusercontent.com/567298/73788860-73bb0100-47a6-11ea-9c80-f2b8bfc18d53.png"></p>

<p>Put Records:</p>

<p><img width="896" alt="image" src="https://user-images.githubusercontent.com/567298/73788895-87666780-47a6-11ea-8d90-2c454ec9174a.png"></p>

<p>Delete Stream:</p>

<p><img width="924" alt="image" src="https://user-images.githubusercontent.com/567298/73788988-aebd3480-47a6-11ea-85d9-9ed7424c648b.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Kubernetes (K3s) as a Service Container on Drone CI]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/02/04/run-kubernetes-k3s-as-a-service-container-on-drone-ci/"/>
    <updated>2020-02-04T22:37:06+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/02/04/run-kubernetes-k3s-as-a-service-container-on-drone-ci</id>
    <content type="html"><![CDATA[<p><a href="https://docs.drone.io/pipeline/docker/syntax/services/">Drone services</a> allow you to run a service container and will be available for the duration of your build, which is great if you want a ephemeral service to test your applications against.</p>

<p>Today we will experiment with services on <a href="https://github.com/drone/drone">drone</a>  and will deploy a <a href="https://github.com/rancher/k3s">k3s</a> (a kubernetes distribution built by rancher) cluster as a drone service and interact with our cluster using kubectl.</p>

<p>I will be using multiple pipelines, where we will first deploy our &ldquo;dev cluster&rdquo;, when it&rsquo;s up, we will use kubectl to interact with the cluster, once that is done, we will deploy our &ldquo;staging cluster&rdquo; and do the same.</p>

<p>This is very basic and we are not doing anything special, but this is a starting point and you can do pretty much whatever you want.</p>

<h2>What is Drone</h2>

<p>If you are not aware of Drone, Drone is a container-native continious deliver platform built on Go and you can check them out <a href="https://github.com/drone/drone">here: github.com/drone</a></p>

<h2>Setup Gitea and Drone</h2>

<p>If you don&rsquo;t have the stack setup, have a look at <a href="https://blog.ruanbekker.com/blog/2020/02/04/setup-gitea-and-drone-on-docker-2020-edition/">this post</a> where I go into detail on how to get that setup.</p>

<h2>Create your Git Repo</h2>

<p>Go ahead and create a git repo, you can name it anything, then it should look something like this:</p>

<p><img width="1171" alt="image" src="https://user-images.githubusercontent.com/567298/73783555-90ead200-479c-11ea-8386-12518fb21b22.png"></p>

<p>Create a drone configuration, <code>.drone.yml</code> my pipeline will look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>kind: pipeline
</span><span class='line'>type: docker
</span><span class='line'>name: dev
</span><span class='line'>
</span><span class='line'>platform:
</span><span class='line'>  os: linux
</span><span class='line'>  arch: amd64
</span><span class='line'>
</span><span class='line'>steps:
</span><span class='line'>  - name: wait-for-k3s
</span><span class='line'>    image: ruanbekker/build-tools
</span><span class='line'>    commands:
</span><span class='line'>      - sleep 30
</span><span class='line'>
</span><span class='line'>  - name: prepare-k3s-kubeconfig
</span><span class='line'>    image: alpine
</span><span class='line'>    volumes:
</span><span class='line'>      - name: k3s-kubeconfig
</span><span class='line'>        path: /k3s-kubeconfig
</span><span class='line'>    detach: false
</span><span class='line'>    commands:
</span><span class='line'>      - sed -i -e "s/127.0.0.1/k3s/g" /k3s-kubeconfig/kubeconfig.yaml
</span><span class='line'>
</span><span class='line'>  - name: test-kubernetes
</span><span class='line'>    image: ruanbekker/kubectl
</span><span class='line'>    volumes:
</span><span class='line'>      - name: k3s-kubeconfig
</span><span class='line'>        path: /tmp
</span><span class='line'>    environment:
</span><span class='line'>      KUBECONFIG: /tmp/kubeconfig.yaml
</span><span class='line'>    commands:
</span><span class='line'>      - kubectl get nodes -o wide
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  - name: k3s
</span><span class='line'>    image: rancher/k3s:v0.9.1
</span><span class='line'>    privileged: true
</span><span class='line'>    command:
</span><span class='line'>      - server
</span><span class='line'>    environment:
</span><span class='line'>      K3S_KUBECONFIG_OUTPUT: /k3s-kubeconfig/kubeconfig.yaml
</span><span class='line'>      K3S_KUBECONFIG_MODE: 777
</span><span class='line'>    volumes:
</span><span class='line'>      - name: k3s-kubeconfig
</span><span class='line'>        path: /k3s-kubeconfig
</span><span class='line'>    ports:
</span><span class='line'>      - 6443
</span><span class='line'>
</span><span class='line'>volumes:
</span><span class='line'>- name: k3s-kubeconfig
</span><span class='line'>  temp: {}
</span><span class='line'>
</span><span class='line'>---
</span><span class='line'>kind: pipeline
</span><span class='line'>type: docker
</span><span class='line'>name: staging
</span><span class='line'>
</span><span class='line'>platform:
</span><span class='line'>  os: linux
</span><span class='line'>  arch: amd64
</span><span class='line'>
</span><span class='line'>steps:
</span><span class='line'>  - name: wait-for-k3s
</span><span class='line'>    image: ruanbekker/build-tools
</span><span class='line'>    commands:
</span><span class='line'>      - sleep 30
</span><span class='line'>
</span><span class='line'>  - name: prepare-k3s-kubeconfig
</span><span class='line'>    image: alpine
</span><span class='line'>    volumes:
</span><span class='line'>      - name: k3s-kubeconfig
</span><span class='line'>        path: /k3s-kubeconfig
</span><span class='line'>    detach: false
</span><span class='line'>    commands:
</span><span class='line'>      - sed -i -e "s/127.0.0.1/k3s/g" /k3s-kubeconfig/kubeconfig.yaml
</span><span class='line'>
</span><span class='line'>  - name: test-kubernetes
</span><span class='line'>    image: ruanbekker/kubectl
</span><span class='line'>    volumes:
</span><span class='line'>      - name: k3s-kubeconfig
</span><span class='line'>        path: /tmp
</span><span class='line'>    environment:
</span><span class='line'>      KUBECONFIG: /tmp/kubeconfig.yaml
</span><span class='line'>    commands:
</span><span class='line'>      - kubectl get nodes -o wide
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  - name: k3s
</span><span class='line'>    image: rancher/k3s:v0.9.1
</span><span class='line'>    privileged: true
</span><span class='line'>    command:
</span><span class='line'>      - server
</span><span class='line'>    environment:
</span><span class='line'>      K3S_KUBECONFIG_OUTPUT: /k3s-kubeconfig/kubeconfig.yaml
</span><span class='line'>      K3S_KUBECONFIG_MODE: 777
</span><span class='line'>    volumes:
</span><span class='line'>      - name: k3s-kubeconfig
</span><span class='line'>        path: /k3s-kubeconfig
</span><span class='line'>    ports:
</span><span class='line'>      - 6443
</span><span class='line'>
</span><span class='line'>volumes:
</span><span class='line'>- name: k3s-kubeconfig
</span><span class='line'>  temp: {}
</span><span class='line'>
</span><span class='line'>depends_on:
</span><span class='line'>- dev</span></code></pre></td></tr></table></div></figure>


<p>In this pipeline you can see that the staging pipeline depends on dev, so dev pipeline will start by creating the k3s service container, once its up I am using a step just to sleep for 30 seconds to allow it to boot.</p>

<p>Then I have defined a volume that will be persistent during the build time, which we will use to dump our kubeconfig file and update the hostname of our kubernetes endpoint. Once that is done our last step will set that file to the environment and use kubectl to interact with kubernetes.</p>

<p>Once our dev pipeline has finished, our staging pipeline will start.</p>

<h2>Activate the Repo in Drone</h2>

<p>Head over to drone on port <code>80</code> and activate the newly created git repo (and make sure that you select &ldquo;Trusted&rdquo;) and you will see the activity feed being empty:</p>

<p><img width="1008" alt="image" src="https://user-images.githubusercontent.com/567298/73784085-80872700-479d-11ea-9005-4cac54ac000d.png"></p>

<p>Commit a dummy file to git and you should see your pipeline being triggered:</p>

<p><img width="1013" alt="image" src="https://user-images.githubusercontent.com/567298/73784286-dd82dd00-479d-11ea-93f4-6363da53c1c1.png"></p>

<p>Once your pipeline has finished and everything succeeded, you should see the output of your nodes in your kubernetes service container:</p>

<p><img width="1068" alt="image" src="https://user-images.githubusercontent.com/567298/73784435-220e7880-479e-11ea-8f9d-a9856632302d.png"></p>

<p>As I mentioned earlier, we are not doing anything special but service containers allows us to do some awesome things.</p>

<p>Thank you for reading. If you like my content, feel free to visit me at <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<p><a href="https://twitter.com/ruanbekker"><img src="https://user-images.githubusercontent.com/567298/71188576-e2410f80-2289-11ea-8667-08f0c14ab7b5.png" alt="" /></a></p>

<p><a href="https://ko-fi.com/A6423ZIQ"><img src="https://www.ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Gitea and Drone on Docker 2020 Edition]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/02/04/setup-gitea-and-drone-on-docker-2020-edition/"/>
    <updated>2020-02-04T21:58:39+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/02/04/setup-gitea-and-drone-on-docker-2020-edition</id>
    <content type="html"><![CDATA[<p>This post will show how to setup gitea and drone on a docker host with docker-compose. The drone example in this tutorial will be very basic, but in future posts I will focus more on pipeline examples using drone.</p>

<p>As this post I will use to link back for those who needs to setup the stack first.</p>

<h2>Deploy Gitea and Drone</h2>

<p>Get the docker-compose.yml:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget -O docker-compose.yml https://gist.githubusercontent.com/ruanbekker/27d2cb2e3f4194ee5cfe2bcdc9c4bf52/raw/25590a23e87190a871d70fd57ab461ce303cd286/2020.02.04-gitea-drone_docker-compose.yml</span></code></pre></td></tr></table></div></figure>


<p>Verify the environment variables and adjust the defaults if you want to change something, if you want your git clone ssh url to point to a dns name as well as the url for gitea, then change the following to your dns:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  gitea:
</span><span class='line'>    ...
</span><span class='line'>    environment:
</span><span class='line'>      - ROOT_URL=http://gi.myresolvable.dns:3000
</span><span class='line'>      - SSH_DOMAIN=git.myresolvable.dns</span></code></pre></td></tr></table></div></figure>


<p>then deploy:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose up -d</span></code></pre></td></tr></table></div></figure>


<h2>Access your Stack</h2>

<p>The default port for Gitea in this setup is port <code>3000</code>:</p>

<p><img width="1273" alt="image" src="https://user-images.githubusercontent.com/567298/73778916-9b08d280-4794-11ea-88a6-8aafcd6e2656.png"></p>

<p>Initial configuration will be pre-populated from our environment variables:</p>

<p><img width="859" alt="image" src="https://user-images.githubusercontent.com/567298/73778973-b378ed00-4794-11ea-8615-d8deeee07b32.png"></p>

<p>From the additional settings section, create your admin user (this user is referenced in our docker-compose as well)</p>

<p><img width="871" alt="image" src="https://user-images.githubusercontent.com/567298/73779102-df946e00-4794-11ea-9177-712904e9dbee.png"></p>

<p>Because I am using gitea as my hostname, you will be redirected to <code>http://gitea:3000/user/login</code>, if you don&rsquo;t have a host entry setup for that it will fail, but you can just replace your servers ip in the request url and it will take you to the login screen, and after logging on, you should see this screen:</p>

<p><img width="1269" alt="image" src="https://user-images.githubusercontent.com/567298/73779494-752ffd80-4795-11ea-9c34-ff9eee269b0c.png"></p>

<p>Access drone on port 80, you will be directed to the login screen:</p>

<p><img width="773" alt="image" src="https://user-images.githubusercontent.com/567298/73779560-9395f900-4795-11ea-8f90-e420aa4c383d.png"></p>

<p>Use the same credentials that you have used to sign up with gitea, and after logging on, you should see this:</p>

<p><img width="1280" alt="image" src="https://user-images.githubusercontent.com/567298/73779651-b2948b00-4795-11ea-9939-51531467b600.png"></p>

<p>If ever your login does not work, just delete the drone access token on gitea (gitea:3000/user/settings/applications)</p>

<h2>Create a Git Repository</h2>

<p>On gitea, create a new git repository:</p>

<p><img width="698" alt="image" src="https://user-images.githubusercontent.com/567298/73779800-fdae9e00-4795-11ea-9422-938a24c08eb3.png"></p>

<p>You should now see your git repository:</p>

<p><img width="1005" alt="image" src="https://user-images.githubusercontent.com/567298/73779843-10c16e00-4796-11ea-98c6-2f70519146f0.png"></p>

<p>Create a new file <code>.drone.yml</code> with the following content:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kind: pipeline
</span><span class='line'>name: hello-world
</span><span class='line'>type: docker
</span><span class='line'>
</span><span class='line'>steps:
</span><span class='line'>  - name: say-hello
</span><span class='line'>    image: busybox
</span><span class='line'>    commands:
</span><span class='line'>      - echo hello-world</span></code></pre></td></tr></table></div></figure>


<p>It should look like this:</p>

<p><img width="1019" alt="image" src="https://user-images.githubusercontent.com/567298/73779989-4fefbf00-4796-11ea-8e65-8441d3440d19.png"></p>

<h2>Configure Drone</h2>

<p>Commit the file in your git repository and head over to drone (which should be available on port <code>80</code>) and select &ldquo;Sync&rdquo;, after a couple of seconds you should see the git repository:</p>

<p><img width="860" alt="image" src="https://user-images.githubusercontent.com/567298/73780087-7f063080-4796-11ea-92ce-3d216c4e4097.png"></p>

<p>Select &ldquo;Activate&rdquo; and &ldquo;Activate Repository&rdquo;, on the next screen select &ldquo;Trusted&rdquo;, verify that the configuration file name is the same as which we created, then select save:</p>

<p><img width="860" alt="image" src="https://user-images.githubusercontent.com/567298/73780208-b543b000-4796-11ea-98f1-0f072eeae0ef.png"></p>

<h2>Trigger the Build</h2>

<p>If you click on &ldquo;Activity Feed&rdquo; you should see a empty feed. Head back to git and commit a dummy file to trigger the build to start. I will create a file name <code>trigger</code> with the value as <code>1</code> for my dummy file.</p>

<p>After committing the file, you will see on drone that the build started:</p>

<p><img width="900" alt="image" src="https://user-images.githubusercontent.com/567298/73780444-297e5380-4797-11ea-94e6-58c01ae11143.png"></p>

<p>When we select the build, you can see we have a clone step and the step that we defined to echo &ldquo;hello-world&rdquo;:</p>

<p><img width="851" alt="image" src="https://user-images.githubusercontent.com/567298/73780516-46b32200-4797-11ea-8a07-0563dea90d83.png"></p>

<h2>Thank You</h2>

<p>This was a basic introduction for gitea and drone, but I will use this post in conjunction with more gitea examples in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Thanos on Docker: A Highly Available Prometheus]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/02/01/setup-thanos-on-docker-a-highly-available-prometheus/"/>
    <updated>2020-02-01T01:28:12+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/02/01/setup-thanos-on-docker-a-highly-available-prometheus</id>
    <content type="html"><![CDATA[<p>Today we will look at Thanos, a open source, highly available prometheus setup with long term storage capabilites, that we will run on docker to simplify the setup.</p>

<p>Note that running this proof of concept does not make it highly available as we will run everything on one host, but it will give you a feel what Thanos is about. In a future post, I will setup Thanos in a multi node environment.</p>

<h2>Prometheus</h2>

<p>If you are not familiar with <a href="https://prometheus.io">Prometheus</a>, then have a look at their documentation, but in short, prometheus is a open source monitoring system and time series database developed by soundcloud.</p>

<p>Prometheus is a monitoring system includes a rich, multidimensional data model, a concise and powerful query language called PromQL, an efficient embedded timeseries database, and over 150 integrations with third-party systems.</p>

<h2>Thanos</h2>

<p>Thanos is a highly available prometheus setup with long term storage capabilities.</p>

<p>Thanos allows you to ship your data to S3/Minio for long storage capabilites, so you could for example only store your &ldquo;live&rdquo; data on prometheus for 2 weeks, then everything older than that gets sent to object storage such as amazon s3 or minio. This helps your prometheus instance not to be flooded with data or prevents you from running out of storage space. The nice thing is, when you query for data older than 2 weeks, it will fetch the data from object storage.</p>

<p>Thanos has a global query view, which essentially means you can query your prometheus metrics from one endpoint backed by multiple prometheus servers or cluster.</p>

<p>You can still use the same tools such as Grafana as it utilizes the same Prometheus Query API.</p>

<p>Thanos provides downsampling and compaction, so that you downsample your historical data for massive query speedup when querying large time ranges.</p>

<h2>Thanos Components</h2>

<p>Thanos is a clustered system of components which can be categorized as follows:</p>

<ul>
<li><p>Metric sources</p>

<ul>
<li>Thanos provides two components that act as data sources: Prometheus Sidecar and Rule Nodes</li>
<li>Sidecar implements gRPC service on top of Prometheus</li>
<li>Rule Node directly implements it on top of the Prometheus storage engine it is running</li>
<li>Data sources that persist their data for long term storage, do so via the Prometheus 2.0 storage engine</li>
<li>Storage engine periodically produces immutable blocks of data for a fixed time range</li>
<li>A blocks top-level directory includes chunks, index and meta.json files</li>
<li>Chunk files hold a few hundred MB worth of chunks each</li>
<li>The index file holds all information needed to lookup specific series by their labels and the positions of their chunks.</li>
<li>The <code>meta.json</code> file holds metadata about block like stats, time range, and compaction level</li>
</ul>
</li>
<li><p>Stores</p>

<ul>
<li>A Store Node acts as a Gateway to block data that is stored in an object storage bucket</li>
<li>It implements the same gRPC API as Data Sources to provide access to all metric data found in the bucket</li>
<li>Continuously synchronizes which blocks exist in the bucket and translates requests for metric data into object storage requests</li>
<li>Implements various strategies to minimize the number of requests to the object storage</li>
<li>Prometheus 2.0 storage layout is optimized for minimal read amplification</li>
<li>At this time of writing, only index data is cached</li>
<li>Stores and Data Sources are the same, store nodes and data sources expose the same gRPC Store API</li>
<li>Store API allows to look up data by a set of label matchers and a time range</li>
<li>It then returns compressed chunks of samples as they are found in the block data</li>
<li>So it&rsquo;s purely a data retrieval API and does not provide complex query execution</li>
</ul>
</li>
<li><p>Query Layer</p>

<ul>
<li>Queriers are stateless and horizontally scalable instances that implement PromQL on top of the Store APIs exposed in the cluster</li>
<li>Queriers participate in the cluster to be able to resiliently discover all data sources and store nodes</li>
<li>Rule nodes in return can discover query nodes to evaluate recording and alerting rules</li>
<li>Based on the metadata of store and source nodes, they attempt to minimize the request fanout to fetch data for a particular query</li>
<li>The only scalable components of Thanos is the query nodes as none of the Thanos components provide sharding</li>
<li>Scaling of storage capacity is ensured by relying on an external object storage system</li>
<li>Store, rule, and compactor nodes are all expected to scale significantly within a single instance or high availability pair</li>
</ul>
</li>
</ul>


<p>The information from above was retrieved from their <a href="https://thanos.io/design.md/">website</a>, feel free to check them out if you want to read more on the concepts of thanos.</p>

<p>The Architecture Overview of Thanos looks like this:</p>

<p><img src="https://github.com/thanos-io/thanos/blob/master/docs/img/arch.jpg?raw=true" alt="" /></p>

<h2>What are we doing today</h2>

<p>We will setup a Thanos Cluster with Minio, Node-Exporter, Grafana on Docker. Our Thanos setup will consist of 3 prometheus containers, each one running with a sidecar container, a store container, 2 query containers, then we have the remotewrite and receive containers which node-exporter will use to ship its metrics to.</p>

<p>The minio container will be used as our long-term storage and the mc container will be used to initialize the storage bucket which is used by thanos.</p>

<h2>Deploy the Cluster</h2>

<p>Below is the docker-compose.yml and the script to generate the configs for thanos:</p>

<script src="https://gist.github.com/ruanbekker/acd1b17d3aea4c71031e72dfc8ebbb4d.js"></script>


<p>Once you have saved the compose as <code>docker-compose.yml</code> and the script as <code>configs.sh</code> you can create the configs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bash configs.sh</span></code></pre></td></tr></table></div></figure>


<p>The script from above creates the data directory and place all the configs that thanos will use in there. Next deploy the thanos cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose -f docker-compose.yml up</span></code></pre></td></tr></table></div></figure>


<p>It should look something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose -f docker-compose.yml up
</span><span class='line'>Starting node-exporter ... done
</span><span class='line'>Starting minio         ... done
</span><span class='line'>Starting grafana        ... done
</span><span class='line'>Starting prometheus0    ... done
</span><span class='line'>Starting prometheus1     ... done
</span><span class='line'>Starting thanos-receive  ... done
</span><span class='line'>Starting thanos-store    ... done
</span><span class='line'>Starting prometheus2     ... done
</span><span class='line'>Starting mc             ... done
</span><span class='line'>Starting thanos-sidecar0 ... done
</span><span class='line'>Starting thanos-sidecar1     ... done
</span><span class='line'>Starting thanos-sidecar2     ... done
</span><span class='line'>Starting thanos-remote-write ... done
</span><span class='line'>Starting thanos-query1       ... done
</span><span class='line'>Starting thanos-query0       ... done
</span><span class='line'>Attaching to node-exporter, minio, grafana, mc, prometheus0, prometheus1, thanos-store, prometheus2, thanos-receive, thanos-sidecar0, thanos-sidecar1, thanos-sidecar2, thanos-remote-write, thanos-query0, thanos-query1</span></code></pre></td></tr></table></div></figure>


<p>Access the Query UI, which looks identical to the Prometheus UI:
- <a href="http://localhost:10904/graph">http://localhost:10904/graph</a></p>

<p>It will look more or less like this:</p>

<p><img width="1280" alt="image" src="https://user-images.githubusercontent.com/567298/73583506-4e26b280-449b-11ea-96ca-9b0cefec0acd.png"></p>

<p>When we access minio on:
- <a href="http://localhost:9000/minio">http://localhost:9000/minio</a></p>

<p>And under the thanos bucket you will see the objects being persisted:</p>

<p><img width="1278" alt="image" src="https://user-images.githubusercontent.com/567298/73583542-7ca48d80-449b-11ea-955c-7b1e766229a3.png"></p>

<p>When we access grafana on:
- <a href="http://localhost:3000/">http://localhost:3000/</a></p>

<p>Select datasources, add a prometheus datasource and select the endpoint: <code>http://query0:10904</code>, which should look like this:</p>

<p><img width="618" alt="image" src="https://user-images.githubusercontent.com/567298/73583601-d73de980-449b-11ea-9a71-c94e8184336f.png"></p>

<p>When we create a dashboard, you can test a query with <code>thanos_sidecar_prometheus_up</code> and it should look something like this:</p>

<p><img width="1279" alt="image" src="https://user-images.githubusercontent.com/567298/73583684-49aec980-449c-11ea-97bd-35145ff8330c.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Save Output to Local File With Ansible]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/01/24/save-output-to-local-file-with-ansible/"/>
    <updated>2020-01-24T19:56:01+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/01/24/save-output-to-local-file-with-ansible</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55700285-f3cdda00-59ce-11e9-9c00-a05b9d469e23.png" alt="" /></p>

<p>This playbook demonstrates how you can redirect shell output to a local file</p>

<h2>Inventory</h2>

<p>Our <code>inventory.ini</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[localhost]
</span><span class='line'>localhost</span></code></pre></td></tr></table></div></figure>


<h2>The Script</h2>

<p>Our script: <code>/tmp/foo</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;foo&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;bar&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Apply executable permissions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>chmod +x /tmp/foo
</span></code></pre></td></tr></table></div></figure>


<h2>Playbook</h2>

<p>Our playbook: <code>debug.yml</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/tmp/foo</span>
</span><span class='line'>      <span class="l-Scalar-Plain">register</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">foo_result</span>
</span><span class='line'>      <span class="l-Scalar-Plain">ignore_errors</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">True</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">local_action</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">copy content= dest=file</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Running</h2>

<p>Running the Ansible Playbook:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ ansible-playbook -i inventory.ini debug.yml</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">PLAY [localhost] ********************************************************************************************************************************************************************</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">TASK [shell] ************************************************************************************************************************************************************************</span>
</span><span class='line'><span class="l-Scalar-Plain">changed</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">localhost</span><span class="p-Indicator">]</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">TASK [copy] *************************************************************************************************************************************************************************</span>
</span><span class='line'><span class="l-Scalar-Plain">changed</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">localhost -&gt; localhost</span><span class="p-Indicator">]</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">PLAY RECAP **************************************************************************************************************************************************************************</span>
</span><span class='line'><span class="l-Scalar-Plain">localhost</span>                  <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ok=2    changed=2    unreachable=0    failed=0</span>
</span></code></pre></td></tr></table></div></figure>


<p>View the local saved file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ cat file</span>
</span><span class='line'><span class="l-Scalar-Plain">foo</span>
</span><span class='line'><span class="l-Scalar-Plain">bar</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Read More</h2>

<p>For more content on <a href="https://blog.ruanbekker.com/blog/categories/ansible/">Ansible</a> check out my <a href="https://blog.ruanbekker.com/blog/categories/ansible/">Ansible</a> category</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Environment Variables With Ansible]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/01/24/environment-variables-with-ansible/"/>
    <updated>2020-01-24T19:28:16+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/01/24/environment-variables-with-ansible</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55700285-f3cdda00-59ce-11e9-9c00-a05b9d469e23.png" alt="" /></p>

<p>This is a quick post on how to use environment variables in ansible</p>

<h2>Inventory</h2>

<p>Our <code>inventory.ini</code> file looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[localhost]
</span><span class='line'>localhost</span></code></pre></td></tr></table></div></figure>


<h2>Across Tasks</h2>

<p>You can set environment variables across tasks, and let your tasks inherit the variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>  <span class="l-Scalar-Plain">vars</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">var_mysecret</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">secret123</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">echo my env var</span>
</span><span class='line'>      <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">MYNAME</span><span class="p-Indicator">:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="s">&quot;echo</span><span class="nv"> </span><span class="s">hello</span><span class="nv"> </span><span class="s">$MYNAME</span><span class="nv"> </span><span class="s">&gt;</span><span class="nv"> </span><span class="s">/tmp/bla.txt&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">args</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">creates</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/tmp/bla.txt</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we run the task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ansible-playbook -i inventory.ini -u ruan task.yml
</span></code></pre></td></tr></table></div></figure>


<p>Check the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /tmp/bla.txt
</span><span class='line'>hello secret123
</span></code></pre></td></tr></table></div></figure>


<h2>Environment Variables Per Task</h2>

<p>You can set environment variables per task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">dev</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">echo my env var</span>
</span><span class='line'>      <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">MYNAME</span><span class="p-Indicator">:</span> <span class="s">&quot;RUAN&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="s">&quot;echo</span><span class="nv"> </span><span class="s">hello</span><span class="nv"> </span><span class="s">$MYNAME</span><span class="nv"> </span><span class="s">&gt;</span><span class="nv"> </span><span class="s">/tmp/bla2.txt&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">args</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">creates</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/tmp/bla2.txt</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running the task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ ansible-playbook -i inventory.ini -u ruan task.yml</span>
</span></code></pre></td></tr></table></div></figure>


<p>Checking the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ cat /tmp/bla2.txt</span>
</span><span class='line'><span class="l-Scalar-Plain">hello RUAN</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Read More</h2>

<p>Read more on environment variables in ansible in their <a href="https://docs.ansible.com/ansible/latest/plugins/lookup/env.html">documentation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a WireGuard VPN Server on Linux]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/01/11/setup-a-wireguard-vpn-server-on-linux/"/>
    <updated>2020-01-11T23:37:03+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/01/11/setup-a-wireguard-vpn-server-on-linux</id>
    <content type="html"><![CDATA[<h2>Installation</h2>

<p>I will be installing my wireguard vpn server on a ubuntu 18 server, for other distributions you can have a look at their <a href="https://www.wireguard.com/install/">docs</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo add-apt-repository ppa:wireguard/wireguard
</span><span class='line'>$ sudo apt update
</span><span class='line'>$ sudo apt install wireguard -y</span></code></pre></td></tr></table></div></figure>


<h2>Configuration</h2>

<p>On the Server, create they keys directory where we will save our keys:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p /etc/wireguard/keys</span></code></pre></td></tr></table></div></figure>


<p>Create the private and public key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wg genkey | tee privatekey | wg pubkey &gt; publickey</span></code></pre></td></tr></table></div></figure>


<p>Generate the pre-shared key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wg genpsk &gt; client.psk</span></code></pre></td></tr></table></div></figure>


<p>On the client, create the keys directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p ~/wireguard/keys</span></code></pre></td></tr></table></div></figure>


<p>Create the private and public keys:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd ~/wireguard/keys
</span><span class='line'>$ wg genkey | tee privatekey | wg pubkey &gt; publickey</span></code></pre></td></tr></table></div></figure>


<p>Populate the server config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/wireguard/wg0.conf
</span><span class='line'>[Interface]
</span><span class='line'>PrivateKey = &lt;output-of-client.privatekey&gt;
</span><span class='line'>Address = 192.168.199.1/32
</span><span class='line'>ListenPort = 8999
</span><span class='line'>PostUp = sysctl -w net.ipv4.ip_forward=1; iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o ens3 -j MASQUERADE
</span><span class='line'>PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o ens3 -j MASQUERADE
</span><span class='line'>
</span><span class='line'>[Peer]
</span><span class='line'>PublicKey = &lt;output-of-server.publickey&gt;
</span><span class='line'>PresharedKey = &lt;output-of-client.psk&gt;
</span><span class='line'>AllowedIPs = 192.168.199.2/32</span></code></pre></td></tr></table></div></figure>


<p>Populate the client config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat ~/wireguard/wg0.conf
</span><span class='line'>[Interface]
</span><span class='line'>PrivateKey = &lt;output-of-client.privatekey&gt;
</span><span class='line'>Address = 192.168.199.2/24
</span><span class='line'>DNS = 1.1.1.1
</span><span class='line'>
</span><span class='line'>[Peer]
</span><span class='line'>PublicKey = &lt;output-of-server.publickey&gt;
</span><span class='line'>PresharedKey = &lt;output-of-client.psk&gt;
</span><span class='line'>Endpoint = &lt;server-public-ip&gt;:8999
</span><span class='line'>AllowedIPs = 0.0.0.0/0
</span><span class='line'>PersistentKeepalive = 25</span></code></pre></td></tr></table></div></figure>


<h2>Start the Server</h2>

<p>On the server, enable and start the service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl enable wg-quick@wg0.service
</span><span class='line'>$ wg-quick up wg0</span></code></pre></td></tr></table></div></figure>


<p>On the client, connect the VPN:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wg-quick up ~/wireguard/wg0.conf</span></code></pre></td></tr></table></div></figure>


<p>Verify the status:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wg show
</span><span class='line'>interface: wg0
</span><span class='line'>  public key: +Giwk8Y5KS5wx9mw0nEIdQODI+DsR+3TcbMxjJqfZys=
</span><span class='line'>  private key: (hidden)
</span><span class='line'>  listening port: 8999
</span><span class='line'>
</span><span class='line'>peer: Q8LGMj6CeCYQJp+sTu74mLMRoPFAprV8PsnS0cu9fDI=
</span><span class='line'>  preshared key: (hidden)
</span><span class='line'>  endpoint: 102.132.208.80:57800
</span><span class='line'>  allowed ips: 192.168.199.2/32
</span><span class='line'>  latest handshake: 22 seconds ago
</span><span class='line'>  transfer: 292.00 KiB received, 322.15 KiB sent</span></code></pre></td></tr></table></div></figure>


<p>Check if you can ping the private ip address of the VPN:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ping 192.168.199.2
</span><span class='line'>PING 192.168.199.2 (192.168.199.2): 56 data bytes
</span><span class='line'>64 bytes from 192.168.199.2: icmp_seq=0 ttl=63 time=304.844 ms</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Background Processes With Screen]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/01/02/managing-background-processes-with-screen/"/>
    <updated>2020-01-02T10:42:54+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/01/02/managing-background-processes-with-screen</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/71659085-e6bbfc80-2d4e-11ea-9264-5ce0c848f9f3.png" alt="image" /></p>

<p>This is a quick post on how to create, manage and delete background processes with screen</p>

<h2>About</h2>

<p>Screen allows you to run processes in a different session, so when you exit your terminal the process will still be running.</p>

<h2>Install</h2>

<p>Install screen on the operating system of choice, for debian based systems it will be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt install screen -y
</span></code></pre></td></tr></table></div></figure>


<h2>Working with Screen</h2>

<p>To create a screen session, you can just run <code>screen</code> or you can provide an argument to provide a name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>screen -S my-screen-session
</span></code></pre></td></tr></table></div></figure>


<p>Now you will be dropped into a screen session, run a ping:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ping 8.8.8.8
</span></code></pre></td></tr></table></div></figure>


<p>Now to allow the ping process to run in the background, send the commands to detach the screen session:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Ctrl + a, <span class="k">then</span> press d
</span></code></pre></td></tr></table></div></figure>


<p>To view the screen session:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>screen -ls
</span><span class='line'>There is a screen on:
</span><span class='line'>  45916.my-screen-session <span class="o">(</span>Detached<span class="o">)</span>
</span><span class='line'><span class="m">1</span> Socket in /var/folders/jr/dld7mjhn0sx6881xs_0s7rtc0000gn/T/.screen.
</span></code></pre></td></tr></table></div></figure>


<p>To resume the screen session, pass the screen id or screen name as a argument:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>screen -r my-screen-session
</span><span class='line'><span class="m">64</span> bytes from 8.8.8.8: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">297</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">55</span> <span class="nb">time</span><span class="o">=</span>7.845 ms
</span><span class='line'><span class="m">64</span> bytes from 8.8.8.8: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">298</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">55</span> <span class="nb">time</span><span class="o">=</span>6.339 ms
</span></code></pre></td></tr></table></div></figure>


<h2>Scripting</h2>

<p>To use a one liner to send a process as a detached screen session for scripting as an example, you can do that like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>screen -S ping-process -m -d sh -c <span class="s2">&quot;ping 8.8.8.8&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Listing the screen session:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>screen -ls
</span><span class='line'>There is a screen on:
</span><span class='line'>  46051.ping-process  <span class="o">(</span>Detached<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Terminating the screen session:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>screen -S ping-process -X quit
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Let me know what you think. If you liked my content, feel free to visit me at <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<p><a href="https://twitter.com/ruanbekker"><img src="https://user-images.githubusercontent.com/567298/71188576-e2410f80-2289-11ea-8667-08f0c14ab7b5.png" alt="" /></a></p>

<p><a href="https://ko-fi.com/A6423ZIQ"><img src="https://www.ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2019: My Personal Highlights for the Year]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/01/01/2019-my-personal-highlights-for-the-year/"/>
    <updated>2020-01-01T12:23:08+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/01/01/2019-my-personal-highlights-for-the-year</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/71640913-bd8e6400-2c9b-11ea-994c-b49231a6147e.png" alt="image" /></p>

<p>2019 was a great year! I met some awesome people from <a href="https://twitter.com/civocloud">Civo</a>, <a href="https://twitter.com/traefik">Traefik</a>, <a href="https://twitter.com/Rancher_Labs">Rancher</a>, <a href="https://twitter.com/openfaas">OpenFaas</a>, <a href="https://twitter.com/docker">Docker</a>, <a href="https://twitter.com/elastic">Elastic</a>, <a href="https://twitter.com/awscloud">AWS</a> and the list goes on.</p>

<p>Thank you to everyone of you that helped me during this year, to the ones inspired me, all the great motivation, support and shout outs! There&rsquo;s so many people to thank, even for the people that is not mentioned, if you ever interacted with me, helped me or supported me, thank you to each and everyone of you!</p>

<p>Below is a list of some of my personal highlights:</p>

<h2>Number of Blogposts per Website:</h2>

<ul>
<li><a href="https://blog.ruanbekker.com/blog/archives/">83 Posts on blog.ruanbekker.com</a></li>
<li><a href="https://sysadmins.co.za/author/ruan/">54 Posts on sysadmins.co.za</a></li>
<li><a href="https://medium.com/@ruanbekker">7 Posts on medium.com</a></li>
<li><a href="https://dev.to/ruanbekker">6 Posts on dev.to</a></li>
<li><a href="https://devconnected.com/author/ruan_bekker/">1 Post on devconnected.com</a></li>
<li><a href="https://www.civo.com/learn/setup-a-3-node-docker-swarm">1 Post on civo.com</a></li>
</ul>


<h2>Learnings</h2>

<ul>
<li>You cannot be good at everything</li>
<li>You need to switch off every now and then</li>
<li>Work / Life balance is important</li>
<li>A hobby other than work does wonders to help switch off every now and then</li>
</ul>


<h2>Contributions on Github</h2>

<p>Contributions for 2019:</p>

<p><a href="https://github.com/ruanbekker"><img src="https://user-images.githubusercontent.com/567298/71640391-c7ab6500-2c91-11ea-8b75-5c6016b38d6c.png" alt="image" /></a></p>

<p>Most Starred Github Repository:</p>

<p><a href="https://github.com/ruanbekker/ansible-docker-swarm"><img src="https://user-images.githubusercontent.com/567298/71640413-2cff5600-2c92-11ea-8f14-4ed0748c4a8d.png" alt="image" /></a></p>

<p>Most Starred Gist:</p>

<p><a href="https://gist.github.com/ruanbekker/e8a09604b14f37e8d2f743a87b930f93"><img src="https://user-images.githubusercontent.com/567298/71640429-646e0280-2c92-11ea-9075-23572e166e8c.png" alt="image" /></a></p>

<h2>Analytics</h2>

<p>Some analytics for my blog posts:</p>

<h3>blog.ruanbekker.com</h3>

<p>Analytics for <a href="https://blog.ruanbekker.com/?utm_source=blog&amp;utm_medium=blog-ruanbekker-com&amp;utm_campaign=year_in_review_2019">blog.ruanbekker.com</a>:</p>

<p><img src="https://user-images.githubusercontent.com/567298/71640457-ffff7300-2c92-11ea-9e3f-916614e70b7f.png" alt="image" /></p>

<p>Top 10 Most Viewed Pages:</p>

<p><img src="https://user-images.githubusercontent.com/567298/71640465-24f3e600-2c93-11ea-8cdc-fe74c5c80c13.png" alt="image" /></p>

<p>Most Viewed by Country:</p>

<p><img src="https://user-images.githubusercontent.com/567298/71640475-61bfdd00-2c93-11ea-923d-2099b46a75fd.png" alt="image" /></p>

<h4>sysadmins.co.za</h4>

<p>Analytics for <a href="https://sysadmins.co.za/?utm_source=blog&amp;utm_medium=blog-ruanbekker-com&amp;utm_campaign=year_in_review_2019">sysadmins.co.za</a>:</p>

<p><img src="https://user-images.githubusercontent.com/567298/71640485-a2b7f180-2c93-11ea-8d4e-fa1251070008.png" alt="image" /></p>

<p>Top 10 Most Viewed Pages:</p>

<p><img src="https://user-images.githubusercontent.com/567298/71640496-d85cda80-2c93-11ea-9983-230d6e85171d.png" alt="image" /></p>

<p>Most Viewed by Country:</p>

<p><img src="https://user-images.githubusercontent.com/567298/71640505-080be280-2c94-11ea-88f8-aaad194983b3.png" alt="image" /></p>

<h2>Authors on Blogposts:</h2>

<p>A list of places where I blog on:</p>

<ul>
<li><a href="https://devconnected.com/author/ruan_bekker/">devconnected.com</a></li>
<li><a href="https://medium.com/faun/tutorial-on-using-gitlab-ci-cd-pipelines-to-deploy-your-python-flask-restful-api-with-postgres-on-cad91a3638c4">faun.dev</a></li>
<li><a href="https://medium.com/@ruanbekker">medium.com</a></li>
<li><a href="https://www.civo.com/learn/setup-a-3-node-docker-swarm">civo.com</a></li>
<li><a href="https://dev.to/ruanbekker">dev.to</a></li>
<li><a href="http://blog.pistack.co.za/author/ruan/">blog.pistack.co.za</a></li>
<li><a href="https://sysadmins.co.za/author/ruan/">sysadmins.co.za</a></li>
<li><a href="https://blog.ruanbekker.com/blog/archives/">blog.ruanbekker.com</a></li>
<li><a href="https://ruan.dev/blog/">ruan.dev</a></li>
</ul>


<h2>Proud Moments</h2>

<p>Some of my proud moments on Twitter:</p>

<h4>2019.06.11 - Scaleway Tweet on Kapsule</h4>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Thanks <a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw">@ruanbekker</a> for your series of blogposts about Scaleway Kapsule. ;) <a href="https://t.co/4IGUuXneA7">https://t.co/4IGUuXneA7</a></p>&mdash; Scaleway (@Scaleway) <a href="https://twitter.com/Scaleway/status/1138371911837200387?ref_src=twsrc%5Etfw">June 11, 2019</a></blockquote>


<h4>2019.06.11 - Traefik Tweet on Kubernetes</h4>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">🎉 Check out this great community post by <a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw">@ruanbekker</a>! &quot;Setup Traefik as an Ingress Controller on <a href="https://twitter.com/hashtag/Kubernetes?src=hash&amp;ref_src=twsrc%5Etfw">#Kubernetes</a>&quot; Thanks, Ruan! 🤗<a href="https://t.co/BHVmI46gmx">https://t.co/BHVmI46gmx</a> <a href="https://twitter.com/hashtag/traefik?src=hash&amp;ref_src=twsrc%5Etfw">#traefik</a> <a href="https://t.co/9N8NOkZNrk">pic.twitter.com/9N8NOkZNrk</a></p>&mdash; Traefik (@traefik) <a href="https://twitter.com/traefik/status/1138415586898264065?ref_src=twsrc%5Etfw">June 11, 2019</a></blockquote>


<h4>2019.07.13 - Mention from OpenFaas on VSCode Demo</h4>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Run everything in your browser with VSCode! <a href="https://t.co/ZasPSfibI8">https://t.co/ZasPSfibI8</a></p>&mdash; OpenFaaS (@openfaas) <a href="https://twitter.com/openfaas/status/1150145331138613250?ref_src=twsrc%5Etfw">July 13, 2019</a></blockquote>


<h4>2019.07.14 - Elasticsearch Tweet from Devconnected</h4>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Are you curious about how to setup a complete Elasticsearch (<a href="https://twitter.com/elastic?ref_src=twsrc%5Etfw">@elastic</a>) cluster on Ubuntu 18.04?<br><br>System Development Engineer <a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw">@ruanbekker</a> wrote an entire guide about it, and you should read it!<a href="https://t.co/fyoulehOce">https://t.co/fyoulehOce</a><a href="https://twitter.com/hashtag/elasticsearch?src=hash&amp;ref_src=twsrc%5Etfw">#elasticsearch</a> <a href="https://twitter.com/hashtag/devops?src=hash&amp;ref_src=twsrc%5Etfw">#devops</a> <a href="https://twitter.com/hashtag/opensource?src=hash&amp;ref_src=twsrc%5Etfw">#opensource</a> <a href="https://t.co/2uRrqjXDxC">pic.twitter.com/2uRrqjXDxC</a></p>&mdash; devconnected.com (@devconnectedcom) <a href="https://twitter.com/devconnectedcom/status/1150824768536489986?ref_src=twsrc%5Etfw">July 15, 2019</a></blockquote>


<h4>2019.08.14 - Rancher&rsquo;s Tweet on my Rpi K3s Blogpost</h4>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">&#39;Running Kubernetes (K3S) on RaspberryPi 4&#39; by <a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw">@ruanbekker</a> <a href="https://twitter.com/hashtag/kubernetes?src=hash&amp;ref_src=twsrc%5Etfw">#kubernetes</a> <a href="https://twitter.com/hashtag/k3s?src=hash&amp;ref_src=twsrc%5Etfw">#k3s</a> <a href="https://twitter.com/hashtag/RaspberryPi?src=hash&amp;ref_src=twsrc%5Etfw">#RaspberryPi</a> <a href="https://twitter.com/hashtag/arm?src=hash&amp;ref_src=twsrc%5Etfw">#arm</a> <a href="https://t.co/sukR1FwyG8">https://t.co/sukR1FwyG8</a></p>&mdash; Rancher Labs (@Rancher_Labs) <a href="https://twitter.com/Rancher_Labs/status/1161289162831605761?ref_src=twsrc%5Etfw">August 13, 2019</a></blockquote>


<h4>2019.08.19 - Civo Learn Guide</h4>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Learn guide: Set up a 3 node <a href="https://twitter.com/Docker?ref_src=twsrc%5Etfw">@Docker</a> swarm on Ubuntu. Guide by <a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw">@ruanbekker</a> <a href="https://t.co/QxOxv6eRAy">https://t.co/QxOxv6eRAy</a> <a href="https://t.co/NgzSlprE06">pic.twitter.com/NgzSlprE06</a></p>&mdash; Civo Cloud (@CivoCloud) <a href="https://twitter.com/CivoCloud/status/1163448790675861504?ref_src=twsrc%5Etfw">August 19, 2019</a></blockquote>




<blockquote class="twitter-tweet"><p lang="en" dir="ltr">I have to say, this one made intuitively more sense to me than a lot of containerisation articles! And I&#39;m not just saying that because I hit publish on it :D</p>&mdash; Kai (@KaiPMDH) <a href="https://twitter.com/KaiPMDH/status/1163732578148462594?ref_src=twsrc%5Etfw">August 20, 2019</a></blockquote>


<h4>2019.10.09 - Civo Marketplace MongoDB</h4>

<ul>
<li><a href="https://github.com/civo/kubernetes-marketplace/pull/8">https://github.com/civo/kubernetes-marketplace/pull/8</a></li>
</ul>


<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Thank you very much <a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw">@ruanbekker</a> for adding <a href="https://twitter.com/MongoDB?ref_src=twsrc%5Etfw">@MongoDB</a> to our open source Kubernetes marketplace! <a href="https://t.co/04Na1XFEtW">https://t.co/04Na1XFEtW</a> <a href="https://twitter.com/hashtag/kubernetes?src=hash&amp;ref_src=twsrc%5Etfw">#kubernetes</a> <a href="https://twitter.com/hashtag/k8s?src=hash&amp;ref_src=twsrc%5Etfw">#k8s</a> <a href="https://twitter.com/hashtag/k3s?src=hash&amp;ref_src=twsrc%5Etfw">#k3s</a> <a href="https://twitter.com/hashtag/KUBE100?src=hash&amp;ref_src=twsrc%5Etfw">#KUBE100</a> <a href="https://twitter.com/hashtag/mongodb?src=hash&amp;ref_src=twsrc%5Etfw">#mongodb</a> <a href="https://t.co/FMi4mMPn3A">pic.twitter.com/FMi4mMPn3A</a></p>&mdash; Civo Cloud (@CivoCloud) <a href="https://twitter.com/CivoCloud/status/1181910916469858305?ref_src=twsrc%5Etfw">October 9, 2019</a></blockquote>


<h4>2019.10.23 - Civo Marketplace Jenkins</h4>

<ul>
<li><a href="https://github.com/civo/kubernetes-marketplace/pull/12">https://github.com/civo/kubernetes-marketplace/pull/12</a></li>
</ul>


<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Thanks to <a href="https://twitter.com/ruanbekker?ref_src=twsrc%5Etfw">@ruanbekker</a> for submitting <a href="https://twitter.com/jenkinsci?ref_src=twsrc%5Etfw">@jenkinsci</a> to our open Kubernetes Marketplace running on the world&#39;s first managed k3s service! <a href="https://twitter.com/hashtag/jenkins?src=hash&amp;ref_src=twsrc%5Etfw">#jenkins</a> <a href="https://twitter.com/hashtag/k3s?src=hash&amp;ref_src=twsrc%5Etfw">#k3s</a> <a href="https://twitter.com/hashtag/opensource?src=hash&amp;ref_src=twsrc%5Etfw">#opensource</a> <a href="https://twitter.com/hashtag/kubernetes?src=hash&amp;ref_src=twsrc%5Etfw">#kubernetes</a> <a href="https://t.co/aW1FVKOqfY">pic.twitter.com/aW1FVKOqfY</a></p>&mdash; Civo Cloud (@CivoCloud) <a href="https://twitter.com/CivoCloud/status/1186967773655773184?ref_src=twsrc%5Etfw">October 23, 2019</a></blockquote>


<h4>2019.11.05 - Traefik Swag</h4>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">We are honored to send that! Thanks for being an amazing community member, and writing awesome posts!! 🎁<a href="https://twitter.com/hashtag/traefik?src=hash&amp;ref_src=twsrc%5Etfw">#traefik</a></p>&mdash; Traefik (@traefik) <a href="https://twitter.com/traefik/status/1191786730153639936?ref_src=twsrc%5Etfw">November 5, 2019</a></blockquote>


<h4>2019.11.14 - Mentions on Civo Blog for KUBE100</h4>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">New blog! <a href="https://twitter.com/hashtag/KUBE100?src=hash&amp;ref_src=twsrc%5Etfw">#KUBE100</a>: The Story So Far.<br><br>Detailing our journey launching the world&#39;s first managed k3s service!<br><br>👉<a href="https://t.co/p7SyhcMXPb">https://t.co/p7SyhcMXPb</a><a href="https://twitter.com/hashtag/k8s?src=hash&amp;ref_src=twsrc%5Etfw">#k8s</a> <a href="https://twitter.com/hashtag/kubernetes?src=hash&amp;ref_src=twsrc%5Etfw">#kubernetes</a> <a href="https://twitter.com/hashtag/k3s?src=hash&amp;ref_src=twsrc%5Etfw">#k3s</a></p>&mdash; Civo Cloud (@CivoCloud) <a href="https://twitter.com/CivoCloud/status/1194994631240540160?ref_src=twsrc%5Etfw">November 14, 2019</a></blockquote>


<p>Some proud moments from mentions on blog posts:</p>

<h4>2019.08.06 - VPNCloud Peer to Peer Docs</h4>

<ul>
<li><a href="https://vpncloud.ddswd.de/docs/">https://vpncloud.ddswd.de/docs/</a></li>
</ul>


<p><img src="https://user-images.githubusercontent.com/30043398/62545960-efbda600-b862-11e9-9777-236ae30e15e3.png" alt="image" /></p>

<h4>2019.08.06 - MarkHeath Blog Post Mention</h4>

<ul>
<li><a href="https://markheath.net/post/exploring-elasticsearch-with-docker">https://markheath.net/post/exploring-elasticsearch-with-docker</a></li>
</ul>


<p><img src="https://user-images.githubusercontent.com/30043398/62548509-37463100-b867-11e9-9dba-046d6ec6f1cf.png" alt="image" /></p>

<h4>2019.08.08 - Civo Docker Swarm Blogpost</h4>

<ul>
<li><a href="https://www.civo.com/learn/setup-a-3-node-docker-swarm">https://www.civo.com/learn/setup-a-3-node-docker-swarm</a></li>
</ul>


<h4>2019.08.13 - Raspberry Pi Post (teamserverless)</h4>

<ul>
<li><a href="https://github.com/teamserverless/k8s-on-raspbian/pull/20">https://github.com/teamserverless/k8s-on-raspbian/pull/20</a></li>
</ul>


<h4>2019.10.11 - Serverless Email - Migration OpenFaas Blog post:</h4>

<ul>
<li><a href="https://serverless.email/issues/122">https://serverless.email/issues/122</a></li>
</ul>


<h2>Certifications:</h2>

<p>MongoDB Basics:</p>

<p><img src="https://user-images.githubusercontent.com/567298/71640576-435ae100-2c95-11ea-8f07-e29c1ebd2972.png" alt="image" /></p>

<p>MongoDB Cluster Administration:</p>

<p><img src="https://user-images.githubusercontent.com/567298/71640586-5968a180-2c95-11ea-82b5-7ae0f8d30cd2.png" alt="image" /></p>

<h2>Thank You</h2>

<p>Thank you for reading. If you like my content, feel free to visit me at <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<p><a href="https://twitter.com/ruanbekker"><img src="https://user-images.githubusercontent.com/567298/71188576-e2410f80-2289-11ea-8667-08f0c14ab7b5.png" alt="" /></a></p>

<p><a href="https://ko-fi.com/A6423ZIQ"><img src="https://www.ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi" /></a></p>
]]></content>
  </entry>
  
</feed>
