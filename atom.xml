<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2019-07-07T06:01:02-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making Deploying Functions Even Easier With Faas-cli Up Using OpenFaaS]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/07/07/making-deploying-functions-even-easier-with-faas-cli-up-using-openfaas/"/>
    <updated>2019-07-07T03:53:59-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/07/07/making-deploying-functions-even-easier-with-faas-cli-up-using-openfaas</id>
    <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/cf01eefb5b6905f3774376d6d1ed55b8f052d211/68747470733a2f2f626c6f672e616c6578656c6c69732e696f2f636f6e74656e742f696d616765732f323031372f30382f666161735f736964652e706e67" alt="" /></p>

<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /> <img src="https://img.shields.io/twitter/follow/ruanbekker.svg?style=social" alt="Twitter Follow" /></p>

<p>I recently discovered that the <code>faas-cli</code> allows you to append your function&rsquo;s yaml to an existing file when generating a new function. And that <code>faas-cli up</code> does the build, push and deploy for you.</p>

<h2>The way I always did it:</h2>

<p>Usually, I will go through this flow: create, build, push, deploy, when creating 2 functions that will be in the same stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ faas-cli new --lang python3 fn-old-foo \
</span><span class='line'>--prefix=ruanbekker \
</span><span class='line'>--gateway https://openfaas.domain.com
</span><span class='line'>
</span><span class='line'>$ faas-cli build -f fn-old-foo.yml && \
</span><span class='line'>faas-cli push -f fn-old-foo.yml && \
</span><span class='line'>faas-cli deploy -f fn-old-foo.yml</span></code></pre></td></tr></table></div></figure>


<p>And for my other function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ faas-cli new --lang python3 fn-old-bar \
</span><span class='line'>--prefix=ruanbekker \
</span><span class='line'>--gateway https://openfaas.domain.com
</span><span class='line'>
</span><span class='line'>$ faas-cli build -f fn-old-bar.yml && \
</span><span class='line'>faas-cli push -f fn-old-bar.yml && \
</span><span class='line'>faas-cli deploy -f fn-old-bar.yml</span></code></pre></td></tr></table></div></figure>


<p>And then you are ready to invoke those functions.</p>

<h2>The new discovered way</h2>

<p>So recently I discovered that you can append the yaml definition of your function to an existing yaml file, and use <code>faas-cli up</code> to build, push and deploy your functions:</p>

<p>Generating the first function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ faas-cli new --lang python3 fn-foo \
</span><span class='line'>--prefix=ruanbekker \
</span><span class='line'>--gateway https://openfaas.domain.com
</span><span class='line'>
</span><span class='line'>Stack file written: fn-foo.yml</span></code></pre></td></tr></table></div></figure>


<p>Now that we have <code>fn-foo.yml</code> in our current work directory, we will append the second function the that file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ faas-cli new --lang python3 fn-bar \
</span><span class='line'>--prefix=ruanbekker \
</span><span class='line'>--gateway https://openfaas.domain.com \
</span><span class='line'>--append fn-foo.yml
</span><span class='line'>
</span><span class='line'>Stack file updated: fn-foo.yml</span></code></pre></td></tr></table></div></figure>


<p>Now, when using <code>faas-cli up</code> it expects by default that the filename is <code>stack.yml</code> which we can change with <code>-f</code> but to keep this as easy as possible, we will change the filename to <code>stack.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mv fn-foo.yml stack.yml</span></code></pre></td></tr></table></div></figure>


<p>At the moment, our <code>stack.yml</code> will look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat stack.yml
</span><span class='line'>provider:
</span><span class='line'>  name: openfaas
</span><span class='line'>  gateway: https://openfaas.domain.com
</span><span class='line'>functions:
</span><span class='line'>  fn-foo:
</span><span class='line'>    lang: python3
</span><span class='line'>    handler: ./fn-foo
</span><span class='line'>    image: ruanbekker/fn-foo:latest
</span><span class='line'>  fn-bar:
</span><span class='line'>    lang: python3
</span><span class='line'>    handler: ./fn-bar
</span><span class='line'>    image: ruanbekker/fn-bar:latest</span></code></pre></td></tr></table></div></figure>


<p>Deploying our functions is as easy as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ faas-cli up
</span><span class='line'>...
</span><span class='line'>Deploying: fn-foo.
</span><span class='line'>
</span><span class='line'>Deployed. 202 Accepted.
</span><span class='line'>URL: https://openfaas.domain.com/function/fn-foo
</span><span class='line'>
</span><span class='line'>Deploying: fn-bar.
</span><span class='line'>
</span><span class='line'>Deployed. 202 Accepted.
</span><span class='line'>URL: https://openfaas.domain.com/function/fn-bar</span></code></pre></td></tr></table></div></figure>


<p>Simply amazing. OpenFaaS done a great job in making it as simple and easy as possible to get your functions from zero to deployed in seconds.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using OpenFaas With Amazon DynamoDB]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/07/06/using-openfaas-with-amazon-dynamodb/"/>
    <updated>2019-07-06T19:11:23-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/07/06/using-openfaas-with-amazon-dynamodb</id>
    <content type="html"><![CDATA[<p><img width="1105" alt="image" src="https://user-images.githubusercontent.com/567298/60761941-f4205480-a053-11e9-9ad5-9e45948c9833.png"></p>

<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a> <a href="https://linux-hackers-slack.herokuapp.com/"><img src="https://linux-hackers-slack.herokuapp.com/badge.svg" alt="Slack Status" /></a> <a href="https://linux-hackers.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack" /></a> <img src="https://img.shields.io/github/followers/ruanbekker.svg?label=Follow&amp;style=social" alt="GitHub followers" /> <img src="https://img.shields.io/twitter/follow/ruanbekker.svg?style=social" alt="Twitter Follow" /></p>

<h1>Using OpenFaaS with Amazon DynamoDB</h1>

<p>You can use your OpenFaaS functions to store and retrieve data to and from a persistent layer that sits outside the OpenFaaS framework. The database that we will use in this tutorial is Amazon&rsquo;s DynamoDB.</p>

<p>If you are not familiar with the service, Amazon&rsquo;s DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability.</p>

<p>At the end of this tutorial you will be able to invoke your functions to read and write items to DynamoDB with a dedicated IAM User that is only allowed to access DynamoDB, and secrets managed by your OpenFaaS framework.</p>

<h2>What we will be doing in this Tutorial</h2>

<p>In this tutorial we will cover a couple of things, and a summary on the to do list is:</p>

<ul>
<li>Create a OpenFaaS IAM User, DynamoDB IAM Policy, associate the Policy to the User using the AWS CLI</li>
<li>Create a AWS Access Key, and save the Access Key and Secret key to file</li>
<li>Create OpenFaaS Secrets of the Access Key and Secret Key, remove the files from disk</li>
<li>Create 3 OpenFaaS Functions: write, lookup and get</li>
<li>Invoke the functions, read and write from DynamoDB</li>
</ul>


<p>Our 3 functions will do very basic operations for this demonstration, but I believe this is a good starting point.</p>

<p>All the examples of this blog post is available in <a href="https://github.com/ruanbekker/blog-assets/tree/master/openfaas-dynamodb">this github repository</a></p>

<h2>The Use-Case Scenario</h2>

<p>In this scenario we want to store user information into DynamoDB, we will use a hash that we will calculate using the users ID Number + Lastname. So when we have thousands or millions of items, we dont need to search through the entire table, but since we can re-calculate the sha hash, we can do a single GetItem operation to find the entry about the user in question.</p>

<ul>
<li>Lookup Function:</li>
</ul>


<p>The lookup function will calculate the hash by passing the users ID Number and Lastname, this will return a hash which will be teh primary key attribute of our table design. This hash value is required to do a GetItem on the user in question.</p>

<ul>
<li>Get Function:</li>
</ul>


<p>The Get function will interface with DynamoDB, it reads the AWS access key and secret key from the secrets path to authenticate with AWS and utilizes environment variables for the region and table name. This will do a GetItem on the DynamoDB Table and retrieve the Item. If the item is not found, it will return it in the response.</p>

<ul>
<li>Write Function:</li>
</ul>


<p>The write function will also interface with DynamoDB, the ID, Name and Payload will be included in the request body on our POST Request.</p>

<h2>Note on Secrets and Environment Variables</h2>

<p>I am treating my environment variables and secrets different from each other. The secrets such as my AWS access keys are stored on the cluster and the application reads them and stores the values in memory.</p>

<p>The environment variables such as non-secret information, such as my dynamodb table name and aws region, is defined in my environment variables.</p>

<p>This <a href="http://movingfast.io/articles/environment-variables-considered-harmful/">post</a> and this <a href="https://diogomonica.com/2017/03/27/why-you-shouldnt-use-env-variables-for-secret-data/">post</a> goes a bit more into detail on why you should not use environment variables for secret data, which I found from <a href="https://github.com/openfaas/faas-netes/issues/153#issuecomment-370924478">this link</a></p>

<p>Enough info, let&rsquo;s get to the fun stuff</p>

<h2>Pre-Requirements:</h2>

<p>You need a AWS Account (or you can use dynamodb-local), OpenFaaS and faas-cli. Documentation available below:
- <a href="https://docs.openfaas.com/contributing/get-started/">https://docs.openfaas.com/contributing/get-started/</a></p>

<h2>Provision a DynamoDB Table</h2>

<p>I have a admin IAM account configured on my default profile, using the aws-cli tools generate the cli-skeleton that is required to provision a dynamodb table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws dynamodb create-table --generate-cli-skeleton &gt; ddb.json
</span></code></pre></td></tr></table></div></figure>


<p>My table name will be <code>lookup-table</code> with the primary key <code>hash_value</code> and provisoned my throughput to 1 Read and Write Capacity Unit. Which will enable us 4KB/s for reads and 1KB/s for writes.</p>

<p>For demonstration purposes, I am sharing my altered <code>ddb.json</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;AttributeDefinitions&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;AttributeName&quot;</span><span class="p">:</span> <span class="s2">&quot;hash_value&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;AttributeType&quot;</span><span class="p">:</span> <span class="s2">&quot;S&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;TableName&quot;</span><span class="p">:</span> <span class="s2">&quot;lookup_table&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;KeySchema&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;AttributeName&quot;</span><span class="p">:</span> <span class="s2">&quot;hash_value&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;KeyType&quot;</span><span class="p">:</span> <span class="s2">&quot;HASH&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;ProvisionedThroughput&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;ReadCapacityUnits&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;WriteCapacityUnits&quot;</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;Tags&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Key&quot;</span><span class="p">:</span> <span class="s2">&quot;Name&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;lookup-table&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have the file saved, create the dynamodb table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws dynamodb create-table --cli-input-json file://ddb.json
</span></code></pre></td></tr></table></div></figure>


<p>List the tables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws dynamodb list-tables
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;TableNames&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="s2">&quot;lookup_table&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check if the table is provisioned:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws dynamodb describe-table --table-name lookup_table <span class="p">|</span> jq -r <span class="s1">&#39;.Table.TableStatus&#39;</span>
</span><span class='line'>ACTIVE
</span></code></pre></td></tr></table></div></figure>


<p>Getting the ARN string, as we will need it when we create our IAM Policy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws dynamodb describe-table --table-name lookup_table <span class="p">|</span> jq -r <span class="s1">&#39;.Table.TableArn&#39;</span>
</span><span class='line'>arn:aws:dynamodb:eu-west-1:x-x:table/lookup_table
</span></code></pre></td></tr></table></div></figure>


<h2>Create the OpenFaaS IAM User</h2>

<p>Create the IAM Policy document which defines the access that we want to grant. You can see that we are only allowing Put and GetItem on the provisioned DynamoDB resource:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat dynamodb-iam-policy.json
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;Version&quot;</span>: <span class="s2">&quot;2012-10-17&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;Statement&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;Sid&quot;</span>: <span class="s2">&quot;OpenFaasFunctionAceessForDynamoDB&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;Effect&quot;</span>: <span class="s2">&quot;Allow&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;Action&quot;</span>: <span class="o">[</span>
</span><span class='line'>                <span class="s2">&quot;dynamodb:PutItem&quot;</span>,
</span><span class='line'>                <span class="s2">&quot;dynamodb:GetItem&quot;</span>
</span><span class='line'>            <span class="o">]</span>,
</span><span class='line'>            <span class="s2">&quot;Resource&quot;</span>: <span class="s2">&quot;arn:aws:dynamodb:eu-west-1:x-accountid-x:table/lookup_table&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the IAM Policy and provide the policy document for the given policy name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws iam create-policy --policy-name openfaas-dynamodb-access --policy-document file://dynamodb-iam-policy.json
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;Policy&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;PolicyName&quot;</span>: <span class="s2">&quot;openfaas-dynamodb-access&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;PolicyId&quot;</span>: <span class="s2">&quot;ANPATPRT2G4SL4K63SUWQ&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;Arn&quot;</span>: <span class="s2">&quot;arn:aws:iam::x-accountid-x:policy/openfaas-dynamodb-access&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;Path&quot;</span>: <span class="s2">&quot;/&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;DefaultVersionId&quot;</span>: <span class="s2">&quot;v1&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;AttachmentCount&quot;</span>: 0,
</span><span class='line'>        <span class="s2">&quot;PermissionsBoundaryUsageCount&quot;</span>: 0,
</span><span class='line'>        <span class="s2">&quot;IsAttachable&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>        <span class="s2">&quot;CreateDate&quot;</span>: <span class="s2">&quot;2019-07-06T11:54:26Z&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;UpdateDate&quot;</span>: <span class="s2">&quot;2019-07-06T11:54:26Z&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the IAM User that will be used to authenticate requests against DynamoDB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws iam create-user --user-name openfaas-user
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;User&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;Path&quot;</span>: <span class="s2">&quot;/&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;UserName&quot;</span>: <span class="s2">&quot;openfaas-user&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;UserId&quot;</span>: <span class="s2">&quot;AIDATPRT2G4SIRYTNHLZK&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;Arn&quot;</span>: <span class="s2">&quot;arn:aws:iam::x-accountid-x:user/openfaas-user&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;CreateDate&quot;</span>: <span class="s2">&quot;2019-07-06T11:56:53Z&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the Access Key, which will be our API keys for our application to authenticate requests. Save the AccessKeyId and SecretAccessKey temporarily to 2 seperate files, which we will delete after we create our secrets to our cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws iam create-access-key --user-name openfaas-user
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;AccessKey&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;UserName&quot;</span>: <span class="s2">&quot;openfaas-user&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;AccessKeyId&quot;</span>: <span class="s2">&quot;AKIAT..redacted.x&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;Status&quot;</span>: <span class="s2">&quot;Active&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;SecretAccessKey&quot;</span>: <span class="s2">&quot;b..redacted.x&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;CreateDate&quot;</span>: <span class="s2">&quot;2019-07-06T11:57:37Z&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Associate the IAM Policy to the IAM User:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws iam attach-user-policy --user-name openfaas-user --policy-arn arn:aws:iam::x-x:policy/openfaas-dynamodb-access
</span></code></pre></td></tr></table></div></figure>


<p>To test if the access keys work, save them to a new profile using the aws-cli tools:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws configure --profile openfaas
</span><span class='line'>AWS Access Key ID <span class="o">[</span>None<span class="o">]</span>: AKIAT..
</span><span class='line'>AWS Secret Access Key <span class="o">[</span>None<span class="o">]</span>: b..x
</span><span class='line'>Default region name <span class="o">[</span>None<span class="o">]</span>: eu-west-1
</span><span class='line'>Default output format <span class="o">[</span>None<span class="o">]</span>: json
</span></code></pre></td></tr></table></div></figure>


<p>Write an Item to DynamoDB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws --profile openfaas dynamodb put-item <span class="se">\</span>
</span><span class='line'>--table-name lookup_table <span class="se">\</span>
</span><span class='line'>--item <span class="s1">&#39;{&quot;hash_value&quot;: {&quot;S&quot;: &quot;aGVsbG8td29ybGQK&quot;}, &quot;message&quot;: {&quot;S&quot;: &quot;hello-world&quot;}}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Read the Item from DynamoDB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>aws --profile openfaas dynamodb get-item <span class="se">\</span>
</span><span class='line'>--table-name lookup_table <span class="se">\</span>
</span><span class='line'>--key <span class="s1">&#39;{&quot;hash_value&quot;: {&quot;S&quot;: &quot;aGVsbG8td29ybGQK&quot;}}&#39;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;Item&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;hash_value&quot;</span>: <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;S&quot;</span>: <span class="s2">&quot;aGVsbG8td29ybGQK&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="s2">&quot;message&quot;</span>: <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;S&quot;</span>: <span class="s2">&quot;hello-world&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now confirm our permissions are in place to continue.</p>

<h3>Create OpenFaaS Secrets</h3>

<p>The AccessKeyId and SecretKey has been saved to disk, and we will use those files to create secrets from:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli secret create openfaas-aws-access-key --from-file<span class="o">=</span>openfaas_aws_access_key.txt
</span><span class='line'>Creating secret: openfaas-aws-access-key
</span><span class='line'>Created: <span class="m">201</span> Created
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli secret create openfaas-aws-secret-key --from-file<span class="o">=</span>openfaas_aws_secret_key.txt
</span><span class='line'>Creating secret: openfaas-aws-secret-key
</span><span class='line'>Created: <span class="m">201</span> Created
</span></code></pre></td></tr></table></div></figure>


<p>Now that the secrets are securely stored in our cluster, we can delete the temporary files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rm -f ./openfaas_aws_*_key.txt
</span></code></pre></td></tr></table></div></figure>


<h2>Login to OpenFaaS</h2>

<p>Login to OpenFaasS using faas-cli:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli login <span class="se">\</span>
</span><span class='line'>--gateway https://openfaas.domain.com <span class="se">\</span>
</span><span class='line'>--username <span class="k">${</span><span class="nv">OPENFAAS_USER</span><span class="k">}</span> <span class="se">\</span>
</span><span class='line'>--password <span class="k">${</span><span class="nv">OPENFAAS_PASSWORD</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Export the OPENFAAS_URL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">OPENFAAS_URL</span><span class="o">=</span>https://openfaas.domain.com
</span></code></pre></td></tr></table></div></figure>


<h2>Create the Lookup Function:</h2>

<p>Create a Python3 Function, and prefix it with your dockerhub user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli new <span class="se">\</span>
</span><span class='line'>--lang python3 fn-dynamodb-lookup <span class="se">\</span>
</span><span class='line'>--prefix<span class="o">=</span>ruanbekker <span class="se">\</span>
</span><span class='line'>--gateway https://openfaas.domain.com
</span></code></pre></td></tr></table></div></figure>


<p>Open the stack file and set the environment variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat fn-dynamodb-lookup.yml
</span><span class='line'>provider:
</span><span class='line'>  name: openfaas
</span><span class='line'>  gateway: https://openfaas.domain.com
</span><span class='line'>functions:
</span><span class='line'>  fn-dynamodb-lookup:
</span><span class='line'>    lang: python3
</span><span class='line'>    handler: ./fn-dynamodb-lookup
</span><span class='line'>    image: ruanbekker/fn-dynamodb-lookup:latest
</span><span class='line'>    environment:
</span><span class='line'>      dynamodb_region: eu-west-1
</span><span class='line'>      dynamodb_table: lookup_table
</span></code></pre></td></tr></table></div></figure>


<p>The python code for our function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat fn-dynamodb-lookup/handler.py
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">hashlib</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">calc_sha</span><span class="p">(</span><span class="n">id_number</span><span class="p">,</span> <span class="n">lastname</span><span class="p">):</span>
</span><span class='line'>    <span class="n">string</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">({</span><span class="s">&quot;id&quot;</span><span class="p">:</span> <span class="n">id_number</span><span class="p">,</span> <span class="s">&quot;lastname&quot;</span><span class="p">:</span> <span class="n">lastname</span><span class="p">},</span> <span class="n">sort_keys</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">hash_value</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;utf-8&quot;</span><span class="p">))</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">hash_value</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="n">req</span><span class="p">):</span>
</span><span class='line'>    <span class="n">event</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>    <span class="n">hash_value</span> <span class="o">=</span> <span class="n">calc_sha</span><span class="p">(</span><span class="n">event</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">],</span> <span class="n">event</span><span class="p">[</span><span class="s">&#39;lastname&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">hash_value</span>
</span></code></pre></td></tr></table></div></figure>


<p>Build, ship and deploy your function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli build -f fn-dynamodb-lookup.yml <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>faas-cli push -f fn-dynamodb-lookup.yml <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>faas-cli deploy -f fn-dynamodb-lookup.yml
</span><span class='line'>
</span><span class='line'>Deploying: fn-dynamodb-lookup.
</span><span class='line'>Deployed. <span class="m">202</span> Accepted.
</span><span class='line'>URL: https://openfaas.domain.com/function/fn-dynamodb-lookup
</span></code></pre></td></tr></table></div></figure>


<h2>Create the Write Function:</h2>

<p>Create a Python3 Function, and prefix it with your dockerhub user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli new <span class="se">\</span>
</span><span class='line'>--lang python3 fn-dynamodb-write <span class="se">\</span>
</span><span class='line'>--prefix<span class="o">=</span>ruanbekker <span class="se">\</span>
</span><span class='line'>--gateway https://openfaas.domain.com
</span></code></pre></td></tr></table></div></figure>


<p>Open the stack file and set the environment variables and include the secrets that was created:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat fn-dynamodb-write.yml
</span><span class='line'>provider:
</span><span class='line'>  name: openfaas
</span><span class='line'>  gateway: https://openfaas.domain.com
</span><span class='line'>functions:
</span><span class='line'>  fn-dynamodb-write:
</span><span class='line'>    lang: python3
</span><span class='line'>    handler: ./fn-dynamodb-write
</span><span class='line'>    image: ruanbekker/fn-dynamodb-write:latest
</span><span class='line'>    environment:
</span><span class='line'>      dynamodb_region: eu-west-1
</span><span class='line'>      dynamodb_table: lookup_table
</span><span class='line'>    secrets:
</span><span class='line'>      - openfaas-aws-access-key
</span><span class='line'>      - openfaas-aws-secret-key
</span></code></pre></td></tr></table></div></figure>


<p>Our function relies on a external dependency which we need to install to interact with aws:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat fn-dynamodb-write/requirements.txt
</span><span class='line'>boto3
</span></code></pre></td></tr></table></div></figure>


<p>Our python code for our function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat fn-dynamodb-write/handler.py
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">hashlib</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">datetime</span>
</span><span class='line'>
</span><span class='line'><span class="n">aws_key</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/var/openfaas/secrets/openfaas-aws-access-key&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="n">aws_secret</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/var/openfaas/secrets/openfaas-aws-secret-key&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="n">dynamodb_region</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;dynamodb_region&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">dynamodb_table</span>  <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;dynamodb_table&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">region_name</span><span class="o">=</span><span class="n">dynamodb_region</span><span class="p">)</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s">&#39;dynamodb&#39;</span><span class="p">,</span> <span class="n">aws_access_key_id</span><span class="o">=</span><span class="n">aws_key</span><span class="p">,</span> <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="n">aws_secret</span><span class="p">)</span>
</span><span class='line'><span class="n">table</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">Table</span><span class="p">(</span><span class="n">dynamodb_table</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">calc_sha</span><span class="p">(</span><span class="n">id_number</span><span class="p">,</span> <span class="n">lastname</span><span class="p">):</span>
</span><span class='line'>    <span class="n">string</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">({</span><span class="s">&quot;id&quot;</span><span class="p">:</span> <span class="n">id_number</span><span class="p">,</span> <span class="s">&quot;lastname&quot;</span><span class="p">:</span> <span class="n">lastname</span><span class="p">},</span> <span class="n">sort_keys</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">hash_value</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;utf-8&quot;</span><span class="p">))</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">hash_value</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">create_timestamp</span><span class="p">():</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%Y-%m-</span><span class="si">%d</span><span class="s">T%H:%M&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">response</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="n">req</span><span class="p">):</span>
</span><span class='line'>    <span class="n">event</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>    <span class="n">unique_id</span> <span class="o">=</span> <span class="n">calc_sha</span><span class="p">(</span><span class="n">event</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">],</span> <span class="n">event</span><span class="p">[</span><span class="s">&#39;lastname&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">table</span><span class="o">.</span><span class="n">put_item</span><span class="p">(</span>
</span><span class='line'>        <span class="n">Item</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;hash_value&#39;</span><span class="p">:</span> <span class="n">unique_id</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;timestamp&#39;</span><span class="p">:</span> <span class="n">create_timestamp</span><span class="p">(),</span>
</span><span class='line'>            <span class="s">&#39;payload&#39;</span><span class="p">:</span> <span class="n">event</span><span class="p">[</span><span class="s">&#39;payload&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">response</span>
</span></code></pre></td></tr></table></div></figure>


<p>Build, ship and deploy your function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli build -f fn-dynamodb-write.yml <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>faas-cli push -f fn-dynamodb-write.yml <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>faas-cli deploy -f fn-dynamodb-write.yml
</span><span class='line'>
</span><span class='line'>Deploying: fn-dynamodb-write.
</span><span class='line'>Deployed. <span class="m">202</span> Accepted.
</span><span class='line'>URL: https://openfaas.domain.com/function/fn-dynamodb-write
</span></code></pre></td></tr></table></div></figure>


<h2>Create the Get Function:</h2>

<p>Create a Python3 Function, and prefix it with your dockerhub user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli new <span class="se">\</span>
</span><span class='line'>--lang python3 fn-dynamodb-get <span class="se">\</span>
</span><span class='line'>--prefix<span class="o">=</span>ruanbekker <span class="se">\</span>
</span><span class='line'>--gateway https://openfaas.domain.com
</span></code></pre></td></tr></table></div></figure>


<p>Open the stack file and set the environment variables and include the secrets that was created:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat fn-dynamodb-get.yml
</span><span class='line'>provider:
</span><span class='line'>  name: openfaas
</span><span class='line'>  gateway: https://openfaas.domain.com
</span><span class='line'>functions:
</span><span class='line'>  fn-dynamodb-get:
</span><span class='line'>    lang: python3
</span><span class='line'>    handler: ./fn-dynamodb-get
</span><span class='line'>    image: ruanbekker/fn-dynamodb-get:latest
</span><span class='line'>    environment:
</span><span class='line'>      dynamodb_region: eu-west-1
</span><span class='line'>      dynamodb_table: lookup_table
</span><span class='line'>    secrets:
</span><span class='line'>      - openfaas-aws-access-key
</span><span class='line'>      - openfaas-aws-secret-key
</span></code></pre></td></tr></table></div></figure>


<p>Include the external dependency for aws:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat fn-dynamodb-get/requirements.txt
</span><span class='line'>boto3
</span></code></pre></td></tr></table></div></figure>


<p>Our python code for our function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat fn-dynamodb-get/handler.py
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'>
</span><span class='line'><span class="n">aws_key</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/var/openfaas/secrets/openfaas-aws-access-key&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="n">aws_secret</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/var/openfaas/secrets/openfaas-aws-secret-key&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="n">dynamodb_region</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;dynamodb_region&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">dynamodb_table</span>  <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;dynamodb_table&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">region_name</span><span class="o">=</span><span class="n">dynamodb_region</span><span class="p">)</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s">&#39;dynamodb&#39;</span><span class="p">,</span> <span class="n">aws_access_key_id</span><span class="o">=</span><span class="n">aws_key</span><span class="p">,</span> <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="n">aws_secret</span><span class="p">)</span>
</span><span class='line'><span class="n">table</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">Table</span><span class="p">(</span><span class="n">dynamodb_table</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="n">req</span><span class="p">):</span>
</span><span class='line'>    <span class="n">event</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">table</span><span class="o">.</span><span class="n">get_item</span><span class="p">(</span>
</span><span class='line'>        <span class="n">Key</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;hash_value&#39;</span><span class="p">:</span> <span class="n">event</span><span class="p">[</span><span class="s">&#39;hash_value&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;Item&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">response</span><span class="p">:</span>
</span><span class='line'>        <span class="n">item_data</span> <span class="o">=</span> <span class="s">&#39;Item not found&#39;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">item_data</span> <span class="o">=</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;Item&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">item_data</span>
</span></code></pre></td></tr></table></div></figure>


<p>Build, ship and deploy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>faas-cli build -f fn-dynamodb-get.yml <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>faas-cli push -f fn-dynamodb-get.yml <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>faas-cli deploy -f fn-dynamodb-get.yml
</span><span class='line'>
</span><span class='line'>Deploying: fn-dynamodb-get.
</span><span class='line'>Deployed. <span class="m">202</span> Accepted.
</span><span class='line'>URL: https://openfaas.domain.com/function/fn-dynamodb-get
</span></code></pre></td></tr></table></div></figure>


<h2>Time for our Functions to interact with DynamoDB:</h2>

<p>Write an Item to DynamoDB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST https://openfaas.domain.com/function/fn-dynamodb-write -d <span class="s1">&#39;{&quot;id&quot;: 8700000000001, &quot;lastname&quot;: &quot;smith&quot;, &quot;payload&quot;: {&quot;name&quot;: &quot;james&quot;, &quot;role&quot;: &quot;reader&quot;}}&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s1">&#39;ResponseMetadata&#39;</span>: <span class="o">{</span><span class="s1">&#39;RequestId&#39;</span>: <span class="s1">&#39;CNHEFHMSL4KGRDE0HRVQ69D5H7VV4KQNSO5AEMVJF66Q9ASUAAJG&#39;</span>, <span class="s1">&#39;HTTPStatusCode&#39;</span>: 200, <span class="s1">&#39;HTTPHeaders&#39;</span>: <span class="o">{</span><span class="s1">&#39;server&#39;</span>: <span class="s1">&#39;Server&#39;</span>, <span class="s1">&#39;date&#39;</span>: <span class="s1">&#39;Sat, 06 Jul 2019 20:47:00 GMT&#39;</span>, <span class="s1">&#39;content-type&#39;</span>: <span class="s1">&#39;application/x-amz-json-1.0&#39;</span>, <span class="s1">&#39;content-length&#39;</span>: <span class="s1">&#39;2&#39;</span>, <span class="s1">&#39;connection&#39;</span>: <span class="s1">&#39;keep-alive&#39;</span>, <span class="s1">&#39;x-amzn-requestid&#39;</span>: <span class="s1">&#39;CNHEFHMSL4KGRDE0HRVQ69D5H7VV4KQNSO5AEMVJF66Q9ASUAAJG&#39;</span>, <span class="s1">&#39;x-amz-crc32&#39;</span>: <span class="s1">&#39;2745614147&#39;</span><span class="o">}</span>, <span class="s1">&#39;RetryAttempts&#39;</span>: 0<span class="o">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Write another Item to DynamoDB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST https://openfaas.doamin.com/function/fn-dynamodb-write -d <span class="s1">&#39;{&quot;id&quot;: 8700000000002, &quot;lastname&quot;: &quot;adams&quot;, &quot;payload&quot;: {&quot;name&quot;: &quot;samantha&quot;, &quot;role&quot;: &quot;admin&quot;}}&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s1">&#39;ResponseMetadata&#39;</span>: <span class="o">{</span><span class="s1">&#39;RequestId&#39;</span>: <span class="s1">&#39;KRQL838BVGC9LIUSCOUB7MOEQ7VV4KQNSO5AEMVJF66Q9ASUAAJG&#39;</span>, <span class="s1">&#39;HTTPStatusCode&#39;</span>: 200, <span class="s1">&#39;HTTPHeaders&#39;</span>: <span class="o">{</span><span class="s1">&#39;server&#39;</span>: <span class="s1">&#39;Server&#39;</span>, <span class="s1">&#39;date&#39;</span>: <span class="s1">&#39;Sat, 06 Jul 2019 20:48:09 GMT&#39;</span>, <span class="s1">&#39;content-type&#39;</span>: <span class="s1">&#39;application/x-amz-json-1.0&#39;</span>, <span class="s1">&#39;content-length&#39;</span>: <span class="s1">&#39;2&#39;</span>, <span class="s1">&#39;connection&#39;</span>: <span class="s1">&#39;keep-alive&#39;</span>, <span class="s1">&#39;x-amzn-requestid&#39;</span>: <span class="s1">&#39;KRQL838BVGC9LIUSCOUB7MOEQ7VV4KQNSO5AEMVJF66Q9ASUAAJG&#39;</span>, <span class="s1">&#39;x-amz-crc32&#39;</span>: <span class="s1">&#39;2745614147&#39;</span><span class="o">}</span>, <span class="s1">&#39;RetryAttempts&#39;</span>: 0<span class="o">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now recalculate the hash by passing the ID Number and Lastname to get the hash value for the primary key:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST https://openfaas.domain.com/function/fn-dynamodb-lookup -d <span class="s1">&#39;{&quot;id&quot;: 8700000000002, &quot;lastname&quot;: &quot;adams&quot;}&#39;</span>
</span><span class='line'>bd0a248aff2b50b288ba504bd7142ef11b164901
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have the hash value, do a GetItem by using the hash value in the request body:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST https://openfaas.domain.com/function/fn-dynamodb-get -d <span class="s1">&#39;{&quot;hash_value&quot;: &quot;bd0a248aff2b50b288ba504bd7142ef11b164901&quot;}&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s1">&#39;payload&#39;</span>: <span class="o">{</span><span class="s1">&#39;name&#39;</span>: <span class="s1">&#39;samantha&#39;</span>, <span class="s1">&#39;role&#39;</span>: <span class="s1">&#39;admin&#39;</span><span class="o">}</span>, <span class="s1">&#39;hash_value&#39;</span>: <span class="s1">&#39;bd0a248aff2b50b288ba504bd7142ef11b164901&#39;</span>, <span class="s1">&#39;timestamp&#39;</span>: <span class="s1">&#39;2019-07-06T20:48&#39;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the lookup function calculates a hash based on the input that you provide it, for example calculating a hash with userdata that does not exist in our table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST https://openfaas.domain.com/function/fn-dynamodb-lookup -d <span class="s1">&#39;{&quot;id&quot;: 8700000000003, &quot;lastname&quot;: &quot;williams&quot;}&#39;</span>
</span><span class='line'>c68dc272873140f4ae93bb3a3317772a6bdd9aa1
</span></code></pre></td></tr></table></div></figure>


<p>Using that hash value in our request body to read from dynamodb, will show us that the item has not been found:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST https://openfaas.domain.com/function/fn-dynamodb-get -d <span class="s1">&#39;{&quot;hash_value&quot;: &quot;c68dc272873140f4ae93bb3a3317772a6bdd9aa1&quot;}&#39;</span>
</span><span class='line'>Item not found
</span></code></pre></td></tr></table></div></figure>


<p>You might want to change this behavior but this is just for the demonstration of this post.</p>

<p>When you head over to DynamoDB&rsquo;s console you will see this in your table:</p>

<p><img width="873" alt="image" src="https://user-images.githubusercontent.com/567298/60761025-9e8e7c80-a040-11e9-83a3-ad5b474a28ff.png"></p>

<h2>Thanks</h2>

<p>This was a basic example using OpenFaaS with Amazon DynamoDB with Python and secrets managed with OpenFaas. I really like the way OpenFaaS let&rsquo;s you work with secrets, it works great and don&rsquo;t need an additional resource to manage your sensitive data.</p>

<p>Although this was basic usage with OpenFaaS and DynamoDB, the sky is the limit what you can do with it.</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://aws.amazon.com/blogs/database/choosing-the-right-dynamodb-partition-key/">DynamoDB: Choosing the right Partition Key</a></li>
<li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-partition-key-uniform-load.html">Designing Partition Keys to Distribute Your Workload Evenly</a></li>
<li><a href="https://docs.openfaas.com/contributing/get-started/">OpenFaaS: Getting Started</a></li>
<li><a href="https://docs.openfaas.com/reference/secrets/">OpenFaaS: Secrets</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play With Kinesis Data Streams for Free]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/06/22/play-with-kinesis-data-streams-for-free/"/>
    <updated>2019-06-22T17:35:19-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/06/22/play-with-kinesis-data-streams-for-free</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/59969559-3f187300-9550-11e9-9e6d-7fa4dbc30198.png" alt="image" /></p>

<p>Misleading title? Perhaps, depends on how you look at it. Amazon Kinesis is a fully managed, cloud-based service for real-time processing of distributed data streams. So if you&rsquo;re a curious mad person like me, you want to test out stuff and when you can test stuff out for free, why not.</p>

<p>So before paying for that, why not spin something up locally, such as <a href="https://github.com/mhart/kinesalite">Kinesisalite</a> which is an implementation of Amazon Kinesis built on top of LevelDB.</p>

<p>Kinesis overview:</p>

<p><img src="https://user-images.githubusercontent.com/567298/59969540-caddcf80-954f-11e9-8e3d-23c932d35ef1.png" alt="image" /></p>

<h2>What will we be doing?</h2>

<p>In this tutorial we will setup a local kinesis instance using docker then do the following:</p>

<ul>
<li>Create a Kinesis Stream, List, Describe, PutRecord, GetRecords using Python&rsquo;s Boto3 Interface</li>
<li>Write a Python Producer and Consumer</li>
<li>Write and Read Records from our Local Kinesis Stream</li>
</ul>


<h2>Building Kinesis Local on Docker</h2>

<p>If you would like to skip this step, you can use my docker image: <a href="https://hub.docker.com/r/ruanbekker/kinesis-local">ruanbekker/kinesis-local:latest</a></p>

<p>Our Dockerfile:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM node:8.16.0-stretch-slim
</span><span class='line'>
</span><span class='line'>RUN apt update && apt install build-essential python-minimal -y
</span><span class='line'>RUN npm install --unsafe-perm -g kinesalite
</span><span class='line'>RUN apt-get clean
</span><span class='line'>
</span><span class='line'>CMD ["kinesalite", "--port", "4567", "--createStreaMs", "5"]</span></code></pre></td></tr></table></div></figure>


<p>Build:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker build -t kinesis-local .</span></code></pre></td></tr></table></div></figure>


<p>Run and expose port 4567:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run -it -p 4567:4567 kinesis-local:latest</span></code></pre></td></tr></table></div></figure>


<h2>Interact with Kinesis Local:</h2>

<p>In this next steps we will setup our environment, which will only require <code>python</code> and <code>boto3</code>. To keep things isolated, I will do this with a docker container:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run -it python:3.7-alpine sh</span></code></pre></td></tr></table></div></figure>


<p>Now we need to install boto3 and enter the python repl:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip3 install boto3
</span><span class='line'>$ python3
</span><span class='line'>Python 3.7.3 (default, May 11 2019, 02:00:41)
</span><span class='line'>[GCC 8.3.0] on linux
</span><span class='line'>Type "help", "copyright", "credits" or "license" for more information.
</span><span class='line'>&gt;&gt;&gt;</span></code></pre></td></tr></table></div></figure>


<p>Import boto and create the connection to our kinesis local instance:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; import boto3
</span><span class='line'>&gt;&gt;&gt; client = boto3.Session(
</span><span class='line'>    region_name='eu-west-1').client('kinesis', aws_access_key_id='', aws_secret_access_key='', endpoint_url='http://localhost:4567'
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s list our streams and as expected, we should have zero streams available:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; client.list_streams()
</span><span class='line'>{u'StreamNames': [], u'HasMoreStreams': False, 'ResponseMetadata': {'RetryAttempts': 0, 'HTTPStatusCode': 200, 'RequestId': '637xx', 'HTTPHeaders': {'x-amzn-requestid': '6xx', 'content-length': '41', 'x-amz-id-2': 'xx', 'connection': 'keep-alive', 'date': 'Sat, 22 Jun 2019 19:17:34 GMT', 'content-type': 'application/x-amz-json-1.1'}}}</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s create a stream named <code>mystream</code> with 1 primary shard:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; client.create_stream(StreamName='mystream', ShardCount=1)</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s list our streams again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; client.list_streams()
</span><span class='line'>{u'StreamNames': [u'mystream'], u'HasMoreStreams': False, 'ResponseMetadata': ...</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s put some data in our kinesis stream, we will push a payload with the body: <code>{"name": "ruan"}</code> to our kinesis stream with partition key: <code>a01</code> which is used for sharding:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; response = client.put_record(StreamName='mystream', Data=json.dumps({"name": "ruan"}), PartitionKey='a01')
</span><span class='line'>&gt;&gt;&gt; response
</span><span class='line'>{u'ShardId': u'shardId-000000000000', 'ResponseMetadata': {'RetryAttempts': 0, 'HTTPStatusCode': 200, 'RequestId': 'cb0xx', 'HTTPHeaders': {'x-amzn-requestid': 'xx', 'content-length': '110', 'x-amz-id-2': 'xx', 'connection': 'keep-alive', 'date': 'Sat, 22 Jun 2019 19:20:27 GMT', 'content-type': 'application/x-amz-json-1.1'}}, u'SequenceNumber': u'490xx'}</span></code></pre></td></tr></table></div></figure>


<p>Now that we have data in our stream we need to read data from our kinesis stream. Before data can be read from the stream we need to obtain the shard iterator for the shard we are interested in. A shard iterator represents the position of the stream and shard from which the consumer will read, in this case we will call the get_shard_operator method and passing the stream name, shard id and shard iterator type.</p>

<p>There are 2 comman iterator types:</p>

<ul>
<li>TRIM_HORIZON: Points to the last untrimmed record in the shard</li>
<li>LATEST: Reads the most recent data in the shard</li>
</ul>


<p>We will use TRIM_HORIZON in this case, get the shard iterator id:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; shard_id = response['ShardId']
</span><span class='line'>&gt;&gt;&gt; response = client.get_shard_iterator(StreamName='mystream', ShardId=shard_id, ShardIteratorType='TRIM_HORIZON')
</span><span class='line'>&gt;&gt;&gt; response
</span><span class='line'>{u'ShardIterator': u'AAAxx=', 'ResponseMetadata': {'RetryAttempts': 0, 'HTTPStatusCode': 200, 'RequestId': '22dxx', 'HTTPHeaders': {'x-amzn-requestid': '22dxx', 'content-length': '224', 'x-amz-id-2': 'xx', 'connection': 'keep-alive', 'date': 'Sat, 22 Jun 2019 19:22:55 GMT', 'content-type': 'application/x-amz-json-1.1'}}}</span></code></pre></td></tr></table></div></figure>


<p>Now that we have the shard iterator id, we can call the get_records method with the shard iterator id, to read the data from the stream:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; shard_iterator = response['ShardIterator']
</span><span class='line'>&gt;&gt;&gt; response = client.get_records(ShardIterator=shard_iterator)
</span><span class='line'>&gt;&gt;&gt; response
</span><span class='line'>{u'Records': [{u'Data': '{"name": "ruan"}', u'PartitionKey': u'a01', u'ApproximateArrivalTimestamp': datetime.datetime(2019, 6, 22, 21, 20, 27, 937000, tzinfo=tzlocal()), u'SequenceNumber': u'495xx'}], 'ResponseMetadata': {'RetryAttempts': 0, 'HTTPStatusCode': 200, 'RequestId': '2b6xx', 'HTTPHeaders': {'x-amzn-requestid': '2b6xx', 'content-length': '441', 'x-amz-id-2': 'xx', 'connection': 'keep-alive', 'date': 'Sat, 22 Jun 2019 19:30:19 GMT', 'content-type': 'application/x-amz-json-1.1'}}, u'NextShardIterator': u'AAAxx=', u'MillisBehindLatest': 0}</span></code></pre></td></tr></table></div></figure>


<p>To loop and parse through the response to make it more readable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; for record in response['Records']:
</span><span class='line'>...     if 'Data' in record:
</span><span class='line'>...         json.loads(record['Data'])
</span><span class='line'>...
</span><span class='line'>{u'name': u'ruan'}</span></code></pre></td></tr></table></div></figure>


<p>Once we are done, we can delete our stream:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; client.delete_stream(StreamName='mystream')</span></code></pre></td></tr></table></div></figure>


<p>Now that we have the basics, lets create our producer and consumer for a demonstration on pushing data to a kinesis stream from one process and consuming it from another process. As this demonstration we will be producing and consuming data from the same laptop, in real use-cases, you will do them from seperate servers and using Amazon Kinesis.</p>

<h2>Our Kinesis Producer</h2>

<p>The following will create a Kinesis Local Stream and Write 25 JSON Documents to our stream:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;james&#39;</span><span class="p">,</span> <span class="s">&#39;stefan&#39;</span><span class="p">,</span> <span class="s">&#39;pete&#39;</span><span class="p">,</span> <span class="s">&#39;tom&#39;</span><span class="p">,</span> <span class="s">&#39;frank&#39;</span><span class="p">,</span> <span class="s">&#39;peter&#39;</span><span class="p">,</span> <span class="s">&#39;ruan&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">session</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">region_name</span><span class="o">=</span><span class="s">&#39;eu-west-1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">client</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;kinesis&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">aws_access_key_id</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">endpoint_url</span><span class="o">=</span><span class="s">&#39;http://localhost:4567&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">list_streams</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">list_streams</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="s">&#39;mystream&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">list_streams</span><span class="p">[</span><span class="s">&#39;StreamNames&#39;</span><span class="p">]:</span>
</span><span class='line'>    <span class="n">client</span><span class="o">.</span><span class="n">create_stream</span><span class="p">(</span><span class="n">StreamName</span><span class="o">=</span><span class="s">&#39;mystream&#39;</span><span class="p">,</span> <span class="n">ShardCount</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;Starting at {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%H:%m:%S&quot;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="n">count</span> <span class="o">!=</span> <span class="mi">25</span><span class="p">:</span>
</span><span class='line'>    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">put_record</span><span class="p">(</span>
</span><span class='line'>        <span class="n">StreamName</span><span class="o">=</span><span class="s">&#39;mystream&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">Data</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">({</span>
</span><span class='line'>            <span class="s">&quot;number&quot;</span><span class="p">:</span> <span class="n">count</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">names</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&quot;age&quot;</span><span class="p">:</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">50</span><span class="p">)}</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>        <span class="n">PartitionKey</span><span class="o">=</span><span class="s">&#39;a01&#39;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;Finished at {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%H:%m:%S&quot;</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Our Kinesis Local Consumer:</h2>

<p>This will read 5 records at a time from our stream, you will notice if you run them on the same time it will only read one at a time as the producer only writes one per second.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'>
</span><span class='line'><span class="n">session</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">region_name</span><span class="o">=</span><span class="s">&#39;eu-west-1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">client</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;kinesis&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">aws_access_key_id</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">endpoint_url</span><span class="o">=</span><span class="s">&#39;http://localhost:4567&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">stream_details</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">describe_stream</span><span class="p">(</span><span class="n">StreamName</span><span class="o">=</span><span class="s">&#39;mystream&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">shard_id</span> <span class="o">=</span> <span class="n">stream_details</span><span class="p">[</span><span class="s">&#39;StreamDescription&#39;</span><span class="p">][</span><span class="s">&#39;Shards&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">&#39;ShardId&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">get_shard_iterator</span><span class="p">(</span>
</span><span class='line'>    <span class="n">StreamName</span><span class="o">=</span><span class="s">&#39;mystream&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ShardId</span><span class="o">=</span><span class="n">shard_id</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ShardIteratorType</span><span class="o">=</span><span class="s">&#39;TRIM_HORIZON&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">shard_iterator</span> <span class="o">=</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;ShardIterator&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">get_records</span><span class="p">(</span><span class="n">ShardIterator</span><span class="o">=</span><span class="n">shard_iterator</span><span class="p">,</span> <span class="n">Limit</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="n">shard_iterator</span> <span class="o">=</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;NextShardIterator&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">record</span> <span class="ow">in</span> <span class="n">response</span><span class="p">[</span><span class="s">&#39;Records&#39;</span><span class="p">]:</span>
</span><span class='line'>        <span class="k">if</span> <span class="s">&#39;Data&#39;</span> <span class="ow">in</span> <span class="n">record</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">record</span><span class="p">[</span><span class="s">&#39;Data&#39;</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">record</span><span class="p">[</span><span class="s">&#39;Data&#39;</span><span class="p">]))</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.75</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Demo Time!</h2>

<p>Now that we have our <code>producer.py</code> and <code>consumer.py</code>, lets test this out.</p>

<p>Start the server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">docker</span> <span class="n">run</span> <span class="o">-</span><span class="n">it</span> <span class="o">-</span><span class="n">p</span> <span class="mi">4567</span><span class="p">:</span><span class="mi">4567</span> <span class="n">ruanbekker</span><span class="o">/</span><span class="n">kinesis</span><span class="o">-</span><span class="n">local</span><span class="p">:</span><span class="n">latest</span>
</span><span class='line'><span class="n">Listening</span> <span class="n">at</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="p">:::</span><span class="mi">4567</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the Producer from your Python Environment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">python</span> <span class="n">producer</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="n">Starting</span> <span class="n">at</span> <span class="mo">00</span><span class="p">:</span><span class="mo">06</span><span class="p">:</span><span class="mi">16</span>
</span><span class='line'><span class="n">Finished</span> <span class="n">at</span> <span class="mo">00</span><span class="p">:</span><span class="mo">06</span><span class="p">:</span><span class="mi">42</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the Consumer from your Python Environment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">python</span> <span class="n">consumer</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="n">Starting</span> <span class="n">Consuming</span> <span class="n">at</span> <span class="mo">00</span><span class="p">:</span><span class="mo">06</span><span class="p">:</span><span class="mi">31</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;pete&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">23</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;ruan&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">22</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;peter&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">45</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;stefan&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">49</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;tom&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">47</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;pete&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">35</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;stefan&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">45</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;ruan&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">38</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;frank&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;tom&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">38</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">11</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;james&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;james&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">38</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">13</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;tom&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;tom&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;peter&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">16</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;james&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">29</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">17</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;james&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;pete&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">19</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;pete&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">36</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;tom&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">45</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">21</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;peter&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">39</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">22</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;ruan&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">43</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">23</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;tom&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">38</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">24</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;pete&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;age&#39;</span><span class="p">:</span> <span class="mi">40</span><span class="p">,</span> <span class="s">u&#39;number&#39;</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span> <span class="s">u&#39;name&#39;</span><span class="p">:</span> <span class="s">u&#39;frank&#39;</span><span class="p">}</span>
</span><span class='line'><span class="n">Finshed</span> <span class="n">Consuming</span> <span class="n">at</span> <span class="mo">00</span><span class="p">:</span><span class="mo">06</span><span class="p">:</span><span class="mi">35</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Thanks</h2>

<p><a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a></p>

<p>Hope that was useful, feel free to check out <a href="https://aws.amazon.com/kinesis/">Amazon&rsquo;s Kinesis</a> out if you are planning to run this in any non-testing environment</p>

<center>
        <script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script>
</center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Traefik as an Ingress Controller on Kubernetes]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/06/10/setup-traefik-as-an-ingress-controller-on-kubernetes/"/>
    <updated>2019-06-10T16:21:36-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/06/10/setup-traefik-as-an-ingress-controller-on-kubernetes</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/59225379-db498e00-8bd0-11e9-9f20-62aecf915431.png" alt="image" /></p>

<p>If you have not provisioned a Kubernetes Cluster, you can <a href="https://blog.ruanbekker.com/blog/2019/06/10/testing-out-scaleways-kapsule-their-kubernetes-as-a-service-offering/">see this tutorial</a> on how to provision a Kubernetes Cluster on Scaleway</p>

<h2>What will we be doing</h2>

<p>In this tutorial we will setup Traefik as an Ingress Controller on Kubernetes and deploy a logos web app to our Kubernetes Cluster, using frontend rules to map subdomains to specific services.</p>

<p>We will have 3 subdomains, being mapped to containers from the below docker images:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FQDN                     Image Name
</span><span class='line'>- python.domain.com   -&gt; ruanbekker/logos:python
</span><span class='line'>- openfaas.domain.com -&gt; ruanbekker/logos:openfaas
</span><span class='line'>- rancher.domain.com  -&gt; ruanbekker/logos:rancher</span></code></pre></td></tr></table></div></figure>


<h2>Get the sources</h2>

<p>If you would like to get the source code for this demonstration you can checkout this repository: <a href="https://github.com/ruanbekker/traefik-kubernetes-scaleway-demo">https://github.com/ruanbekker/traefik-kubernetes-scaleway-demo</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/ruanbekker/traefik-kubernetes-scaleway-demo
</span><span class='line'>$ cd traefik-kubernetes-scaleway-demo</span></code></pre></td></tr></table></div></figure>


<h2>Provision Traefik as an Ingress Controller</h2>

<p>Apply role based access control to authorize Traefik to use the Kubernetes API:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f traefik/01-traefik-rbac.yaml
</span><span class='line'>clusterrole.rbac.authorization.k8s.io/traefik-ingress-controller created
</span><span class='line'>clusterrolebinding.rbac.authorization.k8s.io/traefik-ingress-controller created</span></code></pre></td></tr></table></div></figure>


<p>Consulting <a href="https://docs.traefik.io/user-guide/kubernetes/#deploy-traefik-using-a-deployment-or-daemonset">Traefik&rsquo;s</a> documentation, when deploying Traefik, it&rsquo;s possible to use a deployment or a demonset, not both. <a href="https://docs.traefik.io/user-guide/kubernetes/#deploy-traefik-using-a-deployment-or-daemonset">More details on why</a></p>

<p>I will go ahead and apply the Daemon Set:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f traefik/03-traefik-ds.yaml
</span><span class='line'>serviceaccount/traefik-ingress-controller created
</span><span class='line'>daemonset.extensions/traefik-ingress-controller created
</span><span class='line'>service/traefik-ingress-service created</span></code></pre></td></tr></table></div></figure>


<p>The Traefik UI Service will be associated with a FQDN, remember to set the FQDN for the endpoint, as example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat traefik/04-traefik-ui.yaml
</span><span class='line'>...
</span><span class='line'>spec:
</span><span class='line'>  rules:
</span><span class='line'>  - host: traefik-ui.x-x-x-x-x.nodes.k8s.fr-par.scw.cloud
</span><span class='line'>    http:
</span><span class='line'>      paths:
</span><span class='line'>      - path: /
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Create the Traefik UI Service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f traefik/04-traefik-ui.yaml
</span><span class='line'>service/traefik-web-ui created</span></code></pre></td></tr></table></div></figure>


<p>Traefik UI Ingress:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f traefik/05-traefik-ui-ingress.yaml
</span><span class='line'>ingress.extensions/traefik-web-ui created</span></code></pre></td></tr></table></div></figure>


<p>View the services:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get services --namespace=kube-system
</span><span class='line'>NAME                      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                  AGE
</span><span class='line'>coredns                   ClusterIP   x.x.x.x         &lt;none&gt;        53/UDP,53/TCP,9153/TCP   11h
</span><span class='line'>heapster                  ClusterIP   x.x.x.x         &lt;none&gt;        80/TCP                   11h
</span><span class='line'>kubernetes-dashboard      ClusterIP   x.x.x.x         &lt;none&gt;        443/TCP                  11h
</span><span class='line'>metrics-server            ClusterIP   x.x.x.x         &lt;none&gt;        443/TCP                  11h
</span><span class='line'>monitoring-influxdb       ClusterIP   x.x.x.x         &lt;none&gt;        8086/TCP                 11h
</span><span class='line'>traefik-ingress-service   ClusterIP   x.x.x.x         &lt;none&gt;        80/TCP,8080/TCP          24m
</span><span class='line'>traefik-web-ui            ClusterIP   x.x.x.x         &lt;none&gt;        80/TCP                   24m</span></code></pre></td></tr></table></div></figure>


<h2>Deploy the Logo App to the Cluster</h2>

<p>We will deploy the logo app to our cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f logos-app/logos-services.yaml
</span><span class='line'>service/openfaas created
</span><span class='line'>service/rancher created
</span><span class='line'>service/python created</span></code></pre></td></tr></table></div></figure>


<p>Create the deployment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f logos-app/logos-deployments.yaml
</span><span class='line'>deployment.extensions/openfaas created
</span><span class='line'>deployment.extensions/rancher created
</span><span class='line'>deployment.extensions/python created</span></code></pre></td></tr></table></div></figure>


<p>Before creating the ingress for the logo&rsquo;s applications, we need to set the fqdn endpoints that we want to route traffic to as below as an example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat logos-app/logos-ingress.yaml
</span><span class='line'>...
</span><span class='line'>spec:
</span><span class='line'>  rules:
</span><span class='line'>  - host: openfaas.x-x-x-x-x.nodes.k8s.fr-par.scw.cloud
</span><span class='line'>    http:
</span><span class='line'>      paths:
</span><span class='line'>      - path: /
</span><span class='line'>        backend:
</span><span class='line'>          serviceName: openfaas
</span><span class='line'>          servicePort: http
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Create the ingress:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl apply -f logos-app/logos-ingress.yaml
</span><span class='line'>ingress.extensions/logo created</span></code></pre></td></tr></table></div></figure>


<p>After some time, have a look at the pods to get the status:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get pods
</span><span class='line'>NAME                                     READY   STATUS    RESTARTS   AGE
</span><span class='line'>openfaas-cffdddc4-lvn5w                  1/1     Running   0          4m6s
</span><span class='line'>openfaas-cffdddc4-wbcl6                  1/1     Running   0          4m6s
</span><span class='line'>python-65ccf9c74b-8kmgp                  1/1     Running   0          4m6s
</span><span class='line'>python-65ccf9c74b-dgnqb                  1/1     Running   0          4m6s
</span><span class='line'>rancher-597b6b8554-mgcjr                 1/1     Running   0          4m6s
</span><span class='line'>rancher-597b6b8554-mpk62                 1/1     Running   0          4m6s</span></code></pre></td></tr></table></div></figure>


<h2>Navigating with Kubectl</h2>

<p>Show nodes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get nodes
</span><span class='line'>NAME                                             STATUS   ROLES    AGE   VERSION
</span><span class='line'>scw-k8s-mystifying-torvald-jovial-mclar-25a942   Ready    node     20h   v1.14.1
</span><span class='line'>scw-k8s-mystifying-torvald-jovial-mclar-eaf1a2   Ready    node     20h   v1.14.1
</span><span class='line'>scw-k8s-mystifying-torvalds-default-7f263aabab   Ready    master   20h   v1.14.1</span></code></pre></td></tr></table></div></figure>


<p>Show services:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get services
</span><span class='line'>NAME                    TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)           AGE
</span><span class='line'>kubernetes              ClusterIP   10.32.0.1      &lt;none&gt;        443/TCP           20h
</span><span class='line'>openfaas                ClusterIP   10.41.47.185   &lt;none&gt;        80/TCP            9h
</span><span class='line'>python                  ClusterIP   10.42.56.141   &lt;none&gt;        80/TCP            9h
</span><span class='line'>rancher                 ClusterIP   10.32.41.218   &lt;none&gt;        80/TCP            9h</span></code></pre></td></tr></table></div></figure>


<p>Show Pods:</p>

<p><em>To see pods from the kube-system namespace add -n kube-system</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get pods
</span><span class='line'>NAME                                     READY   STATUS    RESTARTS   AGE
</span><span class='line'>openfaas-cffdddc4-lvn5w                  1/1     Running   0          9h
</span><span class='line'>openfaas-cffdddc4-wbcl6                  1/1     Running   0          9h
</span><span class='line'>python-65ccf9c74b-8kmgp                  1/1     Running   0          9h
</span><span class='line'>python-65ccf9c74b-dgnqb                  1/1     Running   0          9h
</span><span class='line'>rancher-597b6b8554-mgcjr                 1/1     Running   0          9h
</span><span class='line'>rancher-597b6b8554-mpk62                 1/1     Running   0          9h</span></code></pre></td></tr></table></div></figure>


<p>Show deployments:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get deployments -o wide
</span><span class='line'>NAME                    READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS  IMAGES                      SELECTOR
</span><span class='line'>openfaas                2/2     2            2           9h    logo        ruanbekker/logos:openfaas   app=logo,task=openfaas
</span><span class='line'>python                  2/2     2            2           9h    logo        ruanbekker/logos:python     app=logo,task=python
</span><span class='line'>rancher                 2/2     2            2           9h    logo        ruanbekker/logos:rancher    app=logo,task=rancher</span></code></pre></td></tr></table></div></figure>


<p>Show ingress:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get ingress -o wide
</span><span class='line'>NAME      HOSTS                                                          ADDRESS   PORTS   AGE
</span><span class='line'>logo      openfaas.domain.com,rancher.domain.com,python.domain.com       80      9h</span></code></pre></td></tr></table></div></figure>


<p>Show system ingress:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get ingress -o wide -n kube-system
</span><span class='line'>NAME             HOSTS                     ADDRESS   PORTS   AGE
</span><span class='line'>traefik-web-ui   traefik-ui.domain.com               80      9h</span></code></pre></td></tr></table></div></figure>


<h2>Access your Applications</h2>

<p>Access the Traefik-UI, and filter for one of the applications. Let&rsquo;s take OpenFaaS for an example:</p>

<p><img src="https://user-images.githubusercontent.com/567298/59177432-63418080-8b5c-11e9-8e54-20600508e510.png" alt="image" /></p>

<p>Access the OpenFaaS Page via the URL:</p>

<p><img src="https://user-images.githubusercontent.com/567298/59177206-a4856080-8b5b-11e9-8954-238590f18e5c.png" alt="image" /></p>

<h2>Resources</h2>

<ul>
<li><a href="https://docs.traefik.io/user-guide/kubernetes/">https://docs.traefik.io/user-guide/kubernetes/</a></li>
</ul>


<center>
        <script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script>
</center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Out Scaleways Kapsule Their Kubernetes as a Service Offering]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/06/10/testing-out-scaleways-kapsule-their-kubernetes-as-a-service-offering/"/>
    <updated>2019-06-10T12:28:45-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/06/10/testing-out-scaleways-kapsule-their-kubernetes-as-a-service-offering</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/59177864-a5b78d00-8b5d-11e9-931c-5b5dd4e81805.png" alt="" /></p>

<p>At this time of writing (2019.06.10) Scaleway&rsquo;s Kubernetes as a Service, named Kapsule is in Private Beta and got access and pretty stoked on how easy it is to provision a Kubernetes cluster.</p>

<h2>What are we doing today?</h2>

<p>In this tutorial I will show you how easy it is to provision a 3 node Kubernetes Cluster on Scaleway. In the upcoming tutorial, I will create traefik as an ingress controller and deploy applications to our cluster. <a href="https://github.com/ruanbekker/traefik-kubernetes-scaleway-demo">Github Repo Version available for now</a></p>

<h2>Provision a Kapsule Cluster</h2>

<p>Head over to Kapsule and provision a Kubernetes Cluster:</p>

<p><img src="https://user-images.githubusercontent.com/567298/59164353-e71f4c80-8b0b-11e9-8f5c-7c65db1af7b2.png" alt="" /></p>

<p>At this point in time, I will only create a one node &ldquo;cluster&rdquo;, as I want to show how to add pools after the intial creation.</p>

<p>After the cluster has been provisioned, you will get information about your endpoints from the Cluster Infromation Section, which we will need for our ingresses:</p>

<p><img src="https://user-images.githubusercontent.com/567298/59180685-df8c9180-8b65-11e9-82aa-05ee3cd42c78.png" alt="" /></p>

<p>Scroll down to download your config:</p>

<p><img src="https://user-images.githubusercontent.com/567298/59164356-f56d6880-8b0b-11e9-8c00-34dff0ba61fb.png" alt="" /></p>

<p>Move your config in place:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mv ~/Downloads/kubeconfig-k8s-mystifying-torvalds.yaml ~/.kube/config</span></code></pre></td></tr></table></div></figure>


<h2>Interact with your Cluster</h2>

<p>Test the connection by getting the info of your nodes in your kubernetes cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get node
</span><span class='line'>NAME                                             STATUS    ROLES     AGE       VERSION
</span><span class='line'>scw-k8s-mystifying-torvalds-default-7f263aabab   Ready     &lt;none&gt;    4m        v1.14.1</span></code></pre></td></tr></table></div></figure>


<h2>Add more nodes:</h2>

<p>Provision another pool with 2 more nodes in our cluster:</p>

<p><img src="https://user-images.githubusercontent.com/567298/59164387-4e3d0100-8b0c-11e9-8633-b3fc680ac4cd.png" alt="" /></p>

<p>After the pool has been provisioned, verified that they have joined the cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get nodes
</span><span class='line'>NAME                                             STATUS    ROLES     AGE       VERSION
</span><span class='line'>scw-k8s-mystifying-torvald-jovial-mclar-25a942   Ready     &lt;none&gt;    2m        v1.14.1
</span><span class='line'>scw-k8s-mystifying-torvald-jovial-mclar-eaf1a2   Ready     &lt;none&gt;    2m        v1.14.1
</span><span class='line'>scw-k8s-mystifying-torvalds-default-7f263aabab   Ready     &lt;none&gt;    15m       v1.14.1</span></code></pre></td></tr></table></div></figure>


<h2>Master / Node Capabilities</h2>

<p>Usually, I will label master nodes as master: <code>node-role.kubernetes.io/master</code> and worker nodes as nodes: <code>node-role.kubernetes.io/node</code> to allow container scheduling only on the worker nodes. But Scaleway manages this on their end and when you list your nodes, the nodes that you see are your &ldquo;worker&rdquo; nodes.</p>

<p>The master nodes are managed by Scaleway.</p>

<h2>Well Done Scaleway</h2>

<p>Just one more reason I really love Kapsule. Simplicity at its best, well done to <a href="https://scaleway.com">Scaleway</a>. I hope most of the people got access to private beta, but if not, im pretty sure they will keep the public informed on public release dates.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Logstash Server for Amazon Elasticsearch Service and Auth With IAM]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/06/04/setup-a-logstash-server-for-amazon-elasticsearch-service-and-auth-with-iam/"/>
    <updated>2019-06-04T17:46:27-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/06/04/setup-a-logstash-server-for-amazon-elasticsearch-service-and-auth-with-iam</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/59209960-ca872100-8bac-11e9-8672-8c6af502afe0.png" alt="logstash" /></p>

<p>As many of you might know, when you deploy a ELK stack on Amazon Web Services, you only get E and K in the ELK stack, which is Elasticsearch and Kibana. Here we will be dealing with Logstash on EC2.</p>

<h2>What will we be doing</h2>

<p>In this tutorial we will setup a Logstash Server on EC2, setup a IAM Role and Autenticate Requests to Elasticsearch with an IAM Role, setup Nginx so that logstash can ship logs to Elasticsearch.</p>

<p>I am not fond of working with access key&rsquo;s and secret keys, and if I can stay away from handling secret information the better. So instead of creating a access key and secret key for logstash, we will instead create a IAM Policy that will allow the actions to Elasticsearch, associate that policy to an IAM Role, set EC2 as a trusted entity and strap that IAM Role to the EC2 Instance.</p>

<p>Then we will allow the IAM Role ARN to the Elasticsearch Policy, then when Logstash makes requests against Elasticsearch, it will use the IAM Role to assume temporary credentials to authenticate. That way we don&rsquo;t have to deal with keys. But I mean you can create access keys if that is your preferred method, I&rsquo;m just not a big fan of keeping secret keys.</p>

<p>The benefit of authenticating with IAM, allows you to remove a reverse proxy that is another hop to the path of your target.</p>

<h2>Create the IAM Policy:</h2>

<p>Create a IAM Policy that will allow actions to Elasticsearch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "Version": "2012-10-17",
</span><span class='line'>    "Statement": [
</span><span class='line'>        {
</span><span class='line'>            "Sid": "VisualEditor0",
</span><span class='line'>            "Effect": "Allow",
</span><span class='line'>            "Action": [
</span><span class='line'>                "es:ESHttpHead",
</span><span class='line'>                "es:ESHttpPost",
</span><span class='line'>                "es:ESHttpGet",
</span><span class='line'>                "es:ESHttpPut"
</span><span class='line'>            ],
</span><span class='line'>            "Resource": "arn:aws:es:eu-west-1:0123456789012:domain/my-es-domain"
</span><span class='line'>        }
</span><span class='line'>    ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Create Role logstash-system-es with &ldquo;ec2.amazonaws.com&rdquo; as trusted entity in trust the relationship and associate the above policy to the role.</p>

<h2>Authorize your Role in Elasticsearch Policy</h2>

<p>Head over to your Elasticsearch Domain and configure your Elasticsearch Policy to include your IAM Role to grant requests to your Domain:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "Version": "2012-10-17",
</span><span class='line'>  "Statement": [
</span><span class='line'>    {
</span><span class='line'>      "Effect": "Allow",
</span><span class='line'>      "Principal": {
</span><span class='line'>        "AWS": [
</span><span class='line'>          "arn:aws:iam::0123456789012:role/logstash-system-es"
</span><span class='line'>        ]
</span><span class='line'>      },
</span><span class='line'>      "Action": "es:*",
</span><span class='line'>      "Resource": "arn:aws:es:eu-west-1:0123456789012:domain/my-es-domain/*"
</span><span class='line'>    }
</span><span class='line'>  ]
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>Install Logstash on EC2</h2>

<p>I will be using Ubuntu Server 18. Update the repositories and install dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update && apt upgrade -y
</span><span class='line'>$ apt install build-essential apt-transport-https -y
</span><span class='line'>$ wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
</span><span class='line'>$ echo "deb https://artifacts.elastic.co/packages/6.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-6.x.list
</span><span class='line'>$ apt update</span></code></pre></td></tr></table></div></figure>


<p>As logstash requires Java, install the the Java OpenJDK Runtime Environment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt install default-jre -y</span></code></pre></td></tr></table></div></figure>


<p>Verify that Java is installed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ java -version
</span><span class='line'>openjdk version "11.0.3" 2019-04-16
</span><span class='line'>OpenJDK Runtime Environment (build 11.0.3+7-Ubuntu-1ubuntu218.04.1)
</span><span class='line'>OpenJDK 64-Bit Server VM (build 11.0.3+7-Ubuntu-1ubuntu218.04.1, mixed mode, sharing)</span></code></pre></td></tr></table></div></figure>


<p>Now, install logstash and enable the service on boot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt install logstash -y
</span><span class='line'>$ systemctl enable logstash.service
</span><span class='line'>$ service logstash stop</span></code></pre></td></tr></table></div></figure>


<h2>Install the Amazon ES Logstash Output Plugin</h2>

<p>For us to be able to authenticate using IAM, we should use the Amazon-ES Logstash Output Plugin. Update and install the plugin:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ /usr/share/logstash/bin/logstash-plugin update
</span><span class='line'>$ /usr/share/logstash/bin/logstash-plugin install logstash-output-amazon_es</span></code></pre></td></tr></table></div></figure>


<h2>Configure Logstash</h2>

<p>I like to split up my configuration in 3 parts, (input, filter, output).</p>

<p>Let&rsquo;s create the input configuration: <code>/etc/logstash/conf.d/10-input.conf</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>input {
</span><span class='line'>  file {
</span><span class='line'>    path =&gt; "/var/log/nginx/access.log"
</span><span class='line'>    start_position =&gt; "beginning"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Our filter configuration: <code>/etc/logstash/conf.d/20-filter.conf</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>filter {
</span><span class='line'>  grok {
</span><span class='line'>    match =&gt; { "message" =&gt; "%{HTTPD_COMMONLOG}" }
</span><span class='line'>  }
</span><span class='line'>  mutate {
</span><span class='line'>    add_field =&gt; {
</span><span class='line'>      "custom_field1" =&gt; "hello from: %{host}"
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>And lastly, our output configuration: <code>/etc/logstash/conf.d/30-outputs.conf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>output {
</span><span class='line'>  amazon_es {
</span><span class='line'>      hosts =&gt; ["my-es-domain.abcdef.eu-west-1.es.amazonaws.com"]
</span><span class='line'>      index =&gt; "new-logstash-%{+YYYY.MM.dd}"
</span><span class='line'>      region =&gt; "eu-west-1"
</span><span class='line'>      aws_access_key_id =&gt; ''
</span><span class='line'>      aws_secret_access_key =&gt; ''
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Note that the <code>aws_</code> directives has been left empty as that seems to be the way it needs to be set when using roles. Authentication will be assumed via the Role which is associated to the EC2 Instance.</p>

<p>If you are using access keys, you can populate them there.</p>

<h2>Start Logstash</h2>

<p>Start logstash:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ service logstash start</span></code></pre></td></tr></table></div></figure>


<p>Tail the logs to see if logstash starts up correctly, it should look more or less like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tail -f /var/log/logstash/logstash-plain.log
</span><span class='line'>
</span><span class='line'>[2019-06-04T16:38:12,087][INFO ][logstash.runner          ] Starting Logstash {"logstash.version"=&gt;"6.8.0"}
</span><span class='line'>[2019-06-04T16:38:14,480][INFO ][logstash.pipeline        ] Starting pipeline {:pipeline_id=&gt;"main", "pipeline.workers"=&gt;2, "pipeline.batch.size"=&gt;125, "pipeline.batch.delay"=&gt;50}
</span><span class='line'>[2019-06-04T16:38:15,226][INFO ][logstash.outputs.elasticsearch] Elasticsearch pool URLs updated {:changes=&gt;{:removed=&gt;[], :added=&gt;[https://search-my-es-domain-xx.eu-west-1.es.amazonaws.com:443/]}}
</span><span class='line'>[2019-06-04T16:38:15,234][INFO ][logstash.outputs.elasticsearch] Running health check to see if an Elasticsearch connection is working {:healthcheck_url=&gt;https://search-my-es-domain-xx.eu-west-1.es.amazonaws.com:443/, :path=&gt;"/"}</span></code></pre></td></tr></table></div></figure>


<h2>Install Nginx</h2>

<p>As you noticed, I have specified <code>/var/log/nginx/access.log</code> as my input file for logstash, as we will test logstash by shipping nginx access logs to Elasticsearch Service.</p>

<p>Install Nginx:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt install nginx -y</span></code></pre></td></tr></table></div></figure>


<p>Start the service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart nginx 
</span><span class='line'>$ systemctl enable nginx</span></code></pre></td></tr></table></div></figure>


<p>Make a GET request on your Nginx Web Server and inspect the log on Kibana, where it should look like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/58917559-4dc8f280-8727-11e9-9e9d-7950217abe34.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Vagrant to Setup a Local Development Environment on Linux]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/30/use-vagrant-to-setup-a-local-development-environment-on-linux/"/>
    <updated>2019-05-30T15:14:15-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/30/use-vagrant-to-setup-a-local-development-environment-on-linux</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/58658188-37cec280-8320-11e9-90ca-1226b3ccb292.png" alt="vagrant" /></p>

<p><strong><a href="https://www.vagrantup.com">Vagrant!</a></strong> Another super product from Hashicorp.</p>

<p>Vagrant makes it really easy to provision virtual servers, which they refer as &ldquo;boxes&rdquo;, that enables developers to run their jobs/tasks/applications in a really easy and fast way. Vagrant utilizes a declarative configuration model, so you can describe which OS you want, bootstrap them with installation instructions as soon as it boots, etc.</p>

<h2>What are we doing today?</h2>

<p>When completing this tutorial, you should be able to launch a Ubuntu Virtual Server locally with Vagrant and using the Virtualbox Provider which will be responsible for running our VM&rsquo;s.</p>

<p>I am running this on a Ubuntu 19 Desktop, but you can run this on Mac/Windows/Linux. First we will install Virtualbox, then Vagrant, then we will provision a Ubuntu box and I will also show how to inject shell commands into your Vagrantfile so that you can provision software to your VM, and also forward traffic to a web server through your host to the guest.</p>

<h2>Virtualbox</h2>

<p>Install some pre-requirements:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install dkms build-essential linux-headers-`uname -r`</span></code></pre></td></tr></table></div></figure>


<p>Head over to Virtualbox&rsquo;s <a href="https://www.virtualbox.org/wiki/Downloads">download page</a> and grab the latest version of virtualbox and install it.</p>

<p>After the installation run <code>vboxconfig</code> to build the kernel modules. If you get the error that I received as seen below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo /sbin/vboxconfig
</span><span class='line'>
</span><span class='line'>vboxdrv.sh: Building VirtualBox kernel modules
</span><span class='line'>vboxdrv.sh: Starting VirtualBox services
</span><span class='line'>vboxdrv.sh: Building VirtualBox kernel modules
</span><span class='line'>vboxdrv.sh: failed: modprobe vboxdrv failed. Please use 'dmesg' to find out why</span></code></pre></td></tr></table></div></figure>


<p>This <a href="https://askubuntu.com/questions/900118/vboxdrv-sh-failed-modprobe-vboxdrv-failed-please-use-dmesg-to-find-out-why">resource on askubuntu.com</a> helped me out. In short, theres a requirement that all the kernel modules must be signed by a key trusted by the UEFI system.</p>

<p>To resolve:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install linux-headers-generic build-essential dkms
</span><span class='line'>$ sudo apt-get remove --purge virtualbox-dkms
</span><span class='line'>$ sudo apt-get install virtualbox-dkms
</span><span class='line'>
</span><span class='line'>$ openssl req -new -x509 -newkey rsa:2048 -keyout MOK.priv -outform DER -out MOK.der -nodes -days 36500 -subj "/CN=Descriptive common name/"
</span><span class='line'>$ sudo /usr/src/linux-headers-$(uname -r)/scripts/sign-file sha256 ./MOK.priv ./MOK.der $(modinfo -n vboxdrv)
</span><span class='line'>$ sudo mokutil --import MOK.der</span></code></pre></td></tr></table></div></figure>


<p>Remember the password, as you will require it when you reboot. You will get the option to &ldquo;Enroll MOK&rdquo;, select that, enter the initial password and reboot.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo reboot</span></code></pre></td></tr></table></div></figure>


<p>You should be able to get a response from the binary:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ VirtualBox -h
</span><span class='line'>Oracle VM VirtualBox VM Selector v6.0.6_Ubuntu</span></code></pre></td></tr></table></div></figure>


<h2>Install Vagrant</h2>

<p>Head over to Vagrant&rsquo;s <a href="https://www.vagrantup.com/docs/installation/">installation page</a>, get the latest version for your operating system and install it.</p>

<p>After installing it you should get the following response:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant --version
</span><span class='line'>Vagrant 2.2.4</span></code></pre></td></tr></table></div></figure>


<h2>Provision a Box with Vagrant</h2>

<p>When you head over to <a href="https://app.vagrantup.com/boxes/search">app.vagrantup.com/boxes/search</a> you can select the pre-packed operating system of your choice. As for this demonstration, I went with: <code>ubuntu/trusty64</code></p>

<p>First we will need to initialize a new Vagrant environment by creating a Vagrantfile, as we will be passing the name of our operating system, it will be populated in our Vagrantfile:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant init ubuntu/trusty64
</span><span class='line'>
</span><span class='line'>A `Vagrantfile` has been placed in this directory. You are now
</span><span class='line'>ready to `vagrant up` your first virtual environment! Please read
</span><span class='line'>the comments in the Vagrantfile as well as documentation on
</span><span class='line'>`vagrantup.com` for more information on using Vagrant.</span></code></pre></td></tr></table></div></figure>


<p>Now since the Vagrantfile has been placed in our current working directory, let&rsquo;s have a look at it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat Vagrantfile
</span><span class='line'># -*- mode: ruby -*-
</span><span class='line'># vi: set ft=ruby :
</span><span class='line'>
</span><span class='line'>Vagrant.configure("2") do |config|
</span><span class='line'>  config.vm.box = "ubuntu/trusty64"
</span><span class='line'>  # config.vm.network "forwarded_port", guest: 80, host: 8080
</span><span class='line'>  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
</span><span class='line'>  # config.vm.network "private_network", ip: "192.168.33.10"
</span><span class='line'>  # config.vm.network "public_network"
</span><span class='line'>  # config.vm.synced_folder "../data", "/vagrant_data"
</span><span class='line'>  #
</span><span class='line'>  # config.vm.provider "virtualbox" do |vb|
</span><span class='line'>  #   vb.gui = true
</span><span class='line'>  #   vb.memory = "1024"
</span><span class='line'>  # end
</span><span class='line'>  #
</span><span class='line'>  # config.vm.provision "shell", inline: &lt;&lt;-SHELL
</span><span class='line'>  #   apt-get update
</span><span class='line'>  #   apt-get install -y apache2
</span><span class='line'>  # SHELL
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>As you can see the Vagrantfile has a set of instructions of how we want our VM to be. At this moment you will only see that the image is defined as <code>ubuntu/trusty64</code>.</p>

<p>Let&rsquo;s start our VM:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant up
</span><span class='line'>
</span><span class='line'>Bringing machine 'default' up with 'virtualbox' provider...
</span><span class='line'>==&gt; default: Importing base box 'ubuntu/trusty64'...
</span><span class='line'>==&gt; default: Matching MAC address for NAT networking...
</span><span class='line'>==&gt; default: Checking if box 'ubuntu/trusty64' version '20190429.0.1' is up to date...
</span><span class='line'>==&gt; default: Setting the name of the VM: vagrant_default_1559238982328_97737
</span><span class='line'>==&gt; default: Clearing any previously set forwarded ports...
</span><span class='line'>    default: Adapter 1: nat
</span><span class='line'>==&gt; default: Forwarding ports...
</span><span class='line'>    default: 22 (guest) =&gt; 2222 (host) (adapter 1)
</span><span class='line'>==&gt; default: Booting VM...
</span><span class='line'>==&gt; default: Waiting for machine to boot. This may take a few minutes...
</span><span class='line'>    default: SSH address: 127.0.0.1:2222
</span><span class='line'>    default: SSH username: vagrant
</span><span class='line'>    default: SSH auth method: private key
</span><span class='line'>    default:
</span><span class='line'>    default: Vagrant insecure key detected. Vagrant will automatically replace
</span><span class='line'>    default: this with a newly generated keypair for better security.</span></code></pre></td></tr></table></div></figure>


<p>Now that our VM has been booted, we can ssh to our server by simply running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant ssh
</span><span class='line'>ubuntu-server $</span></code></pre></td></tr></table></div></figure>


<h2>Making changes to your config</h2>

<p>So let&rsquo;s say we want to edit our Vagrantfile to provide shell commands to install nginx and forward our host port 8080 to our guest port 80, so that we can access our VM&rsquo;s webserver on localhost using port 8080.</p>

<p>Edit your Vagrantfile so that it looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;ubuntu/trusty64&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;forwarded_port&quot;</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">80</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="mi">8080</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> <span class="ss">inline</span><span class="p">:</span> <span class="o">&lt;&lt;-</span><span class="no">SHELL</span>
</span><span class='line'><span class="sh">    apt-get update</span>
</span><span class='line'><span class="sh">    apt-get install nginx -y</span>
</span><span class='line'><span class="no">  SHELL</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to call the shell activity we need to call the provision argument:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">vagrant</span> <span class="n">provision</span>
</span></code></pre></td></tr></table></div></figure>


<p>That will install nginx to our VM, then call reload to change to port configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">vagrant</span> <span class="n">reload</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that everything is in order, we can access our nginx web server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">curl</span> <span class="o">-</span><span class="n">i</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">8080</span>
</span><span class='line'><span class="no">HTTP</span><span class="o">/</span><span class="mi">1</span><span class="o">.</span><span class="mi">1</span> <span class="mi">200</span>
</span><span class='line'><span class="ss">Server</span><span class="p">:</span> <span class="n">nginx</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Tear down</h2>

<p>Delete the server by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">vagrant</span> <span class="n">destroy</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prometheus Series of Tutorials for Your Guide to Epic Metrics]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/17/prometheus-series-of-tutorials-for-your-guide-to-epic-metrics/"/>
    <updated>2019-05-17T14:24:40-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/17/prometheus-series-of-tutorials-for-your-guide-to-epic-metrics</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57307750-696bb980-70e5-11e9-9b0b-73ad88bde6a3.png" alt="prometheus" /></p>

<p>This is a curated list of tutorials of prometheus, from installing prometheus, installing grafana, exporters, docker versions of the prometheus / grafana / node exporter stack, etc.</p>

<h2>The List</h2>

<ul>
<li>Install <a href="http://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">Prometheus</a></li>
<li>Install <a href="http://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">Node Exporter</a></li>
<li>Install <a href="http://blog.ruanbekker.com/blog/2019/05/17/install-pushgateway-to-expose-metrics-to-prometheus/">Pushgateway</a></li>
<li>Install <a href="http://blog.ruanbekker.com/blog/2019/05/17/install-grafana-to-visualize-your-metrics-from-datasources-such-as-prometheus-on-linux/">Grafana</a></li>
<li>Install <a href="http://blog.ruanbekker.com/blog/2019/05/17/install-alertmanager-to-alert-based-on-metrics-from-prometheus/">Alertmananger</a></li>
<li>Install <a href="http://blog.ruanbekker.com/blog/2019/05/17/install-blackbox-exporter-to-monitor-websites-with-prometheus/">Blackbox Exporter</a></li>
<li>Install <a href="">Docker Prometheus Grafana Stack</a></li>
</ul>


<p>This list will be updated as I publish more tutorials</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Blackbox Exporter to Monitor Websites With Prometheus]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/17/install-blackbox-exporter-to-monitor-websites-with-prometheus/"/>
    <updated>2019-05-17T12:55:15-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/17/install-blackbox-exporter-to-monitor-websites-with-prometheus</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57307750-696bb980-70e5-11e9-9b0b-73ad88bde6a3.png" alt="prometheus" /></p>

<p>Blackbox Exporter by Prometheus allows probing over endpoints such as http, https, icmp, tcp and dns.</p>

<h2>What will we be doing</h2>

<p>In this tutorial we will install the blackbox exporter on linux. Im assuming that you have already <a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">set up prometheus</a>.</p>

<h2>Install the Blackbox Exporter</h2>

<p>First create the blackbox exporter user:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ useradd --no-create-home --shell /bin/false blackbox_exporter</span></code></pre></td></tr></table></div></figure>


<p>Download blackbox exporter and extract:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://github.com/prometheus/blackbox_exporter/releases/download/v0.14.0/blackbox_exporter-0.14.0.linux-amd64.tar.gz
</span><span class='line'>$ tar -xvf blackbox_exporter-0.14.0.linux-amd64.tar.gz</span></code></pre></td></tr></table></div></figure>


<p>Move the binaries in place and change the ownership:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cp blackbox_exporter-0.14.0.linux-amd64/blackbox_exporter /usr/local/bin/blackbox_exporter
</span><span class='line'>$ chown blackbox_exporter:blackbox_exporter /usr/local/bin/blackbox_exporter</span></code></pre></td></tr></table></div></figure>


<p>Remove the downloaded archive:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rm -rf blackbox_exporter-0.14.0.linux-amd64*</span></code></pre></td></tr></table></div></figure>


<p>Create the blackbox directory and create the config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir /etc/blackbox_exporter
</span><span class='line'>$ vim /etc/blackbox_exporter/blackbox.yml</span></code></pre></td></tr></table></div></figure>


<p>Populate this config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>modules:
</span><span class='line'>  http_2xx:
</span><span class='line'>    prober: http
</span><span class='line'>    timeout: 5s
</span><span class='line'>    http:
</span><span class='line'>      valid_status_codes: []
</span><span class='line'>      method: GET</span></code></pre></td></tr></table></div></figure>


<p>Update the permissions of the config so that the user has ownership:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chown blackbox_exporter:blackbox_exporter /etc/blackbox_exporter/blackbox.yml</span></code></pre></td></tr></table></div></figure>


<p>Create the systemd unit file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/systemd/system/blackbox_exporter.service</span></code></pre></td></tr></table></div></figure>


<p>Populate the systemd unit file configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'>Description=Blackbox Exporter
</span><span class='line'>Wants=network-online.target
</span><span class='line'>After=network-online.target
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>User=blackbox_exporter
</span><span class='line'>Group=blackbox_exporter
</span><span class='line'>Type=simple
</span><span class='line'>ExecStart=/usr/local/bin/blackbox_exporter --config.file /etc/blackbox_exporter/blackbox.yml
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=multi-user.target</span></code></pre></td></tr></table></div></figure>


<p>Reload the systemd daemon and restart the service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl daemon-reload
</span><span class='line'>$ systemctl start blackbox_exporter</span></code></pre></td></tr></table></div></figure>


<p>The service should be started, verify:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl status blackbox_exporter
</span><span class='line'>  blackbox_exporter.service - Blackbox Exporter
</span><span class='line'>   Loaded: loaded (/etc/systemd/system/blackbox_exporter.service; disabled; vendor preset: enabled)
</span><span class='line'>   Active: active (running) since Wed 2019-05-08 00:02:40 UTC; 5s ago
</span><span class='line'> Main PID: 10084 (blackbox_export)
</span><span class='line'>    Tasks: 6 (limit: 4704)
</span><span class='line'>   CGroup: /system.slice/blackbox_exporter.service
</span><span class='line'>           └─10084 /usr/local/bin/blackbox_exporter --config.file /etc/blackbox_exporter/blackbox.yml
</span><span class='line'>
</span><span class='line'>May 08 00:02:40 ip-172-31-41-126 systemd[1]: Started Blackbox Exporter.
</span><span class='line'>May 08 00:02:40 ip-172-31-41-126 blackbox_exporter[10084]: level=info ts=2019-05-08T00:02:40.5229204Z caller=main.go:213 msg="Starting blackbox_exporter" version="(version=0.14.0, branch=HEAD, revision=bb
</span><span class='line'>May 08 00:02:40 ip-172-31-41-126 blackbox_exporter[10084]: level=info ts=2019-05-08T00:02:40.52553523Z caller=main.go:226 msg="Loaded config file"
</span><span class='line'>May 08 00:02:40 ip-172-31-41-126 blackbox_exporter[10084]: level=info ts=2019-05-08T00:02:40.525695324Z caller=main.go:330 msg="Listening on address" address=:9115</span></code></pre></td></tr></table></div></figure>


<p>Enable the service on boot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl enable blackbox_exporter</span></code></pre></td></tr></table></div></figure>


<h2>Configure Prometheus</h2>

<p>Next, we need to provide context to prometheus on what to monitor. We will inform prometheus to monitor a web endpoint on port 8080 using the blackbox exporter (we will create a python simplehttpserver to run on port 8080).</p>

<p>Edit the prometheus config <code>/etc/prometheus/prometheus.yml</code> and append the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  - job_name: 'blackbox'
</span><span class='line'>    metrics_path: /probe
</span><span class='line'>    params:
</span><span class='line'>      module: [http_2xx]
</span><span class='line'>    static_configs:
</span><span class='line'>      - targets:
</span><span class='line'>        - http://localhost:8080
</span><span class='line'>    relabel_configs:
</span><span class='line'>      - source_labels: [__address__]
</span><span class='line'>        target_label: __param_target
</span><span class='line'>      - source_labels: [__param_target]
</span><span class='line'>        target_label: instance
</span><span class='line'>      - target_label: __address__
</span><span class='line'>        replacement: localhost:9115</span></code></pre></td></tr></table></div></figure>


<p>Open a new terminal, create a <code>index.html</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo "ok" &gt; index.html</span></code></pre></td></tr></table></div></figure>


<p>Then start a SimpleHTTPServer on port 8080:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python -m SimpleHTTPServer 8080</span></code></pre></td></tr></table></div></figure>


<p>Head back to the previous terminal session and restart prometheus:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart prometheus</span></code></pre></td></tr></table></div></figure>


<h2>Configure the Alarm definition:</h2>

<p>Create a alarm definition that desribes that defines when to notify when a endpoint goes down:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/prometheus/alert.rules.yml</span></code></pre></td></tr></table></div></figure>


<p>And our alert definition:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>groups:
</span><span class='line'>- name: alert.rules
</span><span class='line'>  rules:
</span><span class='line'>  - alert: EndpointDown
</span><span class='line'>    expr: probe_success == 0
</span><span class='line'>    for: 10s
</span><span class='line'>    labels:
</span><span class='line'>      severity: "critical"
</span><span class='line'>    annotations:
</span><span class='line'>      summary: "Endpoint  down"</span></code></pre></td></tr></table></div></figure>


<p>Ensure that the permission is set:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chown prometheus:prometheus /etc/prometheus/alert.rules.yml</span></code></pre></td></tr></table></div></figure>


<p>Use the <code>promtool</code> to validate that the alert is correctly configured:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ promtool check rules /etc/prometheus/alert.rules.yml
</span><span class='line'>Checking /etc/prometheus/alert.rules.yml
</span><span class='line'>  SUCCESS: 1 rules found</span></code></pre></td></tr></table></div></figure>


<p>If everything is good, restart prometheus:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart prometheus</span></code></pre></td></tr></table></div></figure>


<h2>Blackbox Exporter Dashboard</h2>

<p>To install a blackbox exporter dashboard: <a href="https://grafana.com/dashboards/7587">https://grafana.com/dashboards/7587</a>, create a new dashboard, select import, provide the ID: <code>7587</code>, select the prometheus datasource and select save.</p>

<p>The dashboard should look similar to this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57947217-99357100-78de-11e9-9108-9338c97ca59d.png" alt="blackbox-exporter" /></p>

<h2>Next up, Alertmanager</h2>

<p>In the <a href="https://blog.ruanbekker.com/blog/2019/05/17/install-alertmanager-to-alert-based-on-metrics-from-prometheus/">next tutorial</a> we will setup Alertmanager to alert when our endpoint goes down</p>

<h2>Resources</h2>

<p>See all <a href="https://blog.ruanbekker.com/blog/categories/prometheus/">#prometheus</a> blogposts</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Alertmanager to Alert Based on Metrics From Prometheus]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/17/install-alertmanager-to-alert-based-on-metrics-from-prometheus/"/>
    <updated>2019-05-17T12:49:26-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/17/install-alertmanager-to-alert-based-on-metrics-from-prometheus</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57307750-696bb980-70e5-11e9-9b0b-73ad88bde6a3.png" alt="prometheus" /></p>

<p>So we are pushing our time series metrics into prometheus, and now we would like to alarm based on certain metric dimensions. That&rsquo;s where alertmanager fits in. We can setup targets and rules, once rules for our targets does not match, we can alarm to destinations suchs as slack, email etc.</p>

<h2>What we will be doing:</h2>

<p>In our previous tutorial we installed blackbox exporter to probe a endpoint. Now we will install Alertmanager and configure an alert to notify us via email and slack when our endpoint goes down. See <a href="https://blog.ruanbekker.com/blog/2019/05/17/install-blackbox-exporter-to-monitor-websites-with-prometheus/">this post</a> if you have not seen the previous tutorial.</p>

<h2>Install Alertmanager</h2>

<p>Create the user for alertmanager:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ useradd --no-create-home --shell /bin/false alertmanager</span></code></pre></td></tr></table></div></figure>


<p>Download alertmanager and extract:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ https://github.com/prometheus/alertmanager/releases/download/v0.17.0/alertmanager-0.17.0.linux-amd64.tar.gz
</span><span class='line'>$ tar -xvf alertmanager-0.17.0.linux-amd64.tar.gz</span></code></pre></td></tr></table></div></figure>


<p>Move alertmanager and amtool birnaries in place:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cp alertmanager-0.17.0.linux-amd64/alertmanager /usr/local/bin/
</span><span class='line'>$ cp alertmanager-0.17.0.linux-amd64/amtool /usr/local/bin/</span></code></pre></td></tr></table></div></figure>


<p>Ensure that the correct permissions are in place:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chown alertmanager:alertmanager /usr/local/bin/alertmanager
</span><span class='line'>$ chown alertmanager:alertmanager /usr/local/bin/amtool</span></code></pre></td></tr></table></div></figure>


<p>Cleanup:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rm -rf alertmanager-0.17.0*</span></code></pre></td></tr></table></div></figure>


<h2>Configure Alertmanager:</h2>

<p>Create the alertmanager directory and configure the global alertmanager configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir /etc/alertmanager
</span><span class='line'>$ vim /etc/alertmanager/alertmanager.yml</span></code></pre></td></tr></table></div></figure>


<p>Provide the global config and ensure to populate your personal information. See <a href="https://blog.ruanbekker.com/blog/2019/04/18/setup-a-slack-webhook-for-sending-messages-from-applications/">this post</a> to create a slack webhook.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global:
</span><span class='line'>  smtp_smarthost: 'smtp.domain.net:587'
</span><span class='line'>  smtp_from: 'AlertManager &lt;mailer@domain.com&gt;'
</span><span class='line'>  smtp_require_tls: true
</span><span class='line'>  smtp_hello: 'alertmanager'
</span><span class='line'>  smtp_auth_username: 'username'
</span><span class='line'>  smtp_auth_password: 'password'
</span><span class='line'>
</span><span class='line'>  slack_api_url: 'https://hooks.slack.com/services/x/xx/xxx'
</span><span class='line'>
</span><span class='line'>route:
</span><span class='line'>  group_by: ['instance', 'alert']
</span><span class='line'>  group_wait: 30s
</span><span class='line'>  group_interval: 5m
</span><span class='line'>  repeat_interval: 3h
</span><span class='line'>  receiver: team-1
</span><span class='line'>
</span><span class='line'>receivers:
</span><span class='line'>  - name: 'team-1'
</span><span class='line'>    email_configs:
</span><span class='line'>      - to: 'user@domain.com'
</span><span class='line'>    slack_configs:
</span><span class='line'>      # https://prometheus.io/docs/alerting/configuration/#slack_config
</span><span class='line'>      - channel: 'system_events'
</span><span class='line'>      - username: 'AlertManager'
</span><span class='line'>      - icon_emoji: ':joy:'</span></code></pre></td></tr></table></div></figure>


<p>Ensure the permissions are in place:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chown alertmanager:alertmanager -R /etc/alertmanager</span></code></pre></td></tr></table></div></figure>


<p>Create the alertmanager systemd unit file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/systemd/system/alertmanager.service</span></code></pre></td></tr></table></div></figure>


<p>And supply the unit file configuration. Note that I am exposing port <code>9093</code> directly as Im not using a reverse proxy.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'>Description=Alertmanager
</span><span class='line'>Wants=network-online.target
</span><span class='line'>After=network-online.target
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>User=alertmanager
</span><span class='line'>Group=alertmanager
</span><span class='line'>Type=simple
</span><span class='line'>WorkingDirectory=/etc/alertmanager/
</span><span class='line'>ExecStart=/usr/local/bin/alertmanager --config.file=/etc/alertmanager/alertmanager.yml --web.external-url http://0.0.0.0:9093
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=multi-user.target</span></code></pre></td></tr></table></div></figure>


<p>Now we need to inform prometheus that we will send alerts to alertmanager to it&rsquo;s exposed port:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/prometheus/prometheus.yml</span></code></pre></td></tr></table></div></figure>


<p>And supply the alertmanager configuration for prometheus:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>alerting:
</span><span class='line'>  alertmanagers:
</span><span class='line'>  - static_configs:
</span><span class='line'>    - targets:
</span><span class='line'>      - localhost:9093
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>So when we get alerted, our alert will include a link to our alert. We need to provide the base url of that alert. That get&rsquo;s done in our alertmanager systemd unit file: <code>/etc/systemd/system/alertmanager.service</code> under <code>--web.external-url</code> passing the alertmanager base ip address:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'>Description=Alertmanager
</span><span class='line'>Wants=network-online.target
</span><span class='line'>After=network-online.target
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>User=alertmanager
</span><span class='line'>Group=alertmanager
</span><span class='line'>Type=simple
</span><span class='line'>WorkingDirectory=/etc/alertmanager/
</span><span class='line'>ExecStart=/usr/local/bin/alertmanager --config.file=/etc/alertmanager/alertmanager.yml --web.external-url http://&lt;your.alertmanager.ip.address&gt;:9093
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=multi-user.target</span></code></pre></td></tr></table></div></figure>


<p>Then we need to do the same with the prometheus systemd unit file: <code>/etc/systemd/system/prometheus.service</code> under <code>--web.external-url</code> passing the prometheus base ip address:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'>Description=Prometheus
</span><span class='line'>Wants=network-online.target
</span><span class='line'>After=network-online.target
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>User=prometheus
</span><span class='line'>Group=prometheus
</span><span class='line'>Type=simple
</span><span class='line'>ExecStart=/usr/local/bin/prometheus \
</span><span class='line'>    --config.file /etc/prometheus/prometheus.yml \
</span><span class='line'>    --storage.tsdb.path /var/lib/prometheus/ \
</span><span class='line'>    --web.console.templates=/etc/prometheus/consoles \
</span><span class='line'>    --web.console.libraries=/etc/prometheus/console_libraries \
</span><span class='line'>    --web.external-url http://&lt;your.prometheus.ip.address&gt;
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=multi-user.target</span></code></pre></td></tr></table></div></figure>


<p>Since we have edited the systemd unit files, we need to reload the systemd daemon:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl daemon-reload</span></code></pre></td></tr></table></div></figure>


<p>Then restart prometheus and alertmanager:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart prometheus
</span><span class='line'>$ systemctl restart alertmanager</span></code></pre></td></tr></table></div></figure>


<p>Inspect the status of alertmanager and prometheus:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl status alertmanager
</span><span class='line'>$ systemctl status prometheus</span></code></pre></td></tr></table></div></figure>


<p>If everything seems good, enable alertmanager on boot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl enable alertmanager</span></code></pre></td></tr></table></div></figure>


<h2>Access Alertmanager:</h2>

<p>Access alertmanager on your endpoint on port <code>9093</code>:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57946361-69856980-78dc-11e9-8c48-ebcc3b0d201e.png" alt="alertmanager" /></p>

<p>From our previous tutorial we started a local web service on port <code>8080</code> that is being monitored by prometheus. Let&rsquo;s stop that service to test out the alerting. You should get a notification via email:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57946586-f29ca080-78dc-11e9-983c-6b857ef21bae.png" alt="alertmanager" /></p>

<p>And the notification via slack:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57946602-03e5ad00-78dd-11e9-9ecc-c3d58b2ad3ec.png" alt="alertmanager" /></p>

<p>When you start the service again and head over to the prometheus ui under alerts, you will see that the service recovered:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57946647-2677c600-78dd-11e9-95a9-b9f4190172bf.png" alt="prometheus" /></p>

<h2>Install Prometheus Alertmanager Plugin</h2>

<p>Install the Prometheus Alertmanager Plugin in Grafana. Head to the instance where grafana is installed and install the plugin:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ grafana-cli plugins install camptocamp-prometheus-alertmanager-datasource</span></code></pre></td></tr></table></div></figure>


<p>Once the plugin is installed, restart grafana:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ service grafana-server restart</span></code></pre></td></tr></table></div></figure>


<p>Install the dasboard <a href="https://grafana.com/dashboards/8010">grafana.com/dashboards/8010</a>. Create a new datasource, select the prometheus-alertmanager datasource, configure and save.</p>

<p>Add a new dasboard, select import and provide the ID <code>8010</code>, select the prometheus-alertmanager datasource and save. You should see the following (more or less):</p>

<p><img src="https://user-images.githubusercontent.com/567298/57947092-3f34ab80-78de-11e9-904b-f42d5ecd7d0a.png" alt="prometheus-alertmanager" /></p>

<h2>Resources</h2>

<p>See all <a href="https://blog.ruanbekker.com/blog/categories/prometheus/">#prometheus</a> blogposts</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Grafana to Visualize Your Metrics From Datasources Such as Prometheus on Linux]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/17/install-grafana-to-visualize-your-metrics-from-datasources-such-as-prometheus-on-linux/"/>
    <updated>2019-05-17T12:08:02-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/17/install-grafana-to-visualize-your-metrics-from-datasources-such-as-prometheus-on-linux</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57941411-2a045080-78cf-11e9-97f9-47fb8b75a722.png" alt="image" /></p>

<p>Grafana is a Open Source Dashboarding service that allows you to monitor, analyze and graph metrics from datasources such as prometheus, influxdb, elasticsearch, aws cloudwatch, and many more.</p>

<p>Not only is grafana amazing, its super pretty!</p>

<p>Example of how a dashboard might look like:</p>

<p><img width="1279" alt="E24B39B1-23C8-44C5-959D-6E6275F8FE99" src="https://user-images.githubusercontent.com/567298/57942872-d98ef200-78d2-11e9-9370-b130bcc222f7.png"></p>

<h2>What are we doing today</h2>

<p>In this tutorial we will setup grafana on linux. If you have not set up <a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">prometheus</a>, follow <a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">this blogpost</a> to install prometheus.</p>

<h2>Install Grafana</h2>

<p>I will be demonstrating how to install grafana on debian, if you have another operating system, head over to <a href="https://grafana.com/docs/installation/">grafana documentation</a> for other supported operating systems.</p>

<p>Get the gpg key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl https://packages.grafana.com/gpg.key | sudo apt-key add -</span></code></pre></td></tr></table></div></figure>


<p>Import the public keys:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt-key adv --keyserver keyserver.ubuntu.com --recv-keys  8C8C34C524098CB6 </span></code></pre></td></tr></table></div></figure>


<p>Add the latest stable packages to your repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"</span></code></pre></td></tr></table></div></figure>


<p>Install a pre-requirement package:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt install apt-transport-https -y</span></code></pre></td></tr></table></div></figure>


<p>Update the repository index and install grafana:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update && sudo apt install grafana -y</span></code></pre></td></tr></table></div></figure>


<p>Once grafana is installed, start the service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ service grafana-server start</span></code></pre></td></tr></table></div></figure>


<p>Then enable the service on boot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ update-rc.d grafana-server defaults</span></code></pre></td></tr></table></div></figure>


<p>If you want to control the service via systemd:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl daemon-reload
</span><span class='line'>$ systemctl start grafana-server
</span><span class='line'>$ systemctl status grafana-server</span></code></pre></td></tr></table></div></figure>


<h2>Optional: Nginx Reverse Proxy</h2>

<p>If you want to front your grafana instance with a nginx reverse proxy:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/nginx/sites-enabled/grafana
</span><span class='line'>server {
</span><span class='line'>    listen 80;
</span><span class='line'>    server_name grafana.domain.com;
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>        proxy_pass http://127.0.0.1:3000/;
</span><span class='line'>        proxy_redirect http://127.0.0.1:3000/ /;
</span><span class='line'>        proxy_http_version 1.1;
</span><span class='line'>        proxy_set_header Host $host;
</span><span class='line'>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>        proxy_set_header X-Real-IP $remote_addr;
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>Then restart nginx:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart nginx</span></code></pre></td></tr></table></div></figure>


<h2>Access Grafana</h2>

<p>If you are accessing grafana directly, access grafana on <code>http://your-grafana-ip:3000/</code> and your username is <code>admin</code> and password <code>admin</code></p>

<h2>Dashboarding Tutorials</h2>

<p>Have a look at this screencast where the guys from grafana show you how to build dashboards:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/sKNZMtoSHN4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<p>Also have a look at their <a href="https://grafana.com/dashboards">public repository of dashboards</a></p>

<p>For more tutorials on prometheus and metrics have a look at <strong><a href="https://blog.ruanbekker.com/blog/categories/prometheus/">#prometheus</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Pushgateway to Expose Metrics to Prometheus]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/17/install-pushgateway-to-expose-metrics-to-prometheus/"/>
    <updated>2019-05-17T07:04:03-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/17/install-pushgateway-to-expose-metrics-to-prometheus</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57307750-696bb980-70e5-11e9-9b0b-73ad88bde6a3.png" alt="" /></p>

<p>In most cases when we want to scrape a node for metrics, we will install node-exporter on a host and configure prometheus to scrape the configured node to consume metric data. But in certain cases we want to push custom metrics to prometheus. In such cases, we can make use of pushgateway.</p>

<p>Pushgateway allows you to push custom metrics to push gateway&rsquo;s endpoint, then we configure prometheus to scrape push gateway to consume the exposed metrics into prometheus.</p>

<h2>Pre-Requirements</h2>

<p>If you have not set up <a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">Prometheus</a>, head over to <strong><a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">this blogpost</a></strong> to set up prometheus on Linux.</p>

<h2>What we will do?</h2>

<p>In this tutorial, we will setup pushgateway on linux and after pushgateway has been setup, we will push some custom metrics to pushgateway and configure prometheus to scrape metrics from pushgateway.</p>

<h2>Install Pushgateway</h2>

<p>Get the latest version of <a href="https://prometheus.io/download/">pushgateway</a> from prometheus.io, then download and extract:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://github.com/prometheus/pushgateway/releases/download/v0.8.0/pushgateway-0.8.0.linux-amd64.tar.gz
</span><span class='line'>$ tar -xvf pushgateway-0.8.0.linux-amd64.tar.gz</span></code></pre></td></tr></table></div></figure>


<p>Create the <code>pushgateway</code> user:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ useradd --no-create-home --shell /bin/false pushgateway</span></code></pre></td></tr></table></div></figure>


<p>Move the binary in place and update the permissions to the user that we created:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cp pushgateway-0.8.0.linux-amd64/pushgateway /usr/local/bin/pushgateway
</span><span class='line'>$ chown pushgateway:pushgateway /usr/local/bin/pushgateway</span></code></pre></td></tr></table></div></figure>


<p>Create the systemd unit file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat &gt; /etc/systemd/system/pushgateway.service &lt;&lt; EOF
</span><span class='line'>[Unit]
</span><span class='line'>Description=Pushgateway
</span><span class='line'>Wants=network-online.target
</span><span class='line'>After=network-online.target
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>User=pushgateway
</span><span class='line'>Group=pushgateway
</span><span class='line'>Type=simple
</span><span class='line'>ExecStart=/usr/local/bin/pushgateway \
</span><span class='line'>    --web.listen-address=":9091" \
</span><span class='line'>    --web.telemetry-path="/metrics" \
</span><span class='line'>    --persistence.file="/tmp/metric.store" \
</span><span class='line'>    --persistence.interval=5m \
</span><span class='line'>    --log.level="info" \
</span><span class='line'>    --log.format="logger:stdout?json=true"
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=multi-user.target
</span><span class='line'>EOF</span></code></pre></td></tr></table></div></figure>


<p>Reload systemd and restart the pushgateway service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl daemon-reload
</span><span class='line'>$ systemctl restart pushgateway</span></code></pre></td></tr></table></div></figure>


<p>Ensure that pushgateway has been started:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl status pushgateway
</span><span class='line'>  pushgateway.service - Pushgateway
</span><span class='line'>   Loaded: loaded (/etc/systemd/system/pushgateway.service; disabled; vendor preset: enabled)
</span><span class='line'>   Active: active (running) since Tue 2019-05-07 09:05:57 UTC; 2min 33s ago
</span><span class='line'> Main PID: 6974 (pushgateway)
</span><span class='line'>    Tasks: 6 (limit: 4704)
</span><span class='line'>   CGroup: /system.slice/pushgateway.service
</span><span class='line'>           └─6974 /usr/local/bin/pushgateway --web.listen-address=:9091 --web.telemetry-path=/metrics --persistence.file=/tmp/metric.store --persistence.interval=5m --log.level=info --log.format=logger:st
</span><span class='line'>
</span><span class='line'>May 07 09:05:57 ip-172-31-41-126 systemd[1]: Started Pushgateway.</span></code></pre></td></tr></table></div></figure>


<h2>Configure Prometheus</h2>

<p>Now we want to configure prometheus to scrape pushgateway for metrics, then the scraped metrics will be injected into prometheus&rsquo;s time series database:</p>

<p>At the moment, I have prometheus, node-exporter and pushgateway on the same node so I will provide my complete prometheus configuration, If you are just looking for the pushgateway config, it will be the last line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/prometheus/prometheus.yml
</span><span class='line'>global:
</span><span class='line'>  scrape_interval: 15s
</span><span class='line'>
</span><span class='line'>scrape_configs:
</span><span class='line'>  - job_name: 'prometheus'
</span><span class='line'>    scrape_interval: 5s
</span><span class='line'>    static_configs:
</span><span class='line'>      - targets: ['localhost:9090']
</span><span class='line'>
</span><span class='line'>  - job_name: 'node_exporter'
</span><span class='line'>    scrape_interval: 5s
</span><span class='line'>    static_configs:
</span><span class='line'>      - targets: ['localhost:9100']
</span><span class='line'>
</span><span class='line'>  - job_name: 'pushgateway'
</span><span class='line'>    honor_labels: true
</span><span class='line'>    static_configs:
</span><span class='line'>      - targets: ['localhost:9091']</span></code></pre></td></tr></table></div></figure>


<p>Restart prometheus:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart prometheus</span></code></pre></td></tr></table></div></figure>


<h2>Push metrics to pushgateway</h2>

<p>First we will look at a bash example to push metrics to pushgateway:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo "cpu_utilization 20.25" | curl --data-binary @- http://localhost:9091/metrics/job/my_custom_metrics/instance/10.20.0.1:9000/provider/hetzner</span></code></pre></td></tr></table></div></figure>


<p>Have a look at pushgateway&rsquo;s metrics endpoint:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -L http://localhost:9091/metrics/
</span><span class='line'># TYPE cpu_utilization untyped
</span><span class='line'>cpu_utlization{instance="10.20.0.1:9000",job="my_custom_metrics",provider="hetzner"} 20.25</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s look at a python example on how we can push metrics to pushgateway:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'>
</span><span class='line'><span class="n">job_name</span><span class="o">=</span><span class="s">&#39;my_custom_metrics&#39;</span>
</span><span class='line'><span class="n">instance_name</span><span class="o">=</span><span class="s">&#39;10.20.0.1:9000&#39;</span>
</span><span class='line'><span class="n">provider</span><span class="o">=</span><span class="s">&#39;hetzner&#39;</span>
</span><span class='line'><span class="n">payload_key</span><span class="o">=</span><span class="s">&#39;cpu_utilization&#39;</span>
</span><span class='line'><span class="n">payload_value</span><span class="o">=</span><span class="s">&#39;21.90&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">&#39;http://localhost:9091/metrics/job/{j}/instance/{i}/team/{t}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">job_name</span><span class="p">,</span> <span class="n">i</span><span class="o">=</span><span class="n">instance_name</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">team_name</span><span class="p">),</span> <span class="n">data</span><span class="o">=</span><span class="s">&#39;{k} {v}</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">k</span><span class="o">=</span><span class="n">payload_key</span><span class="p">,</span> <span class="n">v</span><span class="o">=</span><span class="n">payload_value</span><span class="p">))</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this method, you can push any custom metrics (bash, lambda function, etc) to pushgateway and allow prometheus to consume that data into it&rsquo;s time series database.</p>

<h2>Resources:</h2>

<p>See <a href="https://blog.ruanbekker.com/blog/categories/prometheus/">#prometheus</a> for more posts on Prometheus</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running a HA MySQL Galera Cluster on Docker Swarm]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/10/running-a-ha-mysql-galera-cluster-on-docker-swarm/"/>
    <updated>2019-05-10T07:02:39-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/10/running-a-ha-mysql-galera-cluster-on-docker-swarm</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57523982-c904d780-7326-11e9-981a-7a9cb9552c2f.png" alt="image" /></p>

<p>In this post we will setup a highly available mysql galera cluster on docker swarm.</p>

<h2>About</h2>

<p>The service is based of <a href="https://github.com/toughIQ/docker-mariadb-cluster">docker-mariadb-cluster</a> repository and it&rsquo;s designed not to have any persistent data attached to the service, but rely on the &ldquo;nodes&rdquo; to replicate the data.</p>

<p>Note, that however this proof of concept works, I always recommend to use a remote mysql database outside your cluster, such as RDS etc.</p>

<p>Since we don&rsquo;t persist any data on the mysql cluster, I have associated a dbclient service that will run continious backups, which we will persist the path where the backups reside to disk.</p>

<h2>Deploy the MySQL Cluster</h2>

<p>The <a href="https://raw.githubusercontent.com/ruanbekker/dockerfiles/master/mysql-cluster/docker-compose.yml">docker-compose.yml</a> that we will use looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&#39;3.5&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">dbclient</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">alpine</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">BACKUP_ENABLED=1</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">BACKUP_INTERVAL=3600</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">BACKUP_PATH=/data</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">BACKUP_FILENAME=db_backup</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">dbnet</span>
</span><span class='line'>    <span class="l-Scalar-Plain">entrypoint</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>      <span class="no">sh -c &#39;sh -s &lt;&lt; EOF</span>
</span><span class='line'>      <span class="no">apk add --no-cache mysql-client</span>
</span><span class='line'>      <span class="no">while true</span>
</span><span class='line'>        <span class="no">do</span>
</span><span class='line'>          <span class="no">if [ $$BACKUP_ENABLED == 1 ]</span>
</span><span class='line'>            <span class="no">then</span>
</span><span class='line'>              <span class="no">sleep $$BACKUP_INTERVAL</span>
</span><span class='line'>              <span class="no">mkdir -p $$BACKUP_PATH/$$(date +%F)</span>
</span><span class='line'>              <span class="no">echo &quot;$$(date +%FT%H.%m) - Making Backup to : $$BACKUP_PATH/$$(date +%F)/$$BACKUP_FILENAME-$$(date +%FT%H.%m).sql.gz&quot;</span>
</span><span class='line'>              <span class="no">mysqldump -u root -ppassword -h dblb --all-databases | gzip &gt; $$BACKUP_PATH/$$(date +%F)/$$BACKUP_FILENAME-$$(date +%FT%H.%m).sql.gz</span>
</span><span class='line'>              <span class="no">find $$BACKUP_PATH -mtime 7 -delete</span>
</span><span class='line'>          <span class="no">fi</span>
</span><span class='line'>        <span class="no">done</span>
</span><span class='line'>      <span class="no">EOF&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">vol_dbclient:/data</span>
</span><span class='line'>    <span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">mode</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">replicated</span>
</span><span class='line'>      <span class="l-Scalar-Plain">replicas</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">dbcluster</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">toughiq/mariadb-cluster</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">dbnet</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DB_SERVICE_NAME=dbcluster</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_ROOT_PASSWORD=password</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_DATABASE=mydb</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_USER=mydbuser</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_PASSWORD=mydbpass</span>
</span><span class='line'>    <span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">mode</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">replicated</span>
</span><span class='line'>      <span class="l-Scalar-Plain">replicas</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">dblb</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">toughiq/maxscale</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">dbnet</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">3306:3306</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DB_SERVICE_NAME=dbcluster</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ENABLE_ROOT_USER=1</span>
</span><span class='line'>    <span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">mode</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">replicated</span>
</span><span class='line'>      <span class="l-Scalar-Plain">replicas</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">vol_dbclient</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">local</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">dbnet</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">dbnet</span>
</span><span class='line'>    <span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">overlay</span>
</span></code></pre></td></tr></table></div></figure>


<p>The dbclient is configured to be in the same network as the cluster so it can reach the mysql service. The default behavior is that it will make a backup every hour (3600 seconds) to the <code>/data/{date}/</code> path.</p>

<p>Deploy the stack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker stack deploy -c docker-compose.yml galera</span>
</span><span class='line'><span class="l-Scalar-Plain">Creating network dbnet</span>
</span><span class='line'><span class="l-Scalar-Plain">Creating service galera_dbcluster</span>
</span><span class='line'><span class="l-Scalar-Plain">Creating service galera_dblb</span>
</span><span class='line'><span class="l-Scalar-Plain">Creating service galera_dbclient</span>
</span></code></pre></td></tr></table></div></figure>


<p>Have a look to see if all the services is running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker service ls</span>
</span><span class='line'><span class="l-Scalar-Plain">ID                  NAME                MODE                REPLICAS            IMAGE                            PORTS</span>
</span><span class='line'><span class="l-Scalar-Plain">jm7p70qre72u        galera_dbclient     replicated          1/1                 alpine:latest</span>
</span><span class='line'><span class="l-Scalar-Plain">p8kcr5y7szte        galera_dbcluster    replicated          1/1                 toughiq/mariadb-cluster:latest</span>
</span><span class='line'><span class="l-Scalar-Plain">1hu3oxhujgfm        galera_dblb         replicated          1/1                 toughiq/maxscale:latest          :3306-&gt;3306/tcp</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The Backup Client</h2>

<p>As mentioned the backup client backs up to the <code>/data/</code> path:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker exec -it $(docker ps -f name=galera_dbclient -q) find /data/</span>
</span><span class='line'><span class="l-Scalar-Plain">/data/</span>
</span><span class='line'><span class="l-Scalar-Plain">/data/2019-05-10</span>
</span><span class='line'><span class="l-Scalar-Plain">/data/2019-05-10/db_backup-2019-05-10T10.05.sql.gz</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s go ahead and populate some data into our mysql database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker exec -it $(docker ps -f name=galera_dbclient -q) mysql -uroot -ppassword -h dblb</span>
</span><span class='line'><span class="l-Scalar-Plain">MySQL [(none)]&gt; create table mydb.foo (name varchar(10));</span>
</span><span class='line'><span class="l-Scalar-Plain">MySQL [(none)]&gt; insert into mydb.foo values(&#39;ruan&#39;);</span>
</span><span class='line'><span class="l-Scalar-Plain">MySQL [(none)]&gt; exit</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Scale the Cluster</h2>

<p>At the moment we only have 1 replica for our mysql cluster, let&rsquo;s go ahead and scale the cluster to 3 replicas:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker service scale galera_dbcluster=3</span>
</span><span class='line'><span class="l-Scalar-Plain">galera_dbcluster scaled to 3</span>
</span><span class='line'><span class="l-Scalar-Plain">overall progress</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3 out of 3 tasks</span>
</span><span class='line'><span class="l-Scalar-Plain">1/3</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">running   [==================================================&gt;]</span>
</span><span class='line'><span class="l-Scalar-Plain">2/3</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">running   [==================================================&gt;]</span>
</span><span class='line'><span class="l-Scalar-Plain">3/3</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">running   [==================================================&gt;]</span>
</span><span class='line'><span class="l-Scalar-Plain">verify</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Service converged</span>
</span></code></pre></td></tr></table></div></figure>


<p>Verify that the service has been scaled:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker service ls</span>
</span><span class='line'><span class="l-Scalar-Plain">ID                  NAME                MODE                REPLICAS            IMAGE                            PORTS</span>
</span><span class='line'><span class="l-Scalar-Plain">jm7p70qre72u        galera_dbclient     replicated          1/1                 alpine:latest</span>
</span><span class='line'><span class="l-Scalar-Plain">p8kcr5y7szte        galera_dbcluster    replicated          3/3                 toughiq/mariadb-cluster:latest</span>
</span><span class='line'><span class="l-Scalar-Plain">1hu3oxhujgfm        galera_dblb         replicated          1/1                 toughiq/maxscale:latest          :3306-&gt;3306/tcp</span>
</span></code></pre></td></tr></table></div></figure>


<p>Test, by reading from the database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker exec -it $(docker ps -f name=galera_dbclient -q) mysql -uroot -ppassword -h dblb -e&#39;select * from mydb.foo;&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'><span class="l-Scalar-Plain">| name |</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'><span class="l-Scalar-Plain">| ruan |</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Simulate a Node Failure:</h2>

<p>Simulate a node failure by killing one of the mysql containers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker kill 9e336032ab52</span>
</span></code></pre></td></tr></table></div></figure>


<p>Verify that one container is missing from our service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker service ls</span>
</span><span class='line'><span class="l-Scalar-Plain">ID                  NAME                MODE                REPLICAS            IMAGE                            PORTS</span>
</span><span class='line'><span class="l-Scalar-Plain">p8kcr5y7szte        galera_dbcluster    replicated          2/3                 toughiq/mariadb-cluster:latest</span>
</span></code></pre></td></tr></table></div></figure>


<p>While the container is provisioning, as we have 2 out of 3 running containers, read the data 3 times so test that the round robin queries dont hit the affected container (the dblb wont route traffic to the affected container):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker exec -it $(docker ps -f name=galera_dbclient -q) mysql -uroot -ppassword -h dblb -e&#39;select * from mydb.foo;&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'><span class="l-Scalar-Plain">| name |</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'><span class="l-Scalar-Plain">| ruan |</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">$ docker exec -it $(docker ps -f name=galera_dbclient -q) mysql -uroot -ppassword -h dblb -e&#39;select * from mydb.foo;&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'><span class="l-Scalar-Plain">| name |</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'><span class="l-Scalar-Plain">| ruan |</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">$ docker exec -it $(docker ps -f name=galera_dbclient -q) mysql -uroot -ppassword -h dblb -e&#39;select * from mydb.foo;&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'><span class="l-Scalar-Plain">| name |</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'><span class="l-Scalar-Plain">| ruan |</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span></code></pre></td></tr></table></div></figure>


<p>Verify that the 3rd container has checked in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker service ls</span>
</span><span class='line'><span class="l-Scalar-Plain">ID                  NAME                MODE                REPLICAS            IMAGE                            PORTS</span>
</span><span class='line'><span class="l-Scalar-Plain">p8kcr5y7szte        galera_dbcluster    replicated          3/3                 toughiq/mariadb-cluster:latest</span>
</span></code></pre></td></tr></table></div></figure>


<h2>How to Restore?</h2>

<p>I&rsquo;m deleting the database to simulate the scenario where we need to restore:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ docker exec -it $(docker ps -f name=galera_dbclient -q) sh</span>
</span><span class='line'><span class="l-Scalar-Plain">&gt; mysql -uroot -ppassword -h dblb -e&#39;drop database mydb;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ensure the db is not present:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">&gt;</span><span class="err"> mysql -uroot -ppassword -h dblb -e&#39;select * from mydb.foo;&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">ERROR 1146 (42S02) at line 1</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Table &#39;mydb.foo&#39; doesn&#39;t exist</span>
</span></code></pre></td></tr></table></div></figure>


<p>Find the archive and extract:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">&gt;</span><span class="err"> find /data/</span>
</span><span class='line'><span class="l-Scalar-Plain">/data/</span>
</span><span class='line'><span class="l-Scalar-Plain">/data/2019-05-10</span>
</span><span class='line'><span class="l-Scalar-Plain">/data/2019-05-10/db_backup-2019-05-10T10.05.sql.gz</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&gt; gunzip /data/2019-05-10/db_backup-2019-05-10T10.05.sql.gz</span>
</span></code></pre></td></tr></table></div></figure>


<p>Restore the backed up database to MySQL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">&gt;</span><span class="err"> mysql -uroot -ppassword -h dblb &lt; /data/2019-05-10/db_backup-2019-05-10T10.05.sql</span>
</span></code></pre></td></tr></table></div></figure>


<p>Test that we can read our data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">&gt;</span><span class="err"> mysql -uroot -ppassword -h dblb -e&#39;select * from mydb.foo;&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'><span class="l-Scalar-Plain">| name |</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span><span class='line'><span class="l-Scalar-Plain">| ruan |</span>
</span><span class='line'><span class="l-Scalar-Plain">+------+</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create Secrets With Vaults Transits Secret Engine]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/07/create-secrets-with-vaults-transits-secret-engine/"/>
    <updated>2019-05-07T16:31:54-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/07/create-secrets-with-vaults-transits-secret-engine</id>
    <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/b2223b0ca7077fcf9919372582183757239e4153/68747470733a2f2f6c6561726e2e6861736869636f72702e636f6d2f6173736574732f696d616765732f7661756c742d656e6372797074696f6e2e706e67" alt="" /></p>

<p>Vault&rsquo;s transit secrets engine handles cryptographic functions on data-in-transit. Vault doesn&rsquo;t store the data sent to the secrets engine, so it can also be viewed as encryption as a service.</p>

<p>In this tutorial we will demonstrate how to use Vault&rsquo;s Transit Secret Engine.</p>

<p>Related Posts:</p>

<ul>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/06/setup-hashicorp-vault-server-on-docker-and-cli-guide/">Setup a Vault Server on Docker</a></li>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/07/persist-vault-data-with-amazon-s3-as-a-storage-backend/">Use the S3 Storage Backend to Persist Data</a></li>
</ul>


<h2>Enable the Transit Engine:</h2>

<p>Enable transit secret engine using the /sys/mounts endpoint:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl --header "X-Vault-Token: $VAULT_TOKEN" -XPOST -d '{"type": "transit", "description": "encs encryption"}' http://127.0.0.1:8200/v1/sys/mounts/transit</span></code></pre></td></tr></table></div></figure>


<h2>Create the Key Ring:</h2>

<p>Create an encryption key ring named <code>fookey</code> using the transit/keys endpoint:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s --header "X-Vault-Token: $VAULT_TOKEN" -XGET http://127.0.0.1:8200/v1/transit/keys/fookey | jq
</span><span class='line'>{
</span><span class='line'>  "request_id": "8375227a-4a9f-a108-0b89-84c448419e80",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 0,
</span><span class='line'>  "data": {
</span><span class='line'>    "allow_plaintext_backup": false,
</span><span class='line'>    "deletion_allowed": false,
</span><span class='line'>    "derived": false,
</span><span class='line'>    "exportable": false,
</span><span class='line'>    "keys": {
</span><span class='line'>      "1": 1554654295
</span><span class='line'>    },
</span><span class='line'>    "latest_version": 1,
</span><span class='line'>    "min_available_version": 0,
</span><span class='line'>    "min_decryption_version": 1,
</span><span class='line'>    "min_encryption_version": 0,
</span><span class='line'>    "name": "fookey",
</span><span class='line'>    "supports_decryption": true,
</span><span class='line'>    "supports_derivation": true,
</span><span class='line'>    "supports_encryption": true,
</span><span class='line'>    "supports_signing": false,
</span><span class='line'>    "type": "aes256-gcm96"
</span><span class='line'>  },
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Encoding</h2>

<p>Encode your string:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ base64 &lt;&lt;&lt; "hello world"
</span><span class='line'>aGVsbG8gd29ybGQK</span></code></pre></td></tr></table></div></figure>


<h2>Encrypt</h2>

<p>To encrypt your secret, use the transit/encrypt endpoint:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s --header "X-Vault-Token: $VAULT_TOKEN" --request POST  --data '{"plaintext": "aGVsbG8gd29ybGQK"}' http://127.0.0.1:8200/v1/transit/encrypt/fookey | jq
</span><span class='line'>{
</span><span class='line'>  "request_id": "ab00ba0f-9e45-0aca-e3c1-7765fd83fc3c",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 0,
</span><span class='line'>  "data": {
</span><span class='line'>    "ciphertext": "vault:v1:Yo4U6xXFM2FoBOaUrw0w3EpSlJS6gmsa4HP1xKtjrk0+xSqi5Rvjvg=="
</span><span class='line'>  },
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Decrypt:</h2>

<p>Use the transit/decrypt endpoint to decrypt the ciphertext:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s --header "X-Vault-Token: $VAULT_TOKEN" --request POST  --data '{"ciphertext": "vault:v1:Yo4U6xXFM2FoBOaUrw0w3EpSlJS6gmsa4HP1xKtjrk0+xSqi5Rvjvg=="}' http://127.0.0.1:8200/v1/transit/decrypt/fookey | jq
</span><span class='line'>{
</span><span class='line'>  "request_id": "3d9743a0-2daf-823c-f413-8c8a90753479",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 0,
</span><span class='line'>  "data": {
</span><span class='line'>    "plaintext": "aGVsbG8gd29ybGQK"
</span><span class='line'>  },
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Decoding</h2>

<p>Decode the response:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ base64 --decode &lt;&lt;&lt; "aGVsbG8gd29ybGQK"
</span><span class='line'>hello world</span></code></pre></td></tr></table></div></figure>


<h2>Resources</h2>

<ul>
<li><a href="https://learn.hashicorp.com/vault/encryption-as-a-service/eaas-transit">Vault Documentation on this topic</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use the Vault API to Provision App Keys and Create KV Pairs]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/07/use-the-vault-api-to-provision-app-keys-and-create-kv-pairs/"/>
    <updated>2019-05-07T16:23:10-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/07/use-the-vault-api-to-provision-app-keys-and-create-kv-pairs</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57256060-f1a27e00-7055-11e9-9a05-77d3fdd6c76f.png" alt="" /></p>

<p>In this tutorial we will use Vault API to create a user and allow that user to write/read key/value pairs from a given path.</p>

<p>Related Posts:</p>

<ul>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/06/setup-hashicorp-vault-server-on-docker-and-cli-guide/">Setup a Vault Server on Docker</a></li>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/06/setup-hashicorp-vault-server-on-docker-and-cli-guide/">Getting Started with the Vault CLI</a></li>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/07/persist-vault-data-with-amazon-s3-as-a-storage-backend/">Use the S3 Storage Backend to Persist Data</a></li>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/07/create-secrets-with-vaults-transits-secret-engine/">Create Secrets with Vaults Transit Secret Engine</a></li>
</ul>


<h2>Credentials / Authentication</h2>

<p>Export Vault Root Tokens:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export ROOT_TOKEN="$(cat ~/.vault-token)"
</span><span class='line'>$ export VAULT_TOKEN=${ROOT_TOKEN}</span></code></pre></td></tr></table></div></figure>


<p>Check the vault status:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET -H "X-Vault-Token: ${VAULT_TOKEN}" http://127.0.0.1:8200/v1/sys/health | jq
</span><span class='line'>{
</span><span class='line'>  "initialized": true,
</span><span class='line'>  "sealed": false,
</span><span class='line'>  "standby": false,
</span><span class='line'>  "performance_standby": false,
</span><span class='line'>  "replication_performance_mode": "disabled",
</span><span class='line'>  "replication_dr_mode": "disabled",
</span><span class='line'>  "server_time_utc": 1554652468,
</span><span class='line'>  "version": "1.1.0",
</span><span class='line'>  "cluster_name": "vault-cluster-bfb00cd7",
</span><span class='line'>  "cluster_id": "dc1dc9a6-xx-xx-xx-a2870f475e7a"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Do a lookup for the root user:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET -H "X-Vault-Token: ${VAULT_TOKEN}" http://127.0.0.1:8200/v1/auth/token/lookup-self | jq
</span><span class='line'>{
</span><span class='line'>  "request_id": "69a19f66-5bad-3af2-81a5-81ca24e50b02",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 0,
</span><span class='line'>  "data": {
</span><span class='line'>    "accessor": "A7Xkik1ebWpUfzqNrvADmQ08",
</span><span class='line'>    "creation_time": 1554651149,
</span><span class='line'>    "creation_ttl": 0,
</span><span class='line'>    "display_name": "root",
</span><span class='line'>    "entity_id": "",
</span><span class='line'>    "expire_time": null,
</span><span class='line'>    "explicit_max_ttl": 0,
</span><span class='line'>    "id": "s.po8HkMdCnnAerlCAeHGGGszQ",
</span><span class='line'>    "meta": null,
</span><span class='line'>    "num_uses": 0,
</span><span class='line'>    "orphan": true,
</span><span class='line'>    "path": "auth/token/root",
</span><span class='line'>    "policies": [
</span><span class='line'>      "root"
</span><span class='line'>    ],
</span><span class='line'>    "ttl": 0,
</span><span class='line'>    "type": "service"
</span><span class='line'>  },
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Create the Roles</h2>

<p>Create the AppRole:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XPOST -H "X-Vault-Token: ${VAULT_TOKEN}" -d '{"type": "approle"}' http://127.0.0.1:8200/v1/sys/auth/approle | jq
</span><span class='line'>$ curl -s -XGET -H "X-Vault-Token: ${VAULT_TOKEN}" http://127.0.0.1:8200/v1/sys/auth | jq
</span><span class='line'>{
</span><span class='line'>  "token/": {
</span><span class='line'>    "accessor": "auth_token_31f2381e",
</span><span class='line'>    "config": {
</span><span class='line'>      "default_lease_ttl": 0,
</span><span class='line'>      "force_no_cache": false,
</span><span class='line'>      "max_lease_ttl": 0,
</span><span class='line'>      "token_type": "default-service"
</span><span class='line'>    },
</span><span class='line'>    "description": "token based credentials",
</span><span class='line'>    "local": false,
</span><span class='line'>    "options": null,
</span><span class='line'>    "seal_wrap": false,
</span><span class='line'>    "type": "token"
</span><span class='line'>  },
</span><span class='line'>  "approle/": {
</span><span class='line'>    "accessor": "auth_approle_d542dcad",
</span><span class='line'>    "config": {
</span><span class='line'>      "default_lease_ttl": 0,
</span><span class='line'>      "force_no_cache": false,
</span><span class='line'>      "max_lease_ttl": 0,
</span><span class='line'>      "token_type": "default-service"
</span><span class='line'>    },
</span><span class='line'>    "description": "",
</span><span class='line'>    "local": false,
</span><span class='line'>    "options": {},
</span><span class='line'>    "seal_wrap": false,
</span><span class='line'>    "type": "approle"
</span><span class='line'>  },
</span><span class='line'>  "request_id": "20554948-b8e0-4254-f21d-f9ad25f1e5d5",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 0,
</span><span class='line'>  "data": {
</span><span class='line'>    "approle/": {
</span><span class='line'>      "accessor": "auth_approle_d542dcad",
</span><span class='line'>      "config": {
</span><span class='line'>        "default_lease_ttl": 0,
</span><span class='line'>        "force_no_cache": false,
</span><span class='line'>        "max_lease_ttl": 0,
</span><span class='line'>        "token_type": "default-service"
</span><span class='line'>      },
</span><span class='line'>      "description": "",
</span><span class='line'>      "local": false,
</span><span class='line'>      "options": {},
</span><span class='line'>      "seal_wrap": false,
</span><span class='line'>      "type": "approle"
</span><span class='line'>    },
</span><span class='line'>    "token/": {
</span><span class='line'>      "accessor": "auth_token_31f2381e",
</span><span class='line'>      "config": {
</span><span class='line'>        "default_lease_ttl": 0,
</span><span class='line'>        "force_no_cache": false,
</span><span class='line'>        "max_lease_ttl": 0,
</span><span class='line'>        "token_type": "default-service"
</span><span class='line'>      },
</span><span class='line'>      "description": "token based credentials",
</span><span class='line'>      "local": false,
</span><span class='line'>      "options": null,
</span><span class='line'>      "seal_wrap": false,
</span><span class='line'>      "type": "token"
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Create the test policy:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XPOST -H "X-Vault-Token: ${VAULT_TOKEN}" -d '{"policy": "{\"name\": \"test\", \"path\": {\"secret/*\": {\"policy\": \"write\"}}}"}' http://127.0.0.1:8200/v1/sys/policy/test
</span><span class='line'>$ curl -s -XGET -H "X-Vault-Token: ${VAULT_TOKEN}" http://127.0.0.1:8200/v1/sys/policy/test | jq
</span><span class='line'>{
</span><span class='line'>  "name": "test",
</span><span class='line'>  "rules": "{\"name\": \"test\", \"path\": {\"secret/*\": {\"policy\": \"write\"}}}",
</span><span class='line'>  "request_id": "e4f55dc0-575f-ead9-48f6-43154153889a",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 0,
</span><span class='line'>  "data": {
</span><span class='line'>    "name": "test",
</span><span class='line'>    "rules": "{\"name\": \"test\", \"path\": {\"secret/*\": {\"policy\": \"write\"}}}"
</span><span class='line'>  },
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Attach the policy to the approle:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -XPOST -H "X-Vault-Token: ${VAULT_TOKEN}" -d '{"policies": "test"}' http://127.0.0.1:8200/v1/auth/approle/role/app
</span><span class='line'>$ curl -s -XGET -H "X-Vault-Token: ${VAULT_TOKEN}" 'http://127.0.0.1:8200/v1/auth/approle/role?list=true' | jq .
</span><span class='line'>{
</span><span class='line'>  "request_id": "e645cad9-9010-4299-0e6b-0baf6d9194b8",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 0,
</span><span class='line'>  "data": {
</span><span class='line'>    "keys": [
</span><span class='line'>      "app"
</span><span class='line'>    ]
</span><span class='line'>  },
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Enable the kv store:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H "X-Vault-Token: ${VAULT_TOKEN}" -XPOST --data '{"type": "kv", "description": "my key value store", "config": {"force_no_cache": true}}' http://127.0.0.1:8200/v1/sys/mounts/secret</span></code></pre></td></tr></table></div></figure>


<h2>Create the User Credentials</h2>

<p>Get the role_id:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET -H "X-Vault-Token: ${VAULT_TOKEN}" http://127.0.0.1:8200/v1/auth/approle/role/app/role-id | jq
</span><span class='line'>{
</span><span class='line'>  "request_id": "e803a1bf-a492-dad7-68db-bb1506752e03",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 0,
</span><span class='line'>  "data": {
</span><span class='line'>    "role_id": "3e365c72-7aad-f4e4-521c-d7cf0dd83c0f"
</span><span class='line'>  },
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Create the secret_id:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XPOST -H "X-Vault-Token: ${VAULT_TOKEN}" http://127.0.0.1:8200/v1/auth/approle/role/app/secret-id | jq
</span><span class='line'>{
</span><span class='line'>  "request_id": "b56d20c0-ff8a-a1fe-4d5f-42e57b625b83",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 0,
</span><span class='line'>  "data": {
</span><span class='line'>    "secret_id": "5eecfe29-d6e1-50e6-7a70-04c6bea42b76",
</span><span class='line'>    "secret_id_accessor": "2fa80586-32b9-1c6f-fe1d-7c547e5403e5"
</span><span class='line'>  },
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Create the token with the role_id and secret_id:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XPOST -d '{"role_id": "3e365c72-7aad-f4e4-521c-d7cf0dd83c0f","secret_id": "5eecfe29-d6e1-50e6-7a70-04c6bea42b76"}' http://127.0.0.1:8200/v1/auth/approle/login | jq
</span><span class='line'>{
</span><span class='line'>  "request_id": "82470940-ef09-bcbb-f7a0-bdf085b4f47b",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 0,
</span><span class='line'>  "data": null,
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": {
</span><span class='line'>    "client_token": "s.7EtwtRGsZWOtkqcMvj3UMLP0",
</span><span class='line'>    "accessor": "2TPL1vg5IZXgVF6Xf1RRzbmL",
</span><span class='line'>    "policies": [
</span><span class='line'>      "default",
</span><span class='line'>      "test"
</span><span class='line'>    ],
</span><span class='line'>    "token_policies": [
</span><span class='line'>      "default",
</span><span class='line'>      "test"
</span><span class='line'>    ],
</span><span class='line'>    "metadata": {
</span><span class='line'>      "role_name": "app"
</span><span class='line'>    },
</span><span class='line'>    "lease_duration": 2764800,
</span><span class='line'>    "renewable": true,
</span><span class='line'>    "entity_id": "d5051b01-b7ce-626c-a9f4-e1663f8c23e8",
</span><span class='line'>    "token_type": "service",
</span><span class='line'>    "orphan": true
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Create KV Pairs with New User</h2>

<p>Export the user auth with the received token:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export APP_TOKEN=s.7EtwtRGsZWOtkqcMvj3UMLP0
</span><span class='line'>$ export VAULT_TOKEN=$APP_TOKEN</span></code></pre></td></tr></table></div></figure>


<p>Verify if you can lookup your own info:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET -H "X-Vault-Token: ${VAULT_TOKEN}" http://127.0.0.1:8200/v1/auth/token/lookup-self | jq
</span><span class='line'>{
</span><span class='line'>  "request_id": "2e69cd68-8668-3159-6440-c430cb61d2e6",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 0,
</span><span class='line'>  "data": {
</span><span class='line'>    "accessor": "2TPL1vg5IZXgVF6Xf1RRzbmL",
</span><span class='line'>    "creation_time": 1554651882,
</span><span class='line'>    "creation_ttl": 2764800,
</span><span class='line'>    "display_name": "approle",
</span><span class='line'>    "entity_id": "d5051b01-b7ce-626c-a9f4-e1663f8c23e8",
</span><span class='line'>    "expire_time": "2019-05-09T15:44:42.1013993Z",
</span><span class='line'>    "explicit_max_ttl": 0,
</span><span class='line'>    "id": "s.7EtwtRGsZWOtkqcMvj3UMLP0",
</span><span class='line'>    "issue_time": "2019-04-07T15:44:42.1013788Z",
</span><span class='line'>    "meta": {
</span><span class='line'>      "role_name": "app"
</span><span class='line'>    },
</span><span class='line'>    "num_uses": 0,
</span><span class='line'>    "orphan": true,
</span><span class='line'>    "path": "auth/approle/login",
</span><span class='line'>    "policies": [
</span><span class='line'>      "default",
</span><span class='line'>      "test"
</span><span class='line'>    ],
</span><span class='line'>    "renewable": true,
</span><span class='line'>    "ttl": 2764556,
</span><span class='line'>    "type": "service"
</span><span class='line'>  },
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Create a KV pair:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XPOST -H "X-Vault-Token: ${VAULT_TOKEN}" -d '{"app_password": "secret123"}' http://127.0.0.1:8200/v1/secret/app01/app_password</span></code></pre></td></tr></table></div></figure>


<p>Read the secret from KV pair:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XGET -H "X-Vault-Token: ${VAULT_TOKEN}" http://127.0.0.1:8200/v1/secret/app01/app_password | jq
</span><span class='line'>{
</span><span class='line'>  "request_id": "70d5f16d-2abb-fcfd-063f-0e21d9cef8fd",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "lease_duration": 2764800,
</span><span class='line'>  "data": {
</span><span class='line'>    "app_password": "secret123"
</span><span class='line'>  },
</span><span class='line'>  "wrap_info": null,
</span><span class='line'>  "warnings": null,
</span><span class='line'>  "auth": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Try to write outside the allowed path:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s -XPOST -H "X-Vault-Token: ${VAULT_TOKEN}" -d '{"app_password": "secret123"}' http://127.0.0.1:8200/v1/secrets/app01/app_password
</span><span class='line'>{"errors":["1 error occurred:\n\t* permission denied\n\n"]}</span></code></pre></td></tr></table></div></figure>


<h2>Resources:</h2>

<ul>
<li><a href="https://www.vaultproject.io/api/system/audit.html">https://www.vaultproject.io/api/system/audit.html</a></li>
<li><a href="https://learn.hashicorp.com/vault/getting-started/apis">https://learn.hashicorp.com/vault/getting-started/apis</a></li>
<li><a href="https://www.hashicorp.com/resources/getting-vault-enterprise-installed-running">https://www.hashicorp.com/resources/getting-vault-enterprise-installed-running</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Persist Vault Data With Amazon S3 as a Storage Backend]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/07/persist-vault-data-with-amazon-s3-as-a-storage-backend/"/>
    <updated>2019-05-07T16:01:45-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/07/persist-vault-data-with-amazon-s3-as-a-storage-backend</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57256060-f1a27e00-7055-11e9-9a05-77d3fdd6c76f.png" alt="" /></p>

<p>In a previous post we have set up <a href="https://blog.ruanbekker.com/blog/2019/05/06/setup-hashicorp-vault-server-on-docker-and-cli-guide/">the vault server on docker</a>, but using a file backend to persist our data.</p>

<p>In this tutorial we will configure vault to use <a href="https://www.vaultproject.io/docs/configuration/storage/s3.html">amazon s3 as a storage backend</a> to persist our data for vault.</p>

<h2>Provision S3 Bucket</h2>

<p>Create the S3 Bucket where our data will reside:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws s3 mb --region=eu-west-1 s3://somename-vault-backend</span></code></pre></td></tr></table></div></figure>


<h2>Vault Config</h2>

<p>Create the vault config, where we will provide details about our storage backend and configuration for the vault server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim volumes/config/s3vault.json</span></code></pre></td></tr></table></div></figure>


<p>Populate the config file with the following details, you will just need to provide your own credentials:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;backend&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;s3&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;region&quot;</span><span class="p">:</span> <span class="s2">&quot;eu-west-1&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;access_key&quot;</span><span class="p">:</span> <span class="s2">&quot;ACCESS_KEY&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;secret_key&quot;</span><span class="p">:</span> <span class="s2">&quot;SECRET_KEY&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;bucket&quot;</span><span class="p">:</span> <span class="s2">&quot;somename-vault-backend&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;listener&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;tcp&quot;</span><span class="p">:{</span>
</span><span class='line'>      <span class="nt">&quot;address&quot;</span><span class="p">:</span> <span class="s2">&quot;0.0.0.0:8200&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;tls_disable&quot;</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;ui&quot;</span><span class="p">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Docker Compose</h2>

<p>As we are using docker to deploy our vault server, our docker-compose.yml:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$</span> <span class="err">cat</span> <span class="err">&gt;</span> <span class="err">docker-compose.yml</span> <span class="err">&lt;&lt;</span> <span class="err">EOF</span>
</span><span class='line'><span class="err">version:</span> <span class="err">&#39;</span><span class="mi">2</span><span class="err">&#39;</span>
</span><span class='line'><span class="err">services:</span>
</span><span class='line'>  <span class="err">vault:</span>
</span><span class='line'>    <span class="err">image:</span> <span class="err">vault</span>
</span><span class='line'>    <span class="err">container_name:</span> <span class="err">vault</span>
</span><span class='line'>    <span class="err">ports:</span>
</span><span class='line'>      <span class="err">-</span> <span class="s2">&quot;8200:8200&quot;</span>
</span><span class='line'>    <span class="err">restart:</span> <span class="err">always</span>
</span><span class='line'>    <span class="err">volumes:</span>
</span><span class='line'>      <span class="err">-</span> <span class="err">./volumes/logs:/vault/logs</span>
</span><span class='line'>      <span class="err">-</span> <span class="err">./volumes/file:/vault/file</span>
</span><span class='line'>      <span class="err">-</span> <span class="err">./volumes/config:/vault/config</span>
</span><span class='line'>    <span class="err">cap_add:</span>
</span><span class='line'>      <span class="err">-</span> <span class="err">IPC_LOCK</span>
</span><span class='line'>    <span class="err">entrypoint:</span> <span class="err">vault</span> <span class="err">server</span> <span class="err">-config=/vault/config/s</span><span class="mi">3</span><span class="err">vault.json</span>
</span><span class='line'><span class="err">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>Deploy the vault server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$</span> <span class="err">docker-compose</span> <span class="err">up</span>
</span></code></pre></td></tr></table></div></figure>


<p>Go ahead and create some secrets, then deploy the docker container on another host to test out the data persistence.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Prometheus and Node Exporter on Ubuntu for Epic Monitoring]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/"/>
    <updated>2019-05-07T09:55:37-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57307750-696bb980-70e5-11e9-9b0b-73ad88bde6a3.png" alt="image" /></p>

<p><a href="https://prometheus.io/">Prometheus</a> is one of those awesome open source monitoring services that I simply cannot live without. Prometheus is a Time Series Database that collects metrics from services using it&rsquo;s exporters functionality. Prometheus has its own query language called PromQL and makes graphing epic visualiztions with services such as Grafana a breeze.</p>

<h2>What are we doing today</h2>

<p>We will install the <code>prometheus</code> service and set up <code>node_exporter</code> to consume node related metrics such as cpu, memory, io etc that will be scraped by the exporter configuration on prometheus, which then gets pushed into prometheus&rsquo;s time series database. Which can then be used by services such as Grafana to visualize the data.</p>

<p>Other exporters is also available, such as: <code>haproxy_exporter</code>, <code>blackbox_exporter</code> etc, then you also get <code>pushgateway</code> which is used to push data to, and then your exporter configuration scrapes the data from the pushgateway endpoint. In a later tutorial, we will set up push gateway as well.</p>

<h2>Install Prometheus</h2>

<p>First, let&rsquo;s provision our dedicated system users for prometheus and node exporter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ useradd --no-create-home --shell /bin/false prometheus
</span><span class='line'>$ useradd --no-create-home --shell /bin/false node_exporter</span></code></pre></td></tr></table></div></figure>


<p>Create the directories for it&rsquo;s system files:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir /etc/prometheus
</span><span class='line'>$ mkdir /var/lib/prometheus</span></code></pre></td></tr></table></div></figure>


<p>Apply the permissions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chown prometheus:prometheus /etc/prometheus
</span><span class='line'>$ chown prometheus:prometheus /var/lib/prometheus</span></code></pre></td></tr></table></div></figure>


<p>Next, update your system:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update && apt upgrade -y</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s install prometheus, head over to <a href="https://prometheus.io/download/">https://prometheus.io/download/</a> and get the latest version of prometheus:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://github.com/prometheus/prometheus/releases/download/v2.8.0/prometheus-2.8.0.linux-amd64.tar.gz
</span><span class='line'>$ tar -xf prometheus-2.8.0.linux-amd64.tar.gz
</span><span class='line'>$ cp prometheus-2.8.0.linux-amd64/prometheus /usr/local/bin/
</span><span class='line'>$ cp prometheus-2.8.0.linux-amd64/promtool /usr/local/bin/
</span><span class='line'>$ chown prometheus:prometheus /usr/local/bin/prometheus
</span><span class='line'>$ chown prometheus:prometheus /usr/local/bin/promtool
</span><span class='line'>$ cp -r prometheus-2.8.0.linux-amd64/consoles /etc/prometheus/
</span><span class='line'>$ cp -r prometheus-2.8.0.linux-amd64/console_libraries /etc/prometheus/
</span><span class='line'>$ chown -R prometheus:prometheus /etc/prometheus/consoles
</span><span class='line'>$ chown -R prometheus:prometheus /etc/prometheus/console_libraries
</span><span class='line'>$ rm -rf prometheus-2.8.0.linux-amd64*</span></code></pre></td></tr></table></div></figure>


<h2>Configure Prometheus</h2>

<p>We need to tell prometheus to scrape itself in order to get prometheus performance data, edit the prometheus configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/prometheus/prometheus.yml</span></code></pre></td></tr></table></div></figure>


<p>And add a scrape config: Set the interval on when it needs to scrap, the job name which will be in your metric and the endpoint which it needs to scrape:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global:
</span><span class='line'>  scrape_interval: 15s
</span><span class='line'>
</span><span class='line'>scrape_configs:
</span><span class='line'>  - job_name: 'prometheus'
</span><span class='line'>    scrape_interval: 5s
</span><span class='line'>    static_configs:
</span><span class='line'>      - targets: ['localhost:9090']</span></code></pre></td></tr></table></div></figure>


<p>Apply permissions to the configured file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chown prometheus:prometheus /etc/prometheus/prometheus.yml</span></code></pre></td></tr></table></div></figure>


<p>Next, we need to define a systemd unit file so we can control the daemon using systemd:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/systemd/system/prometheus.service</span></code></pre></td></tr></table></div></figure>


<p>The config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'>Description=Prometheus
</span><span class='line'>Wants=network-online.target
</span><span class='line'>After=network-online.target
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>User=prometheus
</span><span class='line'>Group=prometheus
</span><span class='line'>Type=simple
</span><span class='line'>ExecStart=/usr/local/bin/prometheus \
</span><span class='line'>    --config.file /etc/prometheus/prometheus.yml \
</span><span class='line'>    --storage.tsdb.path /var/lib/prometheus/ \
</span><span class='line'>    --web.console.templates=/etc/prometheus/consoles \
</span><span class='line'>    --web.console.libraries=/etc/prometheus/console_libraries
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=multi-user.target</span></code></pre></td></tr></table></div></figure>


<p>Since we created a new systemd unit file, we need to reload the systemd daemon, then start the service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl daemon-reload
</span><span class='line'>$ systemctl start prometheus</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s look at the status to see if everything works as expected:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl status prometheus
</span><span class='line'>prometheus.service - Prometheus
</span><span class='line'>   Loaded: loaded (/etc/systemd/system/prometheus.service; disabled; vendor preset: enabled)
</span><span class='line'>   Active: active (running) since Tue 2019-03-26 11:59:10 UTC; 6s ago
</span><span class='line'> Main PID: 16374 (prometheus)
</span><span class='line'>    Tasks: 9 (limit: 4704)
</span><span class='line'>   CGroup: /system.slice/prometheus.service
</span><span class='line'>           └─16374 /usr/local/bin/prometheus --config.file /etc/prometheus/prometheus.yml --storage.tsdb.path /var/lib/prometheus/ --web.console.templates=/etc/prometheus/consoles --web.console.libraries=
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>Mar 26 11:59:10 ip-172-31-41-126 prometheus[16374]: level=info ts=2019-03-26T11:59:10.893770598Z caller=main.go:655 msg="TSDB started"</span></code></pre></td></tr></table></div></figure>


<p>Seems legit! Enable the service on startup:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl enable prometheus</span></code></pre></td></tr></table></div></figure>


<h2>Install Node Exporter</h2>

<p>Now since we have prometheus up and running, we can start adding exporters to publish data into our prometheus time series database. As mentioned before, with node exporter, we will allow prometheus to scrape the node exporter endpoint to consume metrics about the node:</p>

<p>You will find the latest version from their website, which I have added at the top of this post.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://github.com/prometheus/node_exporter/releases/download/v0.17.0/node_exporter-0.17.0.linux-amd64.tar.gz
</span><span class='line'>$ tar -xf node_exporter-0.17.0.linux-amd64.tar.gz
</span><span class='line'>$ cp node_exporter-0.17.0.linux-amd64/node_exporter /usr/local/bin
</span><span class='line'>$ chown node_exporter:node_exporter /usr/local/bin/node_exporter
</span><span class='line'>$ rm -rf node_exporter-0.17.0.linux-amd64*</span></code></pre></td></tr></table></div></figure>


<p>Create the systemd unit file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/systemd/system/node_exporter.service</span></code></pre></td></tr></table></div></figure>


<p>Apply this configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'>Description=Node Exporter
</span><span class='line'>Wants=network-online.target
</span><span class='line'>After=network-online.target
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>User=node_exporter
</span><span class='line'>Group=node_exporter
</span><span class='line'>Type=simple
</span><span class='line'>ExecStart=/usr/local/bin/node_exporter
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=multi-user.target</span></code></pre></td></tr></table></div></figure>


<p>Reload the systemd daemon and start node exporter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl daemon-reload
</span><span class='line'>$ systemctl start node_exporter</span></code></pre></td></tr></table></div></figure>


<p>Look at the status:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ node_exporter.service - Node Exporter
</span><span class='line'>   Loaded: loaded (/etc/systemd/system/node_exporter.service; disabled; vendor preset: enabled)
</span><span class='line'>   Active: active (running) since Tue 2019-03-26 12:01:39 UTC; 5s ago
</span><span class='line'> Main PID: 16474 (node_exporter)
</span><span class='line'>    Tasks: 4 (limit: 4704)
</span><span class='line'>   CGroup: /system.slice/node_exporter.service
</span><span class='line'>           └─16474 /usr/local/bin/node_exporter
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>Mar 26 12:01:39 ip-172-31-41-126 node_exporter[16474]: time="2019-03-26T12:01:39Z" level=info msg="Listening on :9100" source="node_exporter.go:111"</span></code></pre></td></tr></table></div></figure>


<p>If everything looks good, enable the service on boot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl enable node_exporter</span></code></pre></td></tr></table></div></figure>


<h2>Configure Node Exporter</h2>

<p>Now that we have node exporter running, we need to tell prometheus how to scrape node exporter, so that the node related metrics can end up into prometheus. Edit the prometheus config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/prometheus/prometheus.yml</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m providing the full config, but the config is the last section, where you can see the jobname is node_exporter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global:
</span><span class='line'>  scrape_interval: 15s
</span><span class='line'>
</span><span class='line'>scrape_configs:
</span><span class='line'>  - job_name: 'prometheus'
</span><span class='line'>    scrape_interval: 5s
</span><span class='line'>    static_configs:
</span><span class='line'>      - targets: ['localhost:9090']
</span><span class='line'>
</span><span class='line'>  - job_name: 'node_exporter'
</span><span class='line'>    scrape_interval: 5s
</span><span class='line'>    static_configs:
</span><span class='line'>      - targets: ['localhost:9100']</span></code></pre></td></tr></table></div></figure>


<p>Once the config is saved, restart prometheus and have a look at the status if everything is going as expected:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart prometheus
</span><span class='line'>$ systemctl status prometheus</span></code></pre></td></tr></table></div></figure>


<h2>Nginx Reverse Proxy</h2>

<p>Let&rsquo;s add a layer of security and front our setup with a nginx reverse proxy, so that we don&rsquo;t have to access prometheus on high ports and we have the option to enable basic http authentication. Install nginx:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt install nginx apache2-utils -y</span></code></pre></td></tr></table></div></figure>


<p>Create the authentication file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ htpasswd -c /etc/nginx/.htpasswd admin</span></code></pre></td></tr></table></div></figure>


<p>Create the nginx site configuration, this will tel nginx to route connections on port 80, to reverse proxy to localhost, port 9090, if authenticated:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rm /etc/nginx/sites-enabled/default
</span><span class='line'>$ vim /etc/nginx/sites-enabled/prometheus.conf</span></code></pre></td></tr></table></div></figure>


<p>And this is the config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen 80 default_server;
</span><span class='line'>    listen [::]:80 default_server;
</span><span class='line'>    root /var/www/html;
</span><span class='line'>    index index.html index.htm index.nginx-debian.html;
</span><span class='line'>    server_name _;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>            auth_basic "Prometheus Auth";
</span><span class='line'>            auth_basic_user_file /etc/nginx/.htpasswd;
</span><span class='line'>            proxy_pass http://localhost:9090;
</span><span class='line'>            proxy_http_version 1.1;
</span><span class='line'>            proxy_set_header Upgrade $http_upgrade;
</span><span class='line'>            proxy_set_header Connection 'upgrade';
</span><span class='line'>            proxy_set_header Host $host;
</span><span class='line'>            proxy_cache_bypass $http_upgrade;
</span><span class='line'>        }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Reload nginx configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl reload nginx</span></code></pre></td></tr></table></div></figure>


<h2>Access the Beauty of Prometheus Land!</h2>

<p>Once you have authenticated, head over to status, here you will see status info such as your targets, this wil be the endpoints that prometheus is scraping:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57307130-4b518980-70e4-11e9-9f16-4665427fba1f.png" alt="image" /></p>

<p>From the main screen, let&rsquo;s dive into some queries using <a href="https://prometheus.io/docs/prometheus/latest/querying/basics/">PromQL</a>. Also see my <a href="https://github.com/ruanbekker/awesome-list/blob/master/cheatsheets/PROMETHEUS.md">Prometheus Cheatsheet</a>.</p>

<p>For the first query, we want to see the available memory of this node in bytes (<code>node_memory_MemAvailable_bytes</code>):</p>

<p><img src="https://user-images.githubusercontent.com/567298/57307338-aa170300-70e4-11e9-9022-e02a4d1d64cf.png" alt="image" /></p>

<p>Now since the value is in bytes, let&rsquo;s convert the value to MB, (<code>node_memory_MemAvailable_bytes/1024/1024</code>)</p>

<p><img src="https://user-images.githubusercontent.com/567298/57307421-d468c080-70e4-11e9-8bd3-425803cb805c.png" alt="image" /></p>

<p>Let&rsquo;s say we want to see the average memory available in 5 minute buckets:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57307504-feba7e00-70e4-11e9-952f-a7ba12eba6a8.png" alt="image" /></p>

<p>That&rsquo;s a few basic ones, but feel free to checkout my <a href="https://github.com/ruanbekker/awesome-list/blob/master/cheatsheets/PROMETHEUS.md">Prometheus Cheatsheet</a> for other examples. I update them as I find more queries.</p>

<h2>Thanks</h2>

<p>Hope this was informative. I am planning to publish a post on visualizing prometheus data with Grafana (which is EPIC!) and installing Pushgateway for custom integrations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Fix the Following Signatures Couldnt Be Verified Because the Public Key Is Not Available With Apt]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/07/how-to-fix-the-following-signatures-couldnt-be-verified-because-the-public-key-is-not-available-with-apt/"/>
    <updated>2019-05-07T06:16:31-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/07/how-to-fix-the-following-signatures-couldnt-be-verified-because-the-public-key-is-not-available-with-apt</id>
    <content type="html"><![CDATA[<p>I was trying to install grafana on ubuntu when I got faced with: &ldquo;the following signatures couldn&rsquo;t be verified because the public key is not available&rdquo; error as seen below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"
</span><span class='line'>Hit:1 http://eu-west-1.ec2.archive.ubuntu.com/ubuntu bionic InRelease
</span><span class='line'>Get:2 http://eu-west-1.ec2.archive.ubuntu.com/ubuntu bionic-updates InRelease [88.7 kB]
</span><span class='line'>Get:3 http://eu-west-1.ec2.archive.ubuntu.com/ubuntu bionic-backports InRelease [74.6 kB]
</span><span class='line'>Get:4 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB]
</span><span class='line'>Get:5 http://eu-west-1.ec2.archive.ubuntu.com/ubuntu bionic-backports/universe Sources [2068 B]
</span><span class='line'>Get:6 http://eu-west-1.ec2.archive.ubuntu.com/ubuntu bionic-backports/universe amd64 Packages [3492 B]
</span><span class='line'>Get:7 https://packages.grafana.com/oss/deb stable InRelease [12.1 kB]
</span><span class='line'>Err:7 https://packages.grafana.com/oss/deb stable InRelease
</span><span class='line'>  The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 8C8C34C524098CB6
</span><span class='line'>Reading package lists... Done</span></code></pre></td></tr></table></div></figure>


<p>In order to continue, we need to import the trusted key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt-key adv --keyserver keyserver.ubuntu.com --recv-keys  8C8C34C524098CB6
</span><span class='line'>Executing: /tmp/apt-key-gpghome.9xlwQh2M06/gpg.1.sh --keyserver keyserver.ubuntu.com --recv-keys 8C8C34C524098CB6
</span><span class='line'>gpg: key 8C8C34C524098CB6: public key "Grafana &lt;info@grafana.com&gt;" imported
</span><span class='line'>gpg: Total number processed: 1
</span><span class='line'>gpg:               imported: 1</span></code></pre></td></tr></table></div></figure>


<p>Now that the key has been imported, we can update and continue:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update
</span><span class='line'>Hit:1 http://eu-west-1.ec2.archive.ubuntu.com/ubuntu bionic InRelease
</span><span class='line'>Hit:2 http://eu-west-1.ec2.archive.ubuntu.com/ubuntu bionic-updates InRelease
</span><span class='line'>Hit:3 http://eu-west-1.ec2.archive.ubuntu.com/ubuntu bionic-backports InRelease
</span><span class='line'>Hit:4 http://security.ubuntu.com/ubuntu bionic-security InRelease
</span><span class='line'>Get:5 https://packages.grafana.com/oss/deb stable InRelease [12.1 kB]
</span><span class='line'>Get:6 https://packages.grafana.com/oss/deb stable/main amd64 Packages [10.8 kB]
</span><span class='line'>Fetched 22.9 kB in 1s (32.7 kB/s)
</span><span class='line'>Reading package lists... Done</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Hashicorp Vault Server on Docker and a Getting Started CLI Guide]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/06/setup-hashicorp-vault-server-on-docker-and-cli-guide/"/>
    <updated>2019-05-06T16:49:09-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/06/setup-hashicorp-vault-server-on-docker-and-cli-guide</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57256060-f1a27e00-7055-11e9-9a05-77d3fdd6c76f.png" alt="" /></p>

<p>Vault is one of Hashicorp&rsquo;s awesome services, which enables you to centrally store, access and distribute dynamic secrets such as tokens, passwords, certificates and encryption keys.</p>

<h2>What will we be doing today</h2>

<p>We will setup a Vault Server on Docker and demonstrate a getting started guide with the Vault CLI to Initialize the Vault, Create / Use and Manage Secrets.</p>

<p>For related posts:</p>

<ul>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/07/persist-vault-data-with-amazon-s3-as-a-storage-backend/">Use the S3 Storage Backend to Persist Data</a></li>
<li><a href="https://blog.ruanbekker.com/blog/2019/05/07/create-secrets-with-vaults-transits-secret-engine/">Create Secrets with Vaults Transit Secret Engine</a></li>
</ul>


<h2>Setting up the Vault Server</h2>

<p>Create the directory structure:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ touch docker-compose.yml
</span><span class='line'>$ mkdir -p volumes/{config,file,logs}</span></code></pre></td></tr></table></div></figure>


<p>Populate the vault config <code>vault.json</code>. (As you can see the config is local, in the next couple of posts, I will show how to persist this config to Amazon S3)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat &gt; volumes/config/vault.json &lt;&lt; EOF
</span><span class='line'>{
</span><span class='line'>  "backend": {
</span><span class='line'>    "file": {
</span><span class='line'>      "path": "/vault/file"
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  "listener": {
</span><span class='line'>    "tcp":{
</span><span class='line'>      "address": "0.0.0.0:8200",
</span><span class='line'>      "tls_disable": 1
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  "ui": true
</span><span class='line'>}
</span><span class='line'>EOF</span></code></pre></td></tr></table></div></figure>


<p>Populate the <code>docker-compose.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat &gt; docker-compose.yml &lt;&lt; EOF
</span><span class='line'>version: '2'
</span><span class='line'>services:
</span><span class='line'>  vault:
</span><span class='line'>    image: vault
</span><span class='line'>    container_name: vault
</span><span class='line'>    ports:
</span><span class='line'>      - "8200:8200"
</span><span class='line'>    restart: always
</span><span class='line'>    volumes:
</span><span class='line'>      - ./volumes/logs:/vault/logs
</span><span class='line'>      - ./volumes/file:/vault/file
</span><span class='line'>      - ./volumes/config:/vault/config
</span><span class='line'>    cap_add:
</span><span class='line'>      - IPC_LOCK
</span><span class='line'>    entrypoint: vault server -config=/vault/config/vault.json
</span><span class='line'>EOF</span></code></pre></td></tr></table></div></figure>


<p>Start the Vault Server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose up</span></code></pre></td></tr></table></div></figure>


<p>The UI is available at <a href="http://localhost:8200/ui">http://localhost:8200/ui</a> and the api at <a href="http://localhost:8200">http://localhost:8200</a></p>

<h2>Interacting with the Vault CLI</h2>

<p>I will demonstrate how to use the Vault CLI to interact with Vault. Let&rsquo;s start by installing the vault cli tools, I am using mac, so I will be using brew:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install vault</span></code></pre></td></tr></table></div></figure>


<p>Set environment variables:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export VAULT_ADDR='http://127.0.0.1:8200'</span></code></pre></td></tr></table></div></figure>


<h2>Initialize the Vault Cluster:</h2>

<p>Initialize new vault cluster with 6 key shares:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault operator init -key-shares=6 -key-threshold=3
</span><span class='line'>Unseal Key 1: RntjR...DQv
</span><span class='line'>Unseal Key 2: 7E1bG...0LL+
</span><span class='line'>Unseal Key 3: AEuhl...A1NO
</span><span class='line'>Unseal Key 4: bZU76...FMGl
</span><span class='line'>Unseal Key 5: DmEjY...n7Hk
</span><span class='line'>Unseal Key 6: pC4pK...XbKb
</span><span class='line'>
</span><span class='line'>Initial Root Token: s.F0JGq..98s2U
</span><span class='line'>
</span><span class='line'>Vault initialized with 10 key shares and a key threshold of 3. Please
</span><span class='line'>securely distribute the key shares printed above. When the Vault is re-sealed,
</span><span class='line'>restarted, or stopped, you must supply at least 3 of these keys to unseal it
</span><span class='line'>before it can start servicing requests.
</span><span class='line'>
</span><span class='line'>Vault does not store the generated master key. Without at least 3 key to
</span><span class='line'>reconstruct the master key, Vault will remain permanently sealed!
</span><span class='line'>
</span><span class='line'>It is possible to generate new unseal keys, provided you have a quorum of
</span><span class='line'>existing unseal keys shares. See "vault operator rekey" for more information.</span></code></pre></td></tr></table></div></figure>


<p>In order to unseal the vault cluster, we need to supply it with 3 key shares:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault operator unseal RntjR...DQv
</span><span class='line'>$ vault operator unseal bZU76...FMGl
</span><span class='line'>$ vault operator unseal pC4pK...XbKb</span></code></pre></td></tr></table></div></figure>


<p>Ensure the vault is unsealed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault status -format=json
</span><span class='line'>{
</span><span class='line'>  "type": "shamir",
</span><span class='line'>  "initialized": true,
</span><span class='line'>  "sealed": false,
</span><span class='line'>  "t": 3,
</span><span class='line'>  "n": 5,
</span><span class='line'>  "progress": 0,
</span><span class='line'>  "nonce": "",
</span><span class='line'>  "version": "1.1.0",
</span><span class='line'>  "migration": false,
</span><span class='line'>  "cluster_name": "vault-cluster-dca2b572",
</span><span class='line'>  "cluster_id": "469c2f1d-xx-xx-xx-03bfc497c883",
</span><span class='line'>  "recovery_seal": false
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Authenticate against the vault:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault login s.tdlEqsfzGbePVlke5hTpr9Um
</span><span class='line'>Success! You are now authenticated. The token information displayed below
</span><span class='line'>is already stored in the token helper. You do NOT need to run "vault login"
</span><span class='line'>again. Future Vault requests will automatically use this token.</span></code></pre></td></tr></table></div></figure>


<p>Using the cli your auth token will be saved locally at <code>~/.vault-token</code>.</p>

<p>Enable the secret kv engine:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault secrets enable -version=1 -path=secret kv</span></code></pre></td></tr></table></div></figure>


<h2>Create and Read Secrets</h2>

<p>Write a secret to the path enabled above:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv put secret/my-app/password password=123</span></code></pre></td></tr></table></div></figure>


<p>List your secrets:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv list secret/
</span><span class='line'>Keys
</span><span class='line'>----
</span><span class='line'>my-app/</span></code></pre></td></tr></table></div></figure>


<p>Read the secret (defaults in table format):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv get secret/my-app/password
</span><span class='line'>Key                 Value
</span><span class='line'>---                 -----
</span><span class='line'>refresh_interval    768h
</span><span class='line'>password            123</span></code></pre></td></tr></table></div></figure>


<p>Read the secret in json format:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv get --format=json secret/my-app/password
</span><span class='line'>{
</span><span class='line'>  "request_id": "0249c878-7432-9555-835a-89b275fca32o",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "lease_duration": 2764800,
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "data": {
</span><span class='line'>    "password": "123"
</span><span class='line'>  },
</span><span class='line'>  "warnings": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Read only the password value in the secret:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv get -field=password secret/my-app/password
</span><span class='line'>123</span></code></pre></td></tr></table></div></figure>


<h2>Key with Multiple Secrets</h2>

<p>Create a key with multiple secrets:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv put secret/reminders/app db_username=db.ruanbekker.com username=root password=secret</span></code></pre></td></tr></table></div></figure>


<p>Read all the secrets:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv get --format=json secret/reminders/app
</span><span class='line'>{
</span><span class='line'>  "request_id": "0144c878-7532-9555-835a-8cb275fca3dd",
</span><span class='line'>  "lease_id": "",
</span><span class='line'>  "lease_duration": 2764800,
</span><span class='line'>  "renewable": false,
</span><span class='line'>  "data": {
</span><span class='line'>    "db_username": "db.ruanbekker.com",
</span><span class='line'>    "password": "secret",
</span><span class='line'>    "username": "root"
</span><span class='line'>  },
</span><span class='line'>  "warnings": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Read only the username field in the key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv get -field=username secret/reminders/app
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<p>Delete the secret:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv delete secret/reminders</span></code></pre></td></tr></table></div></figure>


<h2>Versioning</h2>

<p>Create a key and set the metadata to max of 5 versions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv metadata put -max-versions=5 secret/fooapp/appname</span></code></pre></td></tr></table></div></figure>


<p>Get the metadata of the key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv metadata get secret/fooapp/appname
</span><span class='line'>======= Metadata =======
</span><span class='line'>Key                Value
</span><span class='line'>---                -----
</span><span class='line'>cas_required       false
</span><span class='line'>created_time       2019-04-07T12:35:54.355411Z
</span><span class='line'>current_version    0
</span><span class='line'>max_versions       5
</span><span class='line'>oldest_version     0
</span><span class='line'>updated_time       2019-04-07T12:35:54.355411Z</span></code></pre></td></tr></table></div></figure>


<p>Write a secret <code>appname</code> to our key: <code>secret/fooapp/appname</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv put secret/fooapp/appname appname=app1
</span><span class='line'>Key              Value
</span><span class='line'>---              -----
</span><span class='line'>created_time     2019-04-07T12:36:41.7577102Z
</span><span class='line'>deletion_time    n/a
</span><span class='line'>destroyed        false
</span><span class='line'>version          1</span></code></pre></td></tr></table></div></figure>


<p>Overwrite the key with a couple of requests:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv put secret/fooapp/appname appname=app2
</span><span class='line'>$ vault kv put secret/fooapp/appname appname=app3</span></code></pre></td></tr></table></div></figure>


<p>Read the current value:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv get -field=appname secret/fooapp/appname
</span><span class='line'>app3</span></code></pre></td></tr></table></div></figure>


<p>Get the version=2 value of this file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault kv get -field=appname -version=2 secret/fooapp/appname
</span><span class='line'>app2</span></code></pre></td></tr></table></div></figure>


<h2>Thanks</h2>

<p>Thanks for reading, hope this was informative. Have a look at <a href="https://www.vaultproject.io">Hashicorp&rsquo;s Vault Documentation</a> for more information on the project. I will post more posts on Vault under the <a href="https://blog.ruanbekker.com/blog/categories/vault">#vault</a> category.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Concourse CI to Deploy to Docker Swarm]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/04/using-concourse-ci-to-deploy-to-docker-swarm/"/>
    <updated>2019-05-04T17:11:17-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/04/using-concourse-ci-to-deploy-to-docker-swarm</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/gzkdu9.jpg?nocache=1511644783495" alt="" /></p>

<p>In this tutorial we will use Concourse to Deploy our application to Docker Swarm.</p>

<h2>The Flow</h2>

<ul>
<li>Our application code resides on Github</li>
<li>The pipeline triggers when a commit is pushed to the master branch</li>
<li>The pipeline will automatically deploy to the staging environment</li>
<li>The pipeline requires a manual trigger to deploy to prod</li>
<li>Note: Staging and Prod on the same swarm for demonstration</li>
</ul>


<p>The code for this tutorial is available on my <strong><a href="https://github.com/ruanbekker/concourse-swarm-app-demo">github repository</a></strong></p>

<h2>Application Structure</h2>

<p>The application structure for our code looks like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57184912-1d412f00-6ec3-11e9-85e9-6517d83e96e8.png" alt="" /></p>

<h2>Pipeline Walktrough</h2>

<p>Our <code>ci/pipeline.yml</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">resources</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git</span>
</span><span class='line'>    <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">uri</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git@github.com:ruanbekker/concourse-swarm-app-demo.git</span>
</span><span class='line'>      <span class="l-Scalar-Plain">branch</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">master</span>
</span><span class='line'>      <span class="l-Scalar-Plain">private_key</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((github_private_key))</span>
</span><span class='line'>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo-staging</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git</span>
</span><span class='line'>    <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">uri</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git@github.com:ruanbekker/concourse-swarm-app-demo.git</span>
</span><span class='line'>      <span class="l-Scalar-Plain">branch</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">master</span>
</span><span class='line'>      <span class="l-Scalar-Plain">private_key</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((github_private_key))</span>
</span><span class='line'>      <span class="l-Scalar-Plain">paths</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">config/staging/*</span>
</span><span class='line'>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo-prod</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git</span>
</span><span class='line'>    <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">uri</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git@github.com:ruanbekker/concourse-swarm-app-demo.git</span>
</span><span class='line'>      <span class="l-Scalar-Plain">branch</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">master</span>
</span><span class='line'>      <span class="l-Scalar-Plain">private_key</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((github_private_key))</span>
</span><span class='line'>      <span class="l-Scalar-Plain">paths</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">config/prod/*</span>
</span><span class='line'>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack-alert</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack-notification</span>
</span><span class='line'>    <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((slack_notification_url))</span>
</span><span class='line'>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-staging</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">semver</span>
</span><span class='line'>    <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git</span>
</span><span class='line'>      <span class="l-Scalar-Plain">uri</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git@github.com:ruanbekker/concourse-swarm-app-demo.git</span>
</span><span class='line'>      <span class="l-Scalar-Plain">private_key</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((github_private_key))</span>
</span><span class='line'>      <span class="l-Scalar-Plain">file</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-staging</span>
</span><span class='line'>      <span class="l-Scalar-Plain">branch</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-staging</span>
</span><span class='line'>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-prod</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">semver</span>
</span><span class='line'>    <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git</span>
</span><span class='line'>      <span class="l-Scalar-Plain">uri</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git@github.com:ruanbekker/concourse-swarm-app-demo.git</span>
</span><span class='line'>      <span class="l-Scalar-Plain">private_key</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((github_private_key))</span>
</span><span class='line'>      <span class="l-Scalar-Plain">file</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-prod</span>
</span><span class='line'>      <span class="l-Scalar-Plain">branch</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-prod</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">resource_types</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack-notification</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker-image</span>
</span><span class='line'>    <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">repository</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cfcommunity/slack-notification-resource</span>
</span><span class='line'>      <span class="l-Scalar-Plain">tag</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">v1.3.0</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">jobs</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bump-staging-version</span>
</span><span class='line'>    <span class="l-Scalar-Plain">plan</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo-staging</span>
</span><span class='line'>      <span class="l-Scalar-Plain">trigger</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-staging</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">put</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-staging</span>
</span><span class='line'>      <span class="l-Scalar-Plain">params</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">bump</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">major</span>
</span><span class='line'>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bump-prod-version</span>
</span><span class='line'>    <span class="l-Scalar-Plain">plan</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo-prod</span>
</span><span class='line'>      <span class="l-Scalar-Plain">trigger</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-prod</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">put</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-prod</span>
</span><span class='line'>      <span class="l-Scalar-Plain">params</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">bump</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">major</span>
</span><span class='line'>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">deploy-staging</span>
</span><span class='line'>    <span class="l-Scalar-Plain">plan</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo-staging</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-staging</span>
</span><span class='line'>      <span class="l-Scalar-Plain">passed</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">bump-staging-version</span>
</span><span class='line'>      <span class="l-Scalar-Plain">trigger</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">task</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">deploy-staging</span>
</span><span class='line'>      <span class="l-Scalar-Plain">params</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">DOCKER_SWARM_HOSTNAME</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_swarm_staging_host))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">DOCKER_SWARM_KEY</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_swarm_key))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">DOCKER_HUB_USER</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_hub_user))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">DOCKER_HUB_PASSWORD</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_hub_password))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">SERVICE_NAME</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">app-staging</span>
</span><span class='line'>        <span class="l-Scalar-Plain">SWARM</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">staging</span>
</span><span class='line'>        <span class="l-Scalar-Plain">ENVIRONMENT</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">staging</span>
</span><span class='line'>        <span class="l-Scalar-Plain">AWS_ACCESS_KEY_ID</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((aws_access_key_id))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">AWS_SECRET_ACCESS_KEY</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((aws_secret_access_key))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">AWS_DEFAULT_REGION</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((aws_region))</span>
</span><span class='line'>      <span class="l-Scalar-Plain">config</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">platform</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linux</span>
</span><span class='line'>        <span class="l-Scalar-Plain">image_resource</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker-image</span>
</span><span class='line'>          <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">repository</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rbekker87/build-tools</span>
</span><span class='line'>            <span class="l-Scalar-Plain">tag</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">latest</span>
</span><span class='line'>            <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_hub_user))</span>
</span><span class='line'>            <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_hub_password))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">inputs</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo-staging</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-staging</span>
</span><span class='line'>        <span class="l-Scalar-Plain">run</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/bin/sh</span>
</span><span class='line'>          <span class="l-Scalar-Plain">args</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">-c</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">|</span>
</span><span class='line'>              <span class="no">./main-repo/ci/scripts/deploy.sh</span>
</span><span class='line'>      <span class="l-Scalar-Plain">on_failure</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">put</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack-alert</span>
</span><span class='line'>        <span class="l-Scalar-Plain">params</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">channel</span><span class="p-Indicator">:</span> <span class="s">&#39;#system_events&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="s">&#39;concourse&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">icon_emoji</span><span class="p-Indicator">:</span> <span class="s">&#39;:concourse:&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">silent</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>          <span class="l-Scalar-Plain">text</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>            <span class="no">*$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME* ($BUILD_NAME) FAILED :rage: - TestApp Deploy to staging-swarm failed</span>
</span><span class='line'>            <span class="no">http://ci.example.local/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME</span>
</span><span class='line'>      <span class="l-Scalar-Plain">on_success</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">put</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack-alert</span>
</span><span class='line'>        <span class="l-Scalar-Plain">params</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">channel</span><span class="p-Indicator">:</span> <span class="s">&#39;#system_events&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="s">&#39;concourse&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">icon_emoji</span><span class="p-Indicator">:</span> <span class="s">&#39;:concourse:&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">silent</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>          <span class="l-Scalar-Plain">text</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>            <span class="no">*$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME* ($BUILD_NAME) SUCCESS :aww_yeah: - TestApp Deploy to staging-swarm succeeded</span>
</span><span class='line'>            <span class="no">http://ci.example.local/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME</span>
</span><span class='line'>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">deploy-prod</span>
</span><span class='line'>    <span class="l-Scalar-Plain">plan</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo-prod</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">get</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-prod</span>
</span><span class='line'>      <span class="l-Scalar-Plain">passed</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">bump-prod-version</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">task</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">deploy-prod</span>
</span><span class='line'>      <span class="l-Scalar-Plain">params</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">DOCKER_SWARM_HOSTNAME</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_swarm_prod_host))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">DOCKER_SWARM_KEY</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_swarm_key))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">DOCKER_HUB_USER</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_hub_user))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">DOCKER_HUB_PASSWORD</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_hub_password))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">SERVICE_NAME</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">app-prod</span>
</span><span class='line'>        <span class="l-Scalar-Plain">SWARM</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">prod</span>
</span><span class='line'>        <span class="l-Scalar-Plain">ENVIRONMENT</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">production</span>
</span><span class='line'>        <span class="l-Scalar-Plain">AWS_ACCESS_KEY_ID</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((aws_access_key_id))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">AWS_SECRET_ACCESS_KEY</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((aws_secret_access_key))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">AWS_DEFAULT_REGION</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((aws_region))</span>
</span><span class='line'>      <span class="l-Scalar-Plain">config</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">platform</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linux</span>
</span><span class='line'>        <span class="l-Scalar-Plain">image_resource</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker-image</span>
</span><span class='line'>          <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">repository</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rbekker87/build-tools</span>
</span><span class='line'>            <span class="l-Scalar-Plain">tag</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">latest</span>
</span><span class='line'>            <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_hub_user))</span>
</span><span class='line'>            <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">((docker_hub_password))</span>
</span><span class='line'>        <span class="l-Scalar-Plain">inputs</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo-prod</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-repo</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">version-prod</span>
</span><span class='line'>        <span class="l-Scalar-Plain">run</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/bin/sh</span>
</span><span class='line'>          <span class="l-Scalar-Plain">args</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">-c</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">|</span>
</span><span class='line'>              <span class="no">./main-repo/ci/scripts/deploy.sh</span>
</span><span class='line'>      <span class="l-Scalar-Plain">on_failure</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">put</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack-alert</span>
</span><span class='line'>        <span class="l-Scalar-Plain">params</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">channel</span><span class="p-Indicator">:</span> <span class="s">&#39;#system_events&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="s">&#39;concourse&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">icon_emoji</span><span class="p-Indicator">:</span> <span class="s">&#39;:concourse:&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">silent</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>          <span class="l-Scalar-Plain">text</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>            <span class="no">*$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME* ($BUILD_NAME) FAILED :rage: - TestApp Deploy to prod-swarm failed</span>
</span><span class='line'>            <span class="no">http://ci.example.local/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME</span>
</span><span class='line'>      <span class="l-Scalar-Plain">on_success</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">put</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack-alert</span>
</span><span class='line'>        <span class="l-Scalar-Plain">params</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">channel</span><span class="p-Indicator">:</span> <span class="s">&#39;#system_events&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="s">&#39;concourse&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">icon_emoji</span><span class="p-Indicator">:</span> <span class="s">&#39;:concourse:&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">silent</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>          <span class="l-Scalar-Plain">text</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>            <span class="no">*$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME* ($BUILD_NAME) SUCCESS :aww_yeah: - TestApp Deploy to prod-swarm succeeded</span>
</span><span class='line'>            <span class="no">http://ci.example.local/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our <code>ci/credentials.yml</code> which will hold all our secret info, which will remain local:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yourdockerusername</span>
</span><span class='line'><span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yourdockerpassword</span>
</span><span class='line'><span class="l-Scalar-Plain">docker_swarm_prod_host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10.20.30.40</span>
</span><span class='line'><span class="nn">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first step of our deploy will invoke a shell script that will establish a ssh tunnel to the docker host, mounting the docker socket to a tcp local port, then exporting the docker host port to the tunneled port, <code>ci/scripts/deploy.sh</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1">#!/usr/bin/env sh</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">export DOCKER_HOST=&quot;localhost:2376&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">echo &quot;${DOCKER_SWARM_KEY}&quot; | sed -e &#39;s/\(KEY-----\)\s/\1\n/g; s/\s\(-----END\)/\n\1/g&#39; | sed -e &#39;2s/\s\+/\n/g&#39; &gt; key.pem</span>
</span><span class='line'><span class="l-Scalar-Plain">chmod 600 key.pem</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">screen -S \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sshtunnel -m -d sh -c \</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&quot;ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -i ./key.pem -NL localhost:2376:/var/run/docker.sock root@$DOCKER_SWARM_HOSTNAME&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">sleep 5</span>
</span><span class='line'><span class="l-Scalar-Plain">docker login -u &quot;${DOCKER_HUB_USER}&quot; -p &quot;${DOCKER_HUB_PASSWORD}&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">docker stack deploy --prune -c ./main-repo/ci/docker/docker-compose.${ENVIRONMENT}.yml $SERVICE_NAME --with-registry-auth</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">if [ $? != &quot;0&quot; ]</span>
</span><span class='line'>  <span class="l-Scalar-Plain">then</span>
</span><span class='line'>    <span class="l-Scalar-Plain">echo &quot;deploy failure for</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">$SERVICE_NAME&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">screen -S sshtunnel -X quit</span>
</span><span class='line'>    <span class="l-Scalar-Plain">exit 1</span>
</span><span class='line'>  <span class="l-Scalar-Plain">else</span>
</span><span class='line'>    <span class="l-Scalar-Plain">set -x</span>
</span><span class='line'>    <span class="l-Scalar-Plain">echo &quot;deploy success for</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">$SERVICE_NAME&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">screen -S sshtunnel -X quit</span>
</span><span class='line'><span class="l-Scalar-Plain">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>The deploy script references the docker-compose files, first our <code>ci/docker/docker-compose.staging.yml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&quot;3.4&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">web</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ruanbekker/web-center-name</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">APP_ENVIRONMENT=Staging</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">81:5000</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">web_net</span>
</span><span class='line'>    <span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">mode</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">replicated</span>
</span><span class='line'>      <span class="l-Scalar-Plain">replicas</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">web_net</span><span class="p-Indicator">:</span> <span class="p-Indicator">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, our docker-compose for production, <code>ci/docker/docker-compose.production.yml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&quot;3.4&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">web</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ruanbekker/web-center-name</span>
</span><span class='line'>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">APP_ENVIRONMENT=Production</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">80:5000</span>
</span><span class='line'>    <span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">web_net</span>
</span><span class='line'>    <span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">mode</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">replicated</span>
</span><span class='line'>      <span class="l-Scalar-Plain">replicas</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">networks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">web_net</span><span class="p-Indicator">:</span> <span class="p-Indicator">{}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Set the Pipeline in Concourse</h2>

<p>Create 2 branches in your github repository for versioning: <code>version-staging</code> and <code>version-prod</code>, then logon to concourse and save the target:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ fly -t ci login -n main -c http://&lt;concourse-ip&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Set the pipeline, point the config, local variables definition and name the pipeline:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ fly -t ci sp -n main -c ci/pipeline.yml -p &lt;pipeline-name&gt; -l ci/&lt;variables&gt;.yml</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will find that the pipeline will look like below and that it will be in a paused state:</p>

<p><img src="https://user-images.githubusercontent.com/567298/54060759-96dfd800-4206-11e9-9236-e3b86783417c.png" alt="" /></p>

<p>Unpause the pipeline:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ fly -t ci up -p swarm-demo</span>
</span></code></pre></td></tr></table></div></figure>


<p>The pipeline should kick-off automatically due to the trigger that is set to true:</p>

<p><img src="https://user-images.githubusercontent.com/567298/54060811-cbec2a80-4206-11e9-8de7-a0b308f20cef.png" alt="" /></p>

<p>Deployed automatically to staging, prod is a manual trigger:</p>

<p><img src="https://user-images.githubusercontent.com/567298/54060991-8e3bd180-4207-11e9-9726-2c01ca10d24a.png" alt="" /></p>

<h2>Testing our Application</h2>

<p>For demonstration purposes we have deployed staging on port 81 and production on port 80.</p>

<p>Testing Staging on <a href="http://">http://</a><swarm-ip>:81/</p>

<p><img src="https://user-images.githubusercontent.com/567298/57185377-73fe3700-6eca-11e9-91d3-953e754cbde9.png" alt="" /></p>

<p>Testing Production on <a href="http://">http://</a><swarm-ip>:80/</p>

<p><img src="https://user-images.githubusercontent.com/567298/57185383-8d06e800-6eca-11e9-8cff-c3a665f9f377.png" alt="" /></p>
]]></content>
  </entry>
  
</feed>
