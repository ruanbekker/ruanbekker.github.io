<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2021-07-31T04:13:02-04:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Difference With ECS Task and Execution IAM Roles on AWS]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/07/31/difference-with-ecs-task-and-execution-iam-roles-on-aws/"/>
    <updated>2021-07-31T03:37:34-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/07/31/difference-with-ecs-task-and-execution-iam-roles-on-aws</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/ruanbekker-header-photo.png" alt="" /></p>

<p>In this post we will look at what the difference is between the <a href="https://docs.aws.amazon.com/AmazonECS/latest/userguide/task-iam-roles.html">AWS ECS Task Execution IAM Role</a> and the <a href="https://docs.aws.amazon.com/AmazonECS/latest/userguide/task-iam-roles.html">IAM Role for Tasks</a> and give a example policy to demonstrate.</p>

<h2>ECS Task Execution Role</h2>

<p>The ECS Execution Role is used by the ecs-agent which runs on ECS and is responsible for:
- Pulling down docker images from ECR
- Fetching the SSM Parameters from SSM for your Task (Secrets and LogConfigurations)
- Writing Logs to CloudWatch</p>

<p>The IAM Role has been configured that the Trusted Identity is ecs so only ECS is allowed to assume credentials from the IAM Policy that is associated to the Role.</p>

<p>The trusted identity in the IAM Role to be ecs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Principal&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Service&quot;</span><span class="p">:</span> <span class="s2">&quot;ecs-tasks.amazonaws.com&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="s2">&quot;sts:AssumeRole&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and the policy will look like this more or less for a example service, I am demonstrating my-dev-service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;ecr:GetAuthorizationToken&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;ecr:BatchCheckLayerAvailability&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;ecr:GetDownloadUrlForLayer&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;ecr:BatchGetImage&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;logs:CreateLogStream&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;logs:PutLogEvents&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;SSMGetParameters&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;ssm:GetParameter&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="s2">&quot;arn:aws:ssm:eu-west-1:*:parameter/my-service/dev/*&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;KMSDecryptParametersWithKey&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;kms:GetPublicKey&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;kms:Decrypt&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;kms:GenerateDataKey&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;kms:DescribeKey&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the ECS Task Definition the role arn is specified as <code>"executionRoleArn"</code> in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;family&quot;</span><span class="p">:</span> <span class="s2">&quot;my-dev-service&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;executionRoleArn&quot;</span><span class="p">:</span><span class="s2">&quot;arn:aws:iam::000000000000:role/ecs-exec-role&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;taskRoleArn&quot;</span><span class="p">:</span><span class="s2">&quot;arn:aws:iam::000000000000:role/ecs-task-role&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;containerDefinitions&quot;</span><span class="p">:</span> <span class="p">[]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ECS Task Role</h2>

<p>The ECS Task Role is used by the service that is deployed to ECS, so this will be your application requiring access to SQS as an example</p>

<p>Same as before, we set the trusted identity in the IAM Role to be ecs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Principal&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Service&quot;</span><span class="p">:</span> <span class="s2">&quot;ecs-tasks.amazonaws.com&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="s2">&quot;sts:AssumeRole&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So only the ECS tasks using the role is allowed to assume credentials from the IAM Role, and the policy associated to the role, can look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;AllowDevSQS&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;sqs:GetQueueUrl&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;sqs:ReceiveMessage&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;sqs:SendMessage&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;sqs:ChangeMessageVisibility&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;arn:aws:sqs:eu-west-1:000000000000:dev-pending-queue&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;arn:aws:sqs:eu-west-1:000000000000:dev-confirmed-queue&quot;</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The role arn will be specified in <code>"taskRoleArn"</code> from the following in the ECS Task Definition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;family&quot;</span><span class="p">:</span> <span class="s2">&quot;my-dev-service&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;executionRoleArn&quot;</span><span class="p">:</span><span class="s2">&quot;arn:aws:iam::000000000000:role/ecs-exec-role&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;taskRoleArn&quot;</span><span class="p">:</span><span class="s2">&quot;arn:aws:iam::000000000000:role/ecs-task-role&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;containerDefinitions&quot;</span><span class="p">:</span> <span class="p">[]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Application Code</h2>

<p>In your application you don’t need to reference any aws access keys as the role will assume credentials for you by the SDK, with python a short example will be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="n">sqs</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">region_name</span><span class="o">=</span><span class="s">&#39;eu-west-1&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s">&#39;sqs&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Thanks</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Java 11 and Maven on Ubuntu Linux]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/07/12/install-java-11-and-maven-on-ubuntu-linux/"/>
    <updated>2021-07-12T02:36:32-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/07/12/install-java-11-and-maven-on-ubuntu-linux</id>
    <content type="html"><![CDATA[<p>In this short tutorial I will show you how to prepare your environment for Java 11 and Maven on Ubuntu for Linux.</p>

<h2>Install</h2>

<p>Update your package manager and install OpenJDK 11:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt update
</span><span class='line'>sudo apt install openjdk-11-jdk -y
</span></code></pre></td></tr></table></div></figure>


<p>Verify that Java is installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>java -version
</span><span class='line'>openjdk version <span class="s2">&quot;11.0.11&quot;</span> 2021-04-20
</span><span class='line'>OpenJDK Runtime Environment <span class="o">(</span>build 11.0.11+9-Ubuntu-0ubuntu2.20.04<span class="o">)</span>
</span><span class='line'>OpenJDK 64-Bit Server VM <span class="o">(</span>build 11.0.11+9-Ubuntu-0ubuntu2.20.04, mixed mode, sharing<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once Java is installed, we can install Maven, first switch to the root user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo su
</span></code></pre></td></tr></table></div></figure>


<p>I will be using maven version <code>3.6.2</code>, so adjust accordingly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ MAVEN_HOME</span><span class="o">=</span><span class="s2">&quot;/opt/maven&quot;</span>
</span><span class='line'><span class="nv">$ MAVEN_VERSION</span><span class="o">=</span>3.6.3
</span><span class='line'><span class="nv">$ MAVEN_CONFIG_HOME</span><span class="o">=</span><span class="s2">&quot;/root/.m2&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the directories, then download maven and extract:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir -p <span class="nv">$MAVEN_HOME</span>
</span><span class='line'><span class="nv">$ </span>curl -LSso /var/tmp/apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz https://apache.org/dist/maven/maven-3/<span class="nv">$MAVEN_VERSION</span>/binaries/apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz
</span><span class='line'><span class="nv">$ </span>tar xzvf /var/tmp/apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz -C <span class="nv">$MAVEN_HOME</span> --strip-components<span class="o">=</span>1
</span><span class='line'><span class="nv">$ </span>rm /var/tmp/apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz
</span><span class='line'><span class="nv">$ </span>update-alternatives --install /usr/bin/mvn mvn /opt/maven/bin/mvn 10000
</span><span class='line'><span class="nv">$ </span>mkdir -p <span class="nv">$MAVEN_CONFIG_HOME</span>
</span></code></pre></td></tr></table></div></figure>


<p>Set the environment variables for maven:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /etc/profile.d/custom.sh
</span><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">export </span><span class="nv">MAVEN_HOME</span><span class="o">=</span><span class="s2">&quot;/opt/maven&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">MAVEN_VERSION</span><span class="o">=</span>3.6.3
</span><span class='line'><span class="nb">export </span><span class="nv">MAVEN_CONFIG_HOME</span><span class="o">=</span><span class="s2">&quot;/root/.m2&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then make the file executable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>chmod +x /etc/profile.d/custom.sh
</span></code></pre></td></tr></table></div></figure>


<p>Verify that maven is installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mvn -version
</span><span class='line'>Apache Maven 3.6.3 <span class="o">(</span>cecedd343002696d0abb50b32b541b8a6ba2883f<span class="o">)</span>
</span><span class='line'>Maven home: /opt/maven
</span><span class='line'>Java version: 11.0.11, vendor: Ubuntu, runtime: /usr/lib/jvm/java-11-openjdk-amd64
</span><span class='line'>Default locale: en, platform encoding: UTF-8
</span><span class='line'>OS name: <span class="s2">&quot;linux&quot;</span>, version: <span class="s2">&quot;5.4.0-1041-aws&quot;</span>, arch: <span class="s2">&quot;amd64&quot;</span>, family: <span class="s2">&quot;unix&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Crypto Digibyte Full Node on Linux]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/05/03/setup-a-crypto-digibyte-full-node-on-linux/"/>
    <updated>2021-05-03T17:14:49-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/05/03/setup-a-crypto-digibyte-full-node-on-linux</id>
    <content type="html"><![CDATA[<p><img src="https://upload.wikimedia.org/wikipedia/en/8/8f/DigiByte_logo.svg" alt="" /></p>

<p>In this tutorial I will show you how to setup a digibyte (DGB) Full Node on Linux and show you how to interact with your wallet and the blockchain.</p>

<h2>What is a Full Node</h2>

<p>By running a Full Node, you contribute by helping to fully validate transactions and blocks. Almost all full nodes also help the network by accepting transactions and blocks from other full nodes, validating those transactions and blocks and then relaying them to other full nodes. Therefore you are contributing to maintaining the consensus of the blockchain.</p>

<h2>Hardware Requirements</h2>

<p>In order to run a full digibyte node you will need a server that is preferrably online 24/7 and that you have an uncapped connection as at the time of writing the digibyte blockchain is about 25GB in size but increases over time. I also used a server with 2vCPU&rsquo;s and 4GB of memory.</p>

<h2>Setup the Pre-Requisites</h2>

<p>First create the user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>useradd -G sudo digibyte -m -s /bin/bash
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;digibyte ALL=(ALL:ALL) NOPASSWD: ALL&quot;</span> <span class="p">|</span> sudo tee /etc/sudoers.d/no-sudo-password-for-digibyte
</span></code></pre></td></tr></table></div></figure>


<p>Create the configuration directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir -p /etc/digibyte /var/lib/digibyte
</span></code></pre></td></tr></table></div></figure>


<p>Create the digibyte configuration file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat <span class="s">&lt;&lt;EOF &gt; /etc/digibyte/digibyte.conf</span>
</span><span class='line'><span class="s">daemon=1</span>
</span><span class='line'><span class="s">maxconnections=300</span>
</span><span class='line'><span class="s">disablewallet=0</span>
</span><span class='line'><span class="s">rpcuser=jsonrpc</span>
</span><span class='line'><span class="s">rpcpassword=$(openssl rand -base64 18)</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Download the Software</h2>

<p>Get the <a href="https://github.com/DigiByte-Core/digibyte/releases">latest</a> release, but at the time of writing v7.17.2 is the latest:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget https://github.com/DigiByte-Core/digibyte/releases/download/v7.17.2/digibyte-7.17.2-x86_64-linux-gnu.tar.gz
</span><span class='line'><span class="nv">$ </span>tar -xf digibyte-7.17.2-x86_64-linux-gnu.tar.gz
</span><span class='line'><span class="nv">$ </span>mv digibyte-7.17.2 /usr/local/digibyte-7.17.2
</span></code></pre></td></tr></table></div></figure>


<p>Then symbolic link the version directory to digibyte:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ln -s /usr/local/digibyte-7.17.2 /usr/local/digibyte
</span></code></pre></td></tr></table></div></figure>


<h2>SystemD</h2>

<p>Create the systemd unit file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat <span class="s">&lt;&lt;EOF &gt; /etc/systemd/system/digibyted.service</span>
</span><span class='line'><span class="s">[Unit]</span>
</span><span class='line'><span class="s">Description=DigiByte&#39;s distributed currency daemon</span>
</span><span class='line'><span class="s">After=network.target</span>
</span><span class='line'>
</span><span class='line'><span class="s">[Service]</span>
</span><span class='line'><span class="s">User=digibyte</span>
</span><span class='line'><span class="s">Group=digibyte</span>
</span><span class='line'>
</span><span class='line'><span class="s">Type=forking</span>
</span><span class='line'><span class="s">PIDFile=/etc/digibyte/digibyted.pid</span>
</span><span class='line'><span class="s">ExecStart=/usr/local/digibyte/bin/digibyted -daemon -pid=/etc/digibyte/digibyted.pid \</span>
</span><span class='line'><span class="s">  -conf=/etc/digibyte/digibyte.conf -datadir=/var/lib/digibyte -deprecatedrpc=accounts </span>
</span><span class='line'>
</span><span class='line'><span class="s">Restart=always</span>
</span><span class='line'><span class="s">PrivateTmp=true</span>
</span><span class='line'><span class="s">TimeoutStopSec=60s</span>
</span><span class='line'><span class="s">TimeoutStartSec=2s</span>
</span><span class='line'><span class="s">StartLimitInterval=120s</span>
</span><span class='line'><span class="s">StartLimitBurst=5</span>
</span><span class='line'>
</span><span class='line'><span class="s">[Install]</span>
</span><span class='line'><span class="s">WantedBy=multi-user.target</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>Change the ownerships to digibyte:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>chown -R digibyte:digibyte /etc/digibyte /var/lib/digibyte
</span></code></pre></td></tr></table></div></figure>


<p>Enable and start the service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>systemctl <span class="nb">enable </span>digibyted.service
</span><span class='line'><span class="nv">$ </span>systemctl start digibyted.service
</span></code></pre></td></tr></table></div></figure>


<p>Check the log:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tail -f /var/lib/digibyte/debug.log
</span></code></pre></td></tr></table></div></figure>


<h2>Interact with the Node</h2>

<p>Check the uptime:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST -H <span class="s1">&#39;Content-Type: application/json&#39;</span> -u <span class="s2">&quot;jsonrpc:$PASSWORD&quot;</span> http://localhost:14022 -d <span class="s1">&#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;: &quot;curl&quot;, &quot;method&quot;: &quot;uptime&quot;, &quot;params&quot;: []}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check the wallet address:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST -H <span class="s1">&#39;Content-Type: application/json&#39;</span> -u <span class="s2">&quot;jsonrpc:$PASSWORD&quot;</span> http://localhost:14022 -d <span class="s1">&#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;: &quot;curl&quot;, &quot;method&quot;: &quot;getaccountaddress&quot;, &quot;params&quot;: []}&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;result&quot;</span>:<span class="s2">&quot;D7ZznMe4NyEkXd6zA6MB3GYXiAURo64hNs&quot;</span>,<span class="s2">&quot;error&quot;</span>:null,<span class="s2">&quot;id&quot;</span>:<span class="s2">&quot;curl&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Get the account balance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST -H <span class="s1">&#39;Content-Type: application/json&#39;</span> -u <span class="s2">&quot;jsonrpc:$PASSWORD&quot;</span> http://localhost:14022 -d <span class="s1">&#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;: &quot;curl&quot;, &quot;method&quot;: &quot;getbalance&quot;, &quot;params&quot;: []}&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;result&quot;</span>:0.00000000,<span class="s2">&quot;error&quot;</span>:null,<span class="s2">&quot;id&quot;</span>:<span class="s2">&quot;curl&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the digibyte-cli:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>/usr/local/digibyte/bin/digibyte-cli -getinfo
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;version&quot;</span>: 7170200,
</span><span class='line'>  <span class="s2">&quot;protocolversion&quot;</span>: 70017,
</span><span class='line'>  <span class="s2">&quot;walletversion&quot;</span>: 169900,
</span><span class='line'>  <span class="s2">&quot;balance&quot;</span>: 0.00000000,
</span><span class='line'>  <span class="s2">&quot;blocks&quot;</span>: 183019,
</span><span class='line'>  <span class="s2">&quot;timeoffset&quot;</span>: 0,
</span><span class='line'>  <span class="s2">&quot;connections&quot;</span>: 8,
</span><span class='line'>  <span class="s2">&quot;proxy&quot;</span>: <span class="s2">&quot;&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;difficulty&quot;</span>: null,
</span><span class='line'>  <span class="s2">&quot;testnet&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>  <span class="s2">&quot;keypoololdest&quot;</span>: 1619558662,
</span><span class='line'>  <span class="s2">&quot;keypoolsize&quot;</span>: 1000,
</span><span class='line'>  <span class="s2">&quot;paytxfee&quot;</span>: 0.00000000,
</span><span class='line'>  <span class="s2">&quot;relayfee&quot;</span>: 0.00001000,
</span><span class='line'>  <span class="s2">&quot;warnings&quot;</span>: <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Making a Transaction to my Wallet</h2>

<p>Let&rsquo;s make a transaction to my wallet node from a crypto currency exchange where I have digibyte, so first to get the wallet address where we would like to deposit the crypto currency:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -XPOST -H <span class="s1">&#39;Content-Type: application/json&#39;</span> -u <span class="s2">&quot;jsonrpc:$PASSWORD&quot;</span> http://localhost:14022 -d <span class="s1">&#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;: &quot;curl&quot;, &quot;method&quot;: &quot;getaccountaddress&quot;, &quot;params&quot;: []}&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;result&quot;</span>:<span class="s2">&quot;D7ZznMe4NyEkXd6zA6MB3GYXiAURo64hNs&quot;</span>,<span class="s2">&quot;error&quot;</span>:null,<span class="s2">&quot;id&quot;</span>:<span class="s2">&quot;curl&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>From a exchange where you have DGB, withdraw to the address DN8RMAUz2yHGW1PuuLtiSkiTZARzMJ4L2A which is your wallet on the node (ensure you have enough to cover the transaction fee).</p>

<p>Once the transaction has enough confirmations, have a look at your wallet balance, and you will see the 5 DGB that I sent to my wallet can be seen:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -H <span class="s1">&#39;Content-Type: application/json&#39;</span> -u <span class="s2">&quot;jsonrpc:$PASSWORD&quot;</span> http://localhost:14022 -d <span class="s1">&#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;: &quot;curl&quot;, &quot;method&quot;: &quot;getbalance&quot;, &quot;params&quot;: [&quot;&quot;]}&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;result&quot;</span>:5.00000000,<span class="s2">&quot;error&quot;</span>:null,<span class="s2">&quot;id&quot;</span>:<span class="s2">&quot;curl&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve setup a software wallet on my pc, and from DGB I selected receive and copied my DGB software wallet address, now I would like to transfer my funds from my node wallet to my software wallet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -H <span class="s1">&#39;Content-Type: application/json&#39;</span> -u <span class="s2">&quot;jsonrpc:$PASSWORD&quot;</span> http://localhost:14022 -d <span class="s1">&#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curl&quot;, &quot;method&quot;: &quot;sendtoaddress&quot;, &quot;params&quot;: [&quot;DTqHG9KA3oQAywq18gpBknxHXHZviyYdvS&quot;, 5.0, &quot;donation&quot;, &quot;happy bday&quot;] }&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;result&quot;</span>:null,<span class="s2">&quot;error&quot;</span>:<span class="o">{</span><span class="s2">&quot;code&quot;</span>:-4,<span class="s2">&quot;message&quot;</span>:<span class="s2">&quot;Error: This transaction requires a transaction fee of at least 0.0004324&quot;</span><span class="o">}</span>,<span class="s2">&quot;id&quot;</span>:<span class="s2">&quot;curl&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see I don&rsquo;t have enough in my nodes wallet to make the transaction, therefore I need to keep the transaction cost in consideration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python3 -c <span class="s1">&#39;print(5.0-0.0004324)&#39;</span>
</span><span class='line'>4.9995676
</span></code></pre></td></tr></table></div></figure>


<p>So let&rsquo;s send <code>4.998</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -H <span class="s1">&#39;Content-Type: application/json&#39;</span> -u <span class="s2">&quot;jsonrpc:$PASSWORD&quot;</span> http://localhost:14022 -d <span class="s1">&#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curl&quot;, &quot;method&quot;: &quot;sendtoaddress&quot;, &quot;params&quot;: [&quot;DTqHG9KA3oQAywq18gpBknxHXHZviyYdvS&quot;, 4.998, &quot;donation&quot;, &quot;happy bday&quot;] }&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;result&quot;</span>:<span class="s2">&quot;260e49b72f17f42f5a6c858e5403e23b5382000650997292e7e79f1535f5c4d0&quot;</span>,<span class="s2">&quot;error&quot;</span>:null,<span class="s2">&quot;id&quot;</span>:<span class="s2">&quot;curl&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see we are getting back a transaction id which we can use later to check up on. A couple of seconds later I received a notification on my software wallet that my funds were received:</p>

<p><img src="https://user-images.githubusercontent.com/567298/116690769-2aae2880-a9ba-11eb-8735-3fd1f0cc9ece.png" alt="" /></p>

<p>First, using our software wallet&rsquo;s address we can look it up:
- <a href="https://digiexplorer.info/address/DTqHG9KA3oQAywq18gpBknxHXHZviyYdvS">https://digiexplorer.info/address/DTqHG9KA3oQAywq18gpBknxHXHZviyYdvS</a></p>

<p>And it should look like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/116691497-29313000-a9bb-11eb-962d-0427a560718a.png" alt="" /></p>

<p>We can also lookup the transaction id:
- <a href="https://digiexplorer.info/tx/260e49b72f17f42f5a6c858e5403e23b5382000650997292e7e79f1535f5c4d0">https://digiexplorer.info/tx/260e49b72f17f42f5a6c858e5403e23b5382000650997292e7e79f1535f5c4d0</a></p>

<p>And it should look like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/116691773-9ba21000-a9bb-11eb-978e-58be3a8be045.png" alt="" /></p>

<h2>Resources</h2>

<p>RPC Docs:
- <a href="https://developer.bitcoin.org/reference/rpc/index.html">https://developer.bitcoin.org/reference/rpc/index.html</a>
- <a href="https://chainquery.com/bitcoin-cli">https://chainquery.com/bitcoin-cli</a></p>

<p>Digibyte Config:
- <a href="https://github.com/digibyte/digibyte/blob/master/contrib/debian/examples/digibyte.conf">https://github.com/digibyte/digibyte/blob/master/contrib/debian/examples/digibyte.conf</a></p>

<p>REST Config:
- <a href="https://github.com/digibyte/digibyte/blob/master/doc/REST-interface.md">https://github.com/digibyte/digibyte/blob/master/doc/REST-interface.md</a></p>

<p>Resources:
- <a href="https://digibytewallets.com/">https://digibytewallets.com/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Concourse CI V6 on Ubuntu 20.04]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/04/06/install-concourse-ci-v6-on-ubuntu-20-dot-04/"/>
    <updated>2021-04-06T17:56:38-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/04/06/install-concourse-ci-v6-on-ubuntu-20-dot-04</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/gzkdu9.jpg?nocache=1511644783495" alt="" /></p>

<p>Concourse is a Pipeline Based Continious Integration system written in Go</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://concourse-ci.org/">https://concourse-ci.org/</a></li>
<li><a href="https://github.com/concourse/concourse">https://github.com/concourse/concourse</a></li>
<li><a href="https://github.com/starkandwayne/concourse-tutorial">https://github.com/starkandwayne/concourse-tutorial</a></li>
</ul>


<h2>Older Version</h2>

<p>An older version is available:</p>

<ul>
<li><a href="https://blog.ruanbekker.com/blog/2017/11/07/setup-a-concourse-ci-server-on-ubuntu-16/">Setup Concourse CI v4 on Ubuntu 16.04</a></li>
</ul>


<h2>What is Concourse CI:</h2>

<p>Concourse CI is a Continious Integration Platform. Concourse enables you to construct pipelines with a yaml configuration that can consist out of 3 core concepts, tasks, resources, and jobs that compose them. For more information about this have a look at their <a href="https://concourse.ci/concepts.html">docs</a></p>

<h2>What will we be doing today</h2>

<p>We will setup a Concourse CI Server v6.7.6 (web and worker) on Ubuntu 20.04 and run the traditional <code>Hello, World</code> pipeline</p>

<h2>Setup the Server:</h2>

<p>Concourse needs <code>PostgresSQL</code> server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt update <span class="o">&amp;&amp;</span> apt upgrade -y
</span><span class='line'><span class="nv">$ </span>apt install postgresql postgresql-contrib -y
</span><span class='line'><span class="nv">$ </span>systemctl <span class="nb">enable </span>postgresql
</span></code></pre></td></tr></table></div></figure>


<p>Create the Database and User for Concourse on Postgres:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo -u postgres createuser concourse
</span><span class='line'><span class="nv">$ </span>sudo -u postgres createdb --owner<span class="o">=</span>concourse atc
</span></code></pre></td></tr></table></div></figure>


<p>Download the Concourse and Fly Cli Binaries:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget https://github.com/concourse/concourse/releases/download/v6.7.6/concourse-6.7.6-linux-amd64.tgz
</span><span class='line'><span class="nv">$ </span>wget https://github.com/concourse/concourse/releases/download/v6.7.6/fly-6.7.6-linux-amd64.tgz
</span><span class='line'><span class="nv">$ </span>tar -xvf concourse-6.7.6-linux-amd64.tgz -C /usr/local/
</span><span class='line'><span class="nv">$ </span>tar -xvf fly-6.7.6-linux-amd64.tgz
</span><span class='line'><span class="nv">$ </span>mv fly /usr/bin/fly
</span><span class='line'><span class="nv">$ </span>rm -rf concourse-6.7.6-linux-amd64.tgz fly-6.7.6-linux-amd64.tgz
</span></code></pre></td></tr></table></div></figure>


<p>Create the Encryption Keys:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir /etc/concourse
</span><span class='line'><span class="nv">$ </span>ssh-keygen -t rsa -q -N <span class="s1">&#39;&#39;</span> -f /etc/concourse/tsa_host_key
</span><span class='line'><span class="nv">$ </span>ssh-keygen -t rsa -q -N <span class="s1">&#39;&#39;</span> -f /etc/concourse/worker_key
</span><span class='line'><span class="nv">$ </span>ssh-keygen -t rsa -q -N <span class="s1">&#39;&#39;</span> -f /etc/concourse/session_signing_key
</span><span class='line'><span class="nv">$ </span>cp /etc/concourse/worker_key.pub /etc/concourse/authorized_worker_keys
</span></code></pre></td></tr></table></div></figure>


<p>Concourse Web Process Configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /etc/concourse/web_environment
</span><span class='line'>
</span><span class='line'><span class="nv">PATH</span><span class="o">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/concourse/bin
</span><span class='line'><span class="nv">CONCOURSE_ADD_LOCAL_USER</span><span class="o">=</span>ruan:pass
</span><span class='line'><span class="nv">CONCOURSE_SESSION_SIGNING_KEY</span><span class="o">=</span>/etc/concourse/session_signing_key
</span><span class='line'><span class="nv">CONCOURSE_TSA_HOST_KEY</span><span class="o">=</span>/etc/concourse/tsa_host_key
</span><span class='line'><span class="nv">CONCOURSE_TSA_AUTHORIZED_KEYS</span><span class="o">=</span>/etc/concourse/authorized_worker_keys
</span><span class='line'><span class="nv">CONCOURSE_POSTGRES_HOST</span><span class="o">=</span>127.0.0.1
</span><span class='line'><span class="nv">CONCOURSE_POSTGRES_USER</span><span class="o">=</span>concourse
</span><span class='line'><span class="nv">CONCOURSE_POSTGRES_PASSWORD</span><span class="o">=</span>concourse
</span><span class='line'><span class="nv">CONCOURSE_POSTGRES_DATABASE</span><span class="o">=</span>atc
</span><span class='line'><span class="nv">CONCOURSE_MAIN_TEAM_LOCAL_USER</span><span class="o">=</span>ruan
</span><span class='line'><span class="nv">CONCOURSE_EXTERNAL_URL</span><span class="o">=</span>http://10.20.30.40:8080 <span class="c"># replace this with your ip address</span>
</span></code></pre></td></tr></table></div></figure>


<p>Concourse Worker Process Configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /etc/concourse/worker_environment
</span><span class='line'>
</span><span class='line'><span class="nv">PATH</span><span class="o">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/concourse/bin
</span><span class='line'><span class="nv">CONCOURSE_WORK_DIR</span><span class="o">=</span>/var/lib/concourse
</span><span class='line'><span class="nv">CONCOURSE_TSA_HOST</span><span class="o">=</span>127.0.0.1:2222
</span><span class='line'><span class="nv">CONCOURSE_TSA_PUBLIC_KEY</span><span class="o">=</span>/etc/concourse/tsa_host_key.pub
</span><span class='line'><span class="nv">CONCOURSE_TSA_WORKER_PRIVATE_KEY</span><span class="o">=</span>/etc/concourse/worker_key
</span><span class='line'><span class="nv">CONCOURSE_GARDEN_DNS_SERVER</span><span class="o">=</span>8.8.8.8
</span></code></pre></td></tr></table></div></figure>


<p>Create a Concourse user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir /var/lib/concourse
</span><span class='line'><span class="nv">$ </span>sudo adduser --system --group concourse
</span><span class='line'><span class="nv">$ </span>sudo chown -R concourse:concourse /etc/concourse /var/lib/concourse
</span><span class='line'><span class="nv">$ </span>sudo chmod <span class="m">600</span> /etc/concourse/*_environment
</span></code></pre></td></tr></table></div></figure>


<p>Create SystemD Unit Files, first for the Web Service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /etc/systemd/system/concourse-web.service
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Unit<span class="o">]</span>
</span><span class='line'><span class="nv">Description</span><span class="o">=</span>Concourse CI web process <span class="o">(</span>ATC and TSA<span class="o">)</span>
</span><span class='line'><span class="nv">After</span><span class="o">=</span>postgresql.service
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Service<span class="o">]</span>
</span><span class='line'><span class="nv">User</span><span class="o">=</span>concourse
</span><span class='line'><span class="nv">Restart</span><span class="o">=</span>on-failure
</span><span class='line'><span class="nv">EnvironmentFile</span><span class="o">=</span>/etc/concourse/web_environment
</span><span class='line'><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/concourse web
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Install<span class="o">]</span>
</span><span class='line'><span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</span></code></pre></td></tr></table></div></figure>


<p>Then the SystemD Unit File for the Worker Service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /etc/systemd/system/concourse-worker.service
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Unit<span class="o">]</span>
</span><span class='line'><span class="nv">Description</span><span class="o">=</span>Concourse CI worker process
</span><span class='line'><span class="nv">After</span><span class="o">=</span>concourse-web.service
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Service<span class="o">]</span>
</span><span class='line'><span class="nv">User</span><span class="o">=</span>root
</span><span class='line'><span class="nv">Restart</span><span class="o">=</span>on-failure
</span><span class='line'><span class="nv">EnvironmentFile</span><span class="o">=</span>/etc/concourse/worker_environment
</span><span class='line'><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/concourse worker
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Install<span class="o">]</span>
</span><span class='line'><span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</span></code></pre></td></tr></table></div></figure>


<p>Create a postgres password for the concourse user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /home/concourse/
</span><span class='line'><span class="nv">$ </span>sudo -u concourse psql atc
</span><span class='line'><span class="nv">atc</span><span class="o">=</span>&gt; ALTER USER concourse WITH PASSWORD <span class="s1">&#39;concourse&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">atc</span><span class="o">=</span>&gt; <span class="se">\q</span>
</span></code></pre></td></tr></table></div></figure>


<p>Start and Enable the Services:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>systemctl start concourse-web concourse-worker
</span><span class='line'><span class="nv">$ </span>systemctl <span class="nb">enable </span>concourse-web concourse-worker postgresql
</span><span class='line'><span class="nv">$ </span>systemctl status concourse-web concourse-worker
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>systemctl is-active concourse-worker concourse-web
</span><span class='line'>active
</span><span class='line'>active
</span></code></pre></td></tr></table></div></figure>


<p>The listening ports should more or less look like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>netstat -tulpn
</span><span class='line'>
</span><span class='line'>Active Internet connections <span class="o">(</span>only servers<span class="o">)</span>
</span><span class='line'>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.1:7777          0.0.0.0:*               LISTEN      4530/concourse
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.1:7788          0.0.0.0:*               LISTEN      4530/concourse
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.1:8079          0.0.0.0:*               LISTEN      4525/concourse
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:22              0.0.0.0:*               LISTEN      1283/sshd
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.1:5432          0.0.0.0:*               LISTEN      4047/postgres
</span><span class='line'>tcp6       <span class="m">0</span>      <span class="m">0</span> :::36159                :::*                    LISTEN      4525/concourse
</span><span class='line'>tcp6       <span class="m">0</span>      <span class="m">0</span> :::46829                :::*                    LISTEN      4525/concourse
</span><span class='line'>tcp6       <span class="m">0</span>      <span class="m">0</span> :::2222                 :::*                    LISTEN      4525/concourse
</span><span class='line'>tcp6       <span class="m">0</span>      <span class="m">0</span> :::8080                 :::*                    LISTEN      4525/concourse
</span><span class='line'>tcp6       <span class="m">0</span>      <span class="m">0</span> :::22                   :::*                    LISTEN      1283/sshd
</span><span class='line'>udp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:68              0.0.0.0:*                           918/dhclient
</span><span class='line'>udp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:42165           0.0.0.0:*                           4530/concourse
</span></code></pre></td></tr></table></div></figure>


<h2>Client Side:</h2>

<p>I will be using a the Fly cli from a Mac, so first we need to download the fly-cli for Mac:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget https://github.com/concourse/concourse/releases/download/v6.7.6/fly-6.7.6-darwin-amd64.tgz
</span><span class='line'><span class="nv">$ </span>tar -xvf fly-6.7.6-darwin-amd64.tgz
</span><span class='line'><span class="nv">$ </span>sudo mv fly /usr/local/bin/fly
</span><span class='line'><span class="nv">$ </span>rm -rf fly-6.7.6-darwin-amd64.tgz
</span></code></pre></td></tr></table></div></figure>


<p>Next, we need to setup our Concourse Target by Authenticating against our Concourse Endpoint, lets setup our target with the name <code>ci</code>, and make sure to replace the ip address with the ip of your concourse server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci login -c http://10.20.30.40:8080
</span><span class='line'>logging in to team <span class="s1">&#39;main&#39;</span>
</span><span class='line'>
</span><span class='line'>navigate to the following URL in your browser:
</span><span class='line'>
</span><span class='line'>  http://10.20.30.40:8080/login?fly_port<span class="o">=</span>42181
</span><span class='line'>
</span><span class='line'>or enter token manually <span class="o">(</span>input hidden<span class="o">)</span>:
</span><span class='line'>target saved
</span></code></pre></td></tr></table></div></figure>


<p>Lets list our targets:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly targets
</span><span class='line'>name  url                        team  expiry
</span><span class='line'>ci    http://10.20.30.40:8080    main  Wed, <span class="m">08</span> Nov <span class="m">2021</span> 15:32:59 UTC
</span></code></pre></td></tr></table></div></figure>


<p>Listing Registered Workers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci workers
</span><span class='line'>name              containers  platform  tags  team  state    version
</span><span class='line'>10.20.30.40       <span class="m">0</span>           linux     none  none  running  1.2
</span></code></pre></td></tr></table></div></figure>


<p>Listing Active Containers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci containers
</span><span class='line'>handle                                worker            pipeline     job            build <span class="c">#  build id  type   name                  attempt</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Hello World Pipeline:</h2>

<p>Let&rsquo;s create a basic pipeline, that will print out <code>Hello, World!</code>:</p>

<p>Our <code>hello-world.yml</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">jobs</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-job</span>
</span><span class='line'>  <span class="l-Scalar-Plain">plan</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">task</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">say-hello</span>
</span><span class='line'>    <span class="l-Scalar-Plain">config</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">platform</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linux</span>
</span><span class='line'>      <span class="l-Scalar-Plain">image_resource</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker-image</span>
</span><span class='line'>        <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">repository</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">alpine</span>
</span><span class='line'>          <span class="l-Scalar-Plain">tag</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">edge</span>
</span><span class='line'>      <span class="l-Scalar-Plain">run</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/bin/sh</span>
</span><span class='line'>        <span class="l-Scalar-Plain">args</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">-c</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="p-Indicator">|</span>
</span><span class='line'>          <span class="no">echo &quot;=============&quot;</span>
</span><span class='line'>          <span class="no">echo &quot;Hello, World!&quot;</span>
</span><span class='line'>          <span class="no">echo &quot;=============&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Applying the configuration to our pipeline:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci <span class="nb">set</span>-pipeline -p yeeehaa -c hello-world.yml
</span><span class='line'><span class="nb">jobs</span>:
</span><span class='line'>  job my-job has been added:
</span><span class='line'>    name: my-job
</span><span class='line'>    plan:
</span><span class='line'>    - task: say-hello
</span><span class='line'>      config:
</span><span class='line'>        platform: linux
</span><span class='line'>        image_resource:
</span><span class='line'>          <span class="nb">type</span>: docker-image
</span><span class='line'>          <span class="nb">source</span>:
</span><span class='line'>            repository: alpine
</span><span class='line'>            tag: edge
</span><span class='line'>        run:
</span><span class='line'>          path: /bin/sh
</span><span class='line'>          args:
</span><span class='line'>          - -c
</span><span class='line'>          - <span class="p">|</span>
</span><span class='line'>            <span class="nb">echo</span> <span class="s2">&quot;=============&quot;</span>
</span><span class='line'>            <span class="nb">echo</span> <span class="s2">&quot;Hello, World!&quot;</span>
</span><span class='line'>            <span class="nb">echo</span> <span class="s2">&quot;=============&quot;</span>
</span><span class='line'>
</span><span class='line'>apply configuration? <span class="o">[</span>yN<span class="o">]</span>: y
</span><span class='line'>pipeline created!
</span><span class='line'>you can view your pipeline here: http://10.20.30.40:8080/teams/main/pipelines/yeeehaa
</span><span class='line'>
</span><span class='line'>the pipeline is currently paused. to unpause, either:
</span><span class='line'>  - run the unpause-pipeline <span class="nb">command</span>
</span><span class='line'>  - click play next to the pipeline in the web ui
</span></code></pre></td></tr></table></div></figure>


<p>We can browse to the WebUI to unpause the pipeline, but since I like to do everything on cli as far as possible, I will unpause the pipeline via cli:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci unpause-pipeline -p yeeehaa
</span><span class='line'>unpaused <span class="s1">&#39;yeeehaa&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now our Pipeline is unpaused, but since we did not specify any triggers, we need to manually trigger the pipeline to run, you can either via the WebUI, select your pipeline which in this case will be named <code>yeeehaa</code> and then select the job, which will be <code>my-job</code> then hit the <code>+</code> sign, which will trigger the pipeline.</p>

<p>I will be using the cli:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci trigger-job --job yeeehaa/my-job
</span><span class='line'>started yeeehaa/my-job <span class="c">#1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Via the WebUI on <code>http://10.20.30.40:8080/teams/main/pipelines/yeeehaa/jobs/my-job/builds/1</code> you should see the <code>Hello, World!</code> output, or via the cli, we also have the option to see the output, so let&rsquo;s trigger it again, but this time passing the <code>--watch</code> flag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci trigger-job --job yeeehaa/my-job --watch
</span><span class='line'>started yeeehaa/my-job <span class="c">#2</span>
</span><span class='line'>
</span><span class='line'>initializing
</span><span class='line'>running /bin/sh -c <span class="nb">echo</span> <span class="s2">&quot;=============&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Hello, World!&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;=============&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">=============</span>
</span><span class='line'>Hello, World!
</span><span class='line'><span class="o">=============</span>
</span><span class='line'>succeeded
</span></code></pre></td></tr></table></div></figure>


<p>Listing our Workers and Containers again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>fly -t ci workers
</span><span class='line'>name              containers  platform  tags  team  state    version
</span><span class='line'>10.20.30.40       <span class="m">2</span>           linux     none  none  running  1.2
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>fly -t ci containers
</span><span class='line'>handle                                worker            pipeline     job         build <span class="c">#  build id  type   name           attempt</span>
</span><span class='line'>36982955-54fd-4c1b-57b8-216486c58db8  10.20.30.40       yeeehaa      my-job      <span class="m">2</span>        <span class="m">729</span>       task   say-hello      n/a
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wireguard VPN With Unbound ADS Blocking DNS]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/03/10/wireguard-vpn-with-unbound-ads-blocking-dns/"/>
    <updated>2021-03-10T00:59:51-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/03/10/wireguard-vpn-with-unbound-ads-blocking-dns</id>
    <content type="html"><![CDATA[<p>In this tutorial we will setup a Wireguard VPN with Unbound DNS Server with some additional configuration to block ads for any clients using the DNS Server while connected to the VPN.</p>

<p>A massive thank you to <a href="https://github.com/complexorganizations/wireguard-manager/blob/main/wireguard-server.sh">complexorganizations</a> for providing the source where this tuturial is based off.</p>

<h2>Install Packages</h2>

<p>I will be using Debian Buster for this installation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update
</span><span class='line'>$ apt upgrade -y
</span><span class='line'>$ apt update && apt install iptables curl coreutils bc jq sed e2fsprogs -y
</span><span class='line'>$ apt install linux-headers-"$(uname -r)" -y</span></code></pre></td></tr></table></div></figure>


<p>I want to disable IPv6, in my case I had to apply a couple of kernel parameter tweaks:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo net.ipv6.conf.all.disable_ipv6 = 1 &gt; /etc/sysctl.d/70-disable-ipv6.conf
</span><span class='line'>$ echo "net.ipv6.conf.$(ip -4 route ls | grep default | grep -Po '(?&lt;=dev )(\S+)' | head -1).disable_ipv6 = 1" &gt;&gt; /etc/sysctl.d/70-disable-ipv6.conf
</span><span class='line'>$ echo 'net.ipv4.ip_forward = 1' &gt; /etc/sysctl.d/60-enable-ip-forwarding.conf
</span><span class='line'>$ sysctl -p -f /etc/sysctl.d/70-disable-ipv6.conf
</span><span class='line'>$ sysctl -p -f /etc/sysctl.d/60-enable-ip-forwarding.conf</span></code></pre></td></tr></table></div></figure>


<h2>Environment Variables</h2>

<p>A couple of environment variables that we will reference during our installation, tweak where your setup differs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export NPROC=$(nproc)
</span><span class='line'>$ export SERVER_HOST=$(curl -s -4 ifconfig.co)
</span><span class='line'>$ export SERVER_PORT="51820"
</span><span class='line'>$ export MTU_CHOICE="1280"
</span><span class='line'>$ export NAT_CHOICE="25"
</span><span class='line'>$ export IPV4_SUBNET="10.7.0.0/24"
</span><span class='line'>$ export PRIVATE_SUBNET_V4=${IPV4_SUBNET}
</span><span class='line'>$ export GATEWAY_ADDRESS_V4="${PRIVATE_SUBNET_V4::-4}1"
</span><span class='line'>$ export PRIVATE_SUBNET_MASK_V4=$(echo "$PRIVATE_SUBNET_V4" | cut -d "/" -f 2)
</span><span class='line'>$ export CLIENT_DNS="$GATEWAY_ADDRESS_V4"
</span><span class='line'>$ export CLIENT_ALLOWED_IP="0.0.0.0/0"</span></code></pre></td></tr></table></div></figure>


<h2>Unbound Installation</h2>

<p>Download the unbound <code>root.hints</code> file from internic:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl https://www.internic.net/domain/named.cache --create-dirs -o /etc/unbound/root.hints</span></code></pre></td></tr></table></div></figure>


<p>Generate the <code>/etc/unbound/unbound.conf</code> config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo "include: \"/etc/unbound/unbound.conf.d/*.conf\"
</span><span class='line'>server:
</span><span class='line'>    num-threads: $NPROC
</span><span class='line'>    verbosity: 1
</span><span class='line'>    root-hints: /etc/unbound/root.hints
</span><span class='line'>    # auto-trust-anchor-file: /var/lib/unbound/root.key
</span><span class='line'>    interface: 0.0.0.0
</span><span class='line'>    interface: ::0
</span><span class='line'>    max-udp-size: 3072
</span><span class='line'>    access-control: 0.0.0.0/0                 refuse
</span><span class='line'>    access-control: $PRIVATE_SUBNET_V4               allow
</span><span class='line'>    access-control: 127.0.0.1                 allow
</span><span class='line'>    private-address: $PRIVATE_SUBNET_V4
</span><span class='line'>    hide-identity: yes
</span><span class='line'>    hide-version: yes
</span><span class='line'>    harden-glue: yes
</span><span class='line'>    harden-dnssec-stripped: yes
</span><span class='line'>    harden-referral-path: yes
</span><span class='line'>    unwanted-reply-threshold: 10000000
</span><span class='line'>    val-log-level: 1
</span><span class='line'>    cache-min-ttl: 1800
</span><span class='line'>    cache-max-ttl: 14400
</span><span class='line'>    prefetch: yes
</span><span class='line'>    qname-minimisation: yes
</span><span class='line'>    prefetch-key: yes
</span><span class='line'>    forward-zone:
</span><span class='line'>        name: \".\"
</span><span class='line'>        forward-addr: 1.1.1.1
</span><span class='line'>        forward-addr: 8.8.8.8" &gt;&gt; /etc/unbound/unbound.conf</span></code></pre></td></tr></table></div></figure>


<p>Download the host entries for all the ad servers which we will block:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/social/hosts -o /tmp/adblocking_hosts</span></code></pre></td></tr></table></div></figure>


<p>Include the ads configuration in <code>/etc/unbound/unbound.d/ads.conf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo "server:" &gt; /etc/unbound/unbound.conf.d/ads.conf
</span><span class='line'>$ cat /etc/unbound/adblocking_hosts | grep '^0\.0\.0\.0' | awk '{print "    local-zone: \""$2"\" redirect\n    local-data: \""$2" A 0.0.0.0\""}' &gt;&gt; /etc/unbound/unbound.conf.d/ads.conf</span></code></pre></td></tr></table></div></figure>


<p>Update the VPN Server&rsquo;s nameserver configuration to unbound:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chattr -i /etc/resolv.conf
</span><span class='line'>$ mv /etc/resolv.conf /etc/resolv.conf.old
</span><span class='line'>$ echo "nameserver 127.0.0.1" &gt;&gt;/etc/resolv.conf
</span><span class='line'>$ chattr +i /etc/resolv.conf</span></code></pre></td></tr></table></div></figure>


<p>Enable and Restart Unbound:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl enable unbound
</span><span class='line'>$ systemctl restart unbound</span></code></pre></td></tr></table></div></figure>


<p>Test if DNS Resolution works:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ dig google.com</span></code></pre></td></tr></table></div></figure>


<h2>Wireguard Installation</h2>

<p>Include the sources and install wireguard and its dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo "deb http://deb.debian.org/debian/ unstable main" &gt;&gt;/etc/apt/sources.list.d/unstable.list
</span><span class='line'>$ echo -e "Package: *\nPin: release a=unstable\nPin-Priority: 90"  &gt;&gt;/etc/apt/preferences.d/limit-unstable
</span><span class='line'>$ apt update
</span><span class='line'>$ apt install wireguard qrencode haveged ifupdown -y</span></code></pre></td></tr></table></div></figure>


<p>Set the environment variables and tweak where you need to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export SERVER_PRIVKEY=$(wg genkey)
</span><span class='line'>$ export SERVER_PUBKEY=$(echo "$SERVER_PRIVKEY" | wg pubkey)
</span><span class='line'>$ export CLIENT_NAME="ruan-pc"
</span><span class='line'>$ export CLIENT_PRIVKEY=$(wg genkey)
</span><span class='line'>$ export CLIENT_PUBKEY=$(echo "$CLIENT_PRIVKEY" | wg pubkey)
</span><span class='line'>$ export CLIENT_ADDRESS_V4="${PRIVATE_SUBNET_V4::-4}3"
</span><span class='line'>$ export PRESHARED_KEY=$(wg genpsk)
</span><span class='line'>$ export WIREGUARD_PUB_NIC="wg0"
</span><span class='line'>$ export PEER_PORT=$(shuf -i1024-65535 -n1)
</span><span class='line'>$ export WG_CONFIG="/etc/wireguard/$WIREGUARD_PUB_NIC.conf"</span></code></pre></td></tr></table></div></figure>


<p>Create the wireguard clients directory and create the config filename:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p /etc/wireguard/clients
</span><span class='line'>$ touch $WG_CONFIG && chmod 600 $WG_CONFIG</span></code></pre></td></tr></table></div></figure>


<p>Create the wireguard server config content and write it to the config file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo "# $PRIVATE_SUBNET_V4 $SERVER_HOST:$SERVER_PORT $SERVER_PUBKEY $CLIENT_DNS $MTU_CHOICE $NAT_CHOICE $CLIENT_ALLOWED_IP
</span><span class='line'>[Interface]
</span><span class='line'>Address = $GATEWAY_ADDRESS_V4/$PRIVATE_SUBNET_MASK_V4
</span><span class='line'>ListenPort = $SERVER_PORT
</span><span class='line'>PrivateKey = $SERVER_PRIVKEY
</span><span class='line'>PostUp = iptables -A FORWARD -i $WIREGUARD_PUB_NIC -o $SERVER_PUB_NIC -j ACCEPT; iptables -t nat -A POSTROUTING -o $SERVER_PUB_NIC -j MASQUERADE; iptables -A INPUT -s $PRIVATE_SUBNET_V4 -p udp -m udp --dport 53 -m conntrack --ctstate NEW -j ACCEPT
</span><span class='line'>PostDown = iptables -D FORWARD -i $WIREGUARD_PUB_NIC  -o $SERVER_PUB_NIC -j ACCEPT; iptables -t nat -D POSTROUTING -o $SERVER_PUB_NIC -j MASQUERADE; iptables -D INPUT -s $PRIVATE_SUBNET_V4 -p udp -m udp --dport 53 -m conntrack --ctstate NEW -j ACCEPT
</span><span class='line'>SaveConfig = false
</span><span class='line'># $CLIENT_NAME start
</span><span class='line'>[Peer]
</span><span class='line'>PublicKey = $CLIENT_PUBKEY
</span><span class='line'>PresharedKey = $PRESHARED_KEY
</span><span class='line'>AllowedIPs = $CLIENT_ADDRESS_V4/32
</span><span class='line'># $CLIENT_NAME end &gt;&gt;" &gt;&gt; $WG_CONFIG</span></code></pre></td></tr></table></div></figure>


<p>Create the client config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo "# $CLIENT_NAME
</span><span class='line'>[Interface]
</span><span class='line'>Address = $CLIENT_ADDRESS_V4/$PRIVATE_SUBNET_MASK_V4
</span><span class='line'>DNS = $CLIENT_DNS
</span><span class='line'>ListenPort = $PEER_PORT
</span><span class='line'>MTU = $MTU_CHOICE
</span><span class='line'>PrivateKey = $CLIENT_PRIVKEY
</span><span class='line'>[Peer]
</span><span class='line'>AllowedIPs = $CLIENT_ALLOWED_IP
</span><span class='line'>Endpoint = $SERVER_HOST:$SERVER_PORT
</span><span class='line'>PersistentKeepalive = $NAT_CHOICE
</span><span class='line'>PresharedKey = $PRESHARED_KEY
</span><span class='line'>PublicKey = $SERVER_PUBKEY" &gt;&gt; /etc/wireguard/clients/"$CLIENT_NAME"-$WIREGUARD_PUB_NIC.conf</span></code></pre></td></tr></table></div></figure>


<p>Restart and Enable Wireguard:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl enable wg-quick@$WIREGUARD_PUB_NIC
</span><span class='line'>$ systemctl restart wg-quick@$WIREGUARD_PUB_NIC</span></code></pre></td></tr></table></div></figure>


<h2>Connect your Client</h2>

<p>Head over to <a href="https://www.wireguard.com/install/">Wireguard.com</a> and install the client of your choice then generate a QR Code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ qrencode -t ansiutf8 -l L &lt;/etc/wireguard/clients/"$CLIENT_NAME"-$WIREGUARD_PUB_NIC.conf</span></code></pre></td></tr></table></div></figure>


<p>Configure your client and connect to the VPN, after the connection has been established you can have a look on the server for connection details with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wg show</span></code></pre></td></tr></table></div></figure>


<p>Once connected head over to a website with ads, such as <a href="https://www.speedtest.net/">https://www.speedtest.net/</a> and you should see no ads.</p>

<h2>Thanks</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH Using AWS SSM Session Manager]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/03/10/ssh-using-aws-ssm-session-manager/"/>
    <updated>2021-03-10T00:52:54-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/03/10/ssh-using-aws-ssm-session-manager</id>
    <content type="html"><![CDATA[<p>You can use SSM Session Manager to connect to your EC2 instances, as long as your EC2 instance has the associated IAM Role which includes the AmazonSSMManagedInstanceCore managed policy.</p>

<h2>AWS EC2 Console</h2>

<p>Head over to &ldquo;Connect&rdquo; and select &ldquo;Session Manager&rdquo;:</p>

<p><img src="https://user-images.githubusercontent.com/567298/103775580-e8da2a80-5036-11eb-9e00-0fd9b4d9d467.png" alt="image" /></p>

<p>You should get a shell:</p>

<p><img src="https://user-images.githubusercontent.com/567298/103775597-f2639280-5036-11eb-8101-768f1c81108a.png" alt="image" /></p>

<h2>AWS CLI</h2>

<p>You can also use the CLI:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aws --profile prod ssm start-session --target i-0ebba722b102179b6</span></code></pre></td></tr></table></div></figure>


<p>If you get this error:</p>

<p><img src="https://user-images.githubusercontent.com/567298/103775625-ff808180-5036-11eb-88dc-be8fde3586ad.png" alt="image" /></p>

<p>Head over to:</p>

<p><a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html">https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html</a></p>

<p>Install the session manager plugin, for Mac:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/mac/sessionmanager-bundle.zip" -o "sessionmanager-bundle.zip"
</span><span class='line'>$ unzip sessionmanager-bundle.zip
</span><span class='line'>$ sudo ./sessionmanager-bundle/install -i /usr/local/sessionmanagerplugin -b /usr/local/bin/session-manager-plugin
</span><span class='line'>$ rm -rf sessionmanager-bundle</span></code></pre></td></tr></table></div></figure>


<p>After installation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws --profile prod ssm start-session --target i-0ebba722b102179b6
</span><span class='line'>Starting session with SessionId: ruan.bekker-0b07cbbe261885ad3
</span><span class='line'>
</span><span class='line'>sh-4.2$ sudo su - ec2-user
</span><span class='line'>Last login: Wed Jan  6 12:55:03 UTC 2021 on pts/0
</span><span class='line'>[ec2-user@ip-172-31-23-246 ~]$</span></code></pre></td></tr></table></div></figure>


<p>Note: when you are using ssm session manager you don’t require security groups or a direct routable network to your instance.</p>

<h2>Bash Functions FTW</h2>

<p>You can implement this into a bash function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat ~/.functions.aws
</span><span class='line'>aws-ssh(){
</span><span class='line'>  instance_name=${1}
</span><span class='line'>  instance_id=$(aws --profile prod ec2 describe-instances --filter "Name=tag:Name,Values=${instance_name}" --query "Reservations[].Instances[?State.Name == 'running'].InstanceId[]" --output text)
</span><span class='line'>  aws --profile prod ssm start-session --target ${instance_id}
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>$ aws-ssh ssm-session-manager-ssh-test2
</span><span class='line'>Starting session with SessionId: ruan.bekker-04daf56c5f3668790
</span><span class='line'>sh-4.2$</span></code></pre></td></tr></table></div></figure>


<p>If you have your own SSH key, you can use this ~/.ssh/config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># AWS SSM Session Manager
</span><span class='line'>Host i-*
</span><span class='line'>    ProxyCommand sh -c "aws --profile prod ssm start-session --target %h --document-name AWS-StartSSHSession --parameters 'portNumber=%p'"</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -i ~/.ssh/infra.pem ec2-user@i-0ebba722b102179b6
</span><span class='line'>Warning: Permanently added 'i-0ebba722b102179b6' (ECDSA) to the list of known hosts.
</span><span class='line'>Last login: Wed Jan  6 13:04:03 2021
</span><span class='line'>
</span><span class='line'>       __|  __|_  )
</span><span class='line'>       _|  (     /   Amazon Linux 2 AMI
</span><span class='line'>      ___|\___|___|
</span><span class='line'>
</span><span class='line'>https://aws.amazon.com/amazon-linux-2/
</span><span class='line'>[ec2-user@ip-172-31-23-246 ~]$</span></code></pre></td></tr></table></div></figure>


<h2>Related:</h2>

<ul>
<li><a href="https://aws.amazon.com/blogs/mt/amazon-ec2-instance-port-forwarding-with-aws-systems-manager/">https://aws.amazon.com/blogs/mt/amazon-ec2-instance-port-forwarding-with-aws-systems-manager/</a></li>
<li><a href="https://aws.amazon.com/blogs/aws/new-port-forwarding-using-aws-system-manager-sessions-manager/">https://aws.amazon.com/blogs/aws/new-port-forwarding-using-aws-system-manager-sessions-manager/</a></li>
</ul>


<h2>Thanks</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bypass the Medium Paywall System]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/03/10/bypass-the-medium-paywall-system/"/>
    <updated>2021-03-10T00:45:54-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/03/10/bypass-the-medium-paywall-system</id>
    <content type="html"><![CDATA[<p>Do you like reading stories on medium.com but not a big fan of the paywall system?</p>

<p><img src="https://user-images.githubusercontent.com/567298/108808924-6ab6f080-75b0-11eb-961f-25327551725f.png" alt="image" /></p>

<p>Copy the link, DM yourself on twitter and paste the link:</p>

<p><img src="https://user-images.githubusercontent.com/567298/108809014-9e921600-75b0-11eb-8c01-18da23d43793.png" alt="image" /></p>

<p>Click on the pasted link, and enjoy:</p>

<p><img src="https://user-images.githubusercontent.com/567298/108809056-b2d61300-75b0-11eb-8eeb-38f99118bb17.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generate Grafana Loki Log Links From Metric Label Values]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/03/10/generate-grafana-loki-log-links-from-metric-label-values/"/>
    <updated>2021-03-10T00:34:04-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/03/10/generate-grafana-loki-log-links-from-metric-label-values</id>
    <content type="html"><![CDATA[<p>In this tutorial we will generate Loki Log links from selected dropdown template variables in a Grafana Dashboard.</p>

<h2>Context</h2>

<p>To give more context, we have a Grafana Dashboard with all our services, and when you select that service you see all the metrics of that service, now if you want to see the logs of that service, the selected label values will be parsed to a log link which you can click and it will take you to the Loki Explorer and parse the label values to the log link, so your logql will already be generated for you.</p>

<p>In order to achieve this, our metrics and logs need to share the same labels and label values (environment, container_name) etc.</p>

<h2>Dashboard Variables</h2>

<p>First we have our environment variable:</p>

<p><img src="https://user-images.githubusercontent.com/567298/109668240-a6862300-7b79-11eb-85ce-d381edfbe78e.png" alt="image" /></p>

<p>And here we have our service variable:</p>

<p><img src="https://user-images.githubusercontent.com/567298/109668438-dc2b0c00-7b79-11eb-9b17-629e9b1716a9.png" alt="image" /></p>

<p>Then for our container_name we have:</p>

<p><img src="https://user-images.githubusercontent.com/567298/109668632-05e43300-7b7a-11eb-97a0-8ff81f0c929c.png" alt="image" /></p>

<p>Notice the <code>/^(.*?)-[0-9]/</code> thats just to strip the end, if we remove it it will be:</p>

<p><img src="https://user-images.githubusercontent.com/567298/109668778-27451f00-7b7a-11eb-976f-a7d0b473cd1b.png" alt="image" /></p>

<h2>Grafana Dashboard</h2>

<p>Now when we select the environment, service, we get presented with a Loki LogURL:</p>

<p><img src="https://user-images.githubusercontent.com/567298/109668970-552a6380-7b7a-11eb-8c72-b284cf0f5eec.png" alt="image" /></p>

<p>If we look at our dashboard links, under the dashboard settings:</p>

<p><img src="https://user-images.githubusercontent.com/567298/109669065-6b382400-7b7a-11eb-8a29-34b492fef327.png" alt="image" /></p>

<p>The Logs Uri is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://grafana.mydomain.com/explore?orgId=1&left=%5B%22now-1h%22,%22now%22,%22Loki%22,%7B%22expr%22:%22%7Bcontainer_name%3D~%5C%22.*$container_name.*%5C%22%7D%22%7D,%7B%22mode%22:%22Logs%22%7D,%7B%22ui%22:%5Btrue,true,true,%22none%22%5D%7D%5D</span></code></pre></td></tr></table></div></figure>


<p>Now when we select our label values from the dropdown for our service and we follow the link we will get:</p>

<p><img src="https://user-images.githubusercontent.com/567298/109669297-a33f6700-7b7a-11eb-8205-f021467af751.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualize Weather Data With Grafana and the DHT22 Sensor]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/03/10/visualize-weather-data-with-grafana-and-the-dht22-sensor/"/>
    <updated>2021-03-10T00:06:31-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/03/10/visualize-weather-data-with-grafana-and-the-dht22-sensor</id>
    <content type="html"><![CDATA[<p>In this tutorial, we will connect the <a href="https://learn.adafruit.com/dht">DHT22</a> sensor to the Raspberry Pi Zero via the GPIO pins to measure temperature and humidity and visualize it with Grafana.</p>

<p><em>Note</em>: This post was originally posted on my <a href="https://blog.pistack.co.za/monitor-temperature-with-the-dht22-sensor-on-the-raspberry-pi/">RaspberryPi Blog</a></p>

<p>Then we will write a Python exporter for prometheus to expose our metrics so that we can visualize it in Grafana.</p>

<h2>The Endgoal</h2>

<p><img src="https://user-images.githubusercontent.com/30043398/104296987-fd9d3f00-54ca-11eb-8623-f3fd4a63e3cc.png" alt="image" /></p>

<h2>The Hardware</h2>

<p>This is how the sensor looks like (I got it from <a href="https://www.communica.co.za/products/bmt-temp-humd-snsr-dht22-on-pcb">Communica</a>)</p>

<p><img src="https://user-images.githubusercontent.com/567298/103872941-ba605c00-50d7-11eb-9f60-531995a185e6.png" alt="image" /></p>

<h2>Connecting the Sensor</h2>

<p>You can use the following graphic to connect your sensor to your raspberry pi:</p>

<p><img src="https://user-images.githubusercontent.com/567298/103873892-27c0bc80-50d9-11eb-9c41-3f3b2ff5aee2.png" alt="image" /></p>

<h2>Installing Software</h2>

<p>To install the required software, we will be using pip:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip3 install Adafruit_DHT --user</span></code></pre></td></tr></table></div></figure>


<p>Once we installed the software we can configure it</p>

<h2>Interact with the Sensor</h2>

<p>Enter your python interpreter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python3
</span><span class='line'>&gt;&gt;&gt;</span></code></pre></td></tr></table></div></figure>


<p>Then import the library, and get the current temperature and humidity:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; import Adafruit_DHT as dht
</span><span class='line'>&gt;&gt;&gt; humidity, temperature = dht.read_retry(dht.DHT22, 4)
</span><span class='line'>&gt;&gt;&gt; humidity = format(humidity, ".2f") + "%"
</span><span class='line'>&gt;&gt;&gt; humidity
</span><span class='line'>'47.20%'
</span><span class='line'>&gt;&gt;&gt; temperature = format(temperature, ".2f") + "C"
</span><span class='line'>&gt;&gt;&gt; temperature
</span><span class='line'>'29.10C'</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s create a python script for it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat temps.py
</span><span class='line'>#!/usr/bin/env python3
</span><span class='line'>
</span><span class='line'>import Adafruit_DHT as dht_sensor
</span><span class='line'>import time
</span><span class='line'>
</span><span class='line'>def get_temperature_readings():
</span><span class='line'>    humidity, temperature = dht_sensor.read_retry(dht_sensor.DHT22, 4)
</span><span class='line'>    humidity = format(humidity, ".2f") + "%"
</span><span class='line'>    temperature = format(temperature, ".2f") + "C"
</span><span class='line'>    return {"temperature": temperature, "humidity": humidity}
</span><span class='line'>
</span><span class='line'>while True:
</span><span class='line'>    print(get_temperature_readings())
</span><span class='line'>    time.sleep(30)</span></code></pre></td></tr></table></div></figure>


<p>And run it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python3 temps.py
</span><span class='line'>{'temperature': '28.00C', 'humidity': '47.40%'}
</span><span class='line'>{'temperature': '28.00C', 'humidity': '47.30%'}
</span><span class='line'>{'temperature': '28.00C', 'humidity': '47.70%'}
</span><span class='line'>{'temperature': '28.00C', 'humidity': '47.40%'}
</span><span class='line'>{'temperature': '28.00C', 'humidity': '47.60%'}</span></code></pre></td></tr></table></div></figure>


<h2>Visualize with Grafana</h2>

<p>Let&rsquo;s visualize our data with Grafana. For this, we need to write an exporter so that Prometheus can scrape the data.</p>

<p>Let&rsquo;s create a python flask application with the prometheus client library for python to expose the metrics to prometheus with a <code>/metrics</code> endpoint.</p>

<p>Note: I have used <a href="https://openweathermap.org/api">OpenWeatherMap</a>&rsquo;s API to get the outside temperature for my location.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat flask_temps.py
</span><span class='line'>#!/usr/bin/env python3
</span><span class='line'>
</span><span class='line'>import Adafruit_DHT as dht_sensor
</span><span class='line'>import time
</span><span class='line'>from flask import Flask, Response
</span><span class='line'>from prometheus_client import Counter, Gauge, start_http_server, generate_latest
</span><span class='line'>import requests
</span><span class='line'>
</span><span class='line'>params = {"lat": "-xx.xxxxx", "lon": "xx.xxxx", "units": "metric", "appid": "your-api-key"}
</span><span class='line'>baseurl = "https://api.openweathermap.org/data/2.5/weather"
</span><span class='line'>content_type = str('text/plain; version=0.0.4; charset=utf-8')
</span><span class='line'>
</span><span class='line'>def get_temperature_readings():
</span><span class='line'>    humidity, temperature = dht_sensor.read_retry(dht_sensor.DHT22, 4)
</span><span class='line'>    humidity = format(humidity, ".2f")
</span><span class='line'>    temperature = format(temperature, ".2f")
</span><span class='line'>    outside_temp = get_outside_weather()
</span><span class='line'>    if all(v is not None for v in [humidity, temperature, outside_temp]):
</span><span class='line'>        response = {"temperature": temperature, "humidity": humidity, "outside_temp": outside_temp}
</span><span class='line'>        return response
</span><span class='line'>    else:
</span><span class='line'>        time.sleep(0.2)
</span><span class='line'>        humidity, temperature = dht_sensor.read_retry(dht_sensor.DHT22, 4)
</span><span class='line'>        humidity = format(humidity, ".2f")
</span><span class='line'>        temperature = format(temperature, ".2f")
</span><span class='line'>        outside_temp = get_outside_weather()
</span><span class='line'>        response = {"temperature": temperature, "humidity": humidity, "outside_temp": outside_temp}
</span><span class='line'>        return response
</span><span class='line'>
</span><span class='line'>def get_outside_weather():
</span><span class='line'>    response = requests.get(baseurl, params=params)
</span><span class='line'>    temp = response.json()['main']['temp']
</span><span class='line'>    return temp
</span><span class='line'>
</span><span class='line'>app = Flask(__name__)
</span><span class='line'>
</span><span class='line'>current_humidity = Gauge(
</span><span class='line'>        'current_humidity',
</span><span class='line'>        'the current humidity percentage, this is a gauge as the value can increase or decrease',
</span><span class='line'>        ['room']
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>current_temperature = Gauge(
</span><span class='line'>        'current_temperature',
</span><span class='line'>        'the current temperature in celsius, this is a gauge as the value can increase or decrease',
</span><span class='line'>        ['room']
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>current_temperature_outside = Gauge(
</span><span class='line'>        'current_temperature_outside',
</span><span class='line'>        'the current outside temperature in celsius, this is a gauge as the value can increase or decrease',
</span><span class='line'>        ['location']
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>@app.route('/metrics')
</span><span class='line'>def metrics():
</span><span class='line'>    metrics = get_temperature_readings()
</span><span class='line'>    current_humidity.labels('study').set(metrics['humidity'])
</span><span class='line'>    current_temperature.labels('study').set(metrics['temperature'])
</span><span class='line'>    current_temperature_outside.labels('za_ct').set(metrics['outside_temp'])
</span><span class='line'>    return Response(generate_latest(), mimetype=content_type)
</span><span class='line'>
</span><span class='line'>if __name__ == '__main__':
</span><span class='line'>    app.run(host='0.0.0.0', port=5000)</span></code></pre></td></tr></table></div></figure>


<p>Then install the flask and prometheus_client package:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python3 -m pip install flask prometheus_client --user</span></code></pre></td></tr></table></div></figure>


<p>When you run the program, you should be able to retrieve metrics from the exporter by making a request on port 5000 on the <code>/metrics</code> request path:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5000/metrics
</span><span class='line'># HELP python_gc_objects_collected_total Objects collected during gc
</span><span class='line'># TYPE python_gc_objects_collected_total counter
</span><span class='line'>python_gc_objects_collected_total{generation="0"} 646.0
</span><span class='line'>python_gc_objects_collected_total{generation="1"} 129.0
</span><span class='line'>python_gc_objects_collected_total{generation="2"} 0.0
</span><span class='line'># HELP python_gc_objects_uncollectable_total Uncollectable object found during GC
</span><span class='line'># TYPE python_gc_objects_uncollectable_total counter
</span><span class='line'>python_gc_objects_uncollectable_total{generation="0"} 0.0
</span><span class='line'>python_gc_objects_uncollectable_total{generation="1"} 0.0
</span><span class='line'>python_gc_objects_uncollectable_total{generation="2"} 0.0
</span><span class='line'># HELP python_gc_collections_total Number of times this generation was collected
</span><span class='line'># TYPE python_gc_collections_total counter
</span><span class='line'>python_gc_collections_total{generation="0"} 104.0
</span><span class='line'>python_gc_collections_total{generation="1"} 9.0
</span><span class='line'>python_gc_collections_total{generation="2"} 0.0
</span><span class='line'># HELP python_info Python platform information
</span><span class='line'># TYPE python_info gauge
</span><span class='line'>python_info{implementation="CPython",major="3",minor="7",patchlevel="3",version="3.7.3"} 1.0
</span><span class='line'># HELP process_virtual_memory_bytes Virtual memory size in bytes.
</span><span class='line'># TYPE process_virtual_memory_bytes gauge
</span><span class='line'>process_virtual_memory_bytes 4.4761088e+07
</span><span class='line'># HELP process_resident_memory_bytes Resident memory size in bytes.
</span><span class='line'># TYPE process_resident_memory_bytes gauge
</span><span class='line'>process_resident_memory_bytes 2.7267072e+07
</span><span class='line'># HELP process_start_time_seconds Start time of the process since unix epoch in seconds.
</span><span class='line'># TYPE process_start_time_seconds gauge
</span><span class='line'>process_start_time_seconds 1.61044381853e+09
</span><span class='line'># HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.
</span><span class='line'># TYPE process_cpu_seconds_total counter
</span><span class='line'>process_cpu_seconds_total 5.86
</span><span class='line'># HELP process_open_fds Number of open file descriptors.
</span><span class='line'># TYPE process_open_fds gauge
</span><span class='line'>process_open_fds 6.0
</span><span class='line'># HELP process_max_fds Maximum number of open file descriptors.
</span><span class='line'># TYPE process_max_fds gauge
</span><span class='line'>process_max_fds 1024.0
</span><span class='line'># HELP current_humidity the current humidity percentage, this is a gauge as the value can increase or decrease
</span><span class='line'># TYPE current_humidity gauge
</span><span class='line'>current_humidity{room="study"} 47.0
</span><span class='line'># HELP current_temperature the current temperature in celsius, this is a gauge as the value can increase or decrease
</span><span class='line'># TYPE current_temperature gauge
</span><span class='line'>current_temperature{room="study"} 25.7
</span><span class='line'># HELP current_temperature_outside the current outside temperature in celsius, this is a gauge as the value can increase or decrease
</span><span class='line'># TYPE current_temperature_outside gauge
</span><span class='line'>current_temperature_outside{location="za_ct"} 27.97</span></code></pre></td></tr></table></div></figure>


<p>Now to configure our prometheus scrape config to scrape our endpoint:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/prometheus/prometheus.yml
</span><span class='line'>...
</span><span class='line'>scrape_configs:
</span><span class='line'>  - job_name: 'temperature-exporter'
</span><span class='line'>    scrape_interval: 15s
</span><span class='line'>    static_configs:
</span><span class='line'>    - targets: ['192.168.0.5:5000']
</span><span class='line'>      labels:
</span><span class='line'>        instance: 'pi-zero'
</span><span class='line'>        room: 'study'</span></code></pre></td></tr></table></div></figure>


<p>Then restart prometheus and head over to Grafana.</p>

<p>We will be adding a new panel with a graph visualization, and from our prometheus datasource, we will be referencing the 2 metrics (different from the screenshot):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>current_humidity{room="study"} 47.0
</span><span class='line'>current_temperature{room="study"} 25.7
</span><span class='line'>current_temperature_outside{location="za_ct"} 27.97</span></code></pre></td></tr></table></div></figure>


<p>As can be seen below:</p>

<p><img src="https://user-images.githubusercontent.com/567298/103987136-a169b080-5194-11eb-8a61-6d36f45caf5c.png" alt="image" /></p>

<p>After a bit of customization, you can get something more or less like this:</p>

<p><img src="https://user-images.githubusercontent.com/30043398/104296987-fd9d3f00-54ca-11eb-8623-f3fd4a63e3cc.png" alt="image" /></p>

<h2>Thank You</h2>

<p>Thanks for reading, if you like my content feel free to visit my website <strong><a href="https://ruan.dev">ruan.dev</a></strong> or follow me on Twitter <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CICD With DroneCI and Gitea Using Docker Compose]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/03/09/cicd-with-droneci-and-gitea-using-docker-compose/"/>
    <updated>2021-03-09T01:10:10-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/03/09/cicd-with-droneci-and-gitea-using-docker-compose</id>
    <content type="html"><![CDATA[<p>In this post we wil set up a drone-ci and gitea stack using docker-compose and then running a test pipeline.</p>

<p>I have posted a few times about this topic, but this post will be used when I create other examples and wanting to use this post for the ones not having the stack booted yet.</p>

<h2>The Source Code</h2>

<p>All the code will be in my <a href="https://github.com/ruanbekker/drone-gitea-on-docker">github repository</a>.</p>

<p>For our <code>docker-compose.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>version: '3.6'
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  gitea:
</span><span class='line'>    container_name: gitea
</span><span class='line'>    image: gitea/gitea:${GITEA_VERSION:-1.10.6}
</span><span class='line'>    restart: unless-stopped
</span><span class='line'>    environment:
</span><span class='line'>      # https://docs.gitea.io/en-us/install-with-docker/#environments-variables
</span><span class='line'>      - APP_NAME="Gitea"
</span><span class='line'>      - USER_UID=1000
</span><span class='line'>      - USER_GID=1000
</span><span class='line'>      - RUN_MODE=prod
</span><span class='line'>      - DOMAIN=${IP_ADDRESS}
</span><span class='line'>      - SSH_DOMAIN=${IP_ADDRESS}
</span><span class='line'>      - HTTP_PORT=3000
</span><span class='line'>      - ROOT_URL=http://${IP_ADDRESS}:3000
</span><span class='line'>      - SSH_PORT=222
</span><span class='line'>      - SSH_LISTEN_PORT=22
</span><span class='line'>      - DB_TYPE=sqlite3
</span><span class='line'>    ports:
</span><span class='line'>      - "3000:3000"
</span><span class='line'>      - "222:22"
</span><span class='line'>    networks:
</span><span class='line'>      - cicd_net
</span><span class='line'>    volumes:
</span><span class='line'>      - ./gitea:/data
</span><span class='line'>
</span><span class='line'>  drone:
</span><span class='line'>    container_name: drone
</span><span class='line'>    image: drone/drone:${DRONE_VERSION:-1.6.4}
</span><span class='line'>    restart: unless-stopped
</span><span class='line'>    depends_on:
</span><span class='line'>      - gitea
</span><span class='line'>    environment:
</span><span class='line'>      # https://docs.drone.io/server/provider/gitea/
</span><span class='line'>      - DRONE_DATABASE_DRIVER=sqlite3
</span><span class='line'>      - DRONE_DATABASE_DATASOURCE=/data/database.sqlite
</span><span class='line'>      - DRONE_GITEA_SERVER=http://${IP_ADDRESS}:3000/
</span><span class='line'>      - DRONE_GIT_ALWAYS_AUTH=false
</span><span class='line'>      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
</span><span class='line'>      - DRONE_SERVER_PROTO=http
</span><span class='line'>      - DRONE_SERVER_HOST=${IP_ADDRESS}:3001
</span><span class='line'>      - DRONE_TLS_AUTOCERT=false
</span><span class='line'>      - DRONE_USER_CREATE=${DRONE_USER_CREATE}
</span><span class='line'>      - DRONE_GITEA_CLIENT_ID=${DRONE_GITEA_CLIENT_ID}
</span><span class='line'>      - DRONE_GITEA_CLIENT_SECRET=${DRONE_GITEA_CLIENT_SECRET}
</span><span class='line'>    ports:
</span><span class='line'>      - "3001:80"
</span><span class='line'>      - "9001:9000"
</span><span class='line'>    networks:
</span><span class='line'>      - cicd_net
</span><span class='line'>    volumes:
</span><span class='line'>      - /var/run/docker.sock:/var/run/docker.sock
</span><span class='line'>      - ./drone:/data
</span><span class='line'>
</span><span class='line'>  drone-runner:
</span><span class='line'>    container_name: drone-runner
</span><span class='line'>    image: drone/drone-runner-docker:${DRONE_RUNNER_VERSION:-1}
</span><span class='line'>    restart: unless-stopped
</span><span class='line'>    depends_on:
</span><span class='line'>      - drone
</span><span class='line'>    environment:
</span><span class='line'>      # https://docs.drone.io/runner/docker/installation/linux/
</span><span class='line'>      # https://docs.drone.io/server/metrics/
</span><span class='line'>      - DRONE_RPC_PROTO=http
</span><span class='line'>      - DRONE_RPC_HOST=drone
</span><span class='line'>      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
</span><span class='line'>      - DRONE_RUNNER_NAME="${HOSTNAME}-runner"
</span><span class='line'>      - DRONE_RUNNER_CAPACITY=2
</span><span class='line'>      - DRONE_RUNNER_NETWORKS=cicd_net
</span><span class='line'>      - DRONE_DEBUG=false
</span><span class='line'>      - DRONE_TRACE=false
</span><span class='line'>    ports:
</span><span class='line'>      - "3002:3000"
</span><span class='line'>    networks:
</span><span class='line'>      - cicd_net
</span><span class='line'>    volumes:
</span><span class='line'>      - /var/run/docker.sock:/var/run/docker.sock
</span><span class='line'>
</span><span class='line'>networks:
</span><span class='line'>  cicd_net:
</span><span class='line'>    name: cicd_net</span></code></pre></td></tr></table></div></figure>


<p>Our <code>boot.sh</code> which we will use to override environment variables:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/usr/bin/env bash
</span><span class='line'>
</span><span class='line'>export HOSTNAME=$(hostname)
</span><span class='line'>export DRONE_VERSION=1.10.1
</span><span class='line'>export DRONE_RUNNER_VERSION=1.6.3
</span><span class='line'>export GITEA_VERSION=1.13
</span><span class='line'>export IP_ADDRESS=192.168.0.6
</span><span class='line'>export MINIO_ACCESS_KEY="EXAMPLEKEY"
</span><span class='line'>export MINIO_SECRET_KEY="EXAMPLESECRET"
</span><span class='line'>export GITEA_ADMIN_USER="example"
</span><span class='line'>export DRONE_RPC_SECRET="$(echo ${HOSTNAME} | openssl dgst -md5 -hex)"
</span><span class='line'>export DRONE_USER_CREATE="username:${GITEA_ADMIN_USER},machine:false,admin:true,token:${DRONE_RPC_SECRET}"
</span><span class='line'>export DRONE_GITEA_CLIENT_ID=""
</span><span class='line'>export DRONE_GITEA_CLIENT_SECRET=""
</span><span class='line'>docker-compose up -d
</span><span class='line'>
</span><span class='line'>echo ""
</span><span class='line'>echo "Gitea: http://${IP_ADDRESS}:3000/"
</span><span class='line'>echo "Drone: http://${IP_ADDRESS}:3001/"</span></code></pre></td></tr></table></div></figure>


<h2>Deploy the Stack</h2>

<p>Set the following in your <code>boot.sh</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IP_ADDRESS=192.168.0.6       -&gt; either reachable dns or ip address which will be your clone address and ui addresses.
</span><span class='line'>GITEA_ADMIN_USER="giteauser" -&gt; will be the user you register with in drone</span></code></pre></td></tr></table></div></figure>


<p>Now boot the stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bash boot.sh</span></code></pre></td></tr></table></div></figure>


<p><em>Note</em>: Theres a <a href="https://github.com/go-gitea/gitea/issues/7702">current issue</a> where webhooks get fired twice, if you see that just restart gitea with <code>docker restart gitea</code>.</p>

<ul>
<li><p>Head over to: <code>http://${IP_ADDRESS}:3000/user/settings/applications</code> and create a new OAuth2 Application and set the Redirect URI to <code>http://${IP_ADDRESS}:3001/login</code></p></li>
<li><p>Capture the client id and client secret and populate them in the <code>boot.sh</code> in <code>DRONE_GITEA_CLIENT_ID</code> and <code>DRONE_GITEA_CLIENT_SECRET</code> and run <code>bash boot.sh</code> again. This will give drone the correct credentials in order to authenticate with gitea.</p></li>
<li><p>Now when you head over to <code>http://${IP_ADDRESS}:3001/</code> you will be asked to authorize the application and you should be able to access drone.</p></li>
</ul>


<h2>Drone CLI</h2>

<p>Install Drone CLI:
- <a href="https://docs.drone.io/cli/install/">https://docs.drone.io/cli/install/</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -L https://github.com/drone/drone-cli/releases/latest/download/drone_darwin_amd64.tar.gz | tar zx
</span><span class='line'>$ sudo mv drone /usr/local/bin/drone
</span><span class='line'>$ chmod +x /usr/local/bin/drone</span></code></pre></td></tr></table></div></figure>


<p>Get your Drone Token:
- <a href="http://$">http://$</a>{IP_ADDRESS}:3001/account</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export DRONE_SERVER=http://${IP_ADDRESS}:3001
</span><span class='line'>$ export DRONE_TOKEN=one-from-the-account-page
</span><span class='line'>drone info</span></code></pre></td></tr></table></div></figure>


<h2>Build your first pipeline</h2>

<p>Create a test repo in gitea:</p>

<p><img src="https://user-images.githubusercontent.com/567298/110296470-0ad23800-7ffb-11eb-8428-af49d0ebd62d.png" alt="image" /></p>

<p>Commit a <code>.drone.yml</code> file for drone:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kind: pipeline
</span><span class='line'>type: docker
</span><span class='line'>name: hello-world
</span><span class='line'>
</span><span class='line'>trigger:
</span><span class='line'>  branch:
</span><span class='line'>    - master
</span><span class='line'>  event:
</span><span class='line'>    - push
</span><span class='line'>
</span><span class='line'>steps:
</span><span class='line'>  - name: say-hello
</span><span class='line'>    image: busybox
</span><span class='line'>    commands:
</span><span class='line'>      - echo hello-world</span></code></pre></td></tr></table></div></figure>


<p>Head over to drone and sync your repositories:</p>

<p><img src="https://user-images.githubusercontent.com/567298/110296425-00b03980-7ffb-11eb-9216-76725a62c09e.png" alt="image" /></p>

<p>Activate your repository:</p>

<p><img src="https://user-images.githubusercontent.com/567298/110296623-3523f580-7ffb-11eb-805f-db5db4dab0cb.png" alt="image" /></p>

<p>Push a commit to master and see your pipeline running:</p>

<p><img src="https://user-images.githubusercontent.com/567298/110296747-584ea500-7ffb-11eb-9909-259641a663aa.png" alt="image" /></p>

<h2>More Examples</h2>

<p>For more examples view my example section on the github repository:
- <a href="https://github.com/ruanbekker/drone-gitea-on-docker#more-examples">https://github.com/ruanbekker/drone-gitea-on-docker#more-examples</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ship Your Docker Logs to Loki Using Fluentbit]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/02/26/ship-your-docker-logs-to-loki-using-fluentbit/"/>
    <updated>2021-02-26T15:26:34-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/02/26/ship-your-docker-logs-to-loki-using-fluentbit</id>
    <content type="html"><![CDATA[<p>In this tutorial, I will show you how to ship your docker containers logs to <a href="https://grafana.com/oss/loki/">Grafana Loki</a> via <a href="https://fluentbit.io/">Fluent Bit</a>.</p>

<h2>Grafana and Loki</h2>

<p>First we need to get Grafana and Loki up and running and we will be using docker and docker-compose to do that.</p>

<p>Our <code>docker-compose-loki.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>version: "3.7"
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  grafana:
</span><span class='line'>    image: grafana/grafana:7.4.2
</span><span class='line'>    container_name: 'grafana'
</span><span class='line'>    restart: unless-stopped
</span><span class='line'>    volumes:
</span><span class='line'>      - ./data/grafana/data:/var/lib/grafana
</span><span class='line'>      - ./configs/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
</span><span class='line'>    networks:
</span><span class='line'>      - public
</span><span class='line'>    ports:
</span><span class='line'>      - 3000:3000
</span><span class='line'>    depends_on:
</span><span class='line'>      - loki
</span><span class='line'>    logging:
</span><span class='line'>      driver: "json-file"
</span><span class='line'>      options:
</span><span class='line'>        max-size: "1m"  
</span><span class='line'>  
</span><span class='line'>  loki:
</span><span class='line'>    image: grafana/loki:2.1.0
</span><span class='line'>    container_name: loki
</span><span class='line'>    command: -config.file=/mnt/loki-local-config.yaml
</span><span class='line'>    user: root
</span><span class='line'>    restart: unless-stopped
</span><span class='line'>    volumes:
</span><span class='line'>      - ./data/loki/data:/tmp/loki
</span><span class='line'>      - ./configs/loki/loki.yml:/mnt/loki-local-config.yaml
</span><span class='line'>    ports:
</span><span class='line'>      - 3100:3100
</span><span class='line'>    networks:
</span><span class='line'>      - public
</span><span class='line'>    logging:
</span><span class='line'>      driver: "json-file"
</span><span class='line'>      options:
</span><span class='line'>        max-size: "1m"
</span><span class='line'>
</span><span class='line'>networks:
</span><span class='line'>  public:
</span><span class='line'>    name: public</span></code></pre></td></tr></table></div></figure>


<p>We are referencing 2 config files, first our loki datasource defined by <code>./configs/grafana/datasource.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apiVersion: 1
</span><span class='line'>
</span><span class='line'>datasources:
</span><span class='line'>- name: loki
</span><span class='line'>  type: loki
</span><span class='line'>  access: proxy
</span><span class='line'>  orgId: 1
</span><span class='line'>  url: http://loki:3100
</span><span class='line'>  basicAuth: false
</span><span class='line'>  isDefault: true
</span><span class='line'>  version: 1
</span><span class='line'>  editable: true</span></code></pre></td></tr></table></div></figure>


<p>And our second config is our loki config <code>./configs/loki/loki.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>auth_enabled: false
</span><span class='line'>
</span><span class='line'>server:
</span><span class='line'>  http_listen_port: 3100
</span><span class='line'>
</span><span class='line'>ingester:
</span><span class='line'>  lifecycler:
</span><span class='line'>    address: 127.0.0.1
</span><span class='line'>    ring:
</span><span class='line'>      kvstore:
</span><span class='line'>        store: inmemory
</span><span class='line'>      replication_factor: 1
</span><span class='line'>    final_sleep: 0s
</span><span class='line'>  chunk_idle_period: 5m
</span><span class='line'>  chunk_retain_period: 30s
</span><span class='line'>  max_transfer_retries: 0
</span><span class='line'>
</span><span class='line'>schema_config:
</span><span class='line'>  configs:
</span><span class='line'>    - from: 2018-04-15
</span><span class='line'>      store: boltdb
</span><span class='line'>      object_store: filesystem
</span><span class='line'>      schema: v11
</span><span class='line'>      index:
</span><span class='line'>        prefix: index_
</span><span class='line'>        period: 168h
</span><span class='line'>
</span><span class='line'>storage_config:
</span><span class='line'>  boltdb:
</span><span class='line'>    directory: /tmp/loki/index
</span><span class='line'>
</span><span class='line'>  filesystem:
</span><span class='line'>    directory: /tmp/loki/chunks
</span><span class='line'>
</span><span class='line'>limits_config:
</span><span class='line'>  enforce_metric_name: false
</span><span class='line'>  reject_old_samples: true
</span><span class='line'>  reject_old_samples_max_age: 168h
</span><span class='line'>
</span><span class='line'>chunk_store_config:
</span><span class='line'>  max_look_back_period: 0s
</span><span class='line'>
</span><span class='line'>table_manager:
</span><span class='line'>  retention_deletes_enabled: false
</span><span class='line'>  retention_period: 0s</span></code></pre></td></tr></table></div></figure>


<p>Once you have everything in place, boot the grafana and loki containers:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose -f docker-compose-loki.yml up -d</span></code></pre></td></tr></table></div></figure>


<h2>Fluent Bit</h2>

<p>Next we need to boot our log processor and forwarder, fluent bit. In our <code>docker-compose-fluentbit.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>version: "3.7"
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  fluent-bit:
</span><span class='line'>    image: grafana/fluent-bit-plugin-loki:latest
</span><span class='line'>    container_name: fluent-bit
</span><span class='line'>    environment:
</span><span class='line'>      - LOKI_URL=http://loki:3100/loki/api/v1/push
</span><span class='line'>    volumes:
</span><span class='line'>      - ./fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
</span><span class='line'>    ports:
</span><span class='line'>      - "24224:24224"
</span><span class='line'>      - "24224:24224/udp"
</span><span class='line'>    networks:
</span><span class='line'>      - public
</span><span class='line'>
</span><span class='line'>networks:
</span><span class='line'>  public:
</span><span class='line'>    name: public</span></code></pre></td></tr></table></div></figure>


<p>And as you can see we are referencing a config <code>./configs/fluentbit/fluent-bit.conf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[INPUT]
</span><span class='line'>    Name        forward
</span><span class='line'>    Listen      0.0.0.0
</span><span class='line'>    Port        24224
</span><span class='line'>[Output]
</span><span class='line'>    Name grafana-loki
</span><span class='line'>    Match *
</span><span class='line'>    Url ${LOKI_URL}
</span><span class='line'>    RemoveKeys source,container_id
</span><span class='line'>    Labels {job="fluent-bit"}
</span><span class='line'>    LabelKeys container_name
</span><span class='line'>    BatchWait 1s
</span><span class='line'>    BatchSize 1001024
</span><span class='line'>    LineFormat json
</span><span class='line'>    LogLevel info</span></code></pre></td></tr></table></div></figure>


<p>Once you have your configs in place, boot fluent-bit:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose -f docker-compose-fluentbit.yml up -d</span></code></pre></td></tr></table></div></figure>


<h2>Nginx App</h2>

<p>Now to configure our docker container to ship its logs to fluent-bit, which will forward the logs to Loki.</p>

<p>In our <code>docker-compose-app.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>version: "3"
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  nginx-json:
</span><span class='line'>    image: ruanbekker/nginx-demo:json
</span><span class='line'>    container_name: nginx-app
</span><span class='line'>    ports:
</span><span class='line'>      - 8080:80
</span><span class='line'>    logging:
</span><span class='line'>      driver: fluentd
</span><span class='line'>      options:
</span><span class='line'>        fluentd-address: 127.0.0.1:24224</span></code></pre></td></tr></table></div></figure>


<p>The fluent-bit container listens on port 24224 locally on our docker host and is not reachable via its container network, so let&rsquo;s boot our application:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose -f docker-compose-app.yml up -d</span></code></pre></td></tr></table></div></figure>


<p>Once our application is up, let&rsquo;s make a request to our nginx-app:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:8080/
</span><span class='line'>ok</span></code></pre></td></tr></table></div></figure>


<p>Now head over to Grafana at <a href="http://localhost:3000/explore">http://localhost:3000/explore</a> and query: <code>{job="fluent-bit", container_name="/nginx-app"}</code> and you should see something like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/109366000-03908900-789b-11eb-952e-36ff23657517.png" alt="image" /></p>

<p>Beautiful right? I know.</p>

<h2>Github Repo</h2>

<p>The source code for this can be found on:</p>

<ul>
<li><a href="https://github.com/ruanbekker/docker-logging-loki-fuentbit">https://github.com/ruanbekker/docker-logging-loki-fuentbit</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Arduino and Setup the NodeMCU ESP32]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/01/31/installing-arduino-and-setup-the-nodemcu-esp32/"/>
    <updated>2021-01-31T11:33:31-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/01/31/installing-arduino-and-setup-the-nodemcu-esp32</id>
    <content type="html"><![CDATA[<p>A couple of weeks ago I got myself the <a href="">NodeMCU ESP32 Development Board</a>:</p>

<p><img src="https://user-images.githubusercontent.com/567298/106391027-f5626080-63f3-11eb-9dca-5efce53fbf80.png" alt="image" /></p>

<p>If you want to view more in-depth specs about the board you can have a look at the <a href="https://www.espressif.com/sites/default/files/documentation/esp32_datasheet_en.pdf">ESP32 Datasheet</a>, but in short it has:</p>

<ul>
<li>ESP32-D0WDQ6 Processor</li>
<li>WiFi with frequency range of 2.4G ~ 2.5G (2400M ~ 2483.5M)</li>
<li>Bluetooth 4.2</li>
<li>32Mbit built in Flash</li>
<li>2x19pin extension headers, breakout all the I/O pins of the module</li>
<li>2x keys, used as reset or user-defined</li>
</ul>


<h2>About this Tutorial</h2>

<p>In this tutorial we will download and install Arduino and how to setup our ESP32 Board, then just running a basic hello world application</p>

<h2>Installing Arduino</h2>

<p>Head over to <a href="https://www.arduino.cc/en/software">arduino.cc/en/software</a> and download arduino for your operating system.</p>

<p>Once installed you can reference <a href="https://github.com/espressif/arduino-esp32">arduino-esp32</a> for your operating system, but in general you will open the Arduino application, select Preferences and provide the following link on the &ldquo;Additional Boards Manager URL&rdquo;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json</span></code></pre></td></tr></table></div></figure>


<p>Hit OK, then select Tools, Board, Board Manager, then search for &ldquo;esp32&rdquo;, then install esp32 by Espressif Systems:</p>

<p><img width="800" alt="image" src="https://user-images.githubusercontent.com/567298/106391354-8c7be800-63f5-11eb-852d-d472fe3624e9.png"></p>

<p>Then make sure to select the board by navigating to Tools, Board, ESP32 Arduino, ESP32 Dev Module:</p>

<p><img width="1110" alt="image" src="https://user-images.githubusercontent.com/567298/106391458-06ac6c80-63f6-11eb-8a0b-eed0ae7e786b.png"></p>

<p>Select the upload rate from Tools, Upload Rate to 115200 and select the serial port, from mine it is Tools, Port, usb-serial-0001 (your&rsquo;s might differ)</p>

<h2>Hello World Application</h2>

<p>Now that we have Arduino installed and our board configured, let&rsquo;s write a hello world application, from the input text section:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void setup() {
</span><span class='line'>  Serial.begin(115200);
</span><span class='line'>  Serial.println("Setup done");
</span><span class='line'>  delay(5000);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void loop() {
</span><span class='line'>  Serial.println("Hello, World");
</span><span class='line'>  delay(1000);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>From the setup function we set the baud rate and print a line then sleep for 5 seconds, once that is done we call the loop function which will print &ldquo;Hello, World&rdquo; and sleep for 1 second, and that will loop indefinitely.</p>

<p>Once you are done, save your sketch and upload it to the board by either selecting the upload button or from Sketch, Upload.</p>

<p>When the code has been compiled the device will reset and you can open the serial monitor, by selecting Tools, Serial Monitor:</p>

<p><img width="936" alt="image" src="https://user-images.githubusercontent.com/567298/106391690-47f14c00-63f7-11eb-85bf-227f1ac5f92a.png"></p>

<h2>Thank You</h2>

<p>Thank you for reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reduce Docker Log Size on Disk]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/12/23/reduce-docker-log-size-on-disk/"/>
    <updated>2020-12-23T04:11:35-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/12/23/reduce-docker-log-size-on-disk</id>
    <content type="html"><![CDATA[<p>In cases where you are using the defaults for logging and your application logs a lot you can consume a lot of disk space and you can run out of disk space quite quickly.</p>

<p>If it&rsquo;s a case where you already ran out of disk space, we can investigate the disk space consumed by docker logs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /var/lib/docker/containers
</span><span class='line'>$ du -sh *
</span><span class='line'>6.0G  14052251a0f13f46f65bc73d10c01408130ee8ae71529600ba5bd6bee76af4ee
</span><span class='line'>1.2G  e6b40b1d30c5cf05e8cb201ca9abf6bd283d7cf7ceaa3be2a0422be7cd750a33</span></code></pre></td></tr></table></div></figure>


<p>Referenced from <a href="https://blog.birkhoff.me/devops-truncate-docker-container-logs-periodically-to-free-up-server-disk-space/">https://blog.birkhoff.me/devops-truncate-docker-container-logs-periodically-to-free-up-server-disk-space/</a> you can truncate those files:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sh -c 'truncate -s 0 /var/lib/docker/containers/*/*-json.log'</span></code></pre></td></tr></table></div></figure>


<p>Check the size again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ du -sh *
</span><span class='line'>40K   14052251a0f13f46f65bc73d10c01408130ee8ae71529600ba5bd6bee76af4ee
</span><span class='line'>36K   e6b40b1d30c5cf05e8cb201ca9abf6bd283d7cf7ceaa3be2a0422be7cd750a33</span></code></pre></td></tr></table></div></figure>


<p>To overcome this issue you can use this in logging options in your compose:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>    logging:
</span><span class='line'>      driver: "json-file"
</span><span class='line'>      options:
</span><span class='line'>        max-size: "1m"
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTPS for Local Development With MiniCA]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/12/23/https-for-local-development-with-minica/"/>
    <updated>2020-12-23T03:11:08-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/12/23/https-for-local-development-with-minica</id>
    <content type="html"><![CDATA[<p>In this tutorial we will use <a href="https://github.com/jsha/minica">minica</a> to enable us to run our web applications over HTTPS for local development.</p>

<p>To read more about about <a href="https://github.com/jsha/minica">minica</a> check out their website.</p>

<h2>Generate Certificates</h2>

<p>You can use their binary from their github page or use my docker image to generate the certificates to a <code>./certs</code> directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run --user "$(id -u):$(id -g)" -it -v $PWD/certs:/output ruanbekker/minica --domains 192.168.0.20.nip.io</span></code></pre></td></tr></table></div></figure>


<p>In the case from above, we are generating certificates for the FQDN <code>192.168.0.20.nip.io</code>. You will find the generated certificates under <code>./certs/</code>.</p>

<h2>Application Stack</h2>

<p>We will use docker to create a nginx webserver to serve our content via https using the generated vertificates.</p>

<p>Our <code>docker-compose.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>version: '3.7'
</span><span class='line'>services:
</span><span class='line'>  nginx:
</span><span class='line'>    image: nginx
</span><span class='line'>    container_name: nginx
</span><span class='line'>    ports:
</span><span class='line'>      - 80:80
</span><span class='line'>      - 443:443
</span><span class='line'>    volumes:
</span><span class='line'>      - ~/personal/docker-minica-nginx/nginx.conf:/etc/nginx/nginx.conf
</span><span class='line'>      - ~/personal/docker-minica-nginx/ssl.conf:/etc/nginx/conf.d/ssl.conf
</span><span class='line'>      - ~/personal/docker-minica-nginx/certs/192.168.0.6.nip.io:/etc/nginx/certs
</span><span class='line'>      - ~/personal/docker-minica-nginx/html/index.html:/usr/share/nginx/html/index.html</span></code></pre></td></tr></table></div></figure>


<p>Our <code>nginx.conf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user  nginx;
</span><span class='line'>worker_processes  1;
</span><span class='line'>error_log  /var/log/nginx/error.log warn;
</span><span class='line'>pid        /var/run/nginx.pid;
</span><span class='line'>
</span><span class='line'>events {
</span><span class='line'>    worker_connections  1024;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>http {
</span><span class='line'>    include       /etc/nginx/mime.types;
</span><span class='line'>    default_type  application/octet-stream;
</span><span class='line'>
</span><span class='line'>    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
</span><span class='line'>                      '$status $body_bytes_sent "$http_referer" '
</span><span class='line'>                      '"$http_user_agent" "$http_x_forwarded_for"';
</span><span class='line'>
</span><span class='line'>    access_log  /var/log/nginx/access.log  main;
</span><span class='line'>
</span><span class='line'>    sendfile        on;
</span><span class='line'>    keepalive_timeout  65;
</span><span class='line'>    include /etc/nginx/conf.d/ssl.conf;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Our <code>ssl.conf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen 80;
</span><span class='line'>    server_name 192.168.0.6.nip.io;
</span><span class='line'>    return 301 https://$host$request_uri;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>server {
</span><span class='line'>    listen 443 ssl;
</span><span class='line'>    server_name 192.168.0.6.nip.io;
</span><span class='line'>
</span><span class='line'>    ssl_certificate /etc/nginx/certs/cert.pem;
</span><span class='line'>    ssl_certificate_key /etc/nginx/certs/key.pem;
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>        root   /usr/share/nginx/html;
</span><span class='line'>        index  index.html;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Our <code>html/index.html</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE html&gt;
</span><span class='line'>&lt;html lang="en-us"&gt;
</span><span class='line'>&lt;head&gt;
</span><span class='line'>    &lt;meta charset="utf-8"&gt;
</span><span class='line'>    &lt;link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous"&gt;
</span><span class='line'>    &lt;script src="https://code.jquery.com/jquery-3.1.1.min.js" crossorigin="anonymous"&gt;&lt;/script&gt;
</span><span class='line'>    &lt;title&gt;Sample Page&lt;/title&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>    &lt;div class="container-fluid"&gt;
</span><span class='line'>        &lt;div class="row"&gt;
</span><span class='line'>            &lt;div class="bitProcessor"&gt;&lt;/div&gt;
</span><span class='line'>            &lt;div class="col-md-12" style="background-color: white; position: absolute; top: 40%;width: 80%;left: 10%;"&gt;
</span><span class='line'>                &lt;center&gt;
</span><span class='line'>                    &lt;h1&gt;Hello, World!&lt;/h1&gt;
</span><span class='line'>                  &lt;p&gt;This is sample text.&lt;/p&gt;
</span><span class='line'>                &lt;/center&gt;
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Import Certificates</h2>

<p>We have a certificate <code>./certs/minica.pem</code> which we need to import and trust on our local workstation, I am using a Mac so it will be Keychain Access.</p>

<p><img src="https://user-images.githubusercontent.com/567298/101961866-5a2ee500-3c13-11eb-9f89-03fa1bd4670d.png" alt="image" /></p>

<p>Once you open Keychain Access, select &ldquo;file&rdquo;, &ldquo;import items&rdquo; and browse and import <code>./certs/minica.pem</code>, once you are done search for minica:</p>

<p><img src="https://user-images.githubusercontent.com/567298/101962064-d4f80000-3c13-11eb-9479-c043ba3ced2c.png" alt="image" /></p>

<p>Select the item, file -> get info, expand trust, change &ldquo;when using this certificate&rdquo; to Always trust and close.</p>

<p>You will now see the root ca is trusted:</p>

<p><img src="https://user-images.githubusercontent.com/567298/101962197-2dc79880-3c14-11eb-8d26-49874c9703fa.png" alt="image" /></p>

<h2>Boot the Application Stack</h2>

<p>As we have <code>docker-compose.yml</code> in our current working directory, we can use docker-compose to boot our application:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose up
</span><span class='line'>Creating network "docker-minica-nginx_default" with the default driver
</span><span class='line'>Creating nginx ... done
</span><span class='line'>Attaching to nginx</span></code></pre></td></tr></table></div></figure>


<p>Now when we browse to <code>https://192.168.0.6.nip.io</code> we will see:</p>

<p><img src="https://user-images.githubusercontent.com/567298/101962367-a9c1e080-3c14-11eb-898b-688b50c1b9db.png" alt="image" /></p>

<p>And when we inspect the certificate, we can see its valid:</p>

<p><img src="https://user-images.githubusercontent.com/567298/101962411-c78f4580-3c14-11eb-80cd-cf8e449eca95.png" alt="image" /></p>

<h2>Thank You</h2>

<p>Thank you for reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Harden Your SSH Security on Linux Servers]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/12/18/harden-your-ssh-security-on-linux-servers/"/>
    <updated>2020-12-18T13:32:18+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/12/18/harden-your-ssh-security-on-linux-servers</id>
    <content type="html"><![CDATA[<p>In this post we wil be focusing on increasing / hardening our security by adjusting our ssh configuration and applying some iptables firewall rules.</p>

<p>This will be the list of things that we will do:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  - Change the SSH Port
</span><span class='line'>  - Don't allow root to SSH
</span><span class='line'>  - Disable password based authentication
</span><span class='line'>  - Enable key based authentication and only for a singular user
</span><span class='line'>  - Allow our user to sudo
</span><span class='line'>  - Use iptables to block sources trying to DDoS your server</span></code></pre></td></tr></table></div></figure>


<h2>Packages</h2>

<p>First let&rsquo;s install the packages that we need, I&rsquo;m using Debian so I will be using the <code>apt</code> package manager:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt update && apt upgrade -y
</span><span class='line'>$ apt install sudo -y</span></code></pre></td></tr></table></div></figure>


<h2>Dedicated User</h2>

<p>Let&rsquo;s create our user james:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ useradd -m -s /bin/bash james</span></code></pre></td></tr></table></div></figure>


<p>Allow our user to sudo without a password, by running <code>visudo</code> then append the following line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>james ALL=(ALL:ALL) NOPASSWD: ALL</span></code></pre></td></tr></table></div></figure>


<h2>SSH Authorized Keys</h2>

<p>If you don&rsquo;t already have a private SSH key, generate one on your client side:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh-keygen -f ~/.ssh/james -t rsa -C "james" -q -N ""</span></code></pre></td></tr></table></div></figure>


<p>Then copy the public key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat ~/.ssh/james.pub | pbcopy</span></code></pre></td></tr></table></div></figure>


<p>On your server create the SSH directories:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir /home/james/.ssh</span></code></pre></td></tr></table></div></figure>


<p>Now paste your public key into <code>/home/james/.ssh/authorized_keys</code></p>

<p>Then change the ownership:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod 700 /home/james/.ssh
</span><span class='line'>$ chmod 644 /home/james/.ssh/authorized_keys
</span><span class='line'>$ chown -R james:james /home/james</span></code></pre></td></tr></table></div></figure>


<h2>SSH Config</h2>

<p>Backup your SSH config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cp /etc/ssh/sshd_config /etc/ssh_sshd_config.bak</span></code></pre></td></tr></table></div></figure>


<p>We will be using the SSH port <code>2914</code>, replace your SSH config with the following and make your adjustments where you need to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># /etc/ssh/sshd_config
</span><span class='line'>Port 2914
</span><span class='line'>HostKey /etc/ssh/ssh_host_rsa_key
</span><span class='line'>HostKey /etc/ssh/ssh_host_ecdsa_key
</span><span class='line'>HostKey /etc/ssh/ssh_host_ed25519_key
</span><span class='line'>LoginGraceTime 1m
</span><span class='line'>PermitRootLogin no
</span><span class='line'>MaxAuthTries 3
</span><span class='line'>MaxSessions 5
</span><span class='line'>AuthenticationMethods publickey
</span><span class='line'>PubkeyAuthentication yes
</span><span class='line'>AuthorizedKeysFile      /home/james/.ssh/authorized_keys
</span><span class='line'>PasswordAuthentication no
</span><span class='line'>PermitEmptyPasswords no
</span><span class='line'>ChallengeResponseAuthentication no
</span><span class='line'>UsePAM yes
</span><span class='line'>AllowUsers james
</span><span class='line'>DenyUsers root
</span><span class='line'>X11Forwarding yes
</span><span class='line'>PrintMotd no
</span><span class='line'>UseDNS no
</span><span class='line'>PidFile /var/run/sshd.pid
</span><span class='line'>AcceptEnv LANG LC_*
</span><span class='line'>Subsystem       sftp    /usr/lib/openssh/sftp-server</span></code></pre></td></tr></table></div></figure>


<p>Then save the file and restart SSH:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ systemctl restart sshd</span></code></pre></td></tr></table></div></figure>


<p>While you are still connected to the shell session, open up a new terminal and try to connect with your new user and private SSH key to ensure that you can connect to your server.</p>

<h2>Iptables</h2>

<p>We want to drop incoming connections which make more than 10 connection attempts to SSH within 60 seconds.</p>

<p>The tokens get refilled into buckets at 3 per minute and maximum of 3 tokens that can be filled into the bucket.</p>

<p>Let&rsquo;s create our script:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p /opt/scripts
</span><span class='line'>$ touch /opt/scripts/fw.sh</span></code></pre></td></tr></table></div></figure>


<p>In our script we will place the following content:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/usr/bin/env bash
</span><span class='line'>INTERFACE=eth0 # check ifconfig to determine the correct interface
</span><span class='line'>SSH_PORT=2914
</span><span class='line'>CONNECTION_ATTEMPTS=10
</span><span class='line'>CONNECTION_TIME=60
</span><span class='line'>#WHITELIST_IP=x.x.x.x/32 # replace ip and uncomment if you want to whitelist a ip
</span><span class='line'>#iptables -I INPUT -s ${WHITELIST_IP} -p tcp --dport ${SSH_PORT} -i ${INTERFACE} -j ACCEPT # uncomment if you want to use whitelisting
</span><span class='line'>iptables -A INPUT -p tcp --dport ${SSH_PORT} -i ${INTERFACE} -m state --state NEW -m recent  --set
</span><span class='line'>iptables -A INPUT -p tcp --dport ${SSH_PORT} -i ${INTERFACE} -m state --state NEW -m recent  --update --seconds ${CONNECTION_TIME} --hitcount ${CONNECTION_ATTEMPTS} -j DROP
</span><span class='line'>iptables -A INPUT  -i ${INTERFACE} -p tcp --dport ${SSH_PORT} -m state --state NEW -m limit --limit 3/min --limit-burst 3 -j ACCEPT
</span><span class='line'>iptables -A INPUT  -i ${INTERFACE} -p tcp --dport ${SSH_PORT} -m state --state ESTABLISHED -j ACCEPT
</span><span class='line'>iptables -A OUTPUT -o ${INTERFACE} -p tcp --sport ${SSH_PORT} -m state --state ESTABLISHED -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<p>Now we want to execute this script whenever the server boots, open up <code>/etc/rc.local</code> and append the following line, so that the file looks more or less like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>/opt/scripts/fw.sh
</span><span class='line'>exit 0</span></code></pre></td></tr></table></div></figure>


<p>Ensure both files are executable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod +x /opt/scripts/fw.sh
</span><span class='line'>$ chmod +x /etc/rc.local</span></code></pre></td></tr></table></div></figure>


<p>When you are sure everything is in place, reboot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ reboot</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Encrypt and Decrypt Files With Ccrypt]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/11/20/encrypt-and-decrypt-files-with-ccrypt/"/>
    <updated>2020-11-20T06:27:01+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/11/20/encrypt-and-decrypt-files-with-ccrypt</id>
    <content type="html"><![CDATA[<p>This is a quick post to demonstrate how to encrypt and decrypt files with <strong>ccrypt</strong></p>

<h2>About</h2>

<p>Ccrypt&rsquo;s description from its project page:</p>

<p><em>Encryption and decryption depends on a keyword (or key phrase) supplied by the user. By default, the user is prompted to enter a keyword from the terminal. Keywords can consist of any number of characters, and all characters are significant (although ccrypt internally hashes the key to 256 bits). Longer keywords provide better security than short ones, since they are less likely to be discovered by exhaustive search.</em></p>

<p>Ref: <a href="http://ccrypt.sourceforge.net/">http://ccrypt.sourceforge.net/</a></p>

<h2>Install</h2>

<p>For debian based systems, to install ccrypt:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install ccrypt</span></code></pre></td></tr></table></div></figure>


<h2>Usage</h2>

<p>To encrypt files, write a file to disk:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo "ok" &gt; file.txt</span></code></pre></td></tr></table></div></figure>


<p>Then encrypt the file by providing a password:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ccencrypt file.txt
</span><span class='line'>Enter encryption key:
</span><span class='line'>Enter encryption key: (repeat)</span></code></pre></td></tr></table></div></figure>


<p>It encrypts and only the encrypted file can be found:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls
</span><span class='line'>file.txt.cpt</span></code></pre></td></tr></table></div></figure>


<p>Decrypt the file, by providing your password that you encrypted it with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ccdecrypt file.txt.cpt
</span><span class='line'>Enter decryption key:</span></code></pre></td></tr></table></div></figure>


<p>View the decrypted file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat file.txt
</span><span class='line'>ok</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Loki on Multipass]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/11/11/deploy-loki-on-multipass/"/>
    <updated>2020-11-11T14:19:05+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/11/11/deploy-loki-on-multipass</id>
    <content type="html"><![CDATA[<p><img src="https://sysadmins.co.za/content/images/size/w1600/2020/11/loki-banner-2.png" alt="" /></p>

<p>In this post I will demonstrate how to deploy Grafana Labs&rsquo;s <strong>Loki</strong> on <strong>Multipass</strong> using cloud-init so that you can run your own dev environment and run a couple of queries to get you started.</p>

<h2>About</h2>

<p>If you haven&rsquo;t heard of <a href="https://multipass.run/">Multipass</a>, it allows you to run Ubuntu VMs on your Mac or Windows workstation.</p>

<p>If you haven&rsquo;t heard of <a href="https://grafana.com/oss/loki/">Loki</a>, as described by Grafana Labs: <em>&ldquo;Loki is a horizontally-scalable, highly-available, multi-tenant log aggregation system inspired by Prometheus.&rdquo;</em></p>

<h2>Install Multipass</h2>

<p>Head over to <a href="https://multipass.run/">multipass.run</a> to get the installer for your operating system, and if you are curious about Multipass, I wrote a beginners guide on Multipass which can be <strong><a href="https://sysadmins.co.za/getting-started-with-multipass-vms/">found here</a></strong></p>

<h2>Cloud Init for Loki</h2>

<p>We will be making use of <strong><a href="https://cloudinit.readthedocs.io/en/latest/">cloud-init</a></strong> to bootstrap <strong><a href="https://github.com/grafana/loki/releases/tag/v2.0.0">Loki v2.0.0</a></strong> to our multipass instance.</p>

<p>V2.0.0 is the current release of the time of writing, so depending on the time when you read this, have a look at the <a href="https://github.com/grafana/loki/releases">Loki Releases</a> page for the latest version and adjust the cloud-init.yml according to the version if it differs from the one I&rsquo;m mentioning.</p>

<p>(Optional) If you want to use SSH to your Multipass VM, you can use your existing SSH key or generate a new one, if you want to create a new key, you can <a href="https://sysadmins.co.za/getting-started-with-multipass-vms/">follow this post</a></p>

<p>Copy your public key, in my case <code>~/.ssh/id_rsa.pub</code> and paste it under the ssh <code>authorized_keys</code> section.</p>

<p>Our <code>cloud-init.yml</code> has a couple of sections, but to break it down it will do the following:</p>

<ul>
<li>We provide it our public ssh key so that we can ssh with our private key</li>
<li>Updates the index repository</li>
<li>Installs the packages, unzip and wget</li>
<li>Creates the loki systemd unit file and places it under /etc/systemd/system/</li>
<li>When the vm boots it will create the user loki and creates the loki etc directory</li>
<li>Once that completes, we are downloading the loki, logcli and promtail binaries from github</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1">#cloud-config</span>
</span><span class='line'><span class="l-Scalar-Plain">ssh_authorized_keys</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ssh-rsa AAAA...Ha9 your-comment</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">package_update</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">packages</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">unzip</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">wget</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">write_files</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">content</span><span class="p-Indicator">:</span> <span class="p-Indicator">|-</span>
</span><span class='line'>      <span class="no">[Unit]</span>
</span><span class='line'>      <span class="no">Description=Loki</span>
</span><span class='line'>      <span class="no">User=loki</span>
</span><span class='line'>      <span class="no">Group=loki</span>
</span><span class='line'>      <span class="no">Wants=network-online.target</span>
</span><span class='line'>      <span class="no">After=network-online.target</span>
</span><span class='line'>      <span class="no">[Service]</span>
</span><span class='line'>      <span class="no">Type=simple</span>
</span><span class='line'>      <span class="no">Restart=on-failure</span>
</span><span class='line'>      <span class="no">ExecStart=/usr/local/bin/loki -config.file /etc/loki/loki-local-config.yaml</span>
</span><span class='line'>      <span class="no">[Install]</span>
</span><span class='line'>      <span class="no">WantedBy=multi-user.target</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">owner</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">root:root</span>
</span><span class='line'>    <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/etc/systemd/system/loki.service</span>
</span><span class='line'>    <span class="l-Scalar-Plain">permissions</span><span class="p-Indicator">:</span> <span class="s">&#39;0644&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">bootcmd</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">useradd --no-create-home --shell /bin/false loki</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mkdir /etc/loki</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">chown -R loki:loki /etc/loki</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">runcmd</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">for app in loki logcli promtail; do wget &quot;https://github.com/grafana/loki/releases/download/v2.0.0/${app}-linux-amd64.zip&quot;; done</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">for app in loki logcli promtail; do unzip &quot;${app}-linux-amd64.zip&quot;; done</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">for app in loki logcli promtail; do mv &quot;${app}-linux-amd64&quot; /usr/local/bin/${app}; done</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">for app in loki logcli promtail; do rm -f &quot;${app}-linux-amd64.zip&quot;; done</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">wget https://raw.githubusercontent.com/grafana/loki/v2.0.0/cmd/loki/loki-local-config.yaml</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mv ./loki-local-config.yaml /etc/loki/loki-local-config.yaml</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">chown loki:loki /etc/loki/loki-local-config.yaml</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">systemctl daemon-reload</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">systemctl start loki</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">sleep 5</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;this is a test&quot; | promtail --stdin --client.url http://localhost:3100/loki/api/v1/push --client.external-labels=app=cli -server.disable</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will notice that the VM will have <code>loki</code>, <code>logcli</code> and <code>promtail</code> available on it, so you will have an environment to use all of them together.</p>

<p>As you can see once we start loki, we are piping <code>this is a test</code> to Loki using Promtail, so that we can verify that the data is visible in Loki. That step is not required, but just added it to this demo.</p>

<h2>Deploy Loki on Multipass</h2>

<p>We will provision a Multipass VM using the Ubuntu Focal distribution and spec our VM with 1 CPU, 512MB of Memory and 1GB of disk and then bootstrap our installation of Loki using cloud-init:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>multipass launch focal <span class="se">\</span>
</span><span class='line'>  --name loki <span class="se">\</span>
</span><span class='line'>  --cpus <span class="m">1</span> <span class="se">\</span>
</span><span class='line'>  --mem 512m <span class="se">\</span>
</span><span class='line'>  --disk 1G <span class="se">\</span>
</span><span class='line'>  --cloud-init cloud-init.yml
</span><span class='line'>
</span><span class='line'>Creating: loki
</span><span class='line'>Waiting <span class="k">for</span> initialization to <span class="nb">complete </span>
</span><span class='line'>Launched: loki
</span></code></pre></td></tr></table></div></figure>


<p>We can validate if our Multipass VM is running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>multipass list
</span><span class='line'>Name                    State             IPv4             Image
</span><span class='line'>loki                    Running           192.168.64.19    Ubuntu 20.04 LTS
</span></code></pre></td></tr></table></div></figure>


<h2>Test Loki inside the VM</h2>

<p>First we will exec into the VM (or SSH), then we will test out Loki inside the VM since we already have logcli available:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>multipass <span class="nb">exec </span>loki -- bash
</span><span class='line'>To run a <span class="nb">command </span>as administrator <span class="o">(</span>user <span class="s2">&quot;root&quot;</span><span class="o">)</span>, use <span class="s2">&quot;sudo &lt;command&gt;&quot;</span>.
</span><span class='line'>See <span class="s2">&quot;man sudo_root&quot;</span> <span class="k">for</span> details.
</span><span class='line'>
</span><span class='line'>ubuntu@loki:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remembered in our cloud-init, we instructed this command to run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;this is a test&quot;</span> <span class="p">|</span> promtail --stdin --client.url http://localhost:3100/loki/api/v1/push --client.external-labels<span class="o">=</span><span class="nv">app</span><span class="o">=</span>cli -server.disable
</span></code></pre></td></tr></table></div></figure>


<p>So if we use logcli, we can inspect our visible labels:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>logcli --quiet labels
</span><span class='line'>__name__
</span><span class='line'>app
</span><span class='line'>hostname
</span><span class='line'>job
</span></code></pre></td></tr></table></div></figure>


<p>And as we expect, we will see the app label from the <code>--client.external-labels=app=cli</code> argument that we passed. We can also look at the values for a given label:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>logcli --quiet labels app
</span><span class='line'>cli
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s query our logs using the label selector: <code>{app="cli"}</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>logcli --quiet --output raw query <span class="s1">&#39;{app=&quot;cli&quot;}&#39;</span>
</span><span class='line'>this is a <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we remove the extra arguments, we will see more verbose output like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>logcli query <span class="s1">&#39;{app=&quot;cli&quot;}&#39;</span>
</span><span class='line'>
</span><span class='line'>http://localhost:3100/loki/api/v1/query_range?direction<span class="o">=</span>BACKWARD<span class="p">&amp;</span><span class="nv">end</span><span class="o">=</span>1605092055756745122<span class="p">&amp;</span><span class="nv">limit</span><span class="o">=</span>30<span class="p">&amp;</span><span class="nv">query</span><span class="o">=</span>%7Bapp%3D%22cli%22%7D<span class="p">&amp;</span><span class="nv">start</span><span class="o">=</span>1605088455756745122
</span><span class='line'>Common labels: <span class="o">{</span><span class="nv">app</span><span class="o">=</span><span class="s2">&quot;cli&quot;</span>, <span class="nv">hostname</span><span class="o">=</span><span class="s2">&quot;loki&quot;</span>, <span class="nv">job</span><span class="o">=</span><span class="s2">&quot;stdin&quot;</span><span class="o">}</span>
</span><span class='line'>2020-11-11T12:45:20+02:00 <span class="o">{}</span> this is a <span class="nb">test</span>
</span><span class='line'>http://localhost:3100/loki/api/v1/query_range?direction<span class="o">=</span>BACKWARD<span class="p">&amp;</span><span class="nv">end</span><span class="o">=</span>1605091520778438972<span class="p">&amp;</span><span class="nv">limit</span><span class="o">=</span>30<span class="p">&amp;</span><span class="nv">query</span><span class="o">=</span>%7Bapp%3D%22cli%22%7D<span class="p">&amp;</span><span class="nv">start</span><span class="o">=</span>1605088455756745122
</span><span class='line'>Common labels: <span class="o">{</span><span class="nv">app</span><span class="o">=</span><span class="s2">&quot;cli&quot;</span>, <span class="nv">hostname</span><span class="o">=</span><span class="s2">&quot;loki&quot;</span>, <span class="nv">job</span><span class="o">=</span><span class="s2">&quot;stdin&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can pipe some more output to Loki:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;this is another test&quot;</span> <span class="p">|</span> promtail --stdin --client.url http://localhost:3100/loki/api/v1/push --client.external-labels<span class="o">=</span><span class="nv">app</span><span class="o">=</span>cli -server.disable
</span></code></pre></td></tr></table></div></figure>


<p>And querying our logs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>logcli --quiet --output raw query <span class="s1">&#39;{app=&quot;cli&quot;}&#39;</span>
</span><span class='line'>this is another <span class="nb">test</span>
</span><span class='line'>this is a <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Testing Loki Outside our VM</h2>

<p>Let&rsquo;s exit the VM and test Loki from our local workstation, first you will need to get the logcli for your OS, head over to the <a href="https://github.com/grafana/loki/releases">releases</a> page and get the binary of your choice.</p>

<p>I will be demonstrating using a mac:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget https://github.com/grafana/loki/releases/download/v2.0.0/logcli-darwin-amd64.zip
</span><span class='line'><span class="nv">$ </span>unzip logcli-darwin-amd64.zip
</span><span class='line'><span class="nv">$ </span>sudo mv logcli-darwin-amd64 /usr/local/bin/logcli
</span><span class='line'><span class="nv">$ </span>rm -f logcli-darwin-amd64.zip
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to tell logcli where our Loki server resides, so let&rsquo;s get the IP address of Loki:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>multipass info --all --format json <span class="p">|</span> jq -r <span class="s1">&#39;.info.loki.ipv4[]&#39;</span>
</span><span class='line'>192.168.64.19
</span></code></pre></td></tr></table></div></figure>


<p>We can either set the Loki host as an environment variable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">LOKI_ADDR</span><span class="o">=</span>http://192.168.64.19
</span></code></pre></td></tr></table></div></figure>


<p>or you can specify it using the <code>--addr</code> argument:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>logcli --addr<span class="o">=</span><span class="s2">&quot;http://192.168.64.19:3100&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the sake of simplicity and not having to type the <code>--addr</code> the whole time, I will be setting the Loki address as an environment variable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">LOKI_ADDR</span><span class="o">=</span><span class="s2">&quot;http://$(multipass info --all --format json | jq -r &#39;.info.loki.ipv4[]&#39;):3100&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And when we inspect our labels using logcli, we can see that we are getting our labels from Loki on our Multipass VM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>logcli labels
</span><span class='line'>http://192.168.64.19:3100/loki/api/v1/labels?end<span class="o">=</span>1605093229877731000<span class="p">&amp;</span><span class="nv">start</span><span class="o">=</span>1605089629877731000
</span><span class='line'>__name__
</span><span class='line'>app
</span><span class='line'>hostname
</span><span class='line'>job
</span></code></pre></td></tr></table></div></figure>


<h2>Write Logs to Loki using the Loki Docker Driver</h2>

<p>We have used promtail before to pipe logs to Loki and in this example we will be making use of the Loki Docker Logging Plugin to write data to Loki.</p>

<p>If you have docker installed, install the Loki plugin:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker plugin install <span class="se">\</span>
</span><span class='line'>  grafana/loki-docker-driver:latest <span class="se">\</span>
</span><span class='line'>  --alias loki <span class="se">\</span>
</span><span class='line'>  --grant-all-permissions
</span></code></pre></td></tr></table></div></figure>


<p>Now we will use a docker container to echo stdout to the loki docker driver, which will send the output to Loki.</p>

<p>Let&rsquo;s alias a command loki_echo that we will use to send our output to the docker container:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">alias</span> <span class="s1">&#39;loki_echo=docker run --rm -it --log-driver loki --log-opt loki-url=&quot;http://192.168.64.19:3100/loki/api/v1/push&quot; --log-opt loki-external-labels=&quot;app=echo-container&quot; busybox echo&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So every time we run <code>loki_echo {string}</code> we will run a docker container from the busybox image and pass the <code>{string}</code> as an argument to the echo command inside the container, which will be sent to the loki log driver and land up in Loki.</p>

<p>Let&rsquo;s push 100 log events to Loki:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ count</span><span class="o">=</span>0
</span><span class='line'><span class="nv">$ </span><span class="k">while</span> <span class="o">[</span> <span class="k">${</span><span class="nv">count</span><span class="k">}</span> !<span class="o">=</span> <span class="m">100</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'>    <span class="k">for</span> color in red blue white silver green<span class="p">;</span>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>      loki_echo <span class="s2">&quot;there are ${RANDOM} items of ${color} available&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">count</span><span class="o">=</span><span class="k">$((</span>count+1<span class="k">))</span>
</span><span class='line'>    <span class="k">done</span>
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'>
</span><span class='line'>there are <span class="m">26890</span> items of green available
</span><span class='line'>there are <span class="m">14856</span> items of red available
</span><span class='line'>there are <span class="m">31162</span> items of blue available
</span><span class='line'>there are <span class="m">23993</span> items of white available
</span><span class='line'>there are <span class="m">22310</span> items of silver available
</span><span class='line'>there are <span class="m">10700</span> items of green available
</span><span class='line'>there are <span class="m">14077</span> items of red available
</span><span class='line'>there are <span class="m">20642</span> items of blue available
</span><span class='line'>there are <span class="m">31576</span> items of white available
</span><span class='line'>there are <span class="m">26053</span> items of silver available
</span><span class='line'>there are <span class="m">2973</span> items of green available
</span><span class='line'>there are <span class="m">2203</span> items of red available
</span><span class='line'>there are <span class="m">8557</span> items of blue available
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>We can verify how many log events we have with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>logcli query <span class="s1">&#39;{app=&quot;echo-container&quot;}&#39;</span> --quiet --limit <span class="m">200</span> --output raw <span class="p">|</span> wc -l
</span><span class='line'>100
</span></code></pre></td></tr></table></div></figure>


<p>To see how many logs we have with the line &ldquo;blue&rdquo; in it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>logcli query <span class="s1">&#39;{app=&quot;echo-container&quot;} |= &quot;blue&quot;&#39;</span> --quiet --limit <span class="m">200</span> --output raw <span class="p">|</span> wc -l
</span><span class='line'>20
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s look for logs with blue or green and limit the results to 5:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>logcli query <span class="s1">&#39;{app=&quot;echo-container&quot;} |~ &quot;items of (blue|green)&quot;&#39;</span> --quiet --limit <span class="m">5</span> --output raw
</span><span class='line'>there are <span class="m">28985</span> items of green available
</span><span class='line'>there are <span class="m">10289</span> items of blue available
</span><span class='line'>there are <span class="m">12316</span> items of green available
</span><span class='line'>there are <span class="m">23775</span> items of blue available
</span><span class='line'>there are <span class="m">20</span> items of green available
</span></code></pre></td></tr></table></div></figure>


<h2>Teardown</h2>

<p>If you followed along, you can terminate your Multipass VM with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>multipass delete --purge loki
</span></code></pre></td></tr></table></div></figure>


<p>You can get the example code in my <strong><a href="https://github.com/ruanbekker/multipassfiles/tree/master/loki">multipassfiles github repository</a></strong></p>

<h2>Thanks</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Setup Alerting With Loki]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/11/06/how-to-setup-alerting-with-loki/"/>
    <updated>2020-11-06T15:13:53+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/11/06/how-to-setup-alerting-with-loki</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/98380823-bd948880-2051-11eb-8ab4-c8d5f5d3e612.png" alt="image" /></p>

<p>Recently Grafana Labs announced <strong><a href="https://grafana.com/blog/2020/10/28/loki-2.0-released-transform-logs-as-youre-querying-them-and-set-up-alerts-within-loki/">Loki v2</a></strong> and its awesome! Definitely check out their blog post on more details.</p>

<p>Loki has a index option called <strong>boltdb-shipper</strong>, which allows you to run Loki with only a object store and you <strong>no longer need a dedicated index store</strong> such as DynamoDB. You can extract labels from log lines at query time, which is CRAZY! And I really like how they&rsquo;ve implemented it, you can parse, filter and format like mad. I really like that.</p>

<p>And then generating alerts from any query, which we will go into today. Definitely check out <a href="https://grafana.com/blog/2020/10/28/loki-2.0-released-transform-logs-as-youre-querying-them-and-set-up-alerts-within-loki/">this blogpost</a> and <a href="https://grafana.com/blog/2020/11/04/video-top-three-features-of-the-new-loki-2.0/">this video</a> for more details on the features of Loki v2.</p>

<h2>What will we be doing today</h2>

<p>In this tutorial we will setup a alert using the Loki local ruler to alert us when we have <strong>high number of log events coming in</strong>. For example, let&rsquo;s say someone has debug logging enabled in their application and we want to send a alert to slack when it breaches the threshold.</p>

<p>I will simulate this with a <code>http-client</code> container which runs <code>curl</code> in a while loop to fire a bunch of http requests against the nginx container which logs to Loki, so we can see how the alerting works, and in this scenario we will alert to Slack.</p>

<p>And after that we will stop our http-client container to see how the alarm resolves when the log rate comes down again.</p>

<p>All the components are available in the <code>docker-compose.yml</code> on my <a href="https://github.com/ruanbekker/loki-alerts-docker">github repository</a></p>

<h2>Components</h2>

<p>Let&rsquo;s break it down and start with the loki config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>ruler:
</span><span class='line'>  storage:
</span><span class='line'>    type: local
</span><span class='line'>    local:
</span><span class='line'>      directory: /etc/loki/rules
</span><span class='line'>  rule_path: /tmp/loki/rules-temp
</span><span class='line'>  alertmanager_url: http://alertmanager:9093
</span><span class='line'>  ring:
</span><span class='line'>    kvstore:
</span><span class='line'>      store: inmemory
</span><span class='line'>  enable_api: true
</span><span class='line'>  enable_alertmanager_v2: true</span></code></pre></td></tr></table></div></figure>


<p>In the section of the loki config, I will be making use of the local ruler and map my alert rules under <code>/etc/loki/rules/</code> and we are also defining our alertmanager instance where these alerts should be shipped to.</p>

<p>In my rule definition <code>/etc/loki/rules/demo/rules.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>groups:
</span><span class='line'>  - name: rate-alerting
</span><span class='line'>    rules:
</span><span class='line'>      - alert: HighLogRate
</span><span class='line'>        expr: |
</span><span class='line'>          sum by (compose_service)
</span><span class='line'>            (rate({job="dockerlogs"}[1m]))
</span><span class='line'>            &gt; 60
</span><span class='line'>        for: 1m
</span><span class='line'>        labels:
</span><span class='line'>            severity: warning
</span><span class='line'>            team: devops
</span><span class='line'>            category: logs
</span><span class='line'>        annotations:
</span><span class='line'>            title: "High LogRate Alert"
</span><span class='line'>            description: "something is logging a lot"
</span><span class='line'>            impact: "impact"
</span><span class='line'>            action: "action"
</span><span class='line'>            dashboard: "https://grafana.com/service-dashboard"
</span><span class='line'>            runbook: "https://wiki.com"
</span><span class='line'>            logurl: "https://grafana.com/log-explorer"</span></code></pre></td></tr></table></div></figure>


<p>In my expression, I am using LogQL to return per second rate of all my docker logs within the last minute per compose service for my dockerlogs job and we are specifying that it should alert when the threshold is above 60.</p>

<p>As you can see I have a couple of <strong>labels and annotations</strong>, which becomes <strong>very useful</strong> when you have dashboard links, runbooks etc and you would like to map that to your alert. I am doing the mapping in my <code>alertmanager.yml</code> config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>route:
</span><span class='line'>...
</span><span class='line'>  receiver: 'default-catchall-slack'
</span><span class='line'>  routes:
</span><span class='line'>  - match:
</span><span class='line'>      severity: warning
</span><span class='line'>    receiver: warning-devops-slack
</span><span class='line'>    routes:
</span><span class='line'>    - match_re:
</span><span class='line'>        team: .*(devops).*
</span><span class='line'>      receiver: warning-devops-slack
</span><span class='line'>
</span><span class='line'>receivers:
</span><span class='line'>...
</span><span class='line'>- name: 'warning-devops-slack'
</span><span class='line'>  slack_configs:
</span><span class='line'>    - send_resolved: true
</span><span class='line'>      channel: '__SLACK_CHANNEL__'
</span><span class='line'>      title: ':fire::white_check_mark: []  '
</span><span class='line'>      text: &gt;-
</span><span class='line'>        
</span><span class='line'>          *Description:* 
</span><span class='line'>          *Severity:* ``
</span><span class='line'>          *Graph:* &lt;|:chart_with_upwards_trend:&gt;&lt;|:chart_with_upwards_trend:&gt; *Dashboard:* &lt;|:bar_chart:&gt; *Runbook:* &lt;|:spiral_note_pad:&gt;
</span><span class='line'>          *Details:*
</span><span class='line'>           - *:* ``
</span><span class='line'>          
</span><span class='line'>           - *Impact*: 
</span><span class='line'>           - *Receiver*: warning--slack
</span><span class='line'>        </span></code></pre></td></tr></table></div></figure>


<p>As you can see, when my alert matches nothing it will go to my catchall receiver, but when my label contains <code>devops</code> and the route the alert to my <code>warning-devops-slack</code> receiver, and then we will be parsing our labels and annotations to include the values in our alarm on slack.</p>

<h2>Demo</h2>

<p>Enough with the background details, and it&rsquo;s time to get into the action.</p>

<p>All the code for this demonstration will be available in my github repository: <strong><a href="https://github.com/ruanbekker/loki-alerts-docker">github.com/ruanbekker/loki-alerts-docker</a></strong></p>

<p>The docker-compose will have a container of <strong>grafana</strong>, <strong>alertmanager</strong>, <strong>loki</strong>, <strong>nginx</strong> and a <strong>http-client</strong>.</p>

<p>The http-client is curl in a while loop that will just make a bunch of http requests against the nginx container, which will be logging to loki.</p>

<h2>Get the source</h2>

<p>Get the code from my github repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/ruanbekker/loki-alerts-docker
</span><span class='line'>$ cd loki-alerts-docker</span></code></pre></td></tr></table></div></figure>


<p>You will need to replace the slack webhook url and the slack channel where you want your alerts to be sent to. This will take the environment variables and replace the values in <code>config/alertmanager.yml</code> (always check out the script first, before executing it)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ SLACK_WEBHOOK_URL="https://hooks.slack.com/services/xx/xx/xx" SLACK_CHANNEL="#notifications" ./parse_configs.sh</span></code></pre></td></tr></table></div></figure>


<p>You can double check by running <code>cat config/alertmanager.yml</code>, once you are done, boot the stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose up -d</span></code></pre></td></tr></table></div></figure>


<p>Open up grafana:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ open http://grafana.localdns.xyz:3000</span></code></pre></td></tr></table></div></figure>


<p>Use the initial user and password combination <code>admin/admin</code> and then reset your password:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98379039-7efdce80-204f-11eb-9c8a-3ed12a63cb14.png" alt="image" /></p>

<p>Browse for your labels on the log explorer section, in my example it will be <code>{job="dockerlogs"}</code>:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98379172-ace31300-204f-11eb-8e6c-3cf073afe771.png" alt="image" /></p>

<p>When we select our job=&ldquo;dockerlogs&rdquo; label, we will see our logs:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98379288-c71cf100-204f-11eb-911c-043a983bae6d.png" alt="image" /></p>

<p>As I explained earlier the query that we will be running in our ruler, can be checked what the rate currently is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sum by (compose_project, compose_service) (rate({job="dockerlogs"}[1m]))</span></code></pre></td></tr></table></div></figure>


<p>Which will look like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98379765-54604580-2050-11eb-9c90-5e0adf2bb586.png" alt="image" /></p>

<p>In the configured expression in our ruler config, we have set to alarm once the value goes above 60, we can validate this by running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sum by (compose_project, compose_service) (rate({job="dockerlogs"}[1m])) &gt; 60</span></code></pre></td></tr></table></div></figure>


<p>And we can verify that this is the case, and by now it should be alarming:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98379900-84a7e400-2050-11eb-87d0-ae52617d195e.png" alt="image" /></p>

<p>Head over to alertmanager:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ open http://alertmanager.localdns.xyz:9093</span></code></pre></td></tr></table></div></figure>


<p>We can see alertmanager is showing the alarm:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98380013-af923800-2050-11eb-8585-f7489bf722cb.png" alt="image" /></p>

<p>When we head over to slack, we can see our notification:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98380158-de101300-2050-11eb-8d73-20828124fab5.png" alt="image" /></p>

<p>So let&rsquo;s stop our http client:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose stop http-client
</span><span class='line'>Stopping http-client ... done</span></code></pre></td></tr></table></div></figure>


<p>Then we can see the logging stopped:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98380907-e0bf3800-2051-11eb-99c3-b3b9ac22bba5.png" alt="image" /></p>

<p>And in slack, we should see that the alarm recovered and we should see the notification:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98381360-722eaa00-2052-11eb-8bb4-07cdc8ffa7ee.png" alt="image" /></p>

<p>Then you can terminate your stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose down</span></code></pre></td></tr></table></div></figure>


<p>Pretty epic stuff right? I really love how cost effective Loki is as logging use to be so expensive to run and especially maintain, Grafana Labs are really doing some epic work and my hat goes off to them.</p>

<h2>Thanks</h2>

<p>I hope you found this useful, feel free to reach out to me on Twitter <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> or visit me on my website <strong><a href="https://ruan.dev">ruan.dev</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending Slack Messages With Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/11/06/sending-slack-messages-with-python/"/>
    <updated>2020-11-06T13:58:50+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/11/06/sending-slack-messages-with-python</id>
    <content type="html"><![CDATA[<p>In this post I will demonstrate how to send messages to slack using python based on the status of an event.</p>

<p>We will keep it basic, that when something is down or up, it should send a slack message with the status, message, color and embed your grafana dashboard links inside the alert (or any links that you would like).</p>

<h2>Create a Webhook</h2>

<p>From a previous post on <a href="https://blog.ruanbekker.com/blog/2019/04/18/setup-a-slack-webhook-for-sending-messages-from-applications/">how to use curl to send slack messages</a> I showed how to create your webhook, so you can just follow that post if you want to follow along.</p>

<p>Once you have a webhook, which will look like <code>https://hooks.slack.com/services/xx/yy/zz</code>, you are good to follow to the next step.</p>

<h2>Creating the Script</h2>

<p>First we need requests:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip install requests</span></code></pre></td></tr></table></div></figure>


<p>Then we will create the <code>slack_notifier.py</code>, just ensure that you replace your slack webhook url and slack channel to yours:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'>
</span><span class='line'><span class="n">SLACK_WEBHOOK_URL</span> <span class="o">=</span> <span class="s">&#39;https://hooks.slack.com/&lt;your&gt;/&lt;slack&gt;/&lt;webhook&gt;&#39;</span>
</span><span class='line'><span class="n">SLACK_CHANNEL</span> <span class="o">=</span> <span class="s">&quot;#your-slack-channel&quot;</span>
</span><span class='line'><span class="n">ALERT_STATE</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">alert_map</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;emoji&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;up&quot;</span><span class="p">:</span> <span class="s">&quot;:white_check_mark:&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;down&quot;</span><span class="p">:</span> <span class="s">&quot;:fire:&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">&quot;text&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;up&quot;</span><span class="p">:</span> <span class="s">&quot;RESOLVED&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;down&quot;</span><span class="p">:</span> <span class="s">&quot;FIRING&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">&quot;message&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;up&quot;</span><span class="p">:</span> <span class="s">&quot;Everything is good!&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;down&quot;</span><span class="p">:</span> <span class="s">&quot;Stuff is burning!&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">&quot;color&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;up&quot;</span><span class="p">:</span> <span class="s">&quot;#32a852&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;down&quot;</span><span class="p">:</span> <span class="s">&quot;#ad1721&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">alert_to_slack</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">log_url</span><span class="p">,</span> <span class="n">metric_url</span><span class="p">):</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;text&quot;</span><span class="p">:</span> <span class="s">&quot;AlertManager&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;username&quot;</span><span class="p">:</span> <span class="s">&quot;Notifications&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;channel&quot;</span><span class="p">:</span> <span class="n">SLACK_CHANNEL</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;attachments&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s">&quot;text&quot;</span><span class="p">:</span> <span class="s">&quot;{emoji} [*{state}*] Status Checker</span><span class="se">\n</span><span class="s"> {message}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
</span><span class='line'>                <span class="n">emoji</span><span class="o">=</span><span class="n">alert_map</span><span class="p">[</span><span class="s">&quot;emoji&quot;</span><span class="p">][</span><span class="n">status</span><span class="p">],</span>
</span><span class='line'>                <span class="n">state</span><span class="o">=</span><span class="n">alert_map</span><span class="p">[</span><span class="s">&quot;text&quot;</span><span class="p">][</span><span class="n">status</span><span class="p">],</span>
</span><span class='line'>                <span class="n">message</span><span class="o">=</span><span class="n">alert_map</span><span class="p">[</span><span class="s">&quot;message&quot;</span><span class="p">][</span><span class="n">status</span><span class="p">]</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="s">&quot;color&quot;</span><span class="p">:</span> <span class="n">alert_map</span><span class="p">[</span><span class="s">&quot;color&quot;</span><span class="p">][</span><span class="n">status</span><span class="p">],</span>
</span><span class='line'>            <span class="s">&quot;attachment_type&quot;</span><span class="p">:</span> <span class="s">&quot;default&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&quot;actions&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="s">&quot;Logs&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&quot;text&quot;</span><span class="p">:</span> <span class="s">&quot;Logs&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&quot;type&quot;</span><span class="p">:</span> <span class="s">&quot;button&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&quot;style&quot;</span><span class="p">:</span> <span class="s">&quot;primary&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&quot;url&quot;</span><span class="p">:</span> <span class="n">log_url</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="s">&quot;Metrics&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&quot;text&quot;</span><span class="p">:</span> <span class="s">&quot;Metrics&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&quot;type&quot;</span><span class="p">:</span> <span class="s">&quot;button&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&quot;style&quot;</span><span class="p">:</span> <span class="s">&quot;primary&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&quot;url&quot;</span><span class="p">:</span> <span class="n">metric_url</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">}]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">SLACK_WEBHOOK_URL</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">r</span><span class="o">.</span><span class="n">status_code</span>
</span><span class='line'>
</span><span class='line'><span class="n">alert_to_slack</span><span class="p">(</span><span class="n">ALERT_STATE</span><span class="p">,</span> <span class="s">&quot;https://grafana-logs.dashboard.local&quot;</span><span class="p">,</span> <span class="s">&quot;https://grafana-metrics.dashboard.local&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Testing it out</h2>

<p>Time to test it out, so let&rsquo;s assume something is down, then we can react on that event and action the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">python</span> <span class="n">slack_notifier</span><span class="o">.</span><span class="n">py</span> <span class="n">down</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which will look like the following on slack:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98374881-fdf00880-2049-11eb-9d7f-7599665871db.png" alt="image" /></p>

<p>And when recovery is in place, we can action the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">python</span> <span class="n">slack_notifier</span><span class="o">.</span><span class="n">py</span> <span class="n">up</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which will look like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98374958-1eb85e00-204a-11eb-8ab0-c6a8a0640752.png" alt="image" /></p>

<h2>Thanks</h2>

<p>That was a basic example on how you can use python to send slack messages.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running SSH Commands on AWS EC2 Instances With Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/11/02/running-ssh-commands-on-aws-ec2-instances-with-python/"/>
    <updated>2020-11-02T09:55:43+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/11/02/running-ssh-commands-on-aws-ec2-instances-with-python</id>
    <content type="html"><![CDATA[<p>In this quick post I will demonstrate how to discover a EC2 Instance&rsquo;s Private IP Address using the AWS API by using Tags then use Paramiko in Python to SSH to the EC2 instance and run SSH commands on the target instance.</p>

<p>Install the required dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ virtualenv -p python3 .venv
</span><span class='line'>$ source .venve/bin/activate
</span><span class='line'>$ pip install boto3 paramiko</span></code></pre></td></tr></table></div></figure>


<p>I have my development profile for aws configured under <code>dev</code> as can seen below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws --profile dev configure list
</span><span class='line'>      Name                    Value             Type    Location
</span><span class='line'>      ----                    -----             ----    --------
</span><span class='line'>   profile                      dev           manual    --profile
</span><span class='line'>access_key     ****************xxxx      assume-role
</span><span class='line'>secret_key     ****************xxxx      assume-role
</span><span class='line'>    region                eu-west-1      config-file    ~/.aws/config</span></code></pre></td></tr></table></div></figure>


<p>First we need to discover the private ip address from the api by referencing tags, and in this example we will use the <code>Name</code> tag:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import boto3
</span><span class='line'>ec2 = boto3.Session(profile_name='dev', region_name='eu-west-1').client('ec2')
</span><span class='line'>
</span><span class='line'>target_instances = ec2.describe_instances(
</span><span class='line'>    Filters=[{'Name':'tag:Name','Values':['my-demo-ec2-instance']}]
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>ec2_instances = []
</span><span class='line'>for each_instance in target_instances['Reservations']:
</span><span class='line'>    for found_instance in each_instance['Instances']:
</span><span class='line'>        ec2_instances.append(found_instance['PrivateIpAddress'])
</span><span class='line'>
</span><span class='line'># ec2_instances
</span><span class='line'># ['172.31.2.89']</span></code></pre></td></tr></table></div></figure>


<p>So we are instantiating a ec2 instance with our configured dev profile, then we describe all our instances using the tag key <code>Name</code> and value <code>my-demo-ec2-instance</code> and then access the private ip address and append it to our <code>ec2_instances</code> list.</p>

<p>Next we want to define the commands that we want to run on the target ec2 instance:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>commands = [
</span><span class='line'>    "echo hi",
</span><span class='line'>    "whoami",
</span><span class='line'>    "hostname"
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<p>In my case I only have 1 ec2 instance with the name <code>my-demo-ec2-instance</code>, but if you have more you can just loop through the list and perform the actions.</p>

<p>Next we want to establish the SSH connection:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>k = paramiko.RSAKey.from_private_key_file("/Users/ruan/.ssh/id_rsa")
</span><span class='line'>c = paramiko.SSHClient()
</span><span class='line'>c.set_missing_host_key_policy(paramiko.AutoAddPolicy())
</span><span class='line'>c.connect(hostname=ec2_instances[0], username="ruan", pkey=k, allow_agent=False, look_for_keys=False)</span></code></pre></td></tr></table></div></figure>


<p>Once our SSH connection has established, we can loop through our commands and execute them:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for command in commands:
</span><span class='line'>    print("running command: {}".format(command))
</span><span class='line'>    stdin , stdout, stderr = c.exec_command(command)
</span><span class='line'>    print(stdout.read())
</span><span class='line'>    print(stderr.read())</span></code></pre></td></tr></table></div></figure>


<p>Which will output the folling:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>running command: echo hi
</span><span class='line'>b'hi\n'
</span><span class='line'>b''
</span><span class='line'>running command: whoami
</span><span class='line'>b'ruan\n'
</span><span class='line'>b''
</span><span class='line'>running command: hostname
</span><span class='line'>b'ip-172-31-2-89\n'
</span><span class='line'>b''</span></code></pre></td></tr></table></div></figure>


<p>And then close the SSH connection:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>c.close()</span></code></pre></td></tr></table></div></figure>


<p>And the full script will look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="n">ssh_username</span> <span class="o">=</span> <span class="s">&quot;ruan&quot;</span>
</span><span class='line'><span class="n">ssh_key_file</span> <span class="o">=</span> <span class="s">&quot;/Users/ruan/.ssh/id_rsa&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">ec2</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">profile_name</span><span class="o">=</span><span class="s">&#39;dev&#39;</span><span class="p">,</span> <span class="n">region_name</span><span class="o">=</span><span class="s">&#39;eu-west-1&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s">&#39;ec2&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">target_instances</span> <span class="o">=</span> <span class="n">ec2</span><span class="o">.</span><span class="n">describe_instances</span><span class="p">(</span>
</span><span class='line'>    <span class="n">Filters</span><span class="o">=</span><span class="p">[{</span><span class="s">&#39;Name&#39;</span><span class="p">:</span><span class="s">&#39;tag:Name&#39;</span><span class="p">,</span><span class="s">&#39;Values&#39;</span><span class="p">:[</span><span class="s">&#39;my-demo-ec2-instance&#39;</span><span class="p">]}]</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">ec2_instances</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">each_instance</span> <span class="ow">in</span> <span class="n">target_instances</span><span class="p">[</span><span class="s">&#39;Reservations&#39;</span><span class="p">]:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">found_instance</span> <span class="ow">in</span> <span class="n">each_instance</span><span class="p">[</span><span class="s">&#39;Instances&#39;</span><span class="p">]:</span>
</span><span class='line'>        <span class="n">ec2_instances</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">found_instance</span><span class="p">[</span><span class="s">&#39;PrivateIpAddress&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="n">commands</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s">&quot;echo hi&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;whoami&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;hostname&quot;</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">k</span> <span class="o">=</span> <span class="n">paramiko</span><span class="o">.</span><span class="n">RSAKey</span><span class="o">.</span><span class="n">from_private_key_file</span><span class="p">(</span><span class="n">ssh_key_file</span><span class="p">)</span>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="n">paramiko</span><span class="o">.</span><span class="n">SSHClient</span><span class="p">()</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">set_missing_host_key_policy</span><span class="p">(</span><span class="n">paramiko</span><span class="o">.</span><span class="n">AutoAddPolicy</span><span class="p">())</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">hostname</span><span class="o">=</span><span class="n">ec2_instances</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">username</span><span class="o">=</span><span class="n">ssh_username</span><span class="p">,</span> <span class="n">pkey</span><span class="o">=</span><span class="n">k</span><span class="p">,</span> <span class="n">allow_agent</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">look_for_keys</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">command</span> <span class="ow">in</span> <span class="n">commands</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;running command: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">command</span><span class="p">))</span>
</span><span class='line'>    <span class="n">stdin</span> <span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">exec_command</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">stdout</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">stderr</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
