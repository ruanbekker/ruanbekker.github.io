<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 12factor | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/12factor/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-11-11T16:49:11-05:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Set Docker Environment Variables During Build Time]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/07/set-docker-environment-variables-during-build-time/"/>
    <updated>2018-04-07T09:51:35-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/07/set-docker-environment-variables-during-build-time</id>
    <content type="html"><![CDATA[<p>When using that <code>ARG</code> option in your Dockerfile, you can specify the <code>--build-args</code> option to define the value for the key that you specify in your Dockerfile to use for a environment variable as an example.</p>

<p>Today we will use the <code>arg</code> and <code>env</code> to set environment variables at build time.</p>

<h2>The Dockerfile:</h2>

<p>Our Dockerfile</p>

<pre><code class="dockerfile">FROM alpine:edge
ARG NAME
ENV OWNER=${NAME:-NOT_DEFINED}
CMD ["sh", "-c", "echo env var: ${OWNER}"]
</code></pre>

<p>Building our Image, we will pass the value to our NAME argument:</p>

<pre><code class="bash">$ docker build --build-arg NAME=james -t ruan:test .
</code></pre>

<p>Now when we run our container, we will notice that the build time argument has passed through to our environment variable from the running container:</p>

<pre><code class="bash">$ docker run -it ruan:test 
env var: james
</code></pre>

<p>When we build the image without specifying build arguments, and running the container:</p>

<pre><code class="bash">$ docker build -t ruan:test .
$ docker run -it ruan:test 
env var: NOT_DEFINED
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Environment Substitution With Dockerfile]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/07/docker-environment-substitution-with-dockerfile/"/>
    <updated>2018-04-07T09:18:20-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/07/docker-environment-substitution-with-dockerfile</id>
    <content type="html"><![CDATA[<p>The <a href="https://12factor.net/">12 Factor</a> way, is a general guideline that provides best practices when building applications. One of them is using environment variables to store application configuration.</p>

<h2>What will we be doing:</h2>

<p>In this post we will build a simple docker application that returns the environment variable&rsquo;s value to standard out. We are using environment substitution, so if the environment variable is not provided, we will set a default value of <code>NOT_DEFINED</code>.</p>

<p>We will have the environment variable <code>OWNER</code> and when no value is set for that Environment Variable, the <code>NOT_DEFINED</code> value will be returned.</p>

<h2>The Dockerfile</h2>

<p>Our Dockerfile:</p>

<pre><code class="dockerfile">FROM alpine:edge
ENV OWNER=${OWNER:-NOT_DEFINED}
CMD ["sh", "-c", "echo env var: ${OWNER}"]
</code></pre>

<p>Building the image:</p>

<pre><code class="bash">$ docker build -t test:envs .
</code></pre>

<h2>Putting it to action:</h2>

<p>Now we will run a container and pass the <code>OWNER</code> environment variable as an option:</p>

<pre><code class="bash">$ docker run -it -e OWNER=ruan test:envs . 
env var: ruan
</code></pre>

<p>When we run a container without specifying the environment variable:</p>

<pre><code class="bash">$ docker run -it ruan:test 
env var: NOT_DEFINED
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://stackify.com/config-values-docker-containers-environment-variables/">https://stackify.com/config-values-docker-containers-environment-variables/</a></li>
<li><a href="https://tryolabs.com/blog/2015/03/26/configurable-docker-containers-for-multiple-environments/">https://tryolabs.com/blog/2015/03/26/configurable-docker-containers-for-multiple-environments/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
