<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Alpine | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/alpine/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-06-13T20:10:08-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup a KVM Hypervisor on Ubuntu to Host Virtual Machines]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/02/20/setup-a-kvm-hypervisor-on-ubuntu-to-host-virtual-machines/"/>
    <updated>2018-02-20T06:21:56-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/02/20/setup-a-kvm-hypervisor-on-ubuntu-to-host-virtual-machines</id>
    <content type="html"><![CDATA[<p>Today we will setup a KVM (Kernel Virtual Machine) Hypervisor, where we can host Virtual Machines. In order to do so, your host needs to Support Hardware Virtualization.</p>

<h2>What we will be doing today:</h2>

<ul>
<li>Check if your host supports Hardware Virtualization</li>
<li>Setup the KVM Hypervisor</li>
<li>Setup a Alpine VM</li>
</ul>


<h2>Check for Hardware Virtualization Support:</h2>

<p>We will install the package required to do the check:</p>

<pre><code class="bash">$ sudo apt update &amp;&amp; sudo apt install cpu-checker -y
</code></pre>

<p>Once that is installed, run <code>kvm-ok</code> and if its supported, your output should look something like this:</p>

<pre><code class="bash">$ kvm-ok
INFO: /dev/kvm exists
KVM acceleration can be used
</code></pre>

<h2>Installing KVM</h2>

<p>Update your System and get the Packages required to Setup KVM:</p>

<pre><code class="bash">$ sudo apt update &amp;&amp; sudo apt upgrade -y
$ apt install bridge-utils qemu-kvm libvirt-bin virtinst -y
</code></pre>

<p>Add your user to the libvirtd group:</p>

<pre><code class="bash">$ sudo usermod -G libvirtd $USER
</code></pre>

<p>Check that the libvirtd service is running:</p>

<pre><code class="bash">$ sudo systemctl is-active libvirtd
active
</code></pre>

<p>You will also find that there is a new interface configured called <code>virbr0</code> in my case.</p>

<h2>Provision the Alpine VM and Setup OpenSSH:</h2>

<p>Get the ISO:</p>

<ul>
<li><a href="https://alpinelinux.org/downloads/">https://alpinelinux.org/downloads/</a></li>
</ul>


<pre><code class="bash">$ wget http://dl-cdn.alpinelinux.org/alpine/v3.7/releases/x86_64/alpine-virt-3.7.0-x86_64.iso
</code></pre>

<p>Provision the VM:</p>

<pre><code class="bash">$ virt-install \
--name alpine1 \
--ram 256 \
--disk path=/var/lib/libvirt/images/alpine1.img,size=8 \
--vcpus 1 \
--os-type linux \
--os-variant generic \
--network bridge:virbr0,model=virtio \
--graphics none \
--console pty,target_type=serial \
--cdrom ./alpine-virt-3.7.0-x86_64.iso 
</code></pre>

<p>After this, you will be dropped into the console:</p>

<pre><code class="bash">Starting install...
Allocating 'alpine1.img'                                                                                                           |   8 GB  00:00:01
Creating domain...                                                                                                                 |    0 B  00:00:00
Connected to domain alpine1
Escape character is ^]

ISOLINUX 6.04 6.04-pre1  Copyright (C) 1994-2015 H. Peter Anvin et al
boot:

   OpenRC 0.24.1.a941ee4a0b is starting up Linux 4.9.65-1-virthardened (x86_64)

Welcome to Alpine Linux 3.7
Kernel 4.9.65-1-virthardened on an x86_64 (/dev/ttyS0)

localhost login:
</code></pre>

<p>Login with the <code>root</code> user and no password, then setup the VM by running <code>setup-alpine</code>:</p>

<pre><code class="bash">localhost login: root
Welcome to Alpine!

localhost:~# setup-alpine
</code></pre>

<p>After completing the prompts reboot the VM by running <code>reboot</code>, then you will be dropped out of the console. Check the status of the reboot:</p>

<pre><code class="bash">$ virsh list
 Id    Name                           State
----------------------------------------------------
 2     alpine1                        running
</code></pre>

<p>As we can see our guest is running, lets console to our guest, provide the root user and password that you provided during the setup phase:</p>

<pre><code class="bash">$ virsh console 2
Connected to domain alpine1
Escape character is ^]

alpine1 login: root
Password:
Welcome to Alpine!
</code></pre>

<p>Setup OpenSSH so that we can SSH to our guest over the network:</p>

<pre><code class="bash">$ apk update
$ apk add openssh
</code></pre>

<p>Configure SSH to accept Root Passwords, this is not advisable for production environments, but for testing this is okay. For Production servers, we will rather look at Key Based Authentication etc.</p>

<pre><code class="bash">$ sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config
$ /etc/init.d/sshd restart
</code></pre>

<p>Get the IP Address:</p>

<pre><code>$ ifconfig
eth0      Link encap:Ethernet  HWaddr 52:54:00:D0:48:0C
          inet addr:192.168.122.176  Bcast:192.168.122.255  Mask:255.255.255.0
          inet6 addr: fe80::5054:ff:fed0:480c/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:55 errors:0 dropped:28 overruns:0 frame:0
          TX packets:34 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:4545 (4.4 KiB)  TX bytes:3345 (3.2 KiB)
</code></pre>

<p>Exit the guest by running <code>exit</code> and <code>Ctrl + ]</code> to exit the console session.</p>

<p>Now SSH to your Alpine VM:</p>

<pre><code class="bash">$ ssh root@192.168.122.176
root@192.168.122.176's password:
Welcome to Alpine!
</code></pre>

<h2>Some Useful Commands:</h2>

<p>List Running VMs:</p>

<pre><code>$ virsh list
 Id    Name                           State
----------------------------------------------------
 3     alpine1                        running
</code></pre>

<p>Shutdown a VM:</p>

<pre><code class="bash">$ virsh shutdown alpine1
Domain alpine1 is being shutdown
</code></pre>

<p>List all VMs:</p>

<pre><code class="bash">$ virsh list --all
 Id    Name                           State
----------------------------------------------------
 -     alpine1                        shut off
</code></pre>

<p>Delete a VM:</p>

<pre><code class="bash">$ virsh shutdown alpine1 #or to force shutdown:
$ virsh destroy alpine1
$ virsh undefine alpine1
</code></pre>

<p>Any future KVM posts will be tagged under <a href="http://blog.ruanbekker.com/blog/categories/kvm?source_site=blog.ruanbekker.com?source_category=kvm">KVM</a> and Alpine posts will be available under the <a href="http://blog.ruanbekker.com/blog/categories/alpine?source_site=blog.ruanbekker.com?source_category=kvm">Alpine</a> tag.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending Mail With SSMTP on Alpine Linux]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/09/sending-mail-with-ssmtp-on-alpine-linux/"/>
    <updated>2017-10-09T16:36:35-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/09/sending-mail-with-ssmtp-on-alpine-linux</id>
    <content type="html"><![CDATA[<p>Quick Post on how to use ssmtp on Alpine Linux to Send Mail:</p>

<h2>Update and Install SSMTP</h2>

<pre><code class="bash">$ apk update
$ apk add ssmtp
</code></pre>

<h2>Configure SSMTP</h2>

<pre><code class="bash">$ cat &gt; /etc/ssmtp/ssmtp.conf &lt;&lt; EOF
root=postmaster
mailhub=mail.domain.com:25
hostname=`hostname`
FromLineOverride=YES
EOF
</code></pre>

<h2>Create the Mail Content</h2>

<pre><code class="bash">$ cat &gt; mail.txt &lt;&lt; EOF
To: recipient@domain.com
From: sender@domain.com
Subject: Mail with SSMTP

Hello, this is a test mail.
EOF
</code></pre>

<h2>Testing Mail Delivery</h2>

<pre><code class="bash">$ ssmtp recipient@domain.com &lt; file.txt
</code></pre>

<h2>Related:</h2>

<ul>
<li><a href="https://support.cloud.engineyard.com/hc/en-us/articles/205407478-Set-Up-SSMTP-for-Mail-Relay-to-AuthSMTP">Using Gmail as a Relay Host</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Alpine Nginx PHP-Fpm Image on Docker for PHP Applications]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/08/26/building-a-alpine-nginx-php-fpm-image-on-docker-for-php-applications/"/>
    <updated>2017-08-26T20:41:16-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/08/26/building-a-alpine-nginx-php-fpm-image-on-docker-for-php-applications</id>
    <content type="html"><![CDATA[<p>A Post on Building a Alpine Based Image that will serve PHP Pages, using Nginx and PHP-FPM5.</p>

<p>I have a lot of modules enabled, which might not be neccesary, but in my case I wanted to have a couple of them enabled, for testing.</p>

<h2>One of the Requirements:</h2>

<p>One of the requirements was that I needed SMTP support from the container as I am using <a href="https://startbootstrap.com/template-overviews/freelancer/">Startbootstrap Freelancer Theme</a>, which I configured to relay mail from the contact from to one of my external relay hosts.</p>

<h2>Our Directory Structure:</h2>

<p>Our data that we will be working with will consist of our <code>Dockerfile</code>, our <code>website files</code>, <code>nginx config</code>, and a <code>wrapper script</code> that will control nginx and php-fpm5 processes:</p>

<pre><code class="bash Directory Structure">.
|-- Dockerfile
|-- README.md
|-- html
|   |-- css
|   |-- fonts
|   |-- img
|   |-- index.html
|   |-- js
|   `-- mail
|       `-- contact.php
|-- nginx.conf
|-- start_nginx.sh
|-- start_php-fpm5.sh
`-- wrapper.sh
</code></pre>

<h2>Going into Some Detail:</h2>

<p>First, our <code>Dockerfile</code>, which you will see I started the image from Apline:</p>

<pre><code class="docker Dockerfile">FROM alpine:edge

RUN apk update \
    &amp;&amp; apk add nginx \
    &amp;&amp; adduser -D -u 1000 -g 'www' www \
    &amp;&amp; mkdir /www \
    &amp;&amp; chown -R www:www /var/lib/nginx \
    &amp;&amp; chown -R www:www /www \
    &amp;&amp; rm -rf /etc/nginx/nginx.conf

ENV PHP_FPM_USER="www"
ENV PHP_FPM_GROUP="www"
ENV PHP_FPM_LISTEN_MODE="0660"
ENV PHP_MEMORY_LIMIT="512M"
ENV PHP_MAX_UPLOAD="50M"
ENV PHP_MAX_FILE_UPLOAD="200"
ENV PHP_MAX_POST="100M"
ENV PHP_DISPLAY_ERRORS="On"
ENV PHP_DISPLAY_STARTUP_ERRORS="On"
ENV PHP_ERROR_REPORTING="E_COMPILE_ERROR\|E_RECOVERABLE_ERROR\|E_ERROR\|E_CORE_ERROR"
ENV PHP_CGI_FIX_PATHINFO=0
ENV TIMEZONE="Africa/Johannesburg"

RUN apk add curl \
    ssmtp \
    tzdata \
    php5-fpm \
    php5-mcrypt \
    php5-soap \
    php5-openssl \
    php5-gmp \
    php5-pdo_odbc \
    php5-json \
    php5-dom \
    php5-pdo \
    php5-zip \
    php5-mysql \
    php5-mysqli \
    php5-sqlite3 \
    php5-pdo_pgsql \
    php5-bcmath \
    php5-gd \
    php5-odbc \
    php5-pdo_mysql \
    php5-pdo_sqlite \
    php5-gettext \
    php5-xmlreader \
    php5-xmlrpc \
    php5-bz2 \
    php5-iconv \
    php5-pdo_dblib \
    php5-curl \
    php5-ctype

RUN sed -i "s|;listen.owner\s*=\s*nobody|listen.owner = ${PHP_FPM_USER}|g" /etc/php5/php-fpm.conf \
    &amp;&amp; sed -i "s|;listen.group\s*=\s*nobody|listen.group = ${PHP_FPM_GROUP}|g" /etc/php5/php-fpm.conf \
    &amp;&amp; sed -i "s|;listen.mode\s*=\s*0660|listen.mode = ${PHP_FPM_LISTEN_MODE}|g" /etc/php5/php-fpm.conf \
    &amp;&amp; sed -i "s|user\s*=\s*nobody|user = ${PHP_FPM_USER}|g" /etc/php5/php-fpm.conf \
    &amp;&amp; sed -i "s|group\s*=\s*nobody|group = ${PHP_FPM_GROUP}|g" /etc/php5/php-fpm.conf \
    &amp;&amp; sed -i "s|;log_level\s*=\s*notice|log_level = notice|g" /etc/php5/php-fpm.conf \
    &amp;&amp; sed -i 's/include\ \=\ \/etc\/php5\/fpm.d\/\*.conf/\;include\ \=\ \/etc\/php5\/fpm.d\/\*.conf/g' /etc/php5/php-fpm.conf

RUN sed -i "s|display_errors\s*=\s*Off|display_errors = ${PHP_DISPLAY_ERRORS}|i" /etc/php5/php.ini \
    &amp;&amp; sed -i "s|display_startup_errors\s*=\s*Off|display_startup_errors = ${PHP_DISPLAY_STARTUP_ERRORS}|i" /etc/php5/php.ini \
    &amp;&amp; sed -i "s|error_reporting\s*=\s*E_ALL &amp; ~E_DEPRECATED &amp; ~E_STRICT|error_reporting = ${PHP_ERROR_REPORTING}|i" /etc/php5/php.ini \
    &amp;&amp; sed -i "s|;*memory_limit =.*|memory_limit = ${PHP_MEMORY_LIMIT}|i" /etc/php5/php.ini \
    &amp;&amp; sed -i "s|;*upload_max_filesize =.*|upload_max_filesize = ${PHP_MAX_UPLOAD}|i" /etc/php5/php.ini \
    &amp;&amp; sed -i "s|;*max_file_uploads =.*|max_file_uploads = ${PHP_MAX_FILE_UPLOAD}|i" /etc/php5/php.ini \
    &amp;&amp; sed -i "s|;*post_max_size =.*|post_max_size = ${PHP_MAX_POST}|i" /etc/php5/php.ini \
    &amp;&amp; sed -i "s|;*cgi.fix_pathinfo=.*|cgi.fix_pathinfo= ${PHP_CGI_FIX_PATHINFO}|i" /etc/php5/php.ini
    &amp;&amp; sed -i 's/smtp_port\ =\ 25/smtp_port\ =\ 81/g' /etc/php5/php.ini \
    &amp;&amp; sed -i 's/SMTP\ =\ localhost/SMTP\ =\ mail.bekkersolutions.com/g' /etc/php5/php.ini \
    &amp;&amp; sed -i 's/;sendmail_path\ =/sendmail_path\ =\ \/usr\/sbin\/sendmail\ -t/g' /etc/php5/php.ini 

RUN rm -rf /etc/localtime \
    &amp;&amp; ln -s /usr/share/zoneinfo/${TIMEZONE} /etc/localtime \
    &amp;&amp; echo "${TIMEZONE}" &gt; /etc/timezone \
    &amp;&amp; sed -i "s|;*date.timezone =.*|date.timezone = ${TIMEZONE}|i" /etc/php5/php.ini \ 
    &amp;&amp; echo 'sendmail_path = "/usr/sbin/ssmtp -t "' &gt; /etc/php5/conf.d/mail.ini \
    &amp;&amp; sed -i 's/mailhub=mail/mailhub=mail.domain.com\:81/g' /etc/ssmtp/ssmtp.conf 

COPY nginx.conf /etc/nginx/nginx.conf
COPY index.php /www/index.php
COPY test.html /www/test.html
COPY start_nginx.sh /start_nginx.sh
COPY start_php-fpm5.sh /start_php-fpm5.sh
COPY wrapper.sh /wrapper.sh

RUN chmod +x /start_nginx.sh /start_php-fpm5.sh /wrapper.sh

CMD ["/wrapper.sh"]
</code></pre>

<p>Next, our <code>nginx.conf</code> configuration file:</p>

<pre><code class="nginx nginx.conf">user                            www;
worker_processes                1;

error_log                       /var/log/nginx/error.log warn;
pid                             /var/run/nginx.pid;

events {
    worker_connections          1024;
}

http {
    include                     /etc/nginx/mime.types;
    default_type                application/octet-stream;
    sendfile                    on;
    access_log                  /var/log/nginx/access.log;
    keepalive_timeout           3000;

    server {
        listen                  80;
        root                    /www;
        index                   index.html index.htm index.php;
        server_name             _;
        client_max_body_size    32m;
        error_page              500 502 503 504  /50x.html;

        location = /50x.html {
              root              /var/lib/nginx/html;
        }

        location ~ \.php$ {
              fastcgi_pass      127.0.0.1:9000;
              fastcgi_index     index.php;
              include           fastcgi.conf;
        }
    }
}
</code></pre>

<p>Then our directory, <code>html</code>  that will consist our websites data, for a simple example, I will create a sample <code>index.php</code> page which can be used:</p>

<pre><code class="php html/index.php">&lt;?php
$word = "foo";
echo "The word is: $word\n";
?&gt;
</code></pre>

<p>Then, following our <code>wrapper.sh</code> script that will start our <code>php-fpm5</code>, and <code>nginx</code> processes, and then monitor these processes, if one of the processes have to exit, the wrapper script will return a exit code, which will result the container to exit, if there is anything wrong with the service:</p>

<p>The PHP-FPM script:</p>

<pre><code class="bash start_php-fpm5.sh">#!/bin/sh
/usr/bin/php-fpm5
</code></pre>

<p>The Nginx Script:</p>

<pre><code class="bash start_nginx.sh">#!/bin/sh
/usr/sbin/nginx -c /etc/nginx/nginx.conf
</code></pre>

<p>The Wrapper Script:</p>

<pre><code class="bash wrapper.sh">#!/bin/sh

/start_php-fpm5.sh -D
status=$?
if [ $status -ne 0 ]; then
  echo "php-fpm5 Failed: $status"
  exit $status
  else echo "Starting PHP-FPM: OK"
fi

sleep 2

/start_nginx.sh -D
status=$?
if [ $status -ne 0 ]; then
  echo "Nginx Failed: $status"
  exit $status
  else echo "Starting Nginx: OK"
fi

sleep 2

while /bin/true; do
  ps aux | grep 'php-fpm: master process' | grep -q -v grep
  PHP_FPM_STATUS=$?
  echo "Checking PHP-FPM, Status Code: $PHP_FPM_STATUS"
  sleep 2

  ps aux | grep 'nginx: master process' | grep -q -v grep
  NGINX_STATUS=$?
  echo "Checking NGINX, Status Code: $NGINX_STATUS"
  sleep 2

  if [ $PHP_FPM_STATUS -ne 0 ];
    then
      echo "$(date +%F_%T) FATAL: PHP-FPM Raised a Status Code of $PHP_FPM_STATUS and exited"
      exit -1

   elif [ $NGINX_STATUS -ne 0 ];
     then
       echo "$(date +%F_%T) FATAL: NGINX Raised a Status Code of $NGINX_STATUS and exited"
       exit -1

   else
     sleep 2
        echo "$(date +%F_%T) - HealtCheck: NGINX and PHP-FPM: OK"
  fi
  sleep 60
done
</code></pre>

<h2>Building the Image:</h2>

<p>I am primarily using docker swarm, so I am building the image, and pushing to a private registry:</p>

<pre><code class="bash Build and Push the Image">$ docker build -t registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/alpine:php5 .
$ docker push registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/alpine:php5
</code></pre>

<p>Create the PHP Service:</p>

<pre><code class="bash Create a Docker Service">$ docker service create \
--name php-app \
--network appnet \
--replicas 3 \
--with-registry-auth registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/alpine:php5
</code></pre>

<p>For a Container from the Image on the Host:</p>

<pre><code class="bash Run a Container from the Image">$ docker run -itd --name php-app -p 80:80 registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/alpine:php5
</code></pre>

<p>Test the Web App:</p>

<pre><code class="bash Make a GET Request">$ curl -XGET http://127.0.0.1:80/
The word is: foo
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Lightweight Webserver (Service) With Lighttpd on Alpine Running on Docker Swarm]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/08/26/create-a-lightweight-webserver-service-with-lighttpd-on-alpine-running-on-docker-swarm/"/>
    <updated>2017-08-26T11:37:19-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/08/26/create-a-lightweight-webserver-service-with-lighttpd-on-alpine-running-on-docker-swarm</id>
    <content type="html"><![CDATA[<p>In this post we will create a docker service that will host a static html website. We are using the <code>alpine:edge</code> image and using the <code>lighttpd</code> package as our webserver application.</p>

<h2>The Directory Structure:</h2>

<p>Our working directory consists of:</p>

<pre><code class="bash Directory Tree">$ tree
.
|-- Dockerfile
`-- htdocs
    `-- index.html

1 directory, 2 files
</code></pre>

<p>First, our <code>Dockerfile</code>:</p>

<pre><code class="bash Dockerfile">FROM alpine:edge

RUN apk update \
    &amp;&amp; apk add lighttpd \
    &amp;&amp; rm -rf /var/cache/apk/*

ADD htdocs /var/www/localhost/htdocs

CMD ["lighttpd", "-D", "-f", "/etc/lighttpd/lighttpd.conf"]
</code></pre>

<p>Then our <code>htdocs/index.html</code> which is based off bootstrap:</p>

<pre><code class="html index.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;

  &lt;head&gt;

    &lt;meta charset="utf-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"&gt;
    &lt;meta name="description" content=""&gt;
    &lt;meta name="author" content=""&gt;

    &lt;title&gt;Bare - Start Bootstrap Template&lt;/title&gt;

    &lt;!-- Bootstrap core CSS --&gt;
    &lt;link href="http://obj-cache.cloud.ruanbekker.com/static/css/bootstrap.min.css" rel="stylesheet"&gt;

    &lt;!-- Custom styles for this template --&gt;
    &lt;style&gt;
      body {
        padding-top: 54px;
      }
      @media (min-width: 992px) {
        body {
          padding-top: 56px;
        }
      }

    &lt;/style&gt;

  &lt;/head&gt;

  &lt;body&gt;

    &lt;!-- Navigation --&gt;
    &lt;nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top"&gt;
      &lt;div class="container"&gt;
        &lt;a class="navbar-brand" href="#"&gt;Start Bootstrap&lt;/a&gt;
        &lt;button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation"&gt;
          &lt;span class="navbar-toggler-icon"&gt;&lt;/span&gt;
        &lt;/button&gt;
        &lt;div class="collapse navbar-collapse" id="navbarResponsive"&gt;
          &lt;ul class="navbar-nav ml-auto"&gt;
            &lt;li class="nav-item active"&gt;
              &lt;a class="nav-link" href="#"&gt;Home
                &lt;span class="sr-only"&gt;(current)&lt;/span&gt;
              &lt;/a&gt;
            &lt;/li&gt;
            &lt;li class="nav-item"&gt;
              &lt;a class="nav-link" href="https://startbootstrap.com/template-overviews/bare/"&gt;About&lt;/a&gt;
            &lt;/li&gt;
            &lt;li class="nav-item"&gt;
              &lt;a class="nav-link" href="#"&gt;Services&lt;/a&gt;
            &lt;/li&gt;
            &lt;li class="nav-item"&gt;
              &lt;a class="nav-link" href="#"&gt;Contact&lt;/a&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/nav&gt;

    &lt;!-- Page Content --&gt;
    &lt;div class="container"&gt;

      &lt;div class="row"&gt;
        &lt;div class="col-lg-12 text-center"&gt;
          &lt;h1 class="mt-5"&gt;A Bootstrap 4 Starter Template&lt;/h1&gt;
          &lt;p class="lead"&gt;Complete with pre-defined file paths and responsive navigation!&lt;/p&gt;
          &lt;ul class="list-unstyled"&gt;
            &lt;li&gt;Bootstrap 4.0.0-beta&lt;/li&gt;
            &lt;li&gt;jQuery 3.2.1&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;!-- Bootstrap core JavaScript --&gt;
    &lt;script src="http://obj-cache.cloud.ruanbekker.com/static/js/jquery.min.js"&gt;&lt;/script&gt;
    &lt;script src="http://obj-cache.cloud.ruanbekker.com/static/js/popper.min.js"&gt;&lt;/script&gt;
    &lt;script src="http://obj-cache.cloud.ruanbekker.com/static/js/bootstrap.min.js"&gt;&lt;/script&gt;

  &lt;/body&gt;

&lt;/html&gt;
</code></pre>

<h2>Creating the Service:</h2>

<p>First we will need to build the image, for my personal projects, I like to use gitlab&rsquo;s private registry, but there are many to choose from:</p>

<pre><code class="bash Build the Image">$ docker login registry.gitlab.com
$ docker build -t registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:bootstrap .
$ docker push registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:bootstrap
</code></pre>

<p>There&rsquo;s many ways we can create the service, like using this service as a backend application, where nginx or traefik can proxy the requests through, but in this case we have nothing listening on port 80, so we will create the service and publish port 80 to the service, from the host:</p>

<pre><code class="bash Create the Service">$ docker service create \
--name web-bootstrap \
--replicas 1 \
--network appnet \
--with-registry-auth registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:bootstrap
</code></pre>

<h2>Accessing your Website:</h2>

<p>As this service will serve as our website, it should look more or less like the following:</p>

<p><img src="http://obj-cache.cloud.ruanbekker.com/lighttpd-bootstrap.jpg" alt="" /></p>
]]></content>
  </entry>
  
</feed>
