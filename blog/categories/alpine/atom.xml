<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Alpine | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/alpine/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2019-02-07T03:30:03-05:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building a Raspberry Pi Nginx Image With Caching on Alpine for Docker Swarm]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/23/building-a-raspberry-pi-nginx-image-with-caching-on-alpine-for-docker-swarm/"/>
    <updated>2018-10-23T17:00:02-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/23/building-a-raspberry-pi-nginx-image-with-caching-on-alpine-for-docker-swarm</id>
    <content type="html"><![CDATA[<p>In this guide, we will be creating a nginx reverse proxy with the ability to cache static content using a alpine image.</p>

<p>We will then push the image to gitlab&rsquo;s private registry, and then run the service on docker swarm.</p>

<h2>Create the backend service:</h2>

<p>We will upstream to our blog using ghost, which you can deploy using:</p>

<pre><code class="bash">$ docker service create --name blog --network docknet rbekker87/armhf-ghost:2.0.3
</code></pre>

<h2>Current File Structure:</h2>

<p>Our file structure for the assets we need to build the reverse proxy:</p>

<pre><code>$ find .
./conf.d
./conf.d/blog.conf
./Dockerfile
./nginx.conf
</code></pre>

<ul>
<li><code>Dockerfile</code></li>
</ul>


<pre><code>FROM hypriot/rpi-alpine-scratch
MAINTAINER Ruan Bekker

RUN apk update &amp;&amp; \
    apk add nginx &amp;&amp; \
    rm -rf /etc/nginx/nginx.conf &amp;&amp; \
    chown -R nginx:nginx /var/lib/nginx &amp;&amp; \
    rm -rf /var/cache/apk/*

ADD nginx.conf /etc/nginx/
ADD conf.d/blog.conf /etc/nginx/conf.d/

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
</code></pre>

<ul>
<li><code>nginx.conf</code></li>
</ul>


<pre><code>user nginx;
worker_processes 1;

events {
    worker_connections 1024;
    }

error_log  /var/log/nginx/nginx_error.log warn;

http {

    sendfile          on;
    tcp_nodelay       on;

    gzip              on;
    gzip_http_version 1.0;
    gzip_proxied      any;
    gzip_min_length   500;
    gzip_disable      "MSIE [1-6]\.";
    gzip_types        text/plain text/xml text/css
                      text/comma-separated-values
                      text/javascript
                      application/x-javascript
                      application/atom+xml;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    error_log   /var/log/nginx/error.log;

    proxy_cache_path /var/cache/nginx/ levels=1:2 keys_zone=nginx_cache:5m max_size=128m inactive=60m;

    keepalive_timeout  60;
    server_tokens      off;

    include /etc/nginx/conf.d/*.conf;

}
</code></pre>

<p>Hostname resolution to our Ghost Blog Service: In our swarm we have a service called blog which is associated to the docknet network, so the dns resolution will resolve to the vip of the service. As seen in the figure below:</p>

<pre><code>$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE                                                    PORTS
nq42a6jfwx3d        blog                replicated          1/1                 rbekker87/armhf-ghost:2.0.3
</code></pre>

<ul>
<li><code>conf.d/blog.conf</code></li>
</ul>


<pre><code>upstream ghost_blog {
    server blog:2368;
    }

server {
    listen 80;
    server_name blog.yourdomain.com;

    access_log  /var/log/nginx/blog_access.log  main;
    error_log   /var/log/nginx/blog_error.log;

    location / {

        proxy_cache                 nginx_cache;
        add_header                  X-Proxy-Cache $upstream_cache_status;
        proxy_ignore_headers        Cache-Control;
        proxy_cache_valid any       10m;
        proxy_cache_use_stale       error timeout http_500 http_502 http_503 http_504;

        proxy_pass                  http://ghost_blog;
        proxy_redirect              off;

        proxy_set_header            Host $host;
        proxy_set_header            X-Real-IP $remote_addr;
        proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header            X-Forwarded-Host $server_name;
    }
}
</code></pre>

<h2>Building the Image and Pushing to Gitlab</h2>

<p>I&rsquo;m using Gitlab in this demonstration, but you can use the registry of your choice:</p>

<pre><code>$ docker login registry.gitlab.com
$ docker build -t registry.gitlab.com/user/docker/arm-nginx:caching .
$ docker tag registry.gitlab.com/user/docker/arm-nginx:caching registry.gitlab.com/user/docker/arm-nginx:caching
$ docker push registry.gitlab.com/user/docker/arm-nginx:caching
</code></pre>

<h2>Deploy</h2>

<p>Create the Nginx Reverse Proxy Service on Docker Swarm:</p>

<pre><code>$ docker service create --name nginx_proxy \
--network docknet \
--publish 80:80 \
--replicas 1 \
--with-registry-auth registry.gitlab.com/user/docker/arm-nginx:caching
</code></pre>

<p>Listing our Services:</p>

<pre><code>$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE                                                    PORTS
je7x21l7egoh        nginx_proxy         replicated          1/1                 registry.gitlab.com/user/docker/arm-nginx:caching   *:80-&gt;80/tcp
nq42a6jfwx3d        blog                replicated          1/1                 rbekker87/armhf-ghost:2.0.3
</code></pre>

<p>Once you access your proxy on port 80, you should see your Ghost Blog Homepage like below:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/ghost-blog-main.png" alt="" /></p>

<p>Have a look at the <a href="https://blog.ruanbekker.com/blog/2018/10/23/nginx-caching-performance-for-static-content-on-docker-swarm-with-raspberrypi/">benchmark performance</a> when using Nginx with caching enabled</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://hub.docker.com/r/rbekker87/armhf-ghost/">https://hub.docker.com/r/rbekker87/armhf-ghost/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerizing a Memcached Server for Docker on Alpine]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/09/01/dockerizing-a-memcached-server-for-docker-on-alpine/"/>
    <updated>2018-09-01T16:01:09-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/09/01/dockerizing-a-memcached-server-for-docker-on-alpine</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/memcached-logo.png" alt="" /></p>

<p>This post I will demostrate how to dockerize a memcached server on Alpine and how to create a boot script that allows you to pass environment variables through to the application.</p>

<h2>What is Memcached</h2>

<p>Memcached is a multi-threaded, in-memory key/value store for small chunks of arbitrary data (strings, objects) from results of database calls, API calls, etc. More on <a href="https://memcached.org/about">Memcached</a></p>

<h2>The Dockerfile:</h2>

<p>Our Dockerfile will consist of a simple install of memcached and add a boot script that we will start it from:</p>

<pre><code class="docker">FROM alpine:3.7

COPY boot.sh /boot.sh
RUN apk --no-cache add memcached &amp;&amp; chmod +x /boot.sh

USER memcached
CMD ["/boot.sh"]
</code></pre>

<h2>The Boot Script:</h2>

<p>As you can see we have set defaults so when the user does not specify any environment variables, that it will inherit the default values</p>

<pre><code class="bash">#!/bin/sh

/usr/bin/memcached \
  --user=${MEMCACHED_USER:-memcached} \
  --listen=${MEMCACHED_HOST:-0.0.0.0} \
  --port=${MEMCACHED_PORT:-11211} \
  --memory-limit=${MEMCACHED_MEMUSAGE:-64} \
  --conn-limit=${MEMCACHED_MAXCONN:-1024} \
  --threads=${MEMCACHED_THREADS:-4} \
  --max-reqs-per-event=${MEMCACHED_REQUESTS_PER_EVENT:-20} \
  --verbose
</code></pre>

<h2>Build and Deploy:</h2>

<p>Build the image, if you just want to run the container you can use my public image in the next step:</p>

<pre><code class="bash">$ docker build -t local/memcached:0.1 .
</code></pre>

<p>Run the Memcached Container:</p>

<pre><code class="bash">$ docker run -itd --name memcached -p 11211:11211 -e MEMCACHED_MEMUSAGE=32 local/memcached:0.1
</code></pre>

<p>Or my Public Image from Docker Hub:</p>

<pre><code class="bash">$ docker run -itd --name memcached -p 11211:11211 -e MEMCACHED_MEMUSAGE=32 rbekker87/memcached:alpine
</code></pre>

<h2>Check out the Stats:</h2>

<p>Pass the command <code>stats</code> through the exposed port:</p>

<pre><code>$ echo -e "stats" | nc localhost 11211                                                               
STAT pid 8
STAT uptime 2
STAT time 1535833177
STAT version 1.5.6
STAT libevent 2.1.8-stable
STAT pointer_size 64
STAT rusage_user 0.030000
STAT rusage_system 0.000000
STAT max_connections 1024
STAT curr_connections 1
STAT total_connections 2
STAT rejected_connections 0
STAT connection_structures 2
STAT reserved_fds 20
STAT cmd_get 0
STAT cmd_set 0
STAT cmd_flush 0
STAT cmd_touch 0
STAT get_hits 0
STAT get_misses 0
STAT get_expired 0
STAT get_flushed 0
STAT delete_misses 0
STAT delete_hits 0
STAT incr_misses 0
STAT incr_hits 0
STAT decr_misses 0
STAT decr_hits 0
STAT cas_misses 0
STAT cas_hits 0
STAT cas_badval 0
STAT touch_hits 0
STAT touch_misses 0
STAT auth_cmds 0
STAT auth_errors 0
STAT bytes_read 6
STAT bytes_written 0
STAT limit_maxbytes 33554432
STAT accepting_conns 1
STAT listen_disabled_num 0
STAT time_in_listen_disabled_us 0
STAT threads 4
STAT conn_yields 0
STAT hash_power_level 16
STAT hash_bytes 524288
STAT hash_is_expanding 0
STAT slab_reassign_rescues 0
STAT slab_reassign_chunk_rescues 0
STAT slab_reassign_evictions_nomem 0
STAT slab_reassign_inline_reclaim 0
STAT slab_reassign_busy_items 0
STAT slab_reassign_busy_deletes 0
STAT slab_reassign_running 0
STAT slabs_moved 0
STAT lru_crawler_running 0
STAT lru_crawler_starts 255
STAT lru_maintainer_juggles 155
STAT malloc_fails 0
STAT log_worker_dropped 0
STAT log_worker_written 0
STAT log_watcher_skipped 0
STAT log_watcher_sent 0
STAT bytes 0
STAT curr_items 0
STAT total_items 0
STAT slab_global_page_pool 0
STAT expired_unfetched 0
STAT evicted_unfetched 0
STAT evicted_active 0
STAT evictions 0
STAT reclaimed 0
STAT crawler_reclaimed 0
STAT crawler_items_checked 0
STAT lrutail_reflocked 0
STAT moves_to_cold 0
STAT moves_to_warm 0
STAT moves_within_lru 0
STAT direct_reclaims 0
STAT lru_bumps_dropped 0
END
</code></pre>

<p>Some descriptions:</p>

<p><code>evictions</code> - when items are evicted from the cache
<code>total_items</code> - the number of items the server has stored since it was started
<code>current_items</code> - the number of items in the cache
<code>bytes</code> - the current number of bytes used to store items
<code>limit_maxbytes</code> - the number of bytes the server is allowed to use for storage
<code>get_misses</code> - the number of times a item has been requested, but not found
<code>get_hits</code> - the number of times a item has been served from the cache</p>

<p>To get specific stats, like evictions:</p>

<pre><code class="bash">$ echo -e "stats" | nc localhost 11211 | grep -w evictions   
STAT evictions 0
</code></pre>

<p>When you see evictions value increases, this essentially means that memcache had to remove the oldest items from memory for new or more frequent used items. If this number remains high, consider increasing your memory allocated to memcache.</p>

<p>Slab Stats: returns information about each of the slabs created by memcached during runtime:</p>

<pre><code class="bash">$ echo -e "stats slabs" | nc localhost 11211                 
STAT active_slabs 0
STAT total_malloced 0
</code></pre>

<p><code>active_slabs</code> - Total number of slab classes allocated.
<code>total_malloced</code> - Total amount of memory allocated to slab pages.</p>

<p>For detailed description about statistics, have a look at their github resource:
- <a href="https://github.com/memcached/memcached/blob/master/doc/protocol.txt">https://github.com/memcached/memcached/blob/master/doc/protocol.txt</a></p>

<h2>Resources:</h2>

<ul>
<li><a href="https://memcached.org/">https://memcached.org/</a></li>
<li><a href="https://blog.serverdensity.com/monitor-memcached/">https://blog.serverdensity.com/monitor-memcached/</a></li>
<li><a href="https://wiki.mikejung.biz/Memcached">https://wiki.mikejung.biz/Memcached</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Salt and Hash Example Using Python With Bcrypt on Alpine]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/07/04/salt-and-hash-example-using-python-with-bcrypt-on-alpine/"/>
    <updated>2018-07-04T05:05:00-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/07/04/salt-and-hash-example-using-python-with-bcrypt-on-alpine</id>
    <content type="html"><![CDATA[<p>This is a post on a example of how to hash a password with a salt. A salt in cryptography is a method that applies a one way function to hash data like passwords. The advantage of using salts is to protect your sensitive data against dictionary attacks, etc. Everytime a salt is applied to the same string, the hashed string will provide a different result.</p>

<h2>Installing Bcrypt</h2>

<p>I will be using bcrypt to hash my password. I always use alpine images and this is how I got bcrypt running on alpine:</p>

<pre><code class="bash">$ docker run -it apline sh
$ apk add python python-dev py2-pip autoconf automake g++ make --no-cache
$ pip install py-bcrypt
</code></pre>

<p>This command should produce a <code>0 exit code</code>:</p>

<pre><code class="bash">$ python -c 'import bcrypt'; echo $?
</code></pre>

<h2>Bcrypt Example to Hash a Password</h2>

<p>Here is a example to show you the output when a salt is applied to a string, such as a password. First we will define our very weak password:</p>

<pre><code class="python">&gt;&gt;&gt; import bcrypt
&gt;&gt;&gt; password = 'pass123'
&gt;&gt;&gt; password
'pass123'
</code></pre>

<p>The bcrypt package has a function called <code>gensalt()</code> that accepts a parameter <code>log_rounds</code> which defines the complexity of the hashing. Lets create a hash for our password:</p>

<pre><code class="python">&gt;&gt;&gt; bcrypt.hashpw(password, bcrypt.gensalt(12))
'$2a$12$iquyyyJAlA9nZwlGo0CYK.J37Qn.to/0mTtiCspNAyO8778006XZG'

&gt;&gt;&gt; bcrypt.hashpw(password, bcrypt.gensalt(12))
'$2a$12$UzNjJ1W/cWqBrt5rzNkb..j.gUvrW64DbvVkNbhRDzBtbRvNInaqq'
</code></pre>

<p>As you can see, the hashed string was different when we called it for the second time.</p>

<h2>Bcrypt Salt Hash and Verification Example:</h2>

<p>Thanks to <a href="https://stackoverflow.com/questions/9594125/salt-and-hash-a-password-in-python">this</a> post, here is a example on how to hash strings and how to verify the plain text password with the provided salt.</p>

<p>Our functions to create the hash and to verify the password:</p>

<pre><code class="python">&gt;&gt;&gt; import bcrypt
&gt;&gt;&gt; def get_hashed_password(plain_text_password):
...     return bcrypt.hashpw(plain_text_password, bcrypt.gensalt())
...
&gt;&gt;&gt;
&gt;&gt;&gt; def check_password(plain_text_password, hashed_password):
...     return bcrypt.checkpw(plain_text_password, hashed_password)
...
&gt;&gt;&gt;
</code></pre>

<p>Create a hashed string:</p>

<pre><code class="python">&gt;&gt;&gt; print(get_hashed_password('mynewpassword'))
$2a$12$/MemcgbnwJLN8XE86VQZseVxopU6tY76KxnH/AJ0I9T9y1Ldko5gm
</code></pre>

<p>Verify the hash with your plain text password and the salt that was created:</p>

<pre><code class="python">&gt;&gt;&gt; print(check_password('mynewpassword', '$2a$12$/MemcgbnwJLN8XE86VQZseVxopU6tY76KxnH/AJ0I9T9y1Ldko5gm'))
True
</code></pre>

<p>When you you provide the wrong password, with the correct salt, the verification will fail:</p>

<pre><code class="python">&gt;&gt;&gt; print(check_password('myOLDpassword', '$2a$12$/MemcgbnwJLN8XE86VQZseVxopU6tY76KxnH/AJ0I9T9y1Ldko5gm'))
False
</code></pre>

<p>When you provide the correct password with the incorrect salt, the verification will also fail:</p>

<pre><code class="python">&gt;&gt;&gt; print(check_password('mynewpassword', '$2a$12$/MemcgbnwJLN8XE86VQZseVxopU6tY76KxnH/AJ0I9T9y1Ldko5gmX'))
False
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a KVM Hypervisor on Ubuntu to Host Virtual Machines]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/02/20/setup-a-kvm-hypervisor-on-ubuntu-to-host-virtual-machines/"/>
    <updated>2018-02-20T06:21:56-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/02/20/setup-a-kvm-hypervisor-on-ubuntu-to-host-virtual-machines</id>
    <content type="html"><![CDATA[<p>Today we will setup a KVM (Kernel Virtual Machine) Hypervisor, where we can host Virtual Machines. In order to do so, your host needs to Support Hardware Virtualization.</p>

<h2>What we will be doing today:</h2>

<ul>
<li>Check if your host supports Hardware Virtualization</li>
<li>Setup the KVM Hypervisor</li>
<li>Setup a Alpine VM</li>
</ul>


<h2>Check for Hardware Virtualization Support:</h2>

<p>We will install the package required to do the check:</p>

<pre><code class="bash">$ sudo apt update &amp;&amp; sudo apt install cpu-checker -y
</code></pre>

<p>Once that is installed, run <code>kvm-ok</code> and if its supported, your output should look something like this:</p>

<pre><code class="bash">$ kvm-ok
INFO: /dev/kvm exists
KVM acceleration can be used
</code></pre>

<h2>Installing KVM</h2>

<p>Update your System and get the Packages required to Setup KVM:</p>

<pre><code class="bash">$ sudo apt update &amp;&amp; sudo apt upgrade -y
$ apt install bridge-utils qemu-kvm libvirt-bin virtinst -y
</code></pre>

<p>Add your user to the libvirtd group:</p>

<pre><code class="bash">$ sudo usermod -G libvirtd $USER
</code></pre>

<p>Check that the libvirtd service is running:</p>

<pre><code class="bash">$ sudo systemctl is-active libvirtd
active
</code></pre>

<p>You will also find that there is a new interface configured called <code>virbr0</code> in my case.</p>

<h2>Provision the Alpine VM and Setup OpenSSH:</h2>

<p>Get the ISO:</p>

<ul>
<li><a href="https://alpinelinux.org/downloads/">https://alpinelinux.org/downloads/</a></li>
</ul>


<pre><code class="bash">$ wget http://dl-cdn.alpinelinux.org/alpine/v3.7/releases/x86_64/alpine-virt-3.7.0-x86_64.iso
</code></pre>

<p>Provision the VM:</p>

<pre><code class="bash">$ virt-install \
--name alpine1 \
--ram 256 \
--disk path=/var/lib/libvirt/images/alpine1.img,size=8 \
--vcpus 1 \
--os-type linux \
--os-variant generic \
--network bridge:virbr0,model=virtio \
--graphics none \
--console pty,target_type=serial \
--cdrom ./alpine-virt-3.7.0-x86_64.iso 
</code></pre>

<p>After this, you will be dropped into the console:</p>

<pre><code class="bash">Starting install...
Allocating 'alpine1.img'                                                                                                           |   8 GB  00:00:01
Creating domain...                                                                                                                 |    0 B  00:00:00
Connected to domain alpine1
Escape character is ^]

ISOLINUX 6.04 6.04-pre1  Copyright (C) 1994-2015 H. Peter Anvin et al
boot:

   OpenRC 0.24.1.a941ee4a0b is starting up Linux 4.9.65-1-virthardened (x86_64)

Welcome to Alpine Linux 3.7
Kernel 4.9.65-1-virthardened on an x86_64 (/dev/ttyS0)

localhost login:
</code></pre>

<p>Login with the <code>root</code> user and no password, then setup the VM by running <code>setup-alpine</code>:</p>

<pre><code class="bash">localhost login: root
Welcome to Alpine!

localhost:~# setup-alpine
</code></pre>

<p>After completing the prompts reboot the VM by running <code>reboot</code>, then you will be dropped out of the console. Check the status of the reboot:</p>

<pre><code class="bash">$ virsh list
 Id    Name                           State
----------------------------------------------------
 2     alpine1                        running
</code></pre>

<p>As we can see our guest is running, lets console to our guest, provide the root user and password that you provided during the setup phase:</p>

<pre><code class="bash">$ virsh console 2
Connected to domain alpine1
Escape character is ^]

alpine1 login: root
Password:
Welcome to Alpine!
</code></pre>

<p>Setup OpenSSH so that we can SSH to our guest over the network:</p>

<pre><code class="bash">$ apk update
$ apk add openssh
</code></pre>

<p>Configure SSH to accept Root Passwords, this is not advisable for production environments, but for testing this is okay. For Production servers, we will rather look at Key Based Authentication etc.</p>

<pre><code class="bash">$ sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config
$ /etc/init.d/sshd restart
</code></pre>

<p>Get the IP Address:</p>

<pre><code>$ ifconfig
eth0      Link encap:Ethernet  HWaddr 52:54:00:D0:48:0C
          inet addr:192.168.122.176  Bcast:192.168.122.255  Mask:255.255.255.0
          inet6 addr: fe80::5054:ff:fed0:480c/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:55 errors:0 dropped:28 overruns:0 frame:0
          TX packets:34 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:4545 (4.4 KiB)  TX bytes:3345 (3.2 KiB)
</code></pre>

<p>Exit the guest by running <code>exit</code> and <code>Ctrl + ]</code> to exit the console session.</p>

<p>Now SSH to your Alpine VM:</p>

<pre><code class="bash">$ ssh root@192.168.122.176
root@192.168.122.176's password:
Welcome to Alpine!
</code></pre>

<h2>Some Useful Commands:</h2>

<p>List Running VMs:</p>

<pre><code>$ virsh list
 Id    Name                           State
----------------------------------------------------
 3     alpine1                        running
</code></pre>

<p>Shutdown a VM:</p>

<pre><code class="bash">$ virsh shutdown alpine1
Domain alpine1 is being shutdown
</code></pre>

<p>List all VMs:</p>

<pre><code class="bash">$ virsh list --all
 Id    Name                           State
----------------------------------------------------
 -     alpine1                        shut off
</code></pre>

<p>Delete a VM:</p>

<pre><code class="bash">$ virsh shutdown alpine1 #or to force shutdown:
$ virsh destroy alpine1
$ virsh undefine alpine1
</code></pre>

<p>Any future KVM posts will be tagged under <a href="http://blog.ruanbekker.com/blog/categories/kvm?source_site=blog.ruanbekker.com?source_category=kvm">KVM</a> and Alpine posts will be available under the <a href="http://blog.ruanbekker.com/blog/categories/alpine?source_site=blog.ruanbekker.com?source_category=kvm">Alpine</a> tag.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending Mail With SSMTP on Alpine Linux]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/09/sending-mail-with-ssmtp-on-alpine-linux/"/>
    <updated>2017-10-09T16:36:35-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/09/sending-mail-with-ssmtp-on-alpine-linux</id>
    <content type="html"><![CDATA[<p>Quick Post on how to use ssmtp on Alpine Linux to Send Mail:</p>

<h2>Update and Install SSMTP</h2>

<pre><code class="bash">$ apk update
$ apk add ssmtp
</code></pre>

<h2>Configure SSMTP</h2>

<pre><code class="bash">$ cat &gt; /etc/ssmtp/ssmtp.conf &lt;&lt; EOF
root=postmaster
mailhub=mail.domain.com:25
hostname=`hostname`
FromLineOverride=YES
EOF
</code></pre>

<h2>Create the Mail Content</h2>

<pre><code class="bash">$ cat &gt; mail.txt &lt;&lt; EOF
To: recipient@domain.com
From: sender@domain.com
Subject: Mail with SSMTP

Hello, this is a test mail.
EOF
</code></pre>

<h2>Testing Mail Delivery</h2>

<pre><code class="bash">$ ssmtp recipient@domain.com &lt; file.txt
</code></pre>

<h2>Related:</h2>

<ul>
<li><a href="https://support.cloud.engineyard.com/hc/en-us/articles/205407478-Set-Up-SSMTP-for-Mail-Relay-to-AuthSMTP">Using Gmail as a Relay Host</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
