<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ansible | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/ansible/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2020-08-13T06:53:54+00:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Save Output to Local File With Ansible]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/01/24/save-output-to-local-file-with-ansible/"/>
    <updated>2020-01-24T19:56:01+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/01/24/save-output-to-local-file-with-ansible</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55700285-f3cdda00-59ce-11e9-9c00-a05b9d469e23.png" alt="" /></p>

<p>This playbook demonstrates how you can redirect shell output to a local file</p>

<h2>Inventory</h2>

<p>Our <code>inventory.ini</code> file:</p>

<pre><code>[localhost]
localhost
</code></pre>

<h2>The Script</h2>

<p>Our script: <code>/tmp/foo</code></p>

<pre><code class="bash">#!/usr/bin/env bash
echo "foo"
echo "bar"
</code></pre>

<p>Apply executable permissions:</p>

<pre><code>$ chmod +x /tmp/foo
</code></pre>

<h2>Playbook</h2>

<p>Our playbook: <code>debug.yml</code></p>

<pre><code class="yaml">---
- hosts: localhost
  tasks:
    - shell: /tmp/foo
      register: foo_result
      ignore_errors: True
    - local_action: copy content= dest=file
</code></pre>

<h2>Running</h2>

<p>Running the Ansible Playbook:</p>

<pre><code>$ ansible-playbook -i inventory.ini debug.yml

PLAY [localhost] ********************************************************************************************************************************************************************

TASK [shell] ************************************************************************************************************************************************************************
changed: [localhost]

TASK [copy] *************************************************************************************************************************************************************************
changed: [localhost -&gt; localhost]

PLAY RECAP **************************************************************************************************************************************************************************
localhost                  : ok=2    changed=2    unreachable=0    failed=0
</code></pre>

<p>View the local saved file:</p>

<pre><code>$ cat file
foo
bar
</code></pre>

<h2>Read More</h2>

<p>For more content on <a href="https://blog.ruanbekker.com/blog/categories/ansible/">Ansible</a> check out my <a href="https://blog.ruanbekker.com/blog/categories/ansible/">Ansible</a> category</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Environment Variables With Ansible]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/01/24/environment-variables-with-ansible/"/>
    <updated>2020-01-24T19:28:16+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/01/24/environment-variables-with-ansible</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55700285-f3cdda00-59ce-11e9-9c00-a05b9d469e23.png" alt="" /></p>

<p>This is a quick post on how to use environment variables in ansible</p>

<h2>Inventory</h2>

<p>Our <code>inventory.ini</code> file looks like this:</p>

<pre><code>[localhost]
localhost
</code></pre>

<h2>Across Tasks</h2>

<p>You can set environment variables across tasks, and let your tasks inherit the variables:</p>

<pre><code class="yaml">- hosts: localhost
  vars:
    var_mysecret: secret123

  tasks:
    - name: echo my env var
      environment:
        MYNAME: ""
      shell: "echo hello $MYNAME &gt; /tmp/bla.txt"
      args:
        creates: /tmp/bla.txt
</code></pre>

<p>When we run the task:</p>

<pre><code class="bash">$ ansible-playbook -i inventory.ini -u ruan task.yml
</code></pre>

<p>Check the output:</p>

<pre><code class="bash">$ cat /tmp/bla.txt
hello secret123
</code></pre>

<h2>Environment Variables Per Task</h2>

<p>You can set environment variables per task:</p>

<pre><code class="yaml">- hosts: dev
  tasks:
    - name: echo my env var
      environment:
        MYNAME: "RUAN"
      shell: "echo hello $MYNAME &gt; /tmp/bla2.txt"
      args:
        creates: /tmp/bla2.txt
</code></pre>

<p>Running the task:</p>

<pre><code>$ ansible-playbook -i inventory.ini -u ruan task.yml
</code></pre>

<p>Checking the output:</p>

<pre><code>$ cat /tmp/bla2.txt
hello RUAN
</code></pre>

<h2>Read More</h2>

<p>Read more on environment variables in ansible in their <a href="https://docs.ansible.com/ansible/latest/plugins/lookup/env.html">documentation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Elasticsearch With Ansible Tutorial]]></title>
    <link href="https://blog.ruanbekker.com/blog/2019/04/06/install-elasticsearch-with-ansible-tutorial/"/>
    <updated>2019-04-06T15:45:09-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2019/04/06/install-elasticsearch-with-ansible-tutorial</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55700285-f3cdda00-59ce-11e9-9c00-a05b9d469e23.png" alt="" /></p>

<p>In this tutorial we will install a elasticsearch cluster with ansible (well rather a node)</p>

<p>Our inventory:</p>

<pre><code>$ cat inventory.ini
[newes]
esnewnode

[newes:vars]
ansible_python_interpreter=/usr/bin/python3
</code></pre>

<p>Our playbook to bootstrap our nodes with Python:</p>

<pre><code>$ cat bootstrap-python.yml
---
- hosts: newes
  gather_facts: False

  tasks:
  - name: install python
    raw: test -e /usr/bin/python || ( apt update &amp;&amp; apt install python -y )
</code></pre>

<p>Our playbook to provision users:</p>

<pre><code>$ cat provision-users.yml
---
# Provisions User on Nodes
# Setup Passwordless SSH from Jumpbox
# Install Packages using APT
- name: bootstrap python
  hosts: newes
  roles:
    - bootstrap-python

- name: setup pre-requisites
  hosts: newes
  roles:
    - create-sudo-user
    - install-modules
    - configure-hosts-file

#- name: setup ruan user on the nodes
#  become: yes
#  become_user: ruan
#  hosts: admin
#  roles:
#    - configure-admin

- name: copy public key to nodes
  become: yes
  become_user: ruan
  hosts: newes
  roles:
    - copy-keys

- name: install elasticsearch
  hosts: newes
  roles:
    - elasticsearch
</code></pre>

<p>Our roles that will be included in our playbooks from above:</p>

<pre><code>$ cat roles/create-sudo-user/tasks/main.yml
---
- name: Create Sudo User
  user: name=ruan
        groups=sudo
        shell=/bin/bash
        generate_ssh_key=no
        state=present

- name: Set Passwordless SSH Access for ruan user
  copy: src=sudoers
        dest=/etc/sudoers.d
        mode=0440
</code></pre>

<p>Sudoers file for the create sudo role:</p>

<pre><code>$ cat roles/create-sudo-user/files/sudoers
ruan ALL=(ALL) NOPASSWD:ALL
</code></pre>

<p>The role to install all the apt packages:</p>

<pre><code>$ cat roles/install-modules/tasks/main.yml
---
- name: Install Packages
  apt: name= state=latest update_cache=yes
  with_items:
    - apt-transport-https
    - ntp
    - python
    - tcpdump
    - wget
    - openssl
    - curl
</code></pre>

<p>Role to configure hosts file:</p>

<pre><code>$ cat roles/configure-hosts-file/tasks/main.yml
---
- name: Configure Hosts File
  lineinfile: path=/etc/hosts regexp='.*$' line=" " state=present
  when: hostvars[item].ansible_default_ipv4.address is defined
  with_items: ""
</code></pre>

<p>The role to copy the ssh keys:</p>

<pre><code>$ cat roles/copy-keys/tasks/main.yml
---
- name: Copy Public Key to Other Hosts
  become: true
  become_user: ruan
  copy:
    src: /tmp/id_rsa.pub
    dest: /tmp/id_rsa.pub
    mode: 0644
- name: Append Public key in authorized_keys file
  authorized_key:
    user: ruan
    state: present
    key: ""
</code></pre>

<p>The role to install elasticsearch:</p>

<pre><code>$ cat roles/elasticsearch/tasks/main.yml
---
- name: get apt repo key
  apt_key:
    url: https://artifacts.elastic.co/GPG-KEY-elasticsearch
    state: present

- name: install apt repo
  apt_repository:
    repo: deb https://artifacts.elastic.co/packages/6.x/apt stable main
    state: present
    filename: elastic-6.x.list
    update_cache: yes

- name: install java
  apt:
    name: openjdk-8-jre
    state: present
    update_cache: yes

- name: install elasticsearch
  apt:
    name: elasticsearch
    state: present
    update_cache: yes

- name: reload systemd config
  systemd: daemon_reload=yes

- name: enable service elasticsearch and ensure it is not masked
  systemd:
    name: elasticsearch
    enabled: yes
    masked: no

- name: ensure elasticsearch is running
  systemd: state=started name=elasticsearch
</code></pre>

<h2>Deploy Elasticsearch</h2>

<p>Bootstrap python then deploy elasticsearch:</p>

<pre><code>$ ansible-playbook -i inventory.ini -u root bootstrap-python.yml
$ ansible-playbook -i inventory.ini -u root provision-users.yml
</code></pre>

<p>Test out elasticsearch:</p>

<pre><code>$ curl http://127.0.0.1:9200/
{
  "name" : "Z52AEZ7",
  "cluster_name" : "elasticsearch",
  "cluster_uuid" : "fUiYVjsSQpCbo9QKEiuvaA",
  "version" : {
    "number" : "6.3.0",
    "build_flavor" : "default",
    "build_type" : "deb",
    "build_hash" : "424e937",
    "build_date" : "2018-06-11T23:38:03.357887Z",
    "build_snapshot" : false,
    "lucene_version" : "7.3.1",
    "minimum_wire_compatibility_version" : "5.6.0",
    "minimum_index_compatibility_version" : "5.0.0"
  },
  "tagline" : "You Know, for Search"
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Bootstrap Nodes With Python Using Ansible]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/10/31/how-to-bootstrap-nodes-with-python-using-ansible/"/>
    <updated>2018-10-31T01:48:15-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/10/31/how-to-bootstrap-nodes-with-python-using-ansible</id>
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/rbekker/image/upload/v1531083331/ansible_tojf8l.png" alt="" /></p>

<p>As Ansible depends on Python, therefore we can bootstrap our nodes with Python using a Ansible Playbook</p>

<h2>Inventory</h2>

<p>The nodes we want to bootstrap:</p>

<pre><code class="bash inventory.ini">[new]
node-1
node-2
node-3

[new:vars]
ansible_python_interpreter=/usr/bin/python3
</code></pre>

<h2>Playbook</h2>

<p>Our playbook with what we want to do:</p>

<pre><code class="yaml bootstrap-python.yml">---
- hosts: all
  gather_facts: False

  tasks:
  - name: install python
    raw: test -e /usr/bin/python || ( apt update &amp;&amp; apt install python -y )
</code></pre>

<h2>Deploy</h2>

<p>Deploy with Ansible:</p>

<pre><code class="bash">$ ansible-playbook -i inventory.ini bootstrap-python.yml

PLAY [all] ***********************************************************************************************************************************************************************************************

TASK [install python] ************************************************************************************************************************************************************************************
changed: [node-1]
changed: [node-2]
changed: [node-3]

PLAY RECAP ***********************************************************************************************************************************************************************************************
node-1                     : ok=2    changed=2    unreachable=0    failed=0
node-2                     : ok=2    changed=2    unreachable=0    failed=0
node-3                     : ok=2    changed=2    unreachable=0    failed=0
</code></pre>

<p>This is it for this post, all posts for this tutorial will be posted under <a href="http://blog.ruanbekker.com/blog/categories/ansible-tutorial">#ansible-tutorial</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Install Packages on Remote Systems With Ansible]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/10/31/how-to-install-packages-on-remote-systems-with-ansible/"/>
    <updated>2018-10-31T01:28:18-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/10/31/how-to-install-packages-on-remote-systems-with-ansible</id>
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/rbekker/image/upload/v1531083331/ansible_tojf8l.png" alt="" /></p>

<p>We will use Ansible to deploy packages to remote systems and in this case all the remote systems are running Debian, therefore we will be using the APT package manager.</p>

<h2>Pre-Requisites:</h2>

<p>Ensure that you have installed Ansible and setup the SSH Config for your remote systems, how to do that can be found under the post: <a href="https://blog.ruanbekker.com/blog/2018/07/08/getting-started-with-ansible-on-ubuntu/">setting up ansible</a></p>

<h2>Our Inventory</h2>

<p>The inventory file that describes our hosts:</p>

<pre><code class="bash inventory.ini">[scaleway]
cluster-node-1
cluster-node-2

[hetzner]
docker-node-1
docker-node-2
docker-node-3
glusterfs-node-1
glusterfs-node-2
elasticsearch-node-1
elasticsearch-node-2

[scaleway:vars]
ansible_python_interpreter=/usr/bin/python3
location=france

[hetzner:vars]
ansible_python_interpreter=/usr/bin/python3
location=germany
</code></pre>

<h2>Playbook</h2>

<p>Our playbook that we will define that we want to deploy packages using apt to all hosts:</p>

<pre><code class="yaml packages.yml">---
- hosts: all
  tasks:
  - name: Install Packages
    apt: name= state=latest update_cache=yes
    with_items:
      - ntp
      - python
      - tcpdump
      - wget
      - openssl
      - curl
</code></pre>

<h2>Deploy</h2>

<p>Running the playbook to deploy the packages to the remote servers:</p>

<pre><code class="bash">$ ansible-playbook -i inventory.ini packages.yml

PLAY [all] ***********************************************************************************************************************************************************************************************

TASK [Gathering Facts] ***********************************************************************************************************************************************************************************
ok: [glusterfs-node-2]
ok: [glusterfs-node-1]
ok: [docker-node-1]
ok: [docker-node-2]
ok: [docker-node-3]
ok: [elasticsearch-node-1]
ok: [elasticsearch-node-2]
ok: [cluster-node-1]
ok: [cluster-node-2]

TASK [Install Packages] **********************************************************************************************************************************************************************************
changed: [docker-node-1] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [docker-node-2] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [docker-node-3] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [elasticsearch-node-1] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [glusterfs-node-1] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [glusterfs-node-2] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [elasticsearch-node-2] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
ok: [cluster-node-1] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
ok: [cluster-node-2] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])

PLAY RECAP ***********************************************************************************************************************************************************************************************
docker-node-1              : ok=2    changed=1    unreachable=0    failed=0
docker-node-2              : ok=2    changed=1    unreachable=0    failed=0
docker-node-3              : ok=2    changed=1    unreachable=0    failed=0
elasticsearch-node-1       : ok=2    changed=1    unreachable=0    failed=0
elasticsearch-node-2       : ok=2    changed=1    unreachable=0    failed=0
glusterfs-node-1           : ok=2    changed=1    unreachable=0    failed=0
glusterfs-node-2           : ok=2    changed=1    unreachable=0    failed=0
cluster-node-1             : ok=2    changed=0    unreachable=0    failed=0
cluster-node-2             : ok=2    changed=0    unreachable=0    failed=0
</code></pre>

<p>This is it for this post, all posts for this tutorial will be posted under <a href="http://blog.ruanbekker.com/blog/categories/ansible-tutorial">#ansible-tutorials</a></p>
]]></content>
  </entry>
  
</feed>
