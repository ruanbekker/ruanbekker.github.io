<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Api | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-05-08T17:03:09-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use Python Requests to Interact With the iTunes API to Search for Music Info]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/05/08/use-python-requests-to-interact-with-the-itunes-api-to-search-for-music-info/"/>
    <updated>2018-05-08T17:01:11-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/05/08/use-python-requests-to-interact-with-the-itunes-api-to-search-for-music-info</id>
    <content type="html"><![CDATA[<p>Tutorial on using Python Requests and using Apple iTunes Music API, where we will be doing the following:</p>

<ul>
<li>Basics of using the Requests module</li>
<li>Query iTunes API on Songs by Artist</li>
<li>Query iTunes API on Artists Info</li>
<li>Query iTunes API on All Albums by Artist</li>
<li>Query iTunes API on Top 5 Albums</li>
<li>Query iTunes API on Multipe Artists</li>
</ul>


<h2>Resources:</h2>

<ul>
<li><a href="http://docs.python-requests.org/en/master/">Python Requests</a></li>
<li><a href="https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/">iTunes API</a></li>
</ul>


<h2>Install the Request Module:</h2>

<pre><code>$ virtualenv -p /usr/bin/python .venv
$ source .venv/bin/activate
$ pip install requests
</code></pre>

<h2>Basic Usage of Requests:</h2>

<p>In this demonstration we will only use the GET HTTP Method.</p>

<p>Make the GET Request to the endpoint:</p>

<pre><code class="python">&gt;&gt;&gt; import requests
&gt;&gt;&gt; response = requests.get('https://itunes.apple.com/search?term=guns+and+roses&amp;limit=1')
</code></pre>

<p>View the HTTP Status Code of the Response:</p>

<pre><code class="python">&gt;&gt;&gt; response.status_code
200
</code></pre>

<p>To view some of the status codes of the request library:</p>

<pre><code class="python">&gt;&gt;&gt; requests.codes.ok
200
&gt;&gt;&gt; requests.codes.no_content
204
&gt;&gt;&gt; requests.codes.temporary_redirect
307
&gt;&gt;&gt; requests.codes.permanent_redirect
308
&gt;&gt;&gt; requests.codes.bad
400
&gt;&gt;&gt; requests.codes.not_found
404
&gt;&gt;&gt; requests.codes.bad_gateway
502
</code></pre>

<p>Call <code>.ok</code> for the status lookup, the boolean answer will indicate if it responded with a <code>200 OK</code>:</p>

<pre><code class="python">&gt;&gt;&gt; response.ok
True
</code></pre>

<p>Measure the amount of time the request took:</p>

<pre><code class="python">&gt;&gt;&gt; response.elapsed.total_seconds()
0.706043
</code></pre>

<p>View the content of the response:</p>

<pre><code class="python">&gt;&gt;&gt; response.content
'\n\n\n{\n "resultCount":1,\n "results": [\n{"wrapperType":"track", "kind":"song", "artistId":106621, "collectionId":5669937, "trackId":5669911, "artistName":"Guns N\' Roses", "collectionName":"Greatest Hits", "trackName":"Sweet Child O\' Mine", "collectionCensoredName":"Greatest Hits", "trackCensoredName":"Sweet Child O\' Mine", "artistViewUrl":"https://itunes.apple.com/us/artist/guns-n-roses/106621?uo=4", "collectionViewUrl":"https://itunes.apple.com/us/album/sweet-child-o-mine/5669937?i=5669911&amp;uo=4", "trackViewUrl":"https://itunes.apple.com/us/album/sweet-child-o-mine/5669937?i=5669911&amp;uo=4", \n"previewUrl":"https://audio-ssl.itunes.apple.com/apple-assets-us-std-000001/Music6/v4/f2/7d/73/f27d7346-de92-bdc6-e148-56a3da406005/mzaf_2747902348777129728.plus.aac.p.m4a", "artworkUrl30":"https://is3-ssl.mzstatic.com/image/thumb/Music/v4/3c/18/87/3c188735-e462-3c99-92eb-50fb06afa73f/source/30x30bb.jpg", "artworkUrl60":"https://is3-ssl.mzstatic.com/image/thumb/Music/v4/3c/18/87/3c188735-e462-3c99-92eb-50fb06afa73f/source/60x60bb.jpg", "artworkUrl100":"https://is3-ssl.mzstatic.com/image/thumb/Music/v4/3c/18/87/3c188735-e462-3c99-92eb-50fb06afa73f/source/100x100bb.jpg", "collectionPrice":9.99, "trackPrice":1.29, "releaseDate":"1987-07-21T07:00:00Z", "collectionExplicitness":"notExplicit", "trackExplicitness":"notExplicit", "discCount":1, "discNumber":1, "trackCount":14, "trackNumber":2, "trackTimeMillis":355267, "country":"USA", "currency":"USD", "primaryGenreName":"Rock", "isStreamable":true}]\n}\n\n\n'
</code></pre>

<p>View the content in json format:</p>

<pre><code class="python">&gt;&gt;&gt; response.json()
{u'resultCount': 1, u'results': [{u'collectionExplicitness': u'notExplicit', u'releaseDate': u'1987-07-21T07:00:00Z', u'currency': u'USD', u'artistId': 106621, u'previewUrl': u'https://audio-ssl.itunes.apple.com/apple-assets-us-std-000001/Music6/v4/f2/7d/73/f27d7346-de92-bdc6-e148-56a3da406005/mzaf_2747902348777129728.plus.aac.p.m4a', u'trackPrice': 1.29, u'isStreamable': True, u'trackViewUrl': u'https://itunes.apple.com/us/album/sweet-child-o-mine/5669937?i=5669911&amp;uo=4', u'collectionName': u'Greatest Hits', u'collectionId': 5669937, u'trackId': 5669911, u'collectionViewUrl': u'https://itunes.apple.com/us/album/sweet-child-o-mine/5669937?i=5669911&amp;uo=4', u'trackCount': 14, u'trackNumber': 2, u'discNumber': 1, u'collectionPrice': 9.99, u'trackCensoredName': u"Sweet Child O' Mine", u'trackName': u"Sweet Child O' Mine", u'trackTimeMillis': 355267, u'primaryGenreName': u'Rock', u'artistViewUrl': u'https://itunes.apple.com/us/artist/guns-n-roses/106621?uo=4', u'kind': u'song', u'country': u'USA', u'wrapperType': u'track', u'artworkUrl100': u'https://is3-ssl.mzstatic.com/image/thumb/Music/v4/3c/18/87/3c188735-e462-3c99-92eb-50fb06afa73f/source/100x100bb.jpg', u'collectionCensoredName': u'Greatest Hits', u'artistName': u"Guns N' Roses", u'artworkUrl60': u'https://is3-ssl.mzstatic.com/image/thumb/Music/v4/3c/18/87/3c188735-e462-3c99-92eb-50fb06afa73f/source/60x60bb.jpg', u'trackExplicitness': u'notExplicit', u'artworkUrl30': u'https://is3-ssl.mzstatic.com/image/thumb/Music/v4/3c/18/87/3c188735-e462-3c99-92eb-50fb06afa73f/source/30x30bb.jpg', u'discCount': 1}]}
</code></pre>

<p>View the request headers:</p>

<pre><code class="python">&gt;&gt;&gt; response.headers
{'Content-Length': '650', 'x-apple-translated-wo-url': '/WebObjects/MZStoreServices.woa/ws/wsSearch?term=guns+and+roses&amp;limit=1&amp;urlDesc=', 'Access-Control-Allow-Origin': '*', 'x-webobjects-loadaverage': '0', 'X-Cache': 'TCP_MISS from a2-21-98-60.deploy.akamaitechnologies.com (AkamaiGHost/9.3.0.3-22245996) (-)', 'x-content-type-options': 'nosniff', 'x-apple-orig-url': 'https://itunes.apple.com/search?term=guns+and+roses&amp;limit=1', 'x-apple-jingle-correlation-key': 'GUOFR25MGUUK5J7LUKI6UUFUWM', 'x-apple-application-site': 'ST11', 'Date': 'Tue, 08 May 2018 20:50:39 GMT', 'apple-tk': 'false', 'content-disposition': 'attachment; filename=1.txt', 'Connection': 'keep-alive', 'apple-seq': '0', 'x-apple-application-instance': '2001318', 'X-Apple-Partner': 'origin.0', 'Content-Encoding': 'gzip', 'strict-transport-security': 'max-age=31536000', 'Vary': 'Accept-Encoding', 'apple-timing-app': '109 ms', 'X-True-Cache-Key': '/L/itunes.apple.com/search ci2=limit=1&amp;term=guns+and+roses__', 'X-Cache-Remote': 'TCP_MISS from a23-57-75-64.deploy.akamaitechnologies.com (AkamaiGHost/9.3.0.3-22245996) (-)', 'Cache-Control': 'max-age=86400', 'x-apple-request-uuid': '351c58eb-ac35-28ae-a7eb-a291ea50b4b3', 'Content-Type': 'text/javascript; charset=utf-8', 'apple-originating-system': 'MZStoreServices'}
</code></pre>

<h2>Python Requests and the iTunes API:</h2>

<p>Search for the Artist Guns and Roses and limit the output to 1 Song:</p>

<pre><code class="python">&gt;&gt;&gt; import requests
&gt;&gt;&gt; import json
&gt;&gt;&gt; a = 'https://itunes.apple.com/search?term=guns+and+roses&amp;limit=1'
&gt;&gt;&gt; b = requests.get(a).json()
&gt;&gt;&gt; print(json.dumps(b, indent=2))
{
  "resultCount": 1,
  "results": [
    {
      "collectionExplicitness": "notExplicit",
      "releaseDate": "1987-07-21T07:00:00Z",
      "currency": "USD",
      "artistId": 106621,
      "previewUrl": "https://audio-ssl.itunes.apple.com/apple-assets-us-std-000001/Music6/v4/f2/7d/73/f27d7346-de92-bdc6-e148-56a3da406005/mzaf_2747902348777129728.plus.aac.p.m4a",
      "trackPrice": 1.29,
      "isStreamable": true,
      "trackViewUrl": "https://itunes.apple.com/us/album/sweet-child-o-mine/5669937?i=5669911&amp;uo=4",
      "collectionName": "Greatest Hits",
      "collectionId": 5669937,
      "trackId": 5669911,
      "collectionViewUrl": "https://itunes.apple.com/us/album/sweet-child-o-mine/5669937?i=5669911&amp;uo=4",
      "trackCount": 14,
      "trackNumber": 2,
      "discNumber": 1,
      "collectionPrice": 9.99,
      "trackCensoredName": "Sweet Child O' Mine",
      "trackName": "Sweet Child O' Mine",
      "trackTimeMillis": 355267,
      "primaryGenreName": "Rock",
      "artistViewUrl": "https://itunes.apple.com/us/artist/guns-n-roses/106621?uo=4",
      "kind": "song",
      "country": "USA",
      "wrapperType": "track",
      "artworkUrl100": "https://is3-ssl.mzstatic.com/image/thumb/Music/v4/3c/18/87/3c188735-e462-3c99-92eb-50fb06afa73f/source/100x100bb.jpg",
      "collectionCensoredName": "Greatest Hits",
      "artistName": "Guns N' Roses",
      "artworkUrl60": "https://is3-ssl.mzstatic.com/image/thumb/Music/v4/3c/18/87/3c188735-e462-3c99-92eb-50fb06afa73f/source/60x60bb.jpg",
      "trackExplicitness": "notExplicit",
      "artworkUrl30": "https://is3-ssl.mzstatic.com/image/thumb/Music/v4/3c/18/87/3c188735-e462-3c99-92eb-50fb06afa73f/source/30x30bb.jpg",
      "discCount": 1
    }
  ]
}
</code></pre>

<p>From the response we got a <code>"artistId": 106621</code>, lets query the API on the ArtistId, to get info of the Artist:</p>

<pre><code class="python">&gt;&gt;&gt; a = 'https://itunes.apple.com/lookup?id=106621'
&gt;&gt;&gt; b = requests.get(a).json()
&gt;&gt;&gt; print(json.dumps(b, indent=2))
{
  "resultCount": 1,
  "results": [
    {
      "artistType": "Artist",
      "amgArtistId": 4416,
      "wrapperType": "artist",
      "artistId": 106621,
      "artistLinkUrl": "https://itunes.apple.com/us/artist/guns-n-roses/106621?uo=4",
      "artistName": "Guns N' Roses",
      "primaryGenreId": 21,
      "primaryGenreName": "Rock"
    }
  ]
}
</code></pre>

<p>Query all the Albums by Artist by using the ArtistId and Entity for Album:</p>

<pre><code class="python">&gt;&gt;&gt; a = 'https://itunes.apple.com/lookup?id=106621&amp;entity=album'
&gt;&gt;&gt; b = requests.get(a).json()
&gt;&gt;&gt; print(json.dumps(b, indent=2))
{
  "resultCount": 13,
  "results": [
    {
      "artistType": "Artist",
      "amgArtistId": 4416,
      "wrapperType": "artist",
      "artistId": 106621,
      "artistLinkUrl": "https://itunes.apple.com/us/artist/guns-n-roses/106621?uo=4",
      "artistName": "Guns N' Roses",
      "primaryGenreId": 21,
      "primaryGenreName": "Rock"
    },
    {
      "artistViewUrl": "https://itunes.apple.com/us/artist/guns-n-roses/106621?uo=4",
      "releaseDate": "2004-01-01T08:00:00Z",
      "collectionType": "Compilation",
      "collectionName": "Greatest Hits",
      "amgArtistId": 4416,
      "copyright": "\u2117 2004 Geffen Records",
      "collectionId": 5669937,
      "artworkUrl60": "https://is3-ssl.mzstatic.com/image/thumb/Music/v4/3c/18/87/3c188735-e462-3c99-92eb-50fb06afa73f/source/60x60bb.jpg",
      "wrapperType": "collection",
      "collectionViewUrl": "https://itunes.apple.com/us/album/greatest-hits/5669937?uo=4",
      "artistId": 106621,
      "collectionCensoredName": "Greatest Hits",
      "artworkUrl100": "https://is3-ssl.mzstatic.com/image/thumb/Music/v4/3c/18/87/3c188735-e462-3c99-92eb-50fb06afa73f/source/100x100bb.jpg",
      "trackCount": 14,
      "currency": "USD",
      "artistName": "Guns N' Roses",
      "country": "USA",
      "primaryGenreName": "Rock",
      "collectionExplicitness": "notExplicit",
      "collectionPrice": 9.99
    },
</code></pre>

<p>Get the Top 5 Albums by the Artist:</p>

<pre><code class="python">a = 'https://itunes.apple.com/lookup?id=106621&amp;entity=album&amp;limit=5'
</code></pre>

<p>How to get AMG ID (all music id):</p>

<pre><code class="python">&gt;&gt;&gt; a = 'https://itunes.apple.com/search?term=jack+johnson&amp;limit=2'
&gt;&gt;&gt; b = requests.get(a).json()
&gt;&gt;&gt; print(json.dumps(b, indent=2))
{
  "resultCount": 2,
  "results": [
    {
      "collectionExplicitness": "notExplicit",
      "releaseDate": "2005-03-01T08:00:00Z",
      "currency": "USD",
      "artistId": 909253,
</code></pre>

<p>Query Multiple Artists by using the amgId&rsquo;s:</p>

<pre><code class="python">&gt;&gt;&gt; a = 'https://itunes.apple.com/lookup?amgArtistId=468749,5723'
&gt;&gt;&gt; b = requests.get(a).json()
&gt;&gt;&gt; print(json.dumps(b, indent=2))
{
  "resultCount": 2,
  "results": [
    {
      "artistType": "Artist",
      "amgArtistId": 468749,
      "wrapperType": "artist",
      "artistId": 909253,
      "artistLinkUrl": "https://itunes.apple.com/us/artist/jack-johnson/909253?uo=4",
      "artistName": "Jack Johnson",
      "primaryGenreId": 21,
      "primaryGenreName": "Rock"
    },
    {
      "artistType": "Artist",
      "amgArtistId": 5723,
      "wrapperType": "artist",
      "artistId": 78500,
      "artistLinkUrl": "https://itunes.apple.com/us/artist/u2/78500?uo=4",
      "artistName": "U2",
      "primaryGenreId": 21,
      "primaryGenreName": "Rock"
    }
  ]
}
</code></pre>

<p>If we Query the ArtistId from the previous response we will get the same artist:</p>

<pre><code class="python">&gt;&gt;&gt; a = 'https://itunes.apple.com/lookup?id=909253'
&gt;&gt;&gt; b = requests.get(a).json()
&gt;&gt;&gt; print(json.dumps(b, indent=2))
{
  "resultCount": 1,
  "results": [
    {
      "artistType": "Artist",
      "amgArtistId": 468749,
      "wrapperType": "artist",
      "artistId": 909253,
      "artistLinkUrl": "https://itunes.apple.com/us/artist/jack-johnson/909253?uo=4",
      "artistName": "Jack Johnson",
      "primaryGenreId": 21,
      "primaryGenreName": "Rock"
    }
  ]
}
</code></pre>

<p>Only get the Artist Name:</p>

<pre><code class="python">&gt;&gt; b
{u'resultCount': 1, u'results': [{u'artistType': u'Artist', u'amgArtistId': 468749, u'wrapperType': u'artist', u'artistId': 909253, u'artistLinkUrl': u'https://itunes.apple.com/us/artist/jack-johnson/909253?uo=4', u'artistName': u'Jack Johnson', u'primaryGenreId': 21, u'primaryGenreName': u'Rock'}]}

&gt;&gt;&gt; b['results'][0]['artistName']
u'Jack Johnson'
</code></pre>

<p>Printing out the Artist Name and Genre with String Formatting:</p>

<pre><code class="python">&gt;&gt;&gt; print('Artist: {artist_name}, Genre: {genre_name}'.format(artist_name=b['results'][0]['artistName'], genre_name=b['results'][0]['primaryGenreName']))
Artist: Jack Johnson, Genre: Rock
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic RESTFul API Server With Python Flask]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/21/basic-restful-api-server-with-python-flask/"/>
    <updated>2018-04-21T19:35:34-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/21/basic-restful-api-server-with-python-flask</id>
    <content type="html"><![CDATA[<p><img src="http://obj-cache.cloud.ruanbekker.com/flask.png" alt="" /></p>

<p>A Basic RESTFul API Service with Python Flask. We will be using the Flask, jsonify and request classes to build our API service.</p>

<h2>Description of this demonstration:</h2>

<p>Our API will be able to do the following:</p>

<ul>
<li>Create, Read, Update, Delete</li>
</ul>


<p>In this demonstration, we will add some information about people to our API, then go through each method that is mentioned above.</p>

<h2>Getting the Dependencies:</h2>

<p>Setup the virtualenv and install the dependencies:</p>

<pre><code class="bash">$ virtualenv .venv
$ source .venv/bin/activate
$ pip install flask
</code></pre>

<h2>The API Server Code:</h2>

<p>Here&rsquo;s the complete code, as you can see I have a couple of decorators for each url endpoint, and a <code>id_generator</code> function, that will generate id&rsquo;s for each document. The id will be used for getting users information, updates and deletes:</p>

<pre><code class="python">from flask import Flask, jsonify, request
from multiprocessing import Value

counter = Value('i', 0)
app = Flask(__name__)

a = []
help_message = """
API Usage:

- GET    /api/list
- POST   /api/add data={"key": "value"}
- GET    /api/get/&lt;id&gt;
- PUT    /api/update/&lt;id&gt; data={"key": "value_to_replace"}
- DELETE /api/delete/&lt;id&gt; 

"""

def id_generator():
    with counter.get_lock():
        counter.value += 1
        return counter.value

@app.route('/api', methods=['GET'])
def help():
    return help_message

@app.route('/api/list', methods=['GET'])
def list():
    return jsonify(a)

@app.route('/api/add', methods=['POST'])
def index():
    payload = request.json 
    payload['id'] = id_generator()
    a.append(payload)
    return "Created: {} \n".format(payload)

@app.route('/api/get', methods=['GET'])
def get_none():
    return 'ID Required: /api/get/&lt;id&gt; \n'

@app.route('/api/get/&lt;int:_id&gt;', methods=['GET'])
def get(_id):
    for user in a:
        if _id == user['id']:
            selected_user = user
    return jsonify(selected_user)

@app.route('/api/update', methods=['PUT'])
def update_none():
    return 'ID and Desired K/V in Payload required: /api/update/&lt;id&gt; -d \'{"name": "john"}\' \n'

@app.route('/api/update/&lt;int:_id&gt;', methods=['PUT'])
def update(_id):
    update_req = request.json
    key_to_update = update_req.keys()[0]
    update_val = (item for item in a if item['id'] == _id).next()[key_to_update] = update_req.values()[0]
    update_resp = (item for item in a if item['id'] == _id).next()
    return "Updated: {} \n".format(update_resp)

@app.route('/api/delete/&lt;int:_id&gt;', methods=['DELETE'])
def delete(_id):
    deleted_user = (item for item in a if item['id'] == _id).next()
    a.remove(deleted_user)
    return "Deleted: {} \n".format(deleted_user)

if __name__ == '__main__':
    app.run()
</code></pre>

<h2>Demo Time:</h2>

<p>Retrieving the Help output:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api

API Usage:

- GET    /api/list
- POST   /api/add data={"key": "value"}
- GET    /api/get/&lt;id&gt;
- PUT    /api/update/&lt;id&gt; data={"key": "value_to_replace"}
- DELETE /api/delete/&lt;id&gt; 
</code></pre>

<p>Doing a list, to list all the users, its expected for it to be empty as we have not added any info to our API:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api/list
[]
</code></pre>

<p>Adding our first user:</p>

<pre><code class="bash">$ curl -XPOST -H 'Content-Type: application/json' http://localhost:5000/api/add -d '{"name": "ruan", "country": "south africa", "age": 30}'
Created: {u'country': u'south africa', u'age': 30, u'name': u'ruan', 'id': 1} 
</code></pre>

<p>Adding our second user:</p>

<pre><code class="bash">$ curl -XPOST -H 'Content-Type: application/json' http://localhost:5000/api/add -d '{"name": "stefan", "country": "south africa", "age": 29}'
Created: {u'country': u'south africa', u'age': 29, u'name': u'stefan', 'id': 2}
</code></pre>

<p>Doing a list again, will retrieve all our users:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api/list
[
  {
    "age": 30, 
    "country": "south africa", 
    "id": 1, 
    "name": "ruan"
  }, 
  {
    "age": 29, 
    "country": "south africa", 
    "id": 2, 
    "name": "stefan"
  }
]
</code></pre>

<p>Doing a GET on the userid, to only display the users info:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api/get/2
{
  "age": 29, 
  "country": "south africa", 
  "id": 2, 
  "name": "stefan"
}
</code></pre>

<p>Now, let&rsquo;s update some details. Let&rsquo;s say that Stefan relocated to New Zealand. We will need to provide his <code>id</code> and also the key/value that we want to update:</p>

<pre><code class="bash">$ curl -XPUT -H 'Content-Type: application/json' http://localhost:5000/api/update/2 -d '{"country": "new zealand"}'
Updated: {u'country': u'new zealand', u'age': 29, u'name': u'stefan', 'id': 2} 
</code></pre>

<p>As you can see the response confirmed that the value was updated, but let&rsquo;s verify the output, by doing a get on his id:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api/get/2
{
  "age": 29, 
  "country": "new zealand", 
  "id": 2, 
  "name": "stefan"
}
</code></pre>

<p>And lastly, lets delete our user, which will only require the userid:</p>

<pre><code class="bash">$ curl -XDELETE -H 'Content-Type: application/json' http://localhost:5000/api/delete/2
Deleted: {u'country': u'new zealand', u'age': 29, u'name': u'stefan', 'id': 2} 
</code></pre>

<p>To verify this, list all the users:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api/list
[
  {
    "age": 30, 
    "country": "south africa", 
    "id": 1, 
    "name": "ruan"
  }
]
</code></pre>

<h2>Using Python Requests:</h2>

<p>We can also use python&rsquo;s requests module to do the same, to give a demonstration I will create a new user:</p>

<pre><code class="bash">$ pip install requests
$ python
</code></pre>

<pre><code class="python">&gt;&gt;&gt; import requests
&gt;&gt;&gt; import json

&gt;&gt;&gt; base_url = 'http://localhost:5000/api/add'
&gt;&gt;&gt; headers = {"Content-Type": "application/json"}
&gt;&gt;&gt; payload = json.dumps({"name": "shaun", "country": "australia", "age": 24})

&gt;&gt;&gt; r = requests.post(base_url, headers=headers, data=payload)
&gt;&gt;&gt; r.content
Created: {u'country': u'australia', u'age': 24, u'name': u'shaun', 'id': 4}
</code></pre>

<p>Thats it. I&rsquo;ve stumbled upon <a href="https://flask-restful.readthedocs.io/en/latest/">Flask-Restful</a> which I still want to check out, and as soon as I do, I will do a post on it, maybe baked with a NoSQL db or something like that.</p>

<p>Cheers!</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://stackoverflow.com/a/8653568">Python Generator Expressions</a></li>
<li><a href="http://flask.pocoo.org/docs/0.12/api/#flask.Request">Flask Docs</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Send SMS Messages With Python and Twilio via Their API]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/03/02/send-sms-messages-with-python-and-twilio-via-their-api/"/>
    <updated>2018-03-02T17:09:56-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/03/02/send-sms-messages-with-python-and-twilio-via-their-api</id>
    <content type="html"><![CDATA[<p>This post will guide you through the steps on how to send SMS messages with Python and Twilio. We will use <code>talaikis.com</code> API to get a random quote that we will include in the body of the sms.</p>

<h2>Signup for a Trail Account:</h2>

<p>Sign up for a trail account at <a href="https://www.twilio.com">Twilio</a> then create a number, which I will refer to as the <code>sender number</code>, take note of your accountid and token.</p>

<h2>Create the Config:</h2>

<p>Create the config, that will keep the accountid, token, sender number and recipient number:</p>

<pre><code class="python config.py">secrets = {
    'account': 'xxxxxxxx',
    'token': 'xxxxxxx',
    'sender': '+1234567890',
    'receiver': '+0987654321'
}
</code></pre>

<h2>Create the Client:</h2>

<p>We will get a random quote via talaikis.com&rsquo;s API which we will be using for the body of our text message, and then use twilio&rsquo;s API to send the text message:</p>

<pre><code class="python sms_client.py">from config import secrets
from twilio.rest import Client
import requests

twilio_acountid = secrets['account']
twilio_token = secrets['token']
twilio_receiver = secrets['receiver']
twilio_sender = secrets['sender']

quote_response = requests.get('https://talaikis.com/api/quotes/random').json()

client = Client(
    twilio_acountid, 
    twilio_token
)

message = client.messages.create(
    to=twilio_receiver, 
    from_=twilio_sender, 
    body=quote_response['quote']
)
</code></pre>

<h2>Message Preview:</h2>

<p>Then within a couple of seconds your message should look something more or less like this:</p>

<p><img src="https://i.snag.gy/Oqj2cP.jpg" alt="" /></p>

<p>For more info, have a look at their docs:
- <a href="https://www.twilio.com/docs/">https://www.twilio.com/docs/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Python API for MongoDB Using PyMongo]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/08/27/using-the-python-api-for-mongodb-using-pymongo/"/>
    <updated>2017-08-27T16:19:48-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/08/27/using-the-python-api-for-mongodb-using-pymongo</id>
    <content type="html"><![CDATA[<p>Using the Python API for MongoDB using Pymongo</p>

<h2>Requirements:</h2>

<p>You will need to install the <code>pymongo</code> driver using pip:</p>

<pre><code class="bash Install Pymongo">$ pip install pymongo
</code></pre>

<p>A configuration file with your access credentials, which I like to use outside my code:</p>

<pre><code class="bash config.py">credentials = {
    "mongodb": {
        "HOSTNAME": "host.domain.com",
        "USERNAME": "username",
        "PASSWORD": "password"
    }
}
</code></pre>

<h2>Connecting to MongoDB:</h2>

<p>From the python interpreter, connect to MongoDB:</p>

<pre><code class="python ">&gt;&gt;&gt; from pymongo import MongoClient
&gt;&gt;&gt; from config import credentials as secrets
&gt;&gt;&gt; mongo_host = secrets['mongodb']['HOSTNAME']
&gt;&gt;&gt; mongo_username = secrets['mongodb']['USERNAME']
&gt;&gt;&gt; mongo_password = secrets['mongodb']['PASSWORD']
&gt;&gt;&gt; mongodb_client = MongoClient('mongodb://%s:%s@%s:27017/admin?authMechanism=SCRAM-SHA-1' % (mongo_username, mongo_password, mongo_host))
</code></pre>

<p>Find the Database that you are connected to:</p>

<pre><code class="python">&gt;&gt;&gt; mongodb_client.get_database().name
u'admin'
</code></pre>

<p>Find all the databases that is currently on your MongoDB Server:</p>

<pre><code class="python">&gt;&gt;&gt; dbs = mongodb_client.database_names()
&gt;&gt;&gt; for x in dbs:
...     print(x)
...
admin
flask_reminders
local
</code></pre>

<h2>Create a Database, Collection and Write a Document into your Database:</h2>

<p>Let&rsquo;s create a database, in my case it will be <code>ruan-test</code>, and my collection name <code>mycollection</code> and the write one item into it:</p>

<pre><code class="python">&gt;&gt;&gt; newdb = mongodb_client['ruan-test']
&gt;&gt;&gt; newdb_collection = newdb['mycollection']
&gt;&gt;&gt; doc = {"name": "frank", "surname": "jeffreys", "tags": ["person", "name"]}
&gt;&gt;&gt; doc_id = newdb_collection.insert_one(doc).inserted_id
&gt;&gt;&gt; print(doc_id)
59a319ec1f15a5088ba3a339
</code></pre>

<p>Note: you can also connect to your collection like the following</p>

<pre><code class="python">&gt;&gt;&gt; newdb_collection = mongodb_client['ruan-test']['mycollection']
</code></pre>

<p>We have inserted one item into our database, which we can verify with <code>count()</code>:</p>

<pre><code class="python">&gt;&gt;&gt; newdb_collection.find().count()
1
</code></pre>

<p>As you can see I have the value of the item&rsquo;s id, we can use that to find it from our collection:</p>

<pre><code class="python">&gt;&gt;&gt; newdb_collection.find_one({"_id": doc_id})
{u'_id': ObjectId('59a319ec1f15a5088ba3a339'), u'surname': u'jeffreys', u'name': u'frank', u'tags': [u'person', u'name']}
</code></pre>

<p>As we only have one item in our database, we can also use <code>find_one()</code> which will give us the exact same data:</p>

<pre><code class="python">&gt;&gt;&gt; newdb_collection.find_one()
{u'_id': ObjectId('59a319ec1f15a5088ba3a339'), u'surname': u'jeffreys', u'name': u'frank', u'tags': [u'person', u'name']}
</code></pre>

<p>We can write some more data to our database, but this time, lets write to a different collection:</p>

<pre><code class="python">&gt;&gt;&gt; newdb_collection2 = newdb['new-collection-2']
&gt;&gt;&gt; item = newdb_collection2.insert_one({"name": "ruby", "surname": "james"}).inserted_id
&gt;&gt;&gt; item2 = newdb_collection2.insert_one({"name": "ruby", "surname": "james"}).inserted_id
</code></pre>

<p>As we captured the items <code>_id</code>, we can view the:</p>

<pre><code class="python">&gt;&gt;&gt; print(item)
59a31acf1f15a5088ba3a33b
&gt;&gt;&gt; print(item2)
59a31a8a1f15a5088ba3a33a
</code></pre>

<h2>Query Data from MongoDB:</h2>

<p>We can then query for this data:</p>

<pre><code class="python">&gt;&gt;&gt; newdb2.find_one({"name": "ruby"})
{u'_id': ObjectId('59a31acf1f15a5088ba3a33b'), u'surname': u'james', u'name': u'ruby'}

&gt;&gt;&gt; newdb2.find_one({"_id": item})
{u'_id': ObjectId('59a31acf1f15a5088ba3a33b'), u'surname': u'james', u'name': u'ruby'}
</code></pre>

<p>Also scan for all items in the collection:</p>

<pre><code class="python">&gt;&gt;&gt; scan = newdb_collection2.find({})
&gt;&gt;&gt; for x in scan:
...     print(x)
...
{u'_id': ObjectId('59a31a8a1f15a5088ba3a33a'), u'surname': u'james', u'name': u'phillip'}
{u'_id': ObjectId('59a31acf1f15a5088ba3a33b'), u'surname': u'james', u'name': u'ruby'}

&gt;&gt;&gt; newdb2.find().count()
2
</code></pre>

<p>We can now verify that we have 2 collections in our database:</p>

<pre><code class="python">&gt;&gt;&gt; newdb.collection_names()
[u'mycollection-2', u'mycollection']
</code></pre>

<h2>Connecting to an existing Database:</h2>

<p>Let&rsquo;s connect to an existing database on our MongoDB Server:</p>

<pre><code class="python">&gt;&gt;&gt; flaskdb = mongodb_client['flask_reminders']
</code></pre>

<p>List the collections:</p>

<pre><code class="python">&gt;&gt;&gt; flaskdb.collection_names()
[u'reminders', u'usersessions']
</code></pre>

<p>Count the number of items in our <code>reminders</code> Collection:</p>

<pre><code class="python">&gt;&gt;&gt; flaskdb.reminders.find().count()
624
</code></pre>

<p>Find a Random Item:</p>

<pre><code class="python">&gt;&gt;&gt; flaskdb.reminders.find_one()
{u'category': u'Python', u'description': u'Chatbot with SQLite', u'link': u'http://rodic.fr/blog/python-chatbot-1/', u'date': u'2017-01-03', u'_id': ObjectId('586bb6dd0269103671afce32'), u'type': u'Discovered Service'}
</code></pre>

<p>Find One Item, with a Specific Value, for example the value <code>AWS</code> for our <code>Category key</code>:</p>

<pre><code class="python">&gt;&gt;&gt; flaskdb.reminders.find_one({"category": "AWS"})
{u'category': u'AWS', u'description': u'Elasticsearch Documentation Access Policies', u'link': u'http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-access-policies', u'date': u'2017-02-13', u'_id': ObjectId('58a1d45202691070616947c3'), u'type': u'Documentation'}
</code></pre>

<p>Find All Items, with a specific value:</p>

<pre><code class="python">&gt;&gt;&gt; data = flaskdb.reminders.find({"category": "AWS"})
&gt;&gt;&gt; for x in data:
...     print(x)
...
{u'category': u'Python', u'description': u'Chatbot with SQLite', u'link': u'http://rodic.fr/blog/python-chatbot-1/', u'date': u'2017-01-03', u'_id': ObjectId('586bb6dd0269103671afce32'), u'type': u'Discovered Service'}
{u'category': u'Python', u'description': u'Boto: Kinesis List', u'link': u'https://gitlab.com/rbekker87/code-examples/blob/master/kinesis/firehose/python/firehose.list.py', u'date': u'2017-01-05', u'_id': ObjectId('586dde1e0269103671afce36'), u'type': u'Stuff Done'}
</code></pre>

<h2>Deleting Databases:</h2>

<p>Cleaning up, deleting the database that we created, when a database is delete, the collections within that database also gets removed.</p>

<p>First list the databases:</p>

<pre><code>&gt;&gt;&gt; dbs = mongodb_client.database_names()
&gt;&gt;&gt; for x in dbs:
...     print(x)
...
admin
flask_reminders
local
ruan-test
</code></pre>

<p>Then delete the database that you want to delete:</p>

<pre><code class="python">&gt;&gt;&gt; mongodb_client.drop_database("ruan-test")
</code></pre>

<p>Then verify if the database was removed:</p>

<pre><code class="python">&gt;&gt;&gt; dbs = mongodb_client.database_names()
&gt;&gt;&gt; for x in dbs:
...     print(x)
...
admin
flask_reminders
local
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="http://api.mongodb.com/python/current/tutorial.html">http://api.mongodb.com/python/current/tutorial.html</a></li>
<li><a href="https://docs.mongodb.com/getting-started/python/client/">https://docs.mongodb.com/getting-started/python/client/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
