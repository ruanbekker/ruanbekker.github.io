<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Arguments | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/arguments/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-06-02T14:43:03-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Basic Introduction to Use Arguments With Argparse on Python]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/18/basic-introduction-to-use-arguments-with-argparse-on-python/"/>
    <updated>2018-04-18T13:35:28-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/18/basic-introduction-to-use-arguments-with-argparse-on-python</id>
    <content type="html"><![CDATA[<p>I used to work a lot with <code>sys.argv</code> for using arguments in my applications, until I stumbled upon the <code>argparse</code> module! (Thanks Donovan!)</p>

<p>What I like about argparse, is that it builds up the help menu for you, and you also have a lot of options, as you can set the argument to be required, set the datatypes, addtional help context etc.</p>

<h2>The Basic Demonstration:</h2>

<p>Today we will just run through a very basic example on how to use <code>argparse</code>:</p>

<ul>
<li>Return the generated help menu</li>
<li>Return the required value</li>
<li>Return the additional arguments</li>
<li>Compare arguments with a IF statement</li>
</ul>


<h2>The Python Argparse Tutorial Code:</h2>

<pre><code class="python">import argparse

parser = argparse.ArgumentParser(description='argparse demo')
parser.add_argument('-w', '--word', help='a word (required)', required=True)
parser.add_argument('-s', '--sentence', help='a sentence (not required)', required=False)
parser.add_argument('-c', '--comparison', help='a word to compare (not required)', required=False)
args = parser.parse_args()

print("Word: {}".format(args.word))

if args.sentence:
    print("Sentence: :{}".format(args.sentence))

if args.comparison:
    if args.comparison == args.word:
        print("Comparison: the provided word argument and provided comparison argument is the same")
    else:
        print("Comparison: the provided word argument and provided comparison argument is NOT the same")
</code></pre>

<h2>Seeing it in action:</h2>

<p>To return a usage/help info, run it with the <code>-h</code> or <code>--help</code> argument:</p>

<pre><code class="bash">$ python foo.py -h
usage: foo.py [-h] -w WORD [-s SENTENCE] [-c COMPARISON]

argparse demo

optional arguments:
  -h, --help            show this help message and exit
  -w WORD, --word WORD  a word (required)
  -s SENTENCE, --sentence SENTENCE
                        a sentence (not required)
  -c COMPARISON, --comparison COMPARISON
                        a word to compare (not required)
</code></pre>

<p>For this to work, the application is expecting the <code>word</code> argument to run, as we declared it as <code>required=True</code>:</p>

<pre><code class="bash">$ python foo.py -w hello
Word: hello
</code></pre>

<p>Now to use the arguments that is not required, which makes it optional:</p>

<pre><code class="bash">$ python foo.py -w hello -s "hello, world"
Word: hello
Sentence: :hello, world
</code></pre>

<p>We can also implement some if statements into our application to compare if arguments are the same (as a basic example):</p>

<pre><code class="bash">$ python foo.py -w hello -s "hello, world" -c goodbye
Word: hello
Sentence: :hello, world
Comparison: the provided word argument and provided comparison argument is NOT the same
</code></pre>

<p>We can see that the word and comparison arguments are not the same. When they match up:</p>

<pre><code class="bash">$ python foo.py -w hello -s "hello, world" -c hello
Word: hello
Sentence: :hello, world
Comparison: the provided word argument and provided comparison argument is the same
</code></pre>

<p>This was a very basic demonstration on the <code>argparse</code> module.</p>

<h2>Resource:</h2>

<ul>
<li><a href="https://docs.python.org/3/library/argparse.html">Python Docs: Argparse</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
