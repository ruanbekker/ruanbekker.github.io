<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Authentication | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/authentication/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-05-29T10:11:02-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nginx Basic Authentication With Source IP Whitelisting]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/03/19/nginx-basic-authentication-with-source-ip-whitelisting/"/>
    <updated>2018-03-19T10:57:36-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/03/19/nginx-basic-authentication-with-source-ip-whitelisting</id>
    <content type="html"><![CDATA[<p>Quick post on how to setup HTTP Basic Authentication and whitelist IP Based Sources to not get prompted for Authentication.</p>

<p>This could be useful for systems interacting with Nginx, so that they don&rsquo;t have to provide authentication.</p>

<h2>Dependencies:</h2>

<p>Install nginx and the package required to create the auth file:</p>

<pre><code>$ apt install nginx apache2-utils -y
</code></pre>

<p>Create the Password file:</p>

<pre><code>$ htpasswd -c /etc/ngins/secrets admin
</code></pre>

<h2>Configuration:</h2>

<p>Create the site config:</p>

<pre><code>$ rm -rf /etc/nginx/conf.d/*.conf
$ vim /etc/nginx/conf.d/default.conf
</code></pre>

<pre><code>server {
    listen       80;
    server_name  localhost;

    location / {
        satisfy any;
        allow 127.0.0.1;
        deny all;

        auth_basic "restricted";
        auth_basic_user_file /etc/nginx/secrets;
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}
</code></pre>

<p>Reload the Changes:</p>

<pre><code>$ nginx -s reload
</code></pre>

<h2>Testing:</h2>

<p>Testing from our Whitelisted location (localhost):</p>

<pre><code>curl -i http://127.0.0.1 
HTTP/1.1 200 OK
</code></pre>

<p>Testing from remote location:</p>

<pre><code>$ curl -i http://localhost
HTTP/1.1 401 Unauthorized

$ curl -i http://admin:password@localhost
HTTP/1.1 200 OK
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Getpass in Python to Accept Passwords From Stdin Without Echoing It Back]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/01/22/using-getpass-in-python-to-accept-passwords-from-stdin-without-echoing-it-back/"/>
    <updated>2018-01-22T13:15:09-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/01/22/using-getpass-in-python-to-accept-passwords-from-stdin-without-echoing-it-back</id>
    <content type="html"><![CDATA[<p>Using <code>raw_input</code> in python expects standard input, which echo&rsquo;s it back after enter is executed, below is an example:</p>

<pre><code class="python">&gt;&gt;&gt; word = raw_input("What is the word? \n")
What is the word?
football
&gt;&gt;&gt; print(word)
football
</code></pre>

<p>Using getpass, the standard input gets masked, like you would expect when entering a password, like below:</p>

<pre><code class="python">&gt;&gt;&gt; from getpass import getpass
&gt;&gt;&gt; word = getpass()
Password:
&gt;&gt;&gt; print(word)
rugby
</code></pre>

<p>Changing the default prompt:</p>

<pre><code class="python">&gt;&gt;&gt; word = getpass(prompt='What is your name? ')
What is your name?
&gt;&gt;&gt; print(word)
Ruan
</code></pre>

<p>Creating a Simple Insecure Password Verification App:</p>

<pre><code class="python">from getpass import getpass

password = getpass()
if password.lower() == 'simplepass':
    print 'Password Correct'
else:
    print 'Password Failed'
</code></pre>

<p>Testing it, by first entering a incorrect string, then the correct one:</p>

<pre><code class="bash">$ python auth-check.py
Password:
Password Failed

$ python auth-check.py
Password:
Password Correct
</code></pre>

<p>You definitely don&rsquo;t want to hard code the credentials in your app, but you get the idea.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Kerberos Server and Client on Ubuntu]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/18/setup-kerberos-server-and-client-on-ubuntu/"/>
    <updated>2017-10-18T18:25:11-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/18/setup-kerberos-server-and-client-on-ubuntu</id>
    <content type="html"><![CDATA[<p>Kerberos is a authentication protocol that provides a centralized authentication server, that works with the concepts of tickets that are encrypted.</p>

<p>Today we will setup a Kerberos Server (KDC) and setup and Kerberos Enabled Client, and then testing our setup by obtaining a Kerberos Ticket from our server.</p>

<h2>Setup the Server:</h2>

<p>Install Kerberos KDC and Admin Server:</p>

<pre><code class="bash">$ apt update &amp;&amp; apt upgrade -y
$ apt install krb5-kdc krb5-admin-server krb5-config -y
$ krb5_newrealm
</code></pre>

<p>You will be prompted for realm, and hostnames, in my case I have setup the following:</p>

<ul>
<li>REALM: <code>LAN.RUANBEKER.COM</code></li>
<li>HOST: <code>localhost</code></li>
<li>ADMIN_SERVER: <code>localhost</code></li>
</ul>


<p>Then our master password:</p>

<pre><code class="bash">This script should be run on the master KDC/admin server to initialize
a Kerberos realm.  It will ask you to type in a master key password.
This password will be used to generate a key that is stored in
/etc/krb5kdc/stash.  You should try to remember this password, but it
is much more important that it be a strong password than that it be
remembered.  However, if you lose the password and /etc/krb5kdc/stash,
you cannot decrypt your Kerberos database.
Loading random data
Initializing database '/var/lib/krb5kdc/principal' for realm 'LAN.RUANBEKKER.COM',
master key name 'K/M@LAN.RUANBEKKER.COM'
You will be prompted for the database Master Password.
It is important that you NOT FORGET this password.
Enter KDC database master key: 
Re-enter KDC database master key to verify: 
</code></pre>

<p>The output:</p>

<pre><code class="bash">Now that your realm is set up you may wish to create an administrative
principal using the addprinc subcommand of the kadmin.local program.
Then, this principal can be added to /etc/krb5kdc/kadm5.acl so that
you can use the kadmin program on other computers.  Kerberos admin
principals usually belong to a single user and end in /admin.  For
example, if jruser is a Kerberos administrator, then in addition to
the normal jruser principal, a jruser/admin principal should be
created.

Don't forget to set up DNS information so your clients can find your
KDC and admin servers.  Doing so is documented in the administration
guide.
</code></pre>

<p>Uncomment the last line which contains <code>admin</code>:</p>

<pre><code class="bash">$ vi /etc/krb5kdc/kadm5.acl
</code></pre>

<p>a Kerberos principal is a unique identity to which Kerberos can assign tickets, lets add our first principal, <code>james</code>:</p>

<pre><code class="bash">$ kadmin.local 
Authenticating as principal root/admin@LAN.RUANBEKKER.COM with password.
kadmin.local:  addprinc james

WARNING: no policy specified for james@LAN.RUANBEKKER.COM; defaulting to no policy
Enter password for principal "james@LAN.RUANBEKKER.COM": 
Re-enter password for principal "james@LAN.RUANBEKKER.COM": 
Principal "james@LAN.RUANBEKKER.COM" created.
kadmin.local:  exit
</code></pre>

<h2>Setup the Client:</h2>

<p>Setup a Host Entry:</p>

<pre><code class="bash">$ echo '10.1.1.1 kdc.lan.ruanbekker.com kdc' &gt;&gt; /etc/hosts
</code></pre>

<p>Setup Kerberos Client:</p>

<pre><code class="bash">$ apt install krb5-user -y
- realm
- hostname
- hostname
</code></pre>

<p>Obtain a Ticket from the Server:</p>

<pre><code class="bash">$ kinit -p james
Password for james@LAN.RUANBEKKER.COM: 

$ klist
Ticket cache: FILE:/tmp/krb5cc_0
Default principal: james@LAN.RUANBEKKER.COM

Valid starting     Expires            Service principal
10/18/17 22:13:34  10/19/17 08:13:34  krbtgt/LAN.RUANBEKKER.COM@LAN.RUANBEKKER.COM
    renew until 10/19/17 22:13:30
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="http://csetutorials.com/setup-kerberos-ubuntu.html">http://csetutorials.com/setup-kerberos-ubuntu.html</a></li>
<li><a href="https://www.rootusers.com/how-to-configure-linux-to-authenticate-using-kerberos/">https://www.rootusers.com/how-to-configure-linux-to-authenticate-using-kerberos/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
