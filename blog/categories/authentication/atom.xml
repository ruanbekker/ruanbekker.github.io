<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Authentication | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/authentication/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-06-02T14:43:03-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Add a Authentication Header to Your Python Flask App]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/06/01/add-a-authentication-header-to-your-python-flask-app/"/>
    <updated>2018-06-01T03:28:05-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/06/01/add-a-authentication-header-to-your-python-flask-app</id>
    <content type="html"><![CDATA[<p><img src="http://obj-cache.cloud.ruanbekker.com/flask.png" alt="" /></p>

<p>We will write a simple Python Flask application that requires authentication in order to respond with a 200 HTTP Status code.</p>

<h2>Python Flask Application:</h2>

<p>Our Python Flask application will require the Header <code>x-api-key dhuejso2dj3d0</code> in the HTTP Request, to give us a 200 HTTP Status code, if not, we will respond with a 401 Unauthorized Response:</p>

<pre><code class="python">from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/')
def index():
    headers = request.headers
    auth = headers.get("X-Api-Key")
    if auth == 'asoidewfoef':
        return jsonify({"message": "OK: Authorized"}), 200
    else:
        return jsonify({"message": "ERROR: Unauthorized"}), 401

if __name__ == '__main__':
    app.run()
</code></pre>

<p>To get the headers, you can use <code>headers.get("X-Api-Key")</code> or <code>headers["X-Api-Key"]</code></p>

<p>Create a virtual environment, install flask and run the app:</p>

<pre><code class="bash">$ virtualenv .venv
$ source .venv/bin/activate
$ python app.py
 * Serving Flask app "app" (lazy loading)
 * Environment: production
   WARNING: Do not use the development server in a production environment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
</code></pre>

<h2>Requests to our App:</h2>

<p>Let&rsquo;s first make a request with no headers, which should then give us a 401 Unautorhized response:</p>

<pre><code class="bash">$ curl -i http://localhost:5000

HTTP/1.0 401 UNAUTHORIZED
Content-Type: application/json
Content-Length: 33
Server: Werkzeug/0.14.1 Python/3.6.5
Date: Fri, 01 Jun 2018 07:26:25 GMT

{"message":"ERROR: Unauthorized"}
</code></pre>

<p>Now let&rsquo;s include the authentication token in our headers. If the string is the same as the one in the code, we should see a 200 HTTP Response:</p>

<pre><code class="bash">$ curl -i -H 'x-api-key: asoidewfoef' http://localhost:5000

HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 29
Server: Werkzeug/0.14.1 Python/3.6.5
Date: Fri, 01 Jun 2018 07:27:03 GMT

{"message":"OK: Authorized"}
</code></pre>

<h2>Note:</h2>

<p>From a best practice, its not a good decision to hard code sensitive details in your code, but rather read that from an encrypted database and store that in your applications environment variables, and let your application read from the environment variables, something like that :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH Tools That Comes in Handy When Dealing With Multiple Servers]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/05/31/ssh-tools-that-comes-in-handy-when-dealing-with-multiple-servers/"/>
    <updated>2018-05-31T05:18:11-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/05/31/ssh-tools-that-comes-in-handy-when-dealing-with-multiple-servers</id>
    <content type="html"><![CDATA[<p>When dealing with a lot of servers where you need to ssh to different servers and especially if they require different authentication from different private ssh keys, it kinda gets annoying specifying the private key you need, when you want to SSH to them.</p>

<h2>SSH Config</h2>

<p>SSH Config: <code>~/.ssh/config</code> is powerful!</p>

<p>In this config file, you can specify the remote host, the key, user and the alias, so that when you want to SSH to it, you dont have to use the fully qualified domain name or IP address.</p>

<p>Let&rsquo;s take for example our server-a with the following details:</p>

<ul>
<li>FQDN: host1.eu.compute.domain.coom</li>
<li>User: james</li>
<li>PrivateKeyFile: /path/to/key.pem</li>
<li>Disable Strict Host Checking</li>
</ul>


<p>So to access that host, you would use the following command (without ssh config):</p>

<pre><code class="bash">$ ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -i /path/to/key.pem james@host1.eu.compute.domain.com
</code></pre>

<p>Now with SSH Config, open up the config file:</p>

<p><code>~/.ssh/config
$ vim ~/.ssh/config
</code></p>

<p>and declare the host details:</p>

<pre><code>Host host1
  Hostname host1.eu.compute.domain.com
  User james
  IdentityFile /path/to/key.pem
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null
</code></pre>

<p>Now, if we need to SSH to it, we can do it as simply as:</p>

<pre><code class="bash">$ ssh host1
</code></pre>

<p>as it will pull in the configs from the config that is described from the host alias that you calling from the argument of the ssh binary.</p>

<h2>SSH Agent</h2>

<p>Another handy tool is <code>ssh-agent</code>, if you have password encryption on your key, everytime you need to ssh, a password will be prompted. A way to get around this is to use the ssh-agent.</p>

<p>We also want to set a TTL to the ssh-agent, as we don&rsquo;t want it to run forever (unless you want it to). In this case I will let the ssh-agent exit after 2 hours. It will also only run in the shell session from where you execute it. Lets start up our ssh-agent:</p>

<pre><code class="bash">$ eval $(ssh-agent -t 7200)
Agent pid 88760 
</code></pre>

<p>Now add the private key to the ssh-agent. If your private key is password protected, it will prompt you for the password and after successful verification the key will be added:</p>

<pre><code>$ ssh-add /path/to/key.pem
Identity added: /path/to/key.pem (/path/to/key.pem)
</code></pre>

<h2>Multiple Github Accounts:</h2>

<p>Here is a great post on how to work with different GitHub Accounts:
- <a href="https://gist.github.com/jexchan/2351996">https://gist.github.com/jexchan/2351996</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx Basic Authentication With Source IP Whitelisting]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/03/19/nginx-basic-authentication-with-source-ip-whitelisting/"/>
    <updated>2018-03-19T10:57:36-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/03/19/nginx-basic-authentication-with-source-ip-whitelisting</id>
    <content type="html"><![CDATA[<p>Quick post on how to setup HTTP Basic Authentication and whitelist IP Based Sources to not get prompted for Authentication.</p>

<p>This could be useful for systems interacting with Nginx, so that they don&rsquo;t have to provide authentication.</p>

<h2>Dependencies:</h2>

<p>Install nginx and the package required to create the auth file:</p>

<pre><code>$ apt install nginx apache2-utils -y
</code></pre>

<p>Create the Password file:</p>

<pre><code>$ htpasswd -c /etc/ngins/secrets admin
</code></pre>

<h2>Configuration:</h2>

<p>Create the site config:</p>

<pre><code>$ rm -rf /etc/nginx/conf.d/*.conf
$ vim /etc/nginx/conf.d/default.conf
</code></pre>

<pre><code>server {
    listen       80;
    server_name  localhost;

    location / {
        satisfy any;
        allow 127.0.0.1;
        deny all;

        auth_basic "restricted";
        auth_basic_user_file /etc/nginx/secrets;
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}
</code></pre>

<p>Reload the Changes:</p>

<pre><code>$ nginx -s reload
</code></pre>

<h2>Testing:</h2>

<p>Testing from our Whitelisted location (localhost):</p>

<pre><code>curl -i http://127.0.0.1 
HTTP/1.1 200 OK
</code></pre>

<p>Testing from remote location:</p>

<pre><code>$ curl -i http://localhost
HTTP/1.1 401 Unauthorized

$ curl -i http://admin:password@localhost
HTTP/1.1 200 OK
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Getpass in Python to Accept Passwords From Stdin Without Echoing It Back]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/01/22/using-getpass-in-python-to-accept-passwords-from-stdin-without-echoing-it-back/"/>
    <updated>2018-01-22T13:15:09-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/01/22/using-getpass-in-python-to-accept-passwords-from-stdin-without-echoing-it-back</id>
    <content type="html"><![CDATA[<p>Using <code>raw_input</code> in python expects standard input, which echo&rsquo;s it back after enter is executed, below is an example:</p>

<pre><code class="python">&gt;&gt;&gt; word = raw_input("What is the word? \n")
What is the word?
football
&gt;&gt;&gt; print(word)
football
</code></pre>

<p>Using getpass, the standard input gets masked, like you would expect when entering a password, like below:</p>

<pre><code class="python">&gt;&gt;&gt; from getpass import getpass
&gt;&gt;&gt; word = getpass()
Password:
&gt;&gt;&gt; print(word)
rugby
</code></pre>

<p>Changing the default prompt:</p>

<pre><code class="python">&gt;&gt;&gt; word = getpass(prompt='What is your name? ')
What is your name?
&gt;&gt;&gt; print(word)
Ruan
</code></pre>

<p>Creating a Simple Insecure Password Verification App:</p>

<pre><code class="python">from getpass import getpass

password = getpass()
if password.lower() == 'simplepass':
    print 'Password Correct'
else:
    print 'Password Failed'
</code></pre>

<p>Testing it, by first entering a incorrect string, then the correct one:</p>

<pre><code class="bash">$ python auth-check.py
Password:
Password Failed

$ python auth-check.py
Password:
Password Correct
</code></pre>

<p>You definitely don&rsquo;t want to hard code the credentials in your app, but you get the idea.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Kerberos Server and Client on Ubuntu]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/18/setup-kerberos-server-and-client-on-ubuntu/"/>
    <updated>2017-10-18T18:25:11-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/18/setup-kerberos-server-and-client-on-ubuntu</id>
    <content type="html"><![CDATA[<p>Kerberos is a authentication protocol that provides a centralized authentication server, that works with the concepts of tickets that are encrypted.</p>

<p>Today we will setup a Kerberos Server (KDC) and setup and Kerberos Enabled Client, and then testing our setup by obtaining a Kerberos Ticket from our server.</p>

<h2>Setup the Server:</h2>

<p>Install Kerberos KDC and Admin Server:</p>

<pre><code class="bash">$ apt update &amp;&amp; apt upgrade -y
$ apt install krb5-kdc krb5-admin-server krb5-config -y
$ krb5_newrealm
</code></pre>

<p>You will be prompted for realm, and hostnames, in my case I have setup the following:</p>

<ul>
<li>REALM: <code>LAN.RUANBEKER.COM</code></li>
<li>HOST: <code>localhost</code></li>
<li>ADMIN_SERVER: <code>localhost</code></li>
</ul>


<p>Then our master password:</p>

<pre><code class="bash">This script should be run on the master KDC/admin server to initialize
a Kerberos realm.  It will ask you to type in a master key password.
This password will be used to generate a key that is stored in
/etc/krb5kdc/stash.  You should try to remember this password, but it
is much more important that it be a strong password than that it be
remembered.  However, if you lose the password and /etc/krb5kdc/stash,
you cannot decrypt your Kerberos database.
Loading random data
Initializing database '/var/lib/krb5kdc/principal' for realm 'LAN.RUANBEKKER.COM',
master key name 'K/M@LAN.RUANBEKKER.COM'
You will be prompted for the database Master Password.
It is important that you NOT FORGET this password.
Enter KDC database master key: 
Re-enter KDC database master key to verify: 
</code></pre>

<p>The output:</p>

<pre><code class="bash">Now that your realm is set up you may wish to create an administrative
principal using the addprinc subcommand of the kadmin.local program.
Then, this principal can be added to /etc/krb5kdc/kadm5.acl so that
you can use the kadmin program on other computers.  Kerberos admin
principals usually belong to a single user and end in /admin.  For
example, if jruser is a Kerberos administrator, then in addition to
the normal jruser principal, a jruser/admin principal should be
created.

Don't forget to set up DNS information so your clients can find your
KDC and admin servers.  Doing so is documented in the administration
guide.
</code></pre>

<p>Uncomment the last line which contains <code>admin</code>:</p>

<pre><code class="bash">$ vi /etc/krb5kdc/kadm5.acl
</code></pre>

<p>a Kerberos principal is a unique identity to which Kerberos can assign tickets, lets add our first principal, <code>james</code>:</p>

<pre><code class="bash">$ kadmin.local 
Authenticating as principal root/admin@LAN.RUANBEKKER.COM with password.
kadmin.local:  addprinc james

WARNING: no policy specified for james@LAN.RUANBEKKER.COM; defaulting to no policy
Enter password for principal "james@LAN.RUANBEKKER.COM": 
Re-enter password for principal "james@LAN.RUANBEKKER.COM": 
Principal "james@LAN.RUANBEKKER.COM" created.
kadmin.local:  exit
</code></pre>

<h2>Setup the Client:</h2>

<p>Setup a Host Entry:</p>

<pre><code class="bash">$ echo '10.1.1.1 kdc.lan.ruanbekker.com kdc' &gt;&gt; /etc/hosts
</code></pre>

<p>Setup Kerberos Client:</p>

<pre><code class="bash">$ apt install krb5-user -y
- realm
- hostname
- hostname
</code></pre>

<p>Obtain a Ticket from the Server:</p>

<pre><code class="bash">$ kinit -p james
Password for james@LAN.RUANBEKKER.COM: 

$ klist
Ticket cache: FILE:/tmp/krb5cc_0
Default principal: james@LAN.RUANBEKKER.COM

Valid starting     Expires            Service principal
10/18/17 22:13:34  10/19/17 08:13:34  krbtgt/LAN.RUANBEKKER.COM@LAN.RUANBEKKER.COM
    renew until 10/19/17 22:13:30
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="http://csetutorials.com/setup-kerberos-ubuntu.html">http://csetutorials.com/setup-kerberos-ubuntu.html</a></li>
<li><a href="https://www.rootusers.com/how-to-configure-linux-to-authenticate-using-kerberos/">https://www.rootusers.com/how-to-configure-linux-to-authenticate-using-kerberos/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
