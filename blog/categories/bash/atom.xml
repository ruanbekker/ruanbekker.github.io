<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bash | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/bash/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2021-08-14T15:42:07-04:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using if Statements in Bash to Check if Environment Variables Exist]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/08/14/using-if-statements-in-bash-to-check-if-environment-variables-exist/"/>
    <updated>2020-08-14T11:00:25+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/08/14/using-if-statements-in-bash-to-check-if-environment-variables-exist</id>
    <content type="html"><![CDATA[<p>This is a quick post to demonstrate how to use <strong>if statements</strong> in bash to check if we have the required environment variables in our environment before we continue a script.</p>

<p>Let&rsquo;s say we require <code>FOO</code> and <code>BAR</code> in our environment before we can continue, we can do this:</p>

<pre><code class="bash">#!/usr/bin/env bash

if [ -z ${FOO} ] || [ -z ${BAR} ] ;
  then 
    echo "required environment variables does not exist"
    exit 1
  else 
    echo "required environment variables are set"
    # do things
    exit 0
fi
</code></pre>

<p>So now if <code>FOO</code> or <code>BAR</code> is not set in our environment, the script will exit with return code 1.</p>

<p>To test it, when we pass no environment variables:</p>

<pre><code>$ chmod +x ./update.sh
$ ./update.sh
required environment variables does not exist
</code></pre>

<p>If we only pass one environment variable:</p>

<pre><code>$ FOO=1 ./update.sh
required environment variables does not exist
</code></pre>

<p>And as the result we want, when we pass both required environment variables, we have success:</p>

<pre><code>$ FOO=1 BAR=2 ./update.sh
required environment variables are set
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using MongoDB Inside Drone CI Services for Unit Testing]]></title>
    <link href="https://blog.ruanbekker.com/blog/2019/05/04/using-mongodb-inside-drone-ci-services-for-unit-testing/"/>
    <updated>2019-05-04T14:52:37-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2019/05/04/using-mongodb-inside-drone-ci-services-for-unit-testing</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57184017-4b1f7700-6eb5-11e9-886d-4b811687221a.png" alt="" /></p>

<p>Another nice thing about Drone CI is the &ldquo;Services&rdquo; configuration within your pipeline. At times your unit or integration testing steps might be dependent of a database such as MongoDB, MySQL etc.</p>

<p>Drone allows you to spin up a ephemeral database service such as MongoDB using a Docker container as the fist step within your pipeline, defined in the services section. This step will always run first.</p>

<p>The service container will be reachable via the configured container name as its hostname. Keep note that if you run multiple paralel jobs that the service container will only be reachable from the container where the mongodb container is running.</p>

<h2>What are we doing today</h2>

<p>We will setup a really basic (and a bit useless) pipeline that will spin up a mongodb service container, use a step to write random data to mongodb and a step that reads data from mongodb.</p>

<p>For demonstration purposes, the data is really random but more focused on the service section.</p>

<p>All the source code for this demonstration is available on my <strong><a href="https://github.com/ruanbekker/demo-drone-mongodb-tests">github repository</a></strong></p>

<h2>Our Drone Pipeline</h2>

<p>First we define our service, mongodb. Once the mongodb service is running, we will have our build step, our step that runs the mongodb version against our database, write data into our mongodb database, then read the data from mongodb, then the last step running a shell command with the date.</p>

<p>Our <code>.drone.yml</code> pipeline definition:</p>

<pre><code class="yaml">---
kind: pipeline
name: mongotests

services:
- name: mongo
  image: mongo:4
  command: [ --smallfiles ]
  ports:
  - 27017

steps:
- name: build-step
  image: alpine
  commands:
  - echo "this should be a step that does something"

- name: mongodb-return-version
  image: mongo:4
  commands:
  - date
  - mongo --host mongo --eval "db.version()"

- name: mongodb-test-writes
  image: mongo:4
  commands:
  - date
  - sh scripts/write_mongo.sh

- name: mongodb-test-reads
  image: mongo:4
  commands:
  - date
  - sh scripts/read_mongo.sh

- name: last-step
  image: alpine
  commands:
  - echo "completed at $(date)"
</code></pre>

<p>Our scripts referenced in our steps:</p>

<p>The first will be our script that write random data into mongodb, <code>scripts/write_mongo.sh</code>:</p>

<pre><code class="bash">#!/bin/sh
set -ex
echo "start writing"
mongo mongo:27017/mydb scripts/write.js
echo "done writing"
</code></pre>

<p>We are referencing a <code>scripts/write.js</code> file which is a function that randomizes data and generates a 1000 documents to write to mongodb:</p>

<pre><code class="javascript">var txs = []
for (var x = 0; x &lt; 1000 ; x++) {
 var transaction_types = ["credit card", "cash", "account"];
 var store_names = ["edgards", "cna", "makro", "picknpay", "checkers"];
 var random_transaction_type = Math.floor(Math.random() * (2 - 0 + 1)) + 0;
 var random_store_name = Math.floor(Math.random() * (4 - 0 + 1)) + 0;
 txs.push({
   transaction: 'tx_' + x,
   transaction_price: Math.round(Math.random()*1000),
   transaction_type: transaction_types[random_transaction_type],
   store_name: store_names[random_store_name]
   });
}
db.mycollection.insert(txs)
</code></pre>

<p>Our script that will read data from mongodb, <code>scripts/read_mongo.sh</code>:</p>

<pre><code>#!/bin/sh
set -ex
echo "start reading"
mongo mongo:27017/mydb &lt;&lt;EOF
db.mycollection.find().count();
db.mycollection.find({transaction_price: { \$gt: 990}}).forEach( printjson );
EOF
echo "done reading"
</code></pre>

<p>The <code>README.md</code> to include the build status:</p>

<pre><code>## project-name ![](https://cloud.drone.io/api/badges/&lt;user-name&gt;/&lt;project-name&gt;/status.svg?branch=master)
</code></pre>

<p>Once your source code is set in github, enable the repository on drone and push to github to trigger the build.</p>

<h2>Demo and Screenshots</h2>

<p>After pushing to github to trigger the build, heading over to drone, I can see that mongodb is running and our step has completed that executes the <code>db.version()</code> against mongodb:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57183883-317d3000-6eb3-11e9-9aa0-7dd729514033.png" alt="" /></p>

<p>Next our step executes to write the random data into mongodb:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57183911-989ae480-6eb3-11e9-942a-a9c1af191b7f.png" alt="" /></p>

<p>After the data has been written to mongodb, our next step will read the number of documents from mongodb, and also run a query for transaction prices more than 990:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57183917-bc5e2a80-6eb3-11e9-802d-87e268b2fc43.png" alt="" /></p>

<p>Once that has completed, we will have a shell command returning the time when the last step completed:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57183934-fa5b4e80-6eb3-11e9-9eb3-e58248e2286c.png" alt="" /></p>

<h2>Resources</h2>

<ul>
<li><a href="https://cloud.drone.io">Drone Hosted Service</a></li>
<li><a href="https://docs.drone.io/user-guide/pipeline/services/">Drone Services Documentation</a></li>
<li><a href="https://github.com/ruanbekker/demo-drone-mongodb-tests">Github Repository</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The AWS CLI Cheatsheet for Bash]]></title>
    <link href="https://blog.ruanbekker.com/blog/2019/02/07/the-aws-cli-cheatsheet-for-bash/"/>
    <updated>2019-02-07T03:24:12-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2019/02/07/the-aws-cli-cheatsheet-for-bash</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/30043398/52399083-cdb9b580-2ac3-11e9-8c8a-79fcb811de18.png" alt="" /></p>

<p>This is a post for all the AWS CLI oneliners that I stumble upon. Note that they will be updated over time.</p>

<h2>RDS</h2>

<p>Describe All RDS DB Instances:</p>

<pre><code class="bash">$ aws --profile prod rds describe-db-instances --query 'DBInstances[*].[DBInstanceArn,DBInstanceIdentifier,DBInstanceClass,Endpoint]'
</code></pre>

<p>Describe a RDS DB Instance with a dbname:</p>

<pre><code class="bash">$ aws --profile prod rds describe-db-instances --query 'DBInstances[?DBInstanceIdentifier==`db-staging`].[DBInstanceArn,DBInstanceIdentifier,DBInstanceClass,Endpoint]'
[
    [
        "arn:aws:rds:eu-west-1:&lt;customer_id&gt;:db:db-staging",
        "db-staging",
        "db.t2.micro",
        {
            "HostedZoneId": "ASKDJSAKDJBA",
            "Port": 5432,
            "Address": "db-staging.asdkjahsd.eu-west-1.rds.amazonaws.com"
        }
    ]
]
</code></pre>

<p>List all RDS DB Instances and limit output:</p>

<pre><code class="bash">$ aws --profile prod rds describe-db-instances --query 'DBInstances[*].[DBInstanceArn,DBInstanceIdentifier,DBInstanceClass,Endpoint]'
[
    [
        "arn:aws:rds:eu-west-1:&lt;customer_id&gt;:db:db-name",
        "db-name",
        "db.t2.micro",
        {
            "HostedZoneId": "ABCDEFGHILKL",
            "Port": 5432,
            "Address": "db-name.abcdefg.eu-west-1.rds.amazonaws.com"
        }
    ],
</code></pre>

<p>List all RDS DB Instances that has backups enabled, and limit output:</p>

<pre><code class="bash">$ aws --profile prod rds describe-db-instances --query 'DBInstances[?BackupRetentionPeriod&gt;`0`].[DBInstanceArn,DBInstanceIdentifier,DBInstanceClass,Endpoint]'
[
    [
        "arn:aws:rds:eu-west-1:&lt;customer_id&gt;:db:db-name",
        "db-name",
        "db.t2.micro",
        {
            "HostedZoneId": "ABCDEFGHILKL",
            "Port": 5432,
            "Address": "db-name.abcdefg.eu-west-1.rds.amazonaws.com"
        }
    ],
</code></pre>

<p>Describe DB Snapshots for DB Instance Name:</p>

<pre><code class="bash">$ aws --profile prod rds describe-db-snapshots --db-instance-identifier db --query 'DBSnapshots[?DBInstanceIdentifier==`db`].[DBInstanceIdentifier,DBSnapshotIdentifier,SnapshotCreateTime,Status]'
[
    [
        "db",
        "rds:db-2018-05-16-04-08",
        "2018-05-16T04:08:53.696Z",
        "available"
    ],
</code></pre>

<p>Events for the last 24 Hours:</p>

<pre><code class="bash">$ aws --profile prod rds describe-events --source-identifier "rds:db-2018-05-16-04-08" --source-type db-snapshot --duration 1440 --query 'Events[*]'
[
    {
        "EventCategories": [
            "creation"
        ],
        "SourceType": "db-snapshot",
        "SourceArn": "arn:aws:rds:eu-west-1:&lt;customer_id&gt;:snapshot:rds:db-2018-05-16-04-08",
        "Date": "2018-05-16T04:08:40.264Z",
        "Message": "Creating automated snapshot",
        "SourceIdentifier": "rds:db-2018-05-16-04-08"
    },
    {
        "EventCategories": [
            "creation"
        ],
        "SourceType": "db-snapshot",
        "SourceArn": "arn:aws:rds:eu-west-1:&lt;customer_id&gt;:snapshot:rds:db-2018-05-16-04-08",
        "Date": "2018-05-16T04:32:04.047Z",
        "Message": "Automated snapshot created",
        "SourceIdentifier": "rds:db-2018-05-16-04-08"
    }
]
</code></pre>

<p>List Public RDS Instances:</p>

<pre><code class="bash">$ aws --profile prod rds describe-db-instances --query 'DBInstances[?PubliclyAccessible==`true`].[DBInstanceIdentifier,Endpoint.Address]'

[
  [
    "name",
    "name.abcdef.eu-west-1.rds.amazonaws.com"
  ]
]
</code></pre>

<h2>SSM Parameter Store:</h2>

<p>List all parameters by path:</p>

<pre><code class="bash">$ aws --profile prod ssm get-parameters-by-path --path '/service-a/team-a/my-app-name/' | jq '.Parameters[]' | jq -r '.Name'
/service-a/team-a/my-app-name/db_hostname
/service-a/team-a/my-app-name/db_username
/service-a/team-a/my-app-name/db_password
</code></pre>

<p>Get a value from a parameter:</p>

<pre><code class="bash">$ aws --profile prod ssm get-parameters --names '/service-a/team-a/my-app-name/db_username' --with-decryption | jq '.Parameters[]' | jq -r '.Value'
my_db_user
</code></pre>

<h2>Thank You</h2>

<p>Please feel free to show support by, <strong>sharing</strong> this post, making a <strong>donation</strong>, <strong>subscribing</strong> or <strong>reach out to me</strong> if you want me to demo and write up on any specific tech topic.</p>

<center>
<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
<input type="hidden" name="cmd" value="_s-xclick" />
<input type="hidden" name="hosted_button_id" value="W7CBGYTCWGANQ" />
<input type="image" src="https://user-images.githubusercontent.com/567298/49853901-461c3700-fdf1-11e8-9d80-8a424a3173af.png" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
<img alt="" border="0" src="https://www.paypal.com/en_ZA/i/scr/pixel.gif" width="1" height="1" />
</form>
</center>


<p><br></p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial on DynamoDB Using Bash and the AWS CLI Tools to Interact With a Music Dataset]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/08/14/tutorial-on-dynamodb-using-bash-and-the-aws-cli-tools-to-interact-with-a-music-dataset/"/>
    <updated>2018-08-14T16:33:22-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/08/14/tutorial-on-dynamodb-using-bash-and-the-aws-cli-tools-to-interact-with-a-music-dataset</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/aws-logo.png" alt="" /></p>

<p>In this tutorial we will be using Amazons DynamoDB (DynamoDB Local) to host a sample dataset consisting of music data that I retrieved from the iTunes API, which we will be using the aws cli tools to interact with the data.</p>

<p>We will be doing the following:</p>

<ul>
<li>Use Docker to provision a Local DynamoDB Server</li>
<li>Create a DynamoDB Table with a Hash and Range Key</li>
<li>List the Table</li>
<li>Create a Item in DynamoDB</li>
<li>Read a Item from DynamoDB</li>
<li>Read a Item from DynamoDB by specifying the details you would like to read</li>
<li>Batch Write multiple items to DynamoDB</li>
<li>Scan all your Items from DynamoDB</li>
<li>Query by Artist</li>
<li>Query by Artist and Song</li>
<li>Query all the Songs from an Artist starting with a specific letter</li>
<li>Indexes</li>
<li>Delete the Table</li>
</ul>


<p>If you are just getting started with DynamoDB, I recommend having a look at <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html">Amazons DynamoDB Documentation</a> Page first.</p>

<script id="mNCC" language="javascript">
    medianet_width = "728";
    medianet_height = "90";
    medianet_crid = "218284798";
    medianet_versionId = "3111299"; 
  </script>


<script src="//contextual.media.net/nmedianet.js?cid=8CUD78FSV"></script>


<h2>The Music Dataset:</h2>

<p>I used the <a href="https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/">iTunes API</a> to get the music metadata, but I also have a post on <a href="http://blog.ruanbekker.com/blog/2018/05/08/use-python-requests-to-interact-with-the-itunes-api-to-search-for-music-info/">how to query the iTunes API</a> to get data from them to use.</p>

<p>a Quick way in Python to get the top 10 songs from Guns and Roses, will look like this:</p>

<pre><code class="python">&gt;&gt;&gt; a = 'https://itunes.apple.com/search?term=guns+and+roses&amp;limit=10'
&gt;&gt;&gt; b = requests.get(a).json()
&gt;&gt;&gt; print(json.dumps(b, indent=2))
</code></pre>

<h2>Create the DynamoDB Local Server on Docker:</h2>

<p>If you have a AWS Account you can provision your table from there, but if you want to test it locally, you can provision a local DynamoDB Server using Docker:</p>

<pre><code>$ docker run -it -p 8000:8000 --name dynamodb-local rbekker87/dynamodb-local
</code></pre>

<h2>Install the AWS CLI Tools:</h2>

<pre><code class="bash">$ pip install awscli
$ aws configure
# you can enter random data if you are using dynamodb-local
</code></pre>

<h2>Create the DynamoDB Table:</h2>

<p>Create a DynamoDB Table named <code>MusicCollection</code> with a <code>Artist (HASH)</code> and <code>SongTitle (RANGE)</code> key attributes:</p>

<pre><code class="bash">$ aws dynamodb create-table --table-name MusicCollection \
  --attribute-definitions AttributeName=Artist,AttributeType=S AttributeName=SongTitle,AttributeType=S \
  --key-schema AttributeName=Artist,KeyType=HASH AttributeName=SongTitle,KeyType=RANGE \
  --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
  --endpoint-url http://localhost:8000

Response:
{
    "TableDescription": {
        "TableArn": "arn:aws:dynamodb:ddblocal:000000000000:table/MusicCollection",
        "AttributeDefinitions": [
            {
                "AttributeName": "Artist",
                "AttributeType": "S"
            },
            {
                "AttributeName": "SongTitle",
                "AttributeType": "S"
            }
        ],
        "ProvisionedThroughput": {
            "NumberOfDecreasesToday": 0,
            "WriteCapacityUnits": 5,
            "LastIncreaseDateTime": 0.0,
            "ReadCapacityUnits": 5,
            "LastDecreaseDateTime": 0.0
        },
        "TableSizeBytes": 0,
        "TableName": "MusicCollection",
        "TableStatus": "ACTIVE",
        "KeySchema": [
            {
                "KeyType": "HASH",
                "AttributeName": "Artist"
            },
            {
                "KeyType": "RANGE",
                "AttributeName": "SongTitle"
            }
        ],
        "ItemCount": 0,
        "CreationDateTime": 1525339294.186
    }
}
</code></pre>

<h2>Listing the Tables:</h2>

<p>List the DynamoDB Table that you created:</p>

<pre><code class="bash">$ aws dynamodb list-tables --endpoint-url http://localhost:8000

{
    "TableNames": [
        "MusicCollection"
    ]
}
</code></pre>

<h2>Create a Item in DynamoDB:</h2>

<p>Add a song from the band <code>Bring me the Horizon</code> called <code>Sleepwalking</code> from the album <code>Sempiternal</code> to the table by using the <code>PutItem</code> call:</p>

<pre><code class="bash">$ aws dynamodb --endpoint-url http://localhost:8000 put-item --table-name MusicCollection \
  --item '{"Artist": {"S": "Bring me the Horizon"}, "SongTitle": {"S": "Sleepwalking"}, "AlbumTitle": {"S": "Sempiternal"}}'
</code></pre>

<h2>Read a Item from DynamoDB</h2>

<p>Get the Song Details from the Table by using the <code>GetItem</code> call:</p>

<pre><code class="bash">$ aws dynamodb --endpoint-url http://localhost:8000 get-item --table-name MusicCollection \
  --key  '{"Artist": {"S": "Bring me the Horizon"}, "SongTitle": {"S": "Sleepwalking"}}'

{
    "Item": {
        "Artist": {
            "S": "Bring me the Horizon"
        },
        "SongTitle": {
            "S": "Sleepwalking"
        },
        "AlbumTitle": {
            "S": "Sempiternal"
        }
    }
}
</code></pre>

<p>To only get specific attributes we can use <code>--aatributes-to-get</code>:</p>

<pre><code class="bash">$ aws dynamodb --endpoint-url http://localhost:8000 get-item --table-name MusicCollection \
  --attributes-to-get '["AlbumTitle", "SongTitle"]' \
  --key  '{"Artist": {"S": "Bring me the Horizon"}, "SongTitle": {"S": "Sleepwalking"}}'

{
    "Item": {
        "SongTitle": {
            "S": "Sleepwalking"
        },
        "AlbumTitle": {
            "S": "Sempiternal"
        }
    }
}
</code></pre>

<p>However, AWS Recommends to use the <code>--projection-expression</code> parameter:</p>

<pre><code class="bash">$ aws dynamodb --endpoint-url http://localhost:8000 get-item --table-name MusicCollection \
  --projection-expression "AlbumTitle, SongTitle" \
  --key  '{"Artist": {"S": "Bring me the Horizon"}, "SongTitle": {"S": "Sleepwalking"}}'

{
    "Item": {
        "SongTitle": {
            "S": "Sleepwalking"
        },
        "AlbumTitle": {
            "S": "Sempiternal"
        }
    }
}
</code></pre>

<ul>
<li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html</a></li>
</ul>


<h2>Batch Write</h2>

<p>Now lets use the <a href="https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/">iTunes API</a> to get a collection of some songs, which I will dump into a <a href="https://github.com/ruanbekker/dynamodb-local-docker/blob/master/demo/batch-write-songs.json">json file on github</a>. So now that we have a json file with a collection of songs from multiple artists, we can go ahead and write it into our table using the <code>BatchWriteItem</code> call:</p>

<pre><code class="bash">$ wget https://raw.githubusercontent.com/ruanbekker/dynamodb-local-docker/master/demo/batch-write-songs.json
$ aws dynamodb batch-write-item --request-items file://music-table/batch-write-songs.json --endpoint-url http://localhost:8000
</code></pre>

<h2>Scan the Table:</h2>

<p>This can be a very expensive call, as a <code>Scan</code> will return all the items from your table, and depending on the size of your table, you could be throttled, but since we are using dynamodb local and only having 16 items in our table, we can do a scan to return all the items in our table:</p>

<pre><code class="bash">$ aws dynamodb --endpoint-url http://localhost:8000 scan --table-name MusicCollection
{
    "Count": 16,
</code></pre>

<h2>Query</h2>

<p>Let&rsquo;s start using the <code>Query</code> call to get all the songs from the Artist: AC/DC</p>

<ul>
<li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.QueryFilter.html">https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.QueryFilter.html</a></li>
</ul>


<pre><code class="bash">$ aws dynamodb --endpoint-url http://localhost:8000 query --select ALL_ATTRIBUTES \
  --table-name MusicCollection \
  --key-condition-expression "Artist = :a" \
  --expression-attribute-values  '{":a":{"S":"AC/DC"}}'

{
    "Count": 3,
    "Items": [
        {
            "Artist": {
                "S": "AC/DC"
            },
            "SongTitle": {
                "S": "Back In Black"
            },
            "AlbumTitle": {
                "S": "Back In Black"
            }
        },
        {
            "Artist": {
                "S": "AC/DC"
            },
            "SongTitle": {
                "S": "Thunderstruck"
            },
            "AlbumTitle": {
                "S": "The Razors Edge"
            }
        },
        {
            "Artist": {
                "S": "AC/DC"
            },
            "SongTitle": {
                "S": "You Shook Me All Night Long"
            },
            "AlbumTitle": {
                "S": "Back in Black"
            }
        }
    ],
    "ScannedCount": 3,
    "ConsumedCapacity": null
}
</code></pre>

<p>Query to get the details of a specific Song from a specific Artist:</p>

<pre><code class="bash">$ aws dynamodb --endpoint-url http://localhost:8000 query --select ALL_ATTRIBUTES \
  --table-name MusicCollection \
  --key-condition-expression "Artist = :a and SongTitle = :t" \
  --expression-attribute-values  '{ ":a": {"S": "AC/DC"}, ":t": {"S": "You Shook Me All Night Long"}}'

{
    "Count": 1,
    "Items": [
        {
            "Artist": {
                "S": "AC/DC"
            },
            "SongTitle": {
                "S": "You Shook Me All Night Long"
            },
            "AlbumTitle": {
                "S": "Back in Black"
            }
        }
    ],
    "ScannedCount": 1,
    "ConsumedCapacity": null
}
</code></pre>

<p>Query to get all the songs from the Beatles that starts with the letter &lsquo;H&rsquo;:</p>

<pre><code class="bash">$ aws dynamodb --endpoint-url http://localhost:8000 query --select ALL_ATTRIBUTES \
  --table-name MusicCollection \
  --key-condition-expression "Artist = :a and begins_with(SongTitle, :t)" \
  --expression-attribute-values  '{":a":{"S":"The Beatles"}, ":t": {"S": "h"}}'

{
    "Count": 2,
    "Items": [
        {
            "Artist": {
                "S": "The Beatles"
            },
            "SongTitle": {
                "S": "Happy Day"
            },
            "AlbumTitle": {
                "S": "The Beatles 1967-1970 (The Blue Album)"
            }
        },
        {
            "Artist": {
                "S": "The Beatles"
            },
            "SongTitle": {
                "S": "Help!"
            },
            "AlbumTitle": {
                "S": "The Beatles Box Set"
            }
        }
    ],
    "ScannedCount": 2,
    "ConsumedCapacity": null
}
</code></pre>

<p>So our table consists of Artist (HASH) and SongTitle (RANGE), so we can only query based on those attributes. You will find when you try to query on a attribute that is not part of the KeySchema, a exception will be received:</p>

<pre><code class="bash">$ aws dynamodb --endpoint-url http://localhost:8000 query --select ALL_ATTRIBUTES --table-name MusicCollection --key-condition-expression "Artist = :a and AlbumTitle = :t" --expression-attribute-values  '{":a":{"S":"AC/DC"}, ":t": {"S": "Back in Black"}}'

An error occurred (ValidationException) when calling the Query operation: Query condition missed key schema element
</code></pre>

<p>So how do we query on a attribute that is not part of the KeySchema? Let&rsquo;s say you want to query all the songs from a Artist and a specific Album.</p>

<h2>Global Secondary Indexes:</h2>

<p>Add Global Secondary Index, with the Attributes: Artist and AlbumTitle.</p>

<pre><code class="bash">$ aws dynamodb --endpoint-url http://localhost:8000 update-table --table-name MusicCollection \
  --attribute-definitions AttributeName=Artist,AttributeType=S AttributeName=SongTitle,AttributeType=S AttributeName=AlbumTitle,AttributeType=S \
  --global-secondary-index-updates "Create={"IndexName"="album-index", "KeySchema"=[ {"AttributeName"="Artist", "KeyType"="HASH"}, {"AttributeName"="AlbumTitle", "KeyType"="RANGE" }], "Projection"={"ProjectionType"="INCLUDE", "NonKeyAttributes"="AlbumTitle"}, "ProvisionedThroughput"= {"ReadCapacityUnits"=1, "WriteCapacityUnits"=1} }"

{
    "TableDescription": {
        "TableArn": "arn:aws:dynamodb:ddblocal:000000000000:table/MusicCollection",
        "AttributeDefinitions": [
            {
                "AttributeName": "Artist",
                "AttributeType": "S"
            },
            {
                "AttributeName": "SongTitle",
                "AttributeType": "S"
            },
            {
                "AttributeName": "AlbumTitle",
                "AttributeType": "S"
            }
        ],
        "GlobalSecondaryIndexes": [
            {
                "IndexName": "album-index",
                "Projection": {
                    "ProjectionType": "INCLUDE",
                    "NonKeyAttributes": [
                        "AlbumTitle"
                    ]
                },
                "ProvisionedThroughput": {
                    "WriteCapacityUnits": 1,
                    "ReadCapacityUnits": 1
                },
                "IndexStatus": "CREATING",
                "Backfilling": false,
                "KeySchema": [
                    {
                        "KeyType": "HASH",
                        "AttributeName": "Artist"
                    },
                    {
                        "KeyType": "RANGE",
                        "AttributeName": "AlbumTitle"
                    }
                ],
                "IndexArn": "arn:aws:dynamodb:ddblocal:000000000000:table/MusicCollection/index/album-index"
            }
        ],
        "ProvisionedThroughput": {
            "NumberOfDecreasesToday": 0,
            "WriteCapacityUnits": 5,
            "LastIncreaseDateTime": 0.0,
            "ReadCapacityUnits": 5,
            "LastDecreaseDateTime": 0.0
        },
        "TableSizeBytes": 984,
        "TableName": "MusicCollection",
        "TableStatus": "ACTIVE",
        "KeySchema": [
            {
                "KeyType": "HASH",
                "AttributeName": "Artist"
            },
            {
                "KeyType": "RANGE",
                "AttributeName": "SongTitle"
            }
        ],
        "ItemCount": 15,
        "CreationDateTime": 1525339294.186
    }
}
</code></pre>

<p>Now when we use the same query, but we specify our index, we will get the data:</p>

<pre><code class="bash">$ aws dynamodb --endpoint-url http://localhost:8000 query \
  --select ALL_ATTRIBUTES \
  --table-name MusicCollection \
  --index-name album-index \
  --key-condition-expression "Artist = :a and AlbumTitle = :t" \
  --expression-attribute-values  '{":a":{"S":"AC/DC"}, ":t": {"S": "Back in Black"}}'

{
    "Count": 1,
    "Items": [
        {
            "Artist": {
                "S": "AC/DC"
            },
            "SongTitle": {
                "S": "You Shook Me All Night Long"
            },
            "AlbumTitle": {
                "S": "Back in Black"
            }
        }
    ],
    "ScannedCount": 1,
    "ConsumedCapacity": null
}
</code></pre>

<h2>Delete the Table:</h2>

<p>Delete the Table that we created:</p>

<pre><code class="bash">$ aws dynamodb --endpoint-url http://localhost:8000 delete-table --table-name MusicCollection
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/SQLtoNoSQL.ReadData.Query.html">https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/SQLtoNoSQL.ReadData.Query.html</a></li>
<li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/SQLtoNoSQL.Indexes.html">https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/SQLtoNoSQL.Indexes.html</a></li>
<li><a href="https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/">https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authenticate to Your AWS MySQL RDS Instance via IAM]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/01/30/authenticate-to-your-aws-mysql-rds-instance-via-iam/"/>
    <updated>2018-01-30T10:02:05-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/01/30/authenticate-to-your-aws-mysql-rds-instance-via-iam</id>
    <content type="html"><![CDATA[<p>On Amazon Web Services with RDS for MySQL or Aurora with MySQL compatibility, you can authenticate to your Database instance or cluster using IAM for database authentication. The benefit of using this authentication method is that you don&rsquo;t need to use a password when you connect to your database, but you use your authentication token instead</p>

<p><em>Update:</em>
- <a href="https://aws.amazon.com/about-aws/whats-new/2018/09/amazon-rds-postgresql-now-supports-iam-authentication/">Amazon Supports IAM Authentication for PostgreSQL</a></p>

<ul>
<li>More info from their <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.Connecting.html">docs</a></li>
</ul>


<h2>What we will be doing today:</h2>

<p>We will do the following:</p>

<ul>
<li>Create RDS MySQL Database</li>
<li>Create IAM Policy that allows a user to connect via a MySQL User</li>
<li>Create IAM User and associate IAM Policy</li>
<li>Configure the new user credentials in the awscli credential provider</li>
<li>Bash script to generate the auth token and authenticate to RDS via Token instead of password</li>
</ul>


<h2>Create the RDS Database:</h2>

<p>In this tutorial I will spin up a <code>db.t2.micro</code> in <code>eu-west-1</code> with <code>IAMDatabaseAuthentication Enabled</code>:</p>

<pre><code class="bash">aws rds create-db-instance \
    --db-instance-identifier rbtest \
    --db-instance-class db.t2.micro \
    --engine MySQL \
    --allocated-storage 20 \
    --master-username dbadmin \
    --master-user-password mysuperpassword \
    --region eu-west-1 \
    --enable-iam-database-authentication 
</code></pre>

<p>Give it some time to spin up, then get your database endpoint:</p>

<pre><code class="bash">$ aws rds describe-db-instances --db-instance-identifier rbtest | jq -r ".DBInstances[].Endpoint.Address"
rbtest.abcdefgh.eu-west-1.rds.amazonaws.com
</code></pre>

<p>If you need to have SSL Enabled, get the bundled certificate as described in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using SSL with RDS</a> docs.</p>

<pre><code class="bash">wget -O /tmp/rds.pem https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem
</code></pre>

<h2>Create the Database Account:</h2>

<p>Create the database account on the MySQL RDS instance as described from their <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.DBAccounts.html">docs</a>. IAM handles the authentication via AWSAuthenticationPlugin, therefore we do not need to set passwords on the database.</p>

<p>Connect to the database:</p>

<pre><code class="bash">$ mysql -u dbadmin -h rbtest.abcdefgh.eu-west-1.rds.amazonaws.com -p
</code></pre>

<p>Create the database:</p>

<pre><code class="sql">mysql&gt; CREATE USER mydbaccount IDENTIFIED WITH AWSAuthenticationPlugin AS 'RDS';
mysql&gt; FLUSH PRIVILEGES;
</code></pre>

<h2>Creating the Databases and Granting Permissions</h2>

<p>While you are on the database, create 2 databases (<code>db1</code> and <code>db2</code>) with some tables, which we will use for our user to have read only access to, and create one database (<code>db3</code>) which the user will not have access to:</p>

<pre><code class="sql">mysql&gt; create database db1;
mysql&gt; create database db2;

mysql&gt; use db1;
mysql&gt; create table foo (name VARCHAR(20), age INT);
mysql&gt; insert into foo values('ruan', 31);
mysql&gt; insert into foo values('james', 32);

mysql&gt; use db2;
mysql&gt; create table foo (location VARCHAR(255));
mysql&gt; insert into foo values('south africa');
mysql&gt; insert into foo values('new zealand');
mysql&gt; insert into foo values('australia');

mysql&gt; grant select on db1.* to 'mydbuser';
mysql&gt; grant select on db2.* to 'mydbuser';

mysql&gt; create database db3;
mysql&gt; use db3;
mysql&gt; create table foo (passwords VARCHAR(255));
mysql&gt; insert into foo values('superpassword');
mysql&gt; insert into foo values('sekret');

mysql&gt; flush privileges;
</code></pre>

<h2>IAM Permissions to allow our user to authenticate to our RDS.</h2>

<p>First to create the user and configure awscli tools. My default profile has administrative access, so we will create our db user in its own profile and configure our awscli tools with its new access key and secret key:</p>

<pre><code class="bash">$ aws configure --profile dbuser
AWS Access Key ID [None]: xxxxxxxxxxxxx
AWS Secret Access Key [None]: xxxxxxxxxxxxxxxxxx
Default region name [None]: eu-west-1
Default output format [None]: json
</code></pre>

<p>Now we need to create a IAM policy to allow our user to authenticate to our RDS Instance via IAM, which we will associate with our Users account.</p>

<p>We need the AWS Account ID, the Database Identifier Resource ID, and the User Account that we created on MySQL.</p>

<p>To get the DB ResourceId:</p>

<pre><code class="bash">$ aws rds describe-db-instances --db-instance-identifier rbtest | jq -r ".DBInstances[].DbiResourceId
db-123456789ABCDEFGH
</code></pre>

<p>Create the IAM Policy and associate it with the new user account:</p>

<ul>
<li><a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.IAMPolicy.html">More info from the Docs</a>:</li>
</ul>


<pre><code class="json">{
   "Version": "2012-10-17",
   "Statement": [
      {
         "Sid": "RDSIAMAUTH",
         "Effect": "Allow",
         "Action": [
             "rds-db:connect"
         ],
         "Resource": [
             "arn:aws:rds-db:eu-west-1:123456789012:dbuser:db-123456789ABCDEFGH/mydbaccount"
         ]
      }
   ]
}
</code></pre>

<p>The bash script will get the authentication token which will be used as the password. Note that the authentication token will expire after 15 minutes after creation. The <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.Connecting.html">docs</a></p>

<pre><code class="bash">#!/bin/bash
db_endpoint="rbtest.abcdefgh.eu-west-1.rds.amazonaws.com"
local_mysql_user="mydbaccount"
auth_token="$(aws --profile dbuser rds generate-db-auth-token --hostname ${RDSHOST} --port 3306 --username ${local_mysql_user} )"
mysql --host=${db_endpoint} --port=3306 --enable-cleartext-plugin --user=${local_mysql_user} --password=${auth_token}
</code></pre>

<h2>Testing it out:</h2>

<p>Now that our policies are in place, credentials from the credential provider has been set and our bash script is setup, lets connect to our database:</p>

<pre><code class="bash">./conn-mysql.sh

mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| db1                |
| db2                |
+--------------------+
3 rows in set (0.16 sec)

mysql&gt; select * from db2.foo;
+--------------+
| location     |
+--------------+
| south africa |
| new zealand  |
| australia    |
+--------------+

mysql&gt; select * from db3.foo;
ERROR 1044 (42000): Access denied for user 'mydbaccount'@'*' to database 'db3'

mysql&gt; create database test123;
ERROR 1044 (42000): Access denied for user 'mydbaccount'@'%' to database 'test123'
</code></pre>

<p>Changing the IAM Policy to revoke access:</p>

<pre><code class="bash">./conn-mysql.sh
mysql: [Warning] Using a password on the command line interface can be insecure.
ERROR 1045 (28000): Access denied for user 'mydbaccount'@'10.0.0.10' (using password: YES)
</code></pre>

<h2>Creating a MySQL Client Wrapper Script:</h2>

<p>Using bash we can create a wrapper script so we can connect to our database like the following:</p>

<pre><code class="bash">$ mysql-iam prod rbtest.eu-west-1.amazonaws.com mydbaccount
mysql&gt;
</code></pre>

<p>Here is the script:</p>

<pre><code class="bash">#!/usr/bin/env bash

# Wrapper MySQL Client for IAM Based Authentication for MySQL and Amazon Aurora on RDS
# Read: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html
# Usage: [app] [aws_profile] [rds_endpoint] [rds_mysql_username]

command_exists() {
  type "$1" &amp;&gt; /dev/null ;
}

check_required_parameters() {
  aws_profile="$1"
  rds_hostname="$2"
  rds_username="$3"
  if ! [[ -n "$aws_profile" &amp;&amp; -n "$rds_username" &amp;&amp; -n "$rds_username" ]]
    then
      echo "Error: Missing Parameters"
      echo "Expected: $0 aws_profile_name rds_endpoint_name rds_db_username"
      echo "Usage: $0 prod dbname.eu-west-1.amazonaws.com dba"
      exit 1
  fi
}

get_auth_token() {
  aws_bin=$(which aws | head -1)
  auth_token="$($aws_bin --profile $aws_profile rds generate-db-auth-token --hostname $rds_hostname --port 3306 --username $rds_username )"
}

connect_to_rds() {
  mysql_bin=$(which mysql | head -1)
  ${mysql_bin} --host=${rds_hostname} --port=3306 --enable-cleartext-plugin --user=${rds_username} --password=${auth_token}
}

if [ "$1" == "help" ] 
  then
    echo "Help"
    echo "Expected: $0 aws_profile_name rds_endpoint_name rds_db_username"
    echo "Usage: $0 prod dbname.eu-west-1.amazonaws.com dba_user"
    exit 0
fi

if command_exists aws &amp;&amp; command_exists mysql 
then
  check_required_parameters $1 $2 $3
  get_auth_token
  connect_to_rds
else
  echo "Error: Make sure aws-cli and mysql client is installed"
fi
</code></pre>

<p>For more information on this, have a look at the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">docs</a></p>
]]></content>
  </entry>
  
</feed>
