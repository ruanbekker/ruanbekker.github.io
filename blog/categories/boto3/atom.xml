<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Boto3 | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/boto3/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2019-02-12T15:56:19-05:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Convert Float to Decimal Data Types for Boto3 DynamoDB Using Python]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/02/05/convert-float-to-decimal-data-types-for-boto3-dynamodb-using-python/"/>
    <updated>2019-02-05T09:45:40-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/02/05/convert-float-to-decimal-data-types-for-boto3-dynamodb-using-python</id>
    <content type="html"><![CDATA[<p>A quick post on a workaround when you need to convert float to decimal types.</p>

<p>One thing I really don&rsquo;t like about the AWS SDK for Python, specifically aimed towards DynamoDB is that Float types are not supported and that you should use Decimal types instead.</p>

<p>For example, my payload below:</p>

<pre><code class="python">&gt;&gt;&gt; data
{'attempts': 5, 'min': 180.87, 'timestamp': '2019-02-05T15:48:27', 'address': 'dynamodb.us-east-1.amazonaws.com', 'max': 747.17, 'region': 'eu-west-1_dynamodb', 'avg': 311.32599999999996, 'port': 443, 'regionTo': 'us-east-1', 'results': [{'seq': 1, 'time': '747.17'}, {'seq': 2, 'time': '215.60'}, {'seq': 3, 'time': '230.67'}, {'seq': 4, 'time': '180.87'}, {'seq': 5, 'time': '182.32'}]}
</code></pre>

<p>Trying to write that as an Item to my DynamoDB table and you will be faced with the exception below:</p>

<pre><code class="python">&gt;&gt;&gt; ddb.put_item(Item=data)
TypeError: Float types are not supported. Use Decimal types instead.
</code></pre>

<p>One way around this is to use <code>parse_float</code> in <code>json.loads()</code>:</p>

<pre><code>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; import json
&gt;&gt;&gt; ddb_data = json.loads(json.dumps(data), parse_float=Decimal)
&gt;&gt;&gt; ddb_data
{u'max': Decimal('747.17'), u'min': Decimal('180.87'), u'timestamp': u'2019-02-05T15:48:27', u'region': u'eu-west-1_dynamodb', u'regionTo': u'us-east-1', u'results': [{u'seq': 1, u'time': u'747.17'}, {u'seq': 2, u'time': u'215.60'}, {u'seq': 3, u'time': u'230.67'}, {u'seq': 4, u'time': u'180.87'}, {u'seq': 5, u'time': u'182.32'}], u'attempts': 5, u'address': u'dynamodb.us-east-1.amazonaws.com', u'avg': Decimal('311.32599999999996'), u'port': 443}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paginate Through IAM Users on AWS Using Python and Boto3]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/01/29/paginate-through-iam-users-on-aws-using-python-and-boto3/"/>
    <updated>2019-01-29T10:03:24-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/01/29/paginate-through-iam-users-on-aws-using-python-and-boto3</id>
    <content type="html"><![CDATA[<p>When listing AWS IAM Users in Boto3, you will find that not all the users are retrieved. This is because they are paginated.</p>

<p>To do a normal list_users api call:</p>

<pre><code class="python">&gt;&gt;&gt; import boto3
&gt;&gt;&gt; iam = boto3.Session(region_name='eu-west-1', profile_name='default').client('iam')
&gt;&gt;&gt; len(iam.list_users()['Users'])
100
</code></pre>

<p>Although I know there&rsquo;s more than 200 users. Therefore we need to paginate through our users:</p>

<pre><code class="python">&gt;&gt;&gt; import boto3
&gt;&gt;&gt; iam = boto3.Session(region_name='eu-west-1', profile_name='default').client('iam')
&gt;&gt;&gt; paginator = iam.get_paginator('list_users')
&gt;&gt;&gt; users = []
&gt;&gt;&gt; all_users = []
&gt;&gt;&gt; for response in paginator.paginate():
...     users.append(response['Users'])
...
&gt;&gt;&gt; len(users)
3

&gt;&gt;&gt; for iteration in xrange(len(users)):
...     for userobj in xrange(len(users[iteration])):
...         all_users.append((users[iteration][userobj]['UserName']))
...
&gt;&gt;&gt; len(all_users)
210
</code></pre>

<p>For more information on this, have a look at AWS Documentation about <a href="https://boto3.amazonaws.com/v1/documentation/api/latest/guide/paginators.html">Pagination</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IAM Policy to Allow Team Wide and User Level Permissions on AWS Secrets Manager]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/11/12/iam-policy-to-allow-team-wide-and-user-level-permissions-on-aws-secrets-manager/"/>
    <updated>2018-11-12T16:32:24-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/11/12/iam-policy-to-allow-team-wide-and-user-level-permissions-on-aws-secrets-manager</id>
    <content type="html"><![CDATA[<p>In this post we will simulate a scenario where a team would like to have access to create secrets under a team path name like <code>/security-team/prod/*</code> and <code>/security-team/dev/*</code> and allow all the users from that team to be able to write and read secrets from that path. Then have individual users create and read secrets from their own isolated path: <code>/security-team/personal/aws-username/*</code> so they can create their personal secrets.</p>

<script id="mNCC" language="javascript">
    medianet_width = "728";
    medianet_height = "90";
    medianet_crid = "218284798";
    medianet_versionId = "3111299";
  </script>


<script src="//contextual.media.net/nmedianet.js?cid=8CUD78FSV"></script>


<h2>Our Scenario:</h2>

<ul>
<li>Create IAM Policy</li>
<li>Create 2 IAM Users: <code>jack.smith</code> and <code>steve.adams</code></li>
<li>Create IAM Group, Associate IAM Policy to the Group</li>
<li>Attach 2 Users to the Group</li>
</ul>


<p>The IAM Policy:</p>

<pre><code>{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "Stmt1541597166491",
            "Action": [
                "secretsmanager:CreateSecret",
                "secretsmanager:DeleteSecret",
                "secretsmanager:DescribeSecret",
                "secretsmanager:GetRandomPassword",
                "secretsmanager:GetSecretValue",
                "secretsmanager:ListSecretVersionIds",
                "secretsmanager:ListSecrets",
                "secretsmanager:PutSecretValue",
                "secretsmanager:TagResource",
                "secretsmanager:UpdateSecret"
            ],
            "Effect": "Allow",
            "Resource": [
                "arn:aws:secretsmanager:eu-west-1:123456789012:secret:/security-team/prod/*",
                "arn:aws:secretsmanager:eu-west-1:123456789012:secret:/security-team/dev/*",
                "arn:aws:secretsmanager:eu-west-1:123456789012:secret:/security-team/personal/${aws:username}/*"
            ]
        }
    ]
}
</code></pre>

<p>Either configure the access keys and secret keys into the credential provider using aws cli, or for this demonstration I will use them inside the code. But never hardcode your credentials.</p>

<h2>Create Secrets with Secrets Manager in AWS using Python Boto3</h2>

<p>Instantiate user1 and user2:</p>

<pre><code class="python">&gt;&gt;&gt; import boto3
&gt;&gt;&gt; jack = boto3.Session(aws_access_key_id='ya', aws_secret_access_key='xx', region_name='eu-west-1').client('secretsmanager')
&gt;&gt;&gt; steve = boto3.Session(aws_access_key_id='yb', aws_secret_access_key='xx', region_name='eu-west-1').client('secretsmanager')
</code></pre>

<p>Create a team wide secret with jack:</p>

<pre><code class="python">&gt;&gt;&gt; jack.create_secret(Name='/security-team/prod/app1/username', SecretString='appreader')
{'ResponseMetadata': {'RetryAttempts': 0, 'HTTPStatusCode': 200, 'RequestId': 'x', 'HTTPHeaders': {'date': 'Thu, 08 Nov 2018 07:50:35 GMT', 'x-amzn-requestid': 'x', 'content-length': '193', 'content-type': 'application/x-amz-json-1.1', 'connection': 'keep-alive'}}, u'VersionId': u'x', u'Name': u'/security-team/prod/app1/username', u'ARN': u'arn:aws:secretsmanager:eu-west-1:123456789012:secret:/security-team/prod/app1/username-12ABC00'}
</code></pre>

<p>Let jack and steve try to read the secret:</p>

<pre><code class="python">&gt;&gt;&gt; jack.get_secret_value(SecretId='/security-team/prod/app1/username')['SecretString']
'appreader'
&gt;&gt;&gt; steve.get_secret_value(SecretId='/security-team/prod/app1/username')['SecretString']
'appreader'
</code></pre>

<p>Now let jack create a personal secret, let him read it:</p>

<pre><code class="python">&gt;&gt;&gt; jack.create_secret(Name='/security-team/personal/jack.smith/svc1/password', SecretString='secret')
&gt;&gt;&gt; jack.get_secret_value(SecretId='/security-team/personal/jack.smith/svc1/password')['SecretString']
'secret'
</code></pre>

<p>Now let steve try to read the secret and you will see that access is denied:</p>

<pre><code class="python">&gt;&gt;&gt; steve.get_secret_value(SecretId='/security-team/personal/jack.smith/username')['SecretString']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
...
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (AccessDeniedException) when calling the GetSecretValue operation: User: arn:aws:iam::123456789012:user/steve.adams is not authorized to perform: secretsmanager:GetSecretValue on resource: arn:aws:secretsmanager:eu-west-1:123456789012:secret:/security-team/personal/jack.smith/svc1/password-a1234b
</code></pre>

<p>Thats it for this post</p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Query 24 Hours Worth of Data Using BatchGet on Amazon DynamoDB Using Scan and Filter Without a GSI]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/30/query-24-hours-worth-of-data-using-batchget-on-amazon-dynamodb-using-scan-and-filter-without-a-gsi/"/>
    <updated>2018-10-30T14:53:43-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/30/query-24-hours-worth-of-data-using-batchget-on-amazon-dynamodb-using-scan-and-filter-without-a-gsi</id>
    <content type="html"><![CDATA[<p>I&rsquo;m testing how to query data in DynamoDB which will always be the retrieval of yesterdays data, without using a Global Secondary Index.</p>

<p>This is done just to see what other ways you can use to query data based on a specific timeframe.</p>

<script id="mNCC" language="javascript">
    medianet_width = "728";
    medianet_height = "90";
    medianet_crid = "218284798";
    medianet_versionId = "3111299"; 
  </script>


<script src="//contextual.media.net/nmedianet.js?cid=8CUD78FSV"></script>


<h2>Use-Case:</h2>

<p>Data from DynamoDB needs to be batch processed (daily for the last 24-hours), into a external datasource. Data will be written into DynamoDB, the HK (uuid) and RK (timestamp) will be duplicated to the daily table. But only uuid and timestamp will be duplicated to the daily table, and only data for that day will be written into that datestamp formatted table name.</p>

<p>Let&rsquo;s say data for 2018-10-30 needs to be written into our external data source, we will do a scan on table <code>tbl-test_20181030</code>, then from our response we will have a list of HashKeys (uuid) which we will use to do a BatchGet Item on our base table: <code>tbl-test_base</code>, which essentially grabs all the data for that day.</p>

<p>If deeper filtering needs to be done on that day, the FilterExpression can be used to do a deeper filtering which leads to grabbing only the filtered down data from the base table.</p>

<p><em>Note:</em> The base table might have millions of items, so a Scan operation on the Base table would be really expensive, as it reads all the items in the table.</p>

<p>Once the data has been processed, the daily or metadata table can be removed.</p>

<h2>DynamoDB Table Design</h2>

<p>The base table: <code>tbl-test_base</code> will have:</p>

<ul>
<li>HashKey: uuid (string)</li>
<li>RangeKey: timestamp (number)</li>
<li>Attributes: city, stream, transaction_date, name, metric_uri</li>
<li>Item will look like:</li>
</ul>


<pre><code class="python">{
  u'uuid': u'fb4ddeb9-3b5e-47b3-bbab-1aa1d8e8f47b', 
  u'timestamp': 1540891276, 
  u'city': u'sydney', 
  u'stream': u'NONE', 
  u'transaction_date': u'2018-10-30 11:21:16', 
  u'metric_uri': u'some-dummy-metric-uri', 
  u'name': u'frank'
}
</code></pre>

<p>he Daily Table: <code>tbl-test_20181030</code> will look like:</p>

<ul>
<li>HashKey: <code>uuid</code></li>
<li>Attributes: <code>timestamp</code></li>
<li>Item will look like:</li>
</ul>


<pre><code class="python">{
  u'uuid': u'fb4ddeb9-3b5e-47b3-bbab-1aa1d8e8f47b', 
  u'timestamp': 1540891276
}
</code></pre>

<h2>Demonstration using Python</h2>

<p>Creating the Metadata table:</p>

<pre><code class="python">import boto3, time, uuid, random

session = boto3.Session(region_name='eu-west-1', profile_name='dev')
resource = session.resource('dynamodb')
client = session.client('dynamodb')

def create_table():
    table_name = "tbl-test_{0}".format(time.strftime("%Y%m%d"))
    response = resource.create_table(
        TableName=table_name,
        KeySchema=[{
            'AttributeName': 'uuid',
            'KeyType': 'HASH'
        }],
        AttributeDefinitions=[{
            'AttributeName': 'uuid',
            'AttributeType': 'S'
        }],
        ProvisionedThroughput={
            'ReadCapacityUnits': 1,
            'WriteCapacityUnits': 1
        }
    )

    resource.Table(table_name).wait_until_exists()

    arn = client.describe_table(TableName=table_name)['Table']['TableArn']
    client.tag_resource(
        ResourceArn=arn,
        Tags=[
            {'Key': 'Name','Value': 'dynamo_table'},
            {'Key': 'Environment','Value': 'Dev'},
            {'Key': 'CreatedBy','Value': 'Ruan'}
        ]
    )

    return resource.Table(table_name).table_status

print(create_table())
</code></pre>

<p>Write 400 Items to DynamoDB:</p>

<pre><code class="python">import boto3, time, uuid, random

session = boto3.Session(region_name='eu-west-1', profile_name='dev')
resource = session.resource('dynamodb')
client = session.client('dynamodb')

base_table = 'tbl-test_base'
meta_table = 'tbl-test_{0}'.format(time.strftime("%Y%m%d"))

people = ['james', 'john', 'frank', 'paul', 'nathan', 'kevin']
cities = ['ireland', 'cape town', 'pretoria', 'paris', 'amsterdam', 'auckland', 'sydney']

def write_dynamo(uuid, timestamp):
    resource.Table(base_table).put_item(
        Item={
            'uuid': uuid, 
            'timestamp': timestamp, 
            'metric_uri': 'some-dummy-metric-uri', 
            'transaction_date': time.strftime("%Y-%m-%d %H:%M:%S"), 
            'name': random.choice(people), 
            'stream': 'NONE', 
            'city': random.choice(cities)
        }
    )

    resource.Table(meta_table).put_item(
        Item={
            'uuid': uuid, 
            'timestamp': timestamp
        }
    )

    return 'Written'

for x in xrange(400):
    time.sleep(1)
    write_dynamo(str(uuid.uuid4()), int(time.time()))
    print(x)
</code></pre>

<p>Getting Data for 20181030 but also filter data greater than the timestamp attribute, greater than <code>1540841144</code> in epoch time (which will give us about 254 items).</p>

<p>The BatchGet Item supports up to 100 items per call, we will limit the scans on 100 items per call, then paginate using the ExlusiveStartKey with the value of our LastEvaluatedKey that we will get from our response:</p>

<pre><code class="python">import boto3,time
from boto3.dynamodb.conditions import Key

base_table = 'tbl-test_base'
meta_table = 'tbl-test_20181030'

session = boto3.Session(region_name='eu-west-1', profile_name='dev')
resource = session.resource('dynamodb')
table = resource.Table(meta_table)
filtering_expression = Key('timestamp').gt(1540841144)

response = table.scan(FilterExpression=filtering_expression, Limit=100)

finished=False
while finished != True:
    if 'LastEvaluatedKey' in response.keys():
        print("Getting {} Items".format(response['Count']))
        items = resource.batch_get_item(RequestItems={base_table: {'Keys': response['Items']}})
        print(items['Responses'][base_table])
        time.sleep(2)
        response = table.scan(FilterExpression=filtering_expression, Limit=100, ExclusiveStartKey=response['LastEvaluatedKey'])
    else:
        print("Getting {} Items".format(response['Count']))
        items = resource.batch_get_item(RequestItems={base_table: {'Keys': response['Items']}})
        print(items['Responses'][base_table])
        finished=True
</code></pre>

<p>Running it:</p>

<pre><code class="bash">$ python dynamodb-batch-get.py
Getting 100 Items
[{u'city': u'pretoria', u'uuid': u'e8bc0d1c-2b57-4de2-b0e1-35ef1fe0edf1', u'stream': u'NONE', u'timestamp': Decimal('1540846990'), u'transaction_date': u'2018-10-29 23:03:10', u'metric_uri': u'some-dummy-metric-uri', u'name': u'frank'}, {u'city': u'amsterdam', u'uuid':
...
Getting 100 Items
[{u'city': u'sydney', u'uuid': u'5bc51ce9-2809-46c9-a3f2-ff8180086d92', u'stream': u'NONE', u'timestamp': Decimal('1540848599'), u'transaction_date': u'2018-10-29 23:29:59', u'metric_uri': u'some-dummy-metric-uri', u'name': u'frank'}
...
Getting 54 Items
[{u'city': u'cape town', u'uuid': u'5e069f34-0e97-4a49-9ca9-da2213edb689'...
</code></pre>

<p>Verifying that each call only scans 100 at a time:</p>

<pre><code class="python">&gt;&gt;&gt; response = table.scan(FilterExpression=filtering_expression, Limit=100)
&gt;&gt;&gt; response.keys()
[u'Count', u'Items', u'LastEvaluatedKey', u'ScannedCount', 'ResponseMetadata']
&gt;&gt;&gt; response.get('LastEvaluatedKey')
{u'uuid': u'e8c52a55-ca9e-4718-83d2-1b44a90f43e6'}
&gt;&gt;&gt; response.get('Count')
100
&gt;&gt;&gt; response.get('ScannedCount')
100
</code></pre>

<h2>Other Thoughts:</h2>

<p>Querying data is a lot easier using a Global Secondary Index where you could similarly have the metric_uri as the HashKey and transaction_date as the RangeKey:</p>

<pre><code class="python">&gt;&gt;&gt; response = table.query(
    IndexName='metric_uri-transaction_date-index', 
    KeyConditionExpression=Key('metric_uri').eq('some-dummy-metric-uri') &amp; Key('transaction_date').begins_with('2018-10-30')
)
&gt;&gt;&gt; response['Count']
400
</code></pre>

<p>Also note that depending on how you setup your GSI, in most cases its a exact duplicate in storage from your base table, so could potentially be double the costs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Temporary IAM Credentials From EC2 Instance Metadata Using Python]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/05/09/temporary-iam-credentials-from-ec2-instance-metadata-using-python/"/>
    <updated>2018-05-09T12:14:11-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/05/09/temporary-iam-credentials-from-ec2-instance-metadata-using-python</id>
    <content type="html"><![CDATA[<p>From a Best Practice Perspective its good not having to pass sensitive information around, and especially not hard coding them.</p>

<h2>Best Practice: Security</h2>

<p>One good way is to use SSM with KMS to Encrypt/Decrypt them, but since EC2 has a <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html">Metadata Service</a> available, we can make use of that to retrieve <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html">temporary credentials</a>. One requirement though, is that the instance will require an IAM Role where the code will be executed on. The IAM Role also needs to have sufficient privileges to be able to execute, whatever you need to do.</p>

<p>The <a href="https://12factor.net/">12 Factor</a> Methodology however states to use config in your environment variables, but from the application logic, its easy to save it in our environment.</p>

<h2>Scenario: Applications on AWS EC2</h2>

<p>When you run applications on Amazon EC2 the nodes has access to the EC2 Metadata Service, so in this case our IAM Role has a Policy that authorizes GetItem on our DynamoDB table, therefore we can define our code with no sensitive information, as the code will do all the work to get the credentials and use the credentials to access DynamoDB.</p>

<h2>Use Temporary Credentials to Read from DynamoDB using botocore</h2>

<p>In this example we will get the temporary credentials from the metadata service, then define the temporary credentials in our session to authorize our request against dynamodb to read from our table:</p>

<pre><code class="python">&gt;&gt;&gt; import boto3
&gt;&gt;&gt; from botocore.utils import InstanceMetadataFetcher
&gt;&gt;&gt; from botocore.credentials import InstanceMetadataProvider
&gt;&gt;&gt; provider = InstanceMetadataProvider(iam_role_fetcher=InstanceMetadataFetcher(timeout=1000, num_attempts=2))
&gt;&gt;&gt; creds = provider.load()

&gt;&gt;&gt; session = boto3.Session(
    aws_access_key_id=creds.access_key,
    aws_secret_access_key=creds.secret_key,
    aws_session_token=creds.token
)

&gt;&gt;&gt; ddb = session.client('dynamodb')

&gt;&gt;&gt; response = ddb.get_item(
    TableName='my-dynamodb-table',
    Key={
        'node_type': {
            'S': 'primary_manager'
        }
    }
)

&gt;&gt;&gt; print(response['Item']['ip']['S'])
'10.0.0.32
</code></pre>

<p>Also, when you are logged onto the EC2 instance, you can use curl to see the temporary credentials information:</p>

<pre><code class="bash">$ iam_role_name=$(curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/)
$ curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/${iam_role_name}
{
  "Code" : "Success",
  "LastUpdated" : "2018-05-09T14:25:48Z",
  "Type" : "AWS-HMAC",
  "AccessKeyId" : "",
  "SecretAccessKey" : "",
  "Token" : "",
  "Expiration" : "2018-05-09T20:46:55Z"
}
</code></pre>

<h2>Another method is boto3 Session:</h2>

<p>You can also use boto3.Session to achieve this:</p>

<pre><code class="bash">&gt;&gt;&gt; session = boto3.Session(region_name='eu-west-1')
&gt;&gt;&gt; credentials = session.get_credentials()
&gt;&gt;&gt; credentials = credentials.get_frozen_credentials()
&gt;&gt;&gt; credentials.access_key
u'ABC...'
&gt;&gt;&gt; credentials.secret_key
u'DEF...'
&gt;&gt;&gt; credentials.token
u'ZXC...'
&gt;&gt;&gt; access_key = credentials.access_key
&gt;&gt;&gt; secret_key = credentials.secret_key
&gt;&gt;&gt; ddb = session.client('dynamodb')
</code></pre>
]]></content>
  </entry>
  
</feed>
