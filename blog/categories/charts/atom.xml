<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Charts | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/charts/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2017-12-14T09:43:20-05:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Graphing Pretty Charts With Python Flask and Chartjs]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/12/14/graphing-pretty-charts-with-python-flask-and-chartjs/"/>
    <updated>2017-12-14T02:28:51-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/12/14/graphing-pretty-charts-with-python-flask-and-chartjs</id>
    <content type="html"><![CDATA[<p>I am a big sucker for Charts and Graphs, and today I found one awesome library called <a href="http://www.chartjs.org/">Chart.js</a>, which we will use with Python Flask Web Framework, to graph our data.</p>

<p>As Bitcoin is doing so well, I decided to graph the monthly Bitcoin price from January up until now.</p>

<h2>Dependencies:</h2>

<p>Install Flask:</p>

<pre><code class="bash">$ pip install flask
</code></pre>

<p>Create the files and directories:</p>

<pre><code class="bash">$ touch app.py
$ mkdir templates
</code></pre>

<p>We need the <a href="http://www.chartjs.org/docs/latest/#installation">Chart.js</a> library, but I will use the CDN version, in my html.</p>

<h2>Creating the Flask App:</h2>

<p>Our data that we want to graph will be hard-coded in our application, but there are many ways to make this more dynamic, in your <code>app.py</code>:</p>

<pre><code class="python">from flask import Flask, Markup, render_template

app = Flask(__name__)

labels = [
    'JAN', 'FEB', 'MAR', 'APR',
    'MAY', 'JUN', 'JUL', 'AUG',
    'SEP', 'OCT', 'NOV', 'DEC'
]

values = [
    967.67, 1190.89, 1079.75, 1349.19,
    2328.91, 2504.28, 2873.83, 4764.87,
    4349.29, 6458.30, 9907, 16297
]

colors = [
    "#F7464A", "#46BFBD", "#FDB45C", "#FEDCBA",
    "#ABCDEF", "#DDDDDD", "#ABCABC", "#4169E1",
    "#C71585", "#FF4500", "#FEDCBA", "#46BFBD"]

@app.route('/bar')
def bar():
    bar_labels=labels
    bar_values=values
    return render_template('bar_chart.html', title='Bitcoin Monthly Price in USD', max=17000, labels=bar_labels, values=bar_values)

@app.route('/line')
def line():
    line_labels=labels
    line_values=values
    return render_template('line_chart.html', title='Bitcoin Monthly Price in USD', max=17000, labels=line_labels, values=line_values)

@app.route('/pie')
def pie():
    pie_labels = labels
    pie_values = values
    return render_template('pie_chart.html', title='Bitcoin Monthly Price in USD', max=17000, set=zip(values, labels, colors))

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
</code></pre>

<h2>Populating the HTML Static Content:</h2>

<p>As we are using <code>render_template</code> we need to populate our html files in our <code>templates/</code> directory. As you can see we have 3 different html files:</p>

<ul>
<li><code>templates/bar_chart.html</code> :</li>
</ul>


<pre><code class="bash">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="utf-8" /&gt;
  &lt;title&gt;{{ title }}&lt;/title&gt;
  &lt;script src='https://cdnjs.cloudflare.com/ajax/libs/Chart.js/1.0.2/Chart.min.js'&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;center&gt;
    &lt;h1&gt;{{ title }}&lt;/h1&gt;
  &lt;/center&gt;
  &lt;center&gt;
    &lt;canvas id="chart" width="600" height="400"&gt;&lt;/canvas&gt;
    &lt;script&gt;
      // bar chart data
      var barData = {
        labels : [
          {% for item in labels %}
           "{{ item }}",
          {% endfor %}
    ],

        datasets : [{
          fillColor: "rgba(151,187,205,0.2)",
          strokeColor: "rgba(151,187,205,1)",
          pointColor: "rgba(151,187,205,1)",
          data : [
            {% for item in values %}
               "{{item}}",
              {% endfor %}
        ]
          }
        ]
      }

     // get bar chart canvas
     var mychart = document.getElementById("chart").getContext("2d");

       steps = 10
       max = {{max}}

     // draw bar chart
     new Chart(mychart).Bar(barData, {
       scaleOverride: true,
       scaleSteps: steps,
       scaleStepWidth: Math.ceil(max / steps),
       scaleStartValue: 0,
       scaleShowVerticalLines: true,
       scaleShowGridLines : true,
       barShowStroke : true,
       scaleShowLabels: true
       }
     );

    &lt;/script&gt;
  &lt;/center&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<ul>
<li><code>templates/line_chart.html</code>:</li>
</ul>


<pre><code class="bash">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="utf-8" /&gt;
  &lt;title&gt;{{ title }}&lt;/title&gt;
  &lt;script src='https://cdnjs.cloudflare.com/ajax/libs/Chart.js/1.0.2/Chart.min.js'&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;center&gt;
    &lt;h1&gt;{{ title }}&lt;/h1&gt;

    &lt;canvas id="chart" width="600" height="400"&gt;&lt;/canvas&gt;
    &lt;script&gt;

      // bar chart data
      var barData = {
        labels : [
          {% for item in labels %}
            "{{item}}",
          {% endfor %}
        ],

        datasets : [{
          fillColor: "rgba(151,187,205,0.2)",
          strokeColor: "rgba(151,187,205,1)",
          pointColor: "rgba(151,187,205,1)",
          pointStrokeColor: "#fff",
          pointHighlightFill: "#fff",
          pointHighlightStroke: "rgba(151,187,205,1)",
          bezierCurve : false,
          data : [
        {% for item in values %}
              {{item}},
            {% endfor %}]
          }
    ]
      }

      Chart.defaults.global.animationSteps = 50;
      Chart.defaults.global.tooltipYPadding = 16;
      Chart.defaults.global.tooltipCornerRadius = 0;
      Chart.defaults.global.tooltipTitleFontStyle = "normal";
      Chart.defaults.global.tooltipFillColor = "rgba(0,0,0,0.8)";
      Chart.defaults.global.animationEasing = "easeOutBounce";
      Chart.defaults.global.responsive = false;
      Chart.defaults.global.scaleLineColor = "black";
      Chart.defaults.global.scaleFontSize = 16;

      // get bar chart canvas
      var mychart = document.getElementById("chart").getContext("2d");

      steps = 10
      max = {{ max }}
      // draw bar chart
      var LineChartDemo = new Chart(mychart).Line(barData, {
        scaleOverride: true,
        scaleSteps: steps,
        scaleStepWidth: Math.ceil(max / steps),
        scaleStartValue: 0,
        scaleShowVerticalLines: true,
        scaleShowGridLines : true,
        barShowStroke : true,
        scaleShowLabels: true,
        bezierCurve: false,
      });

    &lt;/script&gt;
  &lt;/center&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<ul>
<li><code>templates/pie_chart.html</code>:</li>
</ul>


<pre><code class="bash">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="utf-8" /&gt;
  &lt;title&gt;{{ title }}&lt;/title&gt;
  &lt;script src='https://cdnjs.cloudflare.com/ajax/libs/Chart.js/1.0.2/Chart.min.js'&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;h1&gt;{{ title }}&lt;/h1&gt;

    &lt;canvas id="chart" width="600" height="400"&gt;&lt;/canvas&gt;
    &lt;script&gt;
      var pieData = [
        {% for item, label, colors in set %}
          {
            value: {{item}},
            label: "{{label}}",
            color : "{{colors}}"
          },
        {% endfor %}
      ];

      // get bar chart canvas
      var mychart = document.getElementById("chart").getContext("2d");
      steps = 10
      max = {{ max }}

      // draw pie chart
      new Chart(document.getElementById("chart").getContext("2d")).Pie(pieData);

    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>Running our Application:</h2>

<p>As you can see, we have 3 endpoints, each representing a different chart style:</p>

<ul>
<li>/line</li>
<li>/bar</li>
<li>/pie</li>
</ul>


<p>Let&rsquo;s start our flask application:</p>

<pre><code class="bash">$ python app.py
</code></pre>

<p>When we access our <code>/line</code> endpoint:</p>

<p><img src="https://i.snag.gy/M8FU6S.jpg" alt="" /></p>

<p>When we access our <code>/bar</code> endpoint:</p>

<p><img src="https://i.snag.gy/DTp0AZ.jpg" alt="" /></p>

<p>When we access our <code>/pie</code> endpoint:</p>

<p><img src="https://i.snag.gy/D6nqJN.jpg?nocache=1513261344206" alt="" /></p>

<h2>Resources:</h2>

<ul>
<li><a href="https://pythonspot.com/flask-and-great-looking-charts-using-chart-js/">https://pythonspot.com/flask-and-great-looking-charts-using-chart-js/</a></li>
<li><a href="http://www.chartjs.org/docs/latest/#installation">http://www.chartjs.org/docs/latest/#installation</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
