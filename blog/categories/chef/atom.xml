<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Chef | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2019-01-29T10:08:17-05:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started With Chef: Creating a Website With Apache]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/04/getting-started-with-chef-creating-a-website-with-apache/"/>
    <updated>2017-09-04T14:21:20-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/04/getting-started-with-chef-creating-a-website-with-apache</id>
    <content type="html"><![CDATA[<p>From my previous post we got started with <a href="http://blog.ruanbekker.com/blog/2017/09/04/getting-started-with-chef-working-with-files/">Installing the Chef Devlopment Kit</a> and using the file resource type.</p>

<p>In this post we will create a recipe that will:</p>

<ul>
<li>Update the APT Cache</li>
<li>Install the Apache2 package</li>
<li>Enables and Starts Apache2 on Boot</li>
<li>Create a index.html for our Website</li>
</ul>


<h2>Creating a Web Server:</h2>

<p>We will create our <code>webserver.rb</code> recipe, and our first section will consist of the following:</p>

<ul>
<li>Ensuring our APT Cache is up to date</li>
<li>The Frequency property indiciates 24 hours</li>
<li>The periodic action indicates that the update occurs periodically</li>
<li>Optional: the <code>:update</code> action will update the apt cache on each run</li>
<li>Installs the apache2 package (No action is specified, defaults to <code>:install</code>)</li>
</ul>


<pre><code class="ruby">apt_update 'Update APT Cache Daily' do
  frequency 86_400
  action :periodic
end

package 'apache2'
</code></pre>

<p>Running this recipe at this moment will provide the following output:</p>

<pre><code class="bash">$ chef-client --local-mode webserver.rb
..
Converging 2 resources
Recipe: @recipe_files::/root/chef-repo/webserver.rb
  * apt_update[Update APT Cache Daily] action periodic
    - update new lists of packages
    * directory[/var/lib/apt/periodic] action create (up to date)
    * directory[/etc/apt/apt.conf.d] action create (up to date)
    * file[/etc/apt/apt.conf.d/15update-stamp] action create_if_missing
      - create new file /etc/apt/apt.conf.d/15update-stamp
      - update content in file /etc/apt/apt.conf.d/15update-stamp from none to 174cdb
      --- /etc/apt/apt.conf.d/15update-stamp    2017-09-04 16:53:31.604488306 +0000
      +++ /etc/apt/apt.conf.d/.chef-15update-stamp20170904-5727-1p2g8zw 2017-09-04 16:53:31.604488306 +0000
      @@ -1 +1,2 @@
      +APT::Update::Post-Invoke-Success {"touch /var/lib/apt/periodic/update-success-stamp 2&gt;/dev/null || true";};
    * execute[apt-get -q update] action run
      - execute apt-get -q update
</code></pre>

<p>Next, we will set <code>apache2</code> to start on boot and start the service:</p>

<pre><code class="ruby">apt_update 'Update APT Cache Daily' do
  frequency 86_400
  action :periodic
end

package 'apache2'

service 'apache2' do
  supports status: true
  action [:enable, :start]
end
</code></pre>

<p>Running our chef client, will produce the following output:</p>

<pre><code class="bash">$ chef-client --local-mode webserver.rb
Converging 3 resources
Recipe: @recipe_files::/root/chef-repo/webserver.rb
  * apt_update[Update APT Cache Daily] action periodic (up to date)
  * apt_package[apache2] action install (up to date)
  * service[apache2] action enable (up to date)
  * service[apache2] action start
    - start service service[apache2]
</code></pre>

<p>Verifying that our apache2 service is started:</p>

<pre><code class="bash">$ /etc/init.d/apache2 status
 * apache2 is running
</code></pre>

<p>Next, using the file resource, we will replace the `/var/www/html/index.html' landing page with the one that we will specify in our recipe:</p>

<pre><code class="ruby">apt_update 'Update APT Cache Daily' do
  frequency 86_400
  action :periodic
end

package 'apache2'

service 'apache2' do
  supports status: true
  action [:enable, :start]
end

file '/var/www/html/index.html' do
  content '&lt;html&gt;
  &lt;body&gt;
    &lt;h1&gt;Hello, World!&lt;/h1&gt;
  &lt;/body&gt;
&lt;/html&gt;'
end
</code></pre>

<p>And our full <code>webserver.rb</code> recipe will look like the following:</p>

<pre><code class="ruby"># update cache periodically every 24 hours
apt_update 'Update APT Cache Daily' do
  frequency 86_400
  action :periodic
end

# install apache2 (:install is the default action)
package 'apache2'

# enable apache2 on boot and start apache2
service 'apache2' do
  supports status: true
  action [:enable, :start]
end

# create a custom html page
file '/var/www/html/index.html' do
  content '&lt;html&gt;
  &lt;body&gt;
    &lt;h1&gt;Hello, World!&lt;/h1&gt;
  &lt;/body&gt;
&lt;/html&gt;'
end
</code></pre>

<h2>Running our Chef Client against our Recipe:</h2>

<p>For the previous snippets, we took it section by section, here we will run the whole recipe:</p>

<pre><code class="bash">$ chef-client --local-mode webserver.rb
...
Converging 4 resources
Recipe: @recipe_files::/root/chef-repo/webserver.rb
  * apt_update[Update APT Cache Daily] action periodic (up to date)
  * apt_package[apache2] action install (up to date)
  * service[apache2] action enable (up to date)
  * service[apache2] action start (up to date)
  * file[/var/www/html/index.html] action create
    - update content in file /var/www/html/index.html from 538f31 to 9d1dca
    --- /var/www/html/index.html        2017-09-04 16:53:55.134043652 +0000
    +++ /var/www/html/.chef-index20170904-7451-3kt1p7.html      2017-09-04 17:00:16.306831840 +0000
</code></pre>

<h2>Testing our Website:</h2>

<p>And finally, testing our website:</p>

<pre><code class="bash">$ curl -XGET http://localhost/
&lt;html&gt;
  &lt;body&gt;
    &lt;h1&gt;Hello, World!&lt;/h1&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://docs.chef.io/resource_file.html">https://docs.chef.io/resource_file.html</a></li>
<li><a href="https://docs.chef.io/recipes.html">https://docs.chef.io/recipes.html</a></li>
<li><a href="https://learn.chef.io">https://learn.chef.io</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Chef: Working With Files]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/04/getting-started-with-chef-working-with-files/"/>
    <updated>2017-09-04T14:06:01-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/04/getting-started-with-chef-working-with-files</id>
    <content type="html"><![CDATA[<p>Chef: Infrastructure as Code, Automation, Configuration Management, having a service that can do that, and especially having something in place that knows what the desired state of your configurations/applications should be is definitely a plus.</p>

<p>I stumbled upon <a href="https://learn.chef.io">learn.chef.io</a> which is a great resource for learning chef, as I am learning Chef at this moment.</p>

<p>The Components of Chef consists of:</p>

<ul>
<li>Chef Workstation (ChefDK enables you to use the tools locally to test before pushing your code to the Chef Server)</li>
<li>Chef Server (Central Repository for your Cookbooks and info of every node Chef Manages)</li>
<li>Chef Client (a Node that is Managed by the Chef Server)</li>
</ul>


<p>In this post we will install the Chef Development Kit, and work with the chef-client in local-mode to create, update and delete files using the <code>file</code> resource type.</p>

<h2>Getting Started with Chef: Installation:</h2>

<p>Installing the Chef Development Kit:</p>

<pre><code class="bash">$ sudo apt-get update &amp;&amp; apt-get upgrade -y
$ sudo apt-get install curl git -y
$ curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P chefdk -c stable -v 2.0.28
</code></pre>

<h2>Configure a Resource:</h2>

<p>Using <code>chef-client</code> in local mode, we will use the <code>resource: file</code> to create a recipe that will create our <code>motd</code> file</p>

<pre><code class="ruby hello.rb">file '/tmp/motd' do
  content 'hello world'
end
</code></pre>

<p>Running chef client against our recipe in local-mode:</p>

<pre><code class="bash">$ chef-client --local-mode hello.rb
..
Converging 1 resources
Recipe: @recipe_files::/root/chef-repo/hello.rb
  * file[/tmp/motd] action create
    - create new file /tmp/motd
    - update content in file /tmp/motd from none to b94d27
    --- /tmp/motd       2017-09-04 16:18:19.265699403 +0000
    +++ /tmp/.chef-motd20170904-4500-54fh8w     2017-09-04 16:18:19.265699403 +0000
    @@ -1 +1,2 @@
    +hello world
</code></pre>

<p>Verify the Content:</p>

<pre><code class="bash">$ cat /tmp/motd
hello world
</code></pre>

<p>Running the command again will do nothing, as the content is in its desired state:</p>

<pre><code class="bash">$ chef-client --local-mode hello.rb
..
Converging 1 resources
Recipe: @recipe_files::/root/chef-repo/hello.rb
  * file[/tmp/motd] action create (up to date)
</code></pre>

<p>Changing our recipe by replacing the word <code>world</code> with <code>chef</code>, we will find that the content of our file will be updated:</p>

<pre><code class="bash">$ chef-client --local-mode hello.rb
..
Converging 1 resources
Recipe: @recipe_files::/root/chef-repo/hello.rb
  * file[/tmp/motd] action create
    - update content in file /tmp/motd from b94d27 to c38c60
    --- /tmp/motd       2017-09-04 16:18:19.265699403 +0000
    +++ /tmp/.chef-motd20170904-4903-wuigr      2017-09-04 16:23:21.379649145 +0000
    @@ -1,2 +1,2 @@
    -hello world
    +hello chef
</code></pre>

<p>Let&rsquo;s overwrite the content of our <code>motd</code> file manually:</p>

<pre><code class="bash">$ echo 'hello robots' &gt; /tmp/motd
</code></pre>

<p>Running Chef Client against our recipe again, allows Chef to restore our content to the desired state that is specified in our recipe:</p>

<pre><code class="bash">$ chef-client --local-mode hello.rb
..
Converging 1 resources
Recipe: @recipe_files::/root/chef-repo/hello.rb
  * file[/tmp/motd] action create
    - update content in file /tmp/motd from 548078 to c38c60
    --- /tmp/motd       2017-09-04 16:24:29.308286834 +0000
    +++ /tmp/.chef-motd20170904-5103-z16ssa     2017-09-04 16:24:42.528021632 +0000
    @@ -1,2 +1,2 @@
    -hello robots
    +hello chef
</code></pre>

<p>Deleting a file from our recipe:</p>

<pre><code class="ruby destroy.rb">file '/tmp/motd' do
  action :delete
end
</code></pre>

<p>Now using chef client to execute against this file will remove our file:</p>

<pre><code class="bash">$ chef-client --local-mode destroy.rb
Recipe: @recipe_files::/root/chef-repo/destroy.rb
  * file[/tmp/motd] action delete
    - delete file /tmp/motd
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://docs.chef.io/resource_file.html">https://docs.chef.io/resource_file.html</a></li>
<li><a href="https://docs.chef.io/recipes.html">https://docs.chef.io/recipes.html</a></li>
<li><a href="https://learn.chef.io">https://learn.chef.io</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
