<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cryptography | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/cryptography/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2021-03-10T00:56:14-05:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Distributing a Shared Secret Amongst a Group of Participants Using Shamirs Secret Sharing Scheme Aka Ssss]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/08/27/distributing-a-shared-secret-amongst-a-group-of-participants-using-shamirs-secret-sharing-scheme-aka-ssss/"/>
    <updated>2018-08-27T18:29:48-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/08/27/distributing-a-shared-secret-amongst-a-group-of-participants-using-shamirs-secret-sharing-scheme-aka-ssss</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/cryptography-word-logo.png" alt="" /></p>

<p>In situations where a group of participants join together to split up a secret in a form of secret sharing, where the secret is devided into parts, giving each participant their own unique part. Together contributing to reconstruct the initial secret. We can achieve this with Shamir&rsquo;s Secret Sharing which is an algorithm in cryptography created by <a href="https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing">Adi Shamir</a>.</p>

<h2>More info on Secret Sharing</h2>

<p>Referenced from <a href="https://en.wikipedia.org/wiki/Secret_sharing">Wikipedia: Secret Sharing</a>:</p>

<p>&ldquo;Secret sharing (also called secret splitting) refers to methods for distributing a secret amongst a group of participants, each of whom is allocated a share of the secret. The secret can be reconstructed only when a sufficient number, of possibly different types, of shares are combined together; individual shares are of no use on their own.&rdquo;</p>

<h2>Installing ssss</h2>

<p>On Mac OSX:</p>

<pre><code>$ brew install ssss
</code></pre>

<p>On Debian:</p>

<pre><code>$ apt install ssss -y
</code></pre>

<h2>Creating a Secret:</h2>

<p>Generate a Secret where we will distribute 5 shares, where each participant will have their own unique share, and to reconstruct the secret, we will need 3 participants to rebuild the secret. In our case our shares will be distributed to the following example users:</p>

<pre><code>- Share 1: James
- Share 2: John
- Share 3: Frank
- Share 4: Paul
- Share 5: Ryan
</code></pre>

<p>For this demonstration our secret&rsquo;s value will be <code>SuperSecret@123!</code>, which we will split into 5 shares, but to reconstruct, we need 3 parts / shares:</p>

<pre><code class="bash">$ ssss-split -t 3 -n 5
Generating shares using a (3,5) scheme with dynamic security level.
Enter the secret, at most 128 ASCII characters: Using a 128 bit security level.
1-41ac84013bf568d1cc88b751539f1ff5
2-7d9ca3ca26442bfcca35e0ad205e5659
3-519038837bbf1b7ceefde331ad1ae40f
4-6d4f4e0f086af5be033f516bb3e227d2
5-4143d5465591c53e27f752f73ea69596
</code></pre>

<p>In this case, each share will be distributed to each user to save in a secure location.</p>

<h2>Reconstructing the Secret:</h2>

<p>Let&rsquo;s reconstruct the secret, and as we need 3 participants, we will ask <code>John</code>, <code>Paul</code> and <code>Ryan</code> for their shares, so that we can reconstruct the secret:</p>

<pre><code class="bash">$ ssss-combine -t 3
Enter 3 shares separated by newlines:
Share [1/3]: 2-7d9ca3ca26442bfcca35e0ad205e5659
Share [2/3]: 4-6d4f4e0f086af5be033f516bb3e227d2
Share [3/3]: 5-4143d5465591c53e27f752f73ea69596
Resulting secret: SuperSecret@123!
</code></pre>

<p>As you can see the secret is verified the same as the initial secret.</p>

<h2>Using ssss and qrencode for MFA Codes</h2>

<p>This can be useful for Multi Factor Authentication as well. Setup a Virtual MFA with a Identity that supports MFA Authentication, copy or make note of the &ldquo;Secret Key / Secret Configuration Key&rdquo;, go ahead and setup the MFA Device on your MFA Device to complete the setup.</p>

<p>Once verified and able to logon, logout and delete the MFA Account from your Device.</p>

<p>Generate the same share scheme for the MFA Secret Key, for this example: <code>ABCDEXAMPLE1029384756</code>:</p>

<pre><code class="bash">$ ssss-split -t 3 -n 5
Generating shares using a (3,5) scheme with dynamic security level.
Enter the secret, at most 128 ASCII characters: Using a 168 bit security level.
1-8d2cf979fb346297cab47ff691bddc1c5a5f34af37
2-4d0f2cdcfff653cc60a4f293c15805f7e84b0a956d
3-dadb6d2cbe42772c9a9042273f0b71dd71422f19cb
4-546bcef428151ceb01fdc6007ac2e5e4f1516670ca
5-c3bf8f0469a1380bfbc976b4849191ce685843fc7e
</code></pre>

<p>Distribute the Shares, and when the MFA Device needs to be restored on a Device, reconstruct the secret to get the Secret Key for the MFA Device:</p>

<pre><code class="bash">$ ssss-combine -t 3
Enter 3 shares separated by newlines:
Share [1/3]: 1-8d2cf979fb346297cab47ff691bddc1c5a5f34af37
Share [2/3]: 2-4d0f2cdcfff653cc60a4f293c15805f7e84b0a956d
Share [3/3]: 3-dadb6d2cbe42772c9a9042273f0b71dd71422f19cb
Resulting secret: ABCDEXAMPLE1029384756
</code></pre>

<p>Now that we have the Secret Key for our MFA Device, let&rsquo;s Generate a QRCode that we can scan in from our device, which will save us from typing a lot of characters. We will need <code>qrencode</code> for this:</p>

<p>For Mac OSX:</p>

<pre><code>$ brew install qrencode
</code></pre>

<p>for Debian:</p>

<pre><code class="bash">$ apt install qrencode -y
</code></pre>

<p>To generate the QRCode, we will pass the filename: <code>myqrcode.png</code>, the name that will appear on our device: <code>MyNewMFADevice</code>, and the Secret: <code>ABCDEXAMPLE1029384756</code>:</p>

<pre><code>$ qrencode -o myqrcode.png -d 300 -s 10 "otpauth://totp/MyNewMFADevice?secret=ABCDEXAMPLE1029384756"
</code></pre>

<p>You will find the <code>myqrcode.png</code> in your current working directory, open the file scan the barcode and your MFA device will be setup and enabled to use.</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Secret_sharing">https://en.wikipedia.org/wiki/Secret_sharing</a></li>
<li><a href="http://point-at-infinity.org/ssss/">http://point-at-infinity.org/ssss/</a></li>
<li><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_virtual.html#enable-virt-mfa-for-iam-user">https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_virtual.html#enable-virt-mfa-for-iam-user</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Encryption and Decryption With the PyCrypto Module Using the AES Cipher in Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/04/30/encryption-and-decryption-with-the-pycrypto-module-using-the-aes-cipher-in-python/"/>
    <updated>2018-04-30T01:43:26-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/04/30/encryption-and-decryption-with-the-pycrypto-module-using-the-aes-cipher-in-python</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/0MaLsx.jpg" alt="" /></p>

<p>While I&rsquo;m learning a lot about encryption at the moment, I wanted to test out encryption with the PyCrypto module in Python using the <a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">Advanced Encryption Standard (AES)</a> Symmetric Block Cipher.</p>

<h2>Installing PyCrypto:</h2>

<pre><code class="bash">$ pip install pycrypto --user
</code></pre>

<h2>PyCrypto Example:</h2>

<p>Our AES Key needs to be either 16, 24 or 32 bytes long and our Initialization Vector needs to be 16 Bytes long. That will be generated using the random and string modules.</p>

<p>Encrypting:</p>

<pre><code class="python">&gt;&gt;&gt; from Crypto.Cipher import AES
&gt;&gt;&gt; import random, string, base64

&gt;&gt;&gt; key = ''.join(random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for x in range(32))
&gt;&gt;&gt; iv = ''.join(random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for x in range(16))

&gt;&gt;&gt; print(key, len(key))
('BLhgpCL81fdLBk23HkZp8BgbT913cqt0', 32)
&gt;&gt;&gt; print(iv, len(iv))
('OWFJATh1Zowac2xr', 16)

&gt;&gt;&gt; enc_s = AES.new(key, AES.MODE_CFB, iv)
&gt;&gt;&gt; cipher_text = enc_s.encrypt('this is a super important message')
&gt;&gt;&gt; encoded_cipher_text = base64.b64encode(cipher_text)
&gt;&gt;&gt; print(encoded_cipher_text)
'AtBa6zVB0UQ3U/50ogOb6g09FlyPdpmJB7UzoCqxhsQ6'
</code></pre>

<p>Decrypting:</p>

<pre><code class="python">&gt;&gt;&gt; from Crypto.Cipher import AES
&gt;&gt;&gt; import base64
&gt;&gt;&gt; key = 'BLhgpCL81fdLBk23HkZp8BgbT913cqt0'
&gt;&gt;&gt; iv = 'OWFJATh1Zowac2xr'

&gt;&gt;&gt; decryption_suite = AES.new(key, AES.MODE_CFB, iv)
&gt;&gt;&gt; plain_text = decryption_suite.decrypt(base64.b64decode(encoded_cipher_text))
&gt;&gt;&gt; print(plain_text)
this is a super important message
</code></pre>

<p>It&rsquo;s not needed to use base64, but to have the ability to stay away from strange characters I decided to encode them with base64 :D</p>

<h2>References:</h2>

<ul>
<li><a href="http://docs.python-guide.org/en/latest/scenarios/crypto/">PyCrypto</a></li>
<li><a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">Wiki - AES</a></li>
<li><a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Feedback_(CFB">Wiki - CFB Mode</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Encryption and Decryption With Simple Crypt Using Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/04/29/encryption-and-decryption-with-simple-crypt-using-python/"/>
    <updated>2018-04-29T10:50:46-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/04/29/encryption-and-decryption-with-simple-crypt-using-python</id>
    <content type="html"><![CDATA[<p>Today I wanted to encrypt sensitive information to not expose passwords, hostnames etc. I wanted to have a way to encrypt my strings with a master password and stumbled upon Simple Crypt.</p>

<p><a href="https://bekkerclothing.com/collections/developer?utm_source=blog.ruanbekker.com&utm_medium=blog&utm_campaign=leaderboard_ad" target="_blank"><img alt="bekker-clothing-developer-tshirts" src="https://user-images.githubusercontent.com/567298/70170981-7c278a80-16d6-11ea-9759-6621d02c1423.png"></a></p>

<h2>Simple Crypt</h2>

<p>Why simple-crypt? Referenced from their <a href="https://pypi.org/project/simple-crypt/">docs</a>:</p>

<ul>
<li>Simple Crypt uses standard, well-known algorithms following the recommendations from <a href="http://www.daemonology.net/blog/2009-06-11-cryptographic-right-answers.html">this</a> link.</li>
<li>The PyCrypto library provides the algorithm implementation, where AES256 cipher is used.</li>
<li>It includes a check (an HMAC with SHA256) to warn when ciphertext data are modified.</li>
<li>It tries to make things as secure as possible when poor quality passwords are used (PBKDF2 with SHA256, a 256 bit random salt, and 100,000 rounds).</li>
<li>Using a library, rather than writing your own code, means that we have less solutions to the same problem.</li>
</ul>


<h2>Installing Simple-Crypt:</h2>

<p>From a base alpine image:</p>

<pre><code class="bash">$ apk update
$ apk add python python-dev py2-pip
$ apk add gcc g++ make libffi-dev openssl-dev
$ pip install simple-crypt
</code></pre>

<h2>Simple Examples:</h2>

<p>Two simple examples to encrypt and decrypt data with simple-crypt. We will use a password <code>sekret</code> and we will encrypt the string: <code>this is a secure message</code>:</p>

<pre><code class="python">&gt;&gt;&gt; from simplecrypt import encrypt, decrypt
&gt;&gt;&gt; password = 'sekret'
&gt;&gt;&gt; message = 'this is a secret message'
&gt;&gt;&gt; ciphertext = encrypt(password, message)
&gt;&gt;&gt;
&gt;&gt;&gt; print(ciphertext)
sc#$%^&amp;*(..........
</code></pre>

<p>Now that we have our encrypted string, lets decrypt it. First we will use the wrong password, so that you will see how the expected output should look when using a different password, than was used when it was encrypted:</p>

<pre><code class="python">&gt;&gt;&gt; print(decrypt('badpass', ciphertext))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/site-packages/simplecrypt/__init__.py", line 72, in decrypt
    _assert_hmac(hmac_key, hmac, hmac2)
  File "/usr/lib/python2.7/site-packages/simplecrypt/__init__.py", line 116, in _assert_hmac
    raise DecryptionException('Bad password or corrupt / modified data.')
simplecrypt.DecryptionException: Bad password or corrupt / modified data.
</code></pre>

<p>Now using the correct password to decrypt:</p>

<pre><code class="python">&gt;&gt;&gt; print(decrypt('sekret', ciphertext))
this is a secret message
</code></pre>

<h2>SimpleCrypt Base64 and Getpass</h2>

<p>I wanted to store the encrypted string in a database, but the ciphertext has a combination of random special characters, so I decided to encode the ciphertext with base64. And the password input will be used with the getpass module.</p>

<p>Our encryption app:</p>

<pre><code class="python encrypt.py">import sys
from simplecrypt import encrypt, decrypt
from base64 import b64encode, b64decode
from getpass import getpass

password = getpass()
message = sys.argv[1]

cipher = encrypt(password, message)
encoded_cipher = b64encode(cipher)
print(encoded_cipher)
</code></pre>

<p>Our decryption app:</p>

<pre><code class="python">import sys
from simplecrypt import encrypt, decrypt
from base64 import b64encode, b64decode
from getpass import getpass

password = getpass()
encoded_cipher = sys.argv[1]

cipher = b64decode(encoded_cipher)
plaintext = decrypt(password, cipher)
print(plaintext)
</code></pre>

<h2>Encrypt and Decrypting Data using our Scripts:</h2>

<p>Encrypting the string <code>this is a secret message</code>:</p>

<pre><code class="bash">$ python encrypt.py "this is a secret message"
Password: 
c2MAAnyfWIfOBV43vxo3sVCEYMG4C6hx69hv2Ii1JKlVHJUgBAlADJPOsD5cJO6MMI9faTDm1As/VfesvBzIe5S16mNyg2q7xfnP5iJ0RlK92vMNRbKOvNibg3M=
</code></pre>

<p>Now that we have our encoded ciphertext, lets decrypt it with the password that we encrypted it with:</p>

<pre><code class="bash">$ python decrypt.py 'c2MAAnyfWIfOBV43vxo3sVCEYMG4C6hx69hv2Ii1JKlVHJUgBAlADJPOsD5cJO6MMI9faTDm1As/VfesvBzIe5S16mNyg2q7xfnP5iJ0RlK92vMNRbKOvNibg3M='
Password: 
this is a secret message
</code></pre>

<p>This is one way of working with sensitive info that you would like to encrypt/decrypt.</p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
</feed>
