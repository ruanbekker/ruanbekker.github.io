<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Databases | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/databases/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-06-03T18:53:19-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Experimenting With Python and TinyMongo a MongoDB Wrapper for TinyDB]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/15/experimenting-with-python-and-tinymongo-a-mongodb-wrapper-for-tinydb/"/>
    <updated>2018-04-15T16:39:22-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/15/experimenting-with-python-and-tinymongo-a-mongodb-wrapper-for-tinydb</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/schapman1974/tinymongo">TinyMongo</a> is a wrapper for MongoDB on top of TinyDB.</p>

<p>This is awesome for testing, where you need a local document orientated database which is backed by a flat file. It feels just like using MongoDB, except that its local, lightweight and using TinyDB in the backend.</p>

<h2>Installing Dependencies:</h2>

<pre><code class="bash">$ pip install tinymongo
</code></pre>

<h2>Usage Examples:</h2>

<p>Initialize tinymongo and create the database and collection:</p>

<pre><code class="python">&gt;&gt;&gt; from tinymongo import TinyMongoClient
&gt;&gt;&gt; connection = TinyMongoClient('foo')
&gt;&gt;&gt; db_init = connection.mydb
&gt;&gt;&gt; db = db_init.users
</code></pre>

<p>Insert a Document, catch the document id and search for that document:</p>

<pre><code class="python">&gt;&gt;&gt; record_id = db .insert_one({'username': 'ruanb', 'name': 'ruan', 'age': 31, 'gender': 'male', 'location': 'south africa'}).inserted_id
&gt;&gt;&gt; user_info = db.find_one({"_id": record_id})
&gt;&gt;&gt; print(user_info)
{u'username': u'ruanb', u'name': u'ruan', u'gender': u'male', u'age': 31, u'_id': u'8d2ce01140ec11e888110242ac110004', u'location': u'south africa'}
</code></pre>

<p>Update a document: Update the age attribute from 31 to 32</p>

<pre><code class="python">&gt;&gt;&gt; db.users.update_one({'_id': '8d2ce01140ec11e888110242ac110004'}, {'$set': {'age': 32 }})
&gt;&gt;&gt; print(user_info)
{u'username': u'ruanb', u'name': u'ruan', u'gender': u'male', u'age': 32, u'_id': u'8d2ce01140ec11e888110242ac110004', u'location': u'south africa'}
</code></pre>

<p>Insert some more data:</p>

<pre><code class="python">&gt;&gt;&gt; record_id = db .insert_one({'username': 'stefanb', 'name': 'stefan', 'age': 30, 'gender': 'male', 'location': 'south africa'}).inserted_id
&gt;&gt;&gt; record_id = db .insert_one({'username': 'alexa', 'name': 'alex', 'age': 34, 'gender': 'male', 'location': 'south africa'}).inserted_id
</code></pre>

<p>Find all the users, sorted by descending age, oldest to youngest:</p>

<pre><code class="python">&gt;&gt;&gt; response = db.users.find(sort=[('age', -1)])
&gt;&gt;&gt; for doc in response:
...     print(doc)
...
{u'username': u'alexa', u'name': u'alex', u'gender': u'male', u'age': 34, u'_id': u'66b1cc3d40ee11e892980242ac110004', u'location': u'south africa'}
{u'username': u'ruanb', u'name': u'ruan', u'gender': u'male', u'age': 32, u'_id': u'8d2ce01140ec11e888110242ac110004', u'location': u'south africa'}
{u'username': u'stefanb', u'name': u'stefan', u'gender': u'male', u'age': 30, u'_id': u'fbe9da8540ed11e88c5e0242ac110004', u'location': u'south africa'}
</code></pre>

<p>Find the number of documents in the collection:</p>

<pre><code class="python">&gt;&gt;&gt; db.users.find().count()
3
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://github.com/schapman1974/tinymongo">TinyMongo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experimenting With Python and Flata the Lightweight Document Orientated Database]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/15/experimenting-with-python-and-flata-the-lightweight-document-orientated-database/"/>
    <updated>2018-04-15T15:09:25-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/15/experimenting-with-python-and-flata-the-lightweight-document-orientated-database</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/l298Y7.jpg" alt="" /></p>

<p><a href="https://github.com/harryho/flata">Flata</a> is a lightweight document orientated database, which was inspired by <a href="https://github.com/msiemens/tinydb">TinyDB</a> and <a href="https://github.com/typicode/lowdb">LowDB</a>.</p>

<h2>Why Flata?</h2>

<p>Most of the times my mind gets in its curious states and I think about alternative ways on doing things, especially testing lightweight apps and today I wondered if theres any NoSQL-like software out there that is easy to spin up and is backed by a flat file, something like <code>sqlite</code> for SQL-like services, so this time just something for NoSQL-like.</p>

<p>So I stumbled upon TinyDB and Flata which is really easy to use and awesome!</p>

<h2>What will we be doing today:</h2>

<ul>
<li>Create Database / Table</li>
<li>Write to the Table</li>
<li>Update Documents from the Table</li>
<li>Scan the Table</li>
<li>Query the Table</li>
<li>Delete Documents from the Table</li>
<li>Purge the Table</li>
</ul>


<h2>Getting the Dependencies:</h2>

<p>Flata is written in Python, so no external dependencies is needed. To install it:</p>

<pre><code class="bash">$ pip install flata
</code></pre>

<h2>Usage Examples:</h2>

<p>My home working directory:</p>

<pre><code class="bash">$ pwd
/home/ruan
</code></pre>

<p>This will be the directory where we will save our database in <code>.json</code> format.</p>

<p>Import the Dependencies:</p>

<pre><code class="python">&gt;&gt;&gt; from flata import Flata, Query, where
&gt;&gt;&gt; from flata.storages import JSONStorage
</code></pre>

<p>Create the Database file where all the data will be persisted:</p>

<pre><code class="python">&gt;&gt;&gt; db_init = Flata('mydb.json', storage=JSONStorage)
</code></pre>

<p>Create the collection / table, with a custom id field. If the resource already exists a retrieve will be done:</p>

<pre><code class="python">&gt;&gt;&gt; db_init.table('collection1', id_field = 'uid')
</code></pre>

<p>List the tables:</p>

<pre><code class="python">&gt;&gt;&gt; db_init.all()
{u'collection1': {}}
</code></pre>

<p>a get method can only be done if the resource exists, and we will assign it to the <code>db</code> object:</p>

<pre><code class="python">&gt;&gt;&gt; db = db_init.get('collection1')
</code></pre>

<p>Insert some data into our table:</p>

<pre><code class="python">&gt;&gt;&gt; db.insert({'username': 'ruanb', 'name': 'ruan', 'age': 31, 'gender': 'male', 'location': 'south africa'})
{'username': 'ruanb', 'uid': 1, 'gender': 'male', 'age': 31, 'location': 'south africa', 'name': 'ruan'}

&gt;&gt;&gt; db.insert({'username': 'stefanb', 'name': 'stefan', 'age': 30, 'gender': 'male', 'location': 'south africa'})
{'username': 'stefanb', 'uid': 2, 'gender': 'male', 'age': 30, 'location': 'south africa', 'name': 'stefan'}

&gt;&gt;&gt; db.insert({'username': 'mikec', 'name': 'mike', 'age': 28, 'gender': 'male', 'location': 'south africa'})
{'username': 'mikec', 'uid': 3, 'gender': 'male', 'age': 28, 'location': 'south africa', 'name': 'mike'}

&gt;&gt;&gt; db.insert({'username': 'sam', 'name': 'samantha', 'age': 24, 'gender': 'female', 'location': 'south africa'})
{'username': 'sam', 'uid': 4, 'gender': 'female', 'age': 24, 'location': 'south africa', 'name': 'samantha'}

&gt;&gt;&gt; db.insert({'username': 'michellek', 'name': 'michelle', 'age': 32, 'gender': 'female', 'location': 'south africa'})
{'username': 'michellek', 'uid': 5, 'gender': 'female', 'age': 32, 'location': 'south africa', 'name': 'michelle'}
</code></pre>

<p>Scan the whole table:</p>

<pre><code class="python">&gt;&gt;&gt; db.all()
[{u'username': u'ruanb', u'uid': 1, u'name': u'ruan', u'gender': u'male', u'age': 31, u'location': u'south africa'}, {u'username': u'stefanb', u'uid': 2, u'name': u'stefan', u'gender': u'male', u'age': 30, u'location': u'south africa'}, {u'username': u'mikec', u'uid': 3, u'name': u'mike', u'gender': u'male', u'age': 28, u'location': u'south africa'}, {u'username': u'sam', u'uid': 4, u'name': u'samantha', u'gender': u'female', u'age': 24, u'location': u'south africa'}, {u'username': u'michellek', u'uid': 5, u'name': u'michelle', u'gender': u'female', u'age': 32, u'location': u'south africa'}]
</code></pre>

<p>Query data from the table.</p>

<p>Query the table for the <code>username =&gt; ruanb</code>:</p>

<pre><code class="python">&gt;&gt;&gt; import json
&gt;&gt;&gt; q = Query()

&gt;&gt;&gt; response = db.search(q.username == 'ruanb')
&gt;&gt;&gt; print(json.dumps(response, indent=2))
[
  {
    u'username': u'ruanb', 
    u'uid': 1, 
    u'name': u'ruan', 
    u'gender': u'male', 
    u'age': 31, 
    u'location': u'south africa'
  }
]
</code></pre>

<p>Query the table for everyone that is older than <code>29</code> and only <code>male</code> genders:</p>

<pre><code class="python">&gt;&gt;&gt; db.search(( q.gender == 'male' ) &amp; (q.age &gt;= 29 ))
[
  {
    u'username': u'ruanb', 
    u'uid': 1, 
    u'name': u'ruan', 
    u'gender': u'male', 
    u'age': 31, 
    u'location': u'south africa'
  }, 
  {
    u'username': u'stefanb', 
    u'uid': 2, 
    u'name': u'stefan', 
    u'gender': u'male', 
    u'age': 30, 
    u'location': u'south africa'
  }
]
</code></pre>

<p>Query the table for everyone that is younger than 25 or males:</p>

<pre><code class="python">&gt;&gt;&gt; db.search(( q.age &lt; 25 ) | (q.gender == 'male' ) )
[
  {
    "username": "ruanb",
    "uid": 1,
    "name": "ruan",
    "gender": "male",
    "age": 31,
    "location": "south africa"
  },
  {
    "username": "stefanb",
    "uid": 2,
    "name": "stefan",
    "gender": "male",
    "age": 30,
    "location": "south africa"
  },
  {
    "username": "mikec",
    "uid": 3,
    "name": "mike",
    "gender": "male",
    "age": 28,
    "location": "south africa"
  },
  {
    "username": "sam",
    "uid": 4,
    "name": "samantha",
    "gender": "female",
    "age": 24,
    "location": "south africa"
  }
]
</code></pre>

<p>Update the location value: Lets say Samantha relocated to New Zealand, and we need to update her location from <code>South Africa</code> to <code>New Zealand</code>:</p>

<pre><code class="python">&gt;&gt;&gt; db.update({'location': 'new zealand'}, where('username') == 'sam' )
([4], [{u'username': u'sam', u'uid': 4, u'name': u'samantha', u'gender': u'female', u'age': 24, u'location': 'new zealand'}])

&gt;&gt;&gt; db.search(q.username == 'sam')
[{u'username': u'sam', u'uid': 4, u'name': u'samantha', u'gender': u'female', u'age': 24, u'location': u'new zealand'}]
</code></pre>

<p>Delete a document by its id:</p>

<pre><code class="python">&gt;&gt;&gt; db.remove(ids=[4])
([4], [])
</code></pre>

<p>Delete all documents matching a query, for this example, all people with the gender: <code>male</code>:</p>

<pre><code class="python">&gt;&gt;&gt; db.remove(q.gender == 'male')
([1, 2, 3], [])
</code></pre>

<p>Delete all the data in the table:</p>

<pre><code class="python">&gt;&gt;&gt; db.purge()
</code></pre>

<p>When we exit, you will find the database file, which we created:</p>

<pre><code class="bash">$ ls
mydb.json
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://github.com/harryho/flata">Flata</a></li>
<li><a href="https://github.com/msiemens/tinydb">TinyDB</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Python to Query MySQL Database With MySQLdb Library]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/26/using-python-to-query-mysql-database-with-mysqldb-library/"/>
    <updated>2017-10-26T03:40:11-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/26/using-python-to-query-mysql-database-with-mysqldb-library</id>
    <content type="html"><![CDATA[<p>a Quick post to demostrate how to use Python to Query data from MySQL. We will use the MySQL Docker Image for the demonstration.</p>

<h2>Provision MySQL</h2>

<p>We will use the latest mysql image, and use the environment variable to pass the root password, and also expose the mysql port:</p>

<pre><code class="bash">$ docker run -itd -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password mysql
</code></pre>

<h2>Populate some data in MySQL</h2>

<p>Connect to MySQL:</p>

<pre><code class="bash">$ mysql -h 127.0.0.1 -u root -ppasword
</code></pre>

<p>Create some test data:</p>

<pre><code class="sql">mysql&gt; create database foo;
mysql&gt; use foo;
mysql&gt; create table bar (name VARCHAR(20), surname VARCHAR(20));
mysql&gt; insert into bar values('ruan', 'bekker');
mysql&gt; insert into bar values('stefan', 'bester');
mysql&gt; insert into bar values('peter', 'williams');
</code></pre>

<h2>Python with MySQL: Setup the Environment</h2>

<p>We will use virtualenv to create a virtual environment to keep our installation isolated from the rest of our system. Install virtualenv:</p>

<pre><code class="bash">$ pip install virtualenv
</code></pre>

<p>Create a virtual environment and install the required dependency:</p>

<pre><code class="bash">$ virtualenv venv-mysql
$ source venv-mysql/bin/activate
(venv-mysql) pip install MySQL-python
</code></pre>

<h2>Python with MySQL: Develop the Client</h2>

<pre><code class="python">&gt;&gt;&gt; import MySQLdb
&gt;&gt;&gt; db = MySQLdb.connect('127.0.0.1', 'root', 'password', 'foo')
&gt;&gt;&gt; con = db.cursor()
&gt;&gt;&gt; con.execute("SELECT * from bar")
4L
&gt;&gt;&gt; rows = con.fetchall()
&gt;&gt;&gt; for row in rows:
...     print(row[0], row[1])
... 
('ruan', 'bekker')
('stefan', 'bester')
('peter', 'williams')
&gt;&gt;&gt; exit()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a 3 Node MongoDB Replica Set on Ubuntu 16]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/02/setup-a-3-node-mongodb-replica-set-on-ubuntu-16/"/>
    <updated>2017-09-02T19:29:10-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/02/setup-a-3-node-mongodb-replica-set-on-ubuntu-16</id>
    <content type="html"><![CDATA[<p>Today we will setup a 3 Node Replica Set for MongoDB on Ubuntu 16. A Replica Set is a form of data replication, so that your data resides on more than one node for data durability. We will setup the 1st node as the primary node, the second as the secondary node and the 3rd node will act as an arbiter.</p>

<p>The arbiter node can almost be mentioned as a voter node, as it will be set in place to prevent split brain.</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://eladnava.com/deploy-a-highly-available-mongodb-replica-set-on-aws/">https://eladnava.com/deploy-a-highly-available-mongodb-replica-set-on-aws/</a></li>
<li><a href="https://stackoverflow.com/questions/38524150/mongodb-replica-set-with-simple-password-authentication">https://stackoverflow.com/questions/38524150/mongodb-replica-set-with-simple-password-authentication</a> (auth)</li>
<li><a href="https://stackoverflow.com/questions/14789622/mongodb-keyfile-too-open-permissions">https://stackoverflow.com/questions/14789622/mongodb-keyfile-too-open-permissions</a></li>
</ul>


<h2>Installing MongoDB on our 3 Nodes:</h2>

<p>Our case, using Ubuntu 16.04, setting up our repository and installing mongodb from our repository:</p>

<pre><code class="bash">$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6
$ echo "deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list
$ apt update
$ apt install -y mongodb-org -y
</code></pre>

<p>Preparing our Directories:</p>

<pre><code class="bash">$ mkdir -p /srv/mongodb/rs0-0 /srv/mongodb/rs0-1 /srv/mongodb/rs0-2
$ mkdir -p /var/log/mongodb/rs0-0 /var/log/mongodb/rs0-1 /var/log/mongodb/rs0-2
</code></pre>

<p>Populating our MongoDB Configuration:</p>

<ul>
<li>MongoDB Prefers XFS File Systems when using WiredTiger.</li>
</ul>


<pre><code class="bash">$ cat &gt; /etc/mongod.conf &lt;&lt; EOF
storage:
  dbPath: /var/lib/mongodb
  journal:
    enabled: false

storage:
  mmapv1:
    smallFiles: true

systemLog:
  destination: file
  logAppend: true
  path: /var/log/mongodb/mongod.log

net:
  port: 27017
  bindIp: 0.0.0.0

replication:
  replSetName: rs0

security:
  authorization: enabled
EOF
</code></pre>

<p>Enable MongoDB On Startup and Start MongoDB:</p>

<pre><code class="bash">$ systemctl enable mongod
$ systemctl restart mongod
</code></pre>

<h2>Setup MongoDB Replica Sets:</h2>

<p>In our setup we will have 3 nodes: (mongodb-1, mongodb-2, mongodb3) From our Primary Node, connect to MongoDB and inititalize our replica set:</p>

<pre><code class="bash">$ mongo 
MongoDB shell version v3.4.7
connecting to: mongodb://127.0.0.1:27017
MongoDB server version: 3.4.7
&gt; rs.initiate()
{
        "info2" : "no configuration specified. Using a default configuration for the set",
        "me" : "mysql-1:27017",
        "ok" : 1
}
</code></pre>

<p>Next, add our 2 other MongoDB Nodes, remember <code>mongodb-3</code> is our arbiter node:</p>

<pre><code class="bash">rs0:SECONDARY&gt; rs.add("mongodb-2")
{ "ok" : 1 }
rs0:PRIMARY&gt; rs.add("mongodb-3", true)
{ "ok" : 1 }
</code></pre>

<p>Verify the Replica Set Status:</p>

<pre><code class="bash">rs0:PRIMARY&gt; rs.status()
</code></pre>

<pre><code class="json">{
        "set" : "rs0",
        "date" : ISODate("2017-08-27T13:17:42.469Z"),
        "myState" : 1,
        "term" : NumberLong(1),
        "heartbeatIntervalMillis" : NumberLong(2000),
        "optimes" : {
                "lastCommittedOpTime" : {
                        "ts" : Timestamp(0, 0),
                        "t" : NumberLong(-1)
                },
                "appliedOpTime" : {
                        "ts" : Timestamp(1503839853, 1),
                        "t" : NumberLong(1)
                },
                "durableOpTime" : {
                        "ts" : Timestamp(1503839722, 1),
                        "t" : NumberLong(-1)
                }
        },
        "members" : [
                {
                        "_id" : 0,
                        "name" : "mysql-1:27017",
                        "health" : 1,
                        "state" : 1,
                        "stateStr" : "PRIMARY",
                        "uptime" : 422,
                        "optime" : {
                                "ts" : Timestamp(1503839853, 1),
                                "t" : NumberLong(1)
                        },
                        "optimeDate" : ISODate("2017-08-27T13:17:33Z"),
                        "electionTime" : Timestamp(1503839723, 1),
                        "electionDate" : ISODate("2017-08-27T13:15:23Z"),
                        "configVersion" : 3,
                        "self" : true
                },
                {
                        "_id" : 1,
                        "name" : "mongodb-2:27017",
                        "health" : 1,
                        "state" : 2,
                        "stateStr" : "SECONDARY",
                        "uptime" : 28,
                        "optime" : {
                                "ts" : Timestamp(1503839853, 1),
                                "t" : NumberLong(1)
                        },
                        "optimeDurable" : {
                                "ts" : Timestamp(0, 0),
                                "t" : NumberLong(-1)
                        },
                        "optimeDate" : ISODate("2017-08-27T13:17:33Z"),
                        "optimeDurableDate" : ISODate("1970-01-01T00:00:00Z"),
                        "lastHeartbeat" : ISODate("2017-08-27T13:17:41.707Z"),
                        "lastHeartbeatRecv" : ISODate("2017-08-27T13:17:40.699Z"),
                        "pingMs" : NumberLong(4),
                        "syncingTo" : "mysql-1:27017",
                        "configVersion" : 3
                },
                {
                        "_id" : 2,
                        "name" : "mongodb-3:27017",
                        "health" : 1,
                        "state" : 7,
                        "stateStr" : "ARBITER",
                        "uptime" : 8,
                        "lastHeartbeat" : ISODate("2017-08-27T13:17:41.721Z"),
                        "lastHeartbeatRecv" : ISODate("2017-08-27T13:17:38.749Z"),
                        "pingMs" : NumberLong(2),
                        "configVersion" : 3
                }
        ],
        "ok" : 1
}
rs0:PRIMARY&gt; exit
bye
</code></pre>

<h2>Setup Auth:</h2>

<p>Setup Authentication on our MongoDB Database, we will create the user <code>adminuser</code> and setup the password to <code>secret</code>:</p>

<pre><code class="bash">rs0:PRIMARY&gt; use admin
switched to db admin

rs0:PRIMARY&gt; db.createUser({user: "adminuser", pwd: "secret", roles:[{role: "root", db: "admin"}]})
</code></pre>

<pre><code class="json">Successfully added user: {
        "user" : "adminuser",
        "roles" : [
                {
                        "role" : "root",
                        "db" : "admin"
                }
        ]
}
rs0:PRIMARY&gt; exit
</code></pre>

<p>Restart MongoDB:</p>

<pre><code class="bash">$ systemctl restart mongod
</code></pre>

<h2>Connect and Authenticate against MongoDB:</h2>

<p>Connect to your MongoDB Cluster with auth:</p>

<pre><code class="bash">$ mongo --host mongodb.example.com --port 27017 -u &lt;username&gt; -p --authenticationDatabase admin
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Python API for MongoDB Using PyMongo]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/08/27/using-the-python-api-for-mongodb-using-pymongo/"/>
    <updated>2017-08-27T16:19:48-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/08/27/using-the-python-api-for-mongodb-using-pymongo</id>
    <content type="html"><![CDATA[<p>Using the Python API for MongoDB using Pymongo</p>

<h2>Requirements:</h2>

<p>You will need to install the <code>pymongo</code> driver using pip:</p>

<pre><code class="bash Install Pymongo">$ pip install pymongo
</code></pre>

<p>A configuration file with your access credentials, which I like to use outside my code:</p>

<pre><code class="bash config.py">credentials = {
    "mongodb": {
        "HOSTNAME": "host.domain.com",
        "USERNAME": "username",
        "PASSWORD": "password"
    }
}
</code></pre>

<h2>Connecting to MongoDB:</h2>

<p>From the python interpreter, connect to MongoDB:</p>

<pre><code class="python ">&gt;&gt;&gt; from pymongo import MongoClient
&gt;&gt;&gt; from config import credentials as secrets
&gt;&gt;&gt; mongo_host = secrets['mongodb']['HOSTNAME']
&gt;&gt;&gt; mongo_username = secrets['mongodb']['USERNAME']
&gt;&gt;&gt; mongo_password = secrets['mongodb']['PASSWORD']
&gt;&gt;&gt; mongodb_client = MongoClient('mongodb://%s:%s@%s:27017/admin?authMechanism=SCRAM-SHA-1' % (mongo_username, mongo_password, mongo_host))
</code></pre>

<p>Find the Database that you are connected to:</p>

<pre><code class="python">&gt;&gt;&gt; mongodb_client.get_database().name
u'admin'
</code></pre>

<p>Find all the databases that is currently on your MongoDB Server:</p>

<pre><code class="python">&gt;&gt;&gt; dbs = mongodb_client.database_names()
&gt;&gt;&gt; for x in dbs:
...     print(x)
...
admin
flask_reminders
local
</code></pre>

<h2>Create a Database, Collection and Write a Document into your Database:</h2>

<p>Let&rsquo;s create a database, in my case it will be <code>ruan-test</code>, and my collection name <code>mycollection</code> and the write one item into it:</p>

<pre><code class="python">&gt;&gt;&gt; newdb = mongodb_client['ruan-test']
&gt;&gt;&gt; newdb_collection = newdb['mycollection']
&gt;&gt;&gt; doc = {"name": "frank", "surname": "jeffreys", "tags": ["person", "name"]}
&gt;&gt;&gt; doc_id = newdb_collection.insert_one(doc).inserted_id
&gt;&gt;&gt; print(doc_id)
59a319ec1f15a5088ba3a339
</code></pre>

<p>Note: you can also connect to your collection like the following</p>

<pre><code class="python">&gt;&gt;&gt; newdb_collection = mongodb_client['ruan-test']['mycollection']
</code></pre>

<p>We have inserted one item into our database, which we can verify with <code>count()</code>:</p>

<pre><code class="python">&gt;&gt;&gt; newdb_collection.find().count()
1
</code></pre>

<p>As you can see I have the value of the item&rsquo;s id, we can use that to find it from our collection:</p>

<pre><code class="python">&gt;&gt;&gt; newdb_collection.find_one({"_id": doc_id})
{u'_id': ObjectId('59a319ec1f15a5088ba3a339'), u'surname': u'jeffreys', u'name': u'frank', u'tags': [u'person', u'name']}
</code></pre>

<p>As we only have one item in our database, we can also use <code>find_one()</code> which will give us the exact same data:</p>

<pre><code class="python">&gt;&gt;&gt; newdb_collection.find_one()
{u'_id': ObjectId('59a319ec1f15a5088ba3a339'), u'surname': u'jeffreys', u'name': u'frank', u'tags': [u'person', u'name']}
</code></pre>

<p>We can write some more data to our database, but this time, lets write to a different collection:</p>

<pre><code class="python">&gt;&gt;&gt; newdb_collection2 = newdb['new-collection-2']
&gt;&gt;&gt; item = newdb_collection2.insert_one({"name": "ruby", "surname": "james"}).inserted_id
&gt;&gt;&gt; item2 = newdb_collection2.insert_one({"name": "ruby", "surname": "james"}).inserted_id
</code></pre>

<p>As we captured the items <code>_id</code>, we can view the:</p>

<pre><code class="python">&gt;&gt;&gt; print(item)
59a31acf1f15a5088ba3a33b
&gt;&gt;&gt; print(item2)
59a31a8a1f15a5088ba3a33a
</code></pre>

<h2>Query Data from MongoDB:</h2>

<p>We can then query for this data:</p>

<pre><code class="python">&gt;&gt;&gt; newdb2.find_one({"name": "ruby"})
{u'_id': ObjectId('59a31acf1f15a5088ba3a33b'), u'surname': u'james', u'name': u'ruby'}

&gt;&gt;&gt; newdb2.find_one({"_id": item})
{u'_id': ObjectId('59a31acf1f15a5088ba3a33b'), u'surname': u'james', u'name': u'ruby'}
</code></pre>

<p>Also scan for all items in the collection:</p>

<pre><code class="python">&gt;&gt;&gt; scan = newdb_collection2.find({})
&gt;&gt;&gt; for x in scan:
...     print(x)
...
{u'_id': ObjectId('59a31a8a1f15a5088ba3a33a'), u'surname': u'james', u'name': u'phillip'}
{u'_id': ObjectId('59a31acf1f15a5088ba3a33b'), u'surname': u'james', u'name': u'ruby'}

&gt;&gt;&gt; newdb2.find().count()
2
</code></pre>

<p>We can now verify that we have 2 collections in our database:</p>

<pre><code class="python">&gt;&gt;&gt; newdb.collection_names()
[u'mycollection-2', u'mycollection']
</code></pre>

<h2>Connecting to an existing Database:</h2>

<p>Let&rsquo;s connect to an existing database on our MongoDB Server:</p>

<pre><code class="python">&gt;&gt;&gt; flaskdb = mongodb_client['flask_reminders']
</code></pre>

<p>List the collections:</p>

<pre><code class="python">&gt;&gt;&gt; flaskdb.collection_names()
[u'reminders', u'usersessions']
</code></pre>

<p>Count the number of items in our <code>reminders</code> Collection:</p>

<pre><code class="python">&gt;&gt;&gt; flaskdb.reminders.find().count()
624
</code></pre>

<p>Find a Random Item:</p>

<pre><code class="python">&gt;&gt;&gt; flaskdb.reminders.find_one()
{u'category': u'Python', u'description': u'Chatbot with SQLite', u'link': u'http://rodic.fr/blog/python-chatbot-1/', u'date': u'2017-01-03', u'_id': ObjectId('586bb6dd0269103671afce32'), u'type': u'Discovered Service'}
</code></pre>

<p>Find One Item, with a Specific Value, for example the value <code>AWS</code> for our <code>Category key</code>:</p>

<pre><code class="python">&gt;&gt;&gt; flaskdb.reminders.find_one({"category": "AWS"})
{u'category': u'AWS', u'description': u'Elasticsearch Documentation Access Policies', u'link': u'http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-access-policies', u'date': u'2017-02-13', u'_id': ObjectId('58a1d45202691070616947c3'), u'type': u'Documentation'}
</code></pre>

<p>Find All Items, with a specific value:</p>

<pre><code class="python">&gt;&gt;&gt; data = flaskdb.reminders.find({"category": "AWS"})
&gt;&gt;&gt; for x in data:
...     print(x)
...
{u'category': u'Python', u'description': u'Chatbot with SQLite', u'link': u'http://rodic.fr/blog/python-chatbot-1/', u'date': u'2017-01-03', u'_id': ObjectId('586bb6dd0269103671afce32'), u'type': u'Discovered Service'}
{u'category': u'Python', u'description': u'Boto: Kinesis List', u'link': u'https://gitlab.com/rbekker87/code-examples/blob/master/kinesis/firehose/python/firehose.list.py', u'date': u'2017-01-05', u'_id': ObjectId('586dde1e0269103671afce36'), u'type': u'Stuff Done'}
</code></pre>

<h2>Deleting Databases:</h2>

<p>Cleaning up, deleting the database that we created, when a database is delete, the collections within that database also gets removed.</p>

<p>First list the databases:</p>

<pre><code>&gt;&gt;&gt; dbs = mongodb_client.database_names()
&gt;&gt;&gt; for x in dbs:
...     print(x)
...
admin
flask_reminders
local
ruan-test
</code></pre>

<p>Then delete the database that you want to delete:</p>

<pre><code class="python">&gt;&gt;&gt; mongodb_client.drop_database("ruan-test")
</code></pre>

<p>Then verify if the database was removed:</p>

<pre><code class="python">&gt;&gt;&gt; dbs = mongodb_client.database_names()
&gt;&gt;&gt; for x in dbs:
...     print(x)
...
admin
flask_reminders
local
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="http://api.mongodb.com/python/current/tutorial.html">http://api.mongodb.com/python/current/tutorial.html</a></li>
<li><a href="https://docs.mongodb.com/getting-started/python/client/">https://docs.mongodb.com/getting-started/python/client/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
