<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Decryption | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/decryption/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2019-09-04T22:46:44+02:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Encryption and Decryption With Simple Crypt Using Python]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/29/encryption-and-decryption-with-simple-crypt-using-python/"/>
    <updated>2018-04-29T16:50:46+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/29/encryption-and-decryption-with-simple-crypt-using-python</id>
    <content type="html"><![CDATA[<p>Today I wanted to encrypt sensitive information to not expose passwords, hostnames etc. I wanted to have a way to encrypt my strings with a master password and stumbled upon Simple Crypt.</p>

<script id="mNCC" language="javascript">
    medianet_width = "728";
    medianet_height = "90";
    medianet_crid = "218284798";
    medianet_versionId = "3111299"; 
  </script>


<script src="//contextual.media.net/nmedianet.js?cid=8CUD78FSV"></script>


<h2>Simple Crypt</h2>

<p>Why simple-crypt? Referenced from their <a href="https://pypi.org/project/simple-crypt/">docs</a>:</p>

<ul>
<li>Simple Crypt uses standard, well-known algorithms following the recommendations from <a href="http://www.daemonology.net/blog/2009-06-11-cryptographic-right-answers.html">this</a> link.</li>
<li>The PyCrypto library provides the algorithm implementation, where AES256 cipher is used.</li>
<li>It includes a check (an HMAC with SHA256) to warn when ciphertext data are modified.</li>
<li>It tries to make things as secure as possible when poor quality passwords are used (PBKDF2 with SHA256, a 256 bit random salt, and 100,000 rounds).</li>
<li>Using a library, rather than writing your own code, means that we have less solutions to the same problem.</li>
</ul>


<h2>Installing Simple-Crypt:</h2>

<p>From a base alpine image:</p>

<pre><code class="bash">$ apk update
$ apk add python python-dev py2-pip
$ apk add gcc g++ make libffi-dev openssl-dev
$ pip install simple-crypt
</code></pre>

<h2>Simple Examples:</h2>

<p>Two simple examples to encrypt and decrypt data with simple-crypt. We will use a password <code>sekret</code> and we will encrypt the string: <code>this is a secure message</code>:</p>

<pre><code class="python">&gt;&gt;&gt; from simplecrypt import encrypt, decrypt
&gt;&gt;&gt; password = 'sekret'
&gt;&gt;&gt; message = 'this is a secret message'
&gt;&gt;&gt; ciphertext = encrypt(password, message)
&gt;&gt;&gt;
&gt;&gt;&gt; print(ciphertext)
sc#$%^&amp;*(..........
</code></pre>

<p>Now that we have our encrypted string, lets decrypt it. First we will use the wrong password, so that you will see how the expected output should look when using a different password, than was used when it was encrypted:</p>

<pre><code class="python">&gt;&gt;&gt; print(decrypt('badpass', ciphertext))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/site-packages/simplecrypt/__init__.py", line 72, in decrypt
    _assert_hmac(hmac_key, hmac, hmac2)
  File "/usr/lib/python2.7/site-packages/simplecrypt/__init__.py", line 116, in _assert_hmac
    raise DecryptionException('Bad password or corrupt / modified data.')
simplecrypt.DecryptionException: Bad password or corrupt / modified data.
</code></pre>

<p>Now using the correct password to decrypt:</p>

<pre><code class="python">&gt;&gt;&gt; print(decrypt('sekret', ciphertext))
this is a secret message
</code></pre>

<h2>SimpleCrypt Base64 and Getpass</h2>

<p>I wanted to store the encrypted string in a database, but the ciphertext has a combination of random special characters, so I decided to encode the ciphertext with base64. And the password input will be used with the getpass module.</p>

<p>Our encryption app:</p>

<pre><code class="python encrypt.py">import sys
from simplecrypt import encrypt, decrypt
from base64 import b64encode, b64decode
from getpass import getpass

password = getpass()
message = sys.argv[1]

cipher = encrypt(password, message)
encoded_cipher = b64encode(cipher)
print(encoded_cipher)
</code></pre>

<p>Our decryption app:</p>

<pre><code class="python">import sys
from simplecrypt import encrypt, decrypt
from base64 import b64encode, b64decode
from getpass import getpass

password = getpass()
encoded_cipher = sys.argv[1]

cipher = b64decode(encoded_cipher)
plaintext = decrypt(password, cipher)
print(plaintext)
</code></pre>

<h2>Encrypt and Decrypting Data using our Scripts:</h2>

<p>Encrypting the string <code>this is a secret message</code>:</p>

<pre><code class="bash">$ python encrypt.py "this is a secret message"
Password: 
c2MAAnyfWIfOBV43vxo3sVCEYMG4C6hx69hv2Ii1JKlVHJUgBAlADJPOsD5cJO6MMI9faTDm1As/VfesvBzIe5S16mNyg2q7xfnP5iJ0RlK92vMNRbKOvNibg3M=
</code></pre>

<p>Now that we have our encoded ciphertext, lets decrypt it with the password that we encrypted it with:</p>

<pre><code class="bash">$ python decrypt.py 'c2MAAnyfWIfOBV43vxo3sVCEYMG4C6hx69hv2Ii1JKlVHJUgBAlADJPOsD5cJO6MMI9faTDm1As/VfesvBzIe5S16mNyg2q7xfnP5iJ0RlK92vMNRbKOvNibg3M='
Password: 
this is a secret message
</code></pre>

<p>This is one way of working with sensitive info that you would like to encrypt/decrypt.</p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
</feed>
