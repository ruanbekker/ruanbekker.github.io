<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Devops | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-10-31T02:09:19-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Bootstrap Nodes With Python Using Ansible]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/31/how-to-bootstrap-nodes-with-python-using-ansible/"/>
    <updated>2018-10-31T01:48:15-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/31/how-to-bootstrap-nodes-with-python-using-ansible</id>
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/rbekker/image/upload/v1531083331/ansible_tojf8l.png" alt="" /></p>

<p>As Ansible depends on Python, therefore we can bootstrap our nodes with Python using a Ansible Playbook</p>

<h2>Inventory</h2>

<p>The nodes we want to bootstrap:</p>

<pre><code class="bash inventory.ini">[new]
node-1
node-2
node-3

[new:vars]
ansible_python_interpreter=/usr/bin/python3
</code></pre>

<h2>Playbook</h2>

<p>Our playbook with what we want to do:</p>

<pre><code class="yaml bootstrap-python.yml">---
- hosts: all
  gather_facts: False

  tasks:
  - name: install python
    raw: test -e /usr/bin/python || ( apt update &amp;&amp; apt install python -y )
</code></pre>

<h2>Deploy</h2>

<p>Deploy with Ansible:</p>

<pre><code class="bash">$ ansible-playbook -i inventory.ini bootstrap-python.yml

PLAY [all] ***********************************************************************************************************************************************************************************************

TASK [install python] ************************************************************************************************************************************************************************************
changed: [node-1]
changed: [node-2]
changed: [node-3]

PLAY RECAP ***********************************************************************************************************************************************************************************************
node-1                     : ok=2    changed=2    unreachable=0    failed=0
node-2                     : ok=2    changed=2    unreachable=0    failed=0
node-3                     : ok=2    changed=2    unreachable=0    failed=0
</code></pre>

<p>This is it for this post, all posts for this tutorial will be posted under <a href="http://blog.ruanbekker.com/blog/categories/ansible-tutorial">#ansible-tutorial</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Install Packages on Remote Systems With Ansible]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/31/how-to-install-packages-on-remote-systems-with-ansible/"/>
    <updated>2018-10-31T01:28:18-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/31/how-to-install-packages-on-remote-systems-with-ansible</id>
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/rbekker/image/upload/v1531083331/ansible_tojf8l.png" alt="" /></p>

<p>We will use Ansible to deploy packages to remote systems and in this case all the remote systems are running Debian, therefore we will be using the APT package manager.</p>

<h2>Pre-Requisites:</h2>

<p>Ensure that you have installed Ansible and setup the SSH Config for your remote systems, how to do that can be found under the post: <a href="https://blog.ruanbekker.com/blog/2018/07/08/getting-started-with-ansible-on-ubuntu/">setting up ansible</a></p>

<h2>Our Inventory</h2>

<p>The inventory file that describes our hosts:</p>

<pre><code class="bash inventory.ini">[scaleway]
cluster-node-1
cluster-node-2

[hetzner]
docker-node-1
docker-node-2
docker-node-3
glusterfs-node-1
glusterfs-node-2
elasticsearch-node-1
elasticsearch-node-2

[scaleway:vars]
ansible_python_interpreter=/usr/bin/python3
location=france

[hetzner:vars]
ansible_python_interpreter=/usr/bin/python3
location=germany
</code></pre>

<h2>Playbook</h2>

<p>Our playbook that we will define that we want to deploy packages using apt to all hosts:</p>

<pre><code class="yaml packages.yml">---
- hosts: all
  tasks:
  - name: Install Packages
    apt: name= state=latest update_cache=yes
    with_items:
      - ntp
      - python
      - tcpdump
      - wget
      - openssl
      - curl
</code></pre>

<h2>Deploy</h2>

<p>Running the playbook to deploy the packages to the remote servers:</p>

<pre><code class="bash">$ ansible-playbook -i inventory.ini packages.yml

PLAY [all] ***********************************************************************************************************************************************************************************************

TASK [Gathering Facts] ***********************************************************************************************************************************************************************************
ok: [glusterfs-node-2]
ok: [glusterfs-node-1]
ok: [docker-node-1]
ok: [docker-node-2]
ok: [docker-node-3]
ok: [elasticsearch-node-1]
ok: [elasticsearch-node-2]
ok: [cluster-node-1]
ok: [cluster-node-2]

TASK [Install Packages] **********************************************************************************************************************************************************************************
changed: [docker-node-1] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [docker-node-2] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [docker-node-3] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [elasticsearch-node-1] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [glusterfs-node-1] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [glusterfs-node-2] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [elasticsearch-node-2] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
ok: [cluster-node-1] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
ok: [cluster-node-2] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])

PLAY RECAP ***********************************************************************************************************************************************************************************************
docker-node-1              : ok=2    changed=1    unreachable=0    failed=0
docker-node-2              : ok=2    changed=1    unreachable=0    failed=0
docker-node-3              : ok=2    changed=1    unreachable=0    failed=0
elasticsearch-node-1       : ok=2    changed=1    unreachable=0    failed=0
elasticsearch-node-2       : ok=2    changed=1    unreachable=0    failed=0
glusterfs-node-1           : ok=2    changed=1    unreachable=0    failed=0
glusterfs-node-2           : ok=2    changed=1    unreachable=0    failed=0
cluster-node-1             : ok=2    changed=0    unreachable=0    failed=0
cluster-node-2             : ok=2    changed=0    unreachable=0    failed=0
</code></pre>

<p>This is it for this post, all posts for this tutorial will be posted under <a href="http://blog.ruanbekker.com/blog/categories/ansible-tutorial">#ansible-tutorials</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a LAMP Stack With Ansible Using Ubuntu]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/07/08/setup-a-lamp-stack-with-ansible-using-ubuntu/"/>
    <updated>2018-07-08T17:15:15-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/07/08/setup-a-lamp-stack-with-ansible-using-ubuntu</id>
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/rbekker/image/upload/v1531083331/ansible_tojf8l.png" alt="" /></p>

<p>This is Part-2 of our <a href="http://blog.ruanbekker.com/blog/categories/ansible-tutorial">Ansible-Tutorial</a> and in this post we will cover how to setup a LAMP Stack on Ubuntu using Ansible. We will only have one host in our inventory, but this can be scaled easily by increasing the number of nodes in your invetory configuration file.</p>

<h2>Our Playbook:</h2>

<p>Our <code>lamp.yml</code> playbook:</p>

<pre><code class="yml lamp.yml">---
# Setup LAMP Stack
- hosts: newhost
  tasks:
    - name: install lamp stack
      sudo: yes
      apt: name= state=present update_cache=yes
      with_items:
        - apache2
        - mysql-server
        - php7.0
        - php7.0-mysql

    - name: start services
      service: name= state=started enabled=yes
      sudo: yes
      with_items:
        - apache2
        - mysql

    - name: deploy index.html
      sudo: yes
      copy:
        src: /tmp/index.html
        dest: /var/www/html/index.html
</code></pre>

<p>Our <code>index.html</code> that will be deployed on our servers:</p>

<pre><code class="html /tmp/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;body&gt;
    &lt;h1&gt;Deployed with Ansible&lt;/h1&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>Deploy your LAMP Stack:</h2>

<pre><code class="bash">$ ansible-playbook -i inventory.ini -u root lamp.yml

PLAY [newhost] ***************************************************************************************************************************

TASK [Gathering Facts] *******************************************************************************************************************
ok: [web-1]

TASK [install lamp stack] ****************************************************************************************************************
ok: [web-1] =&gt; (item=[u'apache2', u'mysql-server', u'php7.0', u'php7.0-mysql'])

TASK [start services] ********************************************************************************************************************
ok: [web-1] =&gt; (item=apache2)
ok: [web-1] =&gt; (item=mysql)

TASK [deploy index.html] *****************************************************************************************************************
changed: [web-1]

PLAY RECAP *******************************************************************************************************************************
web-1                      : ok=4    changed=1    unreachable=0    failed=0
</code></pre>

<p>Test our web server:</p>

<pre><code class="bash">$ curl http://10.0.0.4

Deployed with Ansible
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Ansible on Ubuntu]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/07/08/getting-started-with-ansible-on-ubuntu/"/>
    <updated>2018-07-08T15:56:06-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/07/08/getting-started-with-ansible-on-ubuntu</id>
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/rbekker/image/upload/v1531083331/ansible_tojf8l.png" alt="" /></p>

<p><a href="">Part 1</a> - This is a getting started series on Ansible.</p>

<p>The first post will be on how to setup ansible and how to reach your nodes in order to deploy software to your nodes.</p>

<h2>Install Ansible:</h2>

<p>Ansible relies on python, so we will first install the dependencies:</p>

<pre><code class="bash">$ apt update &amp;&amp; apt install python python-setuptools -y
$ easy_install pip
$ pip install ansible
</code></pre>

<h2>Populate the invetory configuration:</h2>

<p>Your invetory file will hold your host and variable information. Lets say we have 3 nodes that we want to deploy software to; <code>node-1</code>, <code>node-2</code> and <code>node-3</code>. We will group them under <code>nodes</code>. This will be saved under the a new file <code>inventory.init</code>:</p>

<pre><code class="bash inventory.ini">[nodes]
node-1
node-2
node-3
</code></pre>

<p>Next we will populate information about our node names, this will be done under our <code>~/.ssh/config</code> configuration:</p>

<p>```bash ~/.ssh/config
Host node-1
  Hostname 10.0.0.2
  User root
  IdentityFile ~/.ssh/id_rsa
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null</p>

<p>Host node-2
  Hostname 10.0.0.3
  User root
  IdentityFile ~/.ssh/id_rsa
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null</p>

<p>Host node-3
  Hostname 10.0.0.4
  User root
  IdentityFile ~/.ssh/id_rsa
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null
```</p>

<p>Now we need to generate a ssh key for our node where we will run our ansible commands from:</p>

<pre><code class="bash">$ ssh-keygen -b 2048 -f ~/.ssh/id_rsa -t rsa -q -N ""
</code></pre>

<p>Now we will copy the contents of <code>~/.ssh/id_rsa.pub</code> into our destination nodes <code>~/.ssh/authorized_keys</code> or if you have password authentication enabled, we can do <code>$ ssh-copy-id root@10.0.0.x</code> etc. Now we should be able to ssh to our nodes to <code>node-1, node-2</code> and <code>node-3</code>.</p>

<h2>Deploy Python:</h2>

<p>As Ansible requires Python, we need to bootstrap our nodes with Python. Since we are able to ssh to our nodes, we will use ansible to deploy Python to our nodes:</p>

<pre><code class="bash">$ ansible -m raw -s -a "apt update &amp;&amp; apt install python -y" -i inventory.ini nodes
</code></pre>

<p>This should succeed, then we can test our connection by running the ping module:</p>

<pre><code class="bash">$ ansible -i inventory.ini nodes -m ping
node-2 | SUCCESS =&gt; {
    "changed": false,
    "ping": "pong"
}
node-3 | SUCCESS =&gt; {
    "changed": false,
    "ping": "pong"
}
node-1 | SUCCESS =&gt; {
    "changed": false,
    "ping": "pong"
}
</code></pre>

<h2>Run a command on your nodes:</h2>

<p>Let&rsquo;s run a cat command on all the nodes:</p>

<pre><code class="bash">$ ansible -i inventory.ini nodes -a "/bin/cat /etc/hostname"
node-3 | SUCCESS | rc=0 &gt;&gt;
node-3

node-1 | SUCCESS | rc=0 &gt;&gt;
node-1

node-2 | SUCCESS | rc=0 &gt;&gt;
node-2
</code></pre>

<h2>Ansible Playbooks:</h2>

<p>Let&rsquo;s run shell commands, the traditional hello world, using the ansible-playbook command. First we need a task definition, which I will name <code>shell_command-1.yml</code>:</p>

<pre><code class="bash shell_command.yml">---
# Echo Static String
- hosts: nodes
  tasks:
  - name: echo static value
    shell: /bin/echo "hello world"
    register: echo_static
  - debug: msg=""
</code></pre>

<p>Now we have defined that our commands will be executed against the host group defined in our inventory.ini. Let&rsquo;s run our ansible playbook command:</p>

<pre><code class="bash">$ ansible-playbook -i inventory.ini shell_command.yml

PLAY [nodes] *************************************************************************************

TASK [Gathering Facts] **********************************************************************************
ok: [node-1]
ok: [node-2]
ok: [node-3]

TASK [echo static value] ********************************************************************************
changed: [node-1]
changed: [node-2]
changed: [node-3]

TASK [debug] ********************************************************************************************
ok: [node-1] =&gt; {
    "msg": "hello world"
}
ok: [node-2] =&gt; {
    "msg": "hello world"
}
ok: [node-3] =&gt; {
    "msg": "hello world"
}

PLAY RECAP **********************************************************************************************
node-1              : ok=3    changed=1    unreachable=0    failed=0
node-2              : ok=3    changed=1    unreachable=0    failed=0
node-3              : ok=3    changed=1    unreachable=0    failed=0
</code></pre>

<p>Let&rsquo;s define a variable <code>location_city = Cape Town</code> in our <code>inventory.ini</code> configuration, then we will call the variable key in our task definition:</p>

<pre><code class="bash inventory.ini">[nodes]
node-1
node-2
node-3

[nodes:vars]
location_city="Cape Town"
</code></pre>

<p>Now our task definition with our variable:</p>

<pre><code class="yml shell_command-2.yml">---
# Echo Variable
- hosts: nodes
  tasks:
  - name: echo variable value
    shell: /bin/echo ""
    register: echo
  - debug: msg=""
</code></pre>

<p>Running our ansible-playbook:</p>

<pre><code class="bash">$ ansible-playbook -i inventory.ini shell_command.yml

PLAY [nodes] **************************************************************************************************************************************************************************************

TASK [Gathering Facts] ***********************************************************************************************************************************************************************************
ok: [node-1]
ok: [node-2]
ok: [node-3]

TASK [echo variable value] *******************************************************************************************************************************************************************************
changed: [node-1]
changed: [node-2]
changed: [node-3]

TASK [debug] *********************************************************************************************************************************************************************************************
ok: [node-1] =&gt; {
    "msg": "Cape Town"
}
ok: [node-2] =&gt; {
    "msg": "Cape Town"
}
ok: [node-3] =&gt; {
    "msg": "Cape Town"
}

PLAY RECAP ***********************************************************************************************************************************************************************************************
node-1              : ok=3    changed=1    unreachable=0    failed=0
node-2              : ok=3    changed=1    unreachable=0    failed=0
node-3              : ok=3    changed=1    unreachable=0    failed=0
</code></pre>

<p>This is it for this post, all posts for this tutorial will be posted under <a href="http://blog.ruanbekker.com/blog/categories/ansible-tutorial">#ansible-tutorials</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Docker Swarm Using Ansible]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/06/14/deploy-docker-swarm-using-ansible/"/>
    <updated>2018-06-14T06:05:46-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/06/14/deploy-docker-swarm-using-ansible</id>
    <content type="html"><![CDATA[<p><img src="http://obj-cache.cloud.ruanbekker.com/docker-logo.png" alt="" /></p>

<p>In this setup we will use Ansible to Deploy Docker Swarm.</p>

<p>With this setup, I have a client node, which will be my jump box, as it will be used to ssh with the docker user to my swarm nodes with passwordless ssh access.</p>

<p>The repository for the source code can be found on my <a href="https://github.com/ruanbekker/ansible-docker-swarm">Github Repository</a></p>

<h2>Pre-Check</h2>

<p>Hosts file:</p>

<pre><code>$ cat /etc/hosts
10.0.8.2 client
192.168.1.10 swarm-manager
192.168.1.11 swarm-worker-1
192.168.1.12 swarm-worker-2
</code></pre>

<p>SSH Config:</p>

<pre><code>$ cat ~/.ssh/config 
Host client
  Hostname client
  User root
  IdentityFile /tmp/key.pem
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null

Host swarm-manager
  Hostname swarm-manager
  User root
  IdentityFile /tmp/key.pem
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null

Host swarm-worker-1
  Hostname swarm-worker-1
  User root
  IdentityFile /tmp/key.pem
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null

Host swarm-worker-2
  Hostname swarm-worker-2
  User root
  IdentityFile /tmp/key.pem
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null
</code></pre>

<p>Install Ansible:</p>

<pre><code>$ apt install python-setuptools -y
$ easy_install pip
$ pip install ansible
</code></pre>

<p>Ensure passwordless ssh is working:</p>

<pre><code>$ ansible -i inventory.ini -u root -m ping all
client | SUCCESS =&gt; {
    "changed": false, 
    "ping": "pong"
}
swarm-manager | SUCCESS =&gt; {
    "changed": false, 
    "ping": "pong"
}
swarm-worker-2 | SUCCESS =&gt; {
    "changed": false, 
    "ping": "pong"
}
swarm-worker-1 | SUCCESS =&gt; {
    "changed": false, 
    "ping": "pong"
}
</code></pre>

<h2>Deploy Docker Swarm</h2>

<pre><code>$ ansible-playbook -i inventory.ini -u root deploy-swarm.yml 
PLAY RECAP 

client                     : ok=11   changed=3    unreachable=0    failed=0   
swarm-manager              : ok=18   changed=4    unreachable=0    failed=0   
swarm-worker-1             : ok=15   changed=1    unreachable=0    failed=0   
swarm-worker-2             : ok=15   changed=1    unreachable=0    failed=0   
</code></pre>

<p>SSH to the Swarm Manager and List the Nodes:</p>

<pre><code>$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
0ead0jshzkpyrw7livudrzq9o *   swarm-manager       Ready               Active              Leader              18.03.1-ce
iwyp6t3wcjdww0r797kwwkvvy     swarm-worker-1      Ready               Active                                  18.03.1-ce
ytcc86ixi0kuuw5mq5xxqamt1     swarm-worker-2      Ready               Active                                  18.03.1-ce
</code></pre>

<h2>Test Application on Swarm</h2>

<p>Create a Nginx Demo Service:</p>

<pre><code>$ docker network create --driver overlay appnet
$ docker service create --name nginx --publish 80:80 --network appnet --replicas 6 nginx
$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
k3vwvhmiqbfk        nginx               replicated          6/6                 nginx:latest        *:80-&gt;80/tcp

$ docker service ps nginx
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS
tspsypgis3qe        nginx.1             nginx:latest        swarm-manager       Running             Running 34 seconds ago                       
g2f0ytwb2jjg        nginx.2             nginx:latest        swarm-worker-1      Running             Running 34 seconds ago                       
clcmew8bcvom        nginx.3             nginx:latest        swarm-manager       Running             Running 34 seconds ago                       
q293r8zwu692        nginx.4             nginx:latest        swarm-worker-2      Running             Running 34 seconds ago                       
sv7bqa5e08zw        nginx.5             nginx:latest        swarm-worker-1      Running             Running 34 seconds ago                       
r7qg9nk0a9o2        nginx.6             nginx:latest        swarm-worker-2      Running             Running 34 seconds ago   
</code></pre>

<p>Test the Application:</p>

<pre><code>$ curl -i http://192.168.1.10
HTTP/1.1 200 OK
Server: nginx/1.15.0
Date: Thu, 14 Jun 2018 10:01:34 GMT
Content-Type: text/html
Content-Length: 612
Last-Modified: Tue, 05 Jun 2018 12:00:18 GMT
Connection: keep-alive
ETag: "5b167b52-264"
Accept-Ranges: bytes
</code></pre>

<p>Delete the Service:</p>

<pre><code>
$ docker service rm nginx
nginx
</code></pre>

<h2>Delete the Swarm:</h2>

<pre><code>$ ansible-playbook -i inventory.ini -u root delete-swarm.yml 

PLAY RECAP 
swarm-manager              : ok=2    changed=1    unreachable=0    failed=0   
swarm-worker-1             : ok=2    changed=1    unreachable=0    failed=0   
swarm-worker-2             : ok=2    changed=1    unreachable=0    failed=0   
</code></pre>

<p>Ensure the Nodes is removed from the Swarm, SSH to your Swarm Manager:</p>

<pre><code>$ docker node ls
Error response from daemon: This node is not a swarm manager. Use "docker swarm init" or "docker swarm join" to connect this node to swarm and try again.
</code></pre>
]]></content>
  </entry>
  
</feed>
