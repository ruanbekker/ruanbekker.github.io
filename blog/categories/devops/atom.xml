<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Devops | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2017-09-04T14:19:03-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started With Chef: Working With Files]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/04/getting-started-with-chef-working-with-files/"/>
    <updated>2017-09-04T14:06:01-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/04/getting-started-with-chef-working-with-files</id>
    <content type="html"><![CDATA[<p>Chef: Infrastructure as Code, Automation, Configuration Management, having a service that can do that, and especially having something in place that knows what the desired state of your configurations/applications should be is definitely a plus.</p>

<p>I stumbled upon <a href="https://learn.chef.io">learn.chef.io</a> which is a great resource for learning chef, as I am learning Chef at this moment.</p>

<p>The Components of Chef consists of:</p>

<ul>
<li>Chef Workstation (ChefDK enables you to use the tools locally to test before pushing your code to the Chef Server)</li>
<li>Chef Server (Central Repository for your Cookbooks and info of every node Chef Manages)</li>
<li>Chef Client (a Node that is Managed by the Chef Server)</li>
</ul>


<p>In this post we will install the Chef Development Kit, and work with the chef-client in local-mode to create, update and delete files using the <code>file</code> resource type.</p>

<h2>Getting Started with Chef: Installation:</h2>

<p>Installing the Chef Development Kit:</p>

<pre><code class="bash">$ sudo apt-get update &amp;&amp; apt-get upgrade -y
$ sudo apt-get install curl git -y
$ curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P chefdk -c stable -v 2.0.28
</code></pre>

<h2>Configure a Resource:</h2>

<p>Using <code>chef-client</code> in local mode, we will use the <code>resource: file</code> to create a recipe that will create our <code>motd</code> file</p>

<pre><code class="ruby hello.rb">file '/tmp/motd' do
  content 'hello world'
end
</code></pre>

<p>Running chef client against our recipe in local-mode:</p>

<pre><code class="bash">$ chef-client --local-mode hello.rb
..
Converging 1 resources
Recipe: @recipe_files::/root/chef-repo/hello.rb
  * file[/tmp/motd] action create
    - create new file /tmp/motd
    - update content in file /tmp/motd from none to b94d27
    --- /tmp/motd       2017-09-04 16:18:19.265699403 +0000
    +++ /tmp/.chef-motd20170904-4500-54fh8w     2017-09-04 16:18:19.265699403 +0000
    @@ -1 +1,2 @@
    +hello world
</code></pre>

<p>Verify the Content:</p>

<pre><code class="bash">$ cat /tmp/motd
hello world
</code></pre>

<p>Running the command again will do nothing, as the content is in its desired state:</p>

<pre><code class="bash">$ chef-client --local-mode hello.rb
..
Converging 1 resources
Recipe: @recipe_files::/root/chef-repo/hello.rb
  * file[/tmp/motd] action create (up to date)
</code></pre>

<p>Changing our recipe by replacing the word <code>world</code> with <code>chef</code>, we will find that the content of our file will be updated:</p>

<pre><code class="bash">$ chef-client --local-mode hello.rb
..
Converging 1 resources
Recipe: @recipe_files::/root/chef-repo/hello.rb
  * file[/tmp/motd] action create
    - update content in file /tmp/motd from b94d27 to c38c60
    --- /tmp/motd       2017-09-04 16:18:19.265699403 +0000
    +++ /tmp/.chef-motd20170904-4903-wuigr      2017-09-04 16:23:21.379649145 +0000
    @@ -1,2 +1,2 @@
    -hello world
    +hello chef
</code></pre>

<p>Let&rsquo;s overwrite the content of our <code>motd</code> file manually:</p>

<pre><code class="bash">$ echo 'hello robots' &gt; /tmp/motd
</code></pre>

<p>Running Chef Client against our recipe again, allows Chef to restore our content to the desired state that is specified in our recipe:</p>

<pre><code class="bash">$ chef-client --local-mode hello.rb
..
Converging 1 resources
Recipe: @recipe_files::/root/chef-repo/hello.rb
  * file[/tmp/motd] action create
    - update content in file /tmp/motd from 548078 to c38c60
    --- /tmp/motd       2017-09-04 16:24:29.308286834 +0000
    +++ /tmp/.chef-motd20170904-5103-z16ssa     2017-09-04 16:24:42.528021632 +0000
    @@ -1,2 +1,2 @@
    -hello robots
    +hello chef
</code></pre>

<p>Deleting a file from our recipe:</p>

<pre><code class="ruby destroy.rb">file '/tmp/motd' do
  action :delete
end
</code></pre>

<p>Now using chef client to execute against this file will remove our file:</p>

<pre><code class="bash">$ chef-client --local-mode destroy.rb
Recipe: @recipe_files::/root/chef-repo/destroy.rb
  * file[/tmp/motd] action delete
    - delete file /tmp/motd
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://docs.chef.io/resource_file.html">https://docs.chef.io/resource_file.html</a></li>
<li><a href="https://docs.chef.io/recipes.html">https://docs.chef.io/recipes.html</a></li>
<li><a href="https://learn.chef.io">https://learn.chef.io</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
