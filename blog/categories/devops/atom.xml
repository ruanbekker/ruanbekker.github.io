<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Devops | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2019-02-23T07:25:24-05:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Concourse Pipeline With Resources Tutorial]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/02/14/concourse-pipeline-with-resources-tutorial/"/>
    <updated>2019-02-14T15:58:10-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/02/14/concourse-pipeline-with-resources-tutorial</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/gzkdu9.jpg?nocache=1511644783495" alt="" /></p>

<p>In Concourse, Resources refer to external resource types such as <code>s3</code>, <code>github</code> etc.</p>

<p>So for example, we can run a pipeline which pulls data from github, such as cloning a repository, so in other words the data that was cloned from the github repository is within the container where your tasks will be executed.</p>

<h2>Concourse Github Resourse Example</h2>

<p>In this tutorial we will use the github resource type, in conjunction with a task that will execute a script, where the script will be inside the github repository.</p>

<p>Our pipeline as <code>pipeline.yml</code>:</p>

<pre><code class="yaml">resources:
- name: concourse-tutorial
  type: git
  source:
    uri: https://github.com/ruanbekker/concourse-tutorial.git
    branch: master

jobs:
- name: job-hello-world
  public: true
  plan:
  - get: concourse-tutorial
  - task: hello-world
    file: concourse-tutorial/00-basic-tasks/task_hello_world.yml
</code></pre>

<p>You can head over to <a href="https://raw.githubusercontent.com/ruanbekker/concourse-tutorial/master/00-basic-tasks/task_hello_world.yml">hello-world</a> task on github to see the task, but all it does is running a <code>uname -a</code></p>

<p>So our job has a task that will call the action defined in our <code>task_hello_world.yml</code> which retrieves it from the <code>get</code> step, as you can see it&rsquo;s the <code>concourse-tutorial</code> resource, which is defined under the resources section as a git resource type.</p>

<p>Set the pipeline:</p>

<pre><code class="bash">$ fly -t ci sp -c pipeline.yml -p 04-hello-world

apply configuration? [yN]: y
pipeline created!
</code></pre>

<p>Unpause the pipeline:</p>

<pre><code class="bash">$ fly -t ci up -p 04-hello-world
unpaused '04-hello-world'
</code></pre>

<p>Trigger the job (trigger is off; default)</p>

<pre><code class="bash">$ fly -t ci tj -j 04-hello-world/job-hello-world --watch
started 04-hello-world/job-hello-world #4

initializing
running uname -a
Linux 6a91b808-c488-4e3c-7b51-404f73405c31 4.9.0-8-amd64 #1 SMP Debian 4.9.110-3+deb9u4 (2018-08-21) x86_64 GNU/Linux
succeeded
</code></pre>

<p>So this job cloned the github repository, called the task file which calls the bash script from th github repository to run <code>uname -a</code></p>

<p>For my other content on concourse, have a look at the <a href="https://blog.ruanbekker.com/blog/categories/concourse/">concourse</a> category.</p>

<h2>Thank You</h2>

<p>Please feel free to show support by, <strong>sharing</strong> this post, making a <strong>donation</strong>, <strong>subscribing</strong> or <strong>reach out to me</strong> if you want me to demo and write up on any specific tech topic.</p>

<center>
<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
<input type="hidden" name="cmd" value="_s-xclick" />
<input type="hidden" name="hosted_button_id" value="W7CBGYTCWGANQ" />
<input type="image" src="https://user-images.githubusercontent.com/567298/49853901-461c3700-fdf1-11e8-9d80-8a424a3173af.png" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
<img alt="" border="0" src="https://www.paypal.com/en_ZA/i/scr/pixel.gif" width="1" height="1" />
</form>
</center>


<p><br></p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concourse Tasks and Inputs Tutorial]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/02/12/concourse-tasks-and-inputs-tutorial/"/>
    <updated>2019-02-12T14:57:27-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/02/12/concourse-tasks-and-inputs-tutorial</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/gzkdu9.jpg?nocache=1511644783495" alt="" /></p>

<p>In this tutorial I will show you how to execute task scripts and using task inputs to have the ability to pass data to concourse for processing.</p>

<p>For my other content on concourse, have a look at the <a href="https://i.snag.gy/gzkdu9.jpg?nocache=1511644783495">concourse</a> category.</p>

<h2>Task Inputs</h2>

<p>First, let&rsquo;s run a task on concourse that does not rely on any inputs.</p>

<pre><code class="yaml no_inputs.yml">platform: linux

image_resource:
  type: docker-image
  source: {repository: busybox}

run:
  path: uname
args: ["-a"]
</code></pre>

<p>Running execute with the configuration from above:</p>

<pre><code class="bash">$ fly -t ci e -c no_inputs.yml

executing build 37 at http://10.20.30.40/builds/37
initializing
running uname -a
Linux 2fd4e261-a708-4e15-4a4a-2bc50221a664 4.9.0-8-amd64 #1 SMP Debian 4.9.110-3+deb9u4 (2018-08-21) x86_64 GNU/Linux
succeeded
</code></pre>

<p>As you can see we have executed the command <code>uname -a</code> on one of the containers in Concourse.</p>

<h2>Tasks Inputs: Specify Path</h2>

<p>Now lets say, we have data that needs to be transferred to the container where we are running our tasks. For that we are using inputs.</p>

<p>In this example, we will set the input parameter in our task definition, and override the path with the cli. We will create a couple of files in a folder, then list them in the container where the task is running.</p>

<p>Creating the data:</p>

<pre><code class="bash">$ mkdir my-data-folder
$ touch my-data-folder/test1.txt my-data-folder/test2.txt
</code></pre>

<p>Our task definition:</p>

<pre><code class="yaml inputs_required.yml">platform: linux

image_resource:
  type: docker-image
  source: {repository: busybox}

inputs:
- name: my-input

run:
  path: ls
  args: ['-alR']
</code></pre>

<p>As you can see our input name is called <code>my-input</code> and we will use the cli to map the local folder <code>my-data-folder</code> to the parameter name:</p>

<pre><code class="bash">$ fly -t ci e -c inputs_required.yml -i my-input=./my-data-folder/

executing build 32 at http://10.20.30.40/builds/32
initializing
my-input: 262.13 KiB/s 0s
running ls -alR
.:
total 0
drwxr-xr-x    1 root     root            16 Feb 10 08:53 .
drwxr-xr-x    1 root     root            16 Feb 10 08:53 ..
drwxr-xr-x    1 root     root            36 Feb 10 08:53 my-input

./my-input:
total 0
drwxr-xr-x    1 root     root            36 Feb 10 08:53 .
drwxr-xr-x    1 root     root            16 Feb 10 08:53 ..
-rw-r--r--    1 501      staff            0 Feb 10 08:52 test1.txt
-rw-r--r--    1 501      staff            0 Feb 10 08:52 test2.txt
succeeded
</code></pre>

<p>As you can see from the above output, the folder was uploaded and placed inside the container where we ran our task.</p>

<h2>Task Inputs: Parent Directory</h2>

<p>Then we can use parent directories. Running a task that relies on the input path which will be our current working directory. Note: the input name should be the same as the current working directory</p>

<p>The input name will be the only thing that differs, which will look like:</p>

<pre><code>inputs:
- name: my-data-folder
</code></pre>

<p>Running the task:</p>

<pre><code class="bash">$ cd my-data-folder
$ fly -t ci e -c ../input_parent_dir.yml

executing build 35 at http://10.20.30.40/builds/35
initializing
my-data-folder: 395.85 KiB/s 0s
running ls -alR
.:
total 0
drwxr-xr-x    1 root     root            38 Feb 10 09:17 .
drwxr-xr-x    1 root     root            16 Feb 10 09:17 ..
drwxr-xr-x    1 root     root            18 Feb 10 09:17 my-data-folder

./my-data-folder:
total 0
drwxr-xr-x    1 root     root            18 Feb 10 09:17 .
drwxr-xr-x    1 root     root            38 Feb 10 09:17 ..
-rw-r--r--    1 501      staff            0 Feb 10 09:15 test1.txt
-rw-r--r--    1 501      staff            0 Feb 10 09:15 test2.txt
succeeded 
</code></pre>

<p>The source code for this can be found at <a href="https://github.com/ruanbekker/concourse-tutorial/tree/master/02-task-inputs">https://github.com/ruanbekker/concourse-tutorial/tree/master/02-task-inputs</a></p>

<h2>Task Scripts:</h2>

<p>In conjunction with inputs, we can let our task configuration reference a script that we want to execute, and using inputs, we can upload the current working directory to concourse, so then the container has context about the data that it needs.</p>

<p>Our task configuration <code>task_show_hostname.yml</code></p>

<pre><code class="bash">platform: linux

image_resource:
  type: docker-image
  source: {repository: busybox}

inputs:
- name: 03-task-scripts

run:
  path: ./03-task-scripts/task_show_hostname.sh
</code></pre>

<p>Our executable script <code>03-task-scripts/task_show_hostname.sh</code></p>

<pre><code class="bash">#!/bin/sh

get_hostname=$(hostname)
echo "Hostname is: ${get_hostname}"
</code></pre>

<p>Make sure to apply the executable permissions to the script:</p>

<pre><code class="bash">$ chmod +x 03-task-scripts/task_show_hostname.sh
</code></pre>

<p>With this configuration, it uploads the current working directory to concourse, and the data inside the directory gets placed on the container&rsquo;s working directory: 03-task-scripts, which is the name of the input.</p>

<pre><code class="bash">$ fly -t ci e -c 03-task-scripts/task_show_hostname.yml

executing build 39 at http://10.20.30.40/builds/39
initializing
03-task-scripts: 347.15 KiB/s 0s
running ./03-task-scripts/task_show_hostname.sh
Hostname is: 3ccb3c28-d452-4068-5ea1-101153803d93
succeeded
</code></pre>

<p>The source code for this example can be found at <a href="https://github.com/ruanbekker/concourse-tutorial/tree/master/03-task-scripts">https://github.com/ruanbekker/concourse-tutorial/tree/master/03-task-scripts</a></p>

<p>That&rsquo;s it for Task Inputs and Task Scripts on Concourse, please feel free to have a look at my other content about <a href="http://blog.ruanbekker.com/blog/categories/concourse/">Concourse</a></p>

<h2>Thank You</h2>

<p>Please feel free to show support by, <strong>sharing</strong> this post, making a <strong>donation</strong>, <strong>subscribing</strong> or <strong>reach out to me</strong> if you want me to demo and write up on any specific tech topic.</p>

<center>
<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
<input type="hidden" name="cmd" value="_s-xclick" />
<input type="hidden" name="hosted_button_id" value="W7CBGYTCWGANQ" />
<input type="image" src="https://user-images.githubusercontent.com/567298/49853901-461c3700-fdf1-11e8-9d80-8a424a3173af.png" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
<img alt="" border="0" src="https://www.paypal.com/en_ZA/i/scr/pixel.gif" width="1" height="1" />
</form>
</center>


<p><br></p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial on Using Gitlab CI/CD Pipelines to Deploy Your Python Flask Restful API With Postgres on Heroku]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/01/05/tutorial-on-using-gitlab-cicd-pipelines-to-deploy-your-python-flask-restful-api-with-postgres-on-heroku/"/>
    <updated>2019-01-05T10:27:31-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/01/05/tutorial-on-using-gitlab-cicd-pipelines-to-deploy-your-python-flask-restful-api-with-postgres-on-heroku</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/50217968-0629f680-0393-11e9-8387-ad69937eb891.png" alt="" /></p>

<p>Today we will build a Restful API using Python Flask, SQLAlchemy using Postgres as our Database, testing using Python Unittest, a CI/CD Pipeline on Gitlab, and Deployment to Heroku.</p>

<p>From our previous post, we demonstrated setting up a <a href="https://blog.ruanbekker.com/blog/2018/12/20/setup-a-gitlab-runner-on-your-own-server-to-run-your-jobs-that-gets-triggered-from-gitlab-ci/">Custom Gitlab Runner on Your Own Server for  Gitlab CI</a>.</p>

<h2>Heroku</h2>

<p>If you don&rsquo;t have an account already, <a href="https://dashboard.heroku.com/account">Heroku</a> offer&rsquo;s 5 free applications in their free tier account. Once you have created your account, create 2 applications. I named mine flask-api-staging and flask-api-prod.</p>

<p>You can create the applications via cli or the ui, from the ui it will look more or less like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/50719120-69f53480-10a0-11e9-8720-aa3dc007b6fc.png" alt="" /></p>

<p>Select an app name and check if the name is available then select create. Note down the name and config as we will use it in our <code>.gitlab-ci.yml</code> config:</p>

<p><img src="https://user-images.githubusercontent.com/567298/50719134-8db87a80-10a0-11e9-80f4-cccd9a86752f.png" alt="" /></p>

<h2>Heroku API Key</h2>

<p>To allow the deployment of applications to Heroku from Gitlab, we need to generate a API Key on Heroku and save the config in Gitlab.</p>

<p>Head over to your <a href="https://dashboard.heroku.com/account">Heroku Dashboard</a>, select Account Settings, scroll to the API Key section and generate a API Key.</p>

<p>Head over to your Gitlab Repository, select Settings, CI/CD, then select Variables enter the Key: HEROKU_API_KEY and the Secret of the API Key into the Value and select Save Variable.</p>

<p>We will reference this variable from our deploy steps.</p>

<h2>Heroku Postgres Add-on</h2>

<p>Heroku offers a free Postgres Add-On, to activate: Select your application, select Resources, search for the Add-on <code>Heroku Postgres</code>, select and select the Hobby Dev Free version and select provision.</p>

<h2>Our Application Code</h2>

<p>Clone your repository then let&rsquo;s start by creating our Flask API. Note this is more on Gitlab CI/CD than going into detail into the Flask Application.</p>

<p>Create the files that we will need:</p>

<pre><code class="bash">$ touch app.py config.cfg requirements.txt tests.py Procfile
</code></pre>

<p>Let&rsquo;s start by populating our configuration for our flask app: <code>config.cfg</code></p>

<pre><code class="bash">#SQLALCHEMY_DATABASE_URI='sqlite:///database.db'
SQLALCHEMY_TRACK_MODIFICATIONS=False
</code></pre>

<p>Our Flask Application: <code>app.py</code></p>

<p>Note that we are using flask-heroku, with this package Heroku will automatically discover your configuration for your database using environment variables. So if you have a postgres add-on, you don&rsquo;t need to specify the location of your database.</p>

<p>If you want to use sqlite, you can remove the heroku instantiation and uncomment the <code>SQLALCHEMY_DATABASE_URI</code> property in your <code>config.cfg</code></p>

<pre><code class="python">from flask import Flask, jsonify, request
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow
from flask_heroku import Heroku
from passlib.hash import sha256_crypt
from datetime import datetime

app = Flask(__name__)
app.config.from_pyfile('config.cfg')
heroku = Heroku(app)
db = SQLAlchemy(app)
ma = Marshmallow(app)

## --Database Models--
class Member(db.Model):
    __tablename__ = 'members'

    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    email = db.Column(db.String(255), unique=True, nullable=False)
    username = db.Column(db.String(50), unique=True)
    password_hash = db.Column(db.String(100))
    firstname = db.Column(db.String(50), unique=False)
    lastname = db.Column(db.String(50), unique=False)
    registered_on = db.Column(db.DateTime, nullable=False)

class MemberSchema(ma.ModelSchema):
    class Meta:
        model = Member
        fields = ('id', 'username', 'email')

member_schema = MemberSchema(strict=True, only=('id', 'username'))
members_schema = MemberSchema(strict=True, many=True)

## --Views--
@app.route('/')
def index():
    return jsonify({'message': 'ok'}), 200

# list users
@app.route('/api/user', methods=['GET'])
def list_users():
    all_users = Member.query.all()
    result = members_schema.dump(all_users)
    return jsonify(result.data)

# get user
@app.route('/api/user/&lt;int:id&gt;', methods=['GET'])
def get_user(id):
    user = Member.query.get(id)
    result = member_schema.dump(user)
    return jsonify(result.data)

# add user
@app.route('/api/user', methods=['POST'])
def add_user():
    email = request.json['email']
    username = request.json['username']
    password_hash = sha256_crypt.encrypt(request.json['password'])
    firstname = request.json['firstname']
    lastname = request.json['lastname']
    new_user = Member(email=email, username=username, password_hash=password_hash, firstname=firstname, lastname=lastname, registered_on=datetime.utcnow())
    try:
        db.session.add(new_user)
        db.session.commit()
        result = member_schema.dump(Member.query.get(new_user.id))
        return jsonify({'member': result.data})
    except:
        db.session.rollback()
        result = {'message': 'error'}
        return jsonify(result)

# update user
@app.route('/api/user/&lt;int:id&gt;', methods=['PUT'])
def update_user(id):
    user = Member.query.get(id)
    username = request.json['username']
    email = request.json['email']
    user.email = email
    user.username = username
    db.session.commit()
    return member_schema.jsonify(user)

# delete user
@app.route('/api/user/&lt;int:id&gt;', methods=['DELETE'])
def delete_user(id):
    user = Member.query.get(id)
    db.session.delete(user)
    db.session.commit()
    return jsonify({'message': '{} has been deleted'.format(user.username)})

if __name__ == '__main__':
    app.run()
</code></pre>

<p>Our tests: <code>tests.py</code></p>

<pre><code class="python">import unittest
import app as myapi
import json
import sys

class TestFlaskApi(unittest.TestCase):
    def setUp(self):
        self.app = myapi.app.test_client()

    def test_hello_world(self):
        response = self.app.get('/')
        self.assertEqual(
            json.loads(response.get_data().decode(sys.getdefaultencoding())),
            {"message": "ok"}
        )

if __name__ == '__main__':
    unittest.main()
</code></pre>

<p>Our requirements file: <code>requirements.txt</code></p>

<pre><code>Click==7.0
Flask==1.0.2
flask-heroku==0.1.9
flask-marshmallow==0.9.0
Flask-SQLAlchemy==2.3.2
gunicorn==19.9.0
itsdangerous==1.1.0
Jinja2==2.10
MarkupSafe==1.1.0
marshmallow==2.17.0
marshmallow-sqlalchemy==0.15.0
passlib==1.7.1
psycopg2-binary==2.7.6.1
six==1.12.0
SQLAlchemy==1.2.15
Werkzeug==0.14.1
</code></pre>

<p>Our Procfile for Heroku: <code>Procfile</code></p>

<pre><code>web: gunicorn app:app
</code></pre>

<p>And lastly, our gitlab-ci configuration which will include our build, test and deploy steps. As soon as a commit to master is received the pipeline will be acticated. Note that our production deploy step is a manual trigger.</p>

<p>Our config for <code>.gitlab-ci.yml</code>. Note to replace your Heroku app names.</p>

<pre><code class="yaml">image: rbekker87/build-tools:latest

stages:
  - ver
  - init
  - tests
  - deploy

ver:
  stage: ver
  script:
    - python --version
    - whoami

init:
  stage: init
  script:
    - apk add postgresql-dev --no-cache
    - pip install psycopg2-binary
    - pip install -r requirements.txt

run_tests:
  stage: tests
  script:
    - apk add postgresql-dev --no-cache
    - pip install psycopg2-binary
    - pip install -r requirements.txt
    - python tests.py

deploy_staging:
  stage: deploy
  script:
    - git remote add heroku https://heroku:$HEROKU_API_KEY@git.heroku.com/flask-api-staging.git
    - git push heroku master
    - echo "Deployed to Staging Server https://flask-api-staging.herokuapp.com"
  environment:
    name: staging
    url: https://flask-api-staging.herokuapp.com/
  only:
    - master

deploy_production:
  stage: deploy
  script:
    - git remote add heroku https://heroku:$HEROKU_API_KEY@git.heroku.com/flask-api-prod.git
    - git push heroku master
    - echo "Deployed to Production Server https://flask-api-prod.herokuapp.com"
  environment:
    name: production
    url: https://flask-api-prod.herokuapp.com/
  when: manual
  only:
    - master
</code></pre>

<h2>Send to Gitlab:</h2>

<p>Once everything is populated, stage your changes, commit your work and push to master:</p>

<pre><code class="bash">$ git add .
$ git commit -m "blogpost demo commit"
$ git push origin master
</code></pre>

<p>Once the code has been pushed to master, gitlab will pick it up and trigger the pipeline to run.</p>

<h2>Gitlab Pipelines</h2>

<p>Head over to Gitlab, select CI/CD -> Pipelines, you should see a running pipeline, select it, then you should see the overview of all your jobs:</p>

<p><img src="https://user-images.githubusercontent.com/567298/50728734-83958b00-1137-11e9-8c6f-4f7d9aaab46d.png" alt="" /></p>

<p>If everything has passed you should see the <code>Passed</code> status as shown above.</p>

<p>You will notice that the staging environment has been deployed. Now you can do some testing and when you are happy with it, you can select the play button which will deploy to production on the pipelines dashboard.</p>

<h2>Creating the Tables on Postgres</h2>

<p>Before we can interact with our API, we need to provision the postgres tables from the database models that we wrote in our application.</p>

<p>Open up a Python shell on Heroku and initialize the tables:</p>

<pre><code class="bash">$ heroku run python -a flask-api-prod
&gt;&gt;&gt; from app import db
&gt;&gt;&gt; db.create_all()
&gt;&gt;&gt; exit()
</code></pre>

<h2>Testing the API:</h2>

<p>Now that everything is up and running, its time to test our API.</p>

<p>List the users:</p>

<pre><code class="bash">$ curl https://flask-api-staging.herokuapp.com/api/user
[]
</code></pre>

<p>Create a User:</p>

<pre><code class="bash">$ curl -H 'Content-Type: application/json' -XPOST https://flask-api-staging.herokuapp.com/api/user -d '{"username": "ruanb", "password": "pass", "email": "r@r.com", "firstname": "ruan", "lastname": "bekker"}'
{
  "member": {
    "id": 1,
    "username": "ruanb"
  }
}
</code></pre>

<p>List Users:</p>

<pre><code class="bash">$ curl -H 'Content-Type: application/json' -XGET https://flask-api-staging.herokuapp.com/api/user
[
  {
    "email": "ruan@r.com",
    "id": 1,
    "username": "ruanb"
  }
]
</code></pre>

<p>Update a User&rsquo;s email address:</p>

<pre><code class="bash">$ curl -H 'Content-Type: application/json' -XPUT https://flask-api-staging.herokuapp.com/api/user/1 -d '{"username": "ruanb", "email": "ruan@r.com"}'
{
  "id": 1,
  "username": "ruanb"
}
</code></pre>

<p>Retrieve a single user:</p>

<pre><code class="bash">$ curl -H 'Content-Type: application/json' -XGET https://flask-api-staging.herokuapp.com/api/user/1
{
  "email": "ruan@r.com",
  "id": 1,
  "username": "ruanb"
}
</code></pre>

<p>Delete User:</p>

<pre><code class="bash">$ curl -H 'Content-Type: application/json' -XDELETE https://flask-api-staging.herokuapp.com/api/user/1
{
  "message": "ruanb has been deleted"
}
</code></pre>

<h2>Troubleshooting</h2>

<p>I had some issues with Heroku, where one was after I deployed, I received this error in Heroku&rsquo;s logs:</p>

<pre><code class="bash">code=H14 desc="No web processes running" method=GET path="/"
</code></pre>

<p>I just had to scale my web dyno to 1:</p>

<pre><code class="bash">$ heroku ps:scale web=1 -a flask-api-staging
Scaling dynos... done, now running web at 1:Free
</code></pre>

<p>Have a look at their <a href="https://devcenter.heroku.com/articles/heroku-cli">documentation</a> if you need help with the heroku cli.</p>

<p>And to troubleshoot within the dyno, you can exec into it by running this:</p>

<pre><code>heroku ps:exec -a flask-api-staging
</code></pre>

<p>I seriously dig Gitlab-CI and with this demonstration you can see how easy it is to setup a CI/CD Pipeline on Gitlab and Deploy them to Heroku.</p>

<h2>Resources:</h2>

<p>The code for this demo is available at: <a href="https://gitlab.com/rbekker87/demo-cicd-flask-heroku">gitlab.com/rbekker87/demo-cicd-flask-heroku</a></p>

<p>For more blog posts on Gitlab, have a look at my <a href="https://blog.ruanbekker.com/blog/categories/gitlab/">gitlab</a> category on <a href="https://blog.ruanbekker.com/">blog.ruanbekker.com</a></p>

<h2>Thank You</h2>

<p>Please feel free to show support by, <strong>sharing</strong> this post, making a <strong>donation</strong>, <strong>subscribing</strong> or <strong>reach out to me</strong> if you want me to demo and write up on any specific tech topic.</p>

<center>
<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
<input type="hidden" name="cmd" value="_s-xclick" />
<input type="hidden" name="hosted_button_id" value="W7CBGYTCWGANQ" />
<input type="image" src="https://user-images.githubusercontent.com/567298/49853901-461c3700-fdf1-11e8-9d80-8a424a3173af.png" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
</form>
</center>


<p><br></p>

<p>Ad space:</p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>




<p><p></p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Gitlab Runner on Your Own Server to Run Your Jobs That Gets Triggered From Gitlab CI]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/12/20/setup-a-gitlab-runner-on-your-own-server-to-run-your-jobs-that-gets-triggered-from-gitlab-ci/"/>
    <updated>2018-12-20T04:21:16-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/12/20/setup-a-gitlab-runner-on-your-own-server-to-run-your-jobs-that-gets-triggered-from-gitlab-ci</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/50217968-0629f680-0393-11e9-8387-ad69937eb891.png" alt="" /></p>

<p>From our previous post, we went through the setup on setting up a <a href="https://blog.ruanbekker.com/blog/2018/12/19/setup-a-basic-ci-pipeline-on-gitlab/">Basic CI Pipeline on Gitlab</a>, in conjunction with Gitlab CI which coordinates your jobs, where we used the Shared Runners, which runs your jobs on Gitlab&rsquo;s Infrastructure.</p>

<p>In Gitlab, you have Shared Runners and your Own Runners, which is used to run your jobs and send the results back to GitLab.</p>

<p>In this tutorial we will Setup a Server with gitlab-runner and Docker on Ubuntu and then Setup a Basic Pipeline to Utilize your Gitlab Runner.</p>

<h2>Setup Docker</h2>

<p>Install Docker:</p>

<pre><code class="bash">$ sudo apt update &amp;&amp; sudo apt upgrade -y
$ sudo apt-get install apt-transport-https ca-certificates curl software-properties-common -y
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

$ sudo apt update
$ sudo apt install docker-ce -y
$ docker run hello-world
</code></pre>

<h2>Install and Setup Gitlab Runner</h2>

<p>This setup is intended for Linux 64bit, for other distributions, have a look at their <a href="https://docs.gitlab.com/runner/install/">docs</a></p>

<p>Install the Runner:</p>

<pre><code class="bash">$ wget -O /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64
$ chmod +x /usr/local/bin/gitlab-runner
$ useradd --comment 'GitLab Runner' --create-home gitlab-runner --shell /bin/bash
$ gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner
$ gitlab-runner start
</code></pre>

<p>Register the Runner. The Gitlab-CI Token is available in your CI/CD Settings panel from the UI: <code>https://gitlab.com/&lt;account&gt;/&lt;repo&gt;/settings/ci_cd</code></p>

<pre><code class="bash">$ gitlab-runner register
Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):
https://gitlab.com/

Please enter the gitlab-ci token for this runner:
__masked__

Please enter the gitlab-ci description for this runner:
Please enter the gitlab-ci tags for this runner (comma separated):
my-runner,foobar
Registering runner... succeeded                     runner=66m_339h

Please enter the executor: docker-ssh+machine, docker, docker-ssh, parallels, shell, ssh, virtualbox, docker+machine, kubernetes:
docker

Please enter the default Docker image (e.g. ruby:2.1):
alpine:latest

Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded!
</code></pre>

<p>Verify the Status and check if Docker and Gitlab Runner is enabled on startup:</p>

<pre><code class="bash">$ gitlab-runner status
Runtime platform                                    arch=amd64 os=linux pid=30363 revision=7f00c780 version=11.5.1
gitlab-runner: Service is running!

$ systemctl is-enabled gitlab-runner
enabled

$ systemctl is-enabled docker
enabled
</code></pre>

<h2>Gitlab-CI Config for Shared Runners</h2>

<p>If you would like to use the shared runners that Gitlab Offers, the <code>.gitlab-ci.yml</code> config will look like this:</p>

<pre><code class="yaml">stages:
  - build
  - test

build:
  stage: build
  script:
    - echo "this is building"
    - hostname
    - mkdir builds
    - touch builds/data.txt
    - echo "true" &gt; builds/data.txt
  artifacts:
    paths:
      - builds/

test:
  stage: test
  script:
    - echo "this is testing"
    - hostname
    - test -f builds/data.txt
    - grep "true" builds/data.txt
</code></pre>

<h2>Gitlab-CI Config for your own Gitlab Runner</h2>

<p>Gitlab utilizes the tags that was specified on registration to determine where the jobs gets executed on, for more information on this, have a look at their <a href="https://docs.gitlab.com/ce/ci/yaml/README.html#tags">docs</a></p>

<p>The <code>.gitlab-ci.yml</code> config for using your gitlab runner:</p>

<pre><code class="yaml">stages:
  - build
  - test

build:
  stage: build
  tags:
    - my-runner
  script:
    - echo "this is building"
    - hostname
    - mkdir builds
    - touch builds/data.txt
    - echo "true" &gt; builds/data.txt
  artifacts:
    paths:
      - builds/

test:
  stage: test
  tags:
    - my-runner
  script:
    - echo "this is testing"
    - hostname
    - test -f builds/data.txt
    - grep "true" builds/data.txt
</code></pre>

<h2>Trigger and Check Docker</h2>

<p>Commit the config to master, let your pipeline run their jobs upon completion have a look at docker on your server for the containers that the jobs ran on:</p>

<pre><code class="bash">$ docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS                          PORTS               NAMES
04292a78de0b        c04b8be95e1e        "gitlab-runner-cache.."  About a minute ago   Exited (0) About a minute ago                       runner-xx-project-xx-concurrent-0-cache-3cxx0
49b1b3c4adf9        c04b8be95e1e        "gitlab-runner-cache.."  About a minute ago   Exited (0) About a minute ago                       runner-xx-project-xx-concurrent-0-cache-6cxxa
422b23191e8c        hello-world         "/hello"                 24 minutes ago       Exited (0) 24 minutes ago                           wizardly_meninsky
</code></pre>

<p>As we know each job gets executed in different containers, you can see from the output above that there was 2 different containers for the 2 jobs that was specified in our pipeline.</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://docs.gitlab.com/ee/ci/quick_start/">https://docs.gitlab.com/ee/ci/quick_start/</a></li>
<li><a href="https://docs.gitlab.com/ee/ci/runners/">https://docs.gitlab.com/ee/ci/runners/</a></li>
</ul>


<h2>Thank You</h2>

<p>Please feel free to show support by, <strong>sharing</strong> this post, making a <strong>donation</strong>, <strong>subscribing</strong> or <strong>reach out to me</strong> if you want me to demo and write up on any specific tech topic.</p>

<center>
<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
<input type="hidden" name="cmd" value="_s-xclick" />
<input type="hidden" name="hosted_button_id" value="W7CBGYTCWGANQ" />
<input type="image" src="https://user-images.githubusercontent.com/567298/49853901-461c3700-fdf1-11e8-9d80-8a424a3173af.png" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
</form>
</center>


<p><br></p>

<p>Ad space:</p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>




<p><p></p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Basic CI Pipeline on Gitlab]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/12/19/setup-a-basic-ci-pipeline-on-gitlab/"/>
    <updated>2018-12-19T05:43:00-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/12/19/setup-a-basic-ci-pipeline-on-gitlab</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/50217968-0629f680-0393-11e9-8387-ad69937eb891.png" alt="" /></p>

<p>In this tutorial we will setup a Basic CI (Continuous Integration) Pipeline on Gitlab.</p>

<p>The code for this example is available on <a href="https://gitlab.com/rbekker87/demo-ci-basic-pipeline">gitlab.com/rbekker87/demo-ci-basic-pipeline</a>.</p>

<p>If you would like to read more on <a href="https://www.atlassian.com/continuous-delivery/continuous-integration">Continuous Integration / Continuous Deliver (CI/CD)</a>.</p>

<h2>What will we be doing?</h2>

<p>The aim for this is every time there is a commit made to the master branch, that the jobs defined by the <code>.gitlab-ci.yml</code> will be executed and will only pass if exit code 0 has been returned on the scripts.</p>

<p>The jobs gets executed on <a href="https://docs.gitlab.com/ee/ci/yaml/">gitlab runners</a> which is hosted with Giltab. Important to note is that every job runs independently from each other.</p>

<h2>Our Basic Pipeline</h2>

<p>In this pipeline we will have 2 basic jobs, each job execute a set of scripts:</p>

<p>Build:</p>

<pre><code>$ echo "this is building" 
$ hostname
$ mkdir builds
$ touch builds/data.txt
$ echo "true" &gt; builds/data.txt
</code></pre>

<p>Test:</p>

<pre><code>$ echo "this is testing"
$ hostname
$ test -f builds/data.txt
$ grep "true" builds/data.txt
</code></pre>

<h2>Setup the Pipeline:</h2>

<p>From a newly created repository which i&rsquo;ve cloned to my workspace, create the config:</p>

<pre><code>$ touch .gitlab-ci.yml
</code></pre>

<p>The config for above yaml file:</p>

<pre><code class="yaml">stages:
  - build
  - test

build:
  stage: build
  script:
    - echo "this is building" 
    - hostname
    - mkdir builds
    - touch builds/data.txt
    - echo "false" &gt; builds/data.txt
  artifacts:
    paths:
      - builds/

test:
  stage: test
  script:
    - echo "this is testing"
    - hostname
    - test -f builds/data.txt
    - grep "true" builds/data.txt
</code></pre>

<h2>Config Explained</h2>

<ul>
<li>We define 2 stages for this pipeline: build and test</li>
<li>We provide context of each job, the stage, the script (commands that will be executed in the lifecycle of the runner) and artifacts (artifacts will be the content that will be transferred, as each job runs in a different runner/container)</li>
</ul>


<p>Note that I deliberately made a mistake so that my pipeline can fail. I populated the content &ldquo;false&rdquo; into the <code>builds/data.txt</code> file from the build job and grep for the word &ldquo;true&rdquo; on the test job, so this job will fail.</p>

<h2>Push to Github</h2>

<p>Save the content to the config file, add, commit and push to master:</p>

<pre><code class="bash">$ git add .gitlab-ci.yml
$ git commit -m "add gitlab-ci config"
$ git push origin master
</code></pre>

<h2>Gitlab Pipelines</h2>

<p>From the Gitlab UI, if you head over to CI/CD -> Pipelines, you should see your pipeline running:</p>

<p><img src="https://user-images.githubusercontent.com/567298/50216548-c103c580-038e-11e9-959b-ffdcf6038305.png" alt="" /></p>

<p>When you select the Pipeline ID, you should be presented with the jobs available in your pipeline:</p>

<p><img src="https://user-images.githubusercontent.com/567298/50216698-2ce62e00-038f-11e9-8cb5-8b67dc6e6e3d.png" alt="" /></p>

<p>Select Jobs, and you should see an overview of your jobs. At this moment we can see that the build job has completed, and that the test job is busy running:</p>

<p><img src="https://user-images.githubusercontent.com/567298/50216644-0922e800-038f-11e9-81d8-d40dd6ff0862.png" alt="" /></p>

<p>Shortly thereafter the status of the test job should change to failed, select the Job ID and you should see the output:</p>

<p><img src="https://user-images.githubusercontent.com/567298/50216833-89e1e400-038f-11e9-896f-9d36aad1c55d.png" alt="" /></p>

<p>From the above output it gives you a link to create a new issue, which is quite handy.</p>

<h2>Fix the Pipeline Config</h2>

<p>Let&rsquo;s go ahead and change the content in the <code>.gitlab-ci.yml</code> config and push to master:</p>

<pre><code class="bash">$ vim .gitlab-ci.yml
</code></pre>

<p>Change line 12 from <code>- echo "false" &gt; builds/data.txt</code> to <code>- echo "true" &gt; builds/data.txt</code>, the full content of the file:</p>

<pre><code class="yaml">stages:
  - build
  - test

build:
  stage: build
  script:
    - echo "this is building" 
    - hostname
    - mkdir builds
    - touch builds/data.txt
    - echo "true" &gt; builds/data.txt
  artifacts:
    paths:
      - builds/

test:
  stage: test
  script:
    - echo "this is testing"
    - hostname
    - test -f builds/data.txt
    - grep "true" builds/data.txt
</code></pre>

<p>Commit and push to master:</p>

<pre><code class="bash">$ git add .gitlab-ci.yml
$ git commit -m "change content in script"
$ git push origin master
</code></pre>

<p>When you head over to Pipelines, you will see that the pipeline is busy running, and on the right the commit that we just made:</p>

<p><img src="https://user-images.githubusercontent.com/567298/50217143-91ee5380-0390-11e9-8b08-08626984f176.png" alt="" /></p>

<h2>Great Success</h2>

<p>Select the Pipeline ID, then select Jobs, you should see both jobs succeeded:</p>

<p><img src="https://user-images.githubusercontent.com/567298/50217299-f9a49e80-0390-11e9-871d-78423f0651c7.png" alt="" /></p>

<p>Select the Job ID of the test job, and from the output you will see that the job succeeded:</p>

<p><img src="https://user-images.githubusercontent.com/567298/50217268-eb568280-0390-11e9-972c-58f23ce39741.png" alt="" /></p>

<p>From this output you can also confirm from both jobs, that each job ran in a different runner as the hostnames that was returned to stdout was different.</p>

<h2>Resources</h2>

<p>This was a really basic example to demonstrate Gitlab CI. Some relevant resources to this post:</p>

<ul>
<li><a href="https://docs.gitlab.com/ee/ci/">Gitlab CI/CD Docs</a></li>
<li><a href="https://hackernoon.com/setting-up-ci-cd-on-gitlab-step-by-step-guide-part-1-826385728223">Full CI/CD Example with Gitlab and Heroku</a></li>
</ul>


<h2>Thank You</h2>

<p>Please feel free to show support by, <strong>sharing</strong> this post, making a <strong>donation</strong>, <strong>subscribing</strong> or <strong>reach out to me</strong> if you want me to demo and write up on any specific tech topic.</p>

<center>
<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
<input type="hidden" name="cmd" value="_s-xclick" />
<input type="hidden" name="hosted_button_id" value="W7CBGYTCWGANQ" />
<input type="image" src="https://user-images.githubusercontent.com/567298/49853901-461c3700-fdf1-11e8-9d80-8a424a3173af.png" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
</form>
</center>


<p><br></p>

<p>Ad space:</p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>




<p><p></p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
</feed>
