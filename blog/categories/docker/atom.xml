<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Docker | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/docker/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2022-03-22T07:48:05-04:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Run OpenLDAP With a UI on Docker]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/03/20/run-openldap-with-a-ui-on-docker/"/>
    <updated>2022-03-20T16:55:39-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/03/20/run-openldap-with-a-ui-on-docker</id>
    <content type="html"><![CDATA[<p>In this tutorial we will setup two containers, openldap and a openldap ui to manage our users on openldap.</p>

<h2>What is OpenLDAP</h2>

<p>OpenLDAP is an open source implementation of the Lightweight Directory Access Protocol, which makes it possible for organizations to use centralized authentication and directory access services over a network.</p>

<h2>Configuration</h2>

<p>This stack will boot a openldap and openldap-ui container container with the following <code>docker-compose.yml</code>:</p>

<pre><code class="yaml">version: "3.8"

services:
  openldap:
    image: osixia/openldap:1.5.0
    container_name: openldap
    volumes:
      - ./storage/ldap_db:/var/lib/ldap
      - ./storage/ldap_config:/etc/ldap/slapd.d
    environment:
      - LDAP_ORGANISATION=example-org
      - LDAP_DOMAIN=example.org
      - LDAP_ADMIN_PASSWORD=admin
      - LDAP_CONFIG_PASSWORD=config
      - LDAP_RFC2307BIS_SCHEMA=true
      - LDAP_REMOVE_CONFIG_AFTER_SETUP=true
      - LDAP_TLS_VERIFY_CLIENT=never
    networks:
      - openldap

  openldap-ui:
    image: wheelybird/ldap-user-manager:v1.5
    container_name: openldap-ui
    environment:
      - LDAP_URI=ldap://openldap
      - LDAP_BASE_DN=dc=example,dc=org
      - LDAP_REQUIRE_STARTTLS=FALSE
      - LDAP_ADMINS_GROUP=admins
      - LDAP_ADMIN_BIND_DN=cn=admin,dc=example,dc=org
      - LDAP_ADMIN_BIND_PWD=admin
      - LDAP_IGNORE_CERT_ERRORS=true
      - NO_HTTPS=TRUE
      - PASSWORD_HASH=SSHA
      - SERVER_HOSTNAME=localhost:18080
    depends_on:
      - openldap
    ports:
      - 18080:80
    networks:
      - openldap

networks:
  openldap:
    name: openldap
</code></pre>

<h2>Boot</h2>

<p>Boot the stack with docker-compose:</p>

<pre><code class="bash">docker-compose up -d
</code></pre>

<p>You can access OpenLDAP-UI on port <code>18080</code> and the admin password will be <code>admin</code>. You will have admin access to create users.</p>

<h2>Verify Users</h2>

<p>Access the openldap container:</p>

<pre><code class="bash">docker-compose exec openldap bash
</code></pre>

<p>You can use <code>ldapsearch</code> to verify our user:</p>

<pre><code class="bash">ldapsearch -x -h openldap -D "uid=ruan,ou=people,dc=example,dc=org" -b "ou=people,dc=example,dc=org" -w "$PASSWORD" -s base 'uid=ruan'
</code></pre>

<p>Or we can use <code>ldapwhoami</code>:</p>

<pre><code class="bash">ldapwhoami -vvv -h ldap://openldap:389 -p 389 -D 'uid=ruan,ou=people,dc=example,dc=org' -x -w "$PASSWORD"
</code></pre>

<p>Which will provide a output with something like:</p>

<pre><code class="bash">ldap_initialize( &lt;DEFAULT&gt; )
dn:uid=ruan,ou=people,dc=example,dc=org
Result: Success (0)
</code></pre>

<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Docker Containers With Terraform]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/11/23/run-docker-containers-with-terraform/"/>
    <updated>2021-11-23T11:06:03-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/11/23/run-docker-containers-with-terraform</id>
    <content type="html"><![CDATA[<p>In this post I will demonstrate how to use the terraform <a href="https://registry.terraform.io/providers/kreuzwerker/docker/latest/docs/resources/container">docker_container</a> resource from the <a href="https://github.com/kreuzwerker/terraform-provider-docker">docker provider</a> to run two docker containers, traefik and nginx and use the random provider to generate a random url for us.</p>

<h2>Pre-Requisites</h2>

<p>You will require <a href="https://www.terraform.io/downloads.html">terraform</a> and <a href="https://docs.docker.com/get-docker/">docker</a> to be installed.</p>

<h2>Project Structure</h2>

<p>The source code for this post is available on my github repository, but the project structure will look like the following:</p>

<p><img src="https://user-images.githubusercontent.com/567298/143061769-c619e7eb-c5b1-42bc-9fa4-ed59c15448fa.png" alt="image" /></p>

<p>Our <code>providers.tf</code>:</p>

<pre><code>terraform {
  required_providers {
    docker = {
      source  = "kreuzwerker/docker"
      version = "2.15.0"
    }
    random = {
      version = "~&gt; 3.0"
    }
  }
}

provider "docker" {
  host = "unix:///var/run/docker.sock"
}

provider "random" {}
</code></pre>

<p>Our <code>variables.tf</code>:</p>

<pre><code>variable "domain" {
  type    = string
  default = "localdns.xyz"
}
</code></pre>

<p>Our <code>outputs.tf</code>:</p>

<pre><code>output "nginx_container_name" {
  value = docker_container.nginx.name
}

output "traefik_container_name" {
  value = docker_container.traefik.name
}

output "traefik_url" {
  value = "http://traefik.${var.domain}/"
}

output "nginx_url" {
  value = "http://www.${random_string.nginx.result}.${var.domain}/"
}
</code></pre>

<p>Our <code>main.tf</code>:</p>

<pre><code>resource "random_string" "nginx" {
  length  = 8
  upper   = false
  special = false
}

resource "docker_image" "nginx" {
  name = "nginx:stable-alpine"
}

resource "docker_image" "traefik" {
  name = "traefik:1.7.14"
}

resource "docker_network" "nginx" {
  name   = "docknet"
  driver = "bridge"
}

resource "docker_container" "traefik" {
  name  = "traefik"
  image = docker_image.traefik.name

  networks_advanced {
    name    = docker_network.nginx.name
    aliases = ["docknet"]
  }

  restart = "unless-stopped"
  destroy_grace_seconds = 30
  must_run = true
  memory = 256

  volumes {
    host_path      = "/var/run/docker.sock"
    container_path = "/var/run/docker.sock"
  }

  command = [
    "--api",
    "--docker",
    "--docker.watch",
    "--entrypoints=Name:http Address::80",
    "--logLevel=INFO"
  ]

  ports {
    internal = 80
    external = 80
    ip       = "0.0.0.0"
  }

  labels {
    label = "traefik.enable"
    value = true
  }

  labels {
    label = "traefik.docker.network"
    value = "docknet"
  }

  labels {
    label = "traefik.frontend.rule"
    value = "Host:traefik.${var.domain}"
  }

  labels {
    label = "traefik.port"
    value = 8080
  }

}

resource "docker_container" "nginx" {
  name  = "nginx"
  image = docker_image.nginx.name

  networks_advanced {
    name    = docker_network.nginx.name
    aliases = ["docknet"]
  }

  restart = "unless-stopped"
  destroy_grace_seconds = 30
  must_run = true
  memory = 256

  volumes {
    host_path      = "/Users/ruan/personal/terraform-playground/docker-containers/html"
    container_path = "/usr/share/nginx/html"
  }

  volumes {
    host_path      = "/Users/ruan/personal/terraform-playground/docker-containers/configs/nginx.conf"
    container_path = "/etc/nginx/nginx.conf"
  }

  volumes {
    host_path      = "/Users/ruan/personal/terraform-playground/docker-containers/configs/app.conf"
    container_path = "/etc/nginx/conf.d/app.conf"
  }

  env = [
    "PUID=501",
    "PGID=20"
  ]

  labels {
    label = "traefik.enable"
    value = true
  }

  labels {
    label = "traefik.docker.network"
    value = "docknet"
  }

  labels {
    label = "traefik.frontend.rule"
    value = "Host:www.${random_string.nginx.result}.${var.domain}"
  }

  labels {
    label = "traefik.port"
    value = 80
  }

  depends_on = [
    docker_container.traefik,
    random_string.nginx
  ]

}
</code></pre>

<p>Our <code>html/index.html</code>:</p>

<pre><code class="html">&lt;!doctype html&gt;
&lt;html lang="en"&gt;
    &lt;head&gt;
        &lt;meta charset="utf-8"&gt;
        &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;

        &lt;title&gt;Welcome&lt;/title&gt;

        &lt;!-- Fonts --&gt;
        &lt;link href="https://fonts.googleapis.com/css?family=Nunito:200,600" rel="stylesheet"&gt;

        &lt;!-- Styles --&gt;
        &lt;style&gt;
            html, body {
                background-color: #fff;
                color: #636b6f;
                font-family: 'Nunito', sans-serif;
                font-weight: 200;
                height: 100vh;
                margin: 0;
            }

            .full-height {
                height: 100vh;
            }

            .flex-center {
                align-items: center;
                display: flex;
                justify-content: center;
            }

            .position-ref {
                position: relative;
            }

            .top-right {
                position: absolute;
                right: 10px;
                top: 18px;
            }

            .content {
                text-align: center;
            }

            .title {
                font-size: 84px;
            }

            .links &gt; a {
                color: #636b6f;
                padding: 0 25px;
                font-size: 13px;
                font-weight: 600;
                letter-spacing: .1rem;
                text-decoration: none;
                text-transform: uppercase;
            }

            .m-b-md {
                margin-bottom: 30px;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class="flex-center position-ref full-height"&gt;
            &lt;div class="content"&gt;
                &lt;div class="title m-b-md"&gt;
                    Welcome
                &lt;/div&gt;

                &lt;div class="links"&gt;
                    &lt;a href="https://ruan.dev" target="_blank"&gt;About Me&lt;/a&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Our <code>configs/nginx.conf</code>:</p>

<pre><code>user  nginx;
worker_processes  auto;
error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    sendfile        on;
    keepalive_timeout  65;

    include /etc/nginx/conf.d/app.conf;
}
</code></pre>

<p>And lastly, our <code>configs/app.conf</code>:</p>

<pre><code>server {
  listen 80;
  server_name _;

  location / {
    root   /usr/share/nginx/html;
    index  index.html;
  }

  location /healthz {
    return 200 'up';
  }
}
</code></pre>

<h2>Deployment</h2>

<p>Once everything is in place, or if you want to clone my repository, you can do that by:</p>

<pre><code>git clone https://github.com/ruanbekker/terraform-docker-container-example
cd terraform-docker-container-example
</code></pre>

<p>Then we can initialize terraform by fetching the required plugins:</p>

<pre><code>terraform init
</code></pre>

<p>Once that completes we can run a plan:</p>

<pre><code>terraform plan
</code></pre>

<p>And that should output something more or less like:</p>

<pre><code>Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with
the following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.nginx will be created
  + resource "docker_container" "nginx" {
      + attach                = false
      + bridge                = (known after apply)
      + command               = (known after apply)
      + container_logs        = (known after apply)
      + destroy_grace_seconds = 30
      + entrypoint            = (known after apply)
      + env                   = [
          + "PGID=20",
          + "PUID=501",
        ]
      + exit_code             = (known after apply)
      + gateway               = (known after apply)
      + hostname              = (known after apply)
      + id                    = (known after apply)
      + image                 = "nginx:stable-alpine"
      + init                  = (known after apply)
      + ip_address            = (known after apply)
      + ip_prefix_length      = (known after apply)
      + ipc_mode              = (known after apply)
      + log_driver            = "json-file"
      + logs                  = false
      + memory                = 256
      + must_run              = true
      + name                  = "nginx"
      + network_data          = (known after apply)
      + read_only             = false
      + remove_volumes        = true
      + restart               = "unless-stopped"
      + rm                    = false
      + security_opts         = (known after apply)
      + shm_size              = (known after apply)
      + start                 = true
      + stdin_open            = false
      + tty                   = false

      + healthcheck {
          + interval     = (known after apply)
          + retries      = (known after apply)
          + start_period = (known after apply)
          + test         = (known after apply)
          + timeout      = (known after apply)
        }

      + labels {
          + label = "traefik.docker.network"
          + value = "docknet"
        }
      + labels {
          + label = "traefik.enable"
          + value = "true"
        }
      + labels {
          + label = "traefik.frontend.rule"
          + value = (known after apply)
        }
      + labels {
          + label = "traefik.port"
          + value = "80"
        }

      + networks_advanced {
          + aliases = [
              + "docknet",
            ]
          + name    = "docknet"
        }

      + volumes {
          + container_path = "/etc/nginx/conf.d/app.conf"
          + host_path      = "/Users/ruan/personal/terraform-playground/docker-containers/configs/app.conf"
        }
      + volumes {
          + container_path = "/etc/nginx/nginx.conf"
          + host_path      = "/Users/ruan/personal/terraform-playground/docker-containers/configs/nginx.conf"
        }
      + volumes {
          + container_path = "/usr/share/nginx/html"
          + host_path      = "/Users/ruan/personal/terraform-playground/docker-containers/html"
        }
    }

  # docker_container.traefik will be created
  + resource "docker_container" "traefik" {
      + attach                = false
      + bridge                = (known after apply)
      + command               = [
          + "--api",
          + "--docker",
          + "--docker.watch",
          + "--entrypoints=Name:http Address::80",
          + "--logLevel=INFO",
        ]
      + container_logs        = (known after apply)
      + destroy_grace_seconds = 30
      + entrypoint            = (known after apply)
      + env                   = (known after apply)
      + exit_code             = (known after apply)
      + gateway               = (known after apply)
      + hostname              = (known after apply)
      + id                    = (known after apply)
      + image                 = "traefik:1.7.14"
      + init                  = (known after apply)
      + ip_address            = (known after apply)
      + ip_prefix_length      = (known after apply)
      + ipc_mode              = (known after apply)
      + log_driver            = "json-file"
      + logs                  = false
      + memory                = 256
      + must_run              = true
      + name                  = "traefik"
      + network_data          = (known after apply)
      + read_only             = false
      + remove_volumes        = true
      + restart               = "unless-stopped"
      + rm                    = false
      + security_opts         = (known after apply)
      + shm_size              = (known after apply)
      + start                 = true
      + stdin_open            = false
      + tty                   = false

      + healthcheck {
          + interval     = (known after apply)
          + retries      = (known after apply)
          + start_period = (known after apply)
          + test         = (known after apply)
          + timeout      = (known after apply)
        }

      + labels {
          + label = "traefik.docker.network"
          + value = "docknet"
        }
      + labels {
          + label = "traefik.enable"
          + value = "true"
        }
      + labels {
          + label = "traefik.frontend.rule"
          + value = "Host:traefik.localdns.xyz"
        }
      + labels {
          + label = "traefik.port"
          + value = "8080"
        }

      + networks_advanced {
          + aliases = [
              + "docknet",
            ]
          + name    = "docknet"
        }

      + ports {
          + external = 80
          + internal = 80
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }

      + volumes {
          + container_path = "/var/run/docker.sock"
          + host_path      = "/var/run/docker.sock"
        }
    }

  # docker_image.nginx will be created
  + resource "docker_image" "nginx" {
      + id          = (known after apply)
      + latest      = (known after apply)
      + name        = "nginx:stable-alpine"
      + output      = (known after apply)
      + repo_digest = (known after apply)
    }

  # docker_image.traefik will be created
  + resource "docker_image" "traefik" {
      + id          = (known after apply)
      + latest      = (known after apply)
      + name        = "traefik:1.7.14"
      + output      = (known after apply)
      + repo_digest = (known after apply)
    }

  # docker_network.nginx will be created
  + resource "docker_network" "nginx" {
      + driver      = "bridge"
      + id          = (known after apply)
      + internal    = (known after apply)
      + ipam_driver = "default"
      + name        = "docknet"
      + options     = (known after apply)
      + scope       = (known after apply)

      + ipam_config {
          + aux_address = (known after apply)
          + gateway     = (known after apply)
          + ip_range    = (known after apply)
          + subnet      = (known after apply)
        }
    }

  # random_string.nginx will be created
  + resource "random_string" "nginx" {
      + id          = (known after apply)
      + length      = 8
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = true
      + result      = (known after apply)
      + special     = false
      + upper       = false
    }

Plan: 6 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + nginx_container_name   = "nginx"
  + nginx_url              = (known after apply)
  + traefik_container_name = "traefik"
  + traefik_url            = "http://traefik.localdns.xyz/"
</code></pre>

<p>Which we can see will create 2 containers, traefik and then nginx, map the configs and html in place and also sets the traefik hostname in the labels for our respective containers so that we can reach them via the specific host headers.</p>

<p>The we can deploy our containers:</p>

<pre><code>terraform apply -auto-approve
</code></pre>

<p>Which will provide us the output detail defined from our <code>outputs.tf</code>:</p>

<pre><code>Apply complete! Resources: 6 added, 0 changed, 0 destroyed.

Outputs:

nginx_container_name = "nginx"
nginx_url = "http://www.5igjdfq9.localdns.xyz/"
traefik_container_name = "traefik"
traefik_url = "http://traefik.localdns.xyz/"
</code></pre>

<h2>Access our Containers</h2>

<p>We can access our Traefik Dashboard on <a href="http://traefik.localdns.xyz">http://traefik.localdns.xyz</a> and should look something like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/143064031-23e9dbe4-522b-4f11-96f9-f30a2104ee44.png" alt="image" /></p>

<p>And when we access our Nginx container on <a href="http://www.5igjdfq9.localdns.xyz">http://www.5igjdfq9.localdns.xyz</a> it should look more or less like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/143064228-88107b75-31fc-41eb-aee0-f26ff976c42a.png" alt="image" /></p>

<p>Running a <code>docker ps</code> will show our running containers:</p>

<pre><code>docker ps
CONTAINER ID   IMAGE                  COMMAND                  CREATED         STATUS                PORTS                NAMES
e45158ae8cba   nginx:stable-alpine    "/docker-entrypoint   3 minutes ago   Up 3 minutes          80/tcp               nginx
ebdbe42a0fcb   traefik:1.7.14         "/traefik --api       3 minutes ago   Up 3 minutes          0.0.0.0:80-&gt;80/tcp   traefik
</code></pre>

<h2>Cleanup</h2>

<p>We can delete our containers by running:</p>

<pre><code>terraform destroy -auto-approve
</code></pre>

<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Traefik Version 2 on Docker]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/11/03/setup-traefik-version-2-on-docker/"/>
    <updated>2021-11-03T01:20:27-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/11/03/setup-traefik-version-2-on-docker</id>
    <content type="html"><![CDATA[<p>In this tutorial we will be setting up <a href="https://traefik.io">Traefik </a> v2 as our reverse proxy with port 80 and 443 enabled, and then hook up a example application behind the application load balancer, and route incoiming requests via host headers.</p>

<h2>What is Traefik</h2>

<p>Traefik is a modern HTTP reverse proxy and load balancer that makes deploying microservices super easy by making use of docker labels to route your traffic based on host headers, path prefixes etc. Please check out <a href="https://doc.traefik.io/traefik/">their website</a> to find out more about them.</p>

<h2>Use Case</h2>

<p>In our example we want to route traefik from <code>http://app.selfhosted.co.za</code> to hit our proxy on port 80, then we want traefik to redirect port 80 to the 443 port configured on the proxy which is configured with letsencrypt and reverse proxy the connection to our application.</p>

<p>The application is being configured via docker labels, which we will get into later.</p>

<h2>Our Environment</h2>

<p>I will be using the domain <code>selfhosted.co.za</code>, so if you are following along, you can just replace this domain with yours.</p>

<p>For this demonstration I have spun up a VM at <a href="https://civo.com">Civo</a> as you can see below:</p>

<p><img src="https://user-images.githubusercontent.com/567298/125192278-5023a200-e247-11eb-97c6-cebd65f22f07.png" alt="image" /></p>

<p>From the provided public IP address, we will be creating a DNS A record for our domain, and then create a wildcard entry to CNAME to our initial dns name:</p>

<p><img src="https://user-images.githubusercontent.com/567298/125192297-6b8ead00-e247-11eb-9c01-740557838a12.png" alt="image" /></p>

<p>You might not want to point all the subdomains to that entry, but to simplify things, every application that needs to be routed via traefik, I can manage from a traefik config level, since my dns is already pointing to the public ip where traefik is running on.</p>

<p>So if I spin up a new container, lets say <code>bitwarden</code>, I can just set <code>bitwarden.selfhosted.co.za</code> in the labels of that container and due to the dns already pointing to traefik, traefik will route the connection to the correct container.</p>

<h2>Pre-Requisites</h2>

<p>In order to follow along you will need <a href="https://docs.docker.com/get-docker/">docker</a> and <a href="https://docs.docker.com/compose/install/">docker-compose</a> to be installed, and can be validated using:</p>

<pre><code>docker -v
Docker version 20.10.7, build f0df350

docker-compose -v
docker-compose version 1.28.6, build 5db8d86f
</code></pre>

<h2>Traefik on Docker</h2>

<p>We will have one <code>docker-compose.yml</code> file which has the proxy and the example application. Be sure to change the following to suite your environment:
- <code>traefik.http.routers.api.rule=Host()'</code>
- <code>--certificatesResolvers.letsencrypt.acme.email=youremail@yourdomain.net</code></p>

<p>The compose:</p>

<pre><code class="yaml">---
version: '3.8'

services:
  traefik:
    image: traefik:2.4
    container_name: traefik
    restart: unless-stopped
    volumes:
      - ./traefik/acme.json:/acme.json
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - docknet
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.api.rule=Host(`traefik.selfhosted.co.za`)'
      - 'traefik.http.routers.api.entrypoints=https'
      - 'traefik.http.routers.api.service=api@internal'
      - 'traefik.http.routers.api.tls=true'
      - 'traefik.http.routers.api.tls.certresolver=letsencrypt'
    ports:
      - 80:80
      - 443:443
    command:
      - '--api'
      - '--providers.docker=true'
      - '--providers.docker.exposedByDefault=false'
      - '--entrypoints.http=true'
      - '--entrypoints.http.address=:80'
      - '--entrypoints.http.http.redirections.entrypoint.to=https'
      - '--entrypoints.http.http.redirections.entrypoint.scheme=https'
      - '--entrypoints.https=true'
      - '--entrypoints.https.address=:443'
      - '--certificatesResolvers.letsencrypt.acme.email=youremail@yourdomain.net'
      - '--certificatesResolvers.letsencrypt.acme.storage=acme.json'
      - '--certificatesResolvers.letsencrypt.acme.httpChallenge.entryPoint=http'
      - '--log=true'
      - '--log.level=INFO'
    logging:
      driver: "json-file"
      options:
        max-size: "1m"

  webapp:
    image: traefik/whoami
    container_name: webapp
    restart: unless-stopped
    networks:
      - docknet
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.webapp.rule=Host(`app.selfhosted.co.za`)'
      - 'traefik.http.routers.webapp.entrypoints=https'
      - 'traefik.http.routers.webapp.tls=true'
      - 'traefik.http.routers.webapp.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.webapp.service=webappservice'
      - 'traefik.http.services.webappservice.loadbalancer.server.port=80'
    logging:
      driver: "json-file"
      options:
        max-size: "1m"

networks:
  docknet:
    name: docknet
</code></pre>

<p>Prepare the <code>./traefik/acme.json</code> file:</p>

<pre><code>mkdir traefik
touch traefik/acme.json
chmod 600 traefik/acme.json
</code></pre>

<p>As you can see in order to wire a application onto the proxy we need the following labels:</p>

<pre><code class="yaml">      - 'traefik.enable=true'
      - 'traefik.http.routers.webapp.rule=Host(`app.selfhosted.co.za`)'
      - 'traefik.http.routers.webapp.entrypoints=https'
      - 'traefik.http.routers.webapp.tls=true'
      - 'traefik.http.routers.webapp.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.webapp.service=webappservice'
      - 'traefik.http.services.webappservice.loadbalancer.server.port=80'
</code></pre>

<p>Now boot our stack using docker-compose:</p>

<pre><code class="bash">docker-compose up -d
</code></pre>

<p>You can follow the logs to ensure everything works as expected:</p>

<pre><code>docker-compose logs -f
Attaching to webapp, traefik
traefik    | time="2021-07-11T11:02:22Z" level=info msg="Configuration loaded from flags."
traefik    | time="2021-07-11T11:02:22Z" level=info msg="Starting provider aggregator.ProviderAggregator {}"
traefik    | time="2021-07-11T11:02:22Z" level=info msg="Starting provider *traefik.Provider {}"
traefik    | time="2021-07-11T11:02:22Z" level=info msg="Starting provider *docker.Provider {\"watch\":true,\"endpoint\":\"unix:///var/run/docker.so                                              ck\",\"defaultRule\":\"Host(``)\",\"swarmModeRefreshSeconds\":\"15s\"}"
traefik    | time="2021-07-11T11:02:22Z" level=info msg="Starting provider *acme.ChallengeTLSALPN {\"Timeout\":4000000000}"
traefik    | time="2021-07-11T11:02:22Z" level=info msg="Starting provider *acme.Provider {\"email\":\"youremail@domain.com\",\"caServer\":\"https://                                              acme-v02.api.letsencrypt.org/directory\",\"storage\":\"acme.json\",\"keyType\":\"RSA4096\",\"httpChallenge\":{\"entryPoint\":\"http\"},\"ResolverNam                                              e\":\"letsencrypt\",\"store\":{},\"TLSChallengeProvider\":{\"Timeout\":4000000000},\"HTTPChallengeProvider\":{}}"
traefik    | time="2021-07-11T11:02:22Z" level=info msg="Testing certificate renew..." providerName=letsencrypt.acme
traefik    | time="2021-07-11T11:02:24Z" level=info msg=Register... providerName=letsencrypt.acme
webapp     | Starting up on port 80
</code></pre>

<p>The certificate process might take anything from 5-30s in my experience.</p>

<h2>Test the Application</h2>

<p>Now that our <code>webapp</code> container is running, make a http request using curl against the configured host rule, which is <code>app.selfhosted.co.za</code> on <code>http</code> so that we can validate if traefik is doing a redirect to <code>https</code>:</p>

<pre><code class="bash">curl -IL http://app.selfhosted.co.za:80

HTTP/1.1 308 Permanent Redirect
Location: https://app.selfhosted.co.za/
Date: Sun, 11 Jul 2021 11:05:47 GMT
Content-Length: 18
Content-Type: text/plain; charset=utf-8

HTTP/2 200
content-type: text/plain; charset=utf-8
date: Sun, 11 Jul 2021 11:05:47 GMT
content-length: 343
</code></pre>

<p>If we access our <code>webapp</code> service in our web browser, we will see the following:</p>

<p><img src="https://user-images.githubusercontent.com/567298/125192768-c1fceb00-e249-11eb-8b67-7347b4d16a8f.png" alt="image" /></p>

<p>We can also validate that the certificate is valid:</p>

<p><img src="https://user-images.githubusercontent.com/567298/125196546-a9490100-e25a-11eb-8e94-0d7af307d2fb.png" alt="image" /></p>

<p>We can also access the traefik dashboard using the configured domain, in this case <code>traefik.selfhosted.co.za</code>, and you should see the pretty traefik dashboard:</p>

<p><img src="https://user-images.githubusercontent.com/567298/125196448-4bb4b480-e25a-11eb-906b-a221d1415f38.png" alt="image" /></p>

<h2>Future Posts</h2>

<p>In future posts I will be using this post as the base setup on getting traefik up and running, and future posts that uses traefik will be tagged under <a href="https://containers.fan/tags/traefik/">#traefik</a>.</p>

<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Tour With Vagrant and Virtualbox on Mac]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/08/14/a-tour-with-vagrant-and-virtualbox-on-mac/"/>
    <updated>2021-08-14T13:41:32-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/08/14/a-tour-with-vagrant-and-virtualbox-on-mac</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/58658188-37cec280-8320-11e9-90ca-1226b3ccb292.png" alt="vagrant" /></p>

<p><a href="https://www.vagrantup.com/">Vagrant</a>, yet another amazing product from <a href="https://www.hashicorp.com/">Hashicorp</a>.</p>

<p>Vagrant makes it really easy to provision virtual servers for local development (not limited to), which they refer as &ldquo;boxes&rdquo;, that enables developers to run their jobs/tasks/applications in a really easy and fast way. Vagrant utilizes a declarative configuration model, so you can describe which OS you want, bootstrap them with installation instructions as soon as it boots, etc.</p>

<h2>What are we doing today?</h2>

<p>When completing this tutorial, you will have Vagrant and Virtualbox installed on your Mac and should be able to launch a Ubuntu Virtual Server locally with Vagrant and using the Virtualbox provider which will be responsible for running our VM&rsquo;s.</p>

<p>We will also look at different configuration options to configure the VM, bootstrapping software, using the shell, docker and ansible provisioner.</p>

<p>For this demonstration, I am using a Mac OSX, but you can run this on Mac, Windows or Linux. First we will use Homebrew to install Virtualbox, then Vagrant, then we will provision a Ubuntu box and I will also show how to inject shell commands into your Vagrantfile so that you can provision software to your VM, and also forward traffic to a web server from the host to the guest.</p>

<p>If you are looking for a Linux version instead of mac, you can look at this post:
* <a href="https://blog.ruanbekker.com/blog/2019/05/30/use-vagrant-to-setup-a-local-development-environment-on-linux/">Use Vagrant to Setup a Local Development Environment on Linux</a></p>

<h2>Pre-Requisites</h2>

<p>I will be installing Vagrant and Virtualbox with Homebrew, if you do not have homebrew installed, you can install homebrew with:</p>

<pre><code class="bash">$ ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</code></pre>

<p>Once homebrew is installed, it&rsquo;s a good thing to update the indexes:</p>

<pre><code class="bash">$ brew update
</code></pre>

<h2>Virtualbox</h2>

<p>Install <a href="https://www.virtualbox.org/">VirtualBox</a> using homebrew:</p>

<pre><code class="bash">$ brew install --cask virtualbox
</code></pre>

<h2>Vagrant</h2>

<p>Install <a href="https://www.vagrantup.com/">Vagrant</a> using homebrew:</p>

<pre><code class="bash">$ brew install --cask vagrant
</code></pre>

<p>Install the virtualbox guest additions plugin for vagrant:</p>

<pre><code class="bash">$ vagrant plugin install vagrant-vbguest
</code></pre>

<p>If you would like a vagrant manager utility to help you manage your vagrant boxes, you can install <a href="http://www.vagrantmanager.com/">vagrant-manager</a> using homebrew:</p>

<pre><code class="bash">$ brew install --cask vagrant-manager
</code></pre>

<h2>Create your first Vagrant Box</h2>

<p>From <a href="https://app.vagrantup.com/boxes/search">app.vagrantup.com/boxes/search</a> you can search for any box, such as ubuntu, centos, alpine etc and for this demonstration I am going with <a href="https://app.vagrantup.com/ubuntu/boxes/focal64">ubuntu/focal64</a>.</p>

<p>I am creating a new directory for my devbox:</p>

<pre><code class="bash">$ mkdir devbox 
$ cd devbox
</code></pre>

<p>Then initialize the Vagrantfile by running:</p>

<pre><code class="bash">$ vagrant init ubuntu/focal64
</code></pre>

<p>A <code>Vagrantfile</code> has been created in the current working directory:</p>

<pre><code>$ cat Vagrantfile | grep -v "#"

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/focal64"
end
</code></pre>

<p>Boot the VM:</p>

<pre><code class="bash">$ vagrant up
</code></pre>

<p>The box should now be in a started state, and we can verify that by running:</p>

<pre><code class="bash">$ vagrant status
Current machine states:

default                   running (virtualbox)
</code></pre>

<p>We can now SSH to our VM by running:</p>

<pre><code class="bash">$ vagrant ssh
vagrant@ubuntu-focal:~$
</code></pre>

<h2>Installing Software with Vagrant</h2>

<p>First let&rsquo;s destroy the VM that we created:</p>

<pre><code class="bash">$ vagrant destroy --force
</code></pre>

<p>Then edit the <code>Vagrantfile</code> and add the commands that we want to be executed when the VM boots, in our case, installing Nginx:</p>

<pre><code class="ruby">Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/focal64"
  config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.provision "shell", inline: &lt;&lt;-SHELL
     apt update
     apt install nginx -y
  SHELL
end
</code></pre>

<p>You will also notice that we are forwarding port 8080 from our host, to port 80 on the VM so that we can access the webserver on port 8080 from our laptop. Then boot the VM:</p>

<pre><code>$ vagrant up
</code></pre>

<p>Once the VM has booted and installed our software, we should be able to access the index document served by Nginx on our VM:</p>

<pre><code class="bash">$ curl -I http://localhost:8080/

HTTP/1.1 200 OK
Server: nginx/1.18.0 (Ubuntu)
Date: Sat, 14 Aug 2021 18:11:59 GMT
Content-Type: text/html
Content-Length: 612
Last-Modified: Sat, 14 Aug 2021 18:11:10 GMT
Connection: keep-alive
ETag: "6118073e-264"
Accept-Ranges: bytes
</code></pre>

<h2>Shared Folders</h2>

<p>Let&rsquo;s say you want to map your local directory to your VM, in a scenario where you want to store your <code>index.html</code> on your laptop and map it to the VM, we can use <code>config.vm.synced_folder</code>.</p>

<p>On our laptop, create a <code>html</code> directory where we will store our <code>index.hml</code>:</p>

<pre><code>$ mkdir html
</code></pre>

<p>Now create the content in the <code>index.html</code> under the <code>html</code> directory:</p>

<pre><code>$ echo "Hello, World" &gt; html/index.html
</code></pre>

<p>Now we need to make vagrant aware of the folder that we are mapping to the VM, so we need to edit the <code>Vagrantfile</code> and it will now look like this:</p>

<pre><code class="ruby"># -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/focal64"
  config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.provision "shell", inline: &lt;&lt;-SHELL
     apt update
     apt install nginx -y
  SHELL
  config.vm.synced_folder "html", "/var/www/html"
end
</code></pre>

<p>To reload the VM with our changes, we use <code>vagrant provision</code> to update our VM when changes to provisioners are made, and <code>vagrant reload</code> when we have config changes such as <code>config.vm.network</code>, but to restart the VM and forcing provisioners to run, we can use the following:</p>

<p>Thanks <a href="https://twitter.com/joshva_jebaraj">@joshva_jebaraj</a></p>

<pre><code class="bash">$ vagrant reload --provision
</code></pre>

<p>Once the VM is up, we can verify the changes:</p>

<pre><code>$ curl http://localhost:8080/
Hello, World
</code></pre>

<p>Now we can edit our content locally which is synced to our VM.</p>

<h2>Setting Hostname and Configure Memory</h2>

<p>We can also configure the hostname of our VM and configure the amount of memory that we want to allocate to our VM using:</p>

<ul>
<li><code>config.vm.hostname</code></li>
<li><code>vb.memory</code></li>
</ul>


<p>An example of that will look like the following:</p>

<pre><code class="ruby"># -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/focal64"
  config.vm.hostname = "mydevbox"
  config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.provision "shell", inline: &lt;&lt;-SHELL
     apt update
     apt install nginx -y
  SHELL
  config.vm.synced_folder "html", "/var/www/html"
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "1024"
  end
end
</code></pre>

<p>In this example our VM&rsquo;s hostname is <code>mydevbox</code> and we assigned 1024MB of memory to our VM.</p>

<h2>Provisioners: Shell</h2>

<p>We can also run scripts from our local directory on our laptop on our VM using the <a href="https://www.vagrantup.com/docs/provisioning/shell">shell provisioner</a>.</p>

<p>First we need to create the script on our local directory:</p>

<pre><code class="bash">$ cat bootstrap.sh
#!/usr/bin/env bash
set -x
echo "my hostname is $(hostname)"
</code></pre>

<p>Then in our <code>Vagrantfile</code> we inform vagrant to execute the shell script:</p>

<pre><code class="ruby"># -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/focal64"
  config.vm.hostname = "mydevbox"
  config.vm.provision :shell, :path =&gt; "bootstrap.sh"
end
</code></pre>

<p>Since my VM is already running, I will be doing a <code>reload</code>:</p>

<pre><code class="bash">$ vagrant reload --provision
...
==&gt; default: Running provisioner: shell...
    default: Running: /var/folders/04/r10yvb8d5dgfvd167jz5z23w0000gn/T/vagrant-shell20210814-70233-1p9dump.sh
    default: ++ hostname
    default: my hostname is mydevbox
    default: + echo 'my hostname is mydevbox'
</code></pre>

<p>As you can see the shell script from our local directory was executed on our VM, you can use this method to automate installations as well, etc.</p>

<h2>Provisioners: Docker</h2>

<p>Vagrant offers a <a href="https://www.vagrantup.com/docs/provisioning/docker">docker provisioner</a>, and for this example we will be hosting a mysql server using docker container in our VM.</p>

<p>Our <code>Vagrantfile</code>:</p>

<pre><code class="ruby"># -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/focal64"
  config.vm.hostname = "mydevbox"
  config.vm.network "forwarded_port", guest: 3306, host: 3306
  config.vm.provision "docker" do |d|
    d.run "mysql", image: "mysql:8.0",
      args: "-p 3306:3306 -e MYSQL_ROOT_PASSWORD=password"
  end
end
</code></pre>

<p>Since I don&rsquo;t have port <code>3306</code> listening locally, I have mapped port <code>3306</code> from my laptop to port <code>3306</code> on my VM and I am using the <code>mysql:8.0</code> container image from docker hub and passing the arguments which is specific to the container.</p>

<p>The convenient thing about the docker provisioner, is that it will install docker onto the VM for you.</p>

<p>Once the config has been set in your <code>Vagrantfile</code> do a reload:</p>

<pre><code class="bash">$ vagrant reload --provision
...
    default: /vagrant =&gt; /Users/ruanbekker/workspace/vagrant/devbox
==&gt; default: Running provisioner: docker...
    default: Installing Docker onto machine...
==&gt; default: Starting Docker containers...
==&gt; default: -- Container: mysql
</code></pre>

<p>From our laptop we should be able to communicate with our mysql server:</p>

<pre><code class="bash">$ nc -vz localhost 3306
found 0 associations
found 1 connections:
     1: flags=82&lt;CONNECTED,PREFERRED&gt;
    outif lo0
    src 127.0.0.1 port 58745
    dst 127.0.0.1 port 3306
    rank info not available
    TCP aux info available

Connection to localhost port 3306 [tcp/mysql] succeeded!
</code></pre>

<p>We can also SSH to our VM and verify if the container is running:</p>

<pre><code class="bash">$ vagrant ssh
</code></pre>

<p>And then list the containers:</p>

<pre><code class="bash">$  docker ps
CONTAINER ID   IMAGE       COMMAND                  CREATED         STATUS         PORTS                                                  NAMES
30a843a486ae   mysql:8.0   "docker-entrypoint.sh    2 minutes ago   Up 2 minutes   0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql
</code></pre>

<h2>Provisioners: Ansible</h2>

<p>We can also execute <a href="https://www.ansible.com/">Ansible</a> playbooks on our VM using the <a href="https://www.vagrantup.com/docs/provisioning/ansible">Ansible Provisioner</a>.</p>

<p>Something to note is that we use <code>ansible</code> to execute the playbook on the host, and <code>ansible_local</code> to execute the playbook on the VM.</p>

<p>First we will create our <a href="https://docs.ansible.com/playbooks_best_practices.html#directory-layout">project structure</a> for ansible, so that we have the following in place:</p>

<pre><code class="bash">.
Vagrantfile
provisioning/playbook.yml
provisioning/group_vars/all
</code></pre>

<p>Create the <code>provisioning</code> directory:</p>

<pre><code class="bash">$ mkdir provisioning
</code></pre>

<p>Then the content for our <code>provisioning/playbook.yml</code> playbook:</p>

<pre><code class="yaml">---
- hosts: all
  become: yes
  tasks:
    - name: ensure ntpd is at the latest version
      apt:
        pkg: ntp
        state: ""
      notify:
      - restart ntpd
  handlers:
    - name: restart ntpd
      service:
        name: ntp
        state: restarted
</code></pre>

<p>Our <code>provisioning/group_vars/all</code> file that will contain the variables for the all group:</p>

<pre><code class="yaml">desired_state: "latest"
</code></pre>

<p>In our <code>Vagrantfile</code>:</p>

<pre><code class="ruby"># -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/focal64"
  config.vm.hostname = "mydevbox"
  config.vm.provision :ansible do |ansible|
    ansible.playbook = "provisioning/playbook.yml"
  end
end
</code></pre>

<p>When using ansible with vagrant the inventory is <a href="https://www.vagrantup.com/docs/provisioning/ansible_intro#auto-generated-inventory">auto-generated</a> when then inventory is not specified. Vagrant will store the inventory on the host at <code>.vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory</code>.</p>

<p>To execute playbooks with ansible, we need ansible installed on our host machine, for this demonstration I will be using virtualenv and then install ansible using pip:</p>

<pre><code class="bash">$ python3 -m pip install virtualenv
$ virtualenv -p $(which python3) .venv
$ source .venv/bin/activate
$ pip install ansible
</code></pre>

<p>Now that we have ansible installed, reload the VM to execute the playbook on our VM:</p>

<pre><code class="bash">$ vagrant reload --provision
...
==&gt; default: Running provisioner: ansible...
    default: Running ansible-playbook...

PLAY [all] *********************************************************************

TASK [Gathering Facts] *********************************************************
ok: [default]

TASK [ensure ntpd is at the latest version] ************************************
ok: [default]

PLAY RECAP *********************************************************************
default                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
</code></pre>

<p>Pretty neat right?</p>

<h2>Tear Down</h2>

<p>To destroy the VM:</p>

<pre><code class="bash">$ vagrant destroy --force
</code></pre>

<h2>Resources</h2>

<p>For more information on vagrant, check out their documentation:</p>

<ul>
<li><a href="https://www.vagrantup.com/docs">https://www.vagrantup.com/docs</a></li>
</ul>


<p>On provisioning documentation:</p>

<ul>
<li><a href="https://www.vagrantup.com/docs/provisioning/shell">https://www.vagrantup.com/docs/provisioning/shell</a></li>
<li><a href="https://www.vagrantup.com/docs/provisioning/docker">https://www.vagrantup.com/docs/provisioning/docker</a></li>
<li><a href="https://www.vagrantup.com/docs/provisioning/ansible_intro">https://www.vagrantup.com/docs/provisioning/ansible_intro</a></li>
</ul>


<p>I have a couple of example <code>Vagrantfile</code>s available on my github repository:</p>

<ul>
<li><a href="https://github.com/ruanbekker/vagrantfiles">https://github.com/ruanbekker/vagrantfiles</a></li>
</ul>


<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CICD With DroneCI and Gitea Using Docker Compose]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/03/09/cicd-with-droneci-and-gitea-using-docker-compose/"/>
    <updated>2021-03-09T01:10:10-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/03/09/cicd-with-droneci-and-gitea-using-docker-compose</id>
    <content type="html"><![CDATA[<p>In this post we wil set up a drone-ci and gitea stack using docker-compose and then running a test pipeline.</p>

<p>I have posted a few times about this topic, but this post will be used when I create other examples and wanting to use this post for the ones not having the stack booted yet.</p>

<h2>The Source Code</h2>

<p>All the code will be in my <a href="https://github.com/ruanbekker/drone-gitea-on-docker">github repository</a>.</p>

<p>For our <code>docker-compose.yml</code>:</p>

<pre><code>version: '3.6'

services:
  gitea:
    container_name: gitea
    image: gitea/gitea:${GITEA_VERSION:-1.10.6}
    restart: unless-stopped
    environment:
      # https://docs.gitea.io/en-us/install-with-docker/#environments-variables
      - APP_NAME="Gitea"
      - USER_UID=1000
      - USER_GID=1000
      - RUN_MODE=prod
      - DOMAIN=${IP_ADDRESS}
      - SSH_DOMAIN=${IP_ADDRESS}
      - HTTP_PORT=3000
      - ROOT_URL=http://${IP_ADDRESS}:3000
      - SSH_PORT=222
      - SSH_LISTEN_PORT=22
      - DB_TYPE=sqlite3
    ports:
      - "3000:3000"
      - "222:22"
    networks:
      - cicd_net
    volumes:
      - ./gitea:/data

  drone:
    container_name: drone
    image: drone/drone:${DRONE_VERSION:-1.6.4}
    restart: unless-stopped
    depends_on:
      - gitea
    environment:
      # https://docs.drone.io/server/provider/gitea/
      - DRONE_DATABASE_DRIVER=sqlite3
      - DRONE_DATABASE_DATASOURCE=/data/database.sqlite
      - DRONE_GITEA_SERVER=http://${IP_ADDRESS}:3000/
      - DRONE_GIT_ALWAYS_AUTH=false
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_SERVER_PROTO=http
      - DRONE_SERVER_HOST=${IP_ADDRESS}:3001
      - DRONE_TLS_AUTOCERT=false
      - DRONE_USER_CREATE=${DRONE_USER_CREATE}
      - DRONE_GITEA_CLIENT_ID=${DRONE_GITEA_CLIENT_ID}
      - DRONE_GITEA_CLIENT_SECRET=${DRONE_GITEA_CLIENT_SECRET}
    ports:
      - "3001:80"
      - "9001:9000"
    networks:
      - cicd_net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./drone:/data

  drone-runner:
    container_name: drone-runner
    image: drone/drone-runner-docker:${DRONE_RUNNER_VERSION:-1}
    restart: unless-stopped
    depends_on:
      - drone
    environment:
      # https://docs.drone.io/runner/docker/installation/linux/
      # https://docs.drone.io/server/metrics/
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_HOST=drone
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_RUNNER_NAME="${HOSTNAME}-runner"
      - DRONE_RUNNER_CAPACITY=2
      - DRONE_RUNNER_NETWORKS=cicd_net
      - DRONE_DEBUG=false
      - DRONE_TRACE=false
    ports:
      - "3002:3000"
    networks:
      - cicd_net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  cicd_net:
    name: cicd_net
</code></pre>

<p>Our <code>boot.sh</code> which we will use to override environment variables:</p>

<pre><code>#!/usr/bin/env bash

export HOSTNAME=$(hostname)
export DRONE_VERSION=1.10.1
export DRONE_RUNNER_VERSION=1.6.3
export GITEA_VERSION=1.13
export IP_ADDRESS=192.168.0.6
export MINIO_ACCESS_KEY="EXAMPLEKEY"
export MINIO_SECRET_KEY="EXAMPLESECRET"
export GITEA_ADMIN_USER="example"
export DRONE_RPC_SECRET="$(echo ${HOSTNAME} | openssl dgst -md5 -hex)"
export DRONE_USER_CREATE="username:${GITEA_ADMIN_USER},machine:false,admin:true,token:${DRONE_RPC_SECRET}"
export DRONE_GITEA_CLIENT_ID=""
export DRONE_GITEA_CLIENT_SECRET=""
docker-compose up -d

echo ""
echo "Gitea: http://${IP_ADDRESS}:3000/"
echo "Drone: http://${IP_ADDRESS}:3001/"
</code></pre>

<h2>Deploy the Stack</h2>

<p>Set the following in your <code>boot.sh</code>:</p>

<pre><code>IP_ADDRESS=192.168.0.6       -&gt; either reachable dns or ip address which will be your clone address and ui addresses.
GITEA_ADMIN_USER="giteauser" -&gt; will be the user you register with in drone
</code></pre>

<p>Now boot the stack:</p>

<pre><code>$ bash boot.sh
</code></pre>

<p><em>Note</em>: Theres a <a href="https://github.com/go-gitea/gitea/issues/7702">current issue</a> where webhooks get fired twice, if you see that just restart gitea with <code>docker restart gitea</code>.</p>

<ul>
<li><p>Head over to: <code>http://${IP_ADDRESS}:3000/user/settings/applications</code> and create a new OAuth2 Application and set the Redirect URI to <code>http://${IP_ADDRESS}:3001/login</code></p></li>
<li><p>Capture the client id and client secret and populate them in the <code>boot.sh</code> in <code>DRONE_GITEA_CLIENT_ID</code> and <code>DRONE_GITEA_CLIENT_SECRET</code> and run <code>bash boot.sh</code> again. This will give drone the correct credentials in order to authenticate with gitea.</p></li>
<li><p>Now when you head over to <code>http://${IP_ADDRESS}:3001/</code> you will be asked to authorize the application and you should be able to access drone.</p></li>
</ul>


<h2>Drone CLI</h2>

<p>Install Drone CLI:
- <a href="https://docs.drone.io/cli/install/">https://docs.drone.io/cli/install/</a></p>

<pre><code>$ curl -L https://github.com/drone/drone-cli/releases/latest/download/drone_darwin_amd64.tar.gz | tar zx
$ sudo mv drone /usr/local/bin/drone
$ chmod +x /usr/local/bin/drone
</code></pre>

<p>Get your Drone Token:
- <a href="http://$">http://$</a>{IP_ADDRESS}:3001/account</p>

<pre><code>$ export DRONE_SERVER=http://${IP_ADDRESS}:3001
$ export DRONE_TOKEN=one-from-the-account-page
drone info
</code></pre>

<h2>Build your first pipeline</h2>

<p>Create a test repo in gitea:</p>

<p><img src="https://user-images.githubusercontent.com/567298/110296470-0ad23800-7ffb-11eb-8428-af49d0ebd62d.png" alt="image" /></p>

<p>Commit a <code>.drone.yml</code> file for drone:</p>

<pre><code>kind: pipeline
type: docker
name: hello-world

trigger:
  branch:
    - master
  event:
    - push

steps:
  - name: say-hello
    image: busybox
    commands:
      - echo hello-world
</code></pre>

<p>Head over to drone and sync your repositories:</p>

<p><img src="https://user-images.githubusercontent.com/567298/110296425-00b03980-7ffb-11eb-9216-76725a62c09e.png" alt="image" /></p>

<p>Activate your repository:</p>

<p><img src="https://user-images.githubusercontent.com/567298/110296623-3523f580-7ffb-11eb-805f-db5db4dab0cb.png" alt="image" /></p>

<p>Push a commit to master and see your pipeline running:</p>

<p><img src="https://user-images.githubusercontent.com/567298/110296747-584ea500-7ffb-11eb-9909-259641a663aa.png" alt="image" /></p>

<h2>More Examples</h2>

<p>For more examples view my example section on the github repository:
- <a href="https://github.com/ruanbekker/drone-gitea-on-docker#more-examples">https://github.com/ruanbekker/drone-gitea-on-docker#more-examples</a></p>
]]></content>
  </entry>
  
</feed>
