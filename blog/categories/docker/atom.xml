<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Docker | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2017-08-26T12:01:15-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Create a Lightweight Webserver (Service) With Lighttpd on Alpine Running on Docker Swarm]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/08/26/create-a-lightweight-webserver-service-with-lighttpd-on-alpine-running-on-docker-swarm/"/>
    <updated>2017-08-26T11:37:19-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/08/26/create-a-lightweight-webserver-service-with-lighttpd-on-alpine-running-on-docker-swarm</id>
    <content type="html"><![CDATA[<p>In this post we will create a docker service that will host a static html website. We are using the <code>alpine:edge</code> image and using the <code>lighttpd</code> package as our webserver application.</p>

<h2>The Directory Structure:</h2>

<p>Our working directory consists of:</p>

<pre><code class="bash Directory Tree">$ tree
.
|-- Dockerfile
`-- htdocs
    `-- index.html

1 directory, 2 files
</code></pre>

<p>First, our <code>Dockerfile</code>:</p>

<pre><code class="bash Dockerfile">FROM alpine:edge

RUN apk update \
    &amp;&amp; apk add lighttpd \
    &amp;&amp; rm -rf /var/cache/apk/*

ADD htdocs /var/www/localhost/htdocs

CMD ["lighttpd", "-D", "-f", "/etc/lighttpd/lighttpd.conf"]
</code></pre>

<p>Then our <code>htdocs/index.html</code> which is based off bootstrap:</p>

<pre><code class="html index.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;

  &lt;head&gt;

    &lt;meta charset="utf-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"&gt;
    &lt;meta name="description" content=""&gt;
    &lt;meta name="author" content=""&gt;

    &lt;title&gt;Bare - Start Bootstrap Template&lt;/title&gt;

    &lt;!-- Bootstrap core CSS --&gt;
    &lt;link href="http://obj-cache.cloud.ruanbekker.com/static/css/bootstrap.min.css" rel="stylesheet"&gt;

    &lt;!-- Custom styles for this template --&gt;
    &lt;style&gt;
      body {
        padding-top: 54px;
      }
      @media (min-width: 992px) {
        body {
          padding-top: 56px;
        }
      }

    &lt;/style&gt;

  &lt;/head&gt;

  &lt;body&gt;

    &lt;!-- Navigation --&gt;
    &lt;nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top"&gt;
      &lt;div class="container"&gt;
        &lt;a class="navbar-brand" href="#"&gt;Start Bootstrap&lt;/a&gt;
        &lt;button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation"&gt;
          &lt;span class="navbar-toggler-icon"&gt;&lt;/span&gt;
        &lt;/button&gt;
        &lt;div class="collapse navbar-collapse" id="navbarResponsive"&gt;
          &lt;ul class="navbar-nav ml-auto"&gt;
            &lt;li class="nav-item active"&gt;
              &lt;a class="nav-link" href="#"&gt;Home
                &lt;span class="sr-only"&gt;(current)&lt;/span&gt;
              &lt;/a&gt;
            &lt;/li&gt;
            &lt;li class="nav-item"&gt;
              &lt;a class="nav-link" href="https://startbootstrap.com/template-overviews/bare/"&gt;About&lt;/a&gt;
            &lt;/li&gt;
            &lt;li class="nav-item"&gt;
              &lt;a class="nav-link" href="#"&gt;Services&lt;/a&gt;
            &lt;/li&gt;
            &lt;li class="nav-item"&gt;
              &lt;a class="nav-link" href="#"&gt;Contact&lt;/a&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/nav&gt;

    &lt;!-- Page Content --&gt;
    &lt;div class="container"&gt;

      &lt;div class="row"&gt;
        &lt;div class="col-lg-12 text-center"&gt;
          &lt;h1 class="mt-5"&gt;A Bootstrap 4 Starter Template&lt;/h1&gt;
          &lt;p class="lead"&gt;Complete with pre-defined file paths and responsive navigation!&lt;/p&gt;
          &lt;ul class="list-unstyled"&gt;
            &lt;li&gt;Bootstrap 4.0.0-beta&lt;/li&gt;
            &lt;li&gt;jQuery 3.2.1&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;!-- Bootstrap core JavaScript --&gt;
    &lt;script src="http://obj-cache.cloud.ruanbekker.com/static/js/jquery.min.js"&gt;&lt;/script&gt;
    &lt;script src="http://obj-cache.cloud.ruanbekker.com/static/js/popper.min.js"&gt;&lt;/script&gt;
    &lt;script src="http://obj-cache.cloud.ruanbekker.com/static/js/bootstrap.min.js"&gt;&lt;/script&gt;

  &lt;/body&gt;

&lt;/html&gt;
</code></pre>

<h2>Creating the Service:</h2>

<p>First we will need to build the image, for my personal projects, I like to use gitlab&rsquo;s private registry, but there are many to choose from:</p>

<pre><code class="bash Build the Image">$ docker login registry.gitlab.com
$ docker build -t registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:bootstrap .
$ docker push registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:bootstrap
</code></pre>

<p>There&rsquo;s many ways we can create the service, like using this service as a backend application, where nginx or traefik can proxy the requests through, but in this case we have nothing listening on port 80, so we will create the service and publish port 80 to the service, from the host:</p>

<pre><code class="bash Create the Service">$ docker service create \
--name web-bootstrap \
--replicas 1 \
--network appnet \
--with-registry-auth registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:bootstrap
</code></pre>

<h2>Accessing your Website:</h2>

<p>As this service will serve as our website, it should look more or less like the following:</p>

<p><img src="http://obj-cache.cloud.ruanbekker.com/lighttpd-bootstrap.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modern Reverse Proxy With Traefik on Docker Swarm]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/08/24/modern-reverse-proxy-with-traefik-on-docker-swarm/"/>
    <updated>2017-08-24T19:00:33-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/08/24/modern-reverse-proxy-with-traefik-on-docker-swarm</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/31991539/images/traefik.png" alt="" /></p>

<p><a href="https://traefik.io/">Traefik</a> is a modern load balancer and reverse proxy built for micro services.</p>

<p>We will build 4 WebServices with Traefik, where we will go through the following scenarios:</p>

<ul>
<li>Hostname Based Routingi (With Path&rsquo;s and Without)</li>
<li>Path Based Routing</li>
</ul>


<h2>Pre-Requisites:</h2>

<p>From your DNS Provider add wildcard entries to the Docker Swarm Public IPs:</p>

<ul>
<li><code>apps.domain.com</code> -> A Record to each Docker Swarm Node</li>
<li><code>*.apps.domain.com</code> => apps.doamin.com</li>
</ul>


<p>This will allow us to create web applications on the fly.</p>

<h2>Static Website with Traefik:</h2>

<p>Create Traefik Proxy:</p>

<pre><code>docker service create \
--name traefik \
--constraint 'node.role==manager' \
--publish 80:80 \
--publish 443:443 \
--publish 8080:8080 \
--mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \
--network appnet \
traefik:camembert \
--docker --docker.swarmmode  \
--docker.domain=apps.domain.com \
--docker.watch \
--logLevel=DEBUG \
--web
</code></pre>

<h2>Build a WebService with 2 Endpoints:</h2>

<p>Our Website will have:</p>

<ul>
<li><code>/</code></li>
<li><code>/test/</code></li>
</ul>


<p>Our <code>Dockerfile</code>:</p>

<pre><code>FROM alpine:edge

RUN apk update \
    &amp;&amp; apk add lighttpd

ADD htdocs /var/www/localhost/htdocs

CMD ["lighttpd", "-D", "-f", "/etc/lighttpd/lighttpd.conf"]
</code></pre>

<p>Our <code>htdocs</code> directory:</p>

<pre><code>find ./htdocs/
./htdocs/
./htdocs/index.html
./htdocs/test
./htdocs/test/index.html
</code></pre>

<p>Building and Push the Image to a Registry of your choice:</p>

<pre><code>docker login registry.gitlab.com
docker build -t registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:test
docker push registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:test
</code></pre>

<h2>Create the 1st Service, No Hostname or Path based specified:</h2>

<p>The Service will allow us to view <code>/</code> and <code>/test/</code> paths, and also enable us to use the service name as the subdomain, or the domain specified in the <code>traefik</code> service:</p>

<pre><code>docker service create --name web1 --label 'traefik.port=80'  --network appnet --with-registry-auth registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:test
</code></pre>

<p>Testing the service:</p>

<pre><code>$ curl http://web1.apps.domain.com/
&lt;html&gt;
Root Page
&lt;/html&gt;
</code></pre>

<pre><code>$ curl http://web2.apps.domain.com/test/
&lt;html&gt;
Test Page
&lt;/html&gt;
</code></pre>

<p>and</p>

<pre><code>$ curl http://apps.domain.com/test/
&lt;html&gt;
Test Page
&lt;/html&gt;
</code></pre>

<p>but</p>

<pre><code>$ curl http://foo.apps.domain.com/test/
404 page not found
</code></pre>

<h2>Create the 2nd Service, Only 1 Path Based Routing:</h2>

<p>This service will only allow us to view the <code>/test/</code> endpoint:</p>

<pre><code>$ docker service create --name website2 --label 'traefik.port=80' --label traefik.frontend.rule="Path: /test/" --network appnet --with-registry-auth registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:test
</code></pre>

<p>Testing the Service:</p>

<pre><code>$ curl http://web1.apps.domain.com/
404 page not found
</code></pre>

<pre><code>$ curl http://web2.apps.domain.com/test/
&lt;html&gt;
Test Page
&lt;/html&gt;
</code></pre>

<h2>Hostname Based and Path Based Routing:</h2>

<pre><code>$ docker service create \
--name web3 \
--label 'traefik.port=80' \
--label traefik.frontend.rule="Host:apps.domain.com; Path: /test/" \
--network appnet \
--with-registry-auth registry.gitlab.com/rbekker87/docker/lighttpd:u1t-test
</code></pre>

<p>Test the <code>/</code> endpoint, which should not work:</p>

<pre><code>$ curl  http://apps.domain.com/
404 page not found
</code></pre>

<p>and the <code>/test/</code> endpoint:</p>

<pre><code>$ curl  http://apps.domain.com/test/
&lt;html&gt;
Test Page
&lt;/html&gt;
</code></pre>

<p>Also, any other FQDN that is specified will not work as it does not match the <code>traefik.frontend.rule</code>:</p>

<pre><code>$ curl  http://web3.apps.domain.com/
404 page not found
</code></pre>

<h2>Strictly Hostname Based Routing and not specifying any paths:</h2>

<pre><code>$ docker service create \
--name web4 \
--label 'traefik.port=80' \
--label traefik.frontend.rule="Host:apps.domain.com" \
--network appnet \
--with-registry-auth registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:u1t-test
</code></pre>

<p>Testing the Service:</p>

<pre><code>$ curl http://apps.domain.com/
&lt;html&gt;
Root Page
&lt;/html&gt;
</code></pre>

<pre><code>$ curl http://apps.domain.com/test/
&lt;html&gt;
Test Page
&lt;/html&gt;
</code></pre>

<p>Anything specified other than that, will result in a 404 Response.</p>
]]></content>
  </entry>
  
</feed>
