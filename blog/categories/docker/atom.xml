<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Docker | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2017-09-07T12:04:26-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Create a Local Docker Swarm Cluster With Docker in Docker on Your Workstation]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/07/how-to-create-a-local-docker-swarm-cluster-with-docker-in-docker-on-your-workstation/"/>
    <updated>2017-09-07T04:03:37-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/07/how-to-create-a-local-docker-swarm-cluster-with-docker-in-docker-on-your-workstation</id>
    <content type="html"><![CDATA[<p>Creating a Docker Swarm Cluster, locally on your Workstation using Docker in Docker (DID) for testing Purposes:</p>

<h2>Project Resources:</h2>

<ul>
<li><a href="https://hub.docker.com/_/docker/">Docker in Docker</a></li>
<li><a href="https://docs.traefik.io/">Traefik</a></li>
</ul>


<h2>Create The Nodes:</h2>

<p>Create the Docker containers that will act as our Docker nodes:</p>

<pre><code class="bash">$ docker run --privileged --name docker-node1 -v /Users/ruan/docker/did/vols/node1:/var/lib/docker -d docker:dind --storage-driver=vfs
$ docker run --privileged --name docker-node2 -v /Users/ruan/docker/did/vols/node2:/var/lib/docker -d docker:dind --storage-driver=vfs
$ docker run --privileged --name docker-node3 -v /Users/ruan/docker/did/vols/node3:/var/lib/docker -d docker:dind --storage-driver=vfs
</code></pre>

<h2>Initialize the Swarm:</h2>

<p>Log onto the manager node:</p>

<pre><code class="bash">$ docker exec -it docker-node1 sh
</code></pre>

<p>Initialize the Swarm:</p>

<pre><code class="bash">$ docker swarm init --advertise-addr eth0
Swarm initialized: current node (17ydtkqdwxzwea2riadxj4zbw) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-4goolm8dvwictc7d39aonpcv6ca1pfj31q7irjga17o2srzf6f-b4k3hln6ogvjgmnbs1qxnjvj9 172.17.0.2:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.
</code></pre>

<p>Join the Worker Nodes to the Swarm:</p>

<pre><code class="bash">$ docker exec -it docker-node2 sh
/ # docker swarm join --token SWMTKN-1-4mvb68vefr3dogxr6omu3uq04r4gddftdbmfomxo9pefks9siu-3t7ua7k2xigl9rwgp4dwzcxm0 172.17.0.2:2377
This node joined a swarm as a worker.
</code></pre>

<pre><code class="bash">$ docker exec -it docker-node3 sh
/ # docker swarm join --token SWMTKN-1-4mvb68vefr3dogxr6omu3uq04r4gddftdbmfomxo9pefks9siu-3t7ua7k2xigl9rwgp4dwzcxm0 172.17.0.2:2377
This node joined a swarm as a worker.
</code></pre>

<h2>List the Nodes:</h2>

<p>Log onto the Manager node and list the nodes:</p>

<pre><code class="bash">$ docker exec -it docker-node1 sh
/ # docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS
1hnq4b4w87w6trobwye5ap4sh *   5657c28bf618        Ready               Active              Leader
wglbb029g1kczttiaf5r6iavi     b2924bb8e555        Ready               Active
xxr9kdqy49u2tx61w31ife90j     6622a06a1b3c        Ready               Active
</code></pre>

<h2>Traefik:</h2>

<p>Creating a HTTP Reverse Proxy, using Traefik:</p>

<pre><code class="bash">$ docker network create --driver overlay traefik-net
$ docker service create \
--name traefik \
--constraint 'node.role==manager' \
--publish 80:80 \
--publish 8080:8080 \
--mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \
--network traefik-net \
traefik:camembert --docker --docker.swarmmode --docker.domain=ruanbekker.internal --docker.watch --logLevel=DEBUG --web
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Alpine Nginx PHP-Fpm Image on Docker for PHP Applications]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/08/26/building-a-alpine-nginx-php-fpm-image-on-docker-for-php-applications/"/>
    <updated>2017-08-26T20:41:16-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/08/26/building-a-alpine-nginx-php-fpm-image-on-docker-for-php-applications</id>
    <content type="html"><![CDATA[<p>A Post on Building a Alpine Based Image that will serve PHP Pages, using Nginx and PHP-FPM5.</p>

<p>I have a lot of modules enabled, which might not be neccesary, but in my case I wanted to have a couple of them enabled, for testing.</p>

<h2>One of the Requirements:</h2>

<p>One of the requirements was that I needed SMTP support from the container as I am using <a href="https://startbootstrap.com/template-overviews/freelancer/">Startbootstrap Freelancer Theme</a>, which I configured to relay mail from the contact from to one of my external relay hosts.</p>

<h2>Our Directory Structure:</h2>

<p>Our data that we will be working with will consist of our <code>Dockerfile</code>, our <code>website files</code>, <code>nginx config</code>, and a <code>wrapper script</code> that will control nginx and php-fpm5 processes:</p>

<pre><code class="bash Directory Structure">.
|-- Dockerfile
|-- README.md
|-- html
|   |-- css
|   |-- fonts
|   |-- img
|   |-- index.html
|   |-- js
|   `-- mail
|       `-- contact.php
|-- nginx.conf
|-- start_nginx.sh
|-- start_php-fpm5.sh
`-- wrapper.sh
</code></pre>

<h2>Going into Some Detail:</h2>

<p>First, our <code>Dockerfile</code>, which you will see I started the image from Apline:</p>

<pre><code class="docker Dockerfile">FROM alpine:edge

RUN apk update \
    &amp;&amp; apk add nginx \
    &amp;&amp; adduser -D -u 1000 -g 'www' www \
    &amp;&amp; mkdir /www \
    &amp;&amp; chown -R www:www /var/lib/nginx \
    &amp;&amp; chown -R www:www /www \
    &amp;&amp; rm -rf /etc/nginx/nginx.conf

ENV PHP_FPM_USER="www"
ENV PHP_FPM_GROUP="www"
ENV PHP_FPM_LISTEN_MODE="0660"
ENV PHP_MEMORY_LIMIT="512M"
ENV PHP_MAX_UPLOAD="50M"
ENV PHP_MAX_FILE_UPLOAD="200"
ENV PHP_MAX_POST="100M"
ENV PHP_DISPLAY_ERRORS="On"
ENV PHP_DISPLAY_STARTUP_ERRORS="On"
ENV PHP_ERROR_REPORTING="E_COMPILE_ERROR\|E_RECOVERABLE_ERROR\|E_ERROR\|E_CORE_ERROR"
ENV PHP_CGI_FIX_PATHINFO=0
ENV TIMEZONE="Africa/Johannesburg"

RUN apk add curl \
    ssmtp \
    tzdata \
    php5-fpm \
    php5-mcrypt \
    php5-soap \
    php5-openssl \
    php5-gmp \
    php5-pdo_odbc \
    php5-json \
    php5-dom \
    php5-pdo \
    php5-zip \
    php5-mysql \
    php5-mysqli \
    php5-sqlite3 \
    php5-pdo_pgsql \
    php5-bcmath \
    php5-gd \
    php5-odbc \
    php5-pdo_mysql \
    php5-pdo_sqlite \
    php5-gettext \
    php5-xmlreader \
    php5-xmlrpc \
    php5-bz2 \
    php5-iconv \
    php5-pdo_dblib \
    php5-curl \
    php5-ctype

RUN sed -i "s|;listen.owner\s*=\s*nobody|listen.owner = ${PHP_FPM_USER}|g" /etc/php5/php-fpm.conf \
    &amp;&amp; sed -i "s|;listen.group\s*=\s*nobody|listen.group = ${PHP_FPM_GROUP}|g" /etc/php5/php-fpm.conf \
    &amp;&amp; sed -i "s|;listen.mode\s*=\s*0660|listen.mode = ${PHP_FPM_LISTEN_MODE}|g" /etc/php5/php-fpm.conf \
    &amp;&amp; sed -i "s|user\s*=\s*nobody|user = ${PHP_FPM_USER}|g" /etc/php5/php-fpm.conf \
    &amp;&amp; sed -i "s|group\s*=\s*nobody|group = ${PHP_FPM_GROUP}|g" /etc/php5/php-fpm.conf \
    &amp;&amp; sed -i "s|;log_level\s*=\s*notice|log_level = notice|g" /etc/php5/php-fpm.conf \
    &amp;&amp; sed -i 's/include\ \=\ \/etc\/php5\/fpm.d\/\*.conf/\;include\ \=\ \/etc\/php5\/fpm.d\/\*.conf/g' /etc/php5/php-fpm.conf

RUN sed -i "s|display_errors\s*=\s*Off|display_errors = ${PHP_DISPLAY_ERRORS}|i" /etc/php5/php.ini \
    &amp;&amp; sed -i "s|display_startup_errors\s*=\s*Off|display_startup_errors = ${PHP_DISPLAY_STARTUP_ERRORS}|i" /etc/php5/php.ini \
    &amp;&amp; sed -i "s|error_reporting\s*=\s*E_ALL &amp; ~E_DEPRECATED &amp; ~E_STRICT|error_reporting = ${PHP_ERROR_REPORTING}|i" /etc/php5/php.ini \
    &amp;&amp; sed -i "s|;*memory_limit =.*|memory_limit = ${PHP_MEMORY_LIMIT}|i" /etc/php5/php.ini \
    &amp;&amp; sed -i "s|;*upload_max_filesize =.*|upload_max_filesize = ${PHP_MAX_UPLOAD}|i" /etc/php5/php.ini \
    &amp;&amp; sed -i "s|;*max_file_uploads =.*|max_file_uploads = ${PHP_MAX_FILE_UPLOAD}|i" /etc/php5/php.ini \
    &amp;&amp; sed -i "s|;*post_max_size =.*|post_max_size = ${PHP_MAX_POST}|i" /etc/php5/php.ini \
    &amp;&amp; sed -i "s|;*cgi.fix_pathinfo=.*|cgi.fix_pathinfo= ${PHP_CGI_FIX_PATHINFO}|i" /etc/php5/php.ini
    &amp;&amp; sed -i 's/smtp_port\ =\ 25/smtp_port\ =\ 81/g' /etc/php5/php.ini \
    &amp;&amp; sed -i 's/SMTP\ =\ localhost/SMTP\ =\ mail.bekkersolutions.com/g' /etc/php5/php.ini \
    &amp;&amp; sed -i 's/;sendmail_path\ =/sendmail_path\ =\ \/usr\/sbin\/sendmail\ -t/g' /etc/php5/php.ini 

RUN rm -rf /etc/localtime \
    &amp;&amp; ln -s /usr/share/zoneinfo/${TIMEZONE} /etc/localtime \
    &amp;&amp; echo "${TIMEZONE}" &gt; /etc/timezone \
    &amp;&amp; sed -i "s|;*date.timezone =.*|date.timezone = ${TIMEZONE}|i" /etc/php5/php.ini \ 
    &amp;&amp; echo 'sendmail_path = "/usr/sbin/ssmtp -t "' &gt; /etc/php5/conf.d/mail.ini \
    &amp;&amp; sed -i 's/mailhub=mail/mailhub=mail.domain.com\:81/g' /etc/ssmtp/ssmtp.conf 

COPY nginx.conf /etc/nginx/nginx.conf
COPY index.php /www/index.php
COPY test.html /www/test.html
COPY start_nginx.sh /start_nginx.sh
COPY start_php-fpm5.sh /start_php-fpm5.sh
COPY wrapper.sh /wrapper.sh

RUN chmod +x /start_nginx.sh /start_php-fpm5.sh /wrapper.sh

CMD ["/wrapper.sh"]
</code></pre>

<p>Next, our <code>nginx.conf</code> configuration file:</p>

<pre><code class="nginx nginx.conf">user                            www;
worker_processes                1;

error_log                       /var/log/nginx/error.log warn;
pid                             /var/run/nginx.pid;

events {
    worker_connections          1024;
}

http {
    include                     /etc/nginx/mime.types;
    default_type                application/octet-stream;
    sendfile                    on;
    access_log                  /var/log/nginx/access.log;
    keepalive_timeout           3000;

    server {
        listen                  80;
        root                    /www;
        index                   index.html index.htm index.php;
        server_name             _;
        client_max_body_size    32m;
        error_page              500 502 503 504  /50x.html;

        location = /50x.html {
              root              /var/lib/nginx/html;
        }

        location ~ \.php$ {
              fastcgi_pass      127.0.0.1:9000;
              fastcgi_index     index.php;
              include           fastcgi.conf;
        }
    }
}
</code></pre>

<p>Then our directory, <code>html</code>  that will consist our websites data, for a simple example, I will create a sample <code>index.php</code> page which can be used:</p>

<pre><code class="php html/index.php">&lt;?php
$word = "foo";
echo "The word is: $word\n";
?&gt;
</code></pre>

<p>Then, following our <code>wrapper.sh</code> script that will start our <code>php-fpm5</code>, and <code>nginx</code> processes, and then monitor these processes, if one of the processes have to exit, the wrapper script will return a exit code, which will result the container to exit, if there is anything wrong with the service:</p>

<p>The PHP-FPM script:</p>

<pre><code class="bash start_php-fpm5.sh">#!/bin/sh
/usr/bin/php-fpm5
</code></pre>

<p>The Nginx Script:</p>

<pre><code class="bash start_nginx.sh">#!/bin/sh
/usr/sbin/nginx -c /etc/nginx/nginx.conf
</code></pre>

<p>The Wrapper Script:</p>

<pre><code class="bash wrapper.sh">#!/bin/sh

/start_php-fpm5.sh -D
status=$?
if [ $status -ne 0 ]; then
  echo "php-fpm5 Failed: $status"
  exit $status
  else echo "Starting PHP-FPM: OK"
fi

sleep 2

/start_nginx.sh -D
status=$?
if [ $status -ne 0 ]; then
  echo "Nginx Failed: $status"
  exit $status
  else echo "Starting Nginx: OK"
fi

sleep 2

while /bin/true; do
  ps aux | grep 'php-fpm: master process' | grep -q -v grep
  PHP_FPM_STATUS=$?
  echo "Checking PHP-FPM, Status Code: $PHP_FPM_STATUS"
  sleep 2

  ps aux | grep 'nginx: master process' | grep -q -v grep
  NGINX_STATUS=$?
  echo "Checking NGINX, Status Code: $NGINX_STATUS"
  sleep 2

  if [ $PHP_FPM_STATUS -ne 0 ];
    then
      echo "$(date +%F_%T) FATAL: PHP-FPM Raised a Status Code of $PHP_FPM_STATUS and exited"
      exit -1

   elif [ $NGINX_STATUS -ne 0 ];
     then
       echo "$(date +%F_%T) FATAL: NGINX Raised a Status Code of $NGINX_STATUS and exited"
       exit -1

   else
     sleep 2
        echo "$(date +%F_%T) - HealtCheck: NGINX and PHP-FPM: OK"
  fi
  sleep 60
done
</code></pre>

<h2>Building the Image:</h2>

<p>I am primarily using docker swarm, so I am building the image, and pushing to a private registry:</p>

<pre><code class="bash Build and Push the Image">$ docker build -t registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/alpine:php5 .
$ docker push registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/alpine:php5
</code></pre>

<p>Create the PHP Service:</p>

<pre><code class="bash Create a Docker Service">$ docker service create \
--name php-app \
--network appnet \
--replicas 3 \
--with-registry-auth registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/alpine:php5
</code></pre>

<p>For a Container from the Image on the Host:</p>

<pre><code class="bash Run a Container from the Image">$ docker run -itd --name php-app -p 80:80 registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/alpine:php5
</code></pre>

<p>Test the Web App:</p>

<pre><code class="bash Make a GET Request">$ curl -XGET http://127.0.0.1:80/
The word is: foo
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Lightweight Webserver (Service) With Lighttpd on Alpine Running on Docker Swarm]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/08/26/create-a-lightweight-webserver-service-with-lighttpd-on-alpine-running-on-docker-swarm/"/>
    <updated>2017-08-26T11:37:19-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/08/26/create-a-lightweight-webserver-service-with-lighttpd-on-alpine-running-on-docker-swarm</id>
    <content type="html"><![CDATA[<p>In this post we will create a docker service that will host a static html website. We are using the <code>alpine:edge</code> image and using the <code>lighttpd</code> package as our webserver application.</p>

<h2>The Directory Structure:</h2>

<p>Our working directory consists of:</p>

<pre><code class="bash Directory Tree">$ tree
.
|-- Dockerfile
`-- htdocs
    `-- index.html

1 directory, 2 files
</code></pre>

<p>First, our <code>Dockerfile</code>:</p>

<pre><code class="bash Dockerfile">FROM alpine:edge

RUN apk update \
    &amp;&amp; apk add lighttpd \
    &amp;&amp; rm -rf /var/cache/apk/*

ADD htdocs /var/www/localhost/htdocs

CMD ["lighttpd", "-D", "-f", "/etc/lighttpd/lighttpd.conf"]
</code></pre>

<p>Then our <code>htdocs/index.html</code> which is based off bootstrap:</p>

<pre><code class="html index.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;

  &lt;head&gt;

    &lt;meta charset="utf-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"&gt;
    &lt;meta name="description" content=""&gt;
    &lt;meta name="author" content=""&gt;

    &lt;title&gt;Bare - Start Bootstrap Template&lt;/title&gt;

    &lt;!-- Bootstrap core CSS --&gt;
    &lt;link href="http://obj-cache.cloud.ruanbekker.com/static/css/bootstrap.min.css" rel="stylesheet"&gt;

    &lt;!-- Custom styles for this template --&gt;
    &lt;style&gt;
      body {
        padding-top: 54px;
      }
      @media (min-width: 992px) {
        body {
          padding-top: 56px;
        }
      }

    &lt;/style&gt;

  &lt;/head&gt;

  &lt;body&gt;

    &lt;!-- Navigation --&gt;
    &lt;nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top"&gt;
      &lt;div class="container"&gt;
        &lt;a class="navbar-brand" href="#"&gt;Start Bootstrap&lt;/a&gt;
        &lt;button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation"&gt;
          &lt;span class="navbar-toggler-icon"&gt;&lt;/span&gt;
        &lt;/button&gt;
        &lt;div class="collapse navbar-collapse" id="navbarResponsive"&gt;
          &lt;ul class="navbar-nav ml-auto"&gt;
            &lt;li class="nav-item active"&gt;
              &lt;a class="nav-link" href="#"&gt;Home
                &lt;span class="sr-only"&gt;(current)&lt;/span&gt;
              &lt;/a&gt;
            &lt;/li&gt;
            &lt;li class="nav-item"&gt;
              &lt;a class="nav-link" href="https://startbootstrap.com/template-overviews/bare/"&gt;About&lt;/a&gt;
            &lt;/li&gt;
            &lt;li class="nav-item"&gt;
              &lt;a class="nav-link" href="#"&gt;Services&lt;/a&gt;
            &lt;/li&gt;
            &lt;li class="nav-item"&gt;
              &lt;a class="nav-link" href="#"&gt;Contact&lt;/a&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/nav&gt;

    &lt;!-- Page Content --&gt;
    &lt;div class="container"&gt;

      &lt;div class="row"&gt;
        &lt;div class="col-lg-12 text-center"&gt;
          &lt;h1 class="mt-5"&gt;A Bootstrap 4 Starter Template&lt;/h1&gt;
          &lt;p class="lead"&gt;Complete with pre-defined file paths and responsive navigation!&lt;/p&gt;
          &lt;ul class="list-unstyled"&gt;
            &lt;li&gt;Bootstrap 4.0.0-beta&lt;/li&gt;
            &lt;li&gt;jQuery 3.2.1&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;!-- Bootstrap core JavaScript --&gt;
    &lt;script src="http://obj-cache.cloud.ruanbekker.com/static/js/jquery.min.js"&gt;&lt;/script&gt;
    &lt;script src="http://obj-cache.cloud.ruanbekker.com/static/js/popper.min.js"&gt;&lt;/script&gt;
    &lt;script src="http://obj-cache.cloud.ruanbekker.com/static/js/bootstrap.min.js"&gt;&lt;/script&gt;

  &lt;/body&gt;

&lt;/html&gt;
</code></pre>

<h2>Creating the Service:</h2>

<p>First we will need to build the image, for my personal projects, I like to use gitlab&rsquo;s private registry, but there are many to choose from:</p>

<pre><code class="bash Build the Image">$ docker login registry.gitlab.com
$ docker build -t registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:bootstrap .
$ docker push registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:bootstrap
</code></pre>

<p>There&rsquo;s many ways we can create the service, like using this service as a backend application, where nginx or traefik can proxy the requests through, but in this case we have nothing listening on port 80, so we will create the service and publish port 80 to the service, from the host:</p>

<pre><code class="bash Create the Service">$ docker service create \
--name web-bootstrap \
--replicas 1 \
--network appnet \
--with-registry-auth registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:bootstrap
</code></pre>

<h2>Accessing your Website:</h2>

<p>As this service will serve as our website, it should look more or less like the following:</p>

<p><img src="http://obj-cache.cloud.ruanbekker.com/lighttpd-bootstrap.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modern Reverse Proxy With Traefik on Docker Swarm]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/08/24/modern-reverse-proxy-with-traefik-on-docker-swarm/"/>
    <updated>2017-08-24T19:00:33-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/08/24/modern-reverse-proxy-with-traefik-on-docker-swarm</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/31991539/images/traefik.png" alt="" /></p>

<p><a href="https://traefik.io/">Traefik</a> is a modern load balancer and reverse proxy built for micro services.</p>

<p>We will build 4 WebServices with Traefik, where we will go through the following scenarios:</p>

<ul>
<li>Hostname Based Routingi (With Path&rsquo;s and Without)</li>
<li>Path Based Routing</li>
</ul>


<h2>Pre-Requisites:</h2>

<p>From your DNS Provider add wildcard entries to the Docker Swarm Public IPs:</p>

<ul>
<li><code>apps.domain.com</code> -> A Record to each Docker Swarm Node</li>
<li><code>*.apps.domain.com</code> => apps.doamin.com</li>
</ul>


<p>This will allow us to create web applications on the fly.</p>

<h2>Static Website with Traefik:</h2>

<p>Create Traefik Proxy:</p>

<pre><code>docker service create \
--name traefik \
--constraint 'node.role==manager' \
--publish 80:80 \
--publish 443:443 \
--publish 8080:8080 \
--mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \
--network appnet \
traefik:camembert \
--docker --docker.swarmmode  \
--docker.domain=apps.domain.com \
--docker.watch \
--logLevel=DEBUG \
--web
</code></pre>

<h2>Build a WebService with 2 Endpoints:</h2>

<p>Our Website will have:</p>

<ul>
<li><code>/</code></li>
<li><code>/test/</code></li>
</ul>


<p>Our <code>Dockerfile</code>:</p>

<pre><code>FROM alpine:edge

RUN apk update \
    &amp;&amp; apk add lighttpd

ADD htdocs /var/www/localhost/htdocs

CMD ["lighttpd", "-D", "-f", "/etc/lighttpd/lighttpd.conf"]
</code></pre>

<p>Our <code>htdocs</code> directory:</p>

<pre><code>find ./htdocs/
./htdocs/
./htdocs/index.html
./htdocs/test
./htdocs/test/index.html
</code></pre>

<p>Building and Push the Image to a Registry of your choice:</p>

<pre><code>docker login registry.gitlab.com
docker build -t registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:test
docker push registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:test
</code></pre>

<h2>Create the 1st Service, No Hostname or Path based specified:</h2>

<p>The Service will allow us to view <code>/</code> and <code>/test/</code> paths, and also enable us to use the service name as the subdomain, or the domain specified in the <code>traefik</code> service:</p>

<pre><code>docker service create --name web1 --label 'traefik.port=80'  --network appnet --with-registry-auth registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:test
</code></pre>

<p>Testing the service:</p>

<pre><code>$ curl http://web1.apps.domain.com/
&lt;html&gt;
Root Page
&lt;/html&gt;
</code></pre>

<pre><code>$ curl http://web2.apps.domain.com/test/
&lt;html&gt;
Test Page
&lt;/html&gt;
</code></pre>

<p>and</p>

<pre><code>$ curl http://apps.domain.com/test/
&lt;html&gt;
Test Page
&lt;/html&gt;
</code></pre>

<p>but</p>

<pre><code>$ curl http://foo.apps.domain.com/test/
404 page not found
</code></pre>

<h2>Create the 2nd Service, Only 1 Path Based Routing:</h2>

<p>This service will only allow us to view the <code>/test/</code> endpoint:</p>

<pre><code>$ docker service create --name website2 --label 'traefik.port=80' --label traefik.frontend.rule="Path: /test/" --network appnet --with-registry-auth registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:test
</code></pre>

<p>Testing the Service:</p>

<pre><code>$ curl http://web1.apps.domain.com/
404 page not found
</code></pre>

<pre><code>$ curl http://web2.apps.domain.com/test/
&lt;html&gt;
Test Page
&lt;/html&gt;
</code></pre>

<h2>Hostname Based and Path Based Routing:</h2>

<pre><code>$ docker service create \
--name web3 \
--label 'traefik.port=80' \
--label traefik.frontend.rule="Host:apps.domain.com; Path: /test/" \
--network appnet \
--with-registry-auth registry.gitlab.com/rbekker87/docker/lighttpd:u1t-test
</code></pre>

<p>Test the <code>/</code> endpoint, which should not work:</p>

<pre><code>$ curl  http://apps.domain.com/
404 page not found
</code></pre>

<p>and the <code>/test/</code> endpoint:</p>

<pre><code>$ curl  http://apps.domain.com/test/
&lt;html&gt;
Test Page
&lt;/html&gt;
</code></pre>

<p>Also, any other FQDN that is specified will not work as it does not match the <code>traefik.frontend.rule</code>:</p>

<pre><code>$ curl  http://web3.apps.domain.com/
404 page not found
</code></pre>

<h2>Strictly Hostname Based Routing and not specifying any paths:</h2>

<pre><code>$ docker service create \
--name web4 \
--label 'traefik.port=80' \
--label traefik.frontend.rule="Host:apps.domain.com" \
--network appnet \
--with-registry-auth registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:u1t-test
</code></pre>

<p>Testing the Service:</p>

<pre><code>$ curl http://apps.domain.com/
&lt;html&gt;
Root Page
&lt;/html&gt;
</code></pre>

<pre><code>$ curl http://apps.domain.com/test/
&lt;html&gt;
Test Page
&lt;/html&gt;
</code></pre>

<p>Anything specified other than that, will result in a 404 Response.</p>
]]></content>
  </entry>
  
</feed>
