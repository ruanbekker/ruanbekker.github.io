<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Docker | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/docker/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2021-07-12T02:37:56-04:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CICD With DroneCI and Gitea Using Docker Compose]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/03/09/cicd-with-droneci-and-gitea-using-docker-compose/"/>
    <updated>2021-03-09T01:10:10-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/03/09/cicd-with-droneci-and-gitea-using-docker-compose</id>
    <content type="html"><![CDATA[<p>In this post we wil set up a drone-ci and gitea stack using docker-compose and then running a test pipeline.</p>

<p>I have posted a few times about this topic, but this post will be used when I create other examples and wanting to use this post for the ones not having the stack booted yet.</p>

<h2>The Source Code</h2>

<p>All the code will be in my <a href="https://github.com/ruanbekker/drone-gitea-on-docker">github repository</a>.</p>

<p>For our <code>docker-compose.yml</code>:</p>

<pre><code>version: '3.6'

services:
  gitea:
    container_name: gitea
    image: gitea/gitea:${GITEA_VERSION:-1.10.6}
    restart: unless-stopped
    environment:
      # https://docs.gitea.io/en-us/install-with-docker/#environments-variables
      - APP_NAME="Gitea"
      - USER_UID=1000
      - USER_GID=1000
      - RUN_MODE=prod
      - DOMAIN=${IP_ADDRESS}
      - SSH_DOMAIN=${IP_ADDRESS}
      - HTTP_PORT=3000
      - ROOT_URL=http://${IP_ADDRESS}:3000
      - SSH_PORT=222
      - SSH_LISTEN_PORT=22
      - DB_TYPE=sqlite3
    ports:
      - "3000:3000"
      - "222:22"
    networks:
      - cicd_net
    volumes:
      - ./gitea:/data

  drone:
    container_name: drone
    image: drone/drone:${DRONE_VERSION:-1.6.4}
    restart: unless-stopped
    depends_on:
      - gitea
    environment:
      # https://docs.drone.io/server/provider/gitea/
      - DRONE_DATABASE_DRIVER=sqlite3
      - DRONE_DATABASE_DATASOURCE=/data/database.sqlite
      - DRONE_GITEA_SERVER=http://${IP_ADDRESS}:3000/
      - DRONE_GIT_ALWAYS_AUTH=false
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_SERVER_PROTO=http
      - DRONE_SERVER_HOST=${IP_ADDRESS}:3001
      - DRONE_TLS_AUTOCERT=false
      - DRONE_USER_CREATE=${DRONE_USER_CREATE}
      - DRONE_GITEA_CLIENT_ID=${DRONE_GITEA_CLIENT_ID}
      - DRONE_GITEA_CLIENT_SECRET=${DRONE_GITEA_CLIENT_SECRET}
    ports:
      - "3001:80"
      - "9001:9000"
    networks:
      - cicd_net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./drone:/data

  drone-runner:
    container_name: drone-runner
    image: drone/drone-runner-docker:${DRONE_RUNNER_VERSION:-1}
    restart: unless-stopped
    depends_on:
      - drone
    environment:
      # https://docs.drone.io/runner/docker/installation/linux/
      # https://docs.drone.io/server/metrics/
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_HOST=drone
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_RUNNER_NAME="${HOSTNAME}-runner"
      - DRONE_RUNNER_CAPACITY=2
      - DRONE_RUNNER_NETWORKS=cicd_net
      - DRONE_DEBUG=false
      - DRONE_TRACE=false
    ports:
      - "3002:3000"
    networks:
      - cicd_net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  cicd_net:
    name: cicd_net
</code></pre>

<p>Our <code>boot.sh</code> which we will use to override environment variables:</p>

<pre><code>#!/usr/bin/env bash

export HOSTNAME=$(hostname)
export DRONE_VERSION=1.10.1
export DRONE_RUNNER_VERSION=1.6.3
export GITEA_VERSION=1.13
export IP_ADDRESS=192.168.0.6
export MINIO_ACCESS_KEY="EXAMPLEKEY"
export MINIO_SECRET_KEY="EXAMPLESECRET"
export GITEA_ADMIN_USER="example"
export DRONE_RPC_SECRET="$(echo ${HOSTNAME} | openssl dgst -md5 -hex)"
export DRONE_USER_CREATE="username:${GITEA_ADMIN_USER},machine:false,admin:true,token:${DRONE_RPC_SECRET}"
export DRONE_GITEA_CLIENT_ID=""
export DRONE_GITEA_CLIENT_SECRET=""
docker-compose up -d

echo ""
echo "Gitea: http://${IP_ADDRESS}:3000/"
echo "Drone: http://${IP_ADDRESS}:3001/"
</code></pre>

<h2>Deploy the Stack</h2>

<p>Set the following in your <code>boot.sh</code>:</p>

<pre><code>IP_ADDRESS=192.168.0.6       -&gt; either reachable dns or ip address which will be your clone address and ui addresses.
GITEA_ADMIN_USER="giteauser" -&gt; will be the user you register with in drone
</code></pre>

<p>Now boot the stack:</p>

<pre><code>$ bash boot.sh
</code></pre>

<p><em>Note</em>: Theres a <a href="https://github.com/go-gitea/gitea/issues/7702">current issue</a> where webhooks get fired twice, if you see that just restart gitea with <code>docker restart gitea</code>.</p>

<ul>
<li><p>Head over to: <code>http://${IP_ADDRESS}:3000/user/settings/applications</code> and create a new OAuth2 Application and set the Redirect URI to <code>http://${IP_ADDRESS}:3001/login</code></p></li>
<li><p>Capture the client id and client secret and populate them in the <code>boot.sh</code> in <code>DRONE_GITEA_CLIENT_ID</code> and <code>DRONE_GITEA_CLIENT_SECRET</code> and run <code>bash boot.sh</code> again. This will give drone the correct credentials in order to authenticate with gitea.</p></li>
<li><p>Now when you head over to <code>http://${IP_ADDRESS}:3001/</code> you will be asked to authorize the application and you should be able to access drone.</p></li>
</ul>


<h2>Drone CLI</h2>

<p>Install Drone CLI:
- <a href="https://docs.drone.io/cli/install/">https://docs.drone.io/cli/install/</a></p>

<pre><code>$ curl -L https://github.com/drone/drone-cli/releases/latest/download/drone_darwin_amd64.tar.gz | tar zx
$ sudo mv drone /usr/local/bin/drone
$ chmod +x /usr/local/bin/drone
</code></pre>

<p>Get your Drone Token:
- <a href="http://$">http://$</a>{IP_ADDRESS}:3001/account</p>

<pre><code>$ export DRONE_SERVER=http://${IP_ADDRESS}:3001
$ export DRONE_TOKEN=one-from-the-account-page
drone info
</code></pre>

<h2>Build your first pipeline</h2>

<p>Create a test repo in gitea:</p>

<p><img src="https://user-images.githubusercontent.com/567298/110296470-0ad23800-7ffb-11eb-8428-af49d0ebd62d.png" alt="image" /></p>

<p>Commit a <code>.drone.yml</code> file for drone:</p>

<pre><code>kind: pipeline
type: docker
name: hello-world

trigger:
  branch:
    - master
  event:
    - push

steps:
  - name: say-hello
    image: busybox
    commands:
      - echo hello-world
</code></pre>

<p>Head over to drone and sync your repositories:</p>

<p><img src="https://user-images.githubusercontent.com/567298/110296425-00b03980-7ffb-11eb-9216-76725a62c09e.png" alt="image" /></p>

<p>Activate your repository:</p>

<p><img src="https://user-images.githubusercontent.com/567298/110296623-3523f580-7ffb-11eb-805f-db5db4dab0cb.png" alt="image" /></p>

<p>Push a commit to master and see your pipeline running:</p>

<p><img src="https://user-images.githubusercontent.com/567298/110296747-584ea500-7ffb-11eb-9909-259641a663aa.png" alt="image" /></p>

<h2>More Examples</h2>

<p>For more examples view my example section on the github repository:
- <a href="https://github.com/ruanbekker/drone-gitea-on-docker#more-examples">https://github.com/ruanbekker/drone-gitea-on-docker#more-examples</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ship Your Docker Logs to Loki Using Fluentbit]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/02/26/ship-your-docker-logs-to-loki-using-fluentbit/"/>
    <updated>2021-02-26T15:26:34-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/02/26/ship-your-docker-logs-to-loki-using-fluentbit</id>
    <content type="html"><![CDATA[<p>In this tutorial, I will show you how to ship your docker containers logs to <a href="https://grafana.com/oss/loki/">Grafana Loki</a> via <a href="https://fluentbit.io/">Fluent Bit</a>.</p>

<h2>Grafana and Loki</h2>

<p>First we need to get Grafana and Loki up and running and we will be using docker and docker-compose to do that.</p>

<p>Our <code>docker-compose-loki.yml</code>:</p>

<pre><code>version: "3.7"

services:
  grafana:
    image: grafana/grafana:7.4.2
    container_name: 'grafana'
    restart: unless-stopped
    volumes:
      - ./data/grafana/data:/var/lib/grafana
      - ./configs/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    networks:
      - public
    ports:
      - 3000:3000
    depends_on:
      - loki
    logging:
      driver: "json-file"
      options:
        max-size: "1m"  

  loki:
    image: grafana/loki:2.1.0
    container_name: loki
    command: -config.file=/mnt/loki-local-config.yaml
    user: root
    restart: unless-stopped
    volumes:
      - ./data/loki/data:/tmp/loki
      - ./configs/loki/loki.yml:/mnt/loki-local-config.yaml
    ports:
      - 3100:3100
    networks:
      - public
    logging:
      driver: "json-file"
      options:
        max-size: "1m"

networks:
  public:
    name: public
</code></pre>

<p>We are referencing 2 config files, first our loki datasource defined by <code>./configs/grafana/datasource.yml</code>:</p>

<pre><code>apiVersion: 1

datasources:
- name: loki
  type: loki
  access: proxy
  orgId: 1
  url: http://loki:3100
  basicAuth: false
  isDefault: true
  version: 1
  editable: true
</code></pre>

<p>And our second config is our loki config <code>./configs/loki/loki.yml</code>:</p>

<pre><code>auth_enabled: false

server:
  http_listen_port: 3100

ingester:
  lifecycler:
    address: 127.0.0.1
    ring:
      kvstore:
        store: inmemory
      replication_factor: 1
    final_sleep: 0s
  chunk_idle_period: 5m
  chunk_retain_period: 30s
  max_transfer_retries: 0

schema_config:
  configs:
    - from: 2018-04-15
      store: boltdb
      object_store: filesystem
      schema: v11
      index:
        prefix: index_
        period: 168h

storage_config:
  boltdb:
    directory: /tmp/loki/index

  filesystem:
    directory: /tmp/loki/chunks

limits_config:
  enforce_metric_name: false
  reject_old_samples: true
  reject_old_samples_max_age: 168h

chunk_store_config:
  max_look_back_period: 0s

table_manager:
  retention_deletes_enabled: false
  retention_period: 0s
</code></pre>

<p>Once you have everything in place, boot the grafana and loki containers:</p>

<pre><code>$ docker-compose -f docker-compose-loki.yml up -d
</code></pre>

<h2>Fluent Bit</h2>

<p>Next we need to boot our log processor and forwarder, fluent bit. In our <code>docker-compose-fluentbit.yml</code>:</p>

<pre><code>version: "3.7"

services:
  fluent-bit:
    image: grafana/fluent-bit-plugin-loki:latest
    container_name: fluent-bit
    environment:
      - LOKI_URL=http://loki:3100/loki/api/v1/push
    volumes:
      - ./fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - public

networks:
  public:
    name: public
</code></pre>

<p>And as you can see we are referencing a config <code>./configs/fluentbit/fluent-bit.conf</code>:</p>

<pre><code>[INPUT]
    Name        forward
    Listen      0.0.0.0
    Port        24224
[Output]
    Name grafana-loki
    Match *
    Url ${LOKI_URL}
    RemoveKeys source,container_id
    Labels {job="fluent-bit"}
    LabelKeys container_name
    BatchWait 1s
    BatchSize 1001024
    LineFormat json
    LogLevel info
</code></pre>

<p>Once you have your configs in place, boot fluent-bit:</p>

<pre><code>$ docker-compose -f docker-compose-fluentbit.yml up -d
</code></pre>

<h2>Nginx App</h2>

<p>Now to configure our docker container to ship its logs to fluent-bit, which will forward the logs to Loki.</p>

<p>In our <code>docker-compose-app.yml</code>:</p>

<pre><code>version: "3"

services:
  nginx-json:
    image: ruanbekker/nginx-demo:json
    container_name: nginx-app
    ports:
      - 8080:80
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224
</code></pre>

<p>The fluent-bit container listens on port 24224 locally on our docker host and is not reachable via its container network, so let&rsquo;s boot our application:</p>

<pre><code>$ docker-compose -f docker-compose-app.yml up -d
</code></pre>

<p>Once our application is up, let&rsquo;s make a request to our nginx-app:</p>

<pre><code>$ curl http://localhost:8080/
ok
</code></pre>

<p>Now head over to Grafana at <a href="http://localhost:3000/explore">http://localhost:3000/explore</a> and query: <code>{job="fluent-bit", container_name="/nginx-app"}</code> and you should see something like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/109366000-03908900-789b-11eb-952e-36ff23657517.png" alt="image" /></p>

<p>Beautiful right? I know.</p>

<h2>Github Repo</h2>

<p>The source code for this can be found on:</p>

<ul>
<li><a href="https://github.com/ruanbekker/docker-logging-loki-fuentbit">https://github.com/ruanbekker/docker-logging-loki-fuentbit</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reduce Docker Log Size on Disk]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/12/23/reduce-docker-log-size-on-disk/"/>
    <updated>2020-12-23T04:11:35-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/12/23/reduce-docker-log-size-on-disk</id>
    <content type="html"><![CDATA[<p>In cases where you are using the defaults for logging and your application logs a lot you can consume a lot of disk space and you can run out of disk space quite quickly.</p>

<p>If it&rsquo;s a case where you already ran out of disk space, we can investigate the disk space consumed by docker logs:</p>

<pre><code>$ cd /var/lib/docker/containers
$ du -sh *
6.0G    14052251a0f13f46f65bc73d10c01408130ee8ae71529600ba5bd6bee76af4ee
1.2G    e6b40b1d30c5cf05e8cb201ca9abf6bd283d7cf7ceaa3be2a0422be7cd750a33
</code></pre>

<p>Referenced from <a href="https://blog.birkhoff.me/devops-truncate-docker-container-logs-periodically-to-free-up-server-disk-space/">https://blog.birkhoff.me/devops-truncate-docker-container-logs-periodically-to-free-up-server-disk-space/</a> you can truncate those files:</p>

<pre><code>$ sh -c 'truncate -s 0 /var/lib/docker/containers/*/*-json.log'
</code></pre>

<p>Check the size again:</p>

<pre><code>$ du -sh *
40K 14052251a0f13f46f65bc73d10c01408130ee8ae71529600ba5bd6bee76af4ee
36K e6b40b1d30c5cf05e8cb201ca9abf6bd283d7cf7ceaa3be2a0422be7cd750a33
</code></pre>

<p>To overcome this issue you can use this in logging options in your compose:</p>

<pre><code>...
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
...
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTPS for Local Development With MiniCA]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/12/23/https-for-local-development-with-minica/"/>
    <updated>2020-12-23T03:11:08-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/12/23/https-for-local-development-with-minica</id>
    <content type="html"><![CDATA[<p>In this tutorial we will use <a href="https://github.com/jsha/minica">minica</a> to enable us to run our web applications over HTTPS for local development.</p>

<p>To read more about about <a href="https://github.com/jsha/minica">minica</a> check out their website.</p>

<h2>Generate Certificates</h2>

<p>You can use their binary from their github page or use my docker image to generate the certificates to a <code>./certs</code> directory:</p>

<pre><code>$ docker run --user "$(id -u):$(id -g)" -it -v $PWD/certs:/output ruanbekker/minica --domains 192.168.0.20.nip.io
</code></pre>

<p>In the case from above, we are generating certificates for the FQDN <code>192.168.0.20.nip.io</code>. You will find the generated certificates under <code>./certs/</code>.</p>

<h2>Application Stack</h2>

<p>We will use docker to create a nginx webserver to serve our content via https using the generated vertificates.</p>

<p>Our <code>docker-compose.yml</code>:</p>

<pre><code>version: '3.7'
services:
  nginx:
    image: nginx
    container_name: nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - ~/personal/docker-minica-nginx/nginx.conf:/etc/nginx/nginx.conf
      - ~/personal/docker-minica-nginx/ssl.conf:/etc/nginx/conf.d/ssl.conf
      - ~/personal/docker-minica-nginx/certs/192.168.0.6.nip.io:/etc/nginx/certs
      - ~/personal/docker-minica-nginx/html/index.html:/usr/share/nginx/html/index.html
</code></pre>

<p>Our <code>nginx.conf</code>:</p>

<pre><code>user  nginx;
worker_processes  1;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;
    include /etc/nginx/conf.d/ssl.conf;
}
</code></pre>

<p>Our <code>ssl.conf</code>:</p>

<pre><code>server {
    listen 80;
    server_name 192.168.0.6.nip.io;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name 192.168.0.6.nip.io;

    ssl_certificate /etc/nginx/certs/cert.pem;
    ssl_certificate_key /etc/nginx/certs/key.pem;

    location / {
        root   /usr/share/nginx/html;
        index  index.html;
    }
}
</code></pre>

<p>Our <code>html/index.html</code>:</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en-us"&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous"&gt;
    &lt;script src="https://code.jquery.com/jquery-3.1.1.min.js" crossorigin="anonymous"&gt;&lt;/script&gt;
    &lt;title&gt;Sample Page&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class="container-fluid"&gt;
        &lt;div class="row"&gt;
            &lt;div class="bitProcessor"&gt;&lt;/div&gt;
            &lt;div class="col-md-12" style="background-color: white; position: absolute; top: 40%;width: 80%;left: 10%;"&gt;
                &lt;center&gt;
                    &lt;h1&gt;Hello, World!&lt;/h1&gt;
                    &lt;p&gt;This is sample text.&lt;/p&gt;
                &lt;/center&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>Import Certificates</h2>

<p>We have a certificate <code>./certs/minica.pem</code> which we need to import and trust on our local workstation, I am using a Mac so it will be Keychain Access.</p>

<p><img src="https://user-images.githubusercontent.com/567298/101961866-5a2ee500-3c13-11eb-9f89-03fa1bd4670d.png" alt="image" /></p>

<p>Once you open Keychain Access, select &ldquo;file&rdquo;, &ldquo;import items&rdquo; and browse and import <code>./certs/minica.pem</code>, once you are done search for minica:</p>

<p><img src="https://user-images.githubusercontent.com/567298/101962064-d4f80000-3c13-11eb-9479-c043ba3ced2c.png" alt="image" /></p>

<p>Select the item, file -> get info, expand trust, change &ldquo;when using this certificate&rdquo; to Always trust and close.</p>

<p>You will now see the root ca is trusted:</p>

<p><img src="https://user-images.githubusercontent.com/567298/101962197-2dc79880-3c14-11eb-8d26-49874c9703fa.png" alt="image" /></p>

<h2>Boot the Application Stack</h2>

<p>As we have <code>docker-compose.yml</code> in our current working directory, we can use docker-compose to boot our application:</p>

<pre><code>$ docker-compose up
Creating network "docker-minica-nginx_default" with the default driver
Creating nginx ... done
Attaching to nginx
</code></pre>

<p>Now when we browse to <code>https://192.168.0.6.nip.io</code> we will see:</p>

<p><img src="https://user-images.githubusercontent.com/567298/101962367-a9c1e080-3c14-11eb-898b-688b50c1b9db.png" alt="image" /></p>

<p>And when we inspect the certificate, we can see its valid:</p>

<p><img src="https://user-images.githubusercontent.com/567298/101962411-c78f4580-3c14-11eb-80cd-cf8e449eca95.png" alt="image" /></p>

<h2>Thank You</h2>

<p>Thank you for reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Loki on Multipass]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/11/11/deploy-loki-on-multipass/"/>
    <updated>2020-11-11T14:19:05+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/11/11/deploy-loki-on-multipass</id>
    <content type="html"><![CDATA[<p><img src="https://sysadmins.co.za/content/images/size/w1600/2020/11/loki-banner-2.png" alt="" /></p>

<p>In this post I will demonstrate how to deploy Grafana Labs&rsquo;s <strong>Loki</strong> on <strong>Multipass</strong> using cloud-init so that you can run your own dev environment and run a couple of queries to get you started.</p>

<h2>About</h2>

<p>If you haven&rsquo;t heard of <a href="https://multipass.run/">Multipass</a>, it allows you to run Ubuntu VMs on your Mac or Windows workstation.</p>

<p>If you haven&rsquo;t heard of <a href="https://grafana.com/oss/loki/">Loki</a>, as described by Grafana Labs: <em>&ldquo;Loki is a horizontally-scalable, highly-available, multi-tenant log aggregation system inspired by Prometheus.&rdquo;</em></p>

<h2>Install Multipass</h2>

<p>Head over to <a href="https://multipass.run/">multipass.run</a> to get the installer for your operating system, and if you are curious about Multipass, I wrote a beginners guide on Multipass which can be <strong><a href="https://sysadmins.co.za/getting-started-with-multipass-vms/">found here</a></strong></p>

<h2>Cloud Init for Loki</h2>

<p>We will be making use of <strong><a href="https://cloudinit.readthedocs.io/en/latest/">cloud-init</a></strong> to bootstrap <strong><a href="https://github.com/grafana/loki/releases/tag/v2.0.0">Loki v2.0.0</a></strong> to our multipass instance.</p>

<p>V2.0.0 is the current release of the time of writing, so depending on the time when you read this, have a look at the <a href="https://github.com/grafana/loki/releases">Loki Releases</a> page for the latest version and adjust the cloud-init.yml according to the version if it differs from the one I&rsquo;m mentioning.</p>

<p>(Optional) If you want to use SSH to your Multipass VM, you can use your existing SSH key or generate a new one, if you want to create a new key, you can <a href="https://sysadmins.co.za/getting-started-with-multipass-vms/">follow this post</a></p>

<p>Copy your public key, in my case <code>~/.ssh/id_rsa.pub</code> and paste it under the ssh <code>authorized_keys</code> section.</p>

<p>Our <code>cloud-init.yml</code> has a couple of sections, but to break it down it will do the following:</p>

<ul>
<li>We provide it our public ssh key so that we can ssh with our private key</li>
<li>Updates the index repository</li>
<li>Installs the packages, unzip and wget</li>
<li>Creates the loki systemd unit file and places it under /etc/systemd/system/</li>
<li>When the vm boots it will create the user loki and creates the loki etc directory</li>
<li>Once that completes, we are downloading the loki, logcli and promtail binaries from github</li>
</ul>


<pre><code class="yaml">#cloud-config
ssh_authorized_keys:
  - ssh-rsa AAAA...Ha9 your-comment

package_update: true

packages:
 - unzip
 - wget

write_files:
  - content: |-
      [Unit]
      Description=Loki
      User=loki
      Group=loki
      Wants=network-online.target
      After=network-online.target
      [Service]
      Type=simple
      Restart=on-failure
      ExecStart=/usr/local/bin/loki -config.file /etc/loki/loki-local-config.yaml
      [Install]
      WantedBy=multi-user.target

    owner: root:root
    path: /etc/systemd/system/loki.service
    permissions: '0644'

bootcmd:
  - useradd --no-create-home --shell /bin/false loki
  - mkdir /etc/loki
  - chown -R loki:loki /etc/loki

runcmd:
 - for app in loki logcli promtail; do wget "https://github.com/grafana/loki/releases/download/v2.0.0/${app}-linux-amd64.zip"; done
 - for app in loki logcli promtail; do unzip "${app}-linux-amd64.zip"; done
 - for app in loki logcli promtail; do mv "${app}-linux-amd64" /usr/local/bin/${app}; done
 - for app in loki logcli promtail; do rm -f "${app}-linux-amd64.zip"; done
 - wget https://raw.githubusercontent.com/grafana/loki/v2.0.0/cmd/loki/loki-local-config.yaml
 - mv ./loki-local-config.yaml /etc/loki/loki-local-config.yaml
 - chown loki:loki /etc/loki/loki-local-config.yaml
 - systemctl daemon-reload
 - systemctl start loki
 - sleep 5
 - echo "this is a test" | promtail --stdin --client.url http://localhost:3100/loki/api/v1/push --client.external-labels=app=cli -server.disable
</code></pre>

<p>You will notice that the VM will have <code>loki</code>, <code>logcli</code> and <code>promtail</code> available on it, so you will have an environment to use all of them together.</p>

<p>As you can see once we start loki, we are piping <code>this is a test</code> to Loki using Promtail, so that we can verify that the data is visible in Loki. That step is not required, but just added it to this demo.</p>

<h2>Deploy Loki on Multipass</h2>

<p>We will provision a Multipass VM using the Ubuntu Focal distribution and spec our VM with 1 CPU, 512MB of Memory and 1GB of disk and then bootstrap our installation of Loki using cloud-init:</p>

<pre><code class="bash">$ multipass launch focal \
  --name loki \
  --cpus 1 \
  --mem 512m \
  --disk 1G \
  --cloud-init cloud-init.yml

Creating: loki
Waiting for initialization to complete 
Launched: loki
</code></pre>

<p>We can validate if our Multipass VM is running:</p>

<pre><code class="bash">$ multipass list
Name                    State             IPv4             Image
loki                    Running           192.168.64.19    Ubuntu 20.04 LTS
</code></pre>

<h2>Test Loki inside the VM</h2>

<p>First we will exec into the VM (or SSH), then we will test out Loki inside the VM since we already have logcli available:</p>

<pre><code class="bash">$ multipass exec loki -- bash
To run a command as administrator (user "root"), use "sudo &lt;command&gt;".
See "man sudo_root" for details.

ubuntu@loki:~$
</code></pre>

<p>Remembered in our cloud-init, we instructed this command to run:</p>

<pre><code class="bash">echo "this is a test" | promtail --stdin --client.url http://localhost:3100/loki/api/v1/push --client.external-labels=app=cli -server.disable
</code></pre>

<p>So if we use logcli, we can inspect our visible labels:</p>

<pre><code>$ logcli --quiet labels
__name__
app
hostname
job
</code></pre>

<p>And as we expect, we will see the app label from the <code>--client.external-labels=app=cli</code> argument that we passed. We can also look at the values for a given label:</p>

<pre><code class="bash">$ logcli --quiet labels app
cli
</code></pre>

<p>Now let&rsquo;s query our logs using the label selector: <code>{app="cli"}</code>:</p>

<pre><code class="bash">$ logcli --quiet --output raw query '{app="cli"}'
this is a test
</code></pre>

<p>If we remove the extra arguments, we will see more verbose output like the following:</p>

<pre><code class="bash">$ logcli query '{app="cli"}'

http://localhost:3100/loki/api/v1/query_range?direction=BACKWARD&amp;end=1605092055756745122&amp;limit=30&amp;query=%7Bapp%3D%22cli%22%7D&amp;start=1605088455756745122
Common labels: {app="cli", hostname="loki", job="stdin"}
2020-11-11T12:45:20+02:00 {} this is a test
http://localhost:3100/loki/api/v1/query_range?direction=BACKWARD&amp;end=1605091520778438972&amp;limit=30&amp;query=%7Bapp%3D%22cli%22%7D&amp;start=1605088455756745122
Common labels: {app="cli", hostname="loki", job="stdin"}
</code></pre>

<p>We can pipe some more output to Loki:</p>

<pre><code class="bash">$ echo "this is another test" | promtail --stdin --client.url http://localhost:3100/loki/api/v1/push --client.external-labels=app=cli -server.disable
</code></pre>

<p>And querying our logs:</p>

<pre><code class="bash">$ logcli --quiet --output raw query '{app="cli"}'
this is another test
this is a test
</code></pre>

<h2>Testing Loki Outside our VM</h2>

<p>Let&rsquo;s exit the VM and test Loki from our local workstation, first you will need to get the logcli for your OS, head over to the <a href="https://github.com/grafana/loki/releases">releases</a> page and get the binary of your choice.</p>

<p>I will be demonstrating using a mac:</p>

<pre><code class="bash">$ wget https://github.com/grafana/loki/releases/download/v2.0.0/logcli-darwin-amd64.zip
$ unzip logcli-darwin-amd64.zip
$ sudo mv logcli-darwin-amd64 /usr/local/bin/logcli
$ rm -f logcli-darwin-amd64.zip
</code></pre>

<p>Now we need to tell logcli where our Loki server resides, so let&rsquo;s get the IP address of Loki:</p>

<pre><code class="bash">$ multipass info --all --format json | jq -r '.info.loki.ipv4[]'
192.168.64.19
</code></pre>

<p>We can either set the Loki host as an environment variable:</p>

<pre><code class="bash">$ export LOKI_ADDR=http://192.168.64.19
</code></pre>

<p>or you can specify it using the <code>--addr</code> argument:</p>

<pre><code class="bash">$ logcli --addr="http://192.168.64.19:3100"
</code></pre>

<p>For the sake of simplicity and not having to type the <code>--addr</code> the whole time, I will be setting the Loki address as an environment variable:</p>

<pre><code class="bash">$ export LOKI_ADDR="http://$(multipass info --all --format json | jq -r '.info.loki.ipv4[]'):3100"
</code></pre>

<p>And when we inspect our labels using logcli, we can see that we are getting our labels from Loki on our Multipass VM:</p>

<pre><code class="bash">$ logcli labels
http://192.168.64.19:3100/loki/api/v1/labels?end=1605093229877731000&amp;start=1605089629877731000
__name__
app
hostname
job
</code></pre>

<h2>Write Logs to Loki using the Loki Docker Driver</h2>

<p>We have used promtail before to pipe logs to Loki and in this example we will be making use of the Loki Docker Logging Plugin to write data to Loki.</p>

<p>If you have docker installed, install the Loki plugin:</p>

<pre><code class="bash">$ docker plugin install \
  grafana/loki-docker-driver:latest \
  --alias loki \
  --grant-all-permissions
</code></pre>

<p>Now we will use a docker container to echo stdout to the loki docker driver, which will send the output to Loki.</p>

<p>Let&rsquo;s alias a command loki_echo that we will use to send our output to the docker container:</p>

<pre><code class="bash">$ alias 'loki_echo=docker run --rm -it --log-driver loki --log-opt loki-url="http://192.168.64.19:3100/loki/api/v1/push" --log-opt loki-external-labels="app=echo-container" busybox echo'
</code></pre>

<p>So every time we run <code>loki_echo {string}</code> we will run a docker container from the busybox image and pass the <code>{string}</code> as an argument to the echo command inside the container, which will be sent to the loki log driver and land up in Loki.</p>

<p>Let&rsquo;s push 100 log events to Loki:</p>

<pre><code class="bash">$ count=0
$ while [ ${count} != 100 ]
  do 
    for color in red blue white silver green;
    do 
      loki_echo "there are ${RANDOM} items of ${color} available";
      count=$((count+1))
    done
  done

there are 26890 items of green available
there are 14856 items of red available
there are 31162 items of blue available
there are 23993 items of white available
there are 22310 items of silver available
there are 10700 items of green available
there are 14077 items of red available
there are 20642 items of blue available
there are 31576 items of white available
there are 26053 items of silver available
there are 2973 items of green available
there are 2203 items of red available
there are 8557 items of blue available
...
</code></pre>

<p>We can verify how many log events we have with:</p>

<pre><code>$ logcli query '{app="echo-container"}' --quiet --limit 200 --output raw | wc -l
100
</code></pre>

<p>To see how many logs we have with the line &ldquo;blue&rdquo; in it:</p>

<pre><code class="bash">$ logcli query '{app="echo-container"} |= "blue"' --quiet --limit 200 --output raw | wc -l
20
</code></pre>

<p>Let&rsquo;s look for logs with blue or green and limit the results to 5:</p>

<pre><code class="bash">$ logcli query '{app="echo-container"} |~ "items of (blue|green)"' --quiet --limit 5 --output raw
there are 28985 items of green available
there are 10289 items of blue available
there are 12316 items of green available
there are 23775 items of blue available
there are 20 items of green available
</code></pre>

<h2>Teardown</h2>

<p>If you followed along, you can terminate your Multipass VM with:</p>

<pre><code class="bash">$ multipass delete --purge loki
</code></pre>

<p>You can get the example code in my <strong><a href="https://github.com/ruanbekker/multipassfiles/tree/master/loki">multipassfiles github repository</a></strong></p>

<h2>Thanks</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
</feed>
