<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Encryption | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/encryption/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-08-27T08:56:39-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Salt and Hash Example Using Python With Bcrypt on Alpine]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/07/04/salt-and-hash-example-using-python-with-bcrypt-on-alpine/"/>
    <updated>2018-07-04T05:05:00-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/07/04/salt-and-hash-example-using-python-with-bcrypt-on-alpine</id>
    <content type="html"><![CDATA[<p>This is a post on a example of how to hash a password with a salt. A salt in cryptography is a method that applies a one way function to hash data like passwords. The advantage of using salts is to protect your sensitive data against dictionary attacks, etc. Everytime a salt is applied to the same string, the hashed string will provide a different result.</p>

<h2>Installing Bcrypt</h2>

<p>I will be using bcrypt to hash my password. I always use alpine images and this is how I got bcrypt running on alpine:</p>

<pre><code class="bash">$ docker run -it apline sh
$ apk add python python-dev py2-pip autoconf automake g++ make --no-cache
$ pip install py-bcrypt
</code></pre>

<p>This command should produce a <code>0 exit code</code>:</p>

<pre><code class="bash">$ python -c 'import bcrypt'; echo $?
</code></pre>

<h2>Bcrypt Example to Hash a Password</h2>

<p>Here is a example to show you the output when a salt is applied to a string, such as a password. First we will define our very weak password:</p>

<pre><code class="python">&gt;&gt;&gt; import bcrypt
&gt;&gt;&gt; password = 'pass123'
&gt;&gt;&gt; password
'pass123'
</code></pre>

<p>The bcrypt package has a function called <code>gensalt()</code> that accepts a parameter <code>log_rounds</code> which defines the complexity of the hashing. Lets create a hash for our password:</p>

<pre><code class="python">&gt;&gt;&gt; bcrypt.hashpw(password, bcrypt.gensalt(12))
'$2a$12$iquyyyJAlA9nZwlGo0CYK.J37Qn.to/0mTtiCspNAyO8778006XZG'

&gt;&gt;&gt; bcrypt.hashpw(password, bcrypt.gensalt(12))
'$2a$12$UzNjJ1W/cWqBrt5rzNkb..j.gUvrW64DbvVkNbhRDzBtbRvNInaqq'
</code></pre>

<p>As you can see, the hashed string was different when we called it for the second time.</p>

<h2>Bcrypt Salt Hash and Verification Example:</h2>

<p>Thanks to <a href="https://stackoverflow.com/questions/9594125/salt-and-hash-a-password-in-python">this</a> post, here is a example on how to hash strings and how to verify the plain text password with the provided salt.</p>

<p>Our functions to create the hash and to verify the password:</p>

<pre><code class="python">&gt;&gt;&gt; import bcrypt
&gt;&gt;&gt; def get_hashed_password(plain_text_password):
...     return bcrypt.hashpw(plain_text_password, bcrypt.gensalt())
...
&gt;&gt;&gt;
&gt;&gt;&gt; def check_password(plain_text_password, hashed_password):
...     return bcrypt.checkpw(plain_text_password, hashed_password)
...
&gt;&gt;&gt;
</code></pre>

<p>Create a hashed string:</p>

<pre><code class="python">&gt;&gt;&gt; print(get_hashed_password('mynewpassword'))
$2a$12$/MemcgbnwJLN8XE86VQZseVxopU6tY76KxnH/AJ0I9T9y1Ldko5gm
</code></pre>

<p>Verify the hash with your plain text password and the salt that was created:</p>

<pre><code class="python">&gt;&gt;&gt; print(check_password('mynewpassword', '$2a$12$/MemcgbnwJLN8XE86VQZseVxopU6tY76KxnH/AJ0I9T9y1Ldko5gm'))
True
</code></pre>

<p>When you you provide the wrong password, with the correct salt, the verification will fail:</p>

<pre><code class="python">&gt;&gt;&gt; print(check_password('myOLDpassword', '$2a$12$/MemcgbnwJLN8XE86VQZseVxopU6tY76KxnH/AJ0I9T9y1Ldko5gm'))
False
</code></pre>

<p>When you provide the correct password with the incorrect salt, the verification will also fail:</p>

<pre><code class="python">&gt;&gt;&gt; print(check_password('mynewpassword', '$2a$12$/MemcgbnwJLN8XE86VQZseVxopU6tY76KxnH/AJ0I9T9y1Ldko5gmX'))
False
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Encryption and Decryption With the PyCrypto Module Using the AES Cipher in Python]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/30/encryption-and-decryption-with-the-pycrypto-module-using-the-aes-cipher-in-python/"/>
    <updated>2018-04-30T01:43:26-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/30/encryption-and-decryption-with-the-pycrypto-module-using-the-aes-cipher-in-python</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/0MaLsx.jpg" alt="" /></p>

<p>While I&rsquo;m learning a lot about encryption at the moment, I wanted to test out encryption with the PyCrypto module in Python using the <a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">Advanced Encryption Standard (AES)</a> Symmetric Block Cipher.</p>

<h2>Installing PyCrypto:</h2>

<pre><code class="bash">$ pip install pycrypto --user
</code></pre>

<h2>PyCrypto Example:</h2>

<p>Our AES Key needs to be either 16, 24 or 32 bytes long and our Initialization Vector needs to be 16 Bytes long. That will be generated using the random and string modules.</p>

<p>Encrypting:</p>

<pre><code class="python">&gt;&gt;&gt; from Crypto.Cipher import AES
&gt;&gt;&gt; import random, string, base64

&gt;&gt;&gt; key = ''.join(random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for x in range(32))
&gt;&gt;&gt; iv = ''.join(random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for x in range(16))

&gt;&gt;&gt; print(key, len(key))
('BLhgpCL81fdLBk23HkZp8BgbT913cqt0', 32)
&gt;&gt;&gt; print(iv, len(iv))
('OWFJATh1Zowac2xr', 16)

&gt;&gt;&gt; enc_s = AES.new(key, AES.MODE_CFB, iv)
&gt;&gt;&gt; cipher_text = enc_s.encrypt('this is a super important message')
&gt;&gt;&gt; encoded_cipher_text = base64.b64encode(cipher_text)
&gt;&gt;&gt; print(encoded_cipher_text)
'AtBa6zVB0UQ3U/50ogOb6g09FlyPdpmJB7UzoCqxhsQ6'
</code></pre>

<p>Decrypting:</p>

<pre><code class="python">&gt;&gt;&gt; from Crypto.Cipher import AES
&gt;&gt;&gt; import base64
&gt;&gt;&gt; key = 'BLhgpCL81fdLBk23HkZp8BgbT913cqt0'
&gt;&gt;&gt; iv = 'OWFJATh1Zowac2xr'

&gt;&gt;&gt; decryption_suite = AES.new(key, AES.MODE_CFB, iv)
&gt;&gt;&gt; plain_text = decryption_suite.decrypt(base64.b64decode(encoded_cipher_text))
&gt;&gt;&gt; print(plain_text)
this is a super important message
</code></pre>

<p>It&rsquo;s not needed to use base64, but to have the ability to stay away from strange characters I decided to encode them with base64 :D</p>

<h2>References:</h2>

<ul>
<li><a href="http://docs.python-guide.org/en/latest/scenarios/crypto/">PyCrypto</a></li>
<li><a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">Wiki - AES</a></li>
<li><a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Feedback_(CFB">Wiki - CFB Mode</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Encryption and Decryption With Simple Crypt Using Python]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/29/encryption-and-decryption-with-simple-crypt-using-python/"/>
    <updated>2018-04-29T10:50:46-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/29/encryption-and-decryption-with-simple-crypt-using-python</id>
    <content type="html"><![CDATA[<p>Today I wanted to encrypt sensitive information to not expose passwords, hostnames etc. I wanted to have a way to encrypt my strings with a master password and stumbled upon Simple Crypt.</p>

<h2>Simple Crypt</h2>

<p>Why simple-crypt? Referenced from their <a href="https://pypi.org/project/simple-crypt/">docs</a>:</p>

<ul>
<li>Simple Crypt uses standard, well-known algorithms following the recommendations from <a href="http://www.daemonology.net/blog/2009-06-11-cryptographic-right-answers.html">this</a> link.</li>
<li>The PyCrypto library provides the algorithm implementation, where AES256 cipher is used.</li>
<li>It includes a check (an HMAC with SHA256) to warn when ciphertext data are modified.</li>
<li>It tries to make things as secure as possible when poor quality passwords are used (PBKDF2 with SHA256, a 256 bit random salt, and 100,000 rounds).</li>
<li>Using a library, rather than writing your own code, means that we have less solutions to the same problem.</li>
</ul>


<h2>Installing Simple-Crypt:</h2>

<p>From a base alpine image:</p>

<pre><code class="bash">$ apk update
$ apk add python python-dev py2-pip
$ apk add gcc g++ make libffi-dev openssl-dev
$ pip install simple-crypt
</code></pre>

<h2>Simple Examples:</h2>

<p>Two simple examples to encrypt and decrypt data with simple-crypt. We will use a password <code>sekret</code> and we will encrypt the string: <code>this is a secure message</code>:</p>

<pre><code class="python">&gt;&gt;&gt; from simplecrypt import encrypt, decrypt
&gt;&gt;&gt; password = 'sekret'
&gt;&gt;&gt; message = 'this is a secret message'
&gt;&gt;&gt; ciphertext = encrypt(password, message)
&gt;&gt;&gt;
&gt;&gt;&gt; print(ciphertext)
sc#$%^&amp;*(..........
</code></pre>

<p>Now that we have our encrypted string, lets decrypt it. First we will use the wrong password, so that you will see how the expected output should look when using a different password, than was used when it was encrypted:</p>

<pre><code class="python">&gt;&gt;&gt; print(decrypt('badpass', ciphertext))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/site-packages/simplecrypt/__init__.py", line 72, in decrypt
    _assert_hmac(hmac_key, hmac, hmac2)
  File "/usr/lib/python2.7/site-packages/simplecrypt/__init__.py", line 116, in _assert_hmac
    raise DecryptionException('Bad password or corrupt / modified data.')
simplecrypt.DecryptionException: Bad password or corrupt / modified data.
</code></pre>

<p>Now using the correct password to decrypt:</p>

<pre><code class="python">&gt;&gt;&gt; print(decrypt('sekret', ciphertext))
this is a secret message
</code></pre>

<h2>SimpleCrypt Base64 and Getpass</h2>

<p>I wanted to store the encrypted string in a database, but the ciphertext has a combination of random special characters, so I decided to encode the ciphertext with base64. And the password input will be used with the getpass module.</p>

<p>Our encryption app:</p>

<pre><code class="python encrypt.py">import sys
from simplecrypt import encrypt, decrypt
from base64 import b64encode, b64decode
from getpass import getpass

password = getpass()
message = sys.argv[1]

cipher = encrypt(password, message)
encoded_cipher = b64encode(cipher)
print(encoded_cipher)
</code></pre>

<p>Our decryption app:</p>

<pre><code class="python">import sys
from simplecrypt import encrypt, decrypt
from base64 import b64encode, b64decode
from getpass import getpass

password = getpass()
encoded_cipher = sys.argv[1]

cipher = b64decode(encoded_cipher)
plaintext = decrypt(password, cipher)
print(plaintext)
</code></pre>

<h2>Encrypt and Decrypting Data using our Scripts:</h2>

<p>Encrypting the string <code>this is a secret message</code>:</p>

<pre><code class="bash">$ python encrypt.py "this is a secret message"
Password: 
c2MAAnyfWIfOBV43vxo3sVCEYMG4C6hx69hv2Ii1JKlVHJUgBAlADJPOsD5cJO6MMI9faTDm1As/VfesvBzIe5S16mNyg2q7xfnP5iJ0RlK92vMNRbKOvNibg3M=
</code></pre>

<p>Now that we have our encoded ciphertext, lets decrypt it with the password that we encrypted it with:</p>

<pre><code class="bash">$ python decrypt.py 'c2MAAnyfWIfOBV43vxo3sVCEYMG4C6hx69hv2Ii1JKlVHJUgBAlADJPOsD5cJO6MMI9faTDm1As/VfesvBzIe5S16mNyg2q7xfnP5iJ0RlK92vMNRbKOvNibg3M='
Password: 
this is a secret message
</code></pre>

<p>This is one way of working with sensitive info that you would like to encrypt/decrypt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Script to Decrypt Encrypted Data With AWS KMS]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/20/python-script-to-decrypt-encrypted-data-with-aws-kms/"/>
    <updated>2017-10-20T04:54:51-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/20/python-script-to-decrypt-encrypted-data-with-aws-kms</id>
    <content type="html"><![CDATA[<p>Quick script to decrypt data that was encrypted with your KMS key:</p>

<h2>The Script:</h2>

<p>The script requires the encrypted scring as an argument:</p>

<pre><code class="python">#!/usr/bin/env python

import boto3
import sys
from base64 import b64decode

try:
    encrypted_value = sys.argv[1]
except IndexError:
    print("Usage: {} {}".format(sys.argv[0], 'the-encrypted-string'))
    exit(1)

session = boto3.Session(
        region_name='eu-west-1',
        profile_name='default'
    )

kms = session.client('kms')

response = kms.decrypt(CiphertextBlob=b64decode(encrypted_value))['Plaintext']
print("Decrypted Value: {}".format(response))
</code></pre>

<p>Change the permissions so that the file is executable:</p>

<pre><code class="bash">$ chmod +x decrypt.py
</code></pre>

<h2>Usage:</h2>

<pre><code class="bash">$ ./decrypt.py asdlaskjdasidausd09q3uoijad09ujd38u309
Decrypted Value: thisIsMyDecryptedValue
</code></pre>
]]></content>
  </entry>
  
</feed>
