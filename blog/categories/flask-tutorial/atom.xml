<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flask-tutorial | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/flask-tutorial/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2021-08-01T06:24:41-04:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Flask Tutorial Series: Routing in Flask]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/12/11/python-flask-tutorial-series-routing-in-flask-p3/"/>
    <updated>2018-12-11T05:29:14-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/12/11/python-flask-tutorial-series-routing-in-flask-p3</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/python-flask.png" alt="" /></p>

<p>This is post 3 of our <a href="http://blog.ruanbekker.com/blog/categories/flask-tutorial/">Python Flask Tutorial Series</a> where we will go into Views and Routing.</p>

<p>In our previous post we went through the steps to setup a <a href="https://blog.ruanbekker.com/blog/2018/12/09/python-flask-tutorial-series-setup-a-python-virtual-environment-p2/">Virtual Environment for our Flask App</a></p>

<h2>Flask Views and Routing:</h2>

<p>Flask Routing is essentially mapping a URL eg. <code>example.com/pages/test</code> to a view function within your code. For example having <code>/contact-us</code> displaying a page about contact details.</p>

<p>The <code>route()</code> decorator in Flask is used to bind the URL to a function.</p>

<h2>Some basic examples:</h2>

<p>This is a basic web app that shows on which page you are:</p>

<pre><code class="python">from flask import Flask

app = Flask(__name__)

@app.route('/home')
def home():
    return '&lt;h2&gt;You are on the Home Page&lt;/h2&gt;

@app.route('/about-us')
def about():
    return '&lt;h2&gt;You are on the About Us Page&lt;/h2&gt;'

if __main__ == '__name__':
    app.run()
</code></pre>

<p>With <code>app.run()</code> we have passed no arguments, so it will use the defaults, which is:</p>

<ul>
<li>Host: <code>127.0.0.1</code></li>
<li>Port: <code>5000</code></li>
<li>Debug: <code>False</code></li>
</ul>


<p>To set your own values, you could do something like: <code>app.run(host='0.0.0.0', port=8080, debug=True)</code>. Note: Never use debug mode in production.</p>

<p>So when you do a GET Request on <code>http://localhost:5000/home</code> you will be presented with the response that you are on the home page.</p>

<p>This is all good and well, but its static, so lets look how we can set this up in a dynamic way.</p>

<h2>URL Variables:</h2>

<p>We can use variables in the <code>route()</code> decorator which we can parse through to the function. In this next example we will use a <code>name</code> variable, and depending on what name is passed in the GET request, will be provided in the response.</p>

<pre><code class="python">from flask import Flask
app = Flask(__name__)

@app.route('/user/&lt;name&gt;')
def user(name):
    return 'Welcome, {}'.format(name)

if __main__ == '__name__':
    app.run()
</code></pre>

<p>So with the above example, <code>&lt;name&gt;</code> will be used as a placeholder or variable, and then passed through to our function and then returned in our response, for example:</p>

<pre><code class="bash">$ curl -XGET http://localhost:5000/user/James
Welcome, James

$ curl -XGET http://localhost:5000/user/Frank
Welcome, Frank
</code></pre>

<p>So this can be really useful when dealing with dynamic data. You can also go deeper into this, like the following:</p>

<pre><code class="python">from flask import Flask
app = Flask(__name__)

@app.route('/user/&lt;name&gt;/&lt;surname&gt;/&lt;prog_lang&gt;')
def user(name, surname, prog_lang):
    return '{} {} likes {}'.format(name, surname, prog_lang)

if __main__ == '__name__':
    app.run()
</code></pre>

<p>This will produce:</p>

<pre><code class="bash">$ curl -XGET http://localhost:5000/user/John/Smith/Python
John Smith likes Python
</code></pre>

<p>We can also have defaults, so if no values was passed, and you only hit the <code>/user</code> endpoint, you can have a default value returned:</p>

<pre><code class="python">from flask import Flask
app = Flask(__name__)

@app.route('/user', defaults={'name': 'Ruan', 'surname': 'B', 'prog_lang': 'Python'})
@app.route('/user/&lt;name&gt;/&lt;surname&gt;/&lt;prog_lang&gt;')
def user(name, surname, prog_lang):
    return '{} {} likes {}'.format(name, surname, prog_lang)

if __main__ == '__name__':
    app.run()
</code></pre>

<p>So then the output would look like this:</p>

<pre><code class="bash">$ curl -XGET http://localhost:5000/user
Ruan B likes Python
</code></pre>

<p>This is a very simple example, but you could use it in many ways.</p>

<h2>Data Types in URL Routing:</h2>

<p>You could also explicitly set your datatypes, like string or integer etc in your route decorators.</p>

<p>Example for <em>Strings</em>:</p>

<pre><code class="python">from flask import Flask
app = Flask(__name__)

@app.route('/city/&lt;string:cityname&gt;')
def user(cityname):
    return 'Selected City is: {}'.format(cityname)

if __main__ == '__name__':
    app.run()
</code></pre>

<p>Example for <em>Integers</em>:</p>

<pre><code class="python">from flask import Flask
app = Flask(__name__)

@app.route('/user/&lt;integer:age&gt;')
def user(age):
    return 'Selected age is: {}'.format(age)

if __main__ == '__name__':
    app.run()
</code></pre>

<p>And now because the datatype is an integer, when you try to pass a string, you will be faced with an error. So the value that you will need to pass would then be strictly set to the type of integer.</p>

<p>Example with <em>if statements</em>:</p>

<p>You could also use if statements in your functions, like determining the age group, for example:</p>

<pre><code class="python">from flask import Flask
app = Flask(__name__)

@app.route('/user/&lt;integer:age&gt;')
def user(age):
    if age &gt;= 28:
        return 'Your selected age is {}, so you are in the 28 and older group'.format(age)
    else:
        return 'Your selected age is {}, so you are in the younger then 28 group'.format(age)

if __main__ == '__name__':
    app.run()
</code></pre>

<p>So with the above example:</p>

<pre><code class="bash">$ curl -XGET http://127.0.0.1:5000/user/12
Your selected age is 12, so you are in the younger then 28 group

$ curl -XGET http://127.0.0.1:5000/user/30
Your selected age is 30, so you are in the 28 and older group
</code></pre>

<p>Example with <em>Floats</em>:</p>

<pre><code>@app.route('/myfloat/&lt;float:floatnum&gt;')
</code></pre>

<p>Example with <em>Path Types</em>:</p>

<p>We can also pass accept the URL Path, that is passed by using the path type:</p>

<pre><code class="python">from flask import Flask
app = Flask(__name__)

@app.route('/path/&lt;path:mypath&gt;')
def user(mypath):
    return 'Your selected path is: /{}'.format(mypath)

if __main__ == '__name__':
    app.run()
</code></pre>

<p>So with the above example:</p>

<pre><code class="bash">$ curl -XGET http://127.0.0.1:5000/path/apps/data/my/app
Your selected path is: /apps/data/my/app
</code></pre>

<p>I hope this was useful, next up in our <a href="http://blog.ruanbekker.com/blog/categories/flask-tutorial/">Python Flask Tutorial-Series</a> will be rendering templates in flask with the jinja2 templating engine.</p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Flask Tutorial Series: Setup a Python Virtual Environment]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/12/09/python-flask-tutorial-series-setup-a-python-virtual-environment-p2/"/>
    <updated>2018-12-09T17:19:24-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/12/09/python-flask-tutorial-series-setup-a-python-virtual-environment-p2</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/python-flask.png" alt="" /></p>

<p>In our previous post we wrote a basic <a href="https://blog.ruanbekker.com/blog/2018/11/27/python-flask-tutorial-series-create-a-hello-world-app-p1/">Hello World App in Flask</a>. This is post 2 of the <a href="http://blog.ruanbekker.com/blog/categories/flask-tutorial/">Python Flask Tutorial Series</a></p>

<p>In this section we will be covering our Environment Setup, where I will be showing you how to setup a typical Python Flask Environment using <a href="http://virtualenv.readthedocs.org/en/latest/">virtualenv</a></p>

<h2>What is VirtualEnv?</h2>

<p>Virtualenv allows you to have isolated Python Environments, where each project or environment can have their own versions. Some applications may need a specific version of a certain package, so lets say you are running multiple applications on one server, then having to manage each ones dependencies can be a pain. As you may run into scenarios where they are dependent on specific versions, where you have to upgrade/downgrade packages like no-ones business.</p>

<p>Luckily with the help of virtualenv, each environment is isolated from each other, so system wide you might be running Python 2.7 with minimal packages installed, then you can create a virtual environment with Python 3 with packages for the application you are developing.</p>

<h2>Setup a Virtual Environment:</h2>

<p>We will setup a virtualenv for our project with our default python version which in this case is 2.7:</p>

<pre><code>$ mkdir ~/projects/mywebapp
$ cd ~/projects/mywebapp
$ virtualenv .venv
</code></pre>

<p>At this moment you should have your virtual environment ready, now to enter and activate our environment:</p>

<pre><code>$ source .venv/bin/activate
</code></pre>

<p>To confirm your python version:</p>

<pre><code>$ python --version
Python 2.7.6
</code></pre>

<p>If you have multiple versions of python, you can create your virtual environment with a different python version by using the <code>-p</code> flag, as in:</p>

<pre><code>$ virtualenv -p /usr/local/bin/python2.7 .venv
</code></pre>

<p>Now that we are in our virtualenv, lets install 2 packages, Flask and Requests:</p>

<pre><code>$ pip install flask
$ pip install requests
</code></pre>

<p>With pip we can list the installed packages we have with <code>pip freeze</code>. Since this is our virtual environment, we will only see the packages that was installed into this environment:</p>

<pre><code>$ pip freeze
click==6.7
Flask==0.12
itsdangerous==0.24
Jinja2==2.9.5.1
MarkupSafe==1.0
requests==2.7.0
six==1.10.0
virtualenv==15.0.1
Werkzeug==0.12.1
</code></pre>

<p>We can dump this to a file, which we can later use to install packages from a list so that we don&rsquo;t have to specify them manually. We can dump them by doing this:</p>

<pre><code class="bash">$ pip freeze &gt; requirements.txt
</code></pre>

<p>Now lets say you are on a different host and you would like to install the packages from the <code>requirements.txt</code> file, we do this by using the following command:</p>

<pre><code class="bash">$ pip install -r requirements.txt
</code></pre>

<p>To exit your virtualenv, you do the following:</p>

<pre><code class="bash">$ deactivate
</code></pre>

<p>I hope this was useful, next up in our <a href="http://blog.ruanbekker.com/blog/categories/flask-tutorial/">Python Flask Tutorial Series</a> will be <a href="https://blog.ruanbekker.com/blog/2018/12/11/python-flask-tutorial-series-routing-in-flask-p3/">Routing in Flask</a></p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Flask Tutorial Series: Create a Hello World App]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/11/27/python-flask-tutorial-series-create-a-hello-world-app-p1/"/>
    <updated>2018-11-27T08:36:20-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/11/27/python-flask-tutorial-series-create-a-hello-world-app-p1</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/python-flask.png" alt="" /></p>

<p>This is post 1 of the <a href="http://blog.ruanbekker.com/blog/categories/flask-tutorial/">Python Flask Tutorial Series</a></p>

<h2>What is Python Flask</h2>

<p>Flask is a Micro Web Framework which is written in Python and is based on the Werkzeug Toolkit and the Jinja2 Template Engine.</p>

<p>Flask is super lightweight, and you import the modules as you need them, from some research some say that Flask is more designed for smaller applications whereas Django is designed for your larger applications.</p>

<p>a Good read on the [Differences and Performance Comparison]. With that being said, if you are planning with scale I am pretty sure that Flask can handle big applications, but it probably depends what your application is doing. More <a href="https://www.reddit.com/r/Python/comments/2jja20/is_flask_good_enough_to_develop_large_applications/">Detailed Discussion</a> on Reddit.</p>

<h2>Hello World in Python Flask</h2>

<p>In this post we will be creating a &ldquo;Hello, World&rdquo; application to demonstrate how easy it is to run a Flask Appliation.</p>

<p>The only requirement you need to run this app, would be to to have <code>python</code> and <code>pip</code> installed so that we can install the <code>Flask</code> package which is needed.</p>

<h2>Creating your Traditional Hello World App</h2>

<p>We will install flask globally, but will write up a <a href="https://sysadmins.co.za/python-flask-series-environment-setup-p3/">future post</a> on how to setup a virtual environment for you application. Install the flask package:</p>

<pre><code class="bash">$ pip install flask
</code></pre>

<p>The code for the Hello World Flask Application:</p>

<pre><code class="python">from flask import Flask 

app = Flask(__name__)

@app.route('/')
def index():
    return 'Hello, World!'

if __name__ == '__main__':
    app.run(host='127.0.0.1', port=5000, debug=True)
</code></pre>

<p>Save the above code as <code>app.py</code> and then run the application as follows:</p>

<pre><code>$ python app.py
 * Debug mode: on
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 282-492-812
</code></pre>

<h2>It&rsquo;s Running What Now?</h2>

<p>We can see that our application is running on 127.0.0.1 and listening on port: 5000, if you point your browser to this URL, you will be returned with: Hello, World!</p>

<pre><code class="bash">$ curl -i -XGET http://127.0.0.1:5000/
HTTP/1.0 200 OK
Content-Type: text/html; charset=utf-8
Content-Length: 13
Server: Werkzeug/0.12.1 Python/2.7.12
Date: Thu, 27 Nov 2018 13:51:15 GMT

Hello, World!
</code></pre>

<h2>Explaining the Application Code</h2>

<ul>
<li>First, we imported the <code>Flask</code> class from the flask module, using: <code>from flask import Flask</code></li>
<li>Then we instantiate our application from the Flask class: <code>app = Flask(__name__)</code> using our module&rsquo;s name as a parameter, where our app object will use this to resolve resources. We are using <code>__name__</code> , which links our module to our app object.</li>
<li>Next up we have the <code>@app.route('/')</code> decorator. Flask uses decorators for URL Routing.</li>
<li>Below our decorator, we have a <code>view function</code>, this function will be executed when the <code>/</code> route gets matched, in this case returning <code>Hello, World!</code></li>
<li>The last line starts our server, and from this example it runs locally on <code>127.0.0.1</code> on port: <code>5000</code> and <code>debug is enabled</code>, so any error details will be logged directly in the browser. This is only recommended for test/dev and not for production as you can make your service vulnerable for hackers.</li>
</ul>


<h2>Let&rsquo;s Extend our Hello World App</h2>

<p>We would like to add the route &lsquo;/movie&rsquo; which will return a random movie name:</p>

<pre><code class="python">import random
from flask import Flask

app = Flask(__name__)

@app.route('/')
def index():
    return 'Hello, World!'

@app.route('/movie')
def movie():
    movies = ['godfather', 'deadpool', 'toy story', 'top gun', 'forrest gump']
    return random.choice(movies)

if __name__ == '__main__':
    app.run(host='127.0.0.1', port=5000, debug=True)
</code></pre>

<p>Making a GET Request on the &lsquo;/movie&rsquo; route:</p>

<pre><code class="bash">$ curl -XGET http://127.0.0.1/movie
forrest gump
</code></pre>

<p>This was just a basic example and will be covering more topics in detail at a further stage.</p>

<p>Next up, setting up our Python Environment, with <a href="https://blog.ruanbekker.com/blog/2018/12/09/python-flask-tutorial-series-setup-a-python-virtual-environment-p2/">Virtual Environment (virtualenv)</a></p>

<h2>Related Content</h2>

<p>All posts related to this tutorial series will be listed under <a href="http://blog.ruanbekker.com/blog/categories/flask-tutorial/">Python Flask Tutorial Series</a> tag.</p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Python Flask: Tutorial Series]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/11/27/introduction-to-python-flask-tutorial-series/"/>
    <updated>2018-11-27T08:28:33-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/11/27/introduction-to-python-flask-tutorial-series</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/python-flask.png" alt="" /></p>

<p>This post is the index for all the posts that will be covered in our Python Flask Tutorial Series:</p>

<h2>What will be covered</h2>

<p>This is intended for people starting out with Python Flask and the basics will be covered on using Flask so that you can get familliar with the framework.</p>

<p>The following will be covered:</p>

<ul>
<li>Hello World Basic App</li>
<li>Routing in Flask</li>
<li>Jinja Templating</li>
<li>Static Files</li>
<li>etc</li>
</ul>


<p>More will be posted</p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
</feed>
