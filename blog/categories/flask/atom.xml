<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flask | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/flask/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-10-28T15:48:32-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Python Flask and JavaScript for Client Side Filtering Through Returned Data]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/24/using-python-flask-and-javascript-for-client-side-filtering-through-returned-data/"/>
    <updated>2018-10-24T05:39:33-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/24/using-python-flask-and-javascript-for-client-side-filtering-through-returned-data</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/python-logo.png" alt="" /></p>

<p>This post will cover 2 sections, using Python Flask and Javascript to filter returned data, where you could have a table that represents 100 items, and you want to have a search box to filter down your results as you type.</p>

<p>The other section will be used as a demo, with solving a problem with Amazon CloudWatch Logs. I&rsquo;m a Massive AWS Fanatic, but when it comes to CloudWatch Logs, I&rsquo;m not so big of a fan of that specific service. Especially when you use Docker Swarm for AWS and have your logdriver set to CloudWatch Logs.</p>

<h2>The Problem I have with CloudWatch Logs</h2>

<p>When you point to your CloudWatch LogGroups, you can search for your streams, and in my case searching for a specific swarm service, but you can&rsquo;t sort by date, like this:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/cloudwatch-logs-date-issue.png" alt="" /></p>

<p>This makes it really tedious when trying to search find your logs in a quick way.</p>

<h2>Python Flask to the Resque</h2>

<p>We will create a Python Flask application that retrieves your data about all your Docker Swarm Services and Container Id&rsquo;s running on each node. For this demonstration, I have hard coded the services and container id&rsquo;s, but using it in a real environment, you can utilise the Docker API or some logic that retrieves it from a datastore where a process populates it to.</p>

<p>The Application Code will do the following:</p>

<ul>
<li>returns a list of your swarm services (mock data in the code)</li>
<li>when you select a service, it will get a list of the container ids and run through a for loop unsing jinja templates and display them in table format</li>
<li>when you select the containerId, it will populate the containerId to the cloudwatch logs filter, giving you the exact logstream which you are looking for</li>
<li><p>this will do a redirect to the AWS Console, and you will see the data in the sorted time of interest</p></li>
<li><p><code>app.py</code></p></li>
</ul>


<pre><code class="python">from flask import Flask, render_template

app = Flask(__name__)

# faking datasets that can be returned from a api or database
swarm_services = ['my-web-service', 'my-api-service']
swarm_tasks = {
    "my-web-service": {
        "container_names": [
            "my-web-service.1.alfjshoehfosfn",
            "my-web-service.2.fuebchduehakjdu"
        ]
    },
    "my-api-service": {
        "container_names": [
            "my-api-service.1.oprudhyuythvbzx",
            "my-api-service.2.sjduebansifotuf"
        ]
    }
}

def get_container_name(app_name):
    data = []
    response = swarm_tasks[app_name]
    for container in response['container_names']:
        data.append(container)
    return render_template('index.html', app_name=app_name, number=len(data), data=data)

@app.route('/')
def list():
    return render_template('list.html', number=len(swarm_services), apps=swarm_services, aws_region='eu-west-1', cloudwatch_log_stream='docker-swarm-lg')

@app.route('/describe/&lt;string:app_name&gt;')
def get_app(app_name):
    app = get_container_name(app_name)
    return app

if __name__ == '__main__':
    app.run()
</code></pre>

<p>The <code>index.html</code>:</p>

<script src="https://gist.github.com/ruanbekker/08b02a3ef30367ea7306a31eb5f33cb1.js"></script>


<p>The <code>list.html</code> :</p>

<script src="https://gist.github.com/ruanbekker/98eab090e218bbbf0e46d5efc1595e04.js"></script>


<h2>Filtering the Data</h2>

<p>So at this moment all your data will be returned when a list is done, if you are in a case where you have lots of information, it can be overwelming and you will need to search for the service of interest. Using HTML and JavaScript, you can filter through the results:</p>

<p>The JavaScript Function: <code>assets/js/filter.js</code></p>

<pre><code class="javascript">function SearchAndFilterThingy() {
  var input, filter, table, tr, td, x;
  input = document.getElementById("UserInput");
  filter = input.value.toUpperCase();
  table = document.getElementById("ServicesTable");
  tr = table.getElementsByTagName("tr");

  for (x = 0; x &lt; tr.length; x++) {
    td = tr[x].getElementsByTagName("td")[0];
    if (td) {
      if (td.innerHTML.toUpperCase().indexOf(filter) &gt; -1) {
        tr[x].style.display = "";
      }
      else {
        tr[x].style.display = "none";
      }
    }
  }
}
</code></pre>

<h2>Screenshot</h2>

<p>Once you search for a specific keyword on the service you are looking for the output should more or less look like the following:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/docker-flask-running-services.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capture Geo Location Data With Python Flask and PyGeoIP]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/07/16/capture-geo-location-data-with-python-flask-and-pygeoip/"/>
    <updated>2018-07-16T17:46:01-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/07/16/capture-geo-location-data-with-python-flask-and-pygeoip</id>
    <content type="html"><![CDATA[<p>With the PyGeoIP package you can capture geo location data, which is pretty cool, for example, when you have IOT devices pushing location data to elasticsearch and visualizing the data with Kibana. That will be one example, but the possibilites are endless.</p>

<h2>Dependencies:</h2>

<p>Get the Maxmind Geo Database:</p>

<pre><code class="bash">$ wget -N http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz
$ gunzip GeoLiteCity.dat.gz
</code></pre>

<p>Install Python Flask and PyGeoIP:</p>

<pre><code class="bash">$ pip install flask pygeoip
</code></pre>

<h2>Getting Started with PyGeoIP:</h2>

<p>Let&rsquo;s run through a couple of examples on how to get:</p>

<ul>
<li>Country Name by IP Address and DNS</li>
<li>Country Code by IP Address and DNS</li>
<li>GeoData by IP Address</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; import pygeoip, json
&gt;&gt;&gt; gi = pygeoip.GeoIP('GeoLiteCity.dat')

&gt;&gt;&gt; gi.country_name_by_addr('8.8.8.8')
'United States'
&gt;&gt;&gt; gi.country_code_by_addr('8.8.8.8')
'US'

&gt;&gt;&gt; gi.country_name_by_name('scaleway.com')
'France'
&gt;&gt;&gt; gi.country_code_by_name('scaleway.com')
'FR'

&gt;&gt;&gt; gi.region_by_name('scaleway.com')
{'region_code': None, 'country_code': 'FR'}

&gt;&gt;&gt; data = gi.record_by_addr('104.244.42.193')
&gt;&gt;&gt; print(json.dumps(data, indent=2))
{
  "city": "San Francisco",
  "region_code": "CA",
  "area_code": 415,
  "time_zone": "America/Los_Angeles",
  "dma_code": 807,
  "metro_code": "San Francisco, CA",
  "country_code3": "USA",
  "latitude": 37.775800000000004,
  "postal_code": "94103",
  "longitude": -122.4128,
  "country_code": "US",
  "country_name": "United States",
  "continent": "NA"
}

&gt;&gt;&gt; data = gi.record_by_name('twitter.com')
&gt;&gt;&gt; print(json.dumps(data, indent=2))
{
  "city": "San Francisco",
  "region_code": "CA",
  "area_code": 415,
  "time_zone": "America/Los_Angeles",
  "dma_code": 807,
  "metro_code": "San Francisco, CA",
  "country_code3": "USA",
  "latitude": 37.775800000000004,
  "postal_code": "94103",
  "longitude": -122.4128,
  "country_code": "US",
  "country_name": "United States",
  "continent": "NA"
}
</code></pre>

<h2>Python Flask Web App to Capture Data</h2>

<p>Let&rsquo;s create a basic Flask App that will capture the data from the client making the request to the server. In this example we will just return the data, but we can filter the data and ingest it into a database like elasticsearch, etc.</p>

<pre><code class="python">from flask import Flask, request, jsonify
import pygeoip, json

app = Flask(__name__)

geo = pygeoip.GeoIP('GeoLiteCity.dat', pygeoip.MEMORY_CACHE)

@app.route('/')
def index():
    client_ip = request.remote_addr
    geo_data = geo.record_by_addr(client_ip)
    return json.dumps(geo_data, indent=2) + '\n'

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80, debug=False)
</code></pre>

<p>Run the Server:</p>

<pre><code class="bash">$ python app.py
</code></pre>

<p>Make a request from the client over a remote connection:</p>

<pre><code class="bash">$ curl http://remote-endpoint.com
{
  "city": "Cape Town",
  "region_code": "11",
  "area_code": 0,
  "time_zone": "Africa/Johannesburg",
  "dma_code": 0,
  "metro_code": null,
  "country_code3": "ZAF",
  "latitude": -01.12345,
  "postal_code": "8000",
  "longitude": 02.123456789,
  "country_code": "ZA",
  "country_name": "South Africa",
  "continent": "AF"
}
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="http://pygeoip.readthedocs.io/en/latest/getting-started.html">PyGeoIP</a></li>
<li><a href="https://dev.maxmind.com/geoip/legacy/install/city/">MaxMind</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add a Authentication Header to Your Python Flask App]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/06/01/add-a-authentication-header-to-your-python-flask-app/"/>
    <updated>2018-06-01T03:28:05-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/06/01/add-a-authentication-header-to-your-python-flask-app</id>
    <content type="html"><![CDATA[<p><img src="http://obj-cache.cloud.ruanbekker.com/flask.png" alt="" /></p>

<p>We will write a simple Python Flask application that requires authentication in order to respond with a 200 HTTP Status code.</p>

<h2>Python Flask Application:</h2>

<p>Our Python Flask application will require the Header <code>x-api-key dhuejso2dj3d0</code> in the HTTP Request, to give us a 200 HTTP Status code, if not, we will respond with a 401 Unauthorized Response:</p>

<pre><code class="python">from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/')
def index():
    headers = request.headers
    auth = headers.get("X-Api-Key")
    if auth == 'asoidewfoef':
        return jsonify({"message": "OK: Authorized"}), 200
    else:
        return jsonify({"message": "ERROR: Unauthorized"}), 401

if __name__ == '__main__':
    app.run()
</code></pre>

<p>To get the headers, you can use <code>headers.get("X-Api-Key")</code> or <code>headers["X-Api-Key"]</code></p>

<p>Create a virtual environment, install flask and run the app:</p>

<pre><code class="bash">$ virtualenv .venv
$ source .venv/bin/activate
$ python app.py
 * Serving Flask app "app" (lazy loading)
 * Environment: production
   WARNING: Do not use the development server in a production environment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
</code></pre>

<h2>Requests to our App:</h2>

<p>Let&rsquo;s first make a request with no headers, which should then give us a 401 Unautorhized response:</p>

<pre><code class="bash">$ curl -i http://localhost:5000

HTTP/1.0 401 UNAUTHORIZED
Content-Type: application/json
Content-Length: 33
Server: Werkzeug/0.14.1 Python/3.6.5
Date: Fri, 01 Jun 2018 07:26:25 GMT

{"message":"ERROR: Unauthorized"}
</code></pre>

<p>Now let&rsquo;s include the authentication token in our headers. If the string is the same as the one in the code, we should see a 200 HTTP Response:</p>

<pre><code class="bash">$ curl -i -H 'x-api-key: asoidewfoef' http://localhost:5000

HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 29
Server: Werkzeug/0.14.1 Python/3.6.5
Date: Fri, 01 Jun 2018 07:27:03 GMT

{"message":"OK: Authorized"}
</code></pre>

<h2>Note:</h2>

<p>From a best practice, its not a good decision to hard code sensitive details in your code, but rather read that from an encrypted database and store that in your applications environment variables, and let your application read from the environment variables, something like that :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Forms With Python Flask and the WTForms Module With Bootstrap]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/05/27/web-forms-with-python-flask-and-the-wtforms-module-with-bootstrap/"/>
    <updated>2018-05-27T17:44:41-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/05/27/web-forms-with-python-flask-and-the-wtforms-module-with-bootstrap</id>
    <content type="html"><![CDATA[<p><img src="http://obj-cache.cloud.ruanbekker.com/flask.png" alt="" /></p>

<p>Quick demo with Web Forms using the WTForms module in Python Flask.</p>

<h2>Requirements:</h2>

<p>Install the required dependencies:</p>

<pre><code class="bash">$ pip install flask wtforms
</code></pre>

<h2>Application:</h2>

<p>The Application code of the Web Forms Application. Note that we are also using validation, as we want the user to complete all the fields. I am also including a function that logs to the directory where the application is running, for previewing the data that was logged.</p>

<pre><code class="python app.py">from random import randint
from time import strftime
from flask import Flask, render_template, flash, request
from wtforms import Form, TextField, TextAreaField, validators, StringField, SubmitField

DEBUG = True
app = Flask(__name__)
app.config.from_object(__name__)
app.config['SECRET_KEY'] = 'SjdnUends821Jsdlkvxh391ksdODnejdDw'

class ReusableForm(Form):
    name = TextField('Name:', validators=[validators.required()])
    surname = TextField('Surname:', validators=[validators.required()])

def get_time():
    time = strftime("%Y-%m-%dT%H:%M")
    return time

def write_to_disk(name, surname, email):
    data = open('file.log', 'a')
    timestamp = get_time()
    data.write('DateStamp={}, Name={}, Surname={}, Email={} \n'.format(timestamp, name, surname, email))
    data.close()

@app.route("/", methods=['GET', 'POST'])
def hello():
    form = ReusableForm(request.form)

    #print(form.errors)
    if request.method == 'POST':
        name=request.form['name']
        surname=request.form['surname']
    email=request.form['email']
    password=request.form['password']

        if form.validate():
            write_to_disk(name, surname, email)
            flash('Hello: {} {}'.format(name, surname))

        else:
            flash('Error: All Fields are Required')

    return render_template('index.html', form=form)

if __name__ == "__main__":
    app.run()
</code></pre>

<h2>HTML Template:</h2>

<p><code>templates/index.html</code></p>

<script src="https://gist.github.com/ruanbekker/f552f1e57aeb038e8c10b148ed1e4c2b.js"></script>


<p>This will result in a basic web form like this:</p>

<p><img src="https://i.snag.gy/3x98UV.jpg" alt="" /></p>

<h2>Resources:</h2>

<ul>
<li><a href="https://getbootstrap.com/docs/4.1/components/alerts/">https://getbootstrap.com/docs/4.1/components/alerts/</a></li>
<li><a href="https://pythonspot.com/en/download-flask-examples/">https://pythonspot.com/en/download-flask-examples/</a></li>
<li><a href="https://flask-wtf.readthedocs.io/en/stable/quickstart.html">https://flask-wtf.readthedocs.io/en/stable/quickstart.html</a></li>
<li><a href="https://pythonspot.com/flask-web-forms/">https://pythonspot.com/flask-web-forms/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic RESTFul API Server With Python Flask]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/21/basic-restful-api-server-with-python-flask/"/>
    <updated>2018-04-21T19:35:34-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/21/basic-restful-api-server-with-python-flask</id>
    <content type="html"><![CDATA[<p><img src="http://obj-cache.cloud.ruanbekker.com/flask.png" alt="" /></p>

<p>A Basic RESTFul API Service with Python Flask. We will be using the Flask, jsonify and request classes to build our API service.</p>

<h2>Description of this demonstration:</h2>

<p>Our API will be able to do the following:</p>

<ul>
<li>Create, Read, Update, Delete</li>
</ul>


<p>In this demonstration, we will add some information about people to our API, then go through each method that is mentioned above.</p>

<h2>Getting the Dependencies:</h2>

<p>Setup the virtualenv and install the dependencies:</p>

<pre><code class="bash">$ virtualenv .venv
$ source .venv/bin/activate
$ pip install flask
</code></pre>

<h2>The API Server Code:</h2>

<p>Here&rsquo;s the complete code, as you can see I have a couple of decorators for each url endpoint, and a <code>id_generator</code> function, that will generate id&rsquo;s for each document. The id will be used for getting users information, updates and deletes:</p>

<pre><code class="python">from flask import Flask, jsonify, request
from multiprocessing import Value

counter = Value('i', 0)
app = Flask(__name__)

a = []
help_message = """
API Usage:

- GET    /api/list
- POST   /api/add data={"key": "value"}
- GET    /api/get/&lt;id&gt;
- PUT    /api/update/&lt;id&gt; data={"key": "value_to_replace"}
- DELETE /api/delete/&lt;id&gt; 

"""

def id_generator():
    with counter.get_lock():
        counter.value += 1
        return counter.value

@app.route('/api', methods=['GET'])
def help():
    return help_message

@app.route('/api/list', methods=['GET'])
def list():
    return jsonify(a)

@app.route('/api/add', methods=['POST'])
def index():
    payload = request.json 
    payload['id'] = id_generator()
    a.append(payload)
    return "Created: {} \n".format(payload)

@app.route('/api/get', methods=['GET'])
def get_none():
    return 'ID Required: /api/get/&lt;id&gt; \n'

@app.route('/api/get/&lt;int:_id&gt;', methods=['GET'])
def get(_id):
    for user in a:
        if _id == user['id']:
            selected_user = user
    return jsonify(selected_user)

@app.route('/api/update', methods=['PUT'])
def update_none():
    return 'ID and Desired K/V in Payload required: /api/update/&lt;id&gt; -d \'{"name": "john"}\' \n'

@app.route('/api/update/&lt;int:_id&gt;', methods=['PUT'])
def update(_id):
    update_req = request.json
    key_to_update = update_req.keys()[0]
    update_val = (item for item in a if item['id'] == _id).next()[key_to_update] = update_req.values()[0]
    update_resp = (item for item in a if item['id'] == _id).next()
    return "Updated: {} \n".format(update_resp)

@app.route('/api/delete/&lt;int:_id&gt;', methods=['DELETE'])
def delete(_id):
    deleted_user = (item for item in a if item['id'] == _id).next()
    a.remove(deleted_user)
    return "Deleted: {} \n".format(deleted_user)

if __name__ == '__main__':
    app.run()
</code></pre>

<h2>Demo Time:</h2>

<p>Retrieving the Help output:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api

API Usage:

- GET    /api/list
- POST   /api/add data={"key": "value"}
- GET    /api/get/&lt;id&gt;
- PUT    /api/update/&lt;id&gt; data={"key": "value_to_replace"}
- DELETE /api/delete/&lt;id&gt; 
</code></pre>

<p>Doing a list, to list all the users, its expected for it to be empty as we have not added any info to our API:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api/list
[]
</code></pre>

<p>Adding our first user:</p>

<pre><code class="bash">$ curl -XPOST -H 'Content-Type: application/json' http://localhost:5000/api/add -d '{"name": "ruan", "country": "south africa", "age": 30}'
Created: {u'country': u'south africa', u'age': 30, u'name': u'ruan', 'id': 1} 
</code></pre>

<p>Adding our second user:</p>

<pre><code class="bash">$ curl -XPOST -H 'Content-Type: application/json' http://localhost:5000/api/add -d '{"name": "stefan", "country": "south africa", "age": 29}'
Created: {u'country': u'south africa', u'age': 29, u'name': u'stefan', 'id': 2}
</code></pre>

<p>Doing a list again, will retrieve all our users:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api/list
[
  {
    "age": 30, 
    "country": "south africa", 
    "id": 1, 
    "name": "ruan"
  }, 
  {
    "age": 29, 
    "country": "south africa", 
    "id": 2, 
    "name": "stefan"
  }
]
</code></pre>

<p>Doing a GET on the userid, to only display the users info:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api/get/2
{
  "age": 29, 
  "country": "south africa", 
  "id": 2, 
  "name": "stefan"
}
</code></pre>

<p>Now, let&rsquo;s update some details. Let&rsquo;s say that Stefan relocated to New Zealand. We will need to provide his <code>id</code> and also the key/value that we want to update:</p>

<pre><code class="bash">$ curl -XPUT -H 'Content-Type: application/json' http://localhost:5000/api/update/2 -d '{"country": "new zealand"}'
Updated: {u'country': u'new zealand', u'age': 29, u'name': u'stefan', 'id': 2} 
</code></pre>

<p>As you can see the response confirmed that the value was updated, but let&rsquo;s verify the output, by doing a get on his id:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api/get/2
{
  "age": 29, 
  "country": "new zealand", 
  "id": 2, 
  "name": "stefan"
}
</code></pre>

<p>And lastly, lets delete our user, which will only require the userid:</p>

<pre><code class="bash">$ curl -XDELETE -H 'Content-Type: application/json' http://localhost:5000/api/delete/2
Deleted: {u'country': u'new zealand', u'age': 29, u'name': u'stefan', 'id': 2} 
</code></pre>

<p>To verify this, list all the users:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api/list
[
  {
    "age": 30, 
    "country": "south africa", 
    "id": 1, 
    "name": "ruan"
  }
]
</code></pre>

<h2>Using Python Requests:</h2>

<p>We can also use python&rsquo;s requests module to do the same, to give a demonstration I will create a new user:</p>

<pre><code class="bash">$ pip install requests
$ python
</code></pre>

<pre><code class="python">&gt;&gt;&gt; import requests
&gt;&gt;&gt; import json

&gt;&gt;&gt; base_url = 'http://localhost:5000/api/add'
&gt;&gt;&gt; headers = {"Content-Type": "application/json"}
&gt;&gt;&gt; payload = json.dumps({"name": "shaun", "country": "australia", "age": 24})

&gt;&gt;&gt; r = requests.post(base_url, headers=headers, data=payload)
&gt;&gt;&gt; r.content
Created: {u'country': u'australia', u'age': 24, u'name': u'shaun', 'id': 4}
</code></pre>

<p>Thats it. I&rsquo;ve stumbled upon <a href="https://flask-restful.readthedocs.io/en/latest/">Flask-Restful</a> which I still want to check out, and as soon as I do, I will do a post on it, maybe baked with a NoSQL db or something like that.</p>

<p>Cheers!</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://stackoverflow.com/a/8653568">Python Generator Expressions</a></li>
<li><a href="http://flask.pocoo.org/docs/0.12/api/#flask.Request">Flask Docs</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
