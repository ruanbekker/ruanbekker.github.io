<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flask | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/flask/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-12-02T16:19:15-05:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Flask Tutorial Series: Create a Hello World App]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/11/27/python-flask-tutorial-series-create-a-hello-world-app-p1/"/>
    <updated>2018-11-27T08:36:20-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/11/27/python-flask-tutorial-series-create-a-hello-world-app-p1</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/python-flask.png" alt="" /></p>

<p>This is post 1 of the <a href="http://blog.ruanbekker.com/blog/categories/flask-tutorial/">Python Flask Tutorial Series</a></p>

<h2>What is Python Flask</h2>

<p>Flask is a Micro Web Framework which is written in Python and is based on the Werkzeug Toolkit and the Jinja2 Template Engine.</p>

<p>Flask is super lightweight, and you import the modules as you need them, from some research some say that Flask is more designed for smaller applications whereas Django is designed for your larger applications.</p>

<p>a Good read on the [Differences and Performance Comparison]. With that being said, if you are planning with scale I am pretty sure that Flask can handle big applications, but it probably depends what your application is doing. More <a href="https://www.reddit.com/r/Python/comments/2jja20/is_flask_good_enough_to_develop_large_applications/">Detailed Discussion</a> on Reddit.</p>

<h2>Hello World in Python Flask</h2>

<p>In this post we will be creating a &ldquo;Hello, World&rdquo; application to demonstrate how easy it is to run a Flask Appliation.</p>

<p>The only requirement you need to run this app, would be to to have <code>python</code> and <code>pip</code> installed so that we can install the <code>Flask</code> package which is needed.</p>

<h2>Creating your Traditional Hello World App</h2>

<p>We will install flask globally, but will write up a <a href="https://sysadmins.co.za/python-flask-series-environment-setup-p3/">future post</a> on how to setup a virtual environment for you application. Install the flask package:</p>

<pre><code class="bash">$ pip install flask
</code></pre>

<p>The code for the Hello World Flask Application:</p>

<pre><code class="python">from flask import Flask 

app = Flask(__name__)

@app.route('/')
def index():
    return 'Hello, World!'

if __name__ == '__main__':
    app.run(host='127.0.0.1', port=5000, debug=True)
</code></pre>

<p>Save the above code as <code>app.py</code> and then run the application as follows:</p>

<pre><code>$ python app.py
 * Debug mode: on
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 282-492-812
</code></pre>

<h2>It&rsquo;s Running What Now?</h2>

<p>We can see that our application is running on 127.0.0.1 and listening on port: 5000, if you point your browser to this URL, you will be returned with: Hello, World!</p>

<pre><code class="bash">$ curl -i -XGET http://127.0.0.1:5000/
HTTP/1.0 200 OK
Content-Type: text/html; charset=utf-8
Content-Length: 13
Server: Werkzeug/0.12.1 Python/2.7.12
Date: Thu, 27 Nov 2018 13:51:15 GMT

Hello, World!
</code></pre>

<h2>Explaining the Application Code</h2>

<ul>
<li>First, we imported the <code>Flask</code> class from the flask module, using: <code>from flask import Flask</code></li>
<li>Then we instantiate our application from the Flask class: <code>app = Flask(__name__)</code> using our module&rsquo;s name as a parameter, where our app object will use this to resolve resources. We are using <code>__name__</code> , which links our module to our app object.</li>
<li>Next up we have the <code>@app.route('/')</code> decorator. Flask uses decorators for URL Routing.</li>
<li>Below our decorator, we have a <code>view function</code>, this function will be executed when the <code>/</code> route gets matched, in this case returning <code>Hello, World!</code></li>
<li>The last line starts our server, and from this example it runs locally on <code>127.0.0.1</code> on port: <code>5000</code> and <code>debug is enabled</code>, so any error details will be logged directly in the browser. This is only recommended for test/dev and not for production as you can make your service vulnerable for hackers.</li>
</ul>


<h2>Let&rsquo;s Extend our Hello World App</h2>

<p>We would like to add the route &lsquo;/movie&rsquo; which will return a random movie name:</p>

<pre><code class="python">import random
from flask import Flask

app = Flask(__name__)

@app.route('/')
def index():
    return 'Hello, World!'

@app.route('/movie')
def movie():
    movies = ['godfather', 'deadpool', 'toy story', 'top gun', 'forrest gump']
    return random.choice(movies)

if __name__ == '__main__':
    app.run(host='127.0.0.1', port=5000, debug=True)
</code></pre>

<p>Making a GET Request on the &lsquo;/movie&rsquo; route:</p>

<pre><code class="bash">$ curl -XGET http://127.0.0.1/movie
forrest gump
</code></pre>

<p>This was just a basic example and will be covering more topics in detail at a further stage.</p>

<p>Next up, setting up our Python Environment, with Virtual Environment (virtualenv)</p>

<h2>Related Content</h2>

<p>All posts related to this tutorial series will be listed under <a href="http://blog.ruanbekker.com/blog/categories/flask-tutorial/">Python Flask Tutorial Series</a> tag.</p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Python Flask: Tutorial Series]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/11/27/introduction-to-python-flask-tutorial-series/"/>
    <updated>2018-11-27T08:28:33-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/11/27/introduction-to-python-flask-tutorial-series</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/python-flask.png" alt="" /></p>

<p>This post is the index for all the posts that will be covered in our Python Flask Tutorial Series:</p>

<h2>What will be covered</h2>

<p>This is intended for people starting out with Python Flask and the basics will be covered on using Flask so that you can get familliar with the framework.</p>

<p>The following will be covered:</p>

<ul>
<li>Hello World Basic App</li>
<li>Routing in Flask</li>
<li>Jinja Templating</li>
<li>Static Files</li>
<li>etc</li>
</ul>


<p>More will be posted</p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Application Performance Metrics on Python Flask With Elastic APM on Kibana and Elasticsearch]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/11/11/get-application-performance-metrics-on-python-flask-with-elastic-apm-on-kibana-and-elasticsearch/"/>
    <updated>2018-11-11T13:09:18-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/11/11/get-application-performance-metrics-on-python-flask-with-elastic-apm-on-kibana-and-elasticsearch</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-banner.png" alt="" /></p>

<p>In this post we will setup a Python Flask Application which includes the APM Agent which will collect metrics, that gets pushed to the APM Server. If you have not setup the Elastic Stack with / or APM Server, you <a href="https://blog.ruanbekker.com/blog/2018/11/11/setup-apm-server-on-ubuntu-for-your-elastic-stack-to-get-insights-in-your-application-performance-metrics/">can follow this post</a> to setup the needed.</p>

<p>Then we will make a bunch of HTTP Requests to our Application and will go through the metrics per request type.</p>

<h2>Application Metrics</h2>

<p>Our Application will have the following Request Paths:</p>

<ul>
<li><code>/</code> - Returns static text</li>
<li><code>/delay</code> - random delays to simulate increased response latencies</li>
<li><code>/upstream</code> - get data from a upstream provider, if statements to provide dummy 200, 404 and 502 reponses to visualize</li>
<li><code>/5xx</code> - request path that will raise an exception so that we can see the error via apm</li>
<li><code>/sql-write</code> - inserts 5 rows into a sqlite database</li>
<li><code>/sql-read</code> - executes a select all from the database</li>
<li><code>/sql-group</code> - sql query to group all the cities and count them</li>
</ul>


<p>This is just simple request paths to demonstrate the metrics via APM (Application Performance Monitoring) on Kibana.</p>

<h2>Install Flask and APM Agent</h2>

<p>Create a virtual environment and install the dependencies:</p>

<pre><code class="bash">$ apt install python python-setuptools -y
$ easy_install pip
$ pip install virtualenv
$ pip install elastic-apm[flask]
$ pip install flask
</code></pre>

<p>For more info on <a href="https://www.elastic.co/guide/en/apm/agent/python/current/getting-started.html">APM Configuration</a>.</p>

<h2>Instrument a Bare Bones Python Flask app with APM:</h2>

<p>A Barebones app with APM Configured will look like this:</p>

<pre><code class="python">from flask import Flask, jsonify
from elasticapm.contrib.flask import ElasticAPM
from elasticapm.handlers.logging import LoggingHandler

app = Flask(__name__)
apm = ElasticAPM(app, server_url='http://localhost:8200', service_name='flask-app-1', logging=True)

@app.route('/')
def index():
    return jsonify({"message": "response ok"}), 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80)
</code></pre>

<p>This will provide metrics on the <code>/</code> request path. In order to trace transaction ids from the metrics, we need to configure the index on Kibana. To do this, head over to Kibana, Management, Index Patterns, Add Index Pattern, <code>apm*</code>, select <code>@timestamp</code> as the time filter field name.</p>

<p>This will allow you to see the data when tracing the transaction id&rsquo;s via the Discover UI.</p>

<h2>Create the Python Flask App</h2>

<p>Create the Flask App with the request paths as mentioned in the beginning:</p>

<pre><code class="python">import sqlite3, requests, time, logging, random
from flask import Flask, jsonify
from elasticapm.contrib.flask import ElasticAPM
from elasticapm.handlers.logging import LoggingHandler

names = ['ruan', 'stefan', 'philip', 'norman', 'frank', 'pete', 'johnny', 'peter', 'adam']
cities = ['cape town', 'johannesburg', 'pretoria', 'dublin', 'kroonstad', 'bloemfontein', 'port elizabeth', 'auckland', 'sydney']
lastnames = ['smith', 'bekker', 'admams', 'phillips', 'james', 'adamson']

conn = sqlite3.connect('database.db')
conn.execute('CREATE TABLE IF NOT EXISTS people (name STRING, age INTEGER, surname STRING, city STRING)')
#sqlquery_write = conn.execute('INSERT INTO people VALUES("{}", "{}", "{}", "{}")'.format(random.choice(names), random.randint(18,40), random.choice(lastnames), random.choice(cities)))
seconds = [0.002, 0.003, 0.004, 0.01, 0.3, 0.2, 0.009, 0.015, 0.02, 0.225, 0.009, 0.001, 0.25, 0.030, 0.018]

app = Flask(__name__)
apm = ElasticAPM(app, server_url='http://localhost:8200', service_name='my-app-01', logging=False)

@app.route('/')
def index():
    return jsonify({"message": "response ok"})

@app.route('/delay')
def delay():
    time.sleep(random.choice(seconds))
    return jsonify({"message": "response delay"})

@app.route('/upstream')
def upstream():
    r = requests.get('https://api.ruanbekker.com/people').json()
    r.get('country')
    if r.get('country') == 'italy':
        return 'Italalia!', 200
    elif r.get('country') == 'canada':
        return 'Canada!', 502
    else:
        return 'Not Found', 404

@app.route('/5xx')
def fail_with_5xx():
    value = 'a' + 1
    return jsonify({"message": value})

@app.route('/sql-write')
def sqlw():
    conn = sqlite3.connect('database.db')
    conn.execute('INSERT INTO people VALUES("{}", "{}", "{}", "{}")'.format(random.choice(names), random.randint(18,40), random.choice(lastnames), random.choice(cities)))
    conn.execute('INSERT INTO people VALUES("{}", "{}", "{}", "{}")'.format(random.choice(names), random.randint(18,40), random.choice(lastnames), random.choice(cities)))
    conn.execute('INSERT INTO people VALUES("{}", "{}", "{}", "{}")'.format(random.choice(names), random.randint(18,40), random.choice(lastnames), random.choice(cities)))
    conn.execute('INSERT INTO people VALUES("{}", "{}", "{}", "{}")'.format(random.choice(names), random.randint(18,40), random.choice(lastnames), random.choice(cities)))
    conn.execute('INSERT INTO people VALUES("{}", "{}", "{}", "{}")'.format(random.choice(names), random.randint(18,40), random.choice(lastnames), random.choice(cities)))
    conn.commit()
    conn.close()
    return 'ok', 200

@app.route('/sql-read')
def sqlr():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    cur.execute('select * from people')
    rows = cur.fetchall()
    conn.close()
    return 'ok', 200

@app.route('/sql-group')
def slqg():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    cur.execute('select count(*) as num, city from people group by city')
    rows = cur.fetchall()
    conn.close()
    return 'ok', 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80)
</code></pre>

<p>Run the app:</p>

<pre><code class="bash">$ python app.py
</code></pre>

<p>At this point, we wont have any data on APM as we need to make requests to our application. Let&rsquo;s make 10 HTTP GET Requests on the <code>/</code> Request Path:</p>

<pre><code class="bash">$ count=0 &amp;&amp; while [ $count -lt 10 ]; do curl http://application-routable-address:80/; sleep 1; count=$((count+1)); done
</code></pre>

<h2>Visualize the Root Request Path</h2>

<p>Head over to Kibana, Select APM and you will see something similar like below when selecting the timepicker to 15 minutes at the right top corner. This page will give you the overview of all your configured applications and the average response times over the selected time, transactions per minute, errors per minute etc:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-home-root.png" alt="" /></p>

<p>When you select your application, you will find the graphs on you response times and requests per minute, also a breakdown per request path:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-app-view-1.png" alt="" /></p>

<p>When selecting the request path, in this case <code>GET /</code>, you will find a breakdown of metrics only for that request and also the response time distribution for that request path, if you select frame from the response time distribution, it will filter the focus to that specific transaction.</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-req-view-1.png" alt="" /></p>

<p>When you scroll a bit down to the Transaction Sample section, you will find data about the request, response, system etc:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-app-transaction-1.png" alt="" /></p>

<p>From the Transaction Sample, you can select the View Transaction in Discover button, which will trace that transaction id on the Discover UI:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-transaction-disc-1.png" alt="" /></p>

<p>Increasing the http curl clients running simultaneously from different servers and increasing the time for 15 minutes to have more metrics will result in the screenshot below, notice the 6ms response time can easily be traced selecting it in the response time distribution, then discovering it in the UI, which will give you the raw data from that request:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-req-view-2.png" alt="" /></p>

<h2>Viewing Application Errors in APM</h2>

<p>Make a couple of requests to <code>/5xx</code>:</p>

<pre><code class="bash">$ curl http://application-routable-endpoint:80/5xx
</code></pre>

<p>Navigate to the app, select Errors, then you will see the exception details that was returned. Here we can see that in our code we tried to concatenate integers with strings:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-error-1.png" alt="" /></p>

<p>Furthermore we can select that error and it will provide us a direct view on where in our code the error gets generated:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-error-details-1.png" alt="" /></p>

<p>Pretty cool right?! You can also further select the library frames, which will take you to the lower level code that raised the exception. If this errors can be drilled down via the discover ui, to group by source address etc.</p>

<h2>Simulate Response Latencies:</h2>

<p>Make a couple of requests to the <code>/delay</code> request path, and you should see the increased response times from earlier:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-app-view-delay.png" alt="" /></p>

<h2>Requests where Database Calls are Executed</h2>

<p>The while loop to call random request paths:</p>

<pre><code class="bash">count=0 &amp;&amp; while [ $count -lt 1000 ]; 
do 
  curl -H "Host: my-za-server" -i http://x.x.x.x/sql-write; 
  curl -H "Host: my-za-server" -i http://x.x.x.x/sql-read; 
  curl -H "Host: my-za-server" -i http://x.x.x.x/sql-group; 
  curl -H "Host: my-eu-server" -i http://x.x.x.x/sql-write; 
  curl -H "Host: my-us-server" -i http://x.x.x.x/sql-write; 
  curl -H "Host: my-za-server" -i http://x.x.x.x/sql-write; 
  curl -H "Host: my-za-server" -i http://x.x.x.x/sql-write; 
  curl -H "Host: my-za-server" -i http://x.x.x.x/sql-read; 
  curl -H "Host: my-eu-server" -i http://x.x.x.x/sql-group; 
  curl -H "Host: my-us-server" -i http://x.x.x.x/sql-group; 
  curl -H "Host: my-za-server" -i http://x.x.x.x/sql-write; 
  curl -H "Host: my-za-server" -i http://x.x.x.x/sql-write; 
  curl -H "Host: my-eu-server" -i http://x.x.x.x/sql-group; 
  curl -H "Host: my-za-server" -i http://x.x.x.x/sql-group; 
  count=$((count+1)); 
done
</code></pre>

<p>When we look at our applications performance monitoring overview, we can see the writes provide more latencies as the group by&rsquo;s:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-view-1.png" alt="" /></p>

<p>The <code>/sql-write</code> request overview:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlwrite-1.png" alt="" /></p>

<p>When selecting a transaction sample, we can see the timeline of each database call:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlwrite-1-details.png" alt="" /></p>

<p>When looking at the <code>/sql-group</code> request overview, we can see that the response times increasing overtime, as more data is written to the database, it takes longer to read and group all the data from the database:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlgroup-1.png" alt="" /></p>

<p>The transaction details shows the timeline of the database query from that request:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlgroup-1-details.png" alt="" /></p>

<p>When you select the database select query on the timeline view, it will take you to the exact database query that was executed:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlgroup-1-span.png" alt="" /></p>

<p>When we include a database call with a external request to a remote http endpoint, we will see something like:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlread-ext.png" alt="" /></p>

<h2>Viewing 4xx and 5xx Response Codes</h2>

<p>From the application code we are returning 2xx, 4xx, and 5xx response codes for this demonstration to visualize them:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-app-response-codes.png" alt="" /></p>

<h2>Configuring more Applications</h2>

<p>Once more apps are configured, and they start serving traffic, they will start appearing on the APM UI as below:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-apps.png" alt="" /></p>

<p>APM is available for other languages as well and provides a getting started snippets from the APM UI. For more information on APM, have a look at their <a href="https://www.elastic.co/solutions/apm">Documentation</a></p>

<p>Hope this was useful.</p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Python Flask and JavaScript for Client Side Filtering Through Returned Data]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/24/using-python-flask-and-javascript-for-client-side-filtering-through-returned-data/"/>
    <updated>2018-10-24T05:39:33-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/24/using-python-flask-and-javascript-for-client-side-filtering-through-returned-data</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/python-logo.png" alt="" /></p>

<p>This post will cover 2 sections, using Python Flask and Javascript to filter returned data, where you could have a table that represents 100 items, and you want to have a search box to filter down your results as you type.</p>

<p>The other section will be used as a demo, with solving a problem with Amazon CloudWatch Logs. I&rsquo;m a Massive AWS Fanatic, but when it comes to CloudWatch Logs, I&rsquo;m not so big of a fan of that specific service. Especially when you use Docker Swarm for AWS and have your logdriver set to CloudWatch Logs.</p>

<script id="mNCC" language="javascript">
    medianet_width = "728";
    medianet_height = "90";
    medianet_crid = "218284798";
    medianet_versionId = "3111299"; 
  </script>


<script src="//contextual.media.net/nmedianet.js?cid=8CUD78FSV"></script>


<h2>The Problem I have with CloudWatch Logs</h2>

<p>When you point to your CloudWatch LogGroups, you can search for your streams, and in my case searching for a specific swarm service, but you can&rsquo;t sort by date, like this:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/cloudwatch-logs-date-issue.png" alt="" /></p>

<p>This makes it really tedious when trying to search find your logs in a quick way.</p>

<h2>Python Flask to the Resque</h2>

<p>We will create a Python Flask application that retrieves your data about all your Docker Swarm Services and Container Id&rsquo;s running on each node. For this demonstration, I have hard coded the services and container id&rsquo;s, but using it in a real environment, you can utilise the Docker API or some logic that retrieves it from a datastore where a process populates it to.</p>

<p>The Application Code will do the following:</p>

<ul>
<li>returns a list of your swarm services (mock data in the code)</li>
<li>when you select a service, it will get a list of the container ids and run through a for loop unsing jinja templates and display them in table format</li>
<li>when you select the containerId, it will populate the containerId to the cloudwatch logs filter, giving you the exact logstream which you are looking for</li>
<li><p>this will do a redirect to the AWS Console, and you will see the data in the sorted time of interest</p></li>
<li><p><code>app.py</code></p></li>
</ul>


<pre><code class="python">from flask import Flask, render_template

app = Flask(__name__)

# faking datasets that can be returned from a api or database
swarm_services = ['my-web-service', 'my-api-service']
swarm_tasks = {
    "my-web-service": {
        "container_names": [
            "my-web-service.1.alfjshoehfosfn",
            "my-web-service.2.fuebchduehakjdu"
        ]
    },
    "my-api-service": {
        "container_names": [
            "my-api-service.1.oprudhyuythvbzx",
            "my-api-service.2.sjduebansifotuf"
        ]
    }
}

def get_container_name(app_name):
    data = []
    response = swarm_tasks[app_name]
    for container in response['container_names']:
        data.append(container)
    return render_template('index.html', app_name=app_name, number=len(data), data=data)

@app.route('/')
def list():
    return render_template('list.html', number=len(swarm_services), apps=swarm_services, aws_region='eu-west-1', cloudwatch_log_stream='docker-swarm-lg')

@app.route('/describe/&lt;string:app_name&gt;')
def get_app(app_name):
    app = get_container_name(app_name)
    return app

if __name__ == '__main__':
    app.run()
</code></pre>

<p>The <code>index.html</code>:</p>

<script src="https://gist.github.com/ruanbekker/08b02a3ef30367ea7306a31eb5f33cb1.js"></script>


<p>The <code>list.html</code> :</p>

<script src="https://gist.github.com/ruanbekker/98eab090e218bbbf0e46d5efc1595e04.js"></script>


<h2>Filtering the Data</h2>

<p>So at this moment all your data will be returned when a list is done, if you are in a case where you have lots of information, it can be overwelming and you will need to search for the service of interest. Using HTML and JavaScript, you can filter through the results:</p>

<p>The JavaScript Function: <code>assets/js/filter.js</code></p>

<pre><code class="javascript">function SearchAndFilterThingy() {
  var input, filter, table, tr, td, x;
  input = document.getElementById("UserInput");
  filter = input.value.toUpperCase();
  table = document.getElementById("ServicesTable");
  tr = table.getElementsByTagName("tr");

  for (x = 0; x &lt; tr.length; x++) {
    td = tr[x].getElementsByTagName("td")[0];
    if (td) {
      if (td.innerHTML.toUpperCase().indexOf(filter) &gt; -1) {
        tr[x].style.display = "";
      }
      else {
        tr[x].style.display = "none";
      }
    }
  }
}
</code></pre>

<h2>Screenshot</h2>

<p>Once you search for a specific keyword on the service you are looking for the output should more or less look like the following:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/docker-flask-running-services.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capture Geo Location Data With Python Flask and PyGeoIP]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/07/16/capture-geo-location-data-with-python-flask-and-pygeoip/"/>
    <updated>2018-07-16T17:46:01-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/07/16/capture-geo-location-data-with-python-flask-and-pygeoip</id>
    <content type="html"><![CDATA[<p>With the PyGeoIP package you can capture geo location data, which is pretty cool, for example, when you have IOT devices pushing location data to elasticsearch and visualizing the data with Kibana. That will be one example, but the possibilites are endless.</p>

<h2>Dependencies:</h2>

<p>Get the Maxmind Geo Database:</p>

<pre><code class="bash">$ wget -N http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz
$ gunzip GeoLiteCity.dat.gz
</code></pre>

<p>Install Python Flask and PyGeoIP:</p>

<pre><code class="bash">$ pip install flask pygeoip
</code></pre>

<h2>Getting Started with PyGeoIP:</h2>

<p>Let&rsquo;s run through a couple of examples on how to get:</p>

<ul>
<li>Country Name by IP Address and DNS</li>
<li>Country Code by IP Address and DNS</li>
<li>GeoData by IP Address</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; import pygeoip, json
&gt;&gt;&gt; gi = pygeoip.GeoIP('GeoLiteCity.dat')

&gt;&gt;&gt; gi.country_name_by_addr('8.8.8.8')
'United States'
&gt;&gt;&gt; gi.country_code_by_addr('8.8.8.8')
'US'

&gt;&gt;&gt; gi.country_name_by_name('scaleway.com')
'France'
&gt;&gt;&gt; gi.country_code_by_name('scaleway.com')
'FR'

&gt;&gt;&gt; gi.region_by_name('scaleway.com')
{'region_code': None, 'country_code': 'FR'}

&gt;&gt;&gt; data = gi.record_by_addr('104.244.42.193')
&gt;&gt;&gt; print(json.dumps(data, indent=2))
{
  "city": "San Francisco",
  "region_code": "CA",
  "area_code": 415,
  "time_zone": "America/Los_Angeles",
  "dma_code": 807,
  "metro_code": "San Francisco, CA",
  "country_code3": "USA",
  "latitude": 37.775800000000004,
  "postal_code": "94103",
  "longitude": -122.4128,
  "country_code": "US",
  "country_name": "United States",
  "continent": "NA"
}

&gt;&gt;&gt; data = gi.record_by_name('twitter.com')
&gt;&gt;&gt; print(json.dumps(data, indent=2))
{
  "city": "San Francisco",
  "region_code": "CA",
  "area_code": 415,
  "time_zone": "America/Los_Angeles",
  "dma_code": 807,
  "metro_code": "San Francisco, CA",
  "country_code3": "USA",
  "latitude": 37.775800000000004,
  "postal_code": "94103",
  "longitude": -122.4128,
  "country_code": "US",
  "country_name": "United States",
  "continent": "NA"
}
</code></pre>

<h2>Python Flask Web App to Capture Data</h2>

<p>Let&rsquo;s create a basic Flask App that will capture the data from the client making the request to the server. In this example we will just return the data, but we can filter the data and ingest it into a database like elasticsearch, etc.</p>

<pre><code class="python">from flask import Flask, request, jsonify
import pygeoip, json

app = Flask(__name__)

geo = pygeoip.GeoIP('GeoLiteCity.dat', pygeoip.MEMORY_CACHE)

@app.route('/')
def index():
    client_ip = request.remote_addr
    geo_data = geo.record_by_addr(client_ip)
    return json.dumps(geo_data, indent=2) + '\n'

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80, debug=False)
</code></pre>

<p>Run the Server:</p>

<pre><code class="bash">$ python app.py
</code></pre>

<p>Make a request from the client over a remote connection:</p>

<pre><code class="bash">$ curl http://remote-endpoint.com
{
  "city": "Cape Town",
  "region_code": "11",
  "area_code": 0,
  "time_zone": "Africa/Johannesburg",
  "dma_code": 0,
  "metro_code": null,
  "country_code3": "ZAF",
  "latitude": -01.12345,
  "postal_code": "8000",
  "longitude": 02.123456789,
  "country_code": "ZA",
  "country_name": "South Africa",
  "continent": "AF"
}
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="http://pygeoip.readthedocs.io/en/latest/getting-started.html">PyGeoIP</a></li>
<li><a href="https://dev.maxmind.com/geoip/legacy/install/city/">MaxMind</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
