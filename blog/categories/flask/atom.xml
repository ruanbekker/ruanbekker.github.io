<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flask | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/flask/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-06-03T18:55:16-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Add a Authentication Header to Your Python Flask App]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/06/01/add-a-authentication-header-to-your-python-flask-app/"/>
    <updated>2018-06-01T03:28:05-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/06/01/add-a-authentication-header-to-your-python-flask-app</id>
    <content type="html"><![CDATA[<p><img src="http://obj-cache.cloud.ruanbekker.com/flask.png" alt="" /></p>

<p>We will write a simple Python Flask application that requires authentication in order to respond with a 200 HTTP Status code.</p>

<h2>Python Flask Application:</h2>

<p>Our Python Flask application will require the Header <code>x-api-key dhuejso2dj3d0</code> in the HTTP Request, to give us a 200 HTTP Status code, if not, we will respond with a 401 Unauthorized Response:</p>

<pre><code class="python">from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/')
def index():
    headers = request.headers
    auth = headers.get("X-Api-Key")
    if auth == 'asoidewfoef':
        return jsonify({"message": "OK: Authorized"}), 200
    else:
        return jsonify({"message": "ERROR: Unauthorized"}), 401

if __name__ == '__main__':
    app.run()
</code></pre>

<p>To get the headers, you can use <code>headers.get("X-Api-Key")</code> or <code>headers["X-Api-Key"]</code></p>

<p>Create a virtual environment, install flask and run the app:</p>

<pre><code class="bash">$ virtualenv .venv
$ source .venv/bin/activate
$ python app.py
 * Serving Flask app "app" (lazy loading)
 * Environment: production
   WARNING: Do not use the development server in a production environment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
</code></pre>

<h2>Requests to our App:</h2>

<p>Let&rsquo;s first make a request with no headers, which should then give us a 401 Unautorhized response:</p>

<pre><code class="bash">$ curl -i http://localhost:5000

HTTP/1.0 401 UNAUTHORIZED
Content-Type: application/json
Content-Length: 33
Server: Werkzeug/0.14.1 Python/3.6.5
Date: Fri, 01 Jun 2018 07:26:25 GMT

{"message":"ERROR: Unauthorized"}
</code></pre>

<p>Now let&rsquo;s include the authentication token in our headers. If the string is the same as the one in the code, we should see a 200 HTTP Response:</p>

<pre><code class="bash">$ curl -i -H 'x-api-key: asoidewfoef' http://localhost:5000

HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 29
Server: Werkzeug/0.14.1 Python/3.6.5
Date: Fri, 01 Jun 2018 07:27:03 GMT

{"message":"OK: Authorized"}
</code></pre>

<h2>Note:</h2>

<p>From a best practice, its not a good decision to hard code sensitive details in your code, but rather read that from an encrypted database and store that in your applications environment variables, and let your application read from the environment variables, something like that :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Forms With Python Flask and the WTForms Module With Bootstrap]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/05/27/web-forms-with-python-flask-and-the-wtforms-module-with-bootstrap/"/>
    <updated>2018-05-27T17:44:41-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/05/27/web-forms-with-python-flask-and-the-wtforms-module-with-bootstrap</id>
    <content type="html"><![CDATA[<p><img src="http://obj-cache.cloud.ruanbekker.com/flask.png" alt="" /></p>

<p>Quick demo with Web Forms using the WTForms module in Python Flask.</p>

<h2>Requirements:</h2>

<p>Install the required dependencies:</p>

<pre><code class="bash">$ pip install flask wtforms
</code></pre>

<h2>Application:</h2>

<p>The Application code of the Web Forms Application. Note that we are also using validation, as we want the user to complete all the fields. I am also including a function that logs to the directory where the application is running, for previewing the data that was logged.</p>

<pre><code class="python app.py">from random import randint
from time import strftime
from flask import Flask, render_template, flash, request
from wtforms import Form, TextField, TextAreaField, validators, StringField, SubmitField

DEBUG = True
app = Flask(__name__)
app.config.from_object(__name__)
app.config['SECRET_KEY'] = 'SjdnUends821Jsdlkvxh391ksdODnejdDw'

class ReusableForm(Form):
    name = TextField('Name:', validators=[validators.required()])
    surname = TextField('Surname:', validators=[validators.required()])

def get_time():
    time = strftime("%Y-%m-%dT%H:%M")
    return time

def write_to_disk(name, surname, email):
    data = open('file.log', 'a')
    timestamp = get_time()
    data.write('DateStamp={}, Name={}, Surname={}, Email={} \n'.format(timestamp, name, surname, email))
    data.close()

@app.route("/", methods=['GET', 'POST'])
def hello():
    form = ReusableForm(request.form)

    #print(form.errors)
    if request.method == 'POST':
        name=request.form['name']
        surname=request.form['surname']
    email=request.form['email']
    password=request.form['password']

        if form.validate():
            write_to_disk(name, surname, email)
            flash('Hello: {} {}'.format(name, surname))

        else:
            flash('Error: All Fields are Required')

    return render_template('index.html', form=form)

if __name__ == "__main__":
    app.run()
</code></pre>

<h2>HTML Template:</h2>

<p><code>templates/index.html</code></p>

<script src="https://gist.github.com/ruanbekker/f552f1e57aeb038e8c10b148ed1e4c2b.js"></script>


<p>This will result in a basic web form like this:</p>

<p><img src="https://i.snag.gy/3x98UV.jpg" alt="" /></p>

<h2>Resources:</h2>

<ul>
<li><a href="https://getbootstrap.com/docs/4.1/components/alerts/">https://getbootstrap.com/docs/4.1/components/alerts/</a></li>
<li><a href="https://pythonspot.com/en/download-flask-examples/">https://pythonspot.com/en/download-flask-examples/</a></li>
<li><a href="https://flask-wtf.readthedocs.io/en/stable/quickstart.html">https://flask-wtf.readthedocs.io/en/stable/quickstart.html</a></li>
<li><a href="https://pythonspot.com/flask-web-forms/">https://pythonspot.com/flask-web-forms/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic RESTFul API Server With Python Flask]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/21/basic-restful-api-server-with-python-flask/"/>
    <updated>2018-04-21T19:35:34-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/21/basic-restful-api-server-with-python-flask</id>
    <content type="html"><![CDATA[<p><img src="http://obj-cache.cloud.ruanbekker.com/flask.png" alt="" /></p>

<p>A Basic RESTFul API Service with Python Flask. We will be using the Flask, jsonify and request classes to build our API service.</p>

<h2>Description of this demonstration:</h2>

<p>Our API will be able to do the following:</p>

<ul>
<li>Create, Read, Update, Delete</li>
</ul>


<p>In this demonstration, we will add some information about people to our API, then go through each method that is mentioned above.</p>

<h2>Getting the Dependencies:</h2>

<p>Setup the virtualenv and install the dependencies:</p>

<pre><code class="bash">$ virtualenv .venv
$ source .venv/bin/activate
$ pip install flask
</code></pre>

<h2>The API Server Code:</h2>

<p>Here&rsquo;s the complete code, as you can see I have a couple of decorators for each url endpoint, and a <code>id_generator</code> function, that will generate id&rsquo;s for each document. The id will be used for getting users information, updates and deletes:</p>

<pre><code class="python">from flask import Flask, jsonify, request
from multiprocessing import Value

counter = Value('i', 0)
app = Flask(__name__)

a = []
help_message = """
API Usage:

- GET    /api/list
- POST   /api/add data={"key": "value"}
- GET    /api/get/&lt;id&gt;
- PUT    /api/update/&lt;id&gt; data={"key": "value_to_replace"}
- DELETE /api/delete/&lt;id&gt; 

"""

def id_generator():
    with counter.get_lock():
        counter.value += 1
        return counter.value

@app.route('/api', methods=['GET'])
def help():
    return help_message

@app.route('/api/list', methods=['GET'])
def list():
    return jsonify(a)

@app.route('/api/add', methods=['POST'])
def index():
    payload = request.json 
    payload['id'] = id_generator()
    a.append(payload)
    return "Created: {} \n".format(payload)

@app.route('/api/get', methods=['GET'])
def get_none():
    return 'ID Required: /api/get/&lt;id&gt; \n'

@app.route('/api/get/&lt;int:_id&gt;', methods=['GET'])
def get(_id):
    for user in a:
        if _id == user['id']:
            selected_user = user
    return jsonify(selected_user)

@app.route('/api/update', methods=['PUT'])
def update_none():
    return 'ID and Desired K/V in Payload required: /api/update/&lt;id&gt; -d \'{"name": "john"}\' \n'

@app.route('/api/update/&lt;int:_id&gt;', methods=['PUT'])
def update(_id):
    update_req = request.json
    key_to_update = update_req.keys()[0]
    update_val = (item for item in a if item['id'] == _id).next()[key_to_update] = update_req.values()[0]
    update_resp = (item for item in a if item['id'] == _id).next()
    return "Updated: {} \n".format(update_resp)

@app.route('/api/delete/&lt;int:_id&gt;', methods=['DELETE'])
def delete(_id):
    deleted_user = (item for item in a if item['id'] == _id).next()
    a.remove(deleted_user)
    return "Deleted: {} \n".format(deleted_user)

if __name__ == '__main__':
    app.run()
</code></pre>

<h2>Demo Time:</h2>

<p>Retrieving the Help output:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api

API Usage:

- GET    /api/list
- POST   /api/add data={"key": "value"}
- GET    /api/get/&lt;id&gt;
- PUT    /api/update/&lt;id&gt; data={"key": "value_to_replace"}
- DELETE /api/delete/&lt;id&gt; 
</code></pre>

<p>Doing a list, to list all the users, its expected for it to be empty as we have not added any info to our API:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api/list
[]
</code></pre>

<p>Adding our first user:</p>

<pre><code class="bash">$ curl -XPOST -H 'Content-Type: application/json' http://localhost:5000/api/add -d '{"name": "ruan", "country": "south africa", "age": 30}'
Created: {u'country': u'south africa', u'age': 30, u'name': u'ruan', 'id': 1} 
</code></pre>

<p>Adding our second user:</p>

<pre><code class="bash">$ curl -XPOST -H 'Content-Type: application/json' http://localhost:5000/api/add -d '{"name": "stefan", "country": "south africa", "age": 29}'
Created: {u'country': u'south africa', u'age': 29, u'name': u'stefan', 'id': 2}
</code></pre>

<p>Doing a list again, will retrieve all our users:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api/list
[
  {
    "age": 30, 
    "country": "south africa", 
    "id": 1, 
    "name": "ruan"
  }, 
  {
    "age": 29, 
    "country": "south africa", 
    "id": 2, 
    "name": "stefan"
  }
]
</code></pre>

<p>Doing a GET on the userid, to only display the users info:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api/get/2
{
  "age": 29, 
  "country": "south africa", 
  "id": 2, 
  "name": "stefan"
}
</code></pre>

<p>Now, let&rsquo;s update some details. Let&rsquo;s say that Stefan relocated to New Zealand. We will need to provide his <code>id</code> and also the key/value that we want to update:</p>

<pre><code class="bash">$ curl -XPUT -H 'Content-Type: application/json' http://localhost:5000/api/update/2 -d '{"country": "new zealand"}'
Updated: {u'country': u'new zealand', u'age': 29, u'name': u'stefan', 'id': 2} 
</code></pre>

<p>As you can see the response confirmed that the value was updated, but let&rsquo;s verify the output, by doing a get on his id:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api/get/2
{
  "age": 29, 
  "country": "new zealand", 
  "id": 2, 
  "name": "stefan"
}
</code></pre>

<p>And lastly, lets delete our user, which will only require the userid:</p>

<pre><code class="bash">$ curl -XDELETE -H 'Content-Type: application/json' http://localhost:5000/api/delete/2
Deleted: {u'country': u'new zealand', u'age': 29, u'name': u'stefan', 'id': 2} 
</code></pre>

<p>To verify this, list all the users:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api/list
[
  {
    "age": 30, 
    "country": "south africa", 
    "id": 1, 
    "name": "ruan"
  }
]
</code></pre>

<h2>Using Python Requests:</h2>

<p>We can also use python&rsquo;s requests module to do the same, to give a demonstration I will create a new user:</p>

<pre><code class="bash">$ pip install requests
$ python
</code></pre>

<pre><code class="python">&gt;&gt;&gt; import requests
&gt;&gt;&gt; import json

&gt;&gt;&gt; base_url = 'http://localhost:5000/api/add'
&gt;&gt;&gt; headers = {"Content-Type": "application/json"}
&gt;&gt;&gt; payload = json.dumps({"name": "shaun", "country": "australia", "age": 24})

&gt;&gt;&gt; r = requests.post(base_url, headers=headers, data=payload)
&gt;&gt;&gt; r.content
Created: {u'country': u'australia', u'age': 24, u'name': u'shaun', 'id': 4}
</code></pre>

<p>Thats it. I&rsquo;ve stumbled upon <a href="https://flask-restful.readthedocs.io/en/latest/">Flask-Restful</a> which I still want to check out, and as soon as I do, I will do a post on it, maybe baked with a NoSQL db or something like that.</p>

<p>Cheers!</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://stackoverflow.com/a/8653568">Python Generator Expressions</a></li>
<li><a href="http://flask.pocoo.org/docs/0.12/api/#flask.Request">Flask Docs</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graphing Pretty Charts With Python Flask and Chartjs]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/12/14/graphing-pretty-charts-with-python-flask-and-chartjs/"/>
    <updated>2017-12-14T02:28:51-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/12/14/graphing-pretty-charts-with-python-flask-and-chartjs</id>
    <content type="html"><![CDATA[<p><img src="https://thumbsplus.tutsplus.com/uploads/users/1251/posts/28278/preview_image/chartjs-tutsplus.jpg" alt="" /></p>

<p>I am a big sucker for Charts and Graphs, and today I found one awesome library called <a href="http://www.chartjs.org/">Chart.js</a>, which we will use with Python Flask Web Framework, to graph our data.</p>

<p>As Bitcoin is doing so well, I decided to graph the monthly Bitcoin price from January up until now.</p>

<h2>Dependencies:</h2>

<p>Install Flask:</p>

<pre><code class="bash">$ pip install flask
</code></pre>

<p>Create the files and directories:</p>

<pre><code class="bash">$ touch app.py
$ mkdir templates
</code></pre>

<p>We need the <a href="http://www.chartjs.org/docs/latest/#installation">Chart.js</a> library, but I will use the CDN version, in my html.</p>

<h2>Creating the Flask App:</h2>

<p>Our data that we want to graph will be hard-coded in our application, but there are many ways to make this more dynamic, in your <code>app.py</code>:</p>

<pre><code class="python">from flask import Flask, Markup, render_template

app = Flask(__name__)

labels = [
    'JAN', 'FEB', 'MAR', 'APR',
    'MAY', 'JUN', 'JUL', 'AUG',
    'SEP', 'OCT', 'NOV', 'DEC'
]

values = [
    967.67, 1190.89, 1079.75, 1349.19,
    2328.91, 2504.28, 2873.83, 4764.87,
    4349.29, 6458.30, 9907, 16297
]

colors = [
    "#F7464A", "#46BFBD", "#FDB45C", "#FEDCBA",
    "#ABCDEF", "#DDDDDD", "#ABCABC", "#4169E1",
    "#C71585", "#FF4500", "#FEDCBA", "#46BFBD"]

@app.route('/bar')
def bar():
    bar_labels=labels
    bar_values=values
    return render_template('bar_chart.html', title='Bitcoin Monthly Price in USD', max=17000, labels=bar_labels, values=bar_values)

@app.route('/line')
def line():
    line_labels=labels
    line_values=values
    return render_template('line_chart.html', title='Bitcoin Monthly Price in USD', max=17000, labels=line_labels, values=line_values)

@app.route('/pie')
def pie():
    pie_labels = labels
    pie_values = values
    return render_template('pie_chart.html', title='Bitcoin Monthly Price in USD', max=17000, set=zip(values, labels, colors))

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
</code></pre>

<h2>Populating the HTML Static Content:</h2>

<p>As we are using <code>render_template</code> we need to populate our html files in our <code>templates/</code> directory. As you can see we have 3 different html files:</p>

<ul>
<li><code>templates/bar_chart.html</code> :</li>
</ul>


<script src="https://gist.github.com/ruanbekker/019a893face148a43b048240a79c4605.js"></script>


<ul>
<li><code>templates/line_chart.html</code>:</li>
</ul>


<script src="https://gist.github.com/ruanbekker/b9fe6d95019a0e382108f7bfe3ed4122.js"></script>


<ul>
<li><code>templates/pie_chart.html</code>:</li>
</ul>


<script src="https://gist.github.com/ruanbekker/540737448cd8d4a1b427028fa713b061.js"></script>


<h2>Running our Application:</h2>

<p>As you can see, we have 3 endpoints, each representing a different chart style:</p>

<ul>
<li>/line</li>
<li>/bar</li>
<li>/pie</li>
</ul>


<p>Let&rsquo;s start our flask application:</p>

<pre><code class="bash">$ python app.py
</code></pre>

<p>When we access our <code>/line</code> endpoint:</p>

<p><img src="https://i.snag.gy/M8FU6S.jpg" alt="" /></p>

<p>When we access our <code>/bar</code> endpoint:</p>

<p><img src="https://i.snag.gy/DTp0AZ.jpg" alt="" /></p>

<p>When we access our <code>/pie</code> endpoint:</p>

<p><img src="https://i.snag.gy/D6nqJN.jpg?nocache=1513261344206" alt="" /></p>

<h2>Resources:</h2>

<ul>
<li><a href="https://pythonspot.com/flask-and-great-looking-charts-using-chart-js/">https://pythonspot.com/flask-and-great-looking-charts-using-chart-js/</a></li>
<li><a href="http://www.chartjs.org/docs/latest/#installation">http://www.chartjs.org/docs/latest/#installation</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
