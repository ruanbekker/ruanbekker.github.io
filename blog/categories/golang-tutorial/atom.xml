<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Golang-tutorial | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/golang-tutorial/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2020-08-13T07:01:47+00:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup a Golang Environment on Ubuntu]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/11/22/setup-a-golang-environment-on-ubuntu/"/>
    <updated>2018-11-22T17:09:29-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/11/22/setup-a-golang-environment-on-ubuntu</id>
    <content type="html"><![CDATA[<p>In this post I will demonstrate how to setup a golang environment on Ubuntu.</p>

<h2>Get the sources:</h2>

<p>Get the latest stable release golang tarball from <a href="https://golang.org/dl/">https://golang.org/dl/</a> and download to the directory path of choice, and extract the archive:</p>

<pre><code class="bash">$ cd /tmp
$ wget https://dl.google.com/go/go1.11.2.linux-amd64.tar.gz
$ tar -xf go1.11.2.linux-amd64.tar.gz
</code></pre>

<p>Once the archive is extracted, set root permissions and move it to the path where your other executable binaries reside:</p>

<pre><code class="bash">$ sudo chown -R root:root ./go
$ sudo mv go /usr/local/
</code></pre>

<p>Cleanup the downloaded archive:</p>

<pre><code class="bash">$ rm -rf go1.*.tar.gz
</code></pre>

<h2>Path Variables:</h2>

<p>Adjust your path variables in your <code>~/.profile</code> and append the following:</p>

<p><code>bash ~/.profile
export GOPATH=$HOME/go
export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
</code></p>

<p>Source your profile, or open a new tab:</p>

<pre><code class="bash">$ source ~/.profile
</code></pre>

<p>Test if you can return the version:</p>

<pre><code class="bash">$ go version
go version go1.11.2 linux/amd64
</code></pre>

<h2>Create a Golang Application</h2>

<p>Create a simple golang app that prints a string to stdout:</p>

<pre><code class="bash">$ cd ~/
$ mkdir -p go/src/hello
$ cd go/src/hello
$ vim app.go
</code></pre>

<p>Add the following golang code:</p>

<pre><code class="go">package main

import "fmt"

func main() {
    fmt.Printf("Hello!\n")
}
</code></pre>

<p>Build the binary:</p>

<pre><code class="bash">$ go build
</code></pre>

<p>Run it:</p>

<pre><code class="bash">$ ./app
Hello!
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang: Building a Basic Web Server in Go]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/11/21/golang-building-a-basic-web-server-in-go/"/>
    <updated>2018-11-21T00:57:54-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/11/21/golang-building-a-basic-web-server-in-go</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/golang-web-server.png" alt="" /></p>

<p>Continuing with our <a href="https://blog.ruanbekker.com/blog/categories/golang-tutorial/">#golang-tutorial</a> blog series, in this post we will setup a Basic HTTP Server in Go.</p>

<h2>Our Web Server:</h2>

<p>Our Web Server will respond on 2 Request Paths:</p>

<pre><code>- / -&gt; returns "Hello, Wolrd!"
- /cheers -&gt; returns "Goodbye!"
</code></pre>

<h2>Application Code:</h2>

<p>If you have not setup your golang environment, you can do so by visiting <a href="https://medium.com/@AkyunaAkish/setting-up-a-golang-development-environment-mac-os-x-d58e5a7ea24f">@AkyunaAkish&rsquo;s Post on Setting up a Golang Development Enviornment on MacOSX</a>.</p>

<p>Create the <code>server.go</code> or any filename of your choice. Note: I created 2 ways of returning the content of http response for demonstration</p>

<pre><code class="go">package main

import (
    "io"
        "log"
    "net/http"
)

func hello(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "text/plain; charset=utf-8")
    w.WriteHeader(http.StatusOK)
    w.Write([]byte("Hello, World!" + "\n")
    log.Println("hello function handler was executed")
}

func goodbye(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "text/plain; charset=utf-8")
    w.WriteHeader(http.StatusOK)
    io.WriteString(w, "Cheers!" + "\n")
    log.Println("goodbye function handler was executed")
}

func main() {
    http.HandleFunc("/", hello)
    http.HandleFunc("/cheers", goodbye)
    http.ListenAndServe(":8000", nil)
}
</code></pre>

<p>Explanation of what we are doing:</p>

<ul>
<li>Programs runs in the package <code>main</code></li>
<li>We are importing 3 packages: <code>io</code>, <code>log</code> and <code>net/http</code></li>
<li>HandleFunc registers the handler function for the given pattern in the DefaultServeMux, in this case the HandleFunc registers <code>/</code> to the <code>hello</code> handler function and <code>/cheers</code> to the goodbye handler function.</li>
<li>In our 2 handler functions, we have two arguments:

<ul>
<li>The first one is <code>http.ResponseWriter</code> and its corresponding response stream, which is actually an interface type.</li>
<li>The second is <code>*http.Request</code> and its corresponding HTTP request. <code>io.WriteString</code> is a helper function to let you write a string into a given writable stream, this is named the <code>io.Writer</code> interface in Golang.</li>
</ul>
</li>
<li>ListenAndServe starts an HTTP server with a given address and handler. The handler is usually nil, which means to use DefaultServeMux</li>
<li>The logging is not a requirement, but used it for debugging/verbosity</li>
</ul>


<h2>Running our Server:</h2>

<p>Run the http server:</p>

<pre><code class="bash">$ go run server.go
</code></pre>

<h2>Client Side Requests:</h2>

<p>Run client side http requests to your golang web server:</p>

<pre><code class="bash">$ curl -i http://localhost:8000/
HTTP/1.1 200 OK
Content-Type: text/plain; charset=utf-8
Date: Wed, 21 Nov 2018 21:33:42 GMT
Content-Length: 14

Hello, World!
</code></pre>

<p>And another request to <code>/cheers</code>:</p>

<pre><code class="bash">$ curl -i http://localhost:8000/cheers
HTTP/1.1 200 OK
Content-Type: text/plain; charset=utf-8
Date: Wed, 21 Nov 2018 21:29:46 GMT
Content-Length: 8

Cheers!
</code></pre>

<h2>Server Side Output:</h2>

<p>As we used the log package, the logging gets returned to stdout:</p>

<pre><code class="bash">$ go run server.go
2018/11/21 23:29:36 hello function handler was executed
2018/11/21 23:29:46 goodbye function handler was executed
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://golang.org/doc/code.html">https://golang.org/doc/code.html</a></li>
<li><a href="https://gowalker.org/net/http#HandleFunc">https://gowalker.org/net/http#HandleFunc</a></li>
<li><a href="https://stackoverflow.com/questions/37863374/whats-the-difference-between-responsewriter-write-and-io-writestring">https://stackoverflow.com/questions/37863374/whats-the-difference-between-responsewriter-write-and-io-writestring</a></li>
<li><a href="https://www.alexedwards.net/blog/golang-response-snippets">https://www.alexedwards.net/blog/golang-response-snippets</a></li>
</ul>


<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang: Reading From Files and Writing to Disk With Arguments]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/03/02/golang-reading-from-files-and-writing-to-disk-with-arguments/"/>
    <updated>2018-03-02T07:11:13-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/03/02/golang-reading-from-files-and-writing-to-disk-with-arguments</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/VJmUZz.jpg" alt="" /></p>

<p>From our <a href="https://goo.gl/ih43uv">Previous Post</a> we wrote a basic golang app that reads the contents of a file and writes it back to disk, but in a static way as we defined the source and destination filenames in the code.</p>

<p>Today we will use arguments to specify what the source and destination filenames should be instead of hardcoding it.</p>

<h2>Our Golang Application:</h2>

<p>We will be using if statements to determine if the number of arguments provided is as expected, if not, then a usage string should be returned to stdout. Then we will loop through the list of arguments to determine what the values for our source and destination file should be.</p>

<p>Once it completes, it prints out the coice of filenames that was used:</p>

<pre><code class="go app.go">package main

import (
    "io/ioutil"
    "os"
    "fmt"
)

var (
    input_filename string
    output_filename string
)

func main() {

    if len(os.Args) &lt; 5 {
        fmt.Printf("Usage: (-i/--input) 'input_filename' (-o/--output) 'output_filename' \n")
        os.Exit(0)
    }

    for i, arg := range os.Args {
        if arg == "-i" || arg == "--input" {
            input_filename = os.Args[i+1]
            }
        if arg == "-o" || arg == "--output" {
            output_filename = os.Args[i+1]
            }
        }

    input_file_content, error := ioutil.ReadFile(input_filename)

    if error != nil {
        panic(error)
    }

    fmt.Println("File used for reading:", input_filename)

    ioutil.WriteFile(output_filename, input_file_content, 0644)
    fmt.Println("File used for writing:", output_filename)
}
</code></pre>

<p>Build your application:</p>

<pre><code class="bash">$ go build app.go
</code></pre>

<p>Run your application with no additional arguments to determine the expected behaviour:</p>

<pre><code class="bash">$ ./app
Usage: (-i/--input) 'input_filename' (-o/--output) 'output_file-to-write'
</code></pre>

<p>It works as expected, now create a source file, then run the application:</p>

<pre><code class="bash">$ echo $RANDOM &gt; myfile.txt
</code></pre>

<p>Run the application, and in this run, we will set the destination file as newfile.txt:</p>

<pre><code class="bash">$ ./app -i myfile.txt -o newfile.txt
File used for reading: myfile.txt
File used for writing: newfile.txt
</code></pre>

<p>Checking out the new file:</p>

<pre><code>$ cat newfile.txt
8568
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang: Reading From Files and Writing to Disk With Golang]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/03/02/golang-reading-from-files-and-writing-to-disk-with-golang/"/>
    <updated>2018-03-02T06:44:59-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/03/02/golang-reading-from-files-and-writing-to-disk-with-golang</id>
    <content type="html"><![CDATA[<p><img src="![](https://i.snag.gy/VJmUZz.jpg" alt="" />)</p>

<p>Today we will create a very basic application to read content from a file, and write the content from the file back to disk, but to another filename.</p>

<p>Basically, doing a copy of the file to another filename.</p>

<h2>Golang Environment: Golang Docker Image</h2>

<p>Dropping into a Golang Environment using Docker:</p>

<pre><code class="bash">$ docker run -it golang:alpine sh
</code></pre>

<h2>Our Golang Application</h2>

<p>After we are in our container, lets write our app:</p>

<pre><code class="go app.go">package main

import (
    "io/ioutil"
)

func main() {

    content, error := ioutil.ReadFile("source-data.txt")
    if error != nil {
        panic(error)
    }

    error = ioutil.WriteFile("destination-data.txt", content, 0644)
    if error != nil {
        panic(error)
    }
}
</code></pre>

<p>Building our application to a binary:</p>

<pre><code class="bash">$ go build app.go
</code></pre>

<p>Creating our <code>source-data.txt</code> :</p>

<pre><code class="bash">$ echo "foo" &gt; source-data.txt
</code></pre>

<h2>Running the Golang App:</h2>

<p>When we run this app, it will read the content of <code>source-data.txt</code> and write it to <code>destination-data.txt</code>:</p>

<pre><code class="bash">$ ./app.go
</code></pre>

<p>We can see that the file has been written to disk:</p>

<pre><code class="bash">$ ls | grep data
destination-data.txt
source-data.txt
</code></pre>

<p>Making sure the data is the same, we can do a <code>md5sum hash</code> function on them:</p>

<pre><code class="bash">$ md5sum source-data.txt
d3b07384d113edec49eaa6238ad5ff00  source-data.txt

$ md5sum destination-data.txt
d3b07384d113edec49eaa6238ad5ff00  destination-data.txt
</code></pre>

<h2>Next:</h2>

<p>This was a very static way of doing it, as you need to hardcode the filenames. In the <a href="https://goo.gl/t8fasN">next post</a> I will show how to use arguments to make it more dynamic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Your First Hello World App With Golang]]></title>
    <link href="https://blog.ruanbekker.com/blog/2017/10/25/your-first-hello-world-app-with-golang/"/>
    <updated>2017-10-25T17:16:25-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2017/10/25/your-first-hello-world-app-with-golang</id>
    <content type="html"><![CDATA[<p>So everyone has been saying how awesome Golang is, and at this moment, I am quite curious to fiddle with it.</p>

<h2>Golang Environment: Golang Docker Image</h2>

<p>A quick way to get a Golang Environment, will be to use Docker. We will be using the Alpine tag:</p>

<pre><code class="bash">$ docker run -it golang:alpine sh
</code></pre>

<h2>Our Basic App</h2>

<p>After we are in our container, lets write our first Hello World App:</p>

<pre><code class="go app.go">package main

import "fmt"

func main() {
  fmt.Println("Hello, World!")
}
</code></pre>

<h2>Running our App:</h2>

<p>Using golang to run our app:</p>

<pre><code class="bash">$ go run app.go
Hello, World!
</code></pre>

<p>We can also build our app to create a executable binary:</p>

<pre><code class="bash">$ go build app.go
</code></pre>

<p>You will find that there is a executable binary named <code>app</code> placed in the current working directory. Let&rsquo;s execute it:</p>

<pre><code class="bash">$ ./app
Hello, World!
</code></pre>

<p>This was a very basic example, but will add more examples as I am learning the language</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://golang.org/">https://golang.org/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
