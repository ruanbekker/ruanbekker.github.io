<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Golang-tutorial | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/golang-tutorial/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-06-14T10:18:59-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Golang: Reading From Files and Writing to Disk With Arguments]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/03/02/golang-reading-from-files-and-writing-to-disk-with-arguments/"/>
    <updated>2018-03-02T07:11:13-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/03/02/golang-reading-from-files-and-writing-to-disk-with-arguments</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/VJmUZz.jpg" alt="" /></p>

<p>From our <a href="https://goo.gl/ih43uv">Previous Post</a> we wrote a basic golang app that reads the contents of a file and writes it back to disk, but in a static way as we defined the source and destination filenames in the code.</p>

<p>Today we will use arguments to specify what the source and destination filenames should be instead of hardcoding it.</p>

<h2>Our Golang Application:</h2>

<p>We will be using if statements to determine if the number of arguments provided is as expected, if not, then a usage string should be returned to stdout. Then we will loop through the list of arguments to determine what the values for our source and destination file should be.</p>

<p>Once it completes, it prints out the coice of filenames that was used:</p>

<pre><code class="go app.go">package main

import (
    "io/ioutil"
    "os"
    "fmt"
)

var (
    input_filename string
    output_filename string
)

func main() {

    if len(os.Args) &lt; 5 {
        fmt.Printf("Usage: (-i/--input) 'input_filename' (-o/--output) 'output_filename' \n")
        os.Exit(0)
    }

    for i, arg := range os.Args {
        if arg == "-i" || arg == "--input" {
            input_filename = os.Args[i+1]
            }
        if arg == "-o" || arg == "--output" {
            output_filename = os.Args[i+1]
            }
        }

    input_file_content, error := ioutil.ReadFile(input_filename)

    if error != nil {
        panic(error)
    }

    fmt.Println("File used for reading:", input_filename)

    ioutil.WriteFile(output_filename, input_file_content, 0644)
    fmt.Println("File used for writing:", output_filename)
}
</code></pre>

<p>Build your application:</p>

<pre><code class="bash">$ go build app.go
</code></pre>

<p>Run your application with no additional arguments to determine the expected behaviour:</p>

<pre><code class="bash">$ ./app
Usage: (-i/--input) 'input_filename' (-o/--output) 'output_file-to-write'
</code></pre>

<p>It works as expected, now create a source file, then run the application:</p>

<pre><code class="bash">$ echo $RANDOM &gt; myfile.txt
</code></pre>

<p>Run the application, and in this run, we will set the destination file as newfile.txt:</p>

<pre><code class="bash">$ ./app -i myfile.txt -o newfile.txt
File used for reading: myfile.txt
File used for writing: newfile.txt
</code></pre>

<p>Checking out the new file:</p>

<pre><code>$ cat newfile.txt
8568
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang: Reading From Files and Writing to Disk With Golang]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/03/02/golang-reading-from-files-and-writing-to-disk-with-golang/"/>
    <updated>2018-03-02T06:44:59-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/03/02/golang-reading-from-files-and-writing-to-disk-with-golang</id>
    <content type="html"><![CDATA[<p><img src="![](https://i.snag.gy/VJmUZz.jpg" alt="" />)</p>

<p>Today we will create a very basic application to read content from a file, and write the content from the file back to disk, but to another filename.</p>

<p>Basically, doing a copy of the file to another filename.</p>

<h2>Golang Environment: Golang Docker Image</h2>

<p>Dropping into a Golang Environment using Docker:</p>

<pre><code class="bash">$ docker run -it golang:alpine sh
</code></pre>

<h2>Our Golang Application</h2>

<p>After we are in our container, lets write our app:</p>

<pre><code class="go app.go">package main

import (
    "io/ioutil"
)

func main() {

    content, error := ioutil.ReadFile("source-data.txt")
    if error != nil {
        panic(error)
    }

    error = ioutil.WriteFile("destination-data.txt", content, 0644)
    if error != nil {
        panic(error)
    }
}
</code></pre>

<p>Building our application to a binary:</p>

<pre><code class="bash">$ go build app.go
</code></pre>

<p>Creating our <code>source-data.txt</code> :</p>

<pre><code class="bash">$ echo "foo" &gt; source-data.txt
</code></pre>

<h2>Running the Golang App:</h2>

<p>When we run this app, it will read the content of <code>source-data.txt</code> and write it to <code>destination-data.txt</code>:</p>

<pre><code class="bash">$ ./app.go
</code></pre>

<p>We can see that the file has been written to disk:</p>

<pre><code class="bash">$ ls | grep data
destination-data.txt
source-data.txt
</code></pre>

<p>Making sure the data is the same, we can do a <code>md5sum hash</code> function on them:</p>

<pre><code class="bash">$ md5sum source-data.txt
d3b07384d113edec49eaa6238ad5ff00  source-data.txt

$ md5sum destination-data.txt
d3b07384d113edec49eaa6238ad5ff00  destination-data.txt
</code></pre>

<h2>Next:</h2>

<p>This was a very static way of doing it, as you need to hardcode the filenames. In the <a href="https://goo.gl/t8fasN">next post</a> I will show how to use arguments to make it more dynamic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Your First Hello World App With Golang]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/25/your-first-hello-world-app-with-golang/"/>
    <updated>2017-10-25T17:16:25-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/25/your-first-hello-world-app-with-golang</id>
    <content type="html"><![CDATA[<p>So everyone has been saying how awesome Golang is, and at this moment, I am quite curious to fiddle with it.</p>

<h2>Golang Environment: Golang Docker Image</h2>

<p>A quick way to get a Golang Environment, will be to use Docker. We will be using the Alpine tag:</p>

<pre><code class="bash">$ docker run -it golang:alpine sh
</code></pre>

<h2>Our Basic App</h2>

<p>After we are in our container, lets write our first Hello World App:</p>

<pre><code class="go app.go">package main

import "fmt"

func main() {
  fmt.Println("Hello, World!")
}
</code></pre>

<h2>Running our App:</h2>

<p>Using golang to run our app:</p>

<pre><code class="bash">$ go run app.go
Hello, World!
</code></pre>

<p>We can also build our app to create a executable binary:</p>

<pre><code class="bash">$ go build app.go
</code></pre>

<p>You will find that there is a executable binary named <code>app</code> placed in the current working directory. Let&rsquo;s execute it:</p>

<pre><code class="bash">$ ./app
Hello, World!
</code></pre>

<p>This was a very basic example, but will add more examples as I am learning the language</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://golang.org/">https://golang.org/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
