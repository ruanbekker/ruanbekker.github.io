<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Golang | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/golang/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2019-04-08T03:20:22-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Self Hosted Git and CICD Platform With Gitea and Drone on Docker]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/04/self-hosted-git-and-cicd-platform-with-gitea-and-drone-on-docker/"/>
    <updated>2019-04-04T17:57:16-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/04/self-hosted-git-and-cicd-platform-with-gitea-and-drone-on-docker</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55591102-f57c7100-5734-11e9-96cf-8a60d091a769.png" alt="" /></p>

<p>Both gitea and drone is built on golang runs on multiple platforms including a raspberry pi and its super lightweight. Oh yes, and its awesome!</p>

<p>In this tutorial we will see how we can implement our own git service and cicd platform by setting up gitea and drone on docker and commit a python flask application to gitea and build a pipeline on drone.</p>

<h2>Some definition</h2>

<p><strong>Gitea</strong>: will be your self hosted git server</p>

<p><strong>Drone Server</strong>: will be server being responsible for the web service, repositories, secrets, users, etc.</p>

<p><strong>Drone Agent</strong>: will be the workers that runs your builds, jobs etc.</p>

<h2>Server Confguration</h2>

<p>We will change our host&rsquo;s ssh port to something else as our git server&rsquo;s ssh method will be listening on port 22 and we would like to add our ssh key to gitea so that we can commit to our git server via ssh.</p>

<p>Change your server&rsquo;s ssh port to 2222, by opening <code>/etc/ssh/sshd_config</code> and edit the port to <code>2222</code> then restart sshd with:</p>

<pre><code>$ /etc/init.d/sshd restart
</code></pre>

<p>Your ssh connection will still be established, but you can exit and ssh to your server by specifying the new port:</p>

<pre><code>$ ssh -p 2222 user@host
</code></pre>

<h2>Pre-Requirements</h2>

<p>Make sure you have <a href="https://docs.docker.com/install/">docker and docker-compose</a> installed</p>

<h2>Deploy Gitea and Drone</h2>

<p>Below is the docker-compose file for our deployment. Note that we are running a postgres database which gitea will be configured on, you can also use other databases like mysql, sqlite etc. Visit their <a href="https://docs.gitea.io/en-us/">documentation</a> for more info.</p>

<pre><code class="yaml">version: "2"

services:
  gitea-app:
    image: gitea/gitea:latest
    container_name: gitea-app
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - ROOT_URL=http://gitea:3000
      - SSH_DOMAIN=mydomain.com
    restart: always
    volumes:
      - ./volumes/gitea_app:/data
    ports:
      - "3000:3000"
      - "22:22"
    networks:
      - appnet

  gitea-db:
    image: postgres:alpine
    container_name: gitea-db
    ports:
      - 5440:5432
    restart: always
    volumes:
      - ./volumes/gitea_db:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=gitea
    networks:
      - appnet

  drone-server:
    image: drone/drone:0.8
    container_name: drone-server
    ports:
      - 80:8000
      - 9000
    volumes:
      - ./volumes/drone:/var/lib/drone/
    restart: always
    depends_on:
      - gitea
    environment:
      - DRONE_OPEN=true
      - DRONE_HOST=http://drone-server:8000
      - DRONE_GITEA=true
      - DRONE_GITEA_URL=http://gitea:3000
      - DRONE_SECRET=secret
      - DRONE_NETWORK=appnet
    networks:
      - appnet

  drone-agent:
    image: drone/agent:0.8
    container_name: drone-agent
    command: agent
    restart: always
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_SERVER=drone-server:9000
      - DRONE_SECRET=secret
    networks:
      - appnet

volumes:
  gitea-app:
  gitea-db:

networks:
  appnet:
    external: true
</code></pre>

<p>Create the volumes path:</p>

<pre><code>$ mkdir volumes
</code></pre>

<p>Create the external network:</p>

<pre><code>$ docker network create appnet
</code></pre>

<p>Some key configuration,</p>

<p>Our <code>SSH_DOMAIN</code> will be the domain that gets used for things like cloning a repository. When you register your gitea account, you will use the same credentials to logon to drone.</p>

<p>Deploy your stack:</p>

<pre><code>$ docker-compose up -d
</code></pre>

<h2>Register on Gitea</h2>

<p>When your deployment is done, access your gitea server which should be available on <code>http://your-docker-ip:3000/</code> complete the registration, if you decide to go with postgres your username/password will be <code>postgres</code> and your host will be <code>gitea-db:5432</code>.</p>

<p>Make sure to complete the administrator account to get your admin credentials.</p>

<h2>Setup SSH Key and Repo</h2>

<p>Generate a ssh key that you will use for communicating to git over ssh. If you have already have an ssh key you can skip this step.</p>

<pre><code class="bash">$ ssh-keygen -t rsa
# use the defaults
</code></pre>

<p>Login on gitea, once you are logged in, head over to profile / settings / ssh keys: <code>http://your-docker-ip:3000/user/settings/keys</code>.</p>

<p>Add a new ssh key, go back to your terminal and copy the public key which we will provide to gitea:</p>

<pre><code>$ cat ~/.ssh/id_rsa.pub
&lt;copy the contents to your clipboard&gt;
</code></pre>

<p>Paste your public key and provide a descriptive title.</p>

<p>Head back to your dashboard and create your first repository:</p>

<p><img width="1277" alt="image" src="https://user-images.githubusercontent.com/567298/55589336-49388b80-5730-11e9-8ae5-2589fea7e2b2.png"></p>

<p>It should look more or less like this:</p>

<p><img width="1007" alt="image" src="https://user-images.githubusercontent.com/567298/55589473-9583cb80-5730-11e9-8124-3bdedc221a70.png"></p>

<h2>Enable Repo on Drone</h2>

<p>Head over to drone and select the repositores on the right hand side <a href="http://">http://</a><your-docker-ip>:80/account/repos and enable your repository by toggline the selector, it should look more or less like this:</p>

<p><img width="1275" alt="image" src="https://user-images.githubusercontent.com/567298/55589614-f3b0ae80-5730-11e9-9358-54a6be611198.png"></p>

<p>Once its enabled head back to gitea.</p>

<h2>Clone the repository</h2>

<p>On your repository select ssh and copy the ssh link for your repository:</p>

<p><img width="974" alt="image" src="https://user-images.githubusercontent.com/567298/55589710-3b373a80-5731-11e9-956b-c921c42e6a2d.png"></p>

<p>Then from your terminal add your private ssh key to your ssh agent and clone the repository:</p>

<pre><code>$ eval $(ssh-agent)
$ ssh-add ~/.ssh/id_rsa
$ git clone git@your-docker-ip:your-user/your-repo.git
</code></pre>

<h2>Add Example Python Flask app to git</h2>

<p>I will use a basic python flask application with some tests.</p>

<p>Let&rsquo;s first add our pipeline definition for drone, so that drone understands how the pipeline should be run when gitea receives a commit:</p>

<pre><code class="bash">$ touch .drone.yml
</code></pre>

<p>Our pipeline:</p>

<pre><code class="yaml .drone.yml">pipeline:
  build:
    image: python:3.5.1-alpine
    commands:
      - pip install --upgrade pip setuptools wheel
      - pip wheel -r requirements.txt --wheel-dir=wheeldir --find-links=wheeldir
      - pip install --no-index --find-links=wheeldir -r requirements.txt
      - flake8 app
      - mkdir -p coverage
      - nosetests -v tests/ 
</code></pre>

<p>Lets add that to git:</p>

<pre><code>$ git add .drone.yml
$ git commit -m "initial add of our pipeline"
$ git push origin master
</code></pre>

<p>Our drone file should be in git, now our requirements dependency file for python:</p>

<pre><code class="bash requirements.txt">flask
nose
flake8
</code></pre>

<p>Our blank file to make our application a module:</p>

<pre><code>$ mkdir app
$ touch app/__init__.py
</code></pre>

<p>And our flask app:</p>

<pre><code class="python app/app.py">from flask import Flask
app = Flask(__name__)


@app.route("/")
def hello():
    return "Hello, World!"
</code></pre>

<p>Our tests directory and our python init file:</p>

<pre><code>$ mkdir tests
$ touch tests/__init__.py
</code></pre>

<p>Now that we have all our files ready, commit and push to git:</p>

<pre><code class="bash">$ git add .
$ git commit -m "add python app"
$ git push origin master
</code></pre>

<h2>Look at Drone Running</h2>

<p>Head over to drone and look at the builds, you should see your build running at <code>http://&lt;docker-ip&gt;:80/&lt;user&gt;/&lt;repo-name&gt;</code>:</p>

<p><img width="1269" alt="image" src="https://user-images.githubusercontent.com/567298/55590369-f8766200-5732-11e9-82fb-2bda2c8ad40a.png"></p>

<p>If everything ran as expected you should see that it passed.</p>

<h2>Build Status Badges</h2>

<p>You can also include the build status badges from drone which will look like:</p>

<p><img width="1032" alt="image" src="https://user-images.githubusercontent.com/567298/55590552-82bec600-5733-11e9-91f2-a65c5a94fac5.png"></p>

<p>You can use the drone api: <code>http://drone-ip:80/api/badges/&lt;your-user&gt;/&lt;your-repo&gt;/status.svg</code></p>

<pre><code>[![Build Status](http://your-ip/api/badges/your-user/your-repo/status.svg)
[![](https://images.microbadger.com/badges/image/gitea/gitea.svg)](https://microbadger.com/images/gitea/gitea "Get your own image badge on microbadger.com")
[![GitHub release](https://img.shields.io/github/release/go-gitea/gitea.svg)](https://github.com/go-gitea/gitea/releases/latest)
[![Help Contribute to Open Source](https://www.codetriage.com/go-gitea/gitea/badges/users.svg)](https://www.codetriage.com/go-gitea/gitea)
[![Become a backer/sponsor of gitea](https://opencollective.com/gitea/tiers/backer/badge.svg?label=backer&amp;color=brightgreen)](https://opencollective.com/gitea)
</code></pre>

<p>Overall gitea and drone is really amazing and quite impressed with it, especially from the low memory footprint and that its so easy to work with.</p>

<h2>Resources</h2>

<p>Have a look at this for more resources:</p>

<p><strong>Docs:</strong></p>

<ul>
<li><a href="https://github.com/drone/drone">https://github.com/drone/drone</a></li>
<li><a href="http://plugins.drone.io/drone-plugins/drone-docker/">http://plugins.drone.io/drone-plugins/drone-docker/</a></li>
<li><a href="https://docs.drone.io/reference/server/drone-user-create/">https://docs.drone.io/reference/server/drone-user-create/</a></li>
<li><a href="https://docs.gitea.io/en-us/install-with-docker/">https://docs.gitea.io/en-us/install-with-docker/</a></li>
</ul>


<p><strong>Examples:</strong></p>

<ul>
<li><a href="https://hackernoon.com/build-your-own-ci-cd-pipeline-with-drone-e43d7190989b">https://hackernoon.com/build-your-own-ci-cd-pipeline-with-drone-e43d7190989b</a></li>
<li><a href="https://github.com/drone-demos/drone-with-python">https://github.com/drone-demos/drone-with-python</a></li>
<li><a href="https://github.com/drone/awesome-drone">https://github.com/drone/awesome-drone</a></li>
<li><a href="https://github.com/juliantellez/drone-ci-pipeline">https://github.com/juliantellez/drone-ci-pipeline</a></li>
<li><a href="https://github.com/sguter90/docker-compose-gitea">https://github.com/sguter90/docker-compose-gitea</a></li>
<li><a href="https://gist.github.com/joffilyfe/1a99250cb74bb75e29cbe8d6ca8ceedb">https://gist.github.com/joffilyfe/1a99250cb74bb75e29cbe8d6ca8ceedb</a></li>
<li><a href="https://florian-latifi.at/2018/02/21/using-drone-to-build-and-deploy-a-jekyll-site/">https://florian-latifi.at/2018/02/21/using-drone-to-build-and-deploy-a-jekyll-site/</a></li>
<li><a href="https://angristan.xyz/host-your-own-ci-cd-server-with-drone/">https://angristan.xyz/host-your-own-ci-cd-server-with-drone/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Small Golang Docker Containers]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/03/build-small-golang-docker-containers/"/>
    <updated>2019-04-03T08:24:08-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/03/build-small-golang-docker-containers</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55478306-aabb0600-561b-11e9-9cc6-730fadb4beeb.png" alt="" /></p>

<p>In this tutorial I will show you how to build really small docker containers for golang applications. And I mean the difference between 310MB down to 2MB</p>

<h2>But Alpine..</h2>

<p>So we thinking lets go with alpine right? Yeah sure lets build a small, app running on go with alpine.</p>

<p>Our application code:</p>

<pre><code class="go app.go">package main

import (
  "fmt"
  "math/rand"
  "time"
)

func main() {
  lekkewords := []string{
    "dog", "cat", "fish", "giraffe",
    "moo", "spider", "lion", "apple",
    "tree", "moon", "snake", "mountain lion",
    "trooper", "burger", "nasa", "yes",
  }

  rand.Seed(time.Now().UnixNano())
  var zelength int = len(lekkewords)
  var indexnum int = rand.Intn(zelength-1)
  word := lekkewords[indexnum]

  fmt.Println("Number of words:", zelength)
  fmt.Println("Selected index number:", indexnum)
  fmt.Println("Selected word is:", word)
}
</code></pre>

<p>Our Dockerfile:</p>

<pre><code class="docker Dockerfile">FROM golang:alpine

WORKDIR $GOPATH/src/mylekkepackage/mylekkeapp/
COPY app.go .
RUN go build -o /go/app

CMD ["/go/app"]
</code></pre>

<p>Let&rsquo;s package our app to an image:</p>

<pre><code>❯ docker build -t mygolangapp:using-alpine .
</code></pre>

<p>Inspect the size of our image, as you can see it being <strong>310MB</strong></p>

<pre><code>❯ docker images "mygolangapp:*"
REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE
mygolangapp         using-alpine        eea1d7bde218        About a minute ago   310MB
</code></pre>

<p>Just make sure it actually works:</p>

<pre><code>❯ docker run mygolangapp:using-alpine
Number of words: 16
Selected index number: 11
Selected word is: mountain lion
</code></pre>

<p>But for something just returning random selected text, 310MB is a bit crazy.</p>

<h2>Multi Stage Builds</h2>

<p>As Go binaries are self-contained, we can make use of docker&rsquo;s multi stage builds, where we can build our application on alpine and use the binary on a scratch image:</p>

<p>Our multi stage Dockerfile:</p>

<pre><code class="docker Dockerfile.mult">FROM golang:alpine AS builder

WORKDIR $GOPATH/src/mylekkepackage/mylekkeapp/
COPY app.go .
RUN go build -o /go/app

FROM scratch

COPY --from=builder /go/app /go/app

CMD ["/go/app"]
</code></pre>

<p>Build it:</p>

<pre><code>❯ docker build -t mygolangapp:using-multistage -f Dockerfile.multi .
</code></pre>

<p>Notice that the image is only <strong>2.01MB</strong>, say w000t!</p>

<pre><code>❯ docker images "mygolangapp:*"
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
mygolangapp         using-multistage    31474c61ba5b        15 seconds ago      2.01MB
mygolangapp         using-alpine        eea1d7bde218        2 minutes ago       310MB
</code></pre>

<p>Run the app:</p>

<pre><code>❯ docker run mygolangapp:using-multistage
Number of words: 16
Selected index number: 5
Selected word is: spider
</code></pre>

<h2>Resources</h2>

<p>Source code for this demonstration can be found at <a href="https://github.com/ruanbekker/golang-build-small-images">github.com/ruanbekker/golang-build-small-images</a></p>

<p><img src="https://user-images.githubusercontent.com/567298/55478904-236e9200-561d-11e9-9382-f31b25a9ae03.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Golang Environment on Ubuntu]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/11/22/setup-a-golang-environment-on-ubuntu/"/>
    <updated>2018-11-22T17:09:29-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/11/22/setup-a-golang-environment-on-ubuntu</id>
    <content type="html"><![CDATA[<p>In this post I will demonstrate how to setup a golang environment on Ubuntu.</p>

<h2>Get the sources:</h2>

<p>Get the latest stable release golang tarball from <a href="https://golang.org/dl/">https://golang.org/dl/</a> and download to the directory path of choice, and extract the archive:</p>

<pre><code class="bash">$ cd /tmp
$ wget https://dl.google.com/go/go1.11.2.linux-amd64.tar.gz
$ tar -xf go1.11.2.linux-amd64.tar.gz
</code></pre>

<p>Once the archive is extracted, set root permissions and move it to the path where your other executable binaries reside:</p>

<pre><code class="bash">$ sudo chown -R root:root ./go
$ sudo mv go /usr/local/
</code></pre>

<p>Cleanup the downloaded archive:</p>

<pre><code class="bash">$ rm -rf go1.*.tar.gz
</code></pre>

<h2>Path Variables:</h2>

<p>Adjust your path variables in your <code>~/.profile</code> and append the following:</p>

<p><code>bash ~/.profile
export GOPATH=$HOME/go
export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
</code></p>

<p>Source your profile, or open a new tab:</p>

<pre><code class="bash">$ source ~/.profile
</code></pre>

<p>Test if you can return the version:</p>

<pre><code class="bash">$ go version
go version go1.11.2 linux/amd64
</code></pre>

<h2>Create a Golang Application</h2>

<p>Create a simple golang app that prints a string to stdout:</p>

<pre><code class="bash">$ cd ~/
$ mkdir -p go/src/hello
$ cd go/src/hello
$ vim app.go
</code></pre>

<p>Add the following golang code:</p>

<pre><code class="go">package main

import "fmt"

func main() {
    fmt.Printf("Hello!\n")
}
</code></pre>

<p>Build the binary:</p>

<pre><code class="bash">$ go build
</code></pre>

<p>Run it:</p>

<pre><code class="bash">$ ./app
Hello!
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang: Building a Basic Web Server in Go]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/11/21/golang-building-a-basic-web-server-in-go/"/>
    <updated>2018-11-21T00:57:54-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/11/21/golang-building-a-basic-web-server-in-go</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/golang-web-server.png" alt="" /></p>

<p>Continuing with our <a href="https://blog.ruanbekker.com/blog/categories/golang-tutorial/">#golang-tutorial</a> blog series, in this post we will setup a Basic HTTP Server in Go.</p>

<h2>Our Web Server:</h2>

<p>Our Web Server will respond on 2 Request Paths:</p>

<pre><code>- / -&gt; returns "Hello, Wolrd!"
- /cheers -&gt; returns "Goodbye!"
</code></pre>

<h2>Application Code:</h2>

<p>If you have not setup your golang environment, you can do so by visiting <a href="https://medium.com/@AkyunaAkish/setting-up-a-golang-development-environment-mac-os-x-d58e5a7ea24f">@AkyunaAkish&rsquo;s Post on Setting up a Golang Development Enviornment on MacOSX</a>.</p>

<p>Create the <code>server.go</code> or any filename of your choice. Note: I created 2 ways of returning the content of http response for demonstration</p>

<pre><code class="go">package main

import (
    "io"
        "log"
    "net/http"
)

func hello(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "text/plain; charset=utf-8")
    w.WriteHeader(http.StatusOK)
    w.Write([]byte("Hello, World!" + "\n")
    log.Println("hello function handler was executed")
}

func goodbye(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "text/plain; charset=utf-8")
    w.WriteHeader(http.StatusOK)
    io.WriteString(w, "Cheers!" + "\n")
    log.Println("goodbye function handler was executed")
}

func main() {
    http.HandleFunc("/", hello)
    http.HandleFunc("/cheers", goodbye)
    http.ListenAndServe(":8000", nil)
}
</code></pre>

<p>Explanation of what we are doing:</p>

<ul>
<li>Programs runs in the package <code>main</code></li>
<li>We are importing 3 packages: <code>io</code>, <code>log</code> and <code>net/http</code></li>
<li>HandleFunc registers the handler function for the given pattern in the DefaultServeMux, in this case the HandleFunc registers <code>/</code> to the <code>hello</code> handler function and <code>/cheers</code> to the goodbye handler function.</li>
<li>In our 2 handler functions, we have two arguments:

<ul>
<li>The first one is <code>http.ResponseWriter</code> and its corresponding response stream, which is actually an interface type.</li>
<li>The second is <code>*http.Request</code> and its corresponding HTTP request. <code>io.WriteString</code> is a helper function to let you write a string into a given writable stream, this is named the <code>io.Writer</code> interface in Golang.</li>
</ul>
</li>
<li>ListenAndServe starts an HTTP server with a given address and handler. The handler is usually nil, which means to use DefaultServeMux</li>
<li>The logging is not a requirement, but used it for debugging/verbosity</li>
</ul>


<h2>Running our Server:</h2>

<p>Run the http server:</p>

<pre><code class="bash">$ go run server.go
</code></pre>

<h2>Client Side Requests:</h2>

<p>Run client side http requests to your golang web server:</p>

<pre><code class="bash">$ curl -i http://localhost:8000/
HTTP/1.1 200 OK
Content-Type: text/plain; charset=utf-8
Date: Wed, 21 Nov 2018 21:33:42 GMT
Content-Length: 14

Hello, World!
</code></pre>

<p>And another request to <code>/cheers</code>:</p>

<pre><code class="bash">$ curl -i http://localhost:8000/cheers
HTTP/1.1 200 OK
Content-Type: text/plain; charset=utf-8
Date: Wed, 21 Nov 2018 21:29:46 GMT
Content-Length: 8

Cheers!
</code></pre>

<h2>Server Side Output:</h2>

<p>As we used the log package, the logging gets returned to stdout:</p>

<pre><code class="bash">$ go run server.go
2018/11/21 23:29:36 hello function handler was executed
2018/11/21 23:29:46 goodbye function handler was executed
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://golang.org/doc/code.html">https://golang.org/doc/code.html</a></li>
<li><a href="https://gowalker.org/net/http#HandleFunc">https://gowalker.org/net/http#HandleFunc</a></li>
<li><a href="https://stackoverflow.com/questions/37863374/whats-the-difference-between-responsewriter-write-and-io-writestring">https://stackoverflow.com/questions/37863374/whats-the-difference-between-responsewriter-write-and-io-writestring</a></li>
<li><a href="https://www.alexedwards.net/blog/golang-response-snippets">https://www.alexedwards.net/blog/golang-response-snippets</a></li>
</ul>


<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World Programs in Different Languages]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/06/09/hello-world-programs-in-different-languages/"/>
    <updated>2018-06-09T21:11:00-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/06/09/hello-world-programs-in-different-languages</id>
    <content type="html"><![CDATA[<p>This post will demonstrate running hello world programs in different languages and also providing return time statistics</p>

<h2>C++</h2>

<p>Code</p>

<pre><code class="c">#include &lt;iostream&gt;
using namespace std;

int main()
{
    std::cout &lt;&lt; "Hello, World!" &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<p>Compile:</p>

<pre><code class="bash">$ c++ hello_cpp.cpp -o hello_cpp
</code></pre>

<p>Run:</p>

<pre><code class="bash">$ time ./hello_cpp
Hello, World!

real    0m0.005s
user    0m0.001s
sys   0m0.001s
</code></pre>

<h2>Golang:</h2>

<p>Code</p>

<pre><code class="go">package main

import "fmt"

func main() {
  fmt.Println("Hello, World!")
}
</code></pre>

<p>Compile:</p>

<pre><code class="bash">$ go build hello_golang.go
</code></pre>

<p>Run:</p>

<pre><code class="bash">time ./hello_golang
Hello, World!

real    0m0.006s
user    0m0.001s
sys   0m0.003s
</code></pre>

<h2>Python</h2>

<p>Code:</p>

<pre><code class="python">#!/usr/bin/env python
print("Hello, World!")
</code></pre>

<p>Make it executable:</p>

<pre><code class="bash">$ chmod +x ./hello_python.py
</code></pre>

<p>Run:</p>

<pre><code class="bash">$ time ./hello_python.py
Hello, World!

real    0m0.033s
user    0m0.015s
sys   0m0.010s
</code></pre>

<h2>Ruby</h2>

<p>Code:</p>

<pre><code class="ruby">#!/usr/bin/env ruby
puts "Hello, World!"
</code></pre>

<p>Make it executable:</p>

<pre><code class="bash">$ chmod +x ./hello_ruby.rb
</code></pre>

<p>Run:</p>

<pre><code class="bash">$ time ./hello_ruby.rb
Hello, World!

real    0m0.136s
user    0m0.080s
sys   0m0.024s
</code></pre>

<h2>Java</h2>

<p>Code:</p>

<pre><code class="java">public class hello_java {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
</code></pre>

<p>Compile:</p>

<pre><code class="bash">$ javac hello_java.java
</code></pre>

<p>Run:</p>

<pre><code class="bash">$ time java hello_java
Hello, World!

real    0m0.114s
user    0m0.086s
sys   0m0.023s
</code></pre>

<h2>Resource:</h2>

<ul>
<li><a href="https://www.lifewire.com/command-return-time-command-4054237">https://www.lifewire.com/command-return-time-command-4054237</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
