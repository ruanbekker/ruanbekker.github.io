<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Graphs | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/graphs/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2021-11-23T11:45:25-05:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Setup the NagiosGraph Plugin on Nagios Monitoring Server]]></title>
    <link href="https://blog.ruanbekker.com/blog/2019/03/18/how-to-setup-the-nagiosgraph-plugin-on-nagios-monitoring-server/"/>
    <updated>2019-03-18T12:27:11-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2019/03/18/how-to-setup-the-nagiosgraph-plugin-on-nagios-monitoring-server</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/54547916-65f26680-49af-11e9-8d42-e27c57ef8e2e.png" alt="" /></p>

<p>If you have not setup the <a href="https://blog.ruanbekker.com/blog/2019/03/13/how-to-setup-a-nagios-monitoring-server/">Nagios Server</a> have a look at that link to setup the Nagios server.</p>

<h2>NagiosGraph</h2>

<p>In this post we will setup the nagiosgraph plugin to graph performance data of our monitored host and services.</p>

<h2>Download and Install</h2>

<p>Download the nagiosgraph plugin and extract:</p>

<pre><code>$ wget 'https://downloads.sourceforge.net/project/nagiosgraph/nagiosgraph/1.5.2/nagiosgraph-1.5.2.tar.gz' -O nagiosgraph-1.5.2.tar.gz
$ tar -xvf nagiosgraph-1.5.2.tar.gz
</code></pre>

<p>Install dependencies and install the nagiosgraph plugin:</p>

<pre><code>$ apt install libnet-snmp-perl libsensors4 libsnmp-base libtalloc2 libtdb1 libwbclient0  snmp whois mrtg  libcgi-pm-perl librrds-perl libgd-perl libnagios-object-perl nagios-plugins-contrib
$ ./install.pl --check-prereq
$ ./install.pl --layout standalone --prefix /usr/local/nagiosgraph


Destination directory (prefix)? [/usr/local/nagiosgraph]
Location of configuration files (etc-dir)? [/usr/local/nagiosgraph/etc]
Location of executables? [/usr/local/nagiosgraph/bin]
Location of CGI scripts? [/usr/local/nagiosgraph/cgi]
Location of documentation (doc-dir)? [/usr/local/nagiosgraph/doc]
Location of examples? [/usr/local/nagiosgraph/examples]
Location of CSS and JavaScript files? [/usr/local/nagiosgraph/share]
Location of utilities? [/usr/local/nagiosgraph/util]
Location of state files (var-dir)? [/usr/local/nagiosgraph/var]
Location of RRD files? [/usr/local/nagiosgraph/var/rrd]
Location of log files (log-dir)? [/usr/local/nagiosgraph/var/log]
Path of log file? [/usr/local/nagiosgraph/var/log/nagiosgraph.log]
Path of CGI log file? [/usr/local/nagiosgraph/var/log/nagiosgraph-cgi.log]
Base URL? [/nagiosgraph]
URL of CGI scripts? [/nagiosgraph/cgi-bin]
URL of CSS file? [/nagiosgraph/nagiosgraph.css]
URL of JavaScript file? [/nagiosgraph/nagiosgraph.js]
URL of Nagios CGI scripts? [/nagios/cgi-bin]
Path of Nagios performance data file? [/tmp/perfdata.log]
username or userid of Nagios user? [nagios]
username or userid of web server user? [www-data]
Modify the Nagios configuration? [n] y
Path of Nagios configuration file? [/usr/local/nagios/etc/nagios.cfg]
Path of Nagios commands file? [/usr/local/nagios/etc/objects/commands.cfg]
Modify the Apache configuration? [n] y
Path of Apache configuration directory? /etc/apache2/sites-enabled
</code></pre>

<p>Ensure that your nagiosgraph configuration under apache: <code>/etc/apache2/sites-enabled/nagiosgraph.conf</code> has the following config (might be standard)</p>

<p><img src="https://user-images.githubusercontent.com/567298/54547000-946f4200-49ad-11e9-933e-b0e8b19bf014.png" alt="" /></p>

<p>Ensure the following configuration is set under nagios main config:</p>

<pre><code>$ vi /usr/local/nagios/etc/nagios.cfg

process_performance_data=1 
service_perfdata_file=/usr/local/nagios/var/service-perfdata.log 
service_perfdata_file_template=$LASTSERVICECHECK$||$HOSTNAME$||$SERVICEDESC$||$SERVICEOUTPUT$||$SERVICEPERFDATA$ 
service_perfdata_file_mode=a 
service_perfdata_file_processing_interval=30 
service_perfdata_file_processing_command=process-service-perfdata-for-nagiosgraph
</code></pre>

<p>Ensure that we have the following commands in place for nagiosgraph:</p>

<pre><code>$ vi /usr/local/nagios/etc/objects/commands.cfg

define command {
  command_name process-service-perfdata-for-nagiosgraph
  command_line /usr/local/nagiosgraph/bin/insert.pl
}
</code></pre>

<p>Create the template <code>graphed-service</code>, this will be mapped to each service that needs to be graphed in nagiosgraph:</p>

<pre><code>$ vi /usr/local/nagios/etc/objects/templates.cfg

define service {
      name              graphed-service
      action_url        /nagiosgraph/cgi-bin/show.cgi?host=$HOSTNAME$&amp;service=$SERVICEDESC$' onMouseOver='showGraphPopup(this)' onMouseOut='hideGraphPopup()' rel='/nagiosgraph/cgi-bin/showgraph.cgi?host=$HOSTNAME$&amp;service=$SERVICEDESC$&amp;period=week&amp;rrdopts=-w+450+-j
      register        0
      }
</code></pre>

<p>Next configure the services that needs to be graphed on nagios graph. Note, we only need to append the service template that we defined in our template configuration from above:</p>

<p>Note, if you have not checked out <a href="https://blog.ruanbekker.com/blog/2019/03/13/how-to-setup-a-nagios-monitoring-server/">Nagios Server Setup</a> post, in that post the inital configuration of the below config is explained.</p>

<pre><code>$ vi /usr/local/nagios/etc/servers/vpn.cfg

define host {
    use                      linux-server
    host_name                WEB01
    alias                    WEB01
    address                  10.10.10.10
    max_check_attempts       5
    check_period             24x7
    notification_interval    30
    notification_period      24x7
}

define service {
    use                    generic-service,graphed-service
    host_name              WEB01
    service_description    PING
    check_command          check_ping!100.0,20%!500.0,60%
}

define service {
    use                      generic-service,graphed-service
    host_name                WEB01
    service_description      SSH
    check_command            check_ssh
    notifications_enabled    1
}

define service {
    use                      generic-service,graphed-service
    host_name                WEB01
    service_description      HTTP
    check_command            check_http
    notifications_enabled    1
}
</code></pre>

<p>Test the nagios config and restart if there are no warnings:</p>

<pre><code>$ /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg
$ systemctl restart nagios
$ systemctl restart apache2
</code></pre>

<p>Access your nagios server at <a href="http://nagios-ip/nagios">http://nagios-ip/nagios</a> and you will find that the graph icon next to the service will open the graph in a new tab, like the screenshot below:</p>

<p><img src="https://user-images.githubusercontent.com/567298/54546912-5d992c00-49ad-11e9-8a7a-331578d20f5b.png" alt="" /></p>

<h2>Up Next</h2>

<p>Next, <a href="https://blog.ruanbekker.com/blog/2019/03/18/monitor-your-first-host-and-services-with-nagios/">Monitor your first Server with Nagios</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graphing Pretty Charts With Python Flask and Chartjs]]></title>
    <link href="https://blog.ruanbekker.com/blog/2017/12/14/graphing-pretty-charts-with-python-flask-and-chartjs/"/>
    <updated>2017-12-14T02:28:51-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2017/12/14/graphing-pretty-charts-with-python-flask-and-chartjs</id>
    <content type="html"><![CDATA[<p><img src="https://thumbsplus.tutsplus.com/uploads/users/1251/posts/28278/preview_image/chartjs-tutsplus.jpg" alt="" /></p>

<p>I am a big sucker for Charts and Graphs, and today I found one awesome library called <a href="http://www.chartjs.org/">Chart.js</a>, which we will use with Python Flask Web Framework, to graph our data.</p>

<p>As Bitcoin is doing so well, I decided to graph the monthly Bitcoin price from January up until now.</p>

<p><a href="https://bekkerclothing.com/collections/developer?utm_source=blog.ruanbekker.com&utm_medium=blog&utm_campaign=leaderboard_ad" target="_blank"><img alt="bekker-clothing-developer-tshirts" src="https://user-images.githubusercontent.com/567298/70170981-7c278a80-16d6-11ea-9759-6621d02c1423.png"></a></p>

<h2>Dependencies:</h2>

<p>Install Flask:</p>

<pre><code class="bash">$ pip install flask
</code></pre>

<p>Create the files and directories:</p>

<pre><code class="bash">$ touch app.py
$ mkdir templates
</code></pre>

<p>We need the <a href="http://www.chartjs.org/docs/latest/#installation">Chart.js</a> library, but I will use the CDN version, in my html.</p>

<h2>Creating the Flask App:</h2>

<p>Our data that we want to graph will be hard-coded in our application, but there are many ways to make this more dynamic, in your <code>app.py</code>:</p>

<pre><code class="python">from flask import Flask, Markup, render_template

app = Flask(__name__)

labels = [
    'JAN', 'FEB', 'MAR', 'APR',
    'MAY', 'JUN', 'JUL', 'AUG',
    'SEP', 'OCT', 'NOV', 'DEC'
]

values = [
    967.67, 1190.89, 1079.75, 1349.19,
    2328.91, 2504.28, 2873.83, 4764.87,
    4349.29, 6458.30, 9907, 16297
]

colors = [
    "#F7464A", "#46BFBD", "#FDB45C", "#FEDCBA",
    "#ABCDEF", "#DDDDDD", "#ABCABC", "#4169E1",
    "#C71585", "#FF4500", "#FEDCBA", "#46BFBD"]

@app.route('/bar')
def bar():
    bar_labels=labels
    bar_values=values
    return render_template('bar_chart.html', title='Bitcoin Monthly Price in USD', max=17000, labels=bar_labels, values=bar_values)

@app.route('/line')
def line():
    line_labels=labels
    line_values=values
    return render_template('line_chart.html', title='Bitcoin Monthly Price in USD', max=17000, labels=line_labels, values=line_values)

@app.route('/pie')
def pie():
    pie_labels = labels
    pie_values = values
    return render_template('pie_chart.html', title='Bitcoin Monthly Price in USD', max=17000, set=zip(values, labels, colors))

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
</code></pre>

<h2>Populating the HTML Static Content:</h2>

<p>As we are using <code>render_template</code> we need to populate our html files in our <code>templates/</code> directory. As you can see we have 3 different html files:</p>

<ul>
<li><code>templates/bar_chart.html</code> :</li>
</ul>


<script src="https://gist.github.com/ruanbekker/019a893face148a43b048240a79c4605.js"></script>


<ul>
<li><code>templates/line_chart.html</code>:</li>
</ul>


<script src="https://gist.github.com/ruanbekker/b9fe6d95019a0e382108f7bfe3ed4122.js"></script>


<ul>
<li><code>templates/pie_chart.html</code>:</li>
</ul>


<script src="https://gist.github.com/ruanbekker/540737448cd8d4a1b427028fa713b061.js"></script>


<h2>Running our Application:</h2>

<p>As you can see, we have 3 endpoints, each representing a different chart style:</p>

<ul>
<li>/line</li>
<li>/bar</li>
<li>/pie</li>
</ul>


<p>Let&rsquo;s start our flask application:</p>

<pre><code class="bash">$ python app.py
</code></pre>

<p>When we access our <code>/line</code> endpoint:</p>

<p><img src="https://i.snag.gy/M8FU6S.jpg" alt="" /></p>

<p>When we access our <code>/bar</code> endpoint:</p>

<p><img src="https://i.snag.gy/DTp0AZ.jpg" alt="" /></p>

<p>When we access our <code>/pie</code> endpoint:</p>

<p><img src="https://i.snag.gy/D6nqJN.jpg?nocache=1513261344206" alt="" /></p>

<h2>Resources:</h2>

<ul>
<li><a href="https://pythonspot.com/flask-and-great-looking-charts-using-chart-js/">https://pythonspot.com/flask-and-great-looking-charts-using-chart-js/</a></li>
<li><a href="http://www.chartjs.org/docs/latest/#installation">http://www.chartjs.org/docs/latest/#installation</a></li>
</ul>


<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
</feed>
