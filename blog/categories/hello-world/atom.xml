<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Hello-world | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/hello-world/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-08-03T08:57:43-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hello World Web App With Java Springboot and Maven]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/08/03/hello-world-web-app-with-java-springboot-and-maven/"/>
    <updated>2018-08-03T08:31:58-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/08/03/hello-world-web-app-with-java-springboot-and-maven</id>
    <content type="html"><![CDATA[<p>In this post we will setup a Java Hello World Web App, using Maven and SpringBoot on Ubuntu 16. I will create all the needed files in this tutorial, but you can head to start.spring.io to generate the zip for you.</p>

<h2>Setup Java</h2>

<p>Setup Java 1.8:</p>

<pre><code class="bash">$ apt update
$ apt install wget openssl vim software-properties-common -y
$ add-apt-repository ppa:webupd8team/java -y
$ apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C2518248EEA14886
$ apt update &amp;&amp; apt install oracle-java8-installer -y
</code></pre>

<p>Ensure that Java is installed:</p>

<pre><code class="bash">$ java -version
java version "1.8.0_181"
Java(TM) SE Runtime Environment (build 1.8.0_181-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)
</code></pre>

<h2>Install Apache Maven:</h2>

<p>Maven is a build automation tool used primarily for Java projects. Let&rsquo;s setup Maven:</p>

<pre><code>$ cd /opt
$ curl -SL  http://www-eu.apache.org/dist/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz | tar -xz
$ mv apache-maven-3.5.4 maven
$ echo 'M2_HOME=/opt/maven' &gt; /etc/profile.d/mavenenv.sh
$ echo 'export PATH=${M2_HOME}/bin:${PATH}' &gt;&gt; /etc/profile.d/mavenenv.sh
$ chmod +x /etc/profile.d/mavenenv.sh
$ source /etc/profile.d/mavenenv.sh
</code></pre>

<p>Verify that Maven is installed:</p>

<pre><code>$ mvn -version
Apache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-17T18:33:14Z)
Maven home: /opt/maven
Java version: 1.8.0_181, vendor: Oracle Corporation, runtime: /usr/lib/jvm/java-8-oracle/jre
Default locale: en_US, platform encoding: ANSI_X3.4-1968
OS name: "linux", version: "4.9.87-linuxkit-aufs", arch: "amd64", family: "unix"
</code></pre>

<h2>Setup the Application:</h2>

<p>Create the home directory:</p>

<pre><code class="bash">$ mkdir myapp &amp;&amp; cd myapp
</code></pre>

<p>Create the directory structure:</p>

<pre><code class="bash">$ mkdir -p src/main/java/hello
</code></pre>

<p>Create and Edit the pom.xml:</p>

<pre><code>$ vim pom.xml
</code></pre>

<pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;hello&lt;/groupId&gt;
    &lt;artifactId&gt;myapp&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;

    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;
    &lt;/parent&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;properties&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;
</code></pre>

<p>Create the Main Application Class:</p>

<pre><code class="bash">$ vim src/main/java/hello/MainApplicationClass.java
</code></pre>

<pre><code class="java">package hello;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class MainApplicationClass {

    public static void main(String[] args) {
        SpringApplication.run(MainApplicationClass.class, args);
    }
}
</code></pre>

<p>Create the Route Controller:</p>

<pre><code class="bash">$ vim src/main/java/hello/HelloController.java
</code></pre>

<pre><code class="java">package hello;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HelloController {

    @RequestMapping("/")
        public String index() {
        return "This is the index!\n";
    }
    @RequestMapping("/hello")
        public String index2() {

        return "Hello, World!\n";
    }

}
</code></pre>

<h2>Build and Compile:</h2>

<p>This will download all the dependencies and build the jar file:</p>

<pre><code class="bash">$ mvn clean package
</code></pre>

<h2>Start and Test the Application:</h2>

<p>Run the application:</p>

<pre><code class="bash">$ java -jar target/myapp-1.0.jar

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v1.5.9.RELEASE)
...
2018-08-03 12:31:06.967  INFO 5594 --- [           main] hello.MainApplicationClass               : Started MainApplicationClass in 3.656 seconds (JVM running for 4.243)
^
</code></pre>

<p>Test the Application:</p>

<pre><code class="bash">$ curl http://localhost:8080/
This is the index!
</code></pre>

<p>And for our <code>/hello</code> route:</p>

<pre><code class="bash">$ curl http://localhost:8080/hello
Hello, World!
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World Ruby on Rails App Tutorial Using Mac]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/07/20/hello-world-ruby-on-rails-app-tutorial-using-mac/"/>
    <updated>2018-07-20T03:30:20-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/07/20/hello-world-ruby-on-rails-app-tutorial-using-mac</id>
    <content type="html"><![CDATA[<p>In this tutorial, we will setup a basic ruby on rails web app, that consists of a <code>/hello_world</code> and a <code>/status</code> controller. The hello_world controller will return <code>Hello, World</code> and our <code>/status</code> controller will return a <code>HTTP 204</code> no content response code.</p>

<h2>Setup Ruby on Rails</h2>

<p>Setup Ruby on Rails on your Mac:</p>

<pre><code>$ brew install rbenv ruby-build

$ echo 'if which rbenv &gt; /dev/null; then eval "$(rbenv init -)"; fi' &gt;&gt; ~/.bash_profile
$ source ~/.bash_profile

$ rbenv install 2.5.0
$ rbenv global 2.5.0
$ ruby -v

$ gem install rails -v 5.1.4
$ benv rehash
</code></pre>

<h2>Creating the App</h2>

<p>Create your ruby on rails application:</p>

<pre><code>$ rails new fist-app
$ cd first-app
$ rails server
</code></pre>

<h2>Route Config</h2>

<p>Our routes config:</p>

<pre><code>$ cat config/routes.rb
Rails.application.routes.draw do
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
  get 'hello_world', to: 'hello_world#call'
  get 'status', to: 'status#call'
end
</code></pre>

<h2>Controllers</h2>

<p>Configure the hello_world controller:</p>

<pre><code>$ cat app/controllers/hello_world_controller.rb

class HelloWorldController &lt; ApplicationController
  def call
    render body: "Hello, World"
  end
end
</code></pre>

<p>Configure the status controller:</p>

<pre><code>$ cat app/controllers/status_controller.rb

class StatusController &lt; ApplicationController
  def call
    [204, {}, ['']]
  end
end
</code></pre>

<h2>Testing</h2>

<p>For our hello world controller:</p>

<pre><code>$ curl -i http://localhost:3000/hello_world
HTTP/1.1 200 OK
X-Frame-Options: SAMEORIGIN
X-XSS-Protection: 1; mode=block
X-Content-Type-Options: nosniff
Content-Type: text/plain; charset=utf-8
ETag: W/"565339bc4d33d72817b583024112eb7f"
Cache-Control: max-age=0, private, must-revalidate
X-Request-Id: 62441a6d-faa3-42d5-a5a2-bcf7eff5e917
X-Runtime: 0.001940
Transfer-Encoding: chunked
Hello, World
</code></pre>

<p>For our status controller:</p>

<pre><code class="bash">$ curl -i http://localhost:3000/status
HTTP/1.1 204 No Content
X-Frame-Options: SAMEORIGIN
X-XSS-Protection: 1; mode=block
X-Content-Type-Options: nosniff
Cache-Control: no-cache
X-Request-Id: bec91213-ff82-4fc6-8698-3ee7622b1f51
X-Runtime: 0.075504
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://gorails.com/setup/osx/10.12-sierra">https://gorails.com/setup/osx/10.12-sierra</a></li>
<li><a href="http://guides.rubyonrails.org/routing.html">http://guides.rubyonrails.org/routing.html</a></li>
<li><a href="https://www.railstutorial.org/book/beginning#sec-installing_rails">https://www.railstutorial.org/book/beginning#sec-installing_rails</a></li>
<li><a href="https://www.railstutorial.org/book/toy_app">https://www.railstutorial.org/book/toy_app</a></li>
<li><a href="http://codingnudge.com/2017/03/17/tutorial-how-to-run-ruby-on-rails-on-docker-part-1/">http://codingnudge.com/2017/03/17/tutorial-how-to-run-ruby-on-rails-on-docker-part-1/</a></li>
<li><a href="https://medium.com/how-i-learned-ruby-rails/how-i-trained-to-learn-rails-e08c94e2a51e">https://medium.com/how-i-learned-ruby-rails/how-i-trained-to-learn-rails-e08c94e2a51e</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Your First Hello World App With Golang]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/25/your-first-hello-world-app-with-golang/"/>
    <updated>2017-10-25T17:16:25-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/25/your-first-hello-world-app-with-golang</id>
    <content type="html"><![CDATA[<p>So everyone has been saying how awesome Golang is, and at this moment, I am quite curious to fiddle with it.</p>

<h2>Golang Environment: Golang Docker Image</h2>

<p>A quick way to get a Golang Environment, will be to use Docker. We will be using the Alpine tag:</p>

<pre><code class="bash">$ docker run -it golang:alpine sh
</code></pre>

<h2>Our Basic App</h2>

<p>After we are in our container, lets write our first Hello World App:</p>

<pre><code class="go app.go">package main

import "fmt"

func main() {
  fmt.Println("Hello, World!")
}
</code></pre>

<h2>Running our App:</h2>

<p>Using golang to run our app:</p>

<pre><code class="bash">$ go run app.go
Hello, World!
</code></pre>

<p>We can also build our app to create a executable binary:</p>

<pre><code class="bash">$ go build app.go
</code></pre>

<p>You will find that there is a executable binary named <code>app</code> placed in the current working directory. Let&rsquo;s execute it:</p>

<pre><code class="bash">$ ./app
Hello, World!
</code></pre>

<p>This was a very basic example, but will add more examples as I am learning the language</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://golang.org/">https://golang.org/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
