<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Https | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/https/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2023-07-15T18:07:51-04:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HTTPS for Local Development With MiniCA]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/12/23/https-for-local-development-with-minica/"/>
    <updated>2020-12-23T03:11:08-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/12/23/https-for-local-development-with-minica</id>
    <content type="html"><![CDATA[<p>In this tutorial we will use <a href="https://github.com/jsha/minica">minica</a> to enable us to run our web applications over HTTPS for local development.</p>

<p>To read more about about <a href="https://github.com/jsha/minica">minica</a> check out their website.</p>

<h2>Generate Certificates</h2>

<p>You can use their binary from their github page or use my docker image to generate the certificates to a <code>./certs</code> directory:</p>

<pre><code>$ docker run --user "$(id -u):$(id -g)" -it -v $PWD/certs:/output ruanbekker/minica --domains 192.168.0.20.nip.io
</code></pre>

<p>In the case from above, we are generating certificates for the FQDN <code>192.168.0.20.nip.io</code>. You will find the generated certificates under <code>./certs/</code>.</p>

<h2>Application Stack</h2>

<p>We will use docker to create a nginx webserver to serve our content via https using the generated vertificates.</p>

<p>Our <code>docker-compose.yml</code>:</p>

<pre><code>version: '3.7'
services:
  nginx:
    image: nginx
    container_name: nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - ~/personal/docker-minica-nginx/nginx.conf:/etc/nginx/nginx.conf
      - ~/personal/docker-minica-nginx/ssl.conf:/etc/nginx/conf.d/ssl.conf
      - ~/personal/docker-minica-nginx/certs/192.168.0.6.nip.io:/etc/nginx/certs
      - ~/personal/docker-minica-nginx/html/index.html:/usr/share/nginx/html/index.html
</code></pre>

<p>Our <code>nginx.conf</code>:</p>

<pre><code>user  nginx;
worker_processes  1;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;
    include /etc/nginx/conf.d/ssl.conf;
}
</code></pre>

<p>Our <code>ssl.conf</code>:</p>

<pre><code>server {
    listen 80;
    server_name 192.168.0.6.nip.io;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name 192.168.0.6.nip.io;

    ssl_certificate /etc/nginx/certs/cert.pem;
    ssl_certificate_key /etc/nginx/certs/key.pem;

    location / {
        root   /usr/share/nginx/html;
        index  index.html;
    }
}
</code></pre>

<p>Our <code>html/index.html</code>:</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en-us"&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous"&gt;
    &lt;script src="https://code.jquery.com/jquery-3.1.1.min.js" crossorigin="anonymous"&gt;&lt;/script&gt;
    &lt;title&gt;Sample Page&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class="container-fluid"&gt;
        &lt;div class="row"&gt;
            &lt;div class="bitProcessor"&gt;&lt;/div&gt;
            &lt;div class="col-md-12" style="background-color: white; position: absolute; top: 40%;width: 80%;left: 10%;"&gt;
                &lt;center&gt;
                    &lt;h1&gt;Hello, World!&lt;/h1&gt;
                    &lt;p&gt;This is sample text.&lt;/p&gt;
                &lt;/center&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>Import Certificates</h2>

<p>We have a certificate <code>./certs/minica.pem</code> which we need to import and trust on our local workstation, I am using a Mac so it will be Keychain Access.</p>

<p><img src="https://user-images.githubusercontent.com/567298/101961866-5a2ee500-3c13-11eb-9f89-03fa1bd4670d.png" alt="image" /></p>

<p>Once you open Keychain Access, select &ldquo;file&rdquo;, &ldquo;import items&rdquo; and browse and import <code>./certs/minica.pem</code>, once you are done search for minica:</p>

<p><img src="https://user-images.githubusercontent.com/567298/101962064-d4f80000-3c13-11eb-9479-c043ba3ced2c.png" alt="image" /></p>

<p>Select the item, file -> get info, expand trust, change &ldquo;when using this certificate&rdquo; to Always trust and close.</p>

<p>You will now see the root ca is trusted:</p>

<p><img src="https://user-images.githubusercontent.com/567298/101962197-2dc79880-3c14-11eb-8d26-49874c9703fa.png" alt="image" /></p>

<h2>Boot the Application Stack</h2>

<p>As we have <code>docker-compose.yml</code> in our current working directory, we can use docker-compose to boot our application:</p>

<pre><code>$ docker-compose up
Creating network "docker-minica-nginx_default" with the default driver
Creating nginx ... done
Attaching to nginx
</code></pre>

<p>Now when we browse to <code>https://192.168.0.6.nip.io</code> we will see:</p>

<p><img src="https://user-images.githubusercontent.com/567298/101962367-a9c1e080-3c14-11eb-898b-688b50c1b9db.png" alt="image" /></p>

<p>And when we inspect the certificate, we can see its valid:</p>

<p><img src="https://user-images.githubusercontent.com/567298/101962411-c78f4580-3c14-11eb-80cd-cf8e449eca95.png" alt="image" /></p>

<h2>Thank You</h2>

<p>Thank you for reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTPS Termination Using LetsEncrypt With Traefik on Docker Swarm]]></title>
    <link href="https://blog.ruanbekker.com/blog/2017/09/09/https-termination-using-letsencrypt-with-traefik-on-docker-swarm/"/>
    <updated>2017-09-09T18:40:15-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2017/09/09/https-termination-using-letsencrypt-with-traefik-on-docker-swarm</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/53352817-2d211d80-392c-11e9-93f4-b3284f0b6c20.jpg" alt="" /></p>

<p>We will setup a HTTPS Termination on Traefik for our Java Web Application using Payara Micro, that will sit behind our Traefik proxy. In this guide, I will be using GitLab&rsquo;s Private Registry for pushing my Images to.</p>

<h2>Traefik Dockerfile:</h2>

<p>Our Traefik Dockerfile:</p>

<pre><code class="docker Traefik Dockerfile">FROM traefik
ADD traefik.toml .
EXPOSE 80
EXPOSE 8080
EXPOSE 443
</code></pre>

<h2>traefik.toml</h2>

<p>Our Traefik config: <code>traefik.toml</code></p>

<pre><code class="toml traefik.toml">defaultEntryPoints = ["http", "https"]

[web]
address = ":8080"

[entryPoints]

[entryPoints.http]
address = ":80"

[entryPoints.https]
address = ":443"

[entryPoints.https.tls]

[acme]
email = "recipient@domain.com"
storage = "acme.json"
entryPoint = "https"
onDemand = false
OnHostRule = true

[docker]
endpoint = "unix:///var/run/docker.sock"
domain = "apps.domain.com"
watch = true
exposedbydefault = false
</code></pre>

<h2>Build the Image:</h2>

<p>Login to GitLab&rsquo;s Registry, build and push the image:</p>

<pre><code class="bash">$ docker login registry.gitlab.com
$ docker build -t registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/traefik:latest .
$ docker push registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/traefik:latest
</code></pre>

<h2>Traefik:</h2>

<p>Create the Traefik Proxy Service:</p>

<pre><code class="bash">$ docker service create \
--name traefik \
--constraint 'node.role==manager' \
--publish 80:80 \
--publish 443:443 \
--publish 8080:8080 \
--mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \
--network appnet \
--with-registry-auth registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/traefik:latest \
--docker \
--docker.swarmmode \
--docker.domain=apps.domain.com \
--docker.watch \
--logLevel=DEBUG \
--web
</code></pre>

<h2>Java Web Application:</h2>

<p>Our Java Web Applications Dockerfile:</p>

<pre><code class="docker Dockerfile">FROM payara/micro
COPY app.war /opt/payara/deployments/app.war
</code></pre>

<p>Build and Push the Image to our GitLab Registry:</p>

<pre><code class="bash">$ docker build -t registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/java_web:latest .
$ docker push registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/java_web:latest
</code></pre>

<p>Create the Java Web Application on Docker Swarm, specifiying our <code>Host</code>, and also a <code>PathPrefix</code>, so that the Traefik Proxy can accept requests for the <code>Hostname</code>, and anything from <code>/app/</code></p>

<pre><code class="bash">$ docker service create \
--name java_web \
--label 'traefik.port=8080' \
--label traefik.frontend.rule="Host:apps.domain.com; PathPrefix: /app/" \
--network appnet \
--with-registry-auth registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/java_web:latest
</code></pre>

<p>Now we should be able to access our Web Application on <code>https://apps.domain.com/app/</code></p>

<h2>Resources:</h2>

<ul>
<li><a href="https://gist.github.com/nknapp/20c7cd89f1f128b8425dd89cbad0b802">https://gist.github.com/nknapp/20c7cd89f1f128b8425dd89cbad0b802</a></li>
<li><a href="https://niels.nu/blog/2017/traefik-https-letsencrypt.html">https://niels.nu/blog/2017/traefik-https-letsencrypt.html</a></li>
</ul>


<center>
        <script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script>
</center>

]]></content>
  </entry>
  
</feed>
