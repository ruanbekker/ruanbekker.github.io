<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Hugo | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/hugo/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2022-08-06T03:19:36-04:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Docker Multistage Builds for Hugo]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/07/31/docker-multistage-builds-for-hugo/"/>
    <updated>2022-07-31T02:23:51-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/07/31/docker-multistage-builds-for-hugo</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/182013196-aff6e76f-2cf3-4ec2-bfcc-3e977915a6aa.png" alt="blog-ruanbekker-multistage-builds" /></p>

<p>In this tutorial I will demonstrate how to keep your docker <strong>container images</strong> nice and <strong>slim</strong> with the use of <strong>multistage builds</strong> for a <strong>hugo</strong> documentation project.</p>

<p>Hugo is a static content generator so essentially that means that it will <strong>generate your markdown files into html</strong>. Therefore we don&rsquo;t need to include all the content from our project repository as we only need the static content (html, css, javascript) to reside on our <strong>final container image</strong>.</p>

<h2>What are we doing today</h2>

<p>We will use the <strong><a href="https://github.com/h-enk/doks">DOKS</a></strong> Modern Documentation theme for <strong><a href="https://gohugo.io/">Hugo</a></strong> as our project example, where we will build and run our documentation website on a docker container, but more importantly make use of multistage builds to <strong>optimize the size</strong> of our <strong>container image</strong>.</p>

<h2>Our Build Strategy</h2>

<p>Since hugo is a static content generator, we will use a <strong><a href="https://hub.docker.com/_/node">node</a></strong> container image as our base. We will then build and generate the content using <code>npm run build</code> which will generate the static content to <code>/src/public</code> in our build stage.</p>

<p>Since we then have static content, we can utilize a second stage using a <strong><a href="https://hub.docker.com/_/nginx">nginx</a></strong> container image with the purpose of a <strong>web server</strong> to host our <strong>static content</strong>. We will copy the static content from our <code>build</code> stage into our second stage and place it under our defined path in our nginx config.</p>

<p>This way we only include the required content on our final container image.</p>

<h2>Building our Container Image</h2>

<p>First clone the <a href="https://github.com/h-enk/doks">docs github repository</a> and change to the directory:</p>

<pre><code class="bash">git clone https://github.com/h-enk/doks
cd doks
</code></pre>

<p>Now create a <code>Dockerfile</code> in the root path with the following content:</p>

<pre><code class="dockerfile">FROM node:16.15.1 as build
WORKDIR /src
ADD . .
RUN npm install
RUN npm run build

FROM  nginx:alpine
LABEL demonstration.by Ruan Bekker &lt;@ruanbekker&gt;
COPY  nginx/config/nginx.conf /etc/nginx/nginx.conf
COPY  nginx/config/app.conf /etc/nginx/conf.d/app.conf
COPY  --from=build /src/public /usr/share/nginx/app
</code></pre>

<p>As we can see we are copying two nginx config files to our final image, which we will need to create.</p>

<p>Create the nginx config directory:</p>

<pre><code class="bash">mkdir -p nginx/config
</code></pre>

<p>The content for our main nginx config <code>nginx/config/nginx.conf</code>:</p>

<pre><code>user  nginx;
worker_processes  auto;
error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;

    # timeouts
    client_body_timeout 12;
    client_header_timeout 12;
    keepalive_timeout  25;
    send_timeout 10;

    # buffer size
    client_body_buffer_size 10K;
    client_header_buffer_size 1k;
    client_max_body_size 8m;
    large_client_header_buffers 4 4k;

    # gzip compression
    gzip  on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;
    gzip_disable "MSIE [1-6]\.";

    include /etc/nginx/conf.d/app.conf;
}
</code></pre>

<p>And in our main nginx config we are including a virtual host config <code>app.conf</code>, which we will create locally, and the content of <code>nginx/config/app.conf</code>:</p>

<pre><code>server {
    listen       80;
    server_name  localhost;

    location / {
        root   /usr/share/nginx/app;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

}
</code></pre>

<p>Now that we have our docker config in place, we can build our container image:</p>

<pre><code class="bash">docker build -t ruanbekker/hashnode-docs-blogpost:latest .
</code></pre>

<p>Then we can review the <strong>size</strong> of our container image, which is only <code>27.4MB</code> in size, pretty neat right.</p>

<pre><code class="bash">docker images --filter reference=ruanbekker/hashnode-docs-blogpost

REPOSITORY                          TAG       IMAGE ID       CREATED          SIZE
ruanbekker/hashnode-docs-blogpost   latest    5b60f30f40e6   21 minutes ago   27.4MB
</code></pre>

<h2>Running our Container</h2>

<p>Now that we&rsquo;ve built our container image, we can run our documentation site, by specifying our host port on the left to map to our container port on the right in <code>80:80</code>:</p>

<pre><code class="bash">docker run -it -p 80:80 ruanbekker/hashnode-docs-blogpost:latest
</code></pre>

<p>When you don&rsquo;t have port 80 already listening prior to running the previous command, when you head to <a href="http://localhost">http://localhost</a> (if you are running this locally), you should see our documentation site up and running:</p>

<p><img src="https://user-images.githubusercontent.com/567298/182018773-ecf3cd6c-ce2c-487a-a1bf-4a84fe1b6a09.png" alt="image" /></p>

<h2>Thank You</h2>

<p>I have published this container image to <a href="https://hub.docker.com/r/ruanbekker/hashnode-docs-blogpost">ruanbekker/hashnode-docs-blogpost</a>.</p>

<p>Thanks for reading, feel free to check out my <strong><a href="https://ruan.dev">website</a></strong>, feel free to subscribe to my <strong><a href="http://digests.ruanbekker.com/?via=hashnode">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Hugo Blog With the Kiera Theme]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/06/14/setup-a-hugo-blog-with-the-kiera-theme/"/>
    <updated>2020-06-14T15:23:51+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/06/14/setup-a-hugo-blog-with-the-kiera-theme</id>
    <content type="html"><![CDATA[<p><img src="https://img.sysadmins.co.za/wngib2.png" alt="hugo-blog-kiera-theme" /></p>

<p>In this tutorial we will setup a Hugo Blog with the Kiera theme on Linux and will be using Ubuntu for this demonstration, but since Hugo runs on Go, you can run this on Windows, Linux or Mac.</p>

<h2>Dependencies</h2>

<p>We require git to download the theme from github, so first update your package managers indexes, and install git:</p>

<pre><code>$ apt update &amp;&amp; apt install git -y
</code></pre>

<p>Install golang (optional):</p>

<pre><code>$ VERSION=1.14.4
$ wget "https://dl.google.com/go/go${VERSION}.linux-amd64.tar.gz"
$ tar -xf go$VERSION.linux-amd64.tar.gz -C /usr/local
$ echo 'export HUGO_HOME=/usr/local/hugo' &gt;&gt; ~/.profile
$ echo 'export PATH=$PATH:$HUGO_HOME/bin' &gt;&gt; ~/.profile
</code></pre>

<p>When we source our profile, we sound be able to get the go version:</p>

<pre><code>$ source ~/.profile
$ go version
go version go1.14.4 linux/amd64
</code></pre>

<p>Now to install Hugo:</p>

<pre><code>$ mkdir -p /usr/local/hugo/bin
$ wget https://github.com/gohugoio/hugo/releases/download/v0.72.0/hugo_0.72.0_Linux-64bit.tar.gz
$ tar -xf hugo_0.72.0_Linux-64bit.tar.gz -C /usr/local/hugo/bin
$ echo 'export HUGO_HOME=/usr/local/hugo' &gt;&gt; ~/.profile
$ echo 'export PATH=$PATH:$HUGO_HOME/bin' &gt;&gt; ~/.profile
</code></pre>

<p>After sourcing the profile we should see the hugo version:</p>

<pre><code>$ source ~/.profile
$ hugo version
Hugo Static Site Generator v0.72.0-8A7EF3CF linux/amd64 BuildDate: 2020-05-31T12:07:45Z
</code></pre>

<h2>Create the Hugo Workspace</h2>

<p>Create the directory where we will host our blogs and change into that directory:</p>

<pre><code>$ mkdir -p ~/websites 
$ cd ~/websites
</code></pre>

<p>Create your site with hugo:</p>

<pre><code>$ hugo new site awesome-blog
Congratulations! Your new Hugo site is created in /home/ubuntu/websites/awesome-blog.
Visit https://gohugo.io/ for quickstart guide and full documentation.
</code></pre>

<p>Change into the directory that was created:</p>

<pre><code>$ cd awesome-blog/
</code></pre>

<h2>Themes</h2>

<p>Hugo has a <a href="https://themes.gohugo.io/">extensive list of themes</a>, but for this demonstration we will use <a href="https://themes.gohugo.io/hugo-kiera/">kiera</a>.</p>

<p>Download the theme to the themes directory:</p>

<pre><code>$ git clone https://github.com/avianto/hugo-kiera themes/kiera
</code></pre>

<p>Let&rsquo;s run the server and see how it looks like out of the box:</p>

<pre><code>$ hugo server --theme=kiera --bind=0.0.0.0 --environment development
</code></pre>

<p>By default hugo uses the port 1313, so accessing Hugo should look like this:</p>

<p><img src="https://img.sysadmins.co.za/iwqtmt.png" alt="" /></p>

<h2>Customize Hugo</h2>

<p>So let&rsquo;s customize Hugo a bit by adding some content such as a navbar and social icons:</p>

<pre><code>$ cat ./config.yml
baseurl = "http://192.168.64.17/"
title = "My Hugo Blog"
copyright = "Copyright &amp;copy; 2020 - Ruan Bekker"
canonifyurls = true
theme = "kiera"

paginate = 3

summaryLength = 30
enableEmoji = true
pygmentsCodeFences = true

[author]
    name = "Ruan Bekker"
    github = "ruanbekker"
    gitlab = "rbekker87"
    linkedin = "ruanbekker"
    facebook = ""
    twitter = "ruanbekker"
    instagram = ""

[params]
    tagline = "A Hugo theme for creative and technical writing"

[menu]

  [[menu.main]]
    identifier = "about"
    name = "about hugo"
    pre = "&lt;i class='fa fa-heart'&gt;&lt;/i&gt;"
    url = "/about/"
    weight = -110

  [[menu.main]]
    name = "getting started"
    post = "&lt;span class='alert'&gt;New!&lt;/span&gt;"
    pre = "&lt;i class='fa fa-road'&gt;&lt;/i&gt;"
    url = "/getting-started/"
    weight = -100
</code></pre>

<p>After config has been applied to <code>./config.yml</code> and we start our server up again:</p>

<pre><code>$ hugo server --theme=kiera --bind=0.0.0.0 --environment development
</code></pre>

<p>We should see this:</p>

<p><img src="https://img.sysadmins.co.za/3dw9e9.png" alt="" /></p>

<h2>Create your First Post</h2>

<p>Creating the first post:</p>

<pre><code>$ hugo new posts/my-first-post.md
/home/ubuntu/websites/awesome-blog/content/posts/my-first-post.md created
</code></pre>

<p>Let&rsquo;s add some sample data to our markdown file that hugo created:</p>

<pre><code>+++
title = "My First Post"
date = 2020-06-14T15:47:17+02:00
draft = false
tags = ["hugo", "kiera"]
categories = ["hugo-blog"]
+++

-&gt; markdown content here &lt;-
</code></pre>

<p>When starting the server up again and viewing the home page:</p>

<p><img src="https://img.sysadmins.co.za/srklwj.png" alt="hugo-blog-with-home-page" /></p>

<p>And selecting the post:</p>

<p><img src="https://img.sysadmins.co.za/v95p79.png" alt="" /></p>

<p>Code snippets:</p>

<p><img src="https://img.sysadmins.co.za/0xufiy.png" alt="code" /></p>

<p>Tables, lists and images:</p>

<p><img src="https://img.sysadmins.co.za/c317ij.png" alt="hugo-blog" /></p>

<h2>Creating Pages</h2>

<p>For the pages section (about, getting-started), we first create the directory:</p>

<pre><code>$ mkdir content/getting-started
</code></pre>

<p>Then create the page under the directory:</p>

<pre><code>$ hugo new content/getting-started/index.md
content/getting-started/index.md created
</code></pre>

<p>The content:</p>

<pre><code>$ cat content/getting-started/index.md
---
title: "Getting Started"
date: 2020-06-14T16:11:07+02:00
draft: false
---

This is a getting started page
</code></pre>

<p>When we start up our server again and select the &ldquo;getting-started&rdquo; from the navbar on our home page:</p>

<p><img src="https://img.sysadmins.co.za/rod8eo.png" alt="getting-started-page" /></p>

<h2>Production Mode</h2>

<p>You can set the flags in your main config as well, but running the server in production mode:</p>

<pre><code>$ hugo server \
  --baseURL "http://192.168.64.17/" \
  --themesDir=themes --theme=kiera \
  --bind=0.0.0.0 --port=1313 --appendPort=true \
  --buildDrafts --watch --environment production
</code></pre>

<h2>Thanks</h2>

<p>Thanks for reading, feel free to reach out to me on <a href="https://twitter.com/ruanbekker">@ruanbekker</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Blog With Hugo]]></title>
    <link href="https://blog.ruanbekker.com/blog/2019/04/23/setup-a-blog-with-hugo/"/>
    <updated>2019-04-23T05:41:10-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2019/04/23/setup-a-blog-with-hugo</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/30043398/56571367-13632600-65bd-11e9-816e-a18785233e38.png" alt="image" /></p>

<p>In this post we will setup a blog on <a href="https://gohugo.io">hugo</a> and using the theme <a href="https://github.com/mismith0227/hugo_theme_pickles">pickles</a>.</p>

<h2>What is Hugo</h2>

<p>Hugo is a Open-Source Static Site Generator which runs on Golang.</p>

<h2>Installing Hugo</h2>

<p>Im using a mac so I will be installing hugo with brew, for other operating systems, you can have a look at <a href="https://gohugo.io/getting-started/installing/">their documentation</a></p>

<pre><code>$ brew install hugo
</code></pre>

<p>Create your new site:</p>

<pre><code>$ hugo new site myblog
</code></pre>

<h2>Install a Theme</h2>

<p>We will use a 3rd party theme, go ahead and install the pickles theme:</p>

<pre><code>$ git clone -b release https://github.com/mismith0227/hugo_theme_pickles themes/pickles
</code></pre>

<h2>Custom Syntax Highlighting</h2>

<p>Generate syntax highlight css, for a list of other styles <a href="https://help.farbox.com/pygments.html">see this post</a></p>

<pre><code>$ mkdir -p static/css
$ hugo gen chromastyles --style=colorful &gt; static/css/syntax.css
</code></pre>

<p>Append this below <code>style.css</code> in <code>themes/pickles/layouts/partials/head.html</code></p>

<pre><code>&lt;link rel="stylesheet" href="/css/syntax.css"/&gt;
</code></pre>

<p>set pygments settings in <code>config.toml</code>:</p>

<pre><code>baseURL = "http://example.org/"
languageCode = "en-us"
pygmentsCodeFences = true
pygmentsUseClasses = true
title = "My Hugo Site"
</code></pre>

<h2>Create your First Blogpost</h2>

<p>Create your first post:</p>

<pre><code>$ hugo new posts/my-first-post.md
/Users/ruan/myblog/content/posts/my-first-post.md created
</code></pre>

<p>Populate your page with some data:</p>

<pre><code>---
title: "My First Post"
date: 2019-04-23T09:39:23+02:00
description: This is an introduction post to showcase Hugo.
slug: hello-world-my-first-post
categories:
- hugo
- blog
tags:
- helloworld
- hugo
- blog
draft: false
---

![](https://hugo-simple-blog.work/images/uploads/gopher_hugo.png)

Hello world and welcome to my first post

## New Beginning

This is a new beginning on my blog on hugo and this seems pretty cool so im adding random text here because I dont know **what** to add here. So im adding a lot more random text here.

This is another test.

## Code

This is python code:


from random import randint
from faker import Fake
randint(1, 2)

destFile = "largedataset-" + timestart + ".txt"
file_object = open(destFile,"a")
file_object.write("uuid" + "," + "username" + "," + "name" + "," + "country" + "\n")

def create_names(fake):
    for x in range(numberRuns):
        genUname = fake.slug()
        genName =  fake.first_name()
        genCountry = fake.country()
file_object.write(genUname + "," + genName + "," + genCountry + "\n")
..


This is bash code:


#!/usr/bin/env bash
var="ruan"
echo "Hello, ${var}"


## Tweets

This is one of my tweets, see [configuration](https://gohugo.io/content-management/shortcodes/#highlight) for more shortcodes:



## Tables

This is a table:

|**id**    |**name**|**surname**|**age**| **city**     |
|----------|--------|-----------|-------|--------------|
|20-1232091|ruan    |bekker     |32     |cape town     |
|20-2531020|stefan  |bester     |32     |kroonstad     |
|20-4835056|michael |le roux    |35     |port elizabeth|

## Lists

This is a list:

* one
* two
* [three](https://example.com)

This is another list:

1. one
2. two
3. [three](https://example.com)

## Images

This is an embedded photo:

![](https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=1&amp;w=500)
</code></pre>

<h2>Run the Server</h2>

<p>You can set the flags in your main config as well. Go ahead and run the server:</p>

<pre><code>$ hugo server \
  --baseURL "http://localhost/" \
  --themesDir=themes --theme=pickles \
  --bind=0.0.0.0 --port=8080 --appendPort=true \
  --buildDrafts --watch --environment production
</code></pre>

<h2>Screenshots</h2>

<p>When you access your blog on port 8080 you should see your post. Some screenshots below:</p>

<p><img width="1227" alt="image" src="https://user-images.githubusercontent.com/30043398/56570645-9e432100-65bb-11e9-9ea4-dd89be65bed4.png"></p>

<p><img width="1143" alt="image" src="https://user-images.githubusercontent.com/30043398/56570670-aac77980-65bb-11e9-830d-4424e6d92beb.png"></p>

<p><img width="1110" alt="image" src="https://user-images.githubusercontent.com/30043398/56570707-b74bd200-65bb-11e9-8df2-8aa1372e2922.png"></p>

<p><img width="1196" alt="image" src="https://user-images.githubusercontent.com/30043398/56570734-c16dd080-65bb-11e9-92fc-55c7ace373e8.png"></p>

<h2>References:</h2>

<ul>
<li><a href="https://gohugo.io/getting-started/installing/">https://gohugo.io/getting-started/installing/</a></li>
<li><a href="https://gohugo.io/content-management/syntax-highlighting/">https://gohugo.io/content-management/syntax-highlighting/</a></li>
<li><a href="https://willschenk.com/articles/2018/building-a-hugo-site/">https://willschenk.com/articles/2018/building-a-hugo-site/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
