<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Iptables | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/iptables/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2023-05-22T02:39:35-04:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Persist Iptables Rules After Reboots]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/06/15/how-to-persist-iptables-rules-after-reboots/"/>
    <updated>2022-06-15T06:10:12-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/06/15/how-to-persist-iptables-rules-after-reboots</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/ruanbekker-blog-persist-iptables.png" alt="persist-iptables-after-reboot" /></p>

<p>In this tutorial we will demonstrate how to persist iptables rules across reboots.</p>

<h2>Rules Peristence</h2>

<p>By default, when you create iptables rules its active, but as soon as you restart your server, the rules will be gone. Therefore we need to persist these rules across reboots.</p>

<h2>Dependencies</h2>

<p>We require the package <code>iptables-persistent</code> and I will install it on a debian system so I will be using <code>apt</code>:</p>

<pre><code class="bash">sudo apt update
sudo apt install iptables-persistent -y
</code></pre>

<p>Ensure that the service is enabled to start on boot:</p>

<pre><code class="bash">sudo systemctl enable netfilter-persistent
</code></pre>

<h2>Creating Iptables Rules</h2>

<p>In this case I will allow port 80 on TCP from all sources:</p>

<pre><code class="bash">sudo iptables -I INPUT -p tcp --dport 80 -j ACCEPT
</code></pre>

<p>To persist our current rules, we need to save them to <code>/etc/iptables/rules.v4</code> with <code>iptables-save</code>:</p>

<pre><code class="bash">sudo iptables-save &gt; /etc/iptables/rules.v4
</code></pre>

<p>Now when we restart, our rules will be loaded and our previous defined rules will be active.</p>

<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Do Port Forwarding With Iptables]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/04/27/how-to-do-port-forwarding-with-iptables/"/>
    <updated>2020-04-27T13:42:41+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/04/27/how-to-do-port-forwarding-with-iptables</id>
    <content type="html"><![CDATA[<p>This is a quick post on how to do port forwarding with iptables on linux.</p>

<h2>What would we like to achieve</h2>

<p>We have a lxc container running a <strong>redis</strong> server and we would like to do port forwarding so that we can reach the server over the internet</p>

<h2>LXC Host</h2>

<p>On our host that hosts our lxc containers, we want to forward the host port <code>5379</code> to <code>6379</code> of the container (10.37.117.37), so we can connect on a non-standard redis port:</p>

<pre><code>$ iptables -t nat -I PREROUTING -p tcp --dport 5379 -j DNAT --to-destination 10.37.117.37:6379
</code></pre>

<h2>Test over the Internet</h2>

<p>Test the connection by connecting to the LXC Host&rsquo;s IP:</p>

<pre><code>$ redis-cli -h lxc.host.ip.address -p 5379 -a "${REDIS_PW}"  get test
"It's working!"
</code></pre>

<h2>Thank You</h2>

<p>Thanks for reading my short post on how to use iptables to do port forwarding.</p>
]]></content>
  </entry>
  
</feed>
