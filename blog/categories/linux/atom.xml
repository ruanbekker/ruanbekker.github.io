<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2019-02-09T16:36:35-05:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Port Status Checker Script in C Language]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/02/08/port-status-checker-script-in-c-language/"/>
    <updated>2019-02-08T08:56:11-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/02/08/port-status-checker-script-in-c-language</id>
    <content type="html"><![CDATA[<p>This is a simple script in the C Programming Language to test the port status of a remote address.</p>

<h2>Requirements:</h2>

<p>You will need the gcc package to compile the program:</p>

<p>For RHEL based distro&rsquo;s:</p>

<pre><code class="bash">$ yum install gcc -y
</code></pre>

<p>For Debian based distro&rsquo;s:</p>

<pre><code class="bash">$ apt install gcc -y
</code></pre>

<h2>Check TCP Port Status in C Language:</h2>

<p>Our file: <code>test.c</code></p>

<pre><code class="c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;netdb.h&gt;


int main(int argc, char *argv[]) {

    int portno     = 443;
    char *hostname = "google.com";

    int sockfd;
    struct sockaddr_in serv_addr;
    struct hostent *server;

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd &lt; 0) {
        error("Error opening socket\n");
    }

    server = gethostbyname(hostname);

    if (server == NULL) {
        fprintf(stderr,"ERROR, no such host\n");
        exit(0);
    }

    bzero((char *) &amp;serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    bcopy((char *)server-&gt;h_addr,
         (char *)&amp;serv_addr.sin_addr.s_addr,
         server-&gt;h_length);

    serv_addr.sin_port = htons(portno);
    if (connect(sockfd,(struct sockaddr *) &amp;serv_addr, sizeof(serv_addr)) &lt; 0) {
        printf("Port is Closed\n");
    } else {
        printf("Port is Open\n");
    }

    close(sockfd);
    return 0;
}
</code></pre>

<h2>Compile:</h2>

<p>Compile using gcc:</p>

<pre><code>$ gcc -o test test.c
</code></pre>

<h2>Execute:</h2>

<p>Execute the script:</p>

<pre><code class="bash">$ ./test
Port is Open
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VULTR Cloud Servers Limited Signup Promotion]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/12/12/vultr-cloud-servers-limited-singup-promotion/"/>
    <updated>2018-12-12T01:00:32-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/12/12/vultr-cloud-servers-limited-singup-promotion</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/49853336-78c53000-fdef-11e8-8cc2-4b7684550060.png" alt="" /></p>

<p>It&rsquo;s promotion time with VULTR! Get a head start with some free credits.</p>

<h2>Promotion</h2>

<p>VULTR has a promotion running for a limited time, when you sign up with this link below, use the coupon / promo code: <em>VULTRMATCH</em> and you will receive double the deposit in credits for up to $100. This applies to new customers only.</p>

<p>I&rsquo;m not quite sure how long they will be running this promotion, but you can get $100 free in credits when you sign up. That is basically <em>20 months free hosting</em> of a Cloud Server with 1CPU, 1GB RAM, 1TB Bandwidth.</p>

<p>Here&rsquo;s the link:</p>

<p><a href="https://goo.gl/hiAamd"><img src="https://www.vultr.com/media/banner_1.png" width="468" height="60"></a></p>

<h2>About VULTR</h2>

<p>If you are not familliar with VULTR, they are a Cloud Hosting Company that offers cloud servers, bare-metal servers and storage servers in 16 different regions and they provide a hourly billing model.</p>

<p>Below are some of their features:</p>

<ul>
<li>16 Locations: Silicon Valley, Seattle, LA, Dallas, Toronto, Miami, New Jersey, Chicago, Atlanta, London, Paris, Frankfurt, Amsterdam, Tokyo, Singapore, Sydney</li>
<li>100% SLA Guaranteed</li>
<li>Solid-State Drives (SSD)</li>
<li>Private Networking</li>
<li>Reserved IP&rsquo;s</li>
<li>Anti-DDOS Support</li>
<li>Backups</li>
<li>DNS</li>
<li>Startup Scripts</li>
<li>Firewalls</li>
<li>Pretty Slick User Interface</li>
<li>Root Access</li>
<li>Hourly Billing</li>
<li>Deploy Applications Instantly to your Servers with App Deploys</li>
<li>OS Support: Linux, Windows and Custom Uploads</li>
<li>API Support</li>
<li>Great Documentation and Tutorials</li>
</ul>


<p>They also allow you to submit articles to them that can earn you up to $300 per article, check it out <a href="https://goo.gl/hiAamd">here</a></p>

<h2>VULTR Mission</h2>

<p>From their website, their about us section states:</p>

<p>&ldquo;Vultr, founded in 2014, is on a mission to empower developers and businesses by simplifying the deployment of infrastructure via its advanced cloud platform. Vultr is strategically located in 16 datacenters around the globe and provides frictionless provisioning of public cloud, storage and single-tenant bare metal.&rdquo;</p>

<p>&ldquo;Vultr has made it our priority to offer a standardized highly reliable high performance cloud compute environment in all of the cities we serve. Launching a cloud server environment in 16 cities around the globe has never been easier!&rdquo;</p>

<h2>Launching a Server</h2>

<p>I decided to deploy a server pre-configured with Docker, and just about a minute I had my server up and running with Docker, ready to go.</p>

<p>Screenshot of the UI:</p>

<p><img src="https://user-images.githubusercontent.com/567298/49851122-bc686b80-fde8-11e8-82f5-d5fd7fdbaf8a.png" alt="" /></p>

<p>Screenshot of the root login:</p>

<p><img src="https://user-images.githubusercontent.com/567298/49851151-d609b300-fde8-11e8-98aa-974b79b67ed1.png" alt="" /></p>

<h2>Overall</h2>

<p>I&rsquo;m quite impressed with VULTR and the ease of use. The pricing is really good and like the fact that you can deploy servers with pre-configured software on it.</p>

<h2>Thank You</h2>

<p>Please feel free to show support by, <strong>sharing</strong> this post, making a <strong>donation</strong>, <strong>subscribing</strong> or <strong>reach out to me</strong> if you want me to demo and write up on any specific tech topic.</p>

<center>
<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
<input type="hidden" name="cmd" value="_s-xclick" />
<input type="hidden" name="hosted_button_id" value="W7CBGYTCWGANQ" />
<input type="image" src="https://user-images.githubusercontent.com/567298/49853901-461c3700-fdf1-11e8-9d80-8a424a3173af.png" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
<img alt="" border="0" src="https://www.paypal.com/en_ZA/i/scr/pixel.gif" width="1" height="1" />
</form>
</center>


<p><br></p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Benchmark Website Response Times With CURL]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/31/benchmark-website-response-times-with-curl/"/>
    <updated>2018-10-31T02:17:12-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/31/benchmark-website-response-times-with-curl</id>
    <content type="html"><![CDATA[<p>We can gain insights when making requests to websites such as:</p>

<ul>
<li>Lookup time</li>
<li>Connect time</li>
<li>AppCon time</li>
<li>Redirect time</li>
<li>PreXfer time</li>
<li>StartXfer time</li>
</ul>


<p>We will make a request to a website that has caching enabled, the first hit will be a MISS:</p>

<pre><code class="bash">$ curl -s -w '\nLookup time:\t%{time_namelookup}\nConnect time:\t%{time_connect}\nAppCon time:\t%{time_appconnect}\nRedirect time:\t%{time_redirect}\nPreXfer time:\t%{time_pretransfer}\nStartXfer time:\t%{time_starttransfer}\n\nTotal time:\t%{time_total}\n' -o /dev/null obj-cache.cloud.ruanbekker.com/elasticsearch-2.jpg

Lookup time:    1.524465
Connect time:   1.707561
AppCon time:    0.000000
Redirect time:  0.000000
PreXfer time:   1.707656
StartXfer time: 1.897660

Total time: 2.451824
</code></pre>

<p>The next hit will be a HIT:</p>

<pre><code class="bash">$ curl -s -w '\nLookup time:\t%{time_namelookup}\nConnect time:\t%{time_connect}\nAppCon time:\t%{time_appconnect}\nRedirect time:\t%{time_redirect}\nPreXfer time:\t%{time_pretransfer}\nStartXfer time:\t%{time_starttransfer}\n\nTotal time:\t%{time_total}\n' -o /dev/null obj-cache.cloud.ruanbekker.com/elasticsearch-2.jpg

Lookup time:    0.004441
Connect time:   0.188065
AppCon time:    0.000000
Redirect time:  0.000000
PreXfer time:   0.188160
StartXfer time: 0.381344

Total time: 0.926420
</code></pre>

<p>Similar Posts:</p>

<ul>
<li><a href="https://blog.josephscott.org/2011/10/14/timing-details-with-curl/">https://blog.josephscott.org/2011/10/14/timing-details-with-curl/</a></li>
<li><a href="https://ops.tips/gists/measuring-http-response-times-curl/">https://ops.tips/gists/measuring-http-response-times-curl/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Bootstrap Nodes With Python Using Ansible]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/31/how-to-bootstrap-nodes-with-python-using-ansible/"/>
    <updated>2018-10-31T01:48:15-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/31/how-to-bootstrap-nodes-with-python-using-ansible</id>
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/rbekker/image/upload/v1531083331/ansible_tojf8l.png" alt="" /></p>

<p>As Ansible depends on Python, therefore we can bootstrap our nodes with Python using a Ansible Playbook</p>

<h2>Inventory</h2>

<p>The nodes we want to bootstrap:</p>

<pre><code class="bash inventory.ini">[new]
node-1
node-2
node-3

[new:vars]
ansible_python_interpreter=/usr/bin/python3
</code></pre>

<h2>Playbook</h2>

<p>Our playbook with what we want to do:</p>

<pre><code class="yaml bootstrap-python.yml">---
- hosts: all
  gather_facts: False

  tasks:
  - name: install python
    raw: test -e /usr/bin/python || ( apt update &amp;&amp; apt install python -y )
</code></pre>

<h2>Deploy</h2>

<p>Deploy with Ansible:</p>

<pre><code class="bash">$ ansible-playbook -i inventory.ini bootstrap-python.yml

PLAY [all] ***********************************************************************************************************************************************************************************************

TASK [install python] ************************************************************************************************************************************************************************************
changed: [node-1]
changed: [node-2]
changed: [node-3]

PLAY RECAP ***********************************************************************************************************************************************************************************************
node-1                     : ok=2    changed=2    unreachable=0    failed=0
node-2                     : ok=2    changed=2    unreachable=0    failed=0
node-3                     : ok=2    changed=2    unreachable=0    failed=0
</code></pre>

<p>This is it for this post, all posts for this tutorial will be posted under <a href="http://blog.ruanbekker.com/blog/categories/ansible-tutorial">#ansible-tutorial</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Install Packages on Remote Systems With Ansible]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/31/how-to-install-packages-on-remote-systems-with-ansible/"/>
    <updated>2018-10-31T01:28:18-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/31/how-to-install-packages-on-remote-systems-with-ansible</id>
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/rbekker/image/upload/v1531083331/ansible_tojf8l.png" alt="" /></p>

<p>We will use Ansible to deploy packages to remote systems and in this case all the remote systems are running Debian, therefore we will be using the APT package manager.</p>

<h2>Pre-Requisites:</h2>

<p>Ensure that you have installed Ansible and setup the SSH Config for your remote systems, how to do that can be found under the post: <a href="https://blog.ruanbekker.com/blog/2018/07/08/getting-started-with-ansible-on-ubuntu/">setting up ansible</a></p>

<h2>Our Inventory</h2>

<p>The inventory file that describes our hosts:</p>

<pre><code class="bash inventory.ini">[scaleway]
cluster-node-1
cluster-node-2

[hetzner]
docker-node-1
docker-node-2
docker-node-3
glusterfs-node-1
glusterfs-node-2
elasticsearch-node-1
elasticsearch-node-2

[scaleway:vars]
ansible_python_interpreter=/usr/bin/python3
location=france

[hetzner:vars]
ansible_python_interpreter=/usr/bin/python3
location=germany
</code></pre>

<h2>Playbook</h2>

<p>Our playbook that we will define that we want to deploy packages using apt to all hosts:</p>

<pre><code class="yaml packages.yml">---
- hosts: all
  tasks:
  - name: Install Packages
    apt: name= state=latest update_cache=yes
    with_items:
      - ntp
      - python
      - tcpdump
      - wget
      - openssl
      - curl
</code></pre>

<h2>Deploy</h2>

<p>Running the playbook to deploy the packages to the remote servers:</p>

<pre><code class="bash">$ ansible-playbook -i inventory.ini packages.yml

PLAY [all] ***********************************************************************************************************************************************************************************************

TASK [Gathering Facts] ***********************************************************************************************************************************************************************************
ok: [glusterfs-node-2]
ok: [glusterfs-node-1]
ok: [docker-node-1]
ok: [docker-node-2]
ok: [docker-node-3]
ok: [elasticsearch-node-1]
ok: [elasticsearch-node-2]
ok: [cluster-node-1]
ok: [cluster-node-2]

TASK [Install Packages] **********************************************************************************************************************************************************************************
changed: [docker-node-1] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [docker-node-2] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [docker-node-3] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [elasticsearch-node-1] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [glusterfs-node-1] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [glusterfs-node-2] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [elasticsearch-node-2] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
ok: [cluster-node-1] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
ok: [cluster-node-2] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])

PLAY RECAP ***********************************************************************************************************************************************************************************************
docker-node-1              : ok=2    changed=1    unreachable=0    failed=0
docker-node-2              : ok=2    changed=1    unreachable=0    failed=0
docker-node-3              : ok=2    changed=1    unreachable=0    failed=0
elasticsearch-node-1       : ok=2    changed=1    unreachable=0    failed=0
elasticsearch-node-2       : ok=2    changed=1    unreachable=0    failed=0
glusterfs-node-1           : ok=2    changed=1    unreachable=0    failed=0
glusterfs-node-2           : ok=2    changed=1    unreachable=0    failed=0
cluster-node-1             : ok=2    changed=0    unreachable=0    failed=0
cluster-node-2             : ok=2    changed=0    unreachable=0    failed=0
</code></pre>

<p>This is it for this post, all posts for this tutorial will be posted under <a href="http://blog.ruanbekker.com/blog/categories/ansible-tutorial">#ansible-tutorials</a></p>
]]></content>
  </entry>
  
</feed>
