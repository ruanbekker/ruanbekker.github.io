<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2022-06-23T18:09:22-04:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install a Specific Python Version on Ubuntu]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/06/23/install-a-specific-python-version-on-ubuntu/"/>
    <updated>2022-06-23T17:53:46-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/06/23/install-a-specific-python-version-on-ubuntu</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/ruanbekker-install-specific-python-version.png" alt="install-specific-python-version" /></p>

<p>In this short tutorial, I will demonstrate how to install a spcific version of Python on Ubuntu Linux.</p>

<p><a href="https://ruan.dev"><img src="https://img.shields.io/badge/website-ruan.dev-red.svg" alt="" /></a> <a href="https://twitter.com/ruanbekker"><img src="https://img.shields.io/badge/twitter-@ruanbekker-00acee.svg" alt="" /></a> <a href="https://github.com/ruanbekker"><img src="https://img.shields.io/badge/github-cheatsheets-orange.svg" alt="" /></a> <a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/dm-saythanks.io-07B63F.svg" alt="Say Thanks!" /></a>  <a href="https://ko-fi.com/ruanbekker"><img src="https://img.shields.io/badge/-Buy%20Me%20a%20Coffee-ff5f5f?logo=ko-fi&amp;logoColor=white" alt="Ko-fi" /></a></p>

<h2>Dependencies</h2>

<p>Update the apt repositories:</p>

<pre><code class="bash">$ sudo apt update
</code></pre>

<p>Then install the required dependencies:</p>

<pre><code class="bash">$ sudo apt install libssl-dev openssl wget build-essential zlib1g-dev -y
</code></pre>

<h2>Python Versions</h2>

<p>Head over to the <a href="https://www.python.org/downloads/">Python Downloads</a> section and select the version of your choice, in my case I will be using Python 3.8.13, once you have the download link, download it:</p>

<pre><code class="bash">$ wget https://www.python.org/ftp/python/3.8.13/Python-3.8.13.tgz
</code></pre>

<p>Then extract the tarball:</p>

<pre><code class="bash">$ tar -xvf Python-3.8.13.tgz
</code></pre>

<p>Once it completes, change to the directory:</p>

<pre><code class="bash">$ cd Python-3.8.13
</code></pre>

<h2>Installation</h2>

<p>Compile and add <code>--enable-optimizations</code> flag as an argument:</p>

<pre><code class="bash">$ ./configure --enable-optimizations
</code></pre>

<p>Run make and make install:</p>

<pre><code class="bash">$ make 
$ sudo make install 
</code></pre>

<p>Once it completes, you can symlink the python binary so that it&rsquo;s detected by your <code>PATH</code>, if you have no installed python versions or want to use it as the default, you can force overwriting the symlink:</p>

<pre><code class="bash">$ sudo ln -fs /usr/local/bin/python3 /usr/bin/python3
</code></pre>

<p>Then we can test it by running:</p>

<pre><code class="bash">$ python3 --version
Python 3.8.13
</code></pre>

<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Persist Iptables Rules After Reboots]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/06/15/how-to-persist-iptables-rules-after-reboots/"/>
    <updated>2022-06-15T06:10:12-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/06/15/how-to-persist-iptables-rules-after-reboots</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/ruanbekker-blog-persist-iptables.png" alt="persist-iptables-after-reboot" /></p>

<p>In this tutorial we will demonstrate how to persist iptables rules across reboots.</p>

<h2>Rules Peristence</h2>

<p>By default, when you create iptables rules its active, but as soon as you restart your server, the rules will be gone. Therefore we need to persist these rules across reboots.</p>

<h2>Dependencies</h2>

<p>We require the package <code>iptables-persistent</code> and I will install it on a debian system so I will be using <code>apt</code>:</p>

<pre><code class="bash">sudo apt update
sudo apt install iptables-persistent -y
</code></pre>

<p>Ensure that the service is enabled to start on boot:</p>

<pre><code class="bash">sudo systemctl enable netfilter-persistent
</code></pre>

<h2>Creating Iptables Rules</h2>

<p>In this case I will allow port 80 on TCP from all sources:</p>

<pre><code class="bash">sudo iptables -I INPUT -p tcp --dport 80 -j ACCEPT
</code></pre>

<p>To persist our current rules, we need to save them to <code>/etc/iptables/rules.v4</code> with <code>iptables-save</code>:</p>

<pre><code class="bash">sudo iptables-save &gt; /etc/iptables/rules.v4
</code></pre>

<p>Now when we restart, our rules will be loaded and our previous defined rules will be active.</p>

<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customize VIM Editor With a Brand New Look]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/05/11/customize-vim-editor-with-a-brand-new-look/"/>
    <updated>2022-05-11T17:10:16-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/05/11/customize-vim-editor-with-a-brand-new-look</id>
    <content type="html"><![CDATA[<p>In this tutorial we will customize the vim editor, by adding the molokai color scheme, change a couple of basic settings (more suited for my preference - not too much) and add a couple of plugins that will change the look to something like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/161967893-c19e460a-a8f6-4841-b3cd-de8419522790.png" alt="image" /></p>

<h2>About Vim</h2>

<p><strong><a href="https://www.vim.org/">vim</a></strong> has always been my favorite linux text editor, which is super powerful and highly customizable</p>

<h2>Install Vim</h2>

<p>Update indexes:</p>

<pre><code class="bash">sudo apt update
</code></pre>

<p>Install vim:</p>

<pre><code class="bash">sudo apt install vim -y
</code></pre>

<h2>Color Scheme</h2>

<p>To find all existing vim color schemes installed:</p>

<pre><code class="bash">find /usr/share/vim/vim*/colors/ -type f -name "*.vim"
</code></pre>

<p>The output on mine shows:</p>

<pre><code>/usr/share/vim/vim81/colors/desert.vim
/usr/share/vim/vim81/colors/default.vim
/usr/share/vim/vim81/colors/murphy.vim
...
</code></pre>

<p>I will be opting for <a href="https://github.com/tomasr/molokai">molokai</a>, so first create the directory where we will download our color scheme:</p>

<pre><code class="bash">mkdir -p ~/.vim/colors
</code></pre>

<p>Then download the color scheme:</p>

<pre><code>curl -o ~/.vim/colors/molokai.vim https://raw.githubusercontent.com/tomasr/molokai/master/colors/molokai.vim
</code></pre>

<p>By default our color scheme will look like this when we create <code>foo.py</code>:</p>

<p><img src="https://user-images.githubusercontent.com/567298/161961784-ff536963-baca-492b-989b-5d61bc4dfa71.png" alt="image" /></p>

<p>When we hit the &ldquo;esc&rdquo; button, and enter <code>:colorscheme molokai</code> we can change the colorscheme to molokai, and then we should have the following:</p>

<p><img src="https://user-images.githubusercontent.com/567298/161962129-434f42ff-c894-4388-9d2e-5dbf1c80e1f5.png" alt="image" /></p>

<p>To persist these changes, open up <code>~/.vimrc</code> and paste the following as a starter:</p>

<pre><code>colorscheme molokai
syntax on
</code></pre>

<p>Now when we open up <code>foo.py</code> we will see that it defaults to the <code>molokai</code> color scheme.</p>

<h2>Vim Configuration</h2>

<p>Everyone has their own personal preference on vim configs, but I like to keep mine basic, and this is the content of my <code>~/.vimrc</code>:</p>

<pre><code class="bash">colorscheme molokai
syntax on
set mouse-=a

filetype on
filetype indent plugin on
set noexpandtab " tabs ftw
set smarttab " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4 " the visible width of tabs
set softtabstop=4 " edit as if the tabs are 4 characters wide
set shiftwidth=4 " number of spaces to use for indent and unindent
set shiftround " round indent to a multiple of 'shiftwidth'

autocmd FileType yml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
</code></pre>

<h2>Plugins</h2>

<p>The <code>~/.vimrc</code>:</p>

<pre><code>"" https://github.com/VundleVim/Vundle.vim
set nocompatible
filetype off
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" colorscheme duo-mini
" sets color themes
colorscheme molokai
syntax on

" sets the filename at the bottom
set laststatus=2
" https://github.com/itchyny/lightline.vim
Plugin 'itchyny/lightline.vim'

" https://github.com/Shougo/neobundle.vim
" Note: Skip initialization for vim-tiny or vim-small.
if 0 | endif

if &amp;compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=~/.vim/bundle/neobundle.vim/

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
" Refer to |:NeoBundle-examples|.
" Note: You don't set neobundle setting in .gvimrc!
NeoBundle 'itchyny/lightline.vim'
call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

" https://github.com/junegunn/vim-plug
" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" Multiple Plug commands can be written in a single line using | separators
"Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Using a non-master branch
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
Plug 'fatih/vim-go', { 'tag': '*' }

" Plugin options
Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }

" Plugin outside ~/.vim/plugged with post-update hook
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Unmanaged plugin (manually installed and updated)
Plug '~/my-prototype-plugin'

Plug 'itchyny/lightline.vim'

" Initialize plugin system
call plug#end()

" sets the filename as the title up top
" set title
" let g:airline#extensions#tabline#enabled = 1

set noexpandtab " tabs ftw
set smarttab " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4 " the visible width of tabs
set softtabstop=4 " edit as if the tabs are 4 characters wide
set shiftwidth=4 " number of spaces to use for indent and unindent
set shiftround " round indent to a multiple of 'shiftwidth'
autocmd FileType yml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
</code></pre>

<p>Install the dependencies:</p>

<pre><code>git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim
curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
</code></pre>

<p>Install the plugins:</p>

<pre><code>vim +NeoBundleInstall +qall
vim +PluginInstall +qall
</code></pre>

<p>Your vim editor should look like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/161967893-c19e460a-a8f6-4841-b3cd-de8419522790.png" alt="image" /></p>

<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create DNS Records With Terraform on Cloudflare]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/02/20/create-dns-records-with-terraform-on-cloudflare/"/>
    <updated>2022-02-20T13:11:06-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/02/20/create-dns-records-with-terraform-on-cloudflare</id>
    <content type="html"><![CDATA[<p>In this tutorial we will use <strong>Terraform</strong> to create DNS records on <strong>Cloudflare</strong>.</p>

<h2>Installing Terraform</h2>

<p>I will be installing terraform for linux, but you can follow terraform&rsquo;s documentation if you are using a different operating system:
- <a href="https://learn.hashicorp.com/tutorials/terraform/install-cli">https://learn.hashicorp.com/tutorials/terraform/install-cli</a></p>

<pre><code class="bash">&gt; curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
&gt; sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
&gt; sudo apt update &amp;&amp; sudo apt install terraform -y
</code></pre>

<p>Verify that terraform was installed:</p>

<pre><code class="bash">&gt; terraform version
Terraform v1.1.6
on linux_amd64
</code></pre>

<h2>Cloudflare Authentication</h2>

<p>We need to create an API Token in order to authenticate terraform to make the required API calls to create the DNS Record.</p>

<p>They have a great post on this, which you can follow below:
- <a href="https://developers.cloudflare.com/api/tokens/create">https://developers.cloudflare.com/api/tokens/create</a></p>

<p>You will need access to &ldquo;Edit DNS Zones&rdquo; and also include the Domain that you would like to edit.</p>

<p>Ensure that you save the API Token in a safe place.</p>

<h2>Terraform Code</h2>

<p>First we will create a project directory:</p>

<pre><code class="bash">&gt; mkdir terraform-cloudflare-dns
&gt; cd terraform-cloudflare-dns
</code></pre>

<p>First we will create the <code>providers.tf</code> which we define our provider and the required parameters for the provider:</p>

<pre><code>terraform {
  required_providers {
    cloudflare = {
      source = "cloudflare/cloudflare"
      version = "~&gt; 3.0"
    }
  }
}

provider "cloudflare" {
  email   = var.cloudflare_email
  api_token = var.cloudflare_api_token
}
</code></pre>

<p>As you can see, we are referencing <code>email</code> and <code>api_token</code> as variables, therefore we need to define those variables in <code>variables.tf</code>:</p>

<pre><code>variable "cloudflare_email" {
  type        = string
  description = "clouflare email address"
}

variable "cloudflare_api_token" {
  type        = string
  description = "cloudflare api token"
}
</code></pre>

<p>In our <code>main.tf</code>, we are first using a data resource to query cloudflare for our domain <code>rbkr.xyz</code> and then access the attribute <code>id</code> which we will be using in our <code>cloudflare_record</code> resource so that it knows which domain to add the DNS record for.</p>

<p>Then we are going to create the A record <code>foobar</code> and provide the value of <code>127.0.0.1</code>:</p>

<pre><code>data "cloudflare_zone" "this" {
  name = "rbkr.xyz"
}

resource "cloudflare_record" "foobar" {
  zone_id = data.cloudflare_zone.this.id
  name    = "foobar"
  value   = "127.0.0.1"
  type    = "A"
  proxied = false
}
</code></pre>

<p>Then we are defining our outputs in <code>outputs.tf</code>:</p>

<pre><code>output "record" {
  value = cloudflare_record.foobar.hostname
}

output "metadata" {
  value       = cloudflare_record.foobar.metadata
  sensitive   = true
}
</code></pre>

<h2>Creating the Record</h2>

<p>Once our configuration code is in place we can run a <code>init</code> which will download the providers:</p>

<pre><code class="bash">&gt; terraform init
</code></pre>

<p>Once that is done, we can run a <code>plan</code> so we can see what will be deployed, but since our <code>variables.tf</code> has no <code>default</code> values, we will either have to define this in <code>terraform.tfvars</code> or use it in-line.</p>

<p>I will be using it in-line for this demonstration:</p>

<pre><code class="bash">&gt; terraform plan -var "cloudflare_email=$EMAIL" -var "cloudflare_api_token=$API_TOKEN"
</code></pre>

<p>Once you are happy, you can run a <code>apply</code> which will deploy the changes:</p>

<pre><code class="bash">&gt; terraform apply -var "cloudflare_email=$EMAIL" -var "cloudflare_api_token=$API_TOKEN"

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # cloudflare_record.foobar will be created
  + resource "cloudflare_record" "foobar" {
      + allow_overwrite = false
      + created_on      = (known after apply)
      + hostname        = (known after apply)
      + id              = (known after apply)
      + metadata        = (known after apply)
      + modified_on     = (known after apply)
      + name            = "foobar"
      + proxiable       = (known after apply)
      + proxied         = false
      + ttl             = (known after apply)
      + type            = "A"
      + value           = "127.0.0.1"
      + zone_id         = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + metadata = (sensitive value)
  + record   = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

cloudflare_record.foobar: Creating...
cloudflare_record.foobar: Creation complete after 4s [id=xxxxxxxxxxxxxxxxxxxxx]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

Outputs:

metadata = &lt;sensitive&gt;
record = "foobar.rbkr.xyz"
</code></pre>

<h2>Test DNS</h2>

<p>We can now test if this is working as expected with a dns utility like dig:</p>

<pre><code class="bash">&gt; dig foobar.rbkr.xyz

; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; foobar.rbkr.xyz
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 20800
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;foobar.rbkr.xyz.       IN      A

;; ANSWER SECTION:
foobar.rbkr.xyz. 300    IN      A       127.0.0.1

;; Query time: 262 msec
;; SERVER: 172.31.0.2#53(172.31.0.2)
;; WHEN: Wed Feb 02 13:57:59 SAST 2022
;; MSG SIZE  rcvd: 68
</code></pre>

<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Nodejs on Linux Using NVM]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/10/11/install-nodejs-on-linux-using-nvm/"/>
    <updated>2021-10-11T19:07:43-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/10/11/install-nodejs-on-linux-using-nvm</id>
    <content type="html"><![CDATA[<p>In this post we will install Nodejs using Node Version Manager (nvm), which allows you to install and use different versions of node via the command line.</p>

<p>For more information on NVM, checkout their <a href="https://github.com/nvm-sh/nvm">github repository</a></p>

<h2>Install</h2>

<p>I will be using a debian based linux distribution, so I first will be updating my package manager&rsquo;s indexes:</p>

<pre><code class="bash">$ apt update
</code></pre>

<p>Then I will install NVM using the instructions from <a href="https://github.com/nvm-sh/nvm#installing-and-updating">their</a> repository (always ensure that you are aware what you are installing when you curl, pipe, bash):</p>

<pre><code class="bash">$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
</code></pre>

<h2>Verify</h2>

<p>You can now log out and log back in for your path to be updated, or you can follow the instructions on your terminal to source your session so that your path to nvm is updated:</p>

<pre><code class="bash">$ export NVM_DIR="$HOME/.nvm"
$ [ -s "$NVM_DIR/bash_completion" ] &amp;&amp; \. "$NVM_DIR/bash_completion"
$ [ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; \. "$NVM_DIR/nvm.sh"
$ [ -s "$NVM_DIR/bash_completion" ] &amp;&amp; \. "$NVM_DIR/bash_completion"
</code></pre>

<p>Then you can verify if <code>nvm</code> is in your path:</p>

<pre><code class="bash">$ command -v nvm
nvm
</code></pre>

<h2>Installing a Node Version</h2>

<p>Before we install a specific version of nodejs, let&rsquo;s first look at the LTS versions from the Fermium release:</p>

<pre><code class="bash">$ nvm ls-remote --lts=fermium
       v14.15.0   (LTS: Fermium)
       v14.15.1   (LTS: Fermium)
       v14.15.2   (LTS: Fermium)
       v14.15.3   (LTS: Fermium)
       v14.15.4   (LTS: Fermium)
       v14.15.5   (LTS: Fermium)
       v14.16.0   (LTS: Fermium)
       v14.16.1   (LTS: Fermium)
       v14.17.0   (LTS: Fermium)
       v14.17.1   (LTS: Fermium)
       v14.17.2   (LTS: Fermium)
       v14.17.3   (LTS: Fermium)
       v14.17.4   (LTS: Fermium)
       v14.17.5   (LTS: Fermium)
       v14.17.6   (LTS: Fermium)
       v14.18.0   (Latest LTS: Fermium)
</code></pre>

<p>So I want to install <code>v14.8.0</code>:</p>

<pre><code class="bash">$ nvm install 14.8.0
</code></pre>

<p>I also would like to make it my default version of node:</p>

<pre><code class="bash">$ nvm alias default node
default -&gt; node (-&gt; v14.8.0)
</code></pre>

<h2>Verify Installation</h2>

<p>Now we can verify if <code>npm</code> is installed:</p>

<pre><code class="bash">$ npm -v
6.14.7
</code></pre>

<p>as well as <code>node</code>:</p>

<pre><code class="bash">$ node -v
v14.8.0
</code></pre>

<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
</feed>
