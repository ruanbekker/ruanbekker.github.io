<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2020-04-19T22:55:59+02:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup a WireGuard VPN Server on Linux]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/01/11/setup-a-wireguard-vpn-server-on-linux/"/>
    <updated>2020-01-11T23:37:03+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/01/11/setup-a-wireguard-vpn-server-on-linux</id>
    <content type="html"><![CDATA[<h2>Installation</h2>

<p>I will be installing my wireguard vpn server on a ubuntu 18 server, for other distributions you can have a look at their <a href="https://www.wireguard.com/install/">docs</a></p>

<pre><code>$ sudo add-apt-repository ppa:wireguard/wireguard
$ sudo apt update
$ sudo apt install wireguard -y
</code></pre>

<h2>Configuration</h2>

<p>On the Server, create they keys directory where we will save our keys:</p>

<pre><code>$ mkdir -p /etc/wireguard/keys
</code></pre>

<p>Create the private and public key:</p>

<pre><code>$ wg genkey | tee privatekey | wg pubkey &gt; publickey
</code></pre>

<p>Generate the pre-shared key:</p>

<pre><code>$ wg genpsk &gt; client.psk
</code></pre>

<p>On the client, create the keys directory:</p>

<pre><code>$ mkdir -p ~/wireguard/keys
</code></pre>

<p>Create the private and public keys:</p>

<pre><code>$ cd ~/wireguard/keys
$ wg genkey | tee privatekey | wg pubkey &gt; publickey
</code></pre>

<p>Populate the server config:</p>

<pre><code>$ cat /etc/wireguard/wg0.conf
[Interface]
PrivateKey = &lt;output-of-client.privatekey&gt;
Address = 192.168.199.1/32
ListenPort = 8999
PostUp = sysctl -w net.ipv4.ip_forward=1; iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o ens3 -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o ens3 -j MASQUERADE

[Peer]
PublicKey = &lt;output-of-server.publickey&gt;
PresharedKey = &lt;output-of-client.psk&gt;
AllowedIPs = 192.168.199.2/32
</code></pre>

<p>Populate the client config:</p>

<pre><code>$ cat ~/wireguard/wg0.conf
[Interface]
PrivateKey = &lt;output-of-client.privatekey&gt;
Address = 192.168.199.2/24
DNS = 1.1.1.1

[Peer]
PublicKey = &lt;output-of-server.publickey&gt;
PresharedKey = &lt;output-of-client.psk&gt;
Endpoint = &lt;server-public-ip&gt;:8999
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 25
</code></pre>

<h2>Start the Server</h2>

<p>On the server, enable and start the service:</p>

<pre><code>$ systemctl enable wg-quick@wg0.service
$ wg-quick up wg0
</code></pre>

<p>On the client, connect the VPN:</p>

<pre><code>$ wg-quick up ~/wireguard/wg0.conf
</code></pre>

<p>Verify the status:</p>

<pre><code>$ wg show
interface: wg0
  public key: +Giwk8Y5KS5wx9mw0nEIdQODI+DsR+3TcbMxjJqfZys=
  private key: (hidden)
  listening port: 8999

peer: Q8LGMj6CeCYQJp+sTu74mLMRoPFAprV8PsnS0cu9fDI=
  preshared key: (hidden)
  endpoint: 102.132.208.80:57800
  allowed ips: 192.168.199.2/32
  latest handshake: 22 seconds ago
  transfer: 292.00 KiB received, 322.15 KiB sent
</code></pre>

<p>Check if you can ping the private ip address of the VPN:</p>

<pre><code>$ ping 192.168.199.2
PING 192.168.199.2 (192.168.199.2): 56 data bytes
64 bytes from 192.168.199.2: icmp_seq=0 ttl=63 time=304.844 ms
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Background Processes With Screen]]></title>
    <link href="http://blog.ruanbekker.com/blog/2020/01/02/managing-background-processes-with-screen/"/>
    <updated>2020-01-02T10:42:54+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2020/01/02/managing-background-processes-with-screen</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/71659085-e6bbfc80-2d4e-11ea-9264-5ce0c848f9f3.png" alt="image" /></p>

<p>This is a quick post on how to create, manage and delete background processes with screen</p>

<h2>About</h2>

<p>Screen allows you to run processes in a different session, so when you exit your terminal the process will still be running.</p>

<h2>Install</h2>

<p>Install screen on the operating system of choice, for debian based systems it will be:</p>

<pre><code class="bash">$ sudo apt install screen -y
</code></pre>

<h2>Working with Screen</h2>

<p>To create a screen session, you can just run <code>screen</code> or you can provide an argument to provide a name:</p>

<pre><code>$ screen -S my-screen-session
</code></pre>

<p>Now you will be dropped into a screen session, run a ping:</p>

<pre><code>$ ping 8.8.8.8
</code></pre>

<p>Now to allow the ping process to run in the background, send the commands to detach the screen session:</p>

<pre><code>Ctrl + a, then press d
</code></pre>

<p>To view the screen session:</p>

<pre><code>$ screen -ls
There is a screen on:
    45916.my-screen-session (Detached)
1 Socket in /var/folders/jr/dld7mjhn0sx6881xs_0s7rtc0000gn/T/.screen.
</code></pre>

<p>To resume the screen session, pass the screen id or screen name as a argument:</p>

<pre><code>$ screen -r my-screen-session
64 bytes from 8.8.8.8: icmp_seq=297 ttl=55 time=7.845 ms
64 bytes from 8.8.8.8: icmp_seq=298 ttl=55 time=6.339 ms
</code></pre>

<h2>Scripting</h2>

<p>To use a one liner to send a process as a detached screen session for scripting as an example, you can do that like this:</p>

<pre><code>$ screen -S ping-process -m -d sh -c "ping 8.8.8.8"
</code></pre>

<p>Listing the screen session:</p>

<pre><code>$ screen -ls
There is a screen on:
    46051.ping-process  (Detached)
</code></pre>

<p>Terminating the screen session:</p>

<pre><code>$ screen -S ping-process -X quit
</code></pre>

<h2>Thank You</h2>

<p>Let me know what you think. If you liked my content, feel free to visit me at <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<p><a href="https://twitter.com/ruanbekker"><img src="https://user-images.githubusercontent.com/567298/71188576-e2410f80-2289-11ea-8667-08f0c14ab7b5.png" alt="" /></a></p>

<p><a href="https://ko-fi.com/A6423ZIQ"><img src="https://www.ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sysadmin Linux Troubleshooting Cheatsheet]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/02/10/sysadmin-linux-troubleshooting-cheatsheet/"/>
    <updated>2019-02-10T21:17:54+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/02/10/sysadmin-linux-troubleshooting-cheatsheet</id>
    <content type="html"><![CDATA[<p>This is a one pager of all the commands I use when I have to troubleshoot problems. This post will be updated as time goes by.</p>

<h2>Curl / Web Response Times</h2>

<p>Template file:</p>

<pre><code class="bash">$ cat curl-format.txt
time_namelookup:  %{time_namelookup}\n
time_connect:  %{time_connect}\n
time_appconnect:  %{time_appconnect}\n
time_pretransfer:  %{time_pretransfer}\n
time_redirect:  %{time_redirect}\n
time_starttransfer:  %{time_starttransfer}\n
----------\n
time_total:  %{time_total}\n
</code></pre>

<p>The host header, source addres, destination address:</p>

<pre><code class="bash">$ curl -sk -w "@curl-format.txt" -o /dev/null -H "Host: remote-host.mydomain.com" 10.0.2.10 https://10.244.0.240:443 -L

time_namelookup:  0.012178
time_connect:  0.012225
time_appconnect:  0.062149
time_pretransfer:  0.062175
time_redirect:  0.000172
time_starttransfer:  0.125631
----------
time_total:  0.125849
</code></pre>

<h2>MTR / Network Latencies / Packetloss</h2>

<p>No dns, TCP, counts, port, source address, destination address:</p>

<pre><code class="bash">$ mtr -n -T -c 10 --port 443 10.2.0.2 10.244.10.5 --report
Start: Sun Feb 10 19:04:50 2019
HOST: my-internet-gatewewy         Loss%   Snt   Last   Avg  Best  Wrst StDev
  1.|-- 172.18.110.22              0.0%    10    0.3   0.3   0.3   0.3   0.0
  2.|-- 172.18.110.22              0.0%    10    0.3   0.3   0.3   0.3   0.0
  3.|-- 172.18.110.22              0.0%    10    0.3   0.3   0.3   0.3   0.0
</code></pre>

<h2>TCPTraceroute</h2>

<p>No dns, TCP, port, source address, destination address:</p>

<pre><code class="bash">$ traceroute -T -n -p 443 -s 10.80.4.7 10.2.129.4; done
traceroute to 10.2.129.4 (10.2.129.4), 30 hops max, 60 byte packets
 1  10.80.4.1   0.322 ms  0.291 ms  0.224 ms
 2  10.2.129.4  179.090 ms  179.022 ms  179.023 ms
</code></pre>

<h2>Connection Related:</h2>

<p>Connection flow: <a href="https://askubuntu.com/questions/538443/whats-the-difference-between-port-status-listening-time-wait-close-wait">Thanks to</a></p>

<pre><code>Consider two programs attempting a socket connection (call them a and b). Both set up sockets and transition to the LISTEN state. Then one program (say a) tries to connect to the other (b). a sends a request and enters the SYN_SENT state, and b receives the request and enters the SYN_RECV state. When b acknowledges the request, they enter the ESTABLISHED state, and do their business. Now a couple of things can happen:

    a wishes to close the connection, and enters FIN_WAIT1. b receives the FIN request, sends an ACK (then a enters FIN_WAIT2), enters CLOSE_WAIT, tells a it is closing down and the enters LAST_ACK. Once a acknowledges this (and enters TIME_WAIT), b enters CLOSE. a waits a bit to see if anythings is left, then enters CLOSE.
    a and b have finished their business and decide to close the connection (simultaneous closing). When a is in FIN_WAIT, and instead of receiving an ACK from b, it receives a FIN (as b wishes to close it as well), a enters CLOSING. But there are still some messages to send (the ACK that a is supposed to get for its original FIN), and once this ACK arrives, a enters TIME_WAIT as usual.
</code></pre>

<p>Active Connections:</p>

<pre><code>$ netstat -n -A  inet | grep -v "127.0.0.1"
</code></pre>

<p>Established Connections:</p>

<pre><code>$ netstat -nputw | grep ESTABLISHED
$ netstat -antp | grep :3306 | grep ESTABLISHED
</code></pre>

<p>Time Wait Connections:</p>

<pre><code>$ netstat -antp | grep TIME_WAIT
</code></pre>

<p>How many connections:</p>

<pre><code>$ wc -l /proc/net/tcp
</code></pre>

<p>Listing Open files per Port:</p>

<pre><code>$ lsof -i:3306
</code></pre>

<p>Listing Open files per User:</p>

<pre><code>$ lsof -u glassfish
</code></pre>

<h2>Network Throughput</h2>

<p>You can test the network throughput between two linux hosts with <code>iperf</code>:</p>

<p>On side-a we will start the server in TCP mode:</p>

<pre><code>$ iperf -s
------------------------------------------------------------
Server listening on TCP port 5001
TCP window size:  128 KByte (default)
------------------------------------------------------------
</code></pre>

<p>On side-b we will start the client, which connects to the server:</p>

<pre><code>$ iperf -c 192.168.1.213
------------------------------------------------------------
Client connecting to 192.168.1.213, TCP port 5001
TCP window size: 43.8 KByte (default)
------------------------------------------------------------
[  3] local 192.168.0.114 port 43870 connected with 192.168.1.213 port 5001
[ ID] Interval       Transfer     Bandwidth
[  3]  0.0-10.0 sec  11.4 MBytes  9.54 Mbits/sec
</code></pre>

<p>We can also run this in UDP mode where the server will run <code>iperf -s -u</code> and the client will run <code>iperf -c host-address -u</code></p>

<h2>Resources</h2>

<ul>
<li><a href="https://aws.amazon.com/premiumsupport/knowledge-center/troubleshoot-vpn-packet-loss/">AWS: Troubleshoot VPN Latencies</a></li>
<li><a href="https://www.linode.com/docs/networking/diagnostics/diagnosing-network-issues-with-mtr/">Linode: Diagnose Network Issues with MTR</a></li>
</ul>


<h2>Thank You</h2>

<p>Please feel free to show support by, <strong>sharing</strong> this post, making a <strong>donation</strong>, <strong>subscribing</strong> or <strong>reach out to me</strong> if you want me to demo and write up on any specific tech topic.</p>

<center>
<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
<input type="hidden" name="cmd" value="_s-xclick" />
<input type="hidden" name="hosted_button_id" value="W7CBGYTCWGANQ" />
<input type="image" src="https://user-images.githubusercontent.com/567298/49853901-461c3700-fdf1-11e8-9d80-8a424a3173af.png" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
<img alt="" border="0" src="https://www.paypal.com/en_ZA/i/scr/pixel.gif" width="1" height="1" />
</form>
</center>


<p><br></p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Port Status Checker Script in C Language]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/02/08/port-status-checker-script-in-c-language/"/>
    <updated>2019-02-08T15:56:11+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/02/08/port-status-checker-script-in-c-language</id>
    <content type="html"><![CDATA[<p>This is a simple script in the C Programming Language to test the port status of a remote address.</p>

<h2>Requirements:</h2>

<p>You will need the gcc package to compile the program:</p>

<p>For RHEL based distro&rsquo;s:</p>

<pre><code class="bash">$ yum install gcc -y
</code></pre>

<p>For Debian based distro&rsquo;s:</p>

<pre><code class="bash">$ apt install gcc -y
</code></pre>

<h2>Check TCP Port Status in C Language:</h2>

<p>Our file: <code>test.c</code></p>

<pre><code class="c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;netdb.h&gt;


int main(int argc, char *argv[]) {

    int portno     = 443;
    char *hostname = "google.com";

    int sockfd;
    struct sockaddr_in serv_addr;
    struct hostent *server;

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd &lt; 0) {
        error("Error opening socket\n");
    }

    server = gethostbyname(hostname);

    if (server == NULL) {
        fprintf(stderr,"ERROR, no such host\n");
        exit(0);
    }

    bzero((char *) &amp;serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    bcopy((char *)server-&gt;h_addr,
         (char *)&amp;serv_addr.sin_addr.s_addr,
         server-&gt;h_length);

    serv_addr.sin_port = htons(portno);
    if (connect(sockfd,(struct sockaddr *) &amp;serv_addr, sizeof(serv_addr)) &lt; 0) {
        printf("Port is Closed\n");
    } else {
        printf("Port is Open\n");
    }

    close(sockfd);
    return 0;
}
</code></pre>

<h2>Compile:</h2>

<p>Compile using gcc:</p>

<pre><code>$ gcc -o test test.c
</code></pre>

<h2>Execute:</h2>

<p>Execute the script:</p>

<pre><code class="bash">$ ./test
Port is Open
</code></pre>

<h2>Thank You</h2>

<p>Please feel free to show support by, <strong>sharing</strong> this post, making a <strong>donation</strong>, <strong>subscribing</strong> or <strong>reach out to me</strong> if you want me to demo and write up on any specific tech topic.</p>

<center>
<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
<input type="hidden" name="cmd" value="_s-xclick" />
<input type="hidden" name="hosted_button_id" value="W7CBGYTCWGANQ" />
<input type="image" src="https://user-images.githubusercontent.com/567298/49853901-461c3700-fdf1-11e8-9d80-8a424a3173af.png" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
<img alt="" border="0" src="https://www.paypal.com/en_ZA/i/scr/pixel.gif" width="1" height="1" />
</form>
</center>


<p><br></p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VULTR Cloud Servers Limited Signup Promotion]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/12/12/vultr-cloud-servers-limited-singup-promotion/"/>
    <updated>2018-12-12T08:00:32+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/12/12/vultr-cloud-servers-limited-singup-promotion</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/49853336-78c53000-fdef-11e8-8cc2-4b7684550060.png" alt="" /></p>

<p>It&rsquo;s promotion time with VULTR! Get a head start with some free credits.</p>

<h2>Promotion</h2>

<p>VULTR has a promotion running for a limited time, when you sign up with this link below, use the coupon / promo code: <em>VULTRMATCH</em> and you will receive double the deposit in credits for up to $100. This applies to new customers only.</p>

<p>I&rsquo;m not quite sure how long they will be running this promotion, but you can get $100 free in credits when you sign up. That is basically <em>20 months free hosting</em> of a Cloud Server with 1CPU, 1GB RAM, 1TB Bandwidth.</p>

<p>Here&rsquo;s the link:</p>

<p><a href="https://goo.gl/hiAamd"><img src="https://www.vultr.com/media/banner_1.png" width="468" height="60"></a></p>

<h2>About VULTR</h2>

<p>If you are not familliar with VULTR, they are a Cloud Hosting Company that offers cloud servers, bare-metal servers and storage servers in 16 different regions and they provide a hourly billing model.</p>

<p>Below are some of their features:</p>

<ul>
<li>16 Locations: Silicon Valley, Seattle, LA, Dallas, Toronto, Miami, New Jersey, Chicago, Atlanta, London, Paris, Frankfurt, Amsterdam, Tokyo, Singapore, Sydney</li>
<li>100% SLA Guaranteed</li>
<li>Solid-State Drives (SSD)</li>
<li>Private Networking</li>
<li>Reserved IP&rsquo;s</li>
<li>Anti-DDOS Support</li>
<li>Backups</li>
<li>DNS</li>
<li>Startup Scripts</li>
<li>Firewalls</li>
<li>Pretty Slick User Interface</li>
<li>Root Access</li>
<li>Hourly Billing</li>
<li>Deploy Applications Instantly to your Servers with App Deploys</li>
<li>OS Support: Linux, Windows and Custom Uploads</li>
<li>API Support</li>
<li>Great Documentation and Tutorials</li>
</ul>


<p>They also allow you to submit articles to them that can earn you up to $300 per article, check it out <a href="https://goo.gl/hiAamd">here</a></p>

<h2>VULTR Mission</h2>

<p>From their website, their about us section states:</p>

<p>&ldquo;Vultr, founded in 2014, is on a mission to empower developers and businesses by simplifying the deployment of infrastructure via its advanced cloud platform. Vultr is strategically located in 16 datacenters around the globe and provides frictionless provisioning of public cloud, storage and single-tenant bare metal.&rdquo;</p>

<p>&ldquo;Vultr has made it our priority to offer a standardized highly reliable high performance cloud compute environment in all of the cities we serve. Launching a cloud server environment in 16 cities around the globe has never been easier!&rdquo;</p>

<h2>Launching a Server</h2>

<p>I decided to deploy a server pre-configured with Docker, and just about a minute I had my server up and running with Docker, ready to go.</p>

<p>Screenshot of the UI:</p>

<p><img src="https://user-images.githubusercontent.com/567298/49851122-bc686b80-fde8-11e8-82f5-d5fd7fdbaf8a.png" alt="" /></p>

<p>Screenshot of the root login:</p>

<p><img src="https://user-images.githubusercontent.com/567298/49851151-d609b300-fde8-11e8-98aa-974b79b67ed1.png" alt="" /></p>

<h2>Overall</h2>

<p>I&rsquo;m quite impressed with VULTR and the ease of use. The pricing is really good and like the fact that you can deploy servers with pre-configured software on it.</p>

<h2>Thank You</h2>

<p>Please feel free to show support by, <strong>sharing</strong> this post, making a <strong>donation</strong>, <strong>subscribing</strong> or <strong>reach out to me</strong> if you want me to demo and write up on any specific tech topic.</p>

<center>
<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
<input type="hidden" name="cmd" value="_s-xclick" />
<input type="hidden" name="hosted_button_id" value="W7CBGYTCWGANQ" />
<input type="image" src="https://user-images.githubusercontent.com/567298/49853901-461c3700-fdf1-11e8-9d80-8a424a3173af.png" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
<img alt="" border="0" src="https://www.paypal.com/en_ZA/i/scr/pixel.gif" width="1" height="1" />
</form>
</center>


<p><br></p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
</feed>
