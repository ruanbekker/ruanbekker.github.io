<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-10-31T02:06:47-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Bootstrap Nodes With Python Using Ansible]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/31/how-to-bootstrap-nodes-with-python-using-ansible/"/>
    <updated>2018-10-31T01:48:15-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/31/how-to-bootstrap-nodes-with-python-using-ansible</id>
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/rbekker/image/upload/v1531083331/ansible_tojf8l.png" alt="" /></p>

<p>As Ansible depends on Python, therefore we can bootstrap our nodes with Python using a Ansible Playbook</p>

<h2>Inventory</h2>

<p>The nodes we want to bootstrap:</p>

<pre><code class="inventory.ini">[new]
node-1
node-2
node-3

[new:vars]
ansible_python_interpreter=/usr/bin/python3
</code></pre>

<h2>Playbook</h2>

<p>Our playbook with what we want to do:</p>

<pre><code class="bootstrap-python.yml">---
- hosts: all
  gather_facts: False

  tasks:
  - name: install python
    raw: test -e /usr/bin/python || ( apt update &amp;&amp; apt install python -y )
</code></pre>

<h2>Deploy</h2>

<p>Deploy with Ansible:</p>

<pre><code class="bash">$ ansible-playbook -i inventory.ini bootstrap-python.yml

PLAY [all] ***********************************************************************************************************************************************************************************************

TASK [install python] ************************************************************************************************************************************************************************************
changed: [node-1]
changed: [node-2]
changed: [node-3]

PLAY RECAP ***********************************************************************************************************************************************************************************************
node-1                     : ok=2    changed=2    unreachable=0    failed=0
node-2                     : ok=2    changed=2    unreachable=0    failed=0
node-3                     : ok=2    changed=2    unreachable=0    failed=0
</code></pre>

<p>This is it for this post, all posts for this tutorial will be posted under <a href="http://blog.ruanbekker.com/blog/categories/ansible-tutorial">#ansible-tutorial</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Install Packages on Remote Systems With Ansible]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/10/31/how-to-install-packages-on-remote-systems-with-ansible/"/>
    <updated>2018-10-31T01:28:18-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/10/31/how-to-install-packages-on-remote-systems-with-ansible</id>
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/rbekker/image/upload/v1531083331/ansible_tojf8l.png" alt="" /></p>

<p>We will use Ansible to deploy packages to remote systems and in this case all the remote systems are running Debian, therefore we will be using the APT package manager.</p>

<h2>Pre-Requisites:</h2>

<p>Ensure that you have installed Ansible and setup the SSH Config for your remote systems, how to do that can be found under the post: <a href="https://blog.ruanbekker.com/blog/2018/07/08/getting-started-with-ansible-on-ubuntu/">setting up ansible</a></p>

<h2>Our Inventory</h2>

<p>The inventory file that describes our hosts:</p>

<pre><code class="bash inventory.ini">[scaleway]
cluster-node-1
cluster-node-2

[hetzner]
docker-node-1
docker-node-2
docker-node-3
glusterfs-node-1
glusterfs-node-2
elasticsearch-node-1
elasticsearch-node-2

[scaleway:vars]
ansible_python_interpreter=/usr/bin/python3
location=france

[hetzner:vars]
ansible_python_interpreter=/usr/bin/python3
location=germany
</code></pre>

<h2>Playbook</h2>

<p>Our playbook that we will define that we want to deploy packages using apt to all hosts:</p>

<pre><code class="yaml packages.yml">---
- hosts: all
  tasks:
  - name: Install Packages
    apt: name={{ item }} state=latest update_cache=yes
    with_items:
      - ntp
      - python
      - tcpdump
      - wget
      - openssl
      - curl
</code></pre>

<h2>Deploy</h2>

<p>Running the playbook to deploy the packages to the remote servers:</p>

<pre><code class="bash">$ ansible-playbook -i inventory.ini packages.yml

PLAY [all] ***********************************************************************************************************************************************************************************************

TASK [Gathering Facts] ***********************************************************************************************************************************************************************************
ok: [glusterfs-node-2]
ok: [glusterfs-node-1]
ok: [docker-node-1]
ok: [docker-node-2]
ok: [docker-node-3]
ok: [elasticsearch-node-1]
ok: [elasticsearch-node-2]
ok: [cluster-node-1]
ok: [cluster-node-2]

TASK [Install Packages] **********************************************************************************************************************************************************************************
changed: [docker-node-1] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [docker-node-2] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [docker-node-3] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [elasticsearch-node-1] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [glusterfs-node-1] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [glusterfs-node-2] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
changed: [elasticsearch-node-2] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
ok: [cluster-node-1] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])
ok: [cluster-node-2] =&gt; (item=[u'ntp', u'python', u'tcpdump', u'wget', u'openssl', u'curl'])

PLAY RECAP ***********************************************************************************************************************************************************************************************
docker-node-1              : ok=2    changed=1    unreachable=0    failed=0
docker-node-2              : ok=2    changed=1    unreachable=0    failed=0
docker-node-3              : ok=2    changed=1    unreachable=0    failed=0
elasticsearch-node-1       : ok=2    changed=1    unreachable=0    failed=0
elasticsearch-node-2       : ok=2    changed=1    unreachable=0    failed=0
glusterfs-node-1           : ok=2    changed=1    unreachable=0    failed=0
glusterfs-node-2           : ok=2    changed=1    unreachable=0    failed=0
cluster-node-1             : ok=2    changed=0    unreachable=0    failed=0
cluster-node-2             : ok=2    changed=0    unreachable=0    failed=0
</code></pre>

<p>This is it for this post, all posts for this tutorial will be posted under <a href="http://blog.ruanbekker.com/blog/categories/ansible-tutorial">#ansible-tutorials</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Java Development Kit 10 on Ubuntu]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/07/15/install-java-development-kit-10-on-ubuntu/"/>
    <updated>2018-07-15T06:17:43-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/07/15/install-java-development-kit-10-on-ubuntu</id>
    <content type="html"><![CDATA[<p>With the announcement of improved docker container integration with Java 10, the JVM is now aware of resource constraints, as not from prior versions. More information on <a href="https://blog.docker.com/2018/04/improved-docker-container-integration-with-java-10/">this post</a></p>

<h2>Differences in Java 8 and Java 10:</h2>

<p>As you can see with Java 8:</p>

<pre><code class="bash">$ docker run -it -m512M --entrypoint bash openjdk:latest

$ docker-java-home/bin/java -XX:+PrintFlagsFinal -version | grep MaxHeapSize
    uintx MaxHeapSize                              := 524288000                          {product}
openjdk version "1.8.0_162"
</code></pre>

<p>And with Java 10:</p>

<pre><code class="bash">$ docker run -it -m512M --entrypoint bash openjdk:10-jdk

$ docker-java-home/bin/java -XX:+PrintFlagsFinal -version | grep MaxHeapSize
   size_t MaxHeapSize                              = 134217728                                {product} {ergonomic}
openjdk version "10" 2018-03-20
</code></pre>

<h2>Installing JDK 10 on Ubuntu:</h2>

<p>Installing Java Development Kit 10:</p>

<pre><code class="bash">$ apt update &amp;&amp; apt upgrade -y
$ add-apt-repository ppa:linuxuprising/java
$ apt update
$ apt install oracle-java10-installer
$ apt install oracle-java10-set-default
</code></pre>

<p>Confirming the Java Version:</p>

<pre><code class="bash">$ java -version
java version "10.0.1" 2018-04-17
Java(TM) SE Runtime Environment 18.3 (build 10.0.1+10)
Java HotSpot(TM) 64-Bit Server VM 18.3 (build 10.0.1+10, mixed mode)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH Tools That Comes in Handy When Dealing With Multiple Servers]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/05/31/ssh-tools-that-comes-in-handy-when-dealing-with-multiple-servers/"/>
    <updated>2018-05-31T05:18:11-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/05/31/ssh-tools-that-comes-in-handy-when-dealing-with-multiple-servers</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/header-ssh-tips.png" alt="" /></p>

<p>When dealing with a lot of servers where you need to ssh to different servers and especially if they require different authentication from different private ssh keys, it kinda gets annoying specifying the private key you need, when you want to SSH to them.</p>

<h2>SSH Config</h2>

<p>SSH Config: <code>~/.ssh/config</code> is powerful!</p>

<p>In this config file, you can specify the remote host, the key, user and the alias, so that when you want to SSH to it, you dont have to use the fully qualified domain name or IP address.</p>

<p>Let&rsquo;s take for example our server-a with the following details:</p>

<ul>
<li>FQDN: host1.eu.compute.domain.coom</li>
<li>User: james</li>
<li>PrivateKeyFile: /path/to/key.pem</li>
<li>Disable Strict Host Checking</li>
</ul>


<p>So to access that host, you would use the following command (without ssh config):</p>

<pre><code class="bash">$ ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -i /path/to/key.pem james@host1.eu.compute.domain.com
</code></pre>

<p>Now with SSH Config, open up the config file:</p>

<pre><code class="">$ vim ~/.ssh/config
</code></pre>

<p>and declare the host details:</p>

<pre><code>Host host1
  Hostname host1.eu.compute.domain.com
  User james
  IdentityFile /path/to/key.pem
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null
</code></pre>

<p>Now, if we need to SSH to it, we can do it as simply as:</p>

<pre><code class="bash">$ ssh host1
</code></pre>

<p>as it will pull in the configs from the config that is described from the host alias that you calling from the argument of the ssh binary.</p>

<h2>SSH Timeout</h2>

<p>Appending to our SSH Config, we can configure either our client or server to prevent SSH Timeouts due to inactivity.</p>

<ul>
<li>SSH Timeout on our Client:</li>
</ul>


<pre><code class="bash">$ vim ~/.ssh/config
</code></pre>

<p>Here we can set how often a NULL Packet is sent to the SSH Connections to keep the connection alive, in this case every 120 seconds:</p>

<pre><code>ServerAliveInterval 120
</code></pre>

<ul>
<li>SSH Timeout on the Servers:</li>
</ul>


<pre><code class="bash">$ vim /etc/ssh/sshd_config
</code></pre>

<p>Below we have 2 properties, the interval of how often to instruct the client connected to send a NULL packet to keep the connection alive and the max number of intervals, so for a idle connection to timeout in 24 hours, we will take 86400 seconds which is 24 hours, divide into 120 second intervals, which gives as 720 intervals.</p>

<p>So the config will look like this:</p>

<pre><code>ClientAliveInterval 120
ClientAliveCountMax 720
</code></pre>

<p>The restart the sshd service:</p>

<pre><code class="bash">$ /etc/init.d/sshd restart
</code></pre>

<h2>SSH Agent</h2>

<p>Another handy tool is <code>ssh-agent</code>, if you have password encryption on your key, everytime you need to ssh, a password will be prompted. A way to get around this is to use the ssh-agent.</p>

<p>We also want to set a TTL to the ssh-agent, as we don&rsquo;t want it to run forever (unless you want it to). In this case I will let the ssh-agent exit after 2 hours. It will also only run in the shell session from where you execute it. Lets start up our ssh-agent:</p>

<pre><code class="bash">$ eval $(ssh-agent -t 7200)
Agent pid 88760 
</code></pre>

<p>Now add the private key to the ssh-agent. If your private key is password protected, it will prompt you for the password and after successful verification the key will be added:</p>

<pre><code>$ ssh-add /path/to/key.pem
Identity added: /path/to/key.pem (/path/to/key.pem)
</code></pre>

<h2>Multiple Github Accounts:</h2>

<p>Here is a great post on how to work with different GitHub Accounts:
- <a href="https://gist.github.com/jexchan/2351996">https://gist.github.com/jexchan/2351996</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup MongoDB Server on ARM64 Using Scaleway]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/01/setup-mongodb-server-on-arm64-using-scaleway/"/>
    <updated>2018-04-01T18:46:27-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/01/setup-mongodb-server-on-arm64-using-scaleway</id>
    <content type="html"><![CDATA[<p><img src="https://preview.ibb.co/bBRhn7/scw.png" alt="" /></p>

<p>I&rsquo;ve been using Scaleway for the past 18 months and I must admit, I love hosting my Applications on their Infrastructure. They have expanded rapidly recently, and currently deploying more infrstructure due to the high demand.</p>

<p>Scaleway is a Cloud Division of Online.net. They provide Baremetal and Cloud SSD Virtual Servers. Im currently hosting a Docker Swarm Cluster, Blogs, Payara Java Application Servers, Elasticsearch and MongoDB Clusters with them and really happy with the performance and stability of their services.</p>

<h2>What will we be doing today:</h2>

<p>Today I will be deploying MongoDB Server on a ARM64-2GB Instance, which costs you 2.99 Euros per month, absolutely awesome pricing! After we install MongoDB we will setup authentication, and then just a few basic examples on writing and reading from MongoDB.</p>

<h2>Getting Started:</h2>

<p>Logon to <a href="cloud.scaleway.com">cloud.scaleway.com</a> then launch an instance, which will look like the following:</p>

<p><img src="https://image.ibb.co/e7T9jn/scw_launch.png" alt="" /></p>

<p>After you deployed your instance, SSH to your instance, and it should look like this:</p>

<p><img src="https://preview.ibb.co/k16C4n/scw_ssh.png" alt="" /></p>

<h2>Dependencies:</h2>

<p>Get the repository and install MongoDB:</p>

<pre><code class="bash">$ apt update
$ apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5
$ echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list
$ apt update &amp;&amp; apt upgrade -y
$ apt install mongodb-org -y
</code></pre>

<p>Enable MongoDB on Boot:</p>

<pre><code class="bash">$ systemctl enable mongod
</code></pre>

<h2>Configuration:</h2>

<p>Your configuration might look different from mine, so I recommend to backup your config first, as the following command will overwrite the config to the configuration that I will be using for this demonstration:</p>

<pre><code class="bash">$ cat &gt; /etc/mongod.conf &lt;&lt; EOF
storage:
  dbPath: /var/lib/mongodb
  journal:
    enabled: false

storage:
  mmapv1:
    smallFiles: true

systemLog:
  destination: file
  logAppend: true
  path: /var/log/mongodb/mongod.log

net:
  port: 27017
  bindIp: 0.0.0.0

processManagement:
  timeZoneInfo: /usr/share/zoneinfo

security:
  authorization: enabled
EOF
</code></pre>

<p>Restart MongoDB for the config changes to take affect:</p>

<pre><code class="bash">$ systemctl restart mongod
</code></pre>

<h2>Authentication:</h2>

<p>Create the Authentication:</p>

<pre><code class="bash">$ mongo
MongoDB shell version v3.6.3
connecting to: mongodb://127.0.0.1:27017
MongoDB server version: 3.6.3
Welcome to the MongoDB shell.

&gt; use admin
&gt; db.createUser({user: "ruan", pwd: "pass123", roles:[{role: "root", db: "admin"}]})
Successfully added user: {
        "user" : "ruan",
        "roles" : [
                {
                        "role" : "root",
                        "db" : "admin"
                }
        ]
}

&gt; exit
</code></pre>

<p>Restart MongoDB and logon with your credentials:</p>

<pre><code class="bash">$ systemctl restart mongod

$ mongo --authenticationDatabase admin --host localhost --port 27017 -u ruan -p
MongoDB shell version v3.6.3
Enter password:
connecting to: mongodb://localhost:27017/
MongoDB server version: 3.6.3
&gt;
</code></pre>

<h2>Write and Read from MongoDB</h2>

<p>While you are on the MongoDB Shell, we will insert a couple of documents, first drop in to the database that you would like to write to:</p>

<pre><code class="bash">&gt; use testdb
switched to db testdb
</code></pre>

<p>Now we will write to the collection: <code>collection1</code>:</p>

<pre><code class="bash">&gt; db.collection1.insert({"name": "ruan", "surname": "bekker", "age": 31, "country": "south africa"})
WriteResult({ "nInserted" : 1 })

&gt; db.collection1.insert({"name": "stefan", "surname": "bester", "age": 30, "country": "south africa"})
WriteResult({ "nInserted" : 1 })
</code></pre>

<p>To find all the documents in our collection:</p>

<pre><code class="bash">&gt; db.collection1.find()
{ "_id" : ObjectId("5ac15ff0f4a5500484defd23"), "name" : "ruan", "surname" : "bekker", "age" : 31, "country" : "south africa" }
{ "_id" : ObjectId("5ac16003f4a5500484defd24"), "name" : "stefan", "surname" : "bester", "age" : 30, "country" : "south africa" }
</code></pre>

<p>To prettify the output:</p>

<pre><code class="bash">&gt; db.collection1.find().pretty()
{
        "_id" : ObjectId("5ac15ff0f4a5500484defd23"),
        "name" : "ruan",
        "surname" : "bekker",
        "age" : 31,
        "country" : "south africa"
}
{
        "_id" : ObjectId("5ac16003f4a5500484defd24"),
        "name" : "stefan",
        "surname" : "bester",
        "age" : 30,
        "country" : "south africa"
}
</code></pre>

<p>To find a document with the key/value of <code>name: ruan</code>:</p>

<pre><code class="bash">&gt; db.collection1.find({"name": "ruan"}).pretty()
{
        "_id" : ObjectId("5ac15ff0f4a5500484defd23"),
        "name" : "ruan",
        "surname" : "bekker",
        "age" : 31,
        "country" : "south africa"
}
</code></pre>

<p>To view the database that you are currently switched to:</p>

<pre><code class="bash">&gt; db
testdb
</code></pre>

<p>To view all the databases:</p>

<pre><code class="bash">&gt; show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
testdb  0.000GB
</code></pre>

<p>To view the collections in the database:</p>

<pre><code class="bash">&gt; show collections
collection1

&gt; exit
</code></pre>

<p>That was just a quick post on installing MongoDB on ARM64 using Scaleway. Try them out, and they are also hiring: <a href="https://careers.scaleway.com/">careers.scaleway.com</a></p>
]]></content>
  </entry>
  
</feed>
