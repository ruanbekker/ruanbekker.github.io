<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2017-09-24T18:11:26-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simple Program With C Language on Linux]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/24/simple-program-with-c-language-on-linux/"/>
    <updated>2017-09-24T06:41:58-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/24/simple-program-with-c-language-on-linux</id>
    <content type="html"><![CDATA[<p>Today the idea popped up on how to write a Simple &ldquo;Hello World&rdquo; Application using C Programming Language, as I just wanted to see how it works.</p>

<h2>Requirements:</h2>

<p>You will need the <code>gcc</code> package to compile the program:</p>

<pre><code class="bash RHEL">$ yum install gcc -y
</code></pre>

<pre><code class="bash Debian">$ apt install gcc -y
</code></pre>

<h2>Writing our first Program:</h2>

<p>We will create a app that just prints out a static defined value:</p>

<p>Create any file with a <code>.c</code> extension, in my case it will be <code>app.c</code>:</p>

<pre><code class="c app.c">#include &lt;stdio.h&gt;

int main(){
    printf("Hello, World\n");
    return 0;
}
</code></pre>

<p>Now compile <code>app.c</code> with <code>gcc</code> and specify the output path of your app with <code>-o &lt;app-name&gt;</code></p>

<pre><code>$ gcc -o app app.c
</code></pre>

<h2>Testing our App:</h2>

<p>You will see that there is a executable file with the name that you have specified as the output:</p>

<pre><code>$ ./app
Hello, World
</code></pre>

<p>Really basic, but quite cool.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the AWS CLI Tools to Grab CloudWatch Metrics for Elasticsearch]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/22/using-the-aws-cli-tools-to-grab-cloudwatch-metrics-for-elasticsearch/"/>
    <updated>2017-09-22T18:06:23-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/22/using-the-aws-cli-tools-to-grab-cloudwatch-metrics-for-elasticsearch</id>
    <content type="html"><![CDATA[<p>Using the AWS CLI Tools to get CloudWatch Metrics for Elasticsearch.</p>

<h2>Elasticsearch:</h2>

<p>List the JVM Memory Pressure Metric:</p>

<pre><code class="bash">$ aws cloudwatch list-metrics --namespace AWS/ES --metric-name JVMMemoryPressure
{
    "Metrics": [
        {
            "Namespace": "AWS/ES",
            "Dimensions": [
                {
                    "Name": "DomainName",
                    "Value": "elasticsearch-cluster"
                },
                {
                    "Name": "ClientId",
                    "Value": "123456789012"
                }
            ],
            "MetricName": "JVMMemoryPressure"
        }
    ]
}
</code></pre>

<h2>Metric: JVMMemoryPressure</h2>

<p>Getting Metrics for JVMMemoryPressure, every 10 Minutes for Max Statistic:</p>

<pre><code class="bash">$ aws cloudwatch get-metric-statistics --namespace AWS/ES --dimensions Name=DomainName,Value=elasticsearch-cluster Name=ClientId,Value=123456789012 --metric-name JVMMemoryPressure --start-time 2017-09-08T04:00:00 --end-time 2017-09-08T05:00:00 --period 600 --statistics Maximum
{
    "Datapoints": [
        {
            "Timestamp": "2017-09-08T04:40:00Z",
            "Maximum": 58.7,
            "Unit": "Percent"
        },
        {
            "Timestamp": "2017-09-08T04:00:00Z",
            "Maximum": 58.5,
            "Unit": "Percent"
        },
        {
            "Timestamp": "2017-09-08T04:30:00Z",
            "Maximum": 58.7,
            "Unit": "Percent"
        },
        {
            "Timestamp": "2017-09-08T04:20:00Z",
            "Maximum": 58.5,
            "Unit": "Percent"
        },
        {
            "Timestamp": "2017-09-08T04:50:00Z",
            "Maximum": 58.7,
            "Unit": "Percent"
        },
        {
            "Timestamp": "2017-09-08T04:10:00Z",
            "Maximum": 58.5,
            "Unit": "Percent"
        }
    ],
    "Label": "JVMMemoryPressure"
}
</code></pre>

<h2>Metric: WriteIOPS</h2>

<p>Getting Metrics for WriteIOPS, Every 10 Minutes for Max Statistic:</p>

<pre><code class="bash">$ aws cloudwatch get-metric-statistics --namespace AWS/ES --dimensions Name=DomainName,Value=elasticsearch-cluster Name=ClientId,Value=123456789012 --metric-name WriteIOPS --start-time 2017-09-08T04:00:00 --end-time 2017-09-08T05:00:00 --period 600 --statistics Maximum
{
    "Datapoints": [
        {
            "Timestamp": "2017-09-08T04:30:00Z",
            "Maximum": 0.5266666666666666,
            "Unit": "Count/Second"
        },
        {
            "Timestamp": "2017-09-08T04:00:00Z",
            "Maximum": 0.0,
            "Unit": "Count/Second"
        },
        {
            "Timestamp": "2017-09-08T04:40:00Z",
            "Maximum": 0.09666666666666666,
            "Unit": "Count/Second"
        },
        {
            "Timestamp": "2017-09-08T04:10:00Z",
            "Maximum": 0.0,
            "Unit": "Count/Second"
        },
        {
            "Timestamp": "2017-09-08T04:50:00Z",
            "Maximum": 0.07,
            "Unit": "Count/Second"
        },
        {
            "Timestamp": "2017-09-08T04:20:00Z",
            "Maximum": 0.0,
            "Unit": "Count/Second"
        }
    ],
    "Label": "WriteIOPS"
}
</code></pre>

<h2>Metric: FreeStorageSpace</h2>

<p>Getting Metrics for FreeStorageSpace in Megabytes:</p>

<pre><code class="bash">$ aws cloudwatch get-metric-statistics --namespace AWS/ES --dimensions Name=DomainName,Value=elasticsearch-cluster Name=ClientId,Value=123456789012 --metric-name FreeStorageSpace --start-time 2017-09-11T05:00:00 --end-time 2017-09-11T06:00:00 --period 600 --statistics Minimum --unit Megabytes
{
    "Datapoints": [
        {
            "Timestamp": "2017-09-11T05:50:00Z",
            "Minimum": 25510.438,
            "Unit": "Megabytes"
        },
        {
            "Timestamp": "2017-09-11T05:10:00Z",
            "Minimum": 25573.032,
            "Unit": "Megabytes"
        },
        {
            "Timestamp": "2017-09-11T05:20:00Z",
            "Minimum": 25554.051,
            "Unit": "Megabytes"
        },
        {
            "Timestamp": "2017-09-11T05:30:00Z",
            "Minimum": 25540.957,
            "Unit": "Megabytes"
        },
        {
            "Timestamp": "2017-09-11T05:40:00Z",
            "Minimum": 25525.473,
            "Unit": "Megabytes"
        },
        {
            "Timestamp": "2017-09-11T05:00:00Z",
            "Minimum": 25584.383,
            "Unit": "Megabytes"
        }
    ],
    "Label": "FreeStorageSpace"
}
</code></pre>
]]></content>
  </entry>
  
</feed>
