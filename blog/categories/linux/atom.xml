<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2017-11-22T18:25:38-05:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux Shell Commands With the Python Commands Module]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/11/06/linux-shell-commands-with-the-python-commands-module/"/>
    <updated>2017-11-06T15:15:23-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/11/06/linux-shell-commands-with-the-python-commands-module</id>
    <content type="html"><![CDATA[<p>Using Python to Execute Shell Commands in Linux</p>

<h2>Status Code and Output:</h2>

<p>Getting the Status Code and the Output:</p>

<pre><code class="python">&gt;&gt;&gt; import commands
&gt;&gt;&gt; commands.getstatusoutput('echo foo')
(0, 'foo')

&gt;&gt;&gt; status, output = commands.getstatusoutput('echo foo')
&gt;&gt;&gt; print(status)
0
&gt;&gt;&gt; print(output)
foo
</code></pre>

<h2>Command Output Only:</h2>

<p>Only getting the Shell Output:</p>

<pre><code class="python">&gt;&gt;&gt; import commands
&gt;&gt;&gt; commands.getoutput('echo foo')
'foo'
</code></pre>

<h2>Basic Script</h2>

<p>Test file with a one line of data:</p>

<pre><code class="bash">$ cat file.txt 
test-string
</code></pre>

<p>Our very basic python script:</p>

<pre><code class="python">import commands

status = None
output = None

status, output = commands.getstatusoutput('cat file.txt')
print("Status: {}, Output: {}".format(status, output))
</code></pre>

<p>Running the script:</p>

<pre><code class="bash">$ python script.py 
Status: 0, Output: test-string
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Kerberos Server and Client on Ubuntu]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/18/setup-kerberos-server-and-client-on-ubuntu/"/>
    <updated>2017-10-18T18:25:11-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/18/setup-kerberos-server-and-client-on-ubuntu</id>
    <content type="html"><![CDATA[<p>Kerberos is a authentication protocol that provides a centralized authentication server, that works with the concepts of tickets that are encrypted.</p>

<p>Today we will setup a Kerberos Server (KDC) and setup and Kerberos Enabled Client, and then testing our setup by obtaining a Kerberos Ticket from our server.</p>

<h2>Setup the Server:</h2>

<p>Install Kerberos KDC and Admin Server:</p>

<pre><code class="bash">$ apt update &amp;&amp; apt upgrade -y
$ apt install krb5-kdc krb5-admin-server krb5-config -y
$ krb5_newrealm
</code></pre>

<p>You will be prompted for realm, and hostnames, in my case I have setup the following:</p>

<ul>
<li>REALM: <code>LAN.RUANBEKER.COM</code></li>
<li>HOST: <code>localhost</code></li>
<li>ADMIN_SERVER: <code>localhost</code></li>
</ul>


<p>Then our master password:</p>

<pre><code class="bash">This script should be run on the master KDC/admin server to initialize
a Kerberos realm.  It will ask you to type in a master key password.
This password will be used to generate a key that is stored in
/etc/krb5kdc/stash.  You should try to remember this password, but it
is much more important that it be a strong password than that it be
remembered.  However, if you lose the password and /etc/krb5kdc/stash,
you cannot decrypt your Kerberos database.
Loading random data
Initializing database '/var/lib/krb5kdc/principal' for realm 'LAN.RUANBEKKER.COM',
master key name 'K/M@LAN.RUANBEKKER.COM'
You will be prompted for the database Master Password.
It is important that you NOT FORGET this password.
Enter KDC database master key: 
Re-enter KDC database master key to verify: 
</code></pre>

<p>The output:</p>

<pre><code class="bash">Now that your realm is set up you may wish to create an administrative
principal using the addprinc subcommand of the kadmin.local program.
Then, this principal can be added to /etc/krb5kdc/kadm5.acl so that
you can use the kadmin program on other computers.  Kerberos admin
principals usually belong to a single user and end in /admin.  For
example, if jruser is a Kerberos administrator, then in addition to
the normal jruser principal, a jruser/admin principal should be
created.

Don't forget to set up DNS information so your clients can find your
KDC and admin servers.  Doing so is documented in the administration
guide.
</code></pre>

<p>Uncomment the last line which contains <code>admin</code>:</p>

<pre><code class="bash">$ vi /etc/krb5kdc/kadm5.acl
</code></pre>

<p>a Kerberos principal is a unique identity to which Kerberos can assign tickets, lets add our first principal, <code>james</code>:</p>

<pre><code class="bash">$ kadmin.local 
Authenticating as principal root/admin@LAN.RUANBEKKER.COM with password.
kadmin.local:  addprinc james

WARNING: no policy specified for james@LAN.RUANBEKKER.COM; defaulting to no policy
Enter password for principal "james@LAN.RUANBEKKER.COM": 
Re-enter password for principal "james@LAN.RUANBEKKER.COM": 
Principal "james@LAN.RUANBEKKER.COM" created.
kadmin.local:  exit
</code></pre>

<h2>Setup the Client:</h2>

<p>Setup a Host Entry:</p>

<pre><code class="bash">$ echo '10.1.1.1 kdc.lan.ruanbekker.com kdc' &gt;&gt; /etc/hosts
</code></pre>

<p>Setup Kerberos Client:</p>

<pre><code class="bash">$ apt install krb5-user -y
- realm
- hostname
- hostname
</code></pre>

<p>Obtain a Ticket from the Server:</p>

<pre><code class="bash">$ kinit -p james
Password for james@LAN.RUANBEKKER.COM: 

$ klist
Ticket cache: FILE:/tmp/krb5cc_0
Default principal: james@LAN.RUANBEKKER.COM

Valid starting     Expires            Service principal
10/18/17 22:13:34  10/19/17 08:13:34  krbtgt/LAN.RUANBEKKER.COM@LAN.RUANBEKKER.COM
    renew until 10/19/17 22:13:30
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="http://csetutorials.com/setup-kerberos-ubuntu.html">http://csetutorials.com/setup-kerberos-ubuntu.html</a></li>
<li><a href="https://www.rootusers.com/how-to-configure-linux-to-authenticate-using-kerberos/">https://www.rootusers.com/how-to-configure-linux-to-authenticate-using-kerberos/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customize Ubuntu 16 Desktop With Arc Dark Theme]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/11/customize-ubuntu-16-desktop-with-arc-dark-theme/"/>
    <updated>2017-10-11T15:56:10-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/11/customize-ubuntu-16-desktop-with-arc-dark-theme</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/g1ryLn.jpg" alt="" /></p>

<p>So I was running ApricityOS for quite some time, which is a Arch Distibution. But a couple of hours before PyConZa I was trying to do a update and found that their repositories were reporting 404 errors, and turns out they have stopped their project :( . I quite liked ApricityOS, as it&rsquo;s what you will expect when installing Arch with the basic applications and the numix icon/theme pack.</p>

<p>So I decided to use Ubuntu for a change.</p>

<h2>Customizations:</h2>

<p>For the Operating System, I am Ubuntu 16:</p>

<ul>
<li><a href="https://www.ubuntu.com/download/desktop">Ubuntu 16.04 (Operating System)</a></li>
</ul>


<p>For my theme I am using Arc Dark:</p>

<ul>
<li><a href="https://github.com/horst3180/arc-theme">Arch Teme</a> - <a href="https://askubuntu.com/questions/265471/autoreconf-not-found-error-during-making-qemu-1-4-0/490839">autoconf dependency required</a></li>
</ul>


<p><img src="https://i.snag.gy/u5fP4w.jpg" alt="" /></p>

<p>Moka Icon pack for my Icons:</p>

<ul>
<li><a href="https://snwh.org/moka/download">Moka Icon Themes</a></li>
</ul>


<p><img src="https://i.snag.gy/3JPi9W.jpg?nocache=1507753731895" alt="" /></p>

<p>Terminator for my terminal of choice:</p>

<ul>
<li><a href="http://www.linuxandubuntu.com/home/10-best-linux-terminals-for-ubuntu-and-fedora">Terminator Terminal</a></li>
</ul>


<p><img src="https://i.snag.gy/xqgXMc.jpg" alt="" /></p>

<p>And my config:</p>

<p><code>bash ~/.config/terminator/config
[global_config]
  enabled_plugins = LaunchpadCodeURLHandler, APTURLHandler, LaunchpadBugURLHandler
  sticky = True
  window_state = maximise
[keybindings]
[layouts]
  [[default]]
    [[[child1]]]
      parent = window0
      profile = default
      type = Terminal
    [[[window0]]]
      parent = ""
      type = Window
  [[multi]]
    foreground_color = "#ffffff"
    palette = "#62b9d6:#cc0000:#4e9a06:#c4a000:#3465a4:#75507b:#06989a:#d3d7cf:#77c529:#ef2929:#8ae234:#fce94f:#729fcf:#ad7fa8:#34e2e2:#eeeeec"
    [[[child0]]]
      order = 0
      parent = ""
      position = 0:25
      size = 1366, 768
      type = Window
    [[[child1]]]
      order = 0
      parent = child0
      position = 632
      type = HPaned
    [[[child2]]]
      order = 0
      parent = child1
      position = 354
      type = VPaned
    [[[child5]]]
      order = 1
      parent = child1
      position = 354
      type = VPaned
    [[[terminal3]]]
      command = top; bash
      order = 0
      parent = child2
      profile = default
      type = Terminal
    [[[terminal4]]]
      command = uptime; bash
      order = 1
      parent = child2
      profile = default
      type = Terminal
    [[[terminal6]]]
      command = cd ~/workspace; bash
      order = 0
      parent = child5
      profile = default
      type = Terminal
    [[[terminal7]]]
      command = cd ~/workspace; bash
      order = 1
      parent = child5
      profile = default
      type = Terminal
  [[simples]]
    [[[child0]]]
      order = 0
      parent = ""
      position = 0:25
      size = 715, 694
      type = Window
    [[[child1]]]
      order = 0
      parent = child0
      position = 348
      type = VPaned
    [[[terminal2]]]
      command = cd ~/workspace; bash
      order = 0
      parent = child1
      profile = default
      type = Terminal
    [[[terminal3]]]
      command = cd ~/workspace; bash
      order = 1
      parent = child1
      profile = default
      type = Terminal
[plugins]
[profiles]
  [[default]]
    background_image = None
    icon_bell = False
    scrollback_infinite = True
</code></p>

<p>And to force color prompts:</p>

<p><code>bash ~/.bashrc
force_color_prompt=yes
</code></p>

<p>And my Wallpaper:</p>

<ul>
<li><a href="https://www.pixelstalk.net/wp-content/uploads/2016/03/Black-lamborghini-wallpaper-HD.jpg">Lamborghini Wallpaper</a></li>
</ul>


<h2>Other Preferred Applications:</h2>

<ul>
<li><a href="https://www.docker.com/docker-ubuntu">Docker</a> &lt;&ndash; Of course! :D</li>
<li><a href="https://linuxcontainers.org/lxd/getting-started-cli/">LXD</a></li>
<li><a href="https://www.dropbox.com/">Cloud Storage: Dropbox</a></li>
<li><a href="https://www.sublimetext.com/">Text Editor: Sublime Text</a></li>
<li><a href="https://boostnote.io/">Note Taking: Boostnote</a></li>
<li><a href="https://www.nylas.com/nylas-mail/">Mail Client: Nylas</a> and <a href="https://wiki.gnome.org/Apps/Geary">Geary</a></li>
<li><a href="https://www.jetbrains.com/pycharm/">Python IDE: PyCharm</a> (however, I prefer to use VIM :D )</li>
<li><p><a href="https://netbeans.org/">Java IDE: Netbeans</a></p></li>
<li><p>Sysadmin Tools: (htop, netstat, tcpdump, nmap, vnstat, mysql-client, mongo-client, curl, nload, etc)</p></li>
</ul>


<p>I will update this page as I&rsquo;m getting new apps or modifications</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending Mail With SSMTP on Alpine Linux]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/09/sending-mail-with-ssmtp-on-alpine-linux/"/>
    <updated>2017-10-09T16:36:35-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/09/sending-mail-with-ssmtp-on-alpine-linux</id>
    <content type="html"><![CDATA[<p>Quick Post on how to use ssmtp on Alpine Linux to Send Mail:</p>

<h2>Update and Install SSMTP</h2>

<pre><code class="bash">$ apk update
$ apk add ssmtp
</code></pre>

<h2>Configure SSMTP</h2>

<pre><code class="bash">$ cat &gt; /etc/ssmtp/ssmtp.conf &lt;&lt; EOF
root=postmaster
mailhub=mail.domain.com:25
hostname=`hostname`
FromLineOverride=YES
EOF
</code></pre>

<h2>Create the Mail Content</h2>

<pre><code class="bash">$ cat &gt; mail.txt &lt;&lt; EOF
To: recipient@domain.com
From: sender@domain.com
Subject: Mail with SSMTP

Hello, this is a test mail.
EOF
</code></pre>

<h2>Testing Mail Delivery</h2>

<pre><code class="bash">$ ssmtp recipient@domain.com &lt; file.txt
</code></pre>

<h2>Related:</h2>

<ul>
<li><a href="https://support.cloud.engineyard.com/hc/en-us/articles/205407478-Set-Up-SSMTP-for-Mail-Relay-to-AuthSMTP">Using Gmail as a Relay Host</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Program With C Language on Linux]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/24/simple-program-with-c-language-on-linux/"/>
    <updated>2017-09-24T06:41:58-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/24/simple-program-with-c-language-on-linux</id>
    <content type="html"><![CDATA[<p>Today the idea popped up on how to write a Simple &ldquo;Hello World&rdquo; Application using C Programming Language, as I just wanted to see how it works.</p>

<h2>Requirements:</h2>

<p>You will need the <code>gcc</code> package to compile the program:</p>

<pre><code class="bash RHEL">$ yum install gcc -y
</code></pre>

<pre><code class="bash Debian">$ apt install gcc -y
</code></pre>

<h2>Writing our first Program:</h2>

<p>We will create a app that just prints out a static defined value:</p>

<p>Create any file with a <code>.c</code> extension, in my case it will be <code>app.c</code>:</p>

<pre><code class="c app.c">#include &lt;stdio.h&gt;

int main(){
    printf("Hello, World\n");
    return 0;
}
</code></pre>

<p>Now compile <code>app.c</code> with <code>gcc</code> and specify the output path of your app with <code>-o &lt;app-name&gt;</code></p>

<pre><code>$ gcc -o app app.c
</code></pre>

<h2>Testing our App:</h2>

<p>You will see that there is a executable file with the name that you have specified as the output:</p>

<pre><code>$ ./app
Hello, World
</code></pre>

<p>Really basic, but quite cool.</p>
]]></content>
  </entry>
  
</feed>
