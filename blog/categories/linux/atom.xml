<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2021-03-10T01:19:14-05:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Wireguard VPN With Unbound ADS Blocking DNS]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/03/10/wireguard-vpn-with-unbound-ads-blocking-dns/"/>
    <updated>2021-03-10T00:59:51-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/03/10/wireguard-vpn-with-unbound-ads-blocking-dns</id>
    <content type="html"><![CDATA[<p>In this tutorial we will setup a Wireguard VPN with Unbound DNS Server with some additional configuration to block ads for any clients using the DNS Server while connected to the VPN.</p>

<p>A massive thank you to <a href="https://github.com/complexorganizations/wireguard-manager/blob/main/wireguard-server.sh">complexorganizations</a> for providing the source where this tuturial is based off.</p>

<h2>Install Packages</h2>

<p>I will be using Debian Buster for this installation:</p>

<pre><code>$ apt update
$ apt upgrade -y
$ apt update &amp;&amp; apt install iptables curl coreutils bc jq sed e2fsprogs -y
$ apt install linux-headers-"$(uname -r)" -y
</code></pre>

<p>I want to disable IPv6, in my case I had to apply a couple of kernel parameter tweaks:</p>

<pre><code>$ echo net.ipv6.conf.all.disable_ipv6 = 1 &gt; /etc/sysctl.d/70-disable-ipv6.conf
$ echo "net.ipv6.conf.$(ip -4 route ls | grep default | grep -Po '(?&lt;=dev )(\S+)' | head -1).disable_ipv6 = 1" &gt;&gt; /etc/sysctl.d/70-disable-ipv6.conf
$ echo 'net.ipv4.ip_forward = 1' &gt; /etc/sysctl.d/60-enable-ip-forwarding.conf
$ sysctl -p -f /etc/sysctl.d/70-disable-ipv6.conf
$ sysctl -p -f /etc/sysctl.d/60-enable-ip-forwarding.conf
</code></pre>

<h2>Environment Variables</h2>

<p>A couple of environment variables that we will reference during our installation, tweak where your setup differs:</p>

<pre><code>$ export NPROC=$(nproc)
$ export SERVER_HOST=$(curl -s -4 ifconfig.co)
$ export SERVER_PORT="51820"
$ export MTU_CHOICE="1280"
$ export NAT_CHOICE="25"
$ export IPV4_SUBNET="10.7.0.0/24"
$ export PRIVATE_SUBNET_V4=${IPV4_SUBNET}
$ export GATEWAY_ADDRESS_V4="${PRIVATE_SUBNET_V4::-4}1"
$ export PRIVATE_SUBNET_MASK_V4=$(echo "$PRIVATE_SUBNET_V4" | cut -d "/" -f 2)
$ export CLIENT_DNS="$GATEWAY_ADDRESS_V4"
$ export CLIENT_ALLOWED_IP="0.0.0.0/0"
</code></pre>

<h2>Unbound Installation</h2>

<p>Download the unbound <code>root.hints</code> file from internic:</p>

<pre><code>$ curl https://www.internic.net/domain/named.cache --create-dirs -o /etc/unbound/root.hints
</code></pre>

<p>Generate the <code>/etc/unbound/unbound.conf</code> config:</p>

<pre><code>$ echo "include: \"/etc/unbound/unbound.conf.d/*.conf\"
server:
    num-threads: $NPROC
    verbosity: 1
    root-hints: /etc/unbound/root.hints
    # auto-trust-anchor-file: /var/lib/unbound/root.key
    interface: 0.0.0.0
    interface: ::0
    max-udp-size: 3072
    access-control: 0.0.0.0/0                 refuse
    access-control: $PRIVATE_SUBNET_V4               allow
    access-control: 127.0.0.1                 allow
    private-address: $PRIVATE_SUBNET_V4
    hide-identity: yes
    hide-version: yes
    harden-glue: yes
    harden-dnssec-stripped: yes
    harden-referral-path: yes
    unwanted-reply-threshold: 10000000
    val-log-level: 1
    cache-min-ttl: 1800
    cache-max-ttl: 14400
    prefetch: yes
    qname-minimisation: yes
    prefetch-key: yes
    forward-zone:
        name: \".\"
        forward-addr: 1.1.1.1
        forward-addr: 8.8.8.8" &gt;&gt; /etc/unbound/unbound.conf
</code></pre>

<p>Download the host entries for all the ad servers which we will block:</p>

<pre><code>$ curl https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/social/hosts -o /tmp/adblocking_hosts
</code></pre>

<p>Include the ads configuration in <code>/etc/unbound/unbound.d/ads.conf</code>:</p>

<pre><code>$ echo "server:" &gt; /etc/unbound/unbound.conf.d/ads.conf
$ cat /etc/unbound/adblocking_hosts | grep '^0\.0\.0\.0' | awk '{print "    local-zone: \""$2"\" redirect\n    local-data: \""$2" A 0.0.0.0\""}' &gt;&gt; /etc/unbound/unbound.conf.d/ads.conf
</code></pre>

<p>Update the VPN Server&rsquo;s nameserver configuration to unbound:</p>

<pre><code>$ chattr -i /etc/resolv.conf
$ mv /etc/resolv.conf /etc/resolv.conf.old
$ echo "nameserver 127.0.0.1" &gt;&gt;/etc/resolv.conf
$ chattr +i /etc/resolv.conf
</code></pre>

<p>Enable and Restart Unbound:</p>

<pre><code>$ systemctl enable unbound
$ systemctl restart unbound
</code></pre>

<p>Test if DNS Resolution works:</p>

<pre><code>$ dig google.com
</code></pre>

<h2>Wireguard Installation</h2>

<p>Include the sources and install wireguard and its dependencies:</p>

<pre><code>$ echo "deb http://deb.debian.org/debian/ unstable main" &gt;&gt;/etc/apt/sources.list.d/unstable.list
$ echo -e "Package: *\nPin: release a=unstable\nPin-Priority: 90"  &gt;&gt;/etc/apt/preferences.d/limit-unstable
$ apt update
$ apt install wireguard qrencode haveged ifupdown -y
</code></pre>

<p>Set the environment variables and tweak where you need to:</p>

<pre><code>$ export SERVER_PRIVKEY=$(wg genkey)
$ export SERVER_PUBKEY=$(echo "$SERVER_PRIVKEY" | wg pubkey)
$ export CLIENT_NAME="ruan-pc"
$ export CLIENT_PRIVKEY=$(wg genkey)
$ export CLIENT_PUBKEY=$(echo "$CLIENT_PRIVKEY" | wg pubkey)
$ export CLIENT_ADDRESS_V4="${PRIVATE_SUBNET_V4::-4}3"
$ export PRESHARED_KEY=$(wg genpsk)
$ export WIREGUARD_PUB_NIC="wg0"
$ export PEER_PORT=$(shuf -i1024-65535 -n1)
$ export WG_CONFIG="/etc/wireguard/$WIREGUARD_PUB_NIC.conf"
</code></pre>

<p>Create the wireguard clients directory and create the config filename:</p>

<pre><code>$ mkdir -p /etc/wireguard/clients
$ touch $WG_CONFIG &amp;&amp; chmod 600 $WG_CONFIG
</code></pre>

<p>Create the wireguard server config content and write it to the config file:</p>

<pre><code>$ echo "# $PRIVATE_SUBNET_V4 $SERVER_HOST:$SERVER_PORT $SERVER_PUBKEY $CLIENT_DNS $MTU_CHOICE $NAT_CHOICE $CLIENT_ALLOWED_IP
[Interface]
Address = $GATEWAY_ADDRESS_V4/$PRIVATE_SUBNET_MASK_V4
ListenPort = $SERVER_PORT
PrivateKey = $SERVER_PRIVKEY
PostUp = iptables -A FORWARD -i $WIREGUARD_PUB_NIC -o $SERVER_PUB_NIC -j ACCEPT; iptables -t nat -A POSTROUTING -o $SERVER_PUB_NIC -j MASQUERADE; iptables -A INPUT -s $PRIVATE_SUBNET_V4 -p udp -m udp --dport 53 -m conntrack --ctstate NEW -j ACCEPT
PostDown = iptables -D FORWARD -i $WIREGUARD_PUB_NIC  -o $SERVER_PUB_NIC -j ACCEPT; iptables -t nat -D POSTROUTING -o $SERVER_PUB_NIC -j MASQUERADE; iptables -D INPUT -s $PRIVATE_SUBNET_V4 -p udp -m udp --dport 53 -m conntrack --ctstate NEW -j ACCEPT
SaveConfig = false
# $CLIENT_NAME start
[Peer]
PublicKey = $CLIENT_PUBKEY
PresharedKey = $PRESHARED_KEY
AllowedIPs = $CLIENT_ADDRESS_V4/32
# $CLIENT_NAME end &gt;&gt;" &gt;&gt; $WG_CONFIG
</code></pre>

<p>Create the client config:</p>

<pre><code>$ echo "# $CLIENT_NAME
[Interface]
Address = $CLIENT_ADDRESS_V4/$PRIVATE_SUBNET_MASK_V4
DNS = $CLIENT_DNS
ListenPort = $PEER_PORT
MTU = $MTU_CHOICE
PrivateKey = $CLIENT_PRIVKEY
[Peer]
AllowedIPs = $CLIENT_ALLOWED_IP
Endpoint = $SERVER_HOST:$SERVER_PORT
PersistentKeepalive = $NAT_CHOICE
PresharedKey = $PRESHARED_KEY
PublicKey = $SERVER_PUBKEY" &gt;&gt; /etc/wireguard/clients/"$CLIENT_NAME"-$WIREGUARD_PUB_NIC.conf
</code></pre>

<p>Restart and Enable Wireguard:</p>

<pre><code>$ systemctl enable wg-quick@$WIREGUARD_PUB_NIC
$ systemctl restart wg-quick@$WIREGUARD_PUB_NIC
</code></pre>

<h2>Connect your Client</h2>

<p>Head over to <a href="https://www.wireguard.com/install/">Wireguard.com</a> and install the client of your choice then generate a QR Code:</p>

<pre><code>$ qrencode -t ansiutf8 -l L &lt;/etc/wireguard/clients/"$CLIENT_NAME"-$WIREGUARD_PUB_NIC.conf
</code></pre>

<p>Configure your client and connect to the VPN, after the connection has been established you can have a look on the server for connection details with:</p>

<pre><code>$ wg show
</code></pre>

<p>Once connected head over to a website with ads, such as <a href="https://www.speedtest.net/">https://www.speedtest.net/</a> and you should see no ads.</p>

<h2>Thanks</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Harden Your SSH Security on Linux Servers]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/12/18/harden-your-ssh-security-on-linux-servers/"/>
    <updated>2020-12-18T13:32:18+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/12/18/harden-your-ssh-security-on-linux-servers</id>
    <content type="html"><![CDATA[<p>In this post we wil be focusing on increasing / hardening our security by adjusting our ssh configuration and applying some iptables firewall rules.</p>

<p>This will be the list of things that we will do:</p>

<pre><code>  - Change the SSH Port
  - Don't allow root to SSH
  - Disable password based authentication
  - Enable key based authentication and only for a singular user
  - Allow our user to sudo
  - Use iptables to block sources trying to DDoS your server
</code></pre>

<h2>Packages</h2>

<p>First let&rsquo;s install the packages that we need, I&rsquo;m using Debian so I will be using the <code>apt</code> package manager:</p>

<pre><code>$ apt update &amp;&amp; apt upgrade -y
$ apt install sudo -y
</code></pre>

<h2>Dedicated User</h2>

<p>Let&rsquo;s create our user james:</p>

<pre><code>$ useradd -m -s /bin/bash james
</code></pre>

<p>Allow our user to sudo without a password, by running <code>visudo</code> then append the following line:</p>

<pre><code>james ALL=(ALL:ALL) NOPASSWD: ALL
</code></pre>

<h2>SSH Authorized Keys</h2>

<p>If you don&rsquo;t already have a private SSH key, generate one on your client side:</p>

<pre><code>$ ssh-keygen -f ~/.ssh/james -t rsa -C "james" -q -N ""
</code></pre>

<p>Then copy the public key:</p>

<pre><code>$ cat ~/.ssh/james.pub | pbcopy
</code></pre>

<p>On your server create the SSH directories:</p>

<pre><code>$ mkdir /home/james/.ssh
</code></pre>

<p>Now paste your public key into <code>/home/james/.ssh/authorized_keys</code></p>

<p>Then change the ownership:</p>

<pre><code>$ chmod 700 /home/james/.ssh
$ chmod 644 /home/james/.ssh/authorized_keys
$ chown -R james:james /home/james
</code></pre>

<h2>SSH Config</h2>

<p>Backup your SSH config:</p>

<pre><code>$ cp /etc/ssh/sshd_config /etc/ssh_sshd_config.bak
</code></pre>

<p>We will be using the SSH port <code>2914</code>, replace your SSH config with the following and make your adjustments where you need to:</p>

<pre><code># /etc/ssh/sshd_config
Port 2914
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key
LoginGraceTime 1m
PermitRootLogin no
MaxAuthTries 3
MaxSessions 5
AuthenticationMethods publickey
PubkeyAuthentication yes
AuthorizedKeysFile      /home/james/.ssh/authorized_keys
PasswordAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no
UsePAM yes
AllowUsers james
DenyUsers root
X11Forwarding yes
PrintMotd no
UseDNS no
PidFile /var/run/sshd.pid
AcceptEnv LANG LC_*
Subsystem       sftp    /usr/lib/openssh/sftp-server
</code></pre>

<p>Then save the file and restart SSH:</p>

<pre><code>$ systemctl restart sshd
</code></pre>

<p>While you are still connected to the shell session, open up a new terminal and try to connect with your new user and private SSH key to ensure that you can connect to your server.</p>

<h2>Iptables</h2>

<p>We want to drop incoming connections which make more than 10 connection attempts to SSH within 60 seconds.</p>

<p>The tokens get refilled into buckets at 3 per minute and maximum of 3 tokens that can be filled into the bucket.</p>

<p>Let&rsquo;s create our script:</p>

<pre><code>$ mkdir -p /opt/scripts
$ touch /opt/scripts/fw.sh
</code></pre>

<p>In our script we will place the following content:</p>

<pre><code>#!/usr/bin/env bash
INTERFACE=eth0 # check ifconfig to determine the correct interface
SSH_PORT=2914
CONNECTION_ATTEMPTS=10
CONNECTION_TIME=60
#WHITELIST_IP=x.x.x.x/32 # replace ip and uncomment if you want to whitelist a ip
#iptables -I INPUT -s ${WHITELIST_IP} -p tcp --dport ${SSH_PORT} -i ${INTERFACE} -j ACCEPT # uncomment if you want to use whitelisting
iptables -A INPUT -p tcp --dport ${SSH_PORT} -i ${INTERFACE} -m state --state NEW -m recent  --set
iptables -A INPUT -p tcp --dport ${SSH_PORT} -i ${INTERFACE} -m state --state NEW -m recent  --update --seconds ${CONNECTION_TIME} --hitcount ${CONNECTION_ATTEMPTS} -j DROP
iptables -A INPUT  -i ${INTERFACE} -p tcp --dport ${SSH_PORT} -m state --state NEW -m limit --limit 3/min --limit-burst 3 -j ACCEPT
iptables -A INPUT  -i ${INTERFACE} -p tcp --dport ${SSH_PORT} -m state --state ESTABLISHED -j ACCEPT
iptables -A OUTPUT -o ${INTERFACE} -p tcp --sport ${SSH_PORT} -m state --state ESTABLISHED -j ACCEPT
</code></pre>

<p>Now we want to execute this script whenever the server boots, open up <code>/etc/rc.local</code> and append the following line, so that the file looks more or less like:</p>

<pre><code>#!/bin/bash
/opt/scripts/fw.sh
exit 0
</code></pre>

<p>Ensure both files are executable:</p>

<pre><code>$ chmod +x /opt/scripts/fw.sh
$ chmod +x /etc/rc.local
</code></pre>

<p>When you are sure everything is in place, reboot:</p>

<pre><code>$ reboot
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Set a Static IP in Ubuntu 18]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/04/27/how-to-set-a-static-ip-in-ubuntu-18/"/>
    <updated>2020-04-27T13:39:19+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/04/27/how-to-set-a-static-ip-in-ubuntu-18</id>
    <content type="html"><![CDATA[<p>This is a short post on how to set a <strong>static ip address</strong> on <strong>ubuntu 18.04</strong> using <strong>netplan</strong></p>

<h2>Netplan</h2>

<p>At the moment my network interfaces uses dhcp, and we can see that below:</p>

<pre><code>$ cat /etc/netplan/50-cloud-init.yaml
network:
    version: 2
    ethernets:
        eth0:
            dhcp4: true
</code></pre>

<p>Changing the configuration to static:</p>

<pre><code>$ cat /etc/netplan/50-cloud-init.yaml
network:
    version: 2
    ethernets:
        eth0:
            dhcp4: false
            addresses: [10.37.117.37/24]
            gateway4: 10.37.117.1
            nameservers:
                addresses: [127.0.0.53,8.8.8.8]
</code></pre>

<p>After changing the configuration, you need to apply your changes:</p>

<pre><code>$ netplan apply
</code></pre>

<h2>Thank You</h2>

<p>Thank you for reading my short post on how to change a static ip address on ubuntu 18.04 using netplan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a WireGuard VPN Server on Linux]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/01/11/setup-a-wireguard-vpn-server-on-linux/"/>
    <updated>2020-01-11T23:37:03+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/01/11/setup-a-wireguard-vpn-server-on-linux</id>
    <content type="html"><![CDATA[<h2>Installation</h2>

<p>I will be installing my wireguard vpn server on a ubuntu 18 server, for other distributions you can have a look at their <a href="https://www.wireguard.com/install/">docs</a></p>

<pre><code>$ sudo add-apt-repository ppa:wireguard/wireguard
$ sudo apt update
$ sudo apt install wireguard -y
</code></pre>

<h2>Configuration</h2>

<p>On the Server, create they keys directory where we will save our keys:</p>

<pre><code>$ mkdir -p /etc/wireguard/keys
</code></pre>

<p>Create the private and public key:</p>

<pre><code>$ wg genkey | tee privatekey | wg pubkey &gt; publickey
</code></pre>

<p>Generate the pre-shared key:</p>

<pre><code>$ wg genpsk &gt; client.psk
</code></pre>

<p>On the client, create the keys directory:</p>

<pre><code>$ mkdir -p ~/wireguard/keys
</code></pre>

<p>Create the private and public keys:</p>

<pre><code>$ cd ~/wireguard/keys
$ wg genkey | tee privatekey | wg pubkey &gt; publickey
</code></pre>

<p>Populate the server config:</p>

<pre><code>$ cat /etc/wireguard/wg0.conf
[Interface]
PrivateKey = &lt;output-of-client.privatekey&gt;
Address = 192.168.199.1/32
ListenPort = 8999
PostUp = sysctl -w net.ipv4.ip_forward=1; iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o ens3 -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o ens3 -j MASQUERADE

[Peer]
PublicKey = &lt;output-of-server.publickey&gt;
PresharedKey = &lt;output-of-client.psk&gt;
AllowedIPs = 192.168.199.2/32
</code></pre>

<p>Populate the client config:</p>

<pre><code>$ cat ~/wireguard/wg0.conf
[Interface]
PrivateKey = &lt;output-of-client.privatekey&gt;
Address = 192.168.199.2/24
DNS = 1.1.1.1

[Peer]
PublicKey = &lt;output-of-server.publickey&gt;
PresharedKey = &lt;output-of-client.psk&gt;
Endpoint = &lt;server-public-ip&gt;:8999
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 25
</code></pre>

<h2>Start the Server</h2>

<p>On the server, enable and start the service:</p>

<pre><code>$ systemctl enable wg-quick@wg0.service
$ wg-quick up wg0
</code></pre>

<p>On the client, connect the VPN:</p>

<pre><code>$ wg-quick up ~/wireguard/wg0.conf
</code></pre>

<p>Verify the status:</p>

<pre><code>$ wg show
interface: wg0
  public key: +Giwk8Y5KS5wx9mw0nEIdQODI+DsR+3TcbMxjJqfZys=
  private key: (hidden)
  listening port: 8999

peer: Q8LGMj6CeCYQJp+sTu74mLMRoPFAprV8PsnS0cu9fDI=
  preshared key: (hidden)
  endpoint: 102.132.208.80:57800
  allowed ips: 192.168.199.2/32
  latest handshake: 22 seconds ago
  transfer: 292.00 KiB received, 322.15 KiB sent
</code></pre>

<p>Check if you can ping the private ip address of the VPN:</p>

<pre><code>$ ping 192.168.199.2
PING 192.168.199.2 (192.168.199.2): 56 data bytes
64 bytes from 192.168.199.2: icmp_seq=0 ttl=63 time=304.844 ms
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Background Processes With Screen]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/01/02/managing-background-processes-with-screen/"/>
    <updated>2020-01-02T10:42:54+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/01/02/managing-background-processes-with-screen</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/71659085-e6bbfc80-2d4e-11ea-9264-5ce0c848f9f3.png" alt="image" /></p>

<p>This is a quick post on how to create, manage and delete background processes with screen</p>

<h2>About</h2>

<p>Screen allows you to run processes in a different session, so when you exit your terminal the process will still be running.</p>

<h2>Install</h2>

<p>Install screen on the operating system of choice, for debian based systems it will be:</p>

<pre><code class="bash">$ sudo apt install screen -y
</code></pre>

<h2>Working with Screen</h2>

<p>To create a screen session, you can just run <code>screen</code> or you can provide an argument to provide a name:</p>

<pre><code>$ screen -S my-screen-session
</code></pre>

<p>Now you will be dropped into a screen session, run a ping:</p>

<pre><code>$ ping 8.8.8.8
</code></pre>

<p>Now to allow the ping process to run in the background, send the commands to detach the screen session:</p>

<pre><code>Ctrl + a, then press d
</code></pre>

<p>To view the screen session:</p>

<pre><code>$ screen -ls
There is a screen on:
    45916.my-screen-session (Detached)
1 Socket in /var/folders/jr/dld7mjhn0sx6881xs_0s7rtc0000gn/T/.screen.
</code></pre>

<p>To resume the screen session, pass the screen id or screen name as a argument:</p>

<pre><code>$ screen -r my-screen-session
64 bytes from 8.8.8.8: icmp_seq=297 ttl=55 time=7.845 ms
64 bytes from 8.8.8.8: icmp_seq=298 ttl=55 time=6.339 ms
</code></pre>

<h2>Scripting</h2>

<p>To use a one liner to send a process as a detached screen session for scripting as an example, you can do that like this:</p>

<pre><code>$ screen -S ping-process -m -d sh -c "ping 8.8.8.8"
</code></pre>

<p>Listing the screen session:</p>

<pre><code>$ screen -ls
There is a screen on:
    46051.ping-process  (Detached)
</code></pre>

<p>Terminating the screen session:</p>

<pre><code>$ screen -S ping-process -X quit
</code></pre>

<h2>Thank You</h2>

<p>Let me know what you think. If you liked my content, feel free to visit me at <strong><a href="https://ruan.dev/">ruan.dev</a></strong> or follow me on twitter at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>

<p><a href="https://twitter.com/ruanbekker"><img src="https://user-images.githubusercontent.com/567298/71188576-e2410f80-2289-11ea-8667-08f0c14ab7b5.png" alt="" /></a></p>

<p><a href="https://ko-fi.com/A6423ZIQ"><img src="https://www.ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi" /></a></p>
]]></content>
  </entry>
  
</feed>
