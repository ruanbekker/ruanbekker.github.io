<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Metrics | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/metrics/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2019-05-17T12:40:26-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install Grafana to Visualize Your Metrics From Datasources Such as Prometheus on Linux]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/17/install-grafana-to-visualize-your-metrics-from-datasources-such-as-prometheus-on-linux/"/>
    <updated>2019-05-17T12:08:02-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/17/install-grafana-to-visualize-your-metrics-from-datasources-such-as-prometheus-on-linux</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57941411-2a045080-78cf-11e9-97f9-47fb8b75a722.png" alt="image" /></p>

<p>Grafana is a Open Source Dashboarding service that allows you to monitor, analyze and graph metrics from datasources such as prometheus, influxdb, elasticsearch, aws cloudwatch, and many more.</p>

<p>Not only is grafana amazing, its super pretty!</p>

<p>Example of how a dashboard might look like:</p>

<p><img width="1279" alt="E24B39B1-23C8-44C5-959D-6E6275F8FE99" src="https://user-images.githubusercontent.com/567298/57942872-d98ef200-78d2-11e9-9370-b130bcc222f7.png"></p>

<h2>What are we doing today</h2>

<p>In this tutorial we will setup grafana on linux. If you have not set up <a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">prometheus</a>, follow <a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">this blogpost</a> to install prometheus.</p>

<h2>Install Grafana</h2>

<p>I will be demonstrating how to install grafana on debian, if you have another operating system, head over to <a href="https://grafana.com/docs/installation/">grafana documentation</a> for other supported operating systems.</p>

<p>Get the gpg key:</p>

<pre><code>$ curl https://packages.grafana.com/gpg.key | sudo apt-key add -
</code></pre>

<p>Import the public keys:</p>

<pre><code>$ apt-key adv --keyserver keyserver.ubuntu.com --recv-keys  8C8C34C524098CB6 
</code></pre>

<p>Add the latest stable packages to your repository:</p>

<pre><code>$ add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"
</code></pre>

<p>Install a pre-requirement package:</p>

<pre><code>$ apt install apt-transport-https -y
</code></pre>

<p>Update the repository index and install grafana:</p>

<pre><code>$ apt update &amp;&amp; sudo apt install grafana -y
</code></pre>

<p>Once grafana is installed, start the service:</p>

<pre><code>$ service grafana-server start
</code></pre>

<p>Then enable the service on boot:</p>

<pre><code>$ update-rc.d grafana-server defaults
</code></pre>

<p>If you want to control the service via systemd:</p>

<pre><code>$ systemctl daemon-reload
$ systemctl start grafana-server
$ systemctl status grafana-server
</code></pre>

<h2>Optional: Nginx Reverse Proxy</h2>

<p>If you want to front your grafana instance with a nginx reverse proxy:</p>

<pre><code>$ cat /etc/nginx/sites-enabled/grafana
server {
    listen 80;
    server_name grafana.domain.com;

    location / {
        proxy_pass http://127.0.0.1:3000/;
        proxy_redirect http://127.0.0.1:3000/ /;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
    }
</code></pre>

<p>Then restart nginx:</p>

<pre><code>$ systemctl restart nginx
</code></pre>

<h2>Access Grafana</h2>

<p>If you are accessing grafana directly, access grafana on <code>http://your-grafana-ip:3000/</code> and your username is <code>admin</code> and password <code>admin</code></p>

<h2>Dashboarding Tutorials</h2>

<p>Have a look at this screencast where the guys from grafana show you how to build dashboards:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/sKNZMtoSHN4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<p>Also have a look at their <a href="https://grafana.com/dashboards">public repository of dashboards</a></p>

<p>For more tutorials on prometheus and metrics have a look at <strong><a href="https://blog.ruanbekker.com/blog/categories/prometheus/">#metrics</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Pushgateway to Expose Metrics to Prometheus]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/17/install-pushgateway-to-expose-metrics-to-prometheus/"/>
    <updated>2019-05-17T07:04:03-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/17/install-pushgateway-to-expose-metrics-to-prometheus</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57307750-696bb980-70e5-11e9-9b0b-73ad88bde6a3.png" alt="" /></p>

<p>In most cases when we want to scrape a node for metrics, we will install node-exporter on a host and configure prometheus to scrape the configured node to consume metric data. But in certain cases we want to push custom metrics to prometheus. In such cases, we can make use of pushgateway.</p>

<p>Pushgateway allows you to push custom metrics to push gateway&rsquo;s endpoint, then we configure prometheus to scrape push gateway to consume the exposed metrics into prometheus.</p>

<h2>Pre-Requirements</h2>

<p>If you have not set up <a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">Prometheus</a>, head over to <strong><a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">this blogpost</a></strong> to set up prometheus on Linux.</p>

<h2>What we will do?</h2>

<p>In this tutorial, we will setup pushgateway on linux and after pushgateway has been setup, we will push some custom metrics to pushgateway and configure prometheus to scrape metrics from pushgateway.</p>

<h2>Install Pushgateway</h2>

<p>Get the latest version of <a href="https://prometheus.io/download/">pushgateway</a> from prometheus.io, then download and extract:</p>

<pre><code>$ wget https://github.com/prometheus/pushgateway/releases/download/v0.8.0/pushgateway-0.8.0.linux-amd64.tar.gz
$ tar -xvf pushgateway-0.8.0.linux-amd64.tar.gz
</code></pre>

<p>Create the <code>pushgateway</code> user:</p>

<pre><code>$ useradd --no-create-home --shell /bin/false pushgateway
</code></pre>

<p>Move the binary in place and update the permissions to the user that we created:</p>

<pre><code>$ cp pushgateway-0.8.0.linux-amd64/pushgateway /usr/local/bin/pushgateway
$ chown pushgateway:pushgateway /usr/local/bin/pushgateway
</code></pre>

<p>Create the systemd unit file:</p>

<pre><code>$ cat &gt; /etc/systemd/system/pushgateway.service &lt;&lt; EOF
[Unit]
Description=Pushgateway
Wants=network-online.target
After=network-online.target

[Service]
User=pushgateway
Group=pushgateway
Type=simple
ExecStart=/usr/local/bin/pushgateway \
    --web.listen-address=":9091" \
    --web.telemetry-path="/metrics" \
    --persistence.file="/tmp/metric.store" \
    --persistence.interval=5m \
    --log.level="info" \
    --log.format="logger:stdout?json=true"

[Install]
WantedBy=multi-user.target
EOF
</code></pre>

<p>Reload systemd and restart the pushgateway service:</p>

<pre><code>$ systemctl daemon-reload
$ systemctl restart pushgateway
</code></pre>

<p>Ensure that pushgateway has been started:</p>

<pre><code>$ systemctl status pushgateway
  pushgateway.service - Pushgateway
   Loaded: loaded (/etc/systemd/system/pushgateway.service; disabled; vendor preset: enabled)
   Active: active (running) since Tue 2019-05-07 09:05:57 UTC; 2min 33s ago
 Main PID: 6974 (pushgateway)
    Tasks: 6 (limit: 4704)
   CGroup: /system.slice/pushgateway.service
           └─6974 /usr/local/bin/pushgateway --web.listen-address=:9091 --web.telemetry-path=/metrics --persistence.file=/tmp/metric.store --persistence.interval=5m --log.level=info --log.format=logger:st

May 07 09:05:57 ip-172-31-41-126 systemd[1]: Started Pushgateway.
</code></pre>

<h2>Configure Prometheus</h2>

<p>Now we want to configure prometheus to scrape pushgateway for metrics, then the scraped metrics will be injected into prometheus&rsquo;s time series database:</p>

<p>At the moment, I have prometheus, node-exporter and pushgateway on the same node so I will provide my complete prometheus configuration, If you are just looking for the pushgateway config, it will be the last line:</p>

<pre><code>$ cat /etc/prometheus/prometheus.yml
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'prometheus'
    scrape_interval: 5s
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'node_exporter'
    scrape_interval: 5s
    static_configs:
      - targets: ['localhost:9100']

  - job_name: 'pushgateway'
    honor_labels: true
    static_configs:
      - targets: ['localhost:9091']
</code></pre>

<p>Restart prometheus:</p>

<pre><code>$ systemctl restart prometheus
</code></pre>

<h2>Push metrics to pushgateway</h2>

<p>First we will look at a bash example to push metrics to pushgateway:</p>

<pre><code>$ echo "cpu_utilization 20.25" | curl --data-binary @- http://localhost:9091/metrics/job/my_custom_metrics/instance/10.20.0.1:9000/provider/hetzner
</code></pre>

<p>Have a look at pushgateway&rsquo;s metrics endpoint:</p>

<pre><code>$ curl -L http://localhost:9091/metrics/
# TYPE cpu_utilization untyped
cpu_utlization{instance="10.20.0.1:9000",job="my_custom_metrics",provider="hetzner"} 20.25
</code></pre>

<p>Let&rsquo;s look at a python example on how we can push metrics to pushgateway:</p>

<pre><code class="python">import requests

job_name='my_custom_metrics'
instance_name='10.20.0.1:9000'
provider='hetzner'
payload_key='cpu_utilization'
payload_value='21.90'

response = requests.post('http://localhost:9091/metrics/job/{j}/instance/{i}/team/{t}'.format(j=job_name, i=instance_name, t=team_name), data='{k} {v}\n'.format(k=payload_key, v=payload_value))
print(response.status_code)
</code></pre>

<p>With this method, you can push any custom metrics (bash, lambda function, etc) to pushgateway and allow prometheus to consume that data into it&rsquo;s time series database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Snippet: Create Custom CloudWatch Metrics With Python]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/03/28/snippet-create-custom-cloudwatch-metrics-with-python/"/>
    <updated>2019-03-28T08:05:28-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/03/28/snippet-create-custom-cloudwatch-metrics-with-python</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/53865781-a984c200-3ff8-11e9-9ffa-ccad62ac08f6.png" alt="" /></p>

<p>A quick post on how create custom CloudWatch Metrics using Python on AWS.</p>

<p>After you produced the metrics into CloudWatch, you will be able to see them when navigating to:</p>

<ul>
<li>CloudWatch / Metrics / Custom Namespaces / statusdash/ec2client</li>
</ul>


<p>When selecting:</p>

<pre><code>Select Metric: SomeKey1, SomeKey2
Select MetricName HttpResponseTime
</code></pre>

<p>And should look like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/53865426-d4224b00-3ff7-11e9-8bd5-bd04dfdd9f43.png" alt="" /></p>

<h2>The Script:</h2>

<p>The python script that will be using boto3 to talk to AWS:</p>

<pre><code class="python">import boto3
import random
cloudwatch = boto3.Session(region_name='eu-west-1').client('cloudwatch')
response = cloudwatch.put_metric_data(
MetricData = [
    {
        'MetricName': 'HttpResponseTime',
        'Dimensions': [
            {
                'Name': 'Server',
                'Value': 'app.example.com'
            },
            {
                'Name': 'Client',
                'Value': 'Client-ABC'
            },
        ],
        'Unit': 'Milliseconds',
        'Value': random.randint(20, 50)
    },
],
Namespace = 'statusdash/ec2client'
)
print response
</code></pre>

<h2>Resources:</h2>

<p><a href="https://stackify.com/custom-metrics-aws-lambda/">https://stackify.com/custom-metrics-aws-lambda/</a>
<a href="https://www.syntouch.nl/custom-cloudwatch-metrics-in-python-yes-we-can/">https://www.syntouch.nl/custom-cloudwatch-metrics-in-python-yes-we-can/</a> &lt;- psutil
<a href="https://aws.amazon.com/blogs/devops/new-how-to-better-monitor-your-custom-application-metrics-using-amazon-cloudwatch-agent/">https://aws.amazon.com/blogs/devops/new-how-to-better-monitor-your-custom-application-metrics-using-amazon-cloudwatch-agent/</a>
<a href="https://medium.com/@mrdoro/aws-lambda-as-the-website-monitoring-tool-184b09202ae2">https://medium.com/@mrdoro/aws-lambda-as-the-website-monitoring-tool-184b09202ae2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Application Performance Metrics on Python Flask With Elastic APM on Kibana and Elasticsearch]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/11/11/get-application-performance-metrics-on-python-flask-with-elastic-apm-on-kibana-and-elasticsearch/"/>
    <updated>2018-11-11T13:09:18-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/11/11/get-application-performance-metrics-on-python-flask-with-elastic-apm-on-kibana-and-elasticsearch</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-banner.png" alt="" /></p>

<p>In this post we will setup a Python Flask Application which includes the APM Agent which will collect metrics, that gets pushed to the APM Server. If you have not setup the Elastic Stack with / or APM Server, you <a href="https://blog.ruanbekker.com/blog/2018/11/11/setup-apm-server-on-ubuntu-for-your-elastic-stack-to-get-insights-in-your-application-performance-metrics/">can follow this post</a> to setup the needed.</p>

<p>Then we will make a bunch of HTTP Requests to our Application and will go through the metrics per request type.</p>

<h2>Application Metrics</h2>

<p>Our Application will have the following Request Paths:</p>

<ul>
<li><code>/</code> - Returns static text</li>
<li><code>/delay</code> - random delays to simulate increased response latencies</li>
<li><code>/upstream</code> - get data from a upstream provider, if statements to provide dummy 200, 404 and 502 reponses to visualize</li>
<li><code>/5xx</code> - request path that will raise an exception so that we can see the error via apm</li>
<li><code>/sql-write</code> - inserts 5 rows into a sqlite database</li>
<li><code>/sql-read</code> - executes a select all from the database</li>
<li><code>/sql-group</code> - sql query to group all the cities and count them</li>
</ul>


<p>This is just simple request paths to demonstrate the metrics via APM (Application Performance Monitoring) on Kibana.</p>

<h2>Install Flask and APM Agent</h2>

<p>Create a virtual environment and install the dependencies:</p>

<pre><code class="bash">$ apt install python python-setuptools -y
$ easy_install pip
$ pip install virtualenv
$ pip install elastic-apm[flask]
$ pip install flask
</code></pre>

<p>For more info on <a href="https://www.elastic.co/guide/en/apm/agent/python/current/getting-started.html">APM Configuration</a>.</p>

<h2>Instrument a Bare Bones Python Flask app with APM:</h2>

<p>A Barebones app with APM Configured will look like this:</p>

<pre><code class="python">from flask import Flask, jsonify
from elasticapm.contrib.flask import ElasticAPM
from elasticapm.handlers.logging import LoggingHandler

app = Flask(__name__)
apm = ElasticAPM(app, server_url='http://localhost:8200', service_name='flask-app-1', logging=True)

@app.route('/')
def index():
    return jsonify({"message": "response ok"}), 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80)
</code></pre>

<p>This will provide metrics on the <code>/</code> request path. In order to trace transaction ids from the metrics, we need to configure the index on Kibana. To do this, head over to Kibana, Management, Index Patterns, Add Index Pattern, <code>apm*</code>, select <code>@timestamp</code> as the time filter field name.</p>

<p>This will allow you to see the data when tracing the transaction id&rsquo;s via the Discover UI.</p>

<h2>Create the Python Flask App</h2>

<p>Create the Flask App with the request paths as mentioned in the beginning:</p>

<pre><code class="python">import sqlite3, requests, time, logging, random
from flask import Flask, jsonify
from elasticapm.contrib.flask import ElasticAPM
from elasticapm.handlers.logging import LoggingHandler

names = ['ruan', 'stefan', 'philip', 'norman', 'frank', 'pete', 'johnny', 'peter', 'adam']
cities = ['cape town', 'johannesburg', 'pretoria', 'dublin', 'kroonstad', 'bloemfontein', 'port elizabeth', 'auckland', 'sydney']
lastnames = ['smith', 'bekker', 'admams', 'phillips', 'james', 'adamson']

conn = sqlite3.connect('database.db')
conn.execute('CREATE TABLE IF NOT EXISTS people (name STRING, age INTEGER, surname STRING, city STRING)')
#sqlquery_write = conn.execute('INSERT INTO people VALUES("{}", "{}", "{}", "{}")'.format(random.choice(names), random.randint(18,40), random.choice(lastnames), random.choice(cities)))
seconds = [0.002, 0.003, 0.004, 0.01, 0.3, 0.2, 0.009, 0.015, 0.02, 0.225, 0.009, 0.001, 0.25, 0.030, 0.018]

app = Flask(__name__)
apm = ElasticAPM(app, server_url='http://localhost:8200', service_name='my-app-01', logging=False)

@app.route('/')
def index():
    return jsonify({"message": "response ok"})

@app.route('/delay')
def delay():
    time.sleep(random.choice(seconds))
    return jsonify({"message": "response delay"})

@app.route('/upstream')
def upstream():
    r = requests.get('https://api.ruanbekker.com/people').json()
    r.get('country')
    if r.get('country') == 'italy':
        return 'Italalia!', 200
    elif r.get('country') == 'canada':
        return 'Canada!', 502
    else:
        return 'Not Found', 404

@app.route('/5xx')
def fail_with_5xx():
    value = 'a' + 1
    return jsonify({"message": value})

@app.route('/sql-write')
def sqlw():
    conn = sqlite3.connect('database.db')
    conn.execute('INSERT INTO people VALUES("{}", "{}", "{}", "{}")'.format(random.choice(names), random.randint(18,40), random.choice(lastnames), random.choice(cities)))
    conn.execute('INSERT INTO people VALUES("{}", "{}", "{}", "{}")'.format(random.choice(names), random.randint(18,40), random.choice(lastnames), random.choice(cities)))
    conn.execute('INSERT INTO people VALUES("{}", "{}", "{}", "{}")'.format(random.choice(names), random.randint(18,40), random.choice(lastnames), random.choice(cities)))
    conn.execute('INSERT INTO people VALUES("{}", "{}", "{}", "{}")'.format(random.choice(names), random.randint(18,40), random.choice(lastnames), random.choice(cities)))
    conn.execute('INSERT INTO people VALUES("{}", "{}", "{}", "{}")'.format(random.choice(names), random.randint(18,40), random.choice(lastnames), random.choice(cities)))
    conn.commit()
    conn.close()
    return 'ok', 200

@app.route('/sql-read')
def sqlr():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    cur.execute('select * from people')
    rows = cur.fetchall()
    conn.close()
    return 'ok', 200

@app.route('/sql-group')
def slqg():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    cur.execute('select count(*) as num, city from people group by city')
    rows = cur.fetchall()
    conn.close()
    return 'ok', 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80)
</code></pre>

<p>Run the app:</p>

<pre><code class="bash">$ python app.py
</code></pre>

<p>At this point, we wont have any data on APM as we need to make requests to our application. Let&rsquo;s make 10 HTTP GET Requests on the <code>/</code> Request Path:</p>

<pre><code class="bash">$ count=0 &amp;&amp; while [ $count -lt 10 ]; do curl http://application-routable-address:80/; sleep 1; count=$((count+1)); done
</code></pre>

<h2>Visualize the Root Request Path</h2>

<p>Head over to Kibana, Select APM and you will see something similar like below when selecting the timepicker to 15 minutes at the right top corner. This page will give you the overview of all your configured applications and the average response times over the selected time, transactions per minute, errors per minute etc:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-home-root.png" alt="" /></p>

<p>When you select your application, you will find the graphs on you response times and requests per minute, also a breakdown per request path:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-app-view-1.png" alt="" /></p>

<p>When selecting the request path, in this case <code>GET /</code>, you will find a breakdown of metrics only for that request and also the response time distribution for that request path, if you select frame from the response time distribution, it will filter the focus to that specific transaction.</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-req-view-1.png" alt="" /></p>

<p>When you scroll a bit down to the Transaction Sample section, you will find data about the request, response, system etc:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-app-transaction-1.png" alt="" /></p>

<p>From the Transaction Sample, you can select the View Transaction in Discover button, which will trace that transaction id on the Discover UI:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-transaction-disc-1.png" alt="" /></p>

<p>Increasing the http curl clients running simultaneously from different servers and increasing the time for 15 minutes to have more metrics will result in the screenshot below, notice the 6ms response time can easily be traced selecting it in the response time distribution, then discovering it in the UI, which will give you the raw data from that request:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-req-view-2.png" alt="" /></p>

<h2>Viewing Application Errors in APM</h2>

<p>Make a couple of requests to <code>/5xx</code>:</p>

<pre><code class="bash">$ curl http://application-routable-endpoint:80/5xx
</code></pre>

<p>Navigate to the app, select Errors, then you will see the exception details that was returned. Here we can see that in our code we tried to concatenate integers with strings:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-error-1.png" alt="" /></p>

<p>Furthermore we can select that error and it will provide us a direct view on where in our code the error gets generated:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-error-details-1.png" alt="" /></p>

<p>Pretty cool right?! You can also further select the library frames, which will take you to the lower level code that raised the exception. If this errors can be drilled down via the discover ui, to group by source address etc.</p>

<h2>Simulate Response Latencies:</h2>

<p>Make a couple of requests to the <code>/delay</code> request path, and you should see the increased response times from earlier:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-app-view-delay.png" alt="" /></p>

<h2>Requests where Database Calls are Executed</h2>

<p>The while loop to call random request paths:</p>

<pre><code class="bash">count=0 &amp;&amp; while [ $count -lt 1000 ]; 
do 
  curl -H "Host: my-za-server" -i http://x.x.x.x/sql-write; 
  curl -H "Host: my-za-server" -i http://x.x.x.x/sql-read; 
  curl -H "Host: my-za-server" -i http://x.x.x.x/sql-group; 
  curl -H "Host: my-eu-server" -i http://x.x.x.x/sql-write; 
  curl -H "Host: my-us-server" -i http://x.x.x.x/sql-write; 
  curl -H "Host: my-za-server" -i http://x.x.x.x/sql-write; 
  curl -H "Host: my-za-server" -i http://x.x.x.x/sql-write; 
  curl -H "Host: my-za-server" -i http://x.x.x.x/sql-read; 
  curl -H "Host: my-eu-server" -i http://x.x.x.x/sql-group; 
  curl -H "Host: my-us-server" -i http://x.x.x.x/sql-group; 
  curl -H "Host: my-za-server" -i http://x.x.x.x/sql-write; 
  curl -H "Host: my-za-server" -i http://x.x.x.x/sql-write; 
  curl -H "Host: my-eu-server" -i http://x.x.x.x/sql-group; 
  curl -H "Host: my-za-server" -i http://x.x.x.x/sql-group; 
  count=$((count+1)); 
done
</code></pre>

<p>When we look at our applications performance monitoring overview, we can see the writes provide more latencies as the group by&rsquo;s:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-view-1.png" alt="" /></p>

<p>The <code>/sql-write</code> request overview:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlwrite-1.png" alt="" /></p>

<p>When selecting a transaction sample, we can see the timeline of each database call:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlwrite-1-details.png" alt="" /></p>

<p>When looking at the <code>/sql-group</code> request overview, we can see that the response times increasing overtime, as more data is written to the database, it takes longer to read and group all the data from the database:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlgroup-1.png" alt="" /></p>

<p>The transaction details shows the timeline of the database query from that request:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlgroup-1-details.png" alt="" /></p>

<p>When you select the database select query on the timeline view, it will take you to the exact database query that was executed:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlgroup-1-span.png" alt="" /></p>

<p>When we include a database call with a external request to a remote http endpoint, we will see something like:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-db-sqlread-ext.png" alt="" /></p>

<h2>Viewing 4xx and 5xx Response Codes</h2>

<p>From the application code we are returning 2xx, 4xx, and 5xx response codes for this demonstration to visualize them:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-app-response-codes.png" alt="" /></p>

<h2>Configuring more Applications</h2>

<p>Once more apps are configured, and they start serving traffic, they will start appearing on the APM UI as below:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-apps.png" alt="" /></p>

<p>APM is available for other languages as well and provides a getting started snippets from the APM UI. For more information on APM, have a look at their <a href="https://www.elastic.co/solutions/apm">Documentation</a></p>

<p>Hope this was useful.</p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup APM Server on Ubuntu for Your Elastic Stack to Get Insights in Your Application Performance Metrics]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/11/11/setup-apm-server-on-ubuntu-for-your-elastic-stack-to-get-insights-in-your-application-performance-metrics/"/>
    <updated>2018-11-11T12:31:43-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/11/11/setup-apm-server-on-ubuntu-for-your-elastic-stack-to-get-insights-in-your-application-performance-metrics</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-overview.png" alt="" /></p>

<p>In this post we will setup the Elastic Stack with Elasticsearc, Kibana and APM . The APM Server (Application Performance Metrics) which will receive the metric data from the application side, and is then pushed to apm indices on Elasticsearch.</p>

<p>This will be a 2 post blog on APM:</p>

<ul>
<li>1) <a href="">Setup the Elastic Stack with Elasticsearch, Kibana and APM Server</a> - this post</li>
<li>2) <a href="https://blog.ruanbekker.com/blog/2018/11/11/get-application-performance-metrics-on-python-flask-with-elastic-apm-on-kibana-and-elasticsearch/">Setup a Python Flask application with the APM Agent</a></li>
</ul>


<h2>What is APM</h2>

<p>From their website APM is described as: &ldquo;Elastic APM is an application performance monitoring system built on the Elastic Stack. It allows you to monitor software services and applications in real time, collecting detailed performance information on response time for incoming requests, database queries, calls to caches, external HTTP requests, etc.&rdquo;</p>

<p>You get metrics like average, p99 response times etc, and also have insights when errors occur, it even allows you to look at the stacktrace, poinpointing on which line of your code it ocurred etc.</p>

<ul>
<li><a href="https://www.elastic.co/solutions/apm">More Info</a></li>
</ul>


<h2>APM Agents:</h2>

<p>The APM Agents will be loaded inside your application, application metrics will then be pushed to the APM Server (which we will setup in this post), which then gets pushed to Elasticsearch and is then consumed by Kibana.</p>

<p>At the time of writing, the APM Agents are supported in the following languages:</p>

<ul>
<li>Node.js</li>
<li>Django</li>
<li>Flask</li>
<li>Ruby on Rails</li>
<li>Rack</li>
<li>RUM</li>
<li>Golang</li>
<li>Java</li>
</ul>


<h2>Setup the Elastic Stack</h2>

<p>One thing to note, every service in your Elastic Stack needs to be running on the same version. In this post we will setup Elasticsearch, APM and Kibana all running on version <code>6.4.3</code></p>

<h2>Setup the Pre-Requirements:</h2>

<p>Elasticsearch depends on Java, se we will go ahead and setup the repositories:</p>

<pre><code class="bash">$ wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
$ apt-get install apt-transport-https -y
$ echo "deb https://artifacts.elastic.co/packages/6.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-6.x.list
$ apt update &amp;&amp; apt upgrade -y 
$ apt install openjdk-8-jdk -y
</code></pre>

<p>Verify that Java is installed:</p>

<pre><code class="bash">$ java -version
openjdk version "1.8.0_181"
OpenJDK Runtime Environment (build 1.8.0_181-8u181-b13-1ubuntu0.16.04.1-b13)
OpenJDK 64-Bit Server VM (build 25.181-b13, mixed mode)
</code></pre>

<p>Setup Kernel parameters for Elasticsearch:</p>

<pre><code class="bash">$ sysctl -w vm.max_map_count=262144
$ echo 'vm.max_map_count=262144' &gt;&gt; /etc/sysctl.conf
</code></pre>

<h2>Setup Elasticsearch:</h2>

<p>Search for the latest versions (when already having elasticsearch, either upgrade or install apm on the same version as elasticsearch/kibana):</p>

<pre><code class="bash">$ apt-cache madison elasticsearch
elasticsearch |      6.4.3 | https://artifacts.elastic.co/packages/6.x/apt stable/main amd64 Packages
elasticsearch |      6.4.2 | https://artifacts.elastic.co/packages/6.x/apt stable/main amd64 Packages
</code></pre>

<p>Install Elasticsearch:</p>

<pre><code class="bash">$ apt-get install elasticsearch=6.4.3 -y
</code></pre>

<p>Configure Elasticsearch to lock the memory on startup:</p>

<pre><code class="bash">$ sed -i 's/#bootstrap.memory_lock: true/bootstrap.memory_lock: true/g' /etc/elasticsearch/elasticsearch.yml
</code></pre>

<p>Enable Elasticsearch on startup and start the service:</p>

<pre><code>$ systemctl daemon-reload
$ systemctl enable elasticsearch.service
$ systemctl start elasticsearch.service
</code></pre>

<h2>Install Kibana:</h2>

<p>Install Kibana version <code>6.4.3</code>:</p>

<pre><code class="bash">$ apt install kibana=6.4.3 -y
</code></pre>

<p>For demonstration, I will configure Kibana to listen on all interfaces on port <code>5601</code>, but note this will enable access for everyone, you can [follow this blogpost] to setup a Nginx Reverse Proxy to upstream to localhost on port 5601.</p>

<p>Since this demonstration we are using Elasticsearch locally, so if you have a remote cluster, configuration can be applied where needed.</p>

<pre><code class="bash">$ sed -i 's/#server.host: "localhost"/server.host: "0.0.0.0"/'g /etc/kibana/kibana.yml
$ sed -i 's/#elasticsearch.url: "http:\/\/localhost:9200"/elasticsearch.url: "http:\/\/localhost:9200"/'g /etc/kibana/kibana.yml
</code></pre>

<p>Enable Kibana on startup and start the service:</p>

<pre><code class="bash">$ systemctl enable kibana.service
$ systemctl restart kibana.service
</code></pre>

<h2>Install the APM Server</h2>

<p>Install APM Server version <code>6.4.3</code>:</p>

<pre><code class="bash">$ apt install apm-server=6.4.3 -y
</code></pre>

<p>Since we have everything locally, the configuration can be kept as is, but if you need to configure the elasticsearch or kibana hosts, it can be done via <code>/etc/apm-server/apm-server.yml</code></p>

<p>Then once Kibana and Elasticsearch is started, load the mapping templates, enable and start the service:</p>

<pre><code class="bash">$ apm-server setup
$ systemctl enable apm-server.service
$ systemctl restart apm-server.service
</code></pre>

<p>Ensure all the services are running with <code>netstat -tulpn</code> and port <code>9200</code>, <code>9300</code>, <code>5601</code> and <code>8300</code> should be listening</p>

<h2>Access Your Elastic Stack</h2>

<p>Access Kibana on your routable endpoint on port <code>5601</code> and you should see something like this:</p>

<p><img src="https://objects.ruanbekker.com/assets/images/elastic-apm-startup.png" alt="" /></p>

<h2>Configuring a Application to push metrics to APM</h2>

<p>In the <a href="https://blog.ruanbekker.com/blog/2018/11/11/get-application-performance-metrics-on-python-flask-with-elastic-apm-on-kibana-and-elasticsearch/">next post</a> I will setup a Python Flask Application on APM</p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
</feed>
