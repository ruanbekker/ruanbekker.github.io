<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mongodb | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/mongodb/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-06-01T08:26:38-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Experimenting With Python and TinyMongo a MongoDB Wrapper for TinyDB]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/15/experimenting-with-python-and-tinymongo-a-mongodb-wrapper-for-tinydb/"/>
    <updated>2018-04-15T16:39:22-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/15/experimenting-with-python-and-tinymongo-a-mongodb-wrapper-for-tinydb</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/schapman1974/tinymongo">TinyMongo</a> is a wrapper for MongoDB on top of TinyDB.</p>

<p>This is awesome for testing, where you need a local document orientated database which is backed by a flat file. It feels just like using MongoDB, except that its local, lightweight and using TinyDB in the backend.</p>

<h2>Installing Dependencies:</h2>

<pre><code class="bash">$ pip install tinymongo
</code></pre>

<h2>Usage Examples:</h2>

<p>Initialize tinymongo and create the database and collection:</p>

<pre><code class="python">&gt;&gt;&gt; from tinymongo import TinyMongoClient
&gt;&gt;&gt; connection = TinyMongoClient('foo')
&gt;&gt;&gt; db_init = connection.mydb
&gt;&gt;&gt; db = db_init.users
</code></pre>

<p>Insert a Document, catch the document id and search for that document:</p>

<pre><code class="python">&gt;&gt;&gt; record_id = db .insert_one({'username': 'ruanb', 'name': 'ruan', 'age': 31, 'gender': 'male', 'location': 'south africa'}).inserted_id
&gt;&gt;&gt; user_info = db.find_one({"_id": record_id})
&gt;&gt;&gt; print(user_info)
{u'username': u'ruanb', u'name': u'ruan', u'gender': u'male', u'age': 31, u'_id': u'8d2ce01140ec11e888110242ac110004', u'location': u'south africa'}
</code></pre>

<p>Update a document: Update the age attribute from 31 to 32</p>

<pre><code class="python">&gt;&gt;&gt; db.users.update_one({'_id': '8d2ce01140ec11e888110242ac110004'}, {'$set': {'age': 32 }})
&gt;&gt;&gt; print(user_info)
{u'username': u'ruanb', u'name': u'ruan', u'gender': u'male', u'age': 32, u'_id': u'8d2ce01140ec11e888110242ac110004', u'location': u'south africa'}
</code></pre>

<p>Insert some more data:</p>

<pre><code class="python">&gt;&gt;&gt; record_id = db .insert_one({'username': 'stefanb', 'name': 'stefan', 'age': 30, 'gender': 'male', 'location': 'south africa'}).inserted_id
&gt;&gt;&gt; record_id = db .insert_one({'username': 'alexa', 'name': 'alex', 'age': 34, 'gender': 'male', 'location': 'south africa'}).inserted_id
</code></pre>

<p>Find all the users, sorted by descending age, oldest to youngest:</p>

<pre><code class="python">&gt;&gt;&gt; response = db.users.find(sort=[('age', -1)])
&gt;&gt;&gt; for doc in response:
...     print(doc)
...
{u'username': u'alexa', u'name': u'alex', u'gender': u'male', u'age': 34, u'_id': u'66b1cc3d40ee11e892980242ac110004', u'location': u'south africa'}
{u'username': u'ruanb', u'name': u'ruan', u'gender': u'male', u'age': 32, u'_id': u'8d2ce01140ec11e888110242ac110004', u'location': u'south africa'}
{u'username': u'stefanb', u'name': u'stefan', u'gender': u'male', u'age': 30, u'_id': u'fbe9da8540ed11e88c5e0242ac110004', u'location': u'south africa'}
</code></pre>

<p>Find the number of documents in the collection:</p>

<pre><code class="python">&gt;&gt;&gt; db.users.find().count()
3
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://github.com/schapman1974/tinymongo">TinyMongo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup MongoDB Server on ARM64 Using Scaleway]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/01/setup-mongodb-server-on-arm64-using-scaleway/"/>
    <updated>2018-04-01T18:46:27-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/01/setup-mongodb-server-on-arm64-using-scaleway</id>
    <content type="html"><![CDATA[<p><img src="https://preview.ibb.co/bBRhn7/scw.png" alt="" /></p>

<p>I&rsquo;ve been using Scaleway for the past 18 months and I must admit, I love hosting my Applications on their Infrastructure. They have expanded rapidly recently, and currently deploying more infrstructure due to the high demand.</p>

<p>Scaleway is a Cloud Division of Online.net. They provide Baremetal and Cloud SSD Virtual Servers. Im currently hosting a Docker Swarm Cluster, Blogs, Payara Java Application Servers, Elasticsearch and MongoDB Clusters with them and really happy with the performance and stability of their services.</p>

<h2>What will we be doing today:</h2>

<p>Today I will be deploying MongoDB Server on a ARM64-2GB Instance, which costs you 2.99 Euros per month, absolutely awesome pricing! After we install MongoDB we will setup authentication, and then just a few basic examples on writing and reading from MongoDB.</p>

<h2>Getting Started:</h2>

<p>Logon to <a href="cloud.scaleway.com">cloud.scaleway.com</a> then launch an instance, which will look like the following:</p>

<p><img src="https://image.ibb.co/e7T9jn/scw_launch.png" alt="" /></p>

<p>After you deployed your instance, SSH to your instance, and it should look like this:</p>

<p><img src="https://preview.ibb.co/k16C4n/scw_ssh.png" alt="" /></p>

<h2>Dependencies:</h2>

<p>Get the repository and install MongoDB:</p>

<pre><code class="bash">$ apt update
$ apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5
$ echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list
$ apt update &amp;&amp; apt upgrade -y
$ apt install mongodb-org -y
</code></pre>

<p>Enable MongoDB on Boot:</p>

<pre><code class="bash">$ systemctl enable mongod
</code></pre>

<h2>Configuration:</h2>

<p>Your configuration might look different from mine, so I recommend to backup your config first, as the following command will overwrite the config to the configuration that I will be using for this demonstration:</p>

<pre><code class="bash">$ cat &gt; /etc/mongod.conf &lt;&lt; EOF
storage:
  dbPath: /var/lib/mongodb
  journal:
    enabled: false

storage:
  mmapv1:
    smallFiles: true

systemLog:
  destination: file
  logAppend: true
  path: /var/log/mongodb/mongod.log

net:
  port: 27017
  bindIp: 0.0.0.0

processManagement:
  timeZoneInfo: /usr/share/zoneinfo

security:
  authorization: enabled
EOF
</code></pre>

<p>Restart MongoDB for the config changes to take affect:</p>

<pre><code class="bash">$ systemctl restart mongod
</code></pre>

<h2>Authentication:</h2>

<p>Create the Authentication:</p>

<pre><code class="bash">$ mongo
MongoDB shell version v3.6.3
connecting to: mongodb://127.0.0.1:27017
MongoDB server version: 3.6.3
Welcome to the MongoDB shell.

&gt; use admin
&gt; db.createUser({user: "ruan", pwd: "pass123", roles:[{role: "root", db: "admin"}]})
Successfully added user: {
        "user" : "ruan",
        "roles" : [
                {
                        "role" : "root",
                        "db" : "admin"
                }
        ]
}

&gt; exit
</code></pre>

<p>Restart MongoDB and logon with your credentials:</p>

<pre><code class="bash">$ systemctl restart mongod

$ mongo --authenticationDatabase admin --host localhost --port 27017 -u ruan -p
MongoDB shell version v3.6.3
Enter password:
connecting to: mongodb://localhost:27017/
MongoDB server version: 3.6.3
&gt;
</code></pre>

<h2>Write and Read from MongoDB</h2>

<p>While you are on the MongoDB Shell, we will insert a couple of documents, first drop in to the database that you would like to write to:</p>

<pre><code class="bash">&gt; use testdb
switched to db testdb
</code></pre>

<p>Now we will write to the collection: <code>collection1</code>:</p>

<pre><code class="bash">&gt; db.collection1.insert({"name": "ruan", "surname": "bekker", "age": 31, "country": "south africa"})
WriteResult({ "nInserted" : 1 })

&gt; db.collection1.insert({"name": "stefan", "surname": "bester", "age": 30, "country": "south africa"})
WriteResult({ "nInserted" : 1 })
</code></pre>

<p>To find all the documents in our collection:</p>

<pre><code class="bash">&gt; db.collection1.find()
{ "_id" : ObjectId("5ac15ff0f4a5500484defd23"), "name" : "ruan", "surname" : "bekker", "age" : 31, "country" : "south africa" }
{ "_id" : ObjectId("5ac16003f4a5500484defd24"), "name" : "stefan", "surname" : "bester", "age" : 30, "country" : "south africa" }
</code></pre>

<p>To prettify the output:</p>

<pre><code class="bash">&gt; db.collection1.find().pretty()
{
        "_id" : ObjectId("5ac15ff0f4a5500484defd23"),
        "name" : "ruan",
        "surname" : "bekker",
        "age" : 31,
        "country" : "south africa"
}
{
        "_id" : ObjectId("5ac16003f4a5500484defd24"),
        "name" : "stefan",
        "surname" : "bester",
        "age" : 30,
        "country" : "south africa"
}
</code></pre>

<p>To find a document with the key/value of <code>name: ruan</code>:</p>

<pre><code class="bash">&gt; db.collection1.find({"name": "ruan"}).pretty()
{
        "_id" : ObjectId("5ac15ff0f4a5500484defd23"),
        "name" : "ruan",
        "surname" : "bekker",
        "age" : 31,
        "country" : "south africa"
}
</code></pre>

<p>To view the database that you are currently switched to:</p>

<pre><code class="bash">&gt; db
testdb
</code></pre>

<p>To view all the databases:</p>

<pre><code class="bash">&gt; show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
testdb  0.000GB
</code></pre>

<p>To view the collections in the database:</p>

<pre><code class="bash">&gt; show collections
collection1

&gt; exit
</code></pre>

<p>That was just a quick post on installing MongoDB on ARM64 using Scaleway. Try them out, and they are also hiring: <a href="https://careers.scaleway.com/">careers.scaleway.com</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Chatbot With Chatterbot on Python]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/12/13/create-a-chatbot-with-chatterbot-on-python/"/>
    <updated>2017-12-13T08:53:50-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/12/13/create-a-chatbot-with-chatterbot-on-python</id>
    <content type="html"><![CDATA[<p><img src="https://chatterbot.readthedocs.io/en/stable/_images/banner.png" alt="" /></p>

<p>So I&rsquo;ve been wanting to take a stab at chatbots for some time, and recently discovered <a href="https://github.com/gunthercox/ChatterBot">Chatterbot</a>, so in this tutorial I will go through some examples on setting up a very basic chatbot.</p>

<h2>Getting the Dependencies:</h2>

<p>I will be using Alpine on <a href="docker.com">Docker</a> to run all the the examples, I am using Alpine so that we have a basic container with nothing special pre-installed.</p>

<p>Chatterbot is written in Python, so let&rsquo;s install Python and Chatterbot:</p>

<pre><code class="bash">$ docker run -it --name chatbot alpine:edge sh
$ apk update &amp;&amp; apk add python py2-pip
$ pip install pip --upgrade --user
$ pip install chatterbot
</code></pre>

<h2>Setup the Basic Chatbot:</h2>

<p>Now that our dependencies is installed, enter the Python interpreter where we will instantiate our Chatbot, and get a response from our Chatbot. By default the library will create a sqlite database to build up statements that is passed to and from the bot.</p>

<p>At this point, the bot is still pretty useless:</p>

<pre><code class="bash">$ python
&gt;&gt;&gt; from chatterbot import ChatBot
&gt;&gt;&gt; chatbot = ChatBot('Ben')
&gt;&gt;&gt; chatbot.get_response('What is your name?')
&lt;Statement text:What is your name?&gt;
&gt;&gt;&gt; chatbot.get_response('My name is Ruan, what is your name?')
&lt;Statement text:What is your name?&gt;
</code></pre>

<h2>Training your Bot:</h2>

<p>To enable your bot to have some knowledge, we can train the bot with training data. The training data is populated in a list, which will represent the conversation.</p>

<p>Exit the python interpreter and delete the sqlite database:</p>

<pre><code class="bash">$ rm -rf db.sqlite3
</code></pre>

<p>Now our Bot wont have any history of what we said. Start the interpreter again and add some data to train our bot. In this example, we want our Chatbot to respond when we ask it, what his name is:</p>

<pre><code class="bash">&gt;&gt;&gt; from chatterbot import ChatBot
&gt;&gt;&gt; from chatterbot.trainers import ListTrainer
&gt;&gt;&gt; chatbot = ChatBot('Ben')
&gt;&gt;&gt; chatbot.set_trainer(ListTrainer)
&gt;&gt;&gt; chatbot.train(['What is your name?', 'My name is Ben'])
List Trainer: [####################] 100%
</code></pre>

<p>Now that we have trained our bot, let&rsquo;s try to chat to our bot:</p>

<pre><code class="bash">&gt;&gt;&gt; chatbot.get_response('What is your name?')
&lt;Statement text:My name is Ben&gt;
&gt;&gt;&gt; chatbot.get_response('Who is Ben?')
&lt;Statement text:My name is Ben&gt;
</code></pre>

<p>We can also enable our bot to respond on multiple statements:</p>

<pre><code class="bash">&gt;&gt;&gt; chatbot.train(['Do you know someone with the name of Sarah?', 'Yes, my sisters name is Sarah', 'Is your sisters name, Sarah?', 'Faw shizzle!'])
List Trainer: [####################] 100%

&gt;&gt;&gt; chatbot.get_response('do you know someone with the name of Sarah?')
&lt;Statement text:Yes, my sisters name is Sarah&gt;
&gt;&gt;&gt; chatbot.get_response('is your sisters name Sarah?')
&lt;Statement text:Faw shizzle!&gt;
</code></pre>

<p>With that said, we can define our list of statements in our code:</p>

<pre><code class="python">&gt;&gt;&gt; conversations = [
...     'Are you an athlete?', 'No, are you mad? I am a bot',
...     'Do you like big bang theory?', 'Bazinga!',
...     'What is my name?', 'Ruan',
...     'What color is the sky?', 'Blue, stop asking me stupid questions'
... ]

&gt;&gt;&gt; chatbot.train(conversations)
List Trainer: [####################] 100%
&gt;&gt;&gt; chatbot.get_response('What color is the sky?')
&lt;Statement text:Blue, stop asking me stupid questions&gt;
</code></pre>

<p>So we can see it works as expected, but let&rsquo;s state one of the answers from our statements, to see what happens:</p>

<pre><code class="bash">&gt;&gt;&gt; chatbot.get_response('Bazinga')
&lt;Statement text:What is my name?&gt;
&gt;&gt;&gt; chatbot.get_response('Your name is Ben')
&lt;Statement text:Yes, my name is Ben&gt;
</code></pre>

<p>So we can see it uses natural language processing to learn from the data that we provide our bot. Just to check another question:</p>

<pre><code class="bash">&gt;&gt;&gt; chatbot.get_response('Do you like big bang theory?')
&lt;Statement text:Bazinga!&gt;
</code></pre>

<p>If we have quite a large subset of learning data, we can add all the data in a file, seperated by new lines then we can use python to read the data from disk, and split up the data in the expected format.</p>

<p>The training file will reside in our working directory, let&rsquo;s name it <code>training-data.txt</code> and the content will look like this:</p>

<pre><code class="bash">What is Bitcoin?
Bitcoin is a Crypto Currency
Where is this blog hosted?
Github
</code></pre>

<p>A visual example of how we will process this data will look like this:</p>

<pre><code class="bash">&gt;&gt;&gt; data = open('training-data.txt').read()
&gt;&gt;&gt; data.strip().split('\n')
['What is Bitcoin?', 'Bitcoin is a Crypto Currency', 'Where is this blog hosted?', 'Github']
</code></pre>

<p>And in action, it will look like this:</p>

<pre><code class="bash">&gt;&gt;&gt; data = open('training-data.txt').read()
&gt;&gt;&gt; conversations = data.strip().split('\n')
&gt;&gt;&gt; chatbot.train(conversations)
List Trainer: [####################] 100%

&gt;&gt;&gt; chatbot.get_response('Where is this blog hosted?')
&lt;Statement text:Github&gt;
</code></pre>

<p>There is also pre-populated data that you can use to train your bot, on the <a href="https://chatterbot.readthedocs.io/en/stable/training.html#training-with-corpus-data">documentation</a> is a couple of examples, but for demonstration, we will use the CorpusTrainer:</p>

<pre><code class="bash">&gt;&gt;&gt; from chatterbot.trainers import ChatterBotCorpusTrainer
&gt;&gt;&gt; chatterbot.set_trainer(ChatterBotCorpusTrainer)
&gt;&gt;&gt; chatbot.train("chatterbot.corpus.english")
ai.yml Training: [####################] 100%
botprofile.yml Training: [####################] 100%
computers.yml Training: [####################] 100%
conversations.yml Training: [####################] 100%
emotion.yml Training: [####################] 100%
food.yml Training: [####################] 100%
gossip.yml Training: [####################] 100%
greetings.yml Training: [####################] 100%
history.yml Training: [####################] 100%
humor.yml Training: [####################] 100%
literature.yml Training: [####################] 100%
money.yml Training: [####################] 100%
movies.yml Training: [####################] 100%
politics.yml Training: [####################] 100%
psychology.yml Training: [####################] 100%
science.yml Training: [####################] 100%
sports.yml Training: [####################] 100%
trivia.yml Training: [####################] 100%

&gt;&gt;&gt; chatbot.get_response('Do you like peace?')
&lt;Statement text:not especially. i am not into violence.&gt;
&gt;&gt;&gt; chatbot.get_response('Are you emotional?')
&lt;Statement text:Sort of.&gt;
&gt;&gt;&gt; chatbot.get_response('What language do you speak?')
&lt;Statement text:Python.&gt;
&gt;&gt;&gt; chatbot.get_response('What is your name?')
&lt;Statement text:My name is Ben&gt;
&gt;&gt;&gt; chatbot.get_response('Who is the President of America?')
&lt;Statement text:Richard Nixon&gt; #data seems outdated :D
&gt;&gt;&gt; chatbot.get_response('I like cheese')
&lt;Statement text:What kind of movies do you like?&gt;
</code></pre>

<h2>Using an External Database like MongoDB</h2>

<p>Instead of using sqlite on the same host, we can use a NoSQL Database like MongoDB that resides outside our application.</p>

<p>For the sake of this tutorial, I will use Docker to spin up a MongoDB Container:</p>

<pre><code class="bash">$ docker run -d --name mongodb -p 27017:27017 -p 28017:28017 -e AUTH=no -e OPLOG_SIZE=50 tutum/mongodb
</code></pre>

<p>Below is my code of a terminal application that uses Chatterbot, MongoDB as a Storage Adapter, and we are using a while loop, so that we can chat with our bot, and in our except statement, we can stop our application by using our keyboard to exit:</p>

<pre><code class="python">from chatterbot import ChatBot
from chatterbot.trainers import ChatterBotCorpusTrainer

chatbot = ChatBot(
    "Chatbot Backed by MongoDB",
    storage_adapter="chatterbot.storage.MongoDatabaseAdapter",
    database="chatterbot_db",
    database_uri="mongodb://172.17.0.3:27017/",
    logic_adapters=[
        'chatterbot.logic.BestMatch'
    ],
    trainer='chatterbot.trainers.ChatterBotCorpusTrainer',
    filters=[
        'chatterbot.filters.RepetitiveResponseFilter'
    ],
    input_adapter='chatterbot.input.TerminalAdapter',
    output_adapter='chatterbot.output.TerminalAdapter'
)

chatbot.set_trainer(ChatterBotCorpusTrainer)
chatbot.train("chatterbot.corpus.english")

print('Chatbot Started:')

while True:
    try:
        print(" -&gt; You:")
        botInput = chatbot.get_response(None)
    except (KeyboardInterrupt, EOFError, SystemExit):
        break
</code></pre>

<p>Running the example:</p>

<pre><code class="bash">$ python bot.py
 -&gt; You:
How are you?
I am doing well.
 -&gt; You:
Tell me a joke
A 3-legged dog walks into an old west saloon, slides up to the bar and announces "I'm looking for the man who shot my paw."
</code></pre>

<p>And from mongodb, we can see some data:</p>

<pre><code class="bash">$ mongo
&gt; show dbs
admin          0.078GB
chatterbot_db  0.078GB
local          0.078GB

&gt; use chatterbot_db
switched to db chatterbot_db

&gt; show collections;
conversations
statements
system.indexes

&gt; db.conversations.find().count()
4
&gt; db.statements.find().count()
1240
&gt; db.system.indexes.find().count()
3
</code></pre>

<p>That was a basic tutorial on Chatterbot, next I will be looking into mining data from Twitter&rsquo;s API and see how clever our bot can become.</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://chatterbot.readthedocs.io/en/stable/quickstart.html#quick-start-guide">Chatterbot Documentation</a></li>
<li><a href="https://github.com/gunthercox/ChatterBot/tree/master/examples">Chatterbot Examples</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backup and Restore Mutliple Collections From a Database With MongoDB]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/03/backup-and-restore-mutliple-collections-from-a-database-with-mongodb/"/>
    <updated>2017-10-03T16:42:34-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/03/backup-and-restore-mutliple-collections-from-a-database-with-mongodb</id>
    <content type="html"><![CDATA[<p>From a previous post we&rsquo;ve  <a href="http://blog.ruanbekker.com/blog/2017/09/02/setup-a-3-node-mongodb-replica-set-on-ubuntu-16/">Setup a MongoDB Cluster</a>, and in this post we will go through the steps of backing up a database and restoring it to another mongodb cluster.</p>

<p><a href="http://mlab.com/">MLab</a> offers a free Shared MongoDB Hosted Service with a limitation of 500MB, which I will be using to restore my data from my own hosted cluster to the free MLab service.</p>

<h2>Create the MongoDB Backup</h2>

<p>First we will need to create our backup path, and then backup our database, in my case, I am backing up my <code>rocketchat</code> database:</p>

<pre><code class="bash">$ mkdir -p /opt/backups/mongodb
$ mongodump --host mongodb.example.com --port 27017 -u &lt;mongouser&gt; --authenticationDatabase &lt;authdb&gt; --db rocketchat --out /opt/backups/mongodb/
</code></pre>

<p>Change into the backup directory:</p>

<pre><code class="bash">$ cd /opt/backups/mongodb/rocketchat/ 
</code></pre>

<p>You will find the <code>bson</code> and <code>json metadata</code> files for each collection:</p>

<pre><code class="bash">$ ls -l | awk '{print $9}' | head -9
custom_emoji.chunks.bson
custom_emoji.chunks.metadata.json
custom_emoji.files.bson
custom_emoji.files.metadata.json
instances.bson
instances.metadata.json
meteor_accounts_loginServiceConfiguration.bson
meteor_accounts_loginServiceConfiguration.metadata.json
...
</code></pre>

<h2>Restore MongoDB Database</h2>

<p>We will need to restore all the collections to our new mongodb service, I have created a bash script (<code>restore-mongodb.sh</code>) that will restore each collection to our <code>rocketchat</code> database:</p>

<pre><code class="bash">#!/usr/bin/env bash

mongo_user=&lt;mongouser&gt;
mongo_pass=&lt;mongopass&gt;

for file in `ls | grep bson`
  do
    for collection in `echo $file | sed 's/.bson//g'`
  do
    mongorestore --host mymongoid.mlab.com --port 12345 -u $mongo_user -p $mongo_pass -d rocketchat -c $collection $file
    sleep 2
  done
done
</code></pre>

<p>Change the permissions of your script to make it executable and execute the script:</p>

<pre><code>$ chmod +x restore-mongodb.sh
$ ./restore-mongodb.sh

2017-10-03T22:05:39.138+0200    checking for collection data in custom_emoji.chunks.bson
2017-10-03T22:05:39.159+0200    reading metadata for rocketchat.custom_emoji.chunks from custom_emoji.chunks.metadata.json
2017-10-03T22:05:39.211+0200    restoring rocketchat.custom_emoji.chunks from custom_emoji.chunks.bson
2017-10-03T22:05:39.900+0200    restoring indexes for collection rocketchat.custom_emoji.chunks from metadata
2017-10-03T22:05:39.922+0200    finished restoring rocketchat.custom_emoji.chunks (20 documents)
2017-10-03T22:05:39.922+0200    done
2017-10-03T22:05:42.188+0200    checking for collection data in custom_emoji.files.bson
2017-10-03T22:05:42.231+0200    reading metadata for rocketchat.custom_emoji.files from custom_emoji.files.metadata.json
2017-10-03T22:05:42.252+0200    restoring rocketchat.custom_emoji.files from custom_emoji.files.bson
2017-10-03T22:05:42.623+0200    restoring indexes for collection rocketchat.custom_emoji.files from metadata
2017-10-03T22:05:42.645+0200    finished restoring rocketchat.custom_emoji.files (20 documents)
2017-10-03T22:05:42.645+0200    done
...
</code></pre>

<h2>Checkout the New MongoDB Database:</h2>

<p>Once the restore has been done, logon to your new mongodb database and have a look at the collections in the database:</p>

<pre><code>$ mongo mymongoid.mlab.com:12345/rocketchat -u &lt;mongouser&gt; -p
MongoDB shell version v3.4.7
Enter password:
connecting to: mongodb://mymongoid.mlab.com:12345/rocketchat
MongoDB server version: 3.4.9

rs-mymongoid:PRIMARY&gt; show collections
_raix_push_app_tokens
_raix_push_notifications
custom_emoji.chunks
custom_emoji.files
instances
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://docs.mongodb.com/manual/reference/program/mongodump/">https://docs.mongodb.com/manual/reference/program/mongodump/</a></li>
<li><a href="https://docs.mongodb.com/manual/reference/program/mongorestore/">https://docs.mongodb.com/manual/reference/program/mongorestore/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup RocketChat on Docker Swarm]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/10/setup-rocketchat-on-docker-swarm/"/>
    <updated>2017-09-10T18:45:12-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/10/setup-rocketchat-on-docker-swarm</id>
    <content type="html"><![CDATA[<p>Rocket Chat, a Self Hosted Alternative, which is very similar to Slack.</p>

<p>We will setup a RocketChat Server which is hosted on Docker Swarm. In future posts, I will also go through the steps on working with the API, Custom Emoji&rsquo;s etc.</p>

<h2>Requirements:</h2>

<p>RocketChat uses MongoDB as its Database, we will keep the database outside of our swarm, if you don&rsquo;t already have a MongoDB Server in place, follow the <a href="http://blog.ruanbekker.com/blog/2017/09/02/setup-a-3-node-mongodb-replica-set-on-ubuntu-16/">Setup a 3 Node MongoDB</a> post to get that sorted.</p>

<p>Another requirement is to have docker swarm running, alternatively, you can also follow <a href="https://rocket.chat/docs/installation/">RocketChat&rsquo;s Documentation</a> if you prefer setting it up elsewhere.</p>

<h2>Setup Rocket Chat</h2>

<p>We will assume MongoDB is accessible via <code>mongodb.domain.com</code> on port <code>27017</code>, with a username and password.</p>

<p>Creating the RocketChat service and associate it to our <code>appnet</code> overlay network:</p>

<pre><code class="bash">docker service create --name rocketchat \
--replicas 1 \
--network appnet \
--env DEPLOY_METHOD=docker \
--env NODE_ENV=production \
--env PORT=3000 \
--env MONGO_URL="mongodb://mongoadmin:mongopass@mongodb.domain.com:27017/rocketchat?authSource=admin" \
--env ROOT_URL=http://rocketchat.domain.com \
--env ADMIN_USERNAME=myadmin \
--env ADMIN_PASS=secret \
--env ADMIN_EMAIL=mail@domain.com \
--env Accounts_AvatarStorePath=/app/uploads \
--secret rocketchat_secret \
rocketchat/rocket.chat
</code></pre>

<h2>View the RocketChat Service Logs</h2>

<p>Lets monitor the docker service logs for our rocketchat service:</p>

<pre><code class="bash">$ docker service logs -f rocketchat

rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | Using GridFS for custom sounds storage
rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | Using GridFS for custom emoji storage
rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | ufs: temp directory created at "/tmp/ufs"
rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | System startup
rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | +--------------------------------------------------------------+
rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | |                        SERVER RUNNING                        |
rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | +--------------------------------------------------------------+
rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | |                                                              |
rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | |  Rocket.Chat Version: 0.58.2                                 |
rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | |       NodeJS Version: 4.8.4 - x64                            |
rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | |             Platform: linux                                  |
rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | |         Process Port: 3000                                   |
rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | |             Site URL: http://rocketchat.domain.com           |
rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | |     ReplicaSet OpLog: Disabled                               |
rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | |          Commit Hash: 988103d449                             |
rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | |        Commit Branch: HEAD                                   |
rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | |                                                              |
rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | +--------------------------------------------------------------+
rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | Inserting admin user:
rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | Name: Administrator
rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | Email: mail@domain.com
rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | Username: myadmin
rocketchat.1.lnbyfjiotqpz@docker-swarm-worker-03    | Password: secret
</code></pre>

<p>Now you should be able to access Rocket Chat on the <code>ROOT_URL</code> that you have specified.</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://rocket.chat/docs/installation/">https://rocket.chat/docs/installation/</a></li>
<li><a href="https://github.com/RocketChat/Docker.Official.Image">https://github.com/RocketChat/Docker.Official.Image</a></li>
<li><a href="https://rocket.chat/docs/installation/docker-containers">https://rocket.chat/docs/installation/docker-containers</a></li>
</ul>


<center>
        <script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script>
</center>



]]></content>
  </entry>
  
</feed>
