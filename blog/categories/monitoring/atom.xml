<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Monitoring | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/monitoring/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2019-05-17T12:02:45-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install Pushgateway to Expose Metrics to Prometheus]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/17/install-pushgateway-to-expose-metrics-to-prometheus/"/>
    <updated>2019-05-17T07:04:03-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/17/install-pushgateway-to-expose-metrics-to-prometheus</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57307750-696bb980-70e5-11e9-9b0b-73ad88bde6a3.png" alt="" /></p>

<p>In most cases when we want to scrape a node for metrics, we will install node-exporter on a host and configure prometheus to scrape the configured node to consume metric data. But in certain cases we want to push custom metrics to prometheus. In such cases, we can make use of pushgateway.</p>

<p>Pushgateway allows you to push custom metrics to push gateway&rsquo;s endpoint, then we configure prometheus to scrape push gateway to consume the exposed metrics into prometheus.</p>

<h2>Pre-Requirements</h2>

<p>If you have not set up <a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">Prometheus</a>, head over to <strong><a href="https://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/">this blogpost</a></strong> to set up prometheus on Linux.</p>

<h2>What we will do?</h2>

<p>In this tutorial, we will setup pushgateway on linux and after pushgateway has been setup, we will push some custom metrics to pushgateway and configure prometheus to scrape metrics from pushgateway.</p>

<h2>Install Pushgateway</h2>

<p>Get the latest version of <a href="https://prometheus.io/download/">pushgateway</a> from prometheus.io, then download and extract:</p>

<pre><code>$ wget https://github.com/prometheus/pushgateway/releases/download/v0.8.0/pushgateway-0.8.0.linux-amd64.tar.gz
$ tar -xvf pushgateway-0.8.0.linux-amd64.tar.gz
</code></pre>

<p>Create the <code>pushgateway</code> user:</p>

<pre><code>$ useradd --no-create-home --shell /bin/false pushgateway
</code></pre>

<p>Move the binary in place and update the permissions to the user that we created:</p>

<pre><code>$ cp pushgateway-0.8.0.linux-amd64/pushgateway /usr/local/bin/pushgateway
$ chown pushgateway:pushgateway /usr/local/bin/pushgateway
</code></pre>

<p>Create the systemd unit file:</p>

<pre><code>$ cat &gt; /etc/systemd/system/pushgateway.service &lt;&lt; EOF
[Unit]
Description=Pushgateway
Wants=network-online.target
After=network-online.target

[Service]
User=pushgateway
Group=pushgateway
Type=simple
ExecStart=/usr/local/bin/pushgateway \
    --web.listen-address=":9091" \
    --web.telemetry-path="/metrics" \
    --persistence.file="/tmp/metric.store" \
    --persistence.interval=5m \
    --log.level="info" \
    --log.format="logger:stdout?json=true"

[Install]
WantedBy=multi-user.target
EOF
</code></pre>

<p>Reload systemd and restart the pushgateway service:</p>

<pre><code>$ systemctl daemon-reload
$ systemctl restart pushgateway
</code></pre>

<p>Ensure that pushgateway has been started:</p>

<pre><code>$ systemctl status pushgateway
  pushgateway.service - Pushgateway
   Loaded: loaded (/etc/systemd/system/pushgateway.service; disabled; vendor preset: enabled)
   Active: active (running) since Tue 2019-05-07 09:05:57 UTC; 2min 33s ago
 Main PID: 6974 (pushgateway)
    Tasks: 6 (limit: 4704)
   CGroup: /system.slice/pushgateway.service
           └─6974 /usr/local/bin/pushgateway --web.listen-address=:9091 --web.telemetry-path=/metrics --persistence.file=/tmp/metric.store --persistence.interval=5m --log.level=info --log.format=logger:st

May 07 09:05:57 ip-172-31-41-126 systemd[1]: Started Pushgateway.
</code></pre>

<h2>Configure Prometheus</h2>

<p>Now we want to configure prometheus to scrape pushgateway for metrics, then the scraped metrics will be injected into prometheus&rsquo;s time series database:</p>

<p>At the moment, I have prometheus, node-exporter and pushgateway on the same node so I will provide my complete prometheus configuration, If you are just looking for the pushgateway config, it will be the last line:</p>

<pre><code>$ cat /etc/prometheus/prometheus.yml
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'prometheus'
    scrape_interval: 5s
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'node_exporter'
    scrape_interval: 5s
    static_configs:
      - targets: ['localhost:9100']

  - job_name: 'pushgateway'
    honor_labels: true
    static_configs:
      - targets: ['localhost:9091']
</code></pre>

<p>Restart prometheus:</p>

<pre><code>$ systemctl restart prometheus
</code></pre>

<h2>Push metrics to pushgateway</h2>

<p>First we will look at a bash example to push metrics to pushgateway:</p>

<pre><code>$ echo "cpu_utilization 20.25" | curl --data-binary @- http://localhost:9091/metrics/job/my_custom_metrics/instance/10.20.0.1:9000/provider/hetzner
</code></pre>

<p>Have a look at pushgateway&rsquo;s metrics endpoint:</p>

<pre><code>$ curl -L http://localhost:9091/metrics/
# TYPE cpu_utilization untyped
cpu_utlization{instance="10.20.0.1:9000",job="my_custom_metrics",provider="hetzner"} 20.25
</code></pre>

<p>Let&rsquo;s look at a python example on how we can push metrics to pushgateway:</p>

<pre><code class="python">import requests

job_name='my_custom_metrics'
instance_name='10.20.0.1:9000'
provider='hetzner'
payload_key='cpu_utilization'
payload_value='21.90'

response = requests.post('http://localhost:9091/metrics/job/{j}/instance/{i}/team/{t}'.format(j=job_name, i=instance_name, t=team_name), data='{k} {v}\n'.format(k=payload_key, v=payload_value))
print(response.status_code)
</code></pre>

<p>With this method, you can push any custom metrics (bash, lambda function, etc) to pushgateway and allow prometheus to consume that data into it&rsquo;s time series database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Prometheus and Node Exporter on Ubuntu for Epic Monitoring]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring/"/>
    <updated>2019-05-07T09:55:37-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/07/setup-prometheus-and-node-exporter-on-ubuntu-for-epic-monitoring</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57307750-696bb980-70e5-11e9-9b0b-73ad88bde6a3.png" alt="image" /></p>

<p><a href="https://prometheus.io/">Prometheus</a> is one of those awesome open source monitoring services that I simply cannot live without. Prometheus is a Time Series Database that collects metrics from services using it&rsquo;s exporters functionality. Prometheus has its own query language called PromQL and makes graphing epic visualiztions with services such as Grafana a breeze.</p>

<h2>What are we doing today</h2>

<p>We will install the <code>prometheus</code> service and set up <code>node_exporter</code> to consume node related metrics such as cpu, memory, io etc that will be scraped by the exporter configuration on prometheus, which then gets pushed into prometheus&rsquo;s time series database. Which can then be used by services such as Grafana to visualize the data.</p>

<p>Other exporters is also available, such as: <code>haproxy_exporter</code>, <code>blackbox_exporter</code> etc, then you also get <code>pushgateway</code> which is used to push data to, and then your exporter configuration scrapes the data from the pushgateway endpoint. In a later tutorial, we will set up push gateway as well.</p>

<h2>Install Prometheus</h2>

<p>First, let&rsquo;s provision our dedicated system users for prometheus and node exporter:</p>

<pre><code>$ useradd --no-create-home --shell /bin/false prometheus
$ useradd --no-create-home --shell /bin/false node_exporter
</code></pre>

<p>Create the directories for it&rsquo;s system files:</p>

<pre><code>$ mkdir /etc/prometheus
$ mkdir /var/lib/prometheus
</code></pre>

<p>Apply the permissions:</p>

<pre><code>$ chown prometheus:prometheus /etc/prometheus
$ chown prometheus:prometheus /var/lib/prometheus
</code></pre>

<p>Next, update your system:</p>

<pre><code>$ apt update &amp;&amp; apt upgrade -y
</code></pre>

<p>Let&rsquo;s install prometheus, head over to <a href="https://prometheus.io/download/">https://prometheus.io/download/</a> and get the latest version of prometheus:</p>

<pre><code>$ wget https://github.com/prometheus/prometheus/releases/download/v2.8.0/prometheus-2.8.0.linux-amd64.tar.gz
$ tar -xf prometheus-2.8.0.linux-amd64.tar.gz
$ cp prometheus-2.8.0.linux-amd64/prometheus /usr/local/bin/
$ cp prometheus-2.8.0.linux-amd64/promtool /usr/local/bin/
$ chown prometheus:prometheus /usr/local/bin/prometheus
$ chown prometheus:prometheus /usr/local/bin/promtool
$ cp -r prometheus-2.8.0.linux-amd64/consoles /etc/prometheus/
$ cp -r prometheus-2.8.0.linux-amd64/console_libraries /etc/prometheus/
$ chown -R prometheus:prometheus /etc/prometheus/consoles
$ chown -R prometheus:prometheus /etc/prometheus/console_libraries
$ rm -rf prometheus-2.8.0.linux-amd64*
</code></pre>

<h2>Configure Prometheus</h2>

<p>We need to tell prometheus to scrape itself in order to get prometheus performance data, edit the prometheus configuration:</p>

<pre><code>$ vim /etc/prometheus/prometheus.yml
</code></pre>

<p>And add a scrape config: Set the interval on when it needs to scrap, the job name which will be in your metric and the endpoint which it needs to scrape:</p>

<pre><code>global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'prometheus'
    scrape_interval: 5s
    static_configs:
      - targets: ['localhost:9090']
</code></pre>

<p>Apply permissions to the configured file:</p>

<pre><code>$ chown prometheus:prometheus /etc/prometheus/prometheus.yml
</code></pre>

<p>Next, we need to define a systemd unit file so we can control the daemon using systemd:</p>

<pre><code>$ vim /etc/systemd/system/prometheus.service
</code></pre>

<p>The config:</p>

<pre><code>[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target

[Service]
User=prometheus
Group=prometheus
Type=simple
ExecStart=/usr/local/bin/prometheus \
    --config.file /etc/prometheus/prometheus.yml \
    --storage.tsdb.path /var/lib/prometheus/ \
    --web.console.templates=/etc/prometheus/consoles \
    --web.console.libraries=/etc/prometheus/console_libraries

[Install]
WantedBy=multi-user.target
</code></pre>

<p>Since we created a new systemd unit file, we need to reload the systemd daemon, then start the service:</p>

<pre><code>$ systemctl daemon-reload
$ systemctl start prometheus
</code></pre>

<p>Let&rsquo;s look at the status to see if everything works as expected:</p>

<pre><code>$ systemctl status prometheus
prometheus.service - Prometheus
   Loaded: loaded (/etc/systemd/system/prometheus.service; disabled; vendor preset: enabled)
   Active: active (running) since Tue 2019-03-26 11:59:10 UTC; 6s ago
 Main PID: 16374 (prometheus)
    Tasks: 9 (limit: 4704)
   CGroup: /system.slice/prometheus.service
           └─16374 /usr/local/bin/prometheus --config.file /etc/prometheus/prometheus.yml --storage.tsdb.path /var/lib/prometheus/ --web.console.templates=/etc/prometheus/consoles --web.console.libraries=

...
Mar 26 11:59:10 ip-172-31-41-126 prometheus[16374]: level=info ts=2019-03-26T11:59:10.893770598Z caller=main.go:655 msg="TSDB started"
</code></pre>

<p>Seems legit! Enable the service on startup:</p>

<pre><code>$ systemctl enable prometheus
</code></pre>

<h2>Install Node Exporter</h2>

<p>Now since we have prometheus up and running, we can start adding exporters to publish data into our prometheus time series database. As mentioned before, with node exporter, we will allow prometheus to scrape the node exporter endpoint to consume metrics about the node:</p>

<p>You will find the latest version from their website, which I have added at the top of this post.</p>

<pre><code>$ wget https://github.com/prometheus/node_exporter/releases/download/v0.17.0/node_exporter-0.17.0.linux-amd64.tar.gz
$ tar -xf node_exporter-0.17.0.linux-amd64.tar.gz
$ cp node_exporter-0.17.0.linux-amd64/node_exporter /usr/local/bin
$ chown node_exporter:node_exporter /usr/local/bin/node_exporter
$ rm -rf node_exporter-0.17.0.linux-amd64*
</code></pre>

<p>Create the systemd unit file:</p>

<pre><code>$ vim /etc/systemd/system/node_exporter.service
</code></pre>

<p>Apply this configuration:</p>

<pre><code>[Unit]
Description=Node Exporter
Wants=network-online.target
After=network-online.target

[Service]
User=node_exporter
Group=node_exporter
Type=simple
ExecStart=/usr/local/bin/node_exporter

[Install]
WantedBy=multi-user.target
</code></pre>

<p>Reload the systemd daemon and start node exporter:</p>

<pre><code>$ systemctl daemon-reload
$ systemctl start node_exporter
</code></pre>

<p>Look at the status:</p>

<pre><code>$ node_exporter.service - Node Exporter
   Loaded: loaded (/etc/systemd/system/node_exporter.service; disabled; vendor preset: enabled)
   Active: active (running) since Tue 2019-03-26 12:01:39 UTC; 5s ago
 Main PID: 16474 (node_exporter)
    Tasks: 4 (limit: 4704)
   CGroup: /system.slice/node_exporter.service
           └─16474 /usr/local/bin/node_exporter

...
Mar 26 12:01:39 ip-172-31-41-126 node_exporter[16474]: time="2019-03-26T12:01:39Z" level=info msg="Listening on :9100" source="node_exporter.go:111"
</code></pre>

<p>If everything looks good, enable the service on boot:</p>

<pre><code>$ systemctl enable node_exporter
</code></pre>

<h2>Configure Node Exporter</h2>

<p>Now that we have node exporter running, we need to tell prometheus how to scrape node exporter, so that the node related metrics can end up into prometheus. Edit the prometheus config:</p>

<pre><code>$ vim /etc/prometheus/prometheus.yml
</code></pre>

<p>I&rsquo;m providing the full config, but the config is the last section, where you can see the jobname is node_exporter:</p>

<pre><code>global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'prometheus'
    scrape_interval: 5s
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'node_exporter'
    scrape_interval: 5s
    static_configs:
      - targets: ['localhost:9100']
</code></pre>

<p>Once the config is saved, restart prometheus and have a look at the status if everything is going as expected:</p>

<pre><code>$ systemctl restart prometheus
$ systemctl status prometheus
</code></pre>

<h2>Nginx Reverse Proxy</h2>

<p>Let&rsquo;s add a layer of security and front our setup with a nginx reverse proxy, so that we don&rsquo;t have to access prometheus on high ports and we have the option to enable basic http authentication. Install nginx:</p>

<pre><code>$ apt install nginx apache2-utils -y
</code></pre>

<p>Create the authentication file:</p>

<pre><code>$ htpasswd -c /etc/nginx/.htpasswd admin
</code></pre>

<p>Create the nginx site configuration, this will tel nginx to route connections on port 80, to reverse proxy to localhost, port 9090, if authenticated:</p>

<pre><code>$ rm /etc/nginx/sites-enabled/default
$ vim /etc/nginx/sites-enabled/prometheus.conf
</code></pre>

<p>And this is the config:</p>

<pre><code>server {
    listen 80 default_server;
    listen [::]:80 default_server;
    root /var/www/html;
    index index.html index.htm index.nginx-debian.html;
    server_name _;


    location / {
            auth_basic "Prometheus Auth";
            auth_basic_user_file /etc/nginx/.htpasswd;
            proxy_pass http://localhost:9090;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
}
</code></pre>

<p>Reload nginx configuration:</p>

<pre><code>$ systemctl reload nginx
</code></pre>

<h2>Access the Beauty of Prometheus Land!</h2>

<p>Once you have authenticated, head over to status, here you will see status info such as your targets, this wil be the endpoints that prometheus is scraping:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57307130-4b518980-70e4-11e9-9f16-4665427fba1f.png" alt="image" /></p>

<p>From the main screen, let&rsquo;s dive into some queries using <a href="https://prometheus.io/docs/prometheus/latest/querying/basics/">PromQL</a>. Also see my <a href="https://github.com/ruanbekker/awesome-list/blob/master/cheatsheets/PROMETHEUS.md">Prometheus Cheatsheet</a>.</p>

<p>For the first query, we want to see the available memory of this node in bytes (<code>node_memory_MemAvailable_bytes</code>):</p>

<p><img src="https://user-images.githubusercontent.com/567298/57307338-aa170300-70e4-11e9-9022-e02a4d1d64cf.png" alt="image" /></p>

<p>Now since the value is in bytes, let&rsquo;s convert the value to MB, (<code>node_memory_MemAvailable_bytes/1024/1024</code>)</p>

<p><img src="https://user-images.githubusercontent.com/567298/57307421-d468c080-70e4-11e9-8bd3-425803cb805c.png" alt="image" /></p>

<p>Let&rsquo;s say we want to see the average memory available in 5 minute buckets:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57307504-feba7e00-70e4-11e9-952f-a7ba12eba6a8.png" alt="image" /></p>

<p>That&rsquo;s a few basic ones, but feel free to checkout my <a href="https://github.com/ruanbekker/awesome-list/blob/master/cheatsheets/PROMETHEUS.md">Prometheus Cheatsheet</a> for other examples. I update them as I find more queries.</p>

<h2>Thanks</h2>

<p>Hope this was informative. I am planning to publish a post on visualizing prometheus data with Grafana (which is EPIC!) and installing Pushgateway for custom integrations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup NRPE Client and Server for Monitoring Remote Services in Nagios]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/03/18/setup-nrpe-client-and-server-for-monitoring-remote-services-in-nagios/"/>
    <updated>2019-03-18T12:49:59-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/03/18/setup-nrpe-client-and-server-for-monitoring-remote-services-in-nagios</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/54547916-65f26680-49af-11e9-8d42-e27c57ef8e2e.png" alt="" /></p>

<p>If you have not setup the <a href="https://blog.ruanbekker.com/blog/2019/03/13/how-to-setup-a-nagios-monitoring-server/">Nagios Server</a> have a look at that link to setup the Nagios server.</p>

<h2>Nagios NRPE</h2>

<p>Nagios Remote Plugin Executor (NRPE) allows you to remotely execute Nagios plugins on other linux systems. This allows you to monitor remote machine metrics (disk usage, CPU, local listening services, etc.).</p>

<p>NRPE has 2 sections:</p>

<ul>
<li>The nagios server side.</li>
<li>The client side.</li>
</ul>


<p>For nagios to execute remote plugins, the client configuration needs to allow the nrpe server which will be nagios.</p>

<p>Download, extract, configure and install NRPE server:</p>

<pre><code>$ wget 'https://github.com/NagiosEnterprises/nrpe/releases/download/nrpe-3.2.1/nrpe-3.2.1.tar.gz'
$ tar -xvf nrpe-3.2.1.tar.gz
$ cd nrpe-3.2.1
$ ./configure --enable-command-args --with-nagios-user=nagios --with-nagios-group=nagcmd --with-ssl=/usr/bin/openssl --with-ssl-lib=/usr/lib/x86_64-linux-gnu
$ make all
$ make install
$ make install-init
$ make install-config
$ systemctl enable nrpe.service
</code></pre>

<p>Installing NRPE on the client side:</p>

<pre><code>$ apt update &amp;&amp; apt install nagios-nrpe-server -y
$ systemctl enable nagios-nrpe-server
$ systemctl start nagios-nrpe-server
</code></pre>

<p>Allow your nagios server ip in <code>/etc/nagios/nrpe.cfg</code>:</p>

<pre><code>allowed_hosts=nagios.ip.in.here
</code></pre>

<p>Restart NRPE on the client:</p>

<pre><code>$ systemctl restart nagios-nrpe-server
</code></pre>

<p>Ensure that the <code>check_nrpe</code> plugin is configured and available in the commands.cfg configuration for the nagios server:</p>

<pre><code>$ vi /usr/local/nagios/etc/objects/commands.cfg

define command {
    command_name check_nrpe
    command_line $USER1$/check_nrpe -H $HOSTADDRESS$ -c $ARG1$
}
</code></pre>

<p>Check <a href="">this</a> out how to create a python nrpe nagios plugin to check disk space on the client host</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitor Your First Host and Services With Nagios]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/03/18/monitor-your-first-host-and-services-with-nagios/"/>
    <updated>2019-03-18T12:49:23-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/03/18/monitor-your-first-host-and-services-with-nagios</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/54547916-65f26680-49af-11e9-8d42-e27c57ef8e2e.png" alt="" /></p>

<p>If you have not setup the <a href="https://blog.ruanbekker.com/blog/2019/03/13/how-to-setup-a-nagios-monitoring-server/">Nagios Server</a> have a look at that link to setup the Nagios server.</p>

<h2>Configure Nagios to Monitor our first Host</h2>

<p>I like to setup an isolated path for my custom host/service configigurations. First we will declare the configuration path for our servers.</p>

<p>Open up: <code>/usr/local/nagios/etc/nagios.cfg</code> and add a new cfg_dir:</p>

<pre><code>cfg_dir=/usr/local/nagios/etc/servers
</code></pre>

<p>Now, create the directory:</p>

<pre><code>$ mkdir /usr/local/nagios/etc/servers
</code></pre>

<p>Configure your email address for notifications in <code>/usr/local/nagios/etc/objects/contacts.cfg</code> and configure:</p>

<pre><code>email     youremail@yourdomain.com;
</code></pre>

<p>Let&rsquo;s say we want to configure a web server named web01 that sits at the location 10.10.10.10:</p>

<pre><code>$ vi /usr/local/nagios/etc/servers/webservers.cfg
</code></pre>

<p>First we define our host configuration:</p>

<ol>
<li>We are using the <code>linux-server</code> template that is defined in <code>/usr/local/nagios/etc/objects/templates.cfg</code></li>
<li>We set the hostname, alias and address as well as notification prediods</li>
</ol>


<pre><code>define host {
    use                      linux-server
    host_name                WEB01
    alias                    WEB01
    address                  10.10.10.10
    max_check_attempts       5
    check_period             24x7
    notification_interval    30
    notification_period      24x7
}
</code></pre>

<p>While you have the config open, we want to define the services that we would like to monitor, and associate the services to the host that we defined.</p>

<p>In this example, we want to ping the server and check port tcp 22 and 80. Ensure that your web server is allowing the mentioned ports from the nagios server ip.</p>

<p>In the config, we are declaring the following:</p>

<ol>
<li>Use the <code>generic-service</code> template</li>
<li>Map the hostname which the service should be associated to</li>
<li>The description that you will see in nagios</li>
<li>Use the check_ping / check_ssh / check_http plugin and set the thresholds for ok, warning, critical</li>
</ol>


<pre><code>define service {
    use                    generic-service
    host_name              WEB01
    service_description    PING
    check_command          check_ping!100.0,20%!500.0,60%
}

define service {
    use                      generic-service
    host_name                WEB01
    service_description      SSH
    check_command            check_ssh
    notifications_enabled    1
}

define service {
    use                      generic-service
    host_name                WEB01
    service_description      HTTP
    check_command            check_http
    notifications_enabled    1
}
</code></pre>

<p>Save the config, test the config:</p>

<pre><code>$ /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios
</code></pre>

<p>If you don&rsquo;t see any errors, go ahead and restart to apply the configs:</p>

<pre><code>$ systemctl restart nagios
$ systemctl restart apache2
</code></pre>

<p>Head over to nagios user interface at <a href="http://nagios-ip/nagios">http://nagios-ip/nagios</a> and you should see that the services are scheduled to be checked and should be reflecting in a minute or two.</p>

<h2>Up Next</h2>

<p>Next up, <a href="https://blog.ruanbekker.com/blog/2019/03/18/setup-nrpe-client-and-server-for-monitoring-remote-services-in-nagios/">Setup the NRPE Server and Client</a> to monitor remote systems using the nrpe plugin.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Setup the NagiosGraph Plugin on Nagios Monitoring Server]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/03/18/how-to-setup-the-nagiosgraph-plugin-on-nagios-monitoring-server/"/>
    <updated>2019-03-18T12:27:11-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/03/18/how-to-setup-the-nagiosgraph-plugin-on-nagios-monitoring-server</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/54547916-65f26680-49af-11e9-8d42-e27c57ef8e2e.png" alt="" /></p>

<p>If you have not setup the <a href="https://blog.ruanbekker.com/blog/2019/03/13/how-to-setup-a-nagios-monitoring-server/">Nagios Server</a> have a look at that link to setup the Nagios server.</p>

<h2>NagiosGraph</h2>

<p>In this post we will setup the nagiosgraph plugin to graph performance data of our monitored host and services.</p>

<h2>Download and Install</h2>

<p>Download the nagiosgraph plugin and extract:</p>

<pre><code>$ wget 'https://downloads.sourceforge.net/project/nagiosgraph/nagiosgraph/1.5.2/nagiosgraph-1.5.2.tar.gz' -O nagiosgraph-1.5.2.tar.gz
$ tar -xvf nagiosgraph-1.5.2.tar.gz
</code></pre>

<p>Install dependencies and install the nagiosgraph plugin:</p>

<pre><code>$ apt install libnet-snmp-perl libsensors4 libsnmp-base libtalloc2 libtdb1 libwbclient0  snmp whois mrtg  libcgi-pm-perl librrds-perl libgd-perl libnagios-object-perl nagios-plugins-contrib
$ ./install.pl --check-prereq
$ ./install.pl --layout standalone --prefix /usr/local/nagiosgraph


Destination directory (prefix)? [/usr/local/nagiosgraph]
Location of configuration files (etc-dir)? [/usr/local/nagiosgraph/etc]
Location of executables? [/usr/local/nagiosgraph/bin]
Location of CGI scripts? [/usr/local/nagiosgraph/cgi]
Location of documentation (doc-dir)? [/usr/local/nagiosgraph/doc]
Location of examples? [/usr/local/nagiosgraph/examples]
Location of CSS and JavaScript files? [/usr/local/nagiosgraph/share]
Location of utilities? [/usr/local/nagiosgraph/util]
Location of state files (var-dir)? [/usr/local/nagiosgraph/var]
Location of RRD files? [/usr/local/nagiosgraph/var/rrd]
Location of log files (log-dir)? [/usr/local/nagiosgraph/var/log]
Path of log file? [/usr/local/nagiosgraph/var/log/nagiosgraph.log]
Path of CGI log file? [/usr/local/nagiosgraph/var/log/nagiosgraph-cgi.log]
Base URL? [/nagiosgraph]
URL of CGI scripts? [/nagiosgraph/cgi-bin]
URL of CSS file? [/nagiosgraph/nagiosgraph.css]
URL of JavaScript file? [/nagiosgraph/nagiosgraph.js]
URL of Nagios CGI scripts? [/nagios/cgi-bin]
Path of Nagios performance data file? [/tmp/perfdata.log]
username or userid of Nagios user? [nagios]
username or userid of web server user? [www-data]
Modify the Nagios configuration? [n] y
Path of Nagios configuration file? [/usr/local/nagios/etc/nagios.cfg]
Path of Nagios commands file? [/usr/local/nagios/etc/objects/commands.cfg]
Modify the Apache configuration? [n] y
Path of Apache configuration directory? /etc/apache2/sites-enabled
</code></pre>

<p>Ensure that your nagiosgraph configuration under apache: <code>/etc/apache2/sites-enabled/nagiosgraph.conf</code> has the following config (might be standard)</p>

<p><img src="https://user-images.githubusercontent.com/567298/54547000-946f4200-49ad-11e9-933e-b0e8b19bf014.png" alt="" /></p>

<p>Ensure the following configuration is set under nagios main config:</p>

<pre><code>$ vi /usr/local/nagios/etc/nagios.cfg

process_performance_data=1 
service_perfdata_file=/usr/local/nagios/var/service-perfdata.log 
service_perfdata_file_template=$LASTSERVICECHECK$||$HOSTNAME$||$SERVICEDESC$||$SERVICEOUTPUT$||$SERVICEPERFDATA$ 
service_perfdata_file_mode=a 
service_perfdata_file_processing_interval=30 
service_perfdata_file_processing_command=process-service-perfdata-for-nagiosgraph
</code></pre>

<p>Ensure that we have the following commands in place for nagiosgraph:</p>

<pre><code>$ vi /usr/local/nagios/etc/objects/commands.cfg

define command {
  command_name process-service-perfdata-for-nagiosgraph
  command_line /usr/local/nagiosgraph/bin/insert.pl
}
</code></pre>

<p>Create the template <code>graphed-service</code>, this will be mapped to each service that needs to be graphed in nagiosgraph:</p>

<pre><code>$ vi /usr/local/nagios/etc/objects/templates.cfg

define service {
      name              graphed-service
      action_url        /nagiosgraph/cgi-bin/show.cgi?host=$HOSTNAME$&amp;service=$SERVICEDESC$' onMouseOver='showGraphPopup(this)' onMouseOut='hideGraphPopup()' rel='/nagiosgraph/cgi-bin/showgraph.cgi?host=$HOSTNAME$&amp;service=$SERVICEDESC$&amp;period=week&amp;rrdopts=-w+450+-j
      register        0
      }
</code></pre>

<p>Next configure the services that needs to be graphed on nagios graph. Note, we only need to append the service template that we defined in our template configuration from above:</p>

<p>Note, if you have not checked out <a href="https://blog.ruanbekker.com/blog/2019/03/13/how-to-setup-a-nagios-monitoring-server/">Nagios Server Setup</a> post, in that post the inital configuration of the below config is explained.</p>

<pre><code>$ vi /usr/local/nagios/etc/servers/vpn.cfg

define host {
    use                      linux-server
    host_name                WEB01
    alias                    WEB01
    address                  10.10.10.10
    max_check_attempts       5
    check_period             24x7
    notification_interval    30
    notification_period      24x7
}

define service {
    use                    generic-service,graphed-service
    host_name              WEB01
    service_description    PING
    check_command          check_ping!100.0,20%!500.0,60%
}

define service {
    use                      generic-service,graphed-service
    host_name                WEB01
    service_description      SSH
    check_command            check_ssh
    notifications_enabled    1
}

define service {
    use                      generic-service,graphed-service
    host_name                WEB01
    service_description      HTTP
    check_command            check_http
    notifications_enabled    1
}
</code></pre>

<p>Test the nagios config and restart if there are no warnings:</p>

<pre><code>$ /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg
$ systemctl restart nagios
$ systemctl restart apache2
</code></pre>

<p>Access your nagios server at <a href="http://nagios-ip/nagios">http://nagios-ip/nagios</a> and you will find that the graph icon next to the service will open the graph in a new tab, like the screenshot below:</p>

<p><img src="https://user-images.githubusercontent.com/567298/54546912-5d992c00-49ad-11e9-8a7a-331578d20f5b.png" alt="" /></p>

<h2>Up Next</h2>

<p>Next, <a href="https://blog.ruanbekker.com/blog/2019/03/18/monitor-your-first-host-and-services-with-nagios/">Monitor your first Server with Nagios</a></p>
]]></content>
  </entry>
  
</feed>
