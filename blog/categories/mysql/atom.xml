<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mysql | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2017-11-22T09:08:15-05:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Local Dev Environment With Docker MySQL and Adminer WebUI With Docker Compose]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/11/13/local-dev-environment-with-docker-mysql-and-adminer-webui-with-docker-compose/"/>
    <updated>2017-11-13T16:15:34-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/11/13/local-dev-environment-with-docker-mysql-and-adminer-webui-with-docker-compose</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s setup a local development environment with Docker, MySQL and Adminer WebUI using Docker Compose</p>

<h2>Docker Compose File:</h2>

<p>Let&rsquo;s look at our docker-compose file:</p>

<pre><code class="yml">version: '3.2'

services:
  mysql-client:
    image: alpine:edge
    volumes:
      - type: bind
        source: ./workspace
        target: /root/workspace
    networks:
      - docknet
    command: ping 127.0.0.1

  db:
    image: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: example
    networks:
      - docknet
    volumes:
      - type: volume
        source: dbdata
        target: /var/lib/mysql

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - docknet

networks:
    docknet:
        external: true

volumes:
  dbdata:
    external: true
</code></pre>

<h2>Pre-Requirements:</h2>

<p>Let&rsquo;s create our pre-requirement:</p>

<ol>
<li>Networks:</li>
</ol>


<pre><code class="bash">$ docker network create docknet
</code></pre>

<ol>
<li>Volumes:</li>
</ol>


<p>Our Volume for MySQL so that we have persistent data:</p>

<pre><code class="bash">$ docker volume create dbdata
</code></pre>

<p>Our <code>workspace</code> directory that will be persistent in our <code>debug-client</code> alpine container:</p>

<pre><code class="bash">$ mkdir -p workspace/python
</code></pre>

<h2>Launching our Services:</h2>

<p>Let&rsquo;s launch our services:</p>

<pre><code class="bash ">$ docker-compose -f mysql-compose.yml up -d
Creating mysql_db_1 ...
Creating mysql_adminer_1
Creating mysql_debug-client_1
</code></pre>

<p>Listing our Containers:</p>

<pre><code class="bash">$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                      NAMES
e05804ab6d64        alpine:edge         "ping 127.0.0.1"         21 seconds ago      Up 4 seconds                                   mysql_debug-client_1
c052ceeb6d3b        mysql               "docker-entrypoint..."   21 seconds ago      Up 5 seconds        3306/tcp                   mysql_db_1
2b0446daab4c        adminer             "entrypoint.sh doc..."   26 seconds ago      Up 5 seconds        0.0.0.0:8080-&gt;8080/tcp     mysql_adminer_1
</code></pre>

<h2>Using the Debug Container:</h2>

<p>I will use the debug container as the client to connect to the internal services, for example, the mysql-client:</p>

<pre><code class="bash">$ apk update
$ apk add mysql-client
$ mysql -h db -u root -ppassword
MySQL [(none)]&gt;
</code></pre>

<p>Also, you will find the persistent data directory for our workspace:</p>

<pre><code class="bash">$ ls /root/workspace/
python
</code></pre>

<h2>Accessing the MySQL WebUI: Adminer</h2>

<p>Access the service via the exposed endpoint:</p>

<pre><code class="bash">+ http://localhost:8080/
</code></pre>

<p>The login view:</p>

<p><img src="https://i.snag.gy/m8dUxe.jpg" alt="" /></p>

<p>Creating the Table:</p>

<p><img src="https://i.snag.gy/tPVbg6.jpg" alt="" /></p>

<h2>Deleting the Environment:</h2>

<p>The External Resources will not be deleted:</p>

<pre><code class="bash">$ docker-compose -f mysql-compose.yml down
Removing mysql_debug-client_1 ... done
Removing mysql_db_1           ... done
Removing mysql_adminer_1      ... done
Network docknet is external, skipping
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Python to Query MySQL Database With MySQLdb Library]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/26/using-python-to-query-mysql-database-with-mysqldb-library/"/>
    <updated>2017-10-26T03:40:11-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/26/using-python-to-query-mysql-database-with-mysqldb-library</id>
    <content type="html"><![CDATA[<p>a Quick post to demostrate how to use Python to Query data from MySQL. We will use the MySQL Docker Image for the demonstration.</p>

<h2>Provision MySQL</h2>

<p>We will use the latest mysql image, and use the environment variable to pass the root password, and also expose the mysql port:</p>

<pre><code class="bash">$ docker run -itd -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password mysql
</code></pre>

<h2>Populate some data in MySQL</h2>

<p>Connect to MySQL:</p>

<pre><code class="bash">$ mysql -h 127.0.0.1 -u root -ppasword
</code></pre>

<p>Create some test data:</p>

<pre><code class="sql">mysql&gt; create database foo;
mysql&gt; use foo;
mysql&gt; create table bar (name VARCHAR(20), surname VARCHAR(20));
mysql&gt; insert into bar values('ruan', 'bekker');
mysql&gt; insert into bar values('stefan', 'bester');
mysql&gt; insert into bar values('peter', 'williams');
</code></pre>

<h2>Python with MySQL: Setup the Environment</h2>

<p>We will use virtualenv to create a virtual environment to keep our installation isolated from the rest of our system. Install virtualenv:</p>

<pre><code class="bash">$ pip install virtualenv
</code></pre>

<p>Create a virtual environment and install the required dependency:</p>

<pre><code class="bash">$ virtualenv venv-mysql
$ source venv-mysql/bin/activate
(venv-mysql) pip install MySQL-python
</code></pre>

<h2>Python with MySQL: Develop the Client</h2>

<pre><code class="python">&gt;&gt;&gt; import MySQLdb
&gt;&gt;&gt; db = MySQLdb.connect('127.0.0.1', 'root', 'password', 'foo')
&gt;&gt;&gt; con = db.cursor()
&gt;&gt;&gt; con.execute("SELECT * from bar")
4L
&gt;&gt;&gt; rows = con.fetchall()
&gt;&gt;&gt; for row in rows:
...     print(row[0], row[1])
... 
('ruan', 'bekker')
('stefan', 'bester')
('peter', 'williams')
&gt;&gt;&gt; exit()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Python to Write Data to a MySQL Database]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/09/using-python-to-write-data-to-a-mysql-database/"/>
    <updated>2017-09-09T16:39:59-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/09/using-python-to-write-data-to-a-mysql-database</id>
    <content type="html"><![CDATA[<p>From our <a href="http://blog.ruanbekker.com/blog/2017/09/09/using-python-to-read-data-from-a-mysql-database/">previous</a> post, we used python to read data from mysql. In this post we will be using the <code>random</code> library to write random data into mysql.</p>

<p>We will define our lists with the categorized data, and then using for loop, to write data into our mysql database:</p>

<h2>Create The Database:</h2>

<p>Using Python to Create the Database:</p>

<pre><code class="python">&gt;&gt;&gt; conn = pdb.connect(host=db_host, user=db_username, passwd=db_password)
&gt;&gt;&gt; cursor = conn.cursor()
&gt;&gt;&gt; cursor.execute("CREATE DATABASE testdb1")
1L
&gt;&gt;&gt; cursor.execute("CREATE TABLE testdb1.myusers(name VARCHAR(50), surname VARCHAR(50), countries VARCHAR(50), job VARCHAR(20), os VARCHAR(20), car VARCHAR(20))")
0L
</code></pre>

<p>Now to list our databases:</p>

<pre><code class="python">&gt;&gt;&gt; cursor.execute("show databases")
12L

&gt;&gt;&gt; dbs = cursor.fetchall()
&gt;&gt;&gt; for x in dbs:
...     print(x)
...

('information_schema',)
('mysql',)
('performance_schema',)
('testdb1',)
</code></pre>

<h2>Python Code to Write to MySQL</h2>

<p>We will create a <code>mysql_write.py</code> file, with the following contents to define our random data that we will write to our mysql database. The config module can be found from <a href="http://blog.ruanbekker.com/blog/2017/09/09/using-python-to-read-data-from-a-mysql-database/">this</a> post.</p>

<pre><code class="python mysql_write.py">import MySQLdb as pdb
from config import credentials as secrets
import random
import datetime

db_host = secrets['mysql']['host']
db_username = secrets['mysql']['username']
db_password = secrets['mysql']['password']
db_name = secrets['mysql']['database']

for x in range(10):
    a = random.choice(names)
    b = random.choice(surnames)
    c = random.choice(countries)
    d = random.choice(job)
    e = random.choice(os)
    f = random.choice(car)

    cursor.execute("INSERT INTO myusers values('{name}', '{surname}', '{countries}', '{job}', '{os}', '{car}');".format(name=a, surname=b, countries=c, job=d, os=e, car=f))

conn.commit()
conn.close()
</code></pre>

<p>After running the file: <code>python mysql_write.py</code> we should have 10 records in our database.</p>

<h2>Reading the Data from MySQLL</h2>

<p>To verify that the data is in our MySQL Database, lets logon to our mysql database:</p>

<pre><code class="bash">$ mysql -u root -p
</code></pre>

<pre><code class="mysql">mysql&gt; select * from testdb1.myusers;
+----------+----------+-----------+----------------+---------+---------------+
| name     | surname  | countries | job            | os      | car           |
+----------+----------+-----------+----------------+---------+---------------+
| James    | James    | New York  | Waiter         | Mac     | Volkswagen    |
| Jennifer | Smith    | New York  | Scientist      | Windows | Audi          |
| Michelle | Jacobs   | Italy     | Police Officer | Mac     | Ford          |
| Michelle | Anderson | Italy     | Waiter         | Windows | Ford          |
| Jennifer | Smith    | England   | Doctor         | Windows | Toyota        |
| Peter    | Jacobs   | England   | IT             | Windows | BMW           |
| Samantha | James    | England   | Doctor         | Mac     | Mazda         |
| Frank    | Phillips | England   | IT             | Mac     | BMW           |
| Samantha | James    | England   | Banker         | Linux   | Mercedez-Benz |
| Peter    | Anderson | Sweden    | Doctor         | Windows | BMW           |
+----------+----------+-----------+----------------+---------+---------------+
</code></pre>

<p>Next, lets use Python to do the same, create a file <code>mysql_read.py</code> with the following content:</p>

<pre><code class="python">import MySQLdb as pdb
from config import credentials as secrets

db_host = secrets['mysql']['host']
db_username = secrets['mysql']['username']
db_password = secrets['mysql']['password']
db_name = secrets['mysql']['database']

conn = pdb.connect(host=db_host, user=db_username, passwd=db_password, db=db_name)
cursor = conn.cursor()

cursor.execute("select * from myusers")
read = cursor.fetchall()

for x in read:
    print(x)

conn.close()
</code></pre>

<p>Running the Python file, to read the data:</p>

<pre><code class="bash">$ python mysql_read.py

('James', 'James', 'New York', 'Waiter', 'Mac', 'Volkswagen')
('Jennifer', 'Smith', 'New York', 'Scientist', 'Windows', 'Audi')
('Michelle', 'Jacobs', 'Italy', 'Police Officer', 'Mac', 'Ford')
('Michelle', 'Anderson', 'Italy', 'Waiter', 'Windows', 'Ford')
('Jennifer', 'Smith', 'England', 'Doctor', 'Windows', 'Toyota')
('Peter', 'Jacobs', 'England', 'IT', 'Windows', 'BMW')
('Samantha', 'James', 'England', 'Doctor', 'Mac', 'Mazda')
('Frank', 'Phillips', 'England', 'IT', 'Mac', 'BMW')
('Samantha', 'James', 'England', 'Banker', 'Linux', 'Mercedez-Benz')
('Peter', 'Anderson', 'Sweden', 'Doctor', 'Windows', 'BMW')
</code></pre>

<center>
        <script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script>
</center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Python to Read Data From a MySQL Database]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/09/using-python-to-read-data-from-a-mysql-database/"/>
    <updated>2017-09-09T15:23:05-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/09/using-python-to-read-data-from-a-mysql-database</id>
    <content type="html"><![CDATA[<p>Wanted to use Python to read some data from MySQL and stumbled upon a couple of great resources, which I noted some of my output below:</p>

<h2>Install Dependencies:</h2>

<pre><code class="bash ">$ apt install python-dev libmysqlclient-dev python-setuptools gcc
$ easy_install pip
$ pip install MySQL-python
</code></pre>

<h2>Download Some Sample Data:</h2>

<p>Download the world dataset for MySQL:</p>

<pre><code class="bash">$ wget http://downloads.mysql.com/docs/world.sql.zip
$ unzip world.sql.zip
</code></pre>

<h2>Create Database:</h2>

<p>Create the Database in MySQL for the dataset that we downloaded:</p>

<pre><code class="bash">$ mysql -u root -p -e'CREATE DATABASE world;'
</code></pre>

<h2>Import Data:</h2>

<p>Import the data into the <code>world</code> database:</p>

<pre><code class="bash">$ mysql -u root -p world &lt; world.sql
</code></pre>

<h2>Create the MySQL Credentials File:</h2>

<p>Create a <code>config.py</code> file and populate the credentials in a dictionary:</p>

<pre><code class="python">credentials = {
    'mysql': {
        'host': 'localhost',
        'username': 'root',
        'password': 'password',
        'database': 'world'
    }
}
</code></pre>

<h2>Run Queries from Python:</h2>

<p>Enter the Python interpreter and run some queries:</p>

<pre><code class="python">&gt;&gt;&gt; import MySQLdb as pdb
&gt;&gt;&gt; from config import credentials as secrets

# assignments 
&gt;&gt;&gt; db_host = secrets['mysql']['host']
&gt;&gt;&gt; db_username = secrets['mysql']['username']
&gt;&gt;&gt; db_password = secrets['mysql']['password']
&gt;&gt;&gt; db_name = secrets['mysql']['database']

# create a connection to the database
&gt;&gt;&gt; conn = pdb.connect(host=db_host, user=db_username, passwd=db_password, db=db_name)

# create a object for the queries we will be using
&gt;&gt;&gt; cursor = conn.cursor()

# execute the query
&gt;&gt;&gt; cursor.execute('select continent, name from country where continent = "Africa" limit 5')
5L

# fetch the results by assigning it to the results object:
&gt;&gt;&gt; results = cursor.fetchall()

# loop and print results:
&gt;&gt;&gt; for x in results:
...     print(x)
...
('Africa', 'Angola')
('Africa', 'Burundi')
('Africa', 'Benin')
('Africa', 'Burkina Faso')
('Africa', 'Botswana')

# close the connection
&gt;&gt;&gt; conn.close()
</code></pre>

<h2>Graphing Results to Plotly:</h2>

<p>A great <a href="http://moderndata.plot.ly/graph-data-from-mysql-database-in-python/">blogpost</a> that shows how to use this data to graph the results to plotly</p>

<h2>Resources:</h2>

<ul>
<li><a href="http://moderndata.plot.ly/graph-data-from-mysql-database-in-python/">http://moderndata.plot.ly/graph-data-from-mysql-database-in-python/</a></li>
<li><a href="https://stackoverflow.com/questions/11007627/python-variable-declaration">https://stackoverflow.com/questions/11007627/python-variable-declaration</a></li>
</ul>


<center>
        <script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script>
</center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup HAProxy Load Balancer for MySQL Galera With IP Whitelisting and Backup Servers]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/08/31/setup-haproxy-load-balancer-for-mysql-galera-with-ip-whitelisting-and-backup-servers/"/>
    <updated>2017-08-31T19:15:50-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/08/31/setup-haproxy-load-balancer-for-mysql-galera-with-ip-whitelisting-and-backup-servers</id>
    <content type="html"><![CDATA[<p>Today we will setup a HAProxy Service for our 3 Node MySQL Galera Cluster</p>

<h2>Our Setup:</h2>

<ul>
<li>3 Node Galera MySQL Cluster</li>
<li>3 HAProxy Services (Each HAProxy Service Running on the MySQL Nodes)</li>
<li>MySQL Listens on Port 3307</li>
<li>HAProxy Listens on Port 3306 and Proxies through to 3307</li>
</ul>


<p>I have setup HAProxy on the same node as the MySQL Servers for my use case, but you can also setup HAProxy on a node outside the MySQL Host.</p>

<p>So essentially our MySQL Galera Cluster is a Multi Master Setup, but for now we will only accept connections from Node-A, and have Node-B and Node-C as Backup servers. Should Node-A go down, HAProxy will route connections to Node-B, and if Node-B also goes down, connections will be routed to Node-C.</p>

<p>If the Primary Node, which is Node-A recovers, connections will be restored to Node-A.</p>

<h2>Security:</h2>

<p>We use iptables to allow traffic between the nodes for port TCP/3307 and allow all traffic for Port TCP/3306, as HAProxy will allow the IP Based Access:</p>

<pre><code class="bash Iptables for Each Node">$ iptables -I INPUT -s {Node-A} -p tcp --dport 3307 -j ACCEPT
$ iptables -I INPUT -s {Node-B} -p tcp --dport 3307 -j ACCEPT
$ iptables -I INPUT -s {Node-C} -p tcp --dport 3307 -j ACCEPT
$ iptables -A INPUT -p tcp --dport 3306 -j ACCEPT
$ iptables -A INPUT -p tcp --dport 3307 -j DROP
</code></pre>

<h2>HAProxy:</h2>

<p>Installing HAProxy on Ubuntu:</p>

<pre><code class="bash Install HAProxy">$ sudo apt update 
$ sudo apt install haproxy -y
</code></pre>

<p>Configure HAProxy with a Port 3306 listener, specify your source addresses that you would like to be authorized to communicate with MySQL and then specify the servers to proxy the connections to our MySQL Galera Cluster, specifying 2 backup servers:</p>

<pre><code class="bash /etc/haproxy/haproxy.cfg">global
  log         127.0.0.1 local2
  chroot      /var/lib/haproxy
  pidfile     /var/run/haproxy.pid
  maxconn     1020
  user        haproxy
  group       haproxy
  daemon

  stats socket /var/lib/haproxy/stats.sock mode 600 level admin
  stats timeout 2m

defaults
  mode    tcp
  log     global
  option  dontlognull
  option  redispatch
  retries                   3
  timeout queue             45s
  timeout connect           5s
  timeout client            1m
  timeout server            1m
  timeout check             10s
  maxconn                   1020

listen stats
  bind    *:80
  mode    http
  stats   enable
  stats   show-legends
  stats   refresh           5s
  stats   uri               /
  stats   realm             Haproxy\ Statistics
  stats   auth              admin:secret
  stats   admin             if TRUE

listen galera-lb
  bind    *:3306
  mode    tcp
  acl     network_allowed src 10.10.1.0/24 10.32.15.2/32
  tcp-request               content accept if network_allowed
  tcp-request               content reject
  default_backend           galera-cluster

backend galera-cluster
  balance roundrobin
  server  scw-mysql-1 10.0.0.2:3307  check
  server  scw-mysql-2 10.0.0.3:3307  check backup
  server  scw-mysql-3 10.0.0.4:3307  check backup
</code></pre>

<p>Start HAProxy:</p>

<pre><code class="bash Start HAProxy Service">$ sudo systemctl enable haproxy
$ sudo systemctl restart haproxy
</code></pre>

<h2>Authorize HAProxy Hostnames to Connect to MySQL:</h2>

<p>In this case we need to allow the Hostnames to be able to connect to mysql:</p>

<pre><code class="sql">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'secrets' WITH GRANT OPTION;
mysql&gt; FLUSH PRIVILEGES;
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://raymii.org/s/snippets/haproxy_restrict_specific_urls_to_specific_ip_addresses.html">https://raymii.org/s/snippets/haproxy_restrict_specific_urls_to_specific_ip_addresses.html</a></li>
</ul>


<center>
        <script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script>
</center>



]]></content>
  </entry>
  
</feed>
