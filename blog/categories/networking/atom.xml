<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Networking | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/networking/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-12-19T06:38:41-05:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup a PPTP VPN on Ubuntu]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/06/27/setup-a-pptp-vpn-on-ubuntu/"/>
    <updated>2018-06-27T04:18:51-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/06/27/setup-a-pptp-vpn-on-ubuntu</id>
    <content type="html"><![CDATA[<p>In this post we will setup a <a href="https://en.wikipedia.org/wiki/Point-to-Point_Tunneling_Protocol">PPTP</a> VPN on Ubuntu 16.04</p>

<script id="mNCC" language="javascript">
    medianet_width = "728";
    medianet_height = "90";
    medianet_crid = "218284798";
    medianet_versionId = "3111299"; 
  </script>


<script src="//contextual.media.net/nmedianet.js?cid=8CUD78FSV"></script>


<h2>Disable IPv6 Networking:</h2>

<p>Edit the grub config:</p>

<pre><code class="bash">$ vi /etc/default/grub
</code></pre>

<p>Make the following changes:</p>

<pre><code>GRUB_CMDLINE_LINUX_DEFAULT="ipv6.disable=1"
GRUB_CMDLINE_LINUX="ipv6.disable=1"
</code></pre>

<p>Update Grub and Reboot:</p>

<pre><code class="bash">$ update-grub
$ reboot
</code></pre>

<h2>Updates and Install PPTP:</h2>

<p>Update Repositories and install PPTPD:</p>

<pre><code class="bash">$ apt update &amp;&amp; apt upgrade -y
$ apt install pptpd -y
</code></pre>

<p>Configure your Authentication</p>

<pre><code class="bash">$ vi /etc/ppp/chap-secrets
</code></pre>

<pre><code># client    server  secret          IP addresses
youruser    pptpd   yourpass        *
</code></pre>

<p>Configure Local and Remote IP, in this case I want 10.1.1.2 to 10.1.5.1-254</p>

<pre><code class="bash">$ vi /etc/pptpd.conf
</code></pre>

<pre><code>option /etc/ppp/pptpd-options
logwtmp
connections 10000
localip 10.1.1.1
remoteip 10.1.1.2-254,10.1.2.1-254,10.1.3.2-254,10.1.4.1-254,10.1.5.1-254
# for a /24 you can set
# remoteip 10.1.1.2-254
</code></pre>

<h2>Enable IP Forwarding:</h2>

<p>Edit the sysctl.conf and enable IP Forwarding:</p>

<pre><code class="bash">$ vim /etc/sysctl.conf
</code></pre>

<p>Populate the following value:</p>

<pre><code>net.ipv4.ip_forward=1
</code></pre>

<p>Update the Changes:</p>

<pre><code class="bash">$ sysctl -p
</code></pre>

<h2>Enable and Start PPTPD:</h2>

<p>Enable the service on boot and start the service:</p>

<pre><code class="bash">$ systemctl enable pptpd
$ systemctl start pptpd
$ systemctl status pptpd
</code></pre>

<p>Connect to your VPN.</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://www.vultr.com/docs/setup-a-pptp-vpn-server-on-ubuntu">https://www.vultr.com/docs/setup-a-pptp-vpn-server-on-ubuntu</a></li>
<li><a href="https://github.com/viljoviitanen/setup-simple-pptp-vpn">https://github.com/viljoviitanen/setup-simple-pptp-vpn</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Peer to Peer VPN With VPNCloud on Ubuntu]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/06/02/setup-a-peer-to-peer-vpn-with-vpncloud-on-ubuntu/"/>
    <updated>2018-06-02T14:15:33-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/06/02/setup-a-peer-to-peer-vpn-with-vpncloud-on-ubuntu</id>
    <content type="html"><![CDATA[<p>So I got 3 Dedicated Servers each having its own Static IP and I wanted a way to build a private network between these servers.</p>

<script id="mNCC" language="javascript">
    medianet_width = "728";
    medianet_height = "90";
    medianet_crid = "218284798";
    medianet_versionId = "3111299"; 
  </script>


<script src="//contextual.media.net/nmedianet.js?cid=8CUD78FSV"></script>


<h2>The Scenario:</h2>

<p>3 Servers with the following IP&rsquo;s (not real IP addresses):</p>

<pre><code>- Server 1: 52.1.99.10
- Server 2: 52.1.84.20
- Server 3: 52.1.49.30
</code></pre>

<p>So I want to have a private network, so that I can have the following internal network:</p>

<pre><code>- Server 1: 10.0.1.1
- Server 2: 10.0.1.2
- Server 3: 10.0.1.3
</code></pre>

<p>A couple of years ago, I accomplished the end goal using GRE Tunnels, which works well, but wanted to try something different.</p>

<h2>VPNCloud</h2>

<p>So I stumbled upon VPNCloud.rs, which is a peer to peer VPN. Their description, quoted from their Github page:</p>

<p>&ldquo;VpnCloud is a simple VPN over UDP. It creates a virtual network interface on the host and forwards all received data via UDP to the destination. VpnCloud establishes a fully-meshed VPN network in a peer-to-peer manner. It can work on TUN devices (IP based) and TAP devices (Ethernet based).&rdquo;</p>

<p>This is exactly what I was looking for.</p>

<h2>Setting up a 3 node Private Network:</h2>

<p>Given the IP configuration above, we will setup a Private network between our 3 hosts.</p>

<p>Do some updates then grab the package from <a href="https://github.com/dswd/vpncloud.rs/releases">Github</a> and install VPNCloud:</p>

<pre><code class="bash ">$ apt update &amp;&amp; apt ugprade -y
$ wget https://github.com/dswd/vpncloud.rs/releases/download/v0.8.1/vpncloud_0.8.1_amd64.deb
$ dpkg -i ./vpncloud_0.8.1_amd64.deb
</code></pre>

<p>Let&rsquo;s start the configuration on Server-1, this config should also be setup on the other 2 servers, the config will remain the same, except for the <code>ifup</code> command. The other servers will look like:</p>

<pre><code>Server-2: -&gt; ifup: "ifconfig $IFNAME 10.0.1.2/24 mtu 1400"
Server-3: -&gt; ifup: "ifconfig $IFNAME 10.0.1.3/24 mtu 1400"
</code></pre>

<p>Getting back to the Server-1 config:</p>

<pre><code class="bash">$ vim /etc/vpncloud/private.net
</code></pre>

<p>Example Config that I am using:</p>

<pre><code class="bash"># each vpn running on their own port
port: 3210

# members of our private network
peers:
  - srv2.domain.com:3210
  - srv3.domain.com:3210

# timeouts
peer_timeout: 1800
dst_timeout: 300

# token that identifies the network and helps to distinguish from other networks
magic: "76706e01"

# pre shared key
shared_key: "VeryStrongPreSharedKey_ThatShouldBeChanged"

# encryption
crypto: aes256

# device info
device_name: "vpncloud%d"
device_type: tap

# vpn modes: hub / switch / router / normal
mode: normal

# subnet to be used for our private network
subnets:
  - 10.0.1.0/24

# command to setup the network
ifup: "ifconfig $IFNAME 10.0.1.1/24 mtu 1400"
ifdown: "ifconfig $IFNAME down"

# user/group owning the process
user: "root"
group: "root"
</code></pre>

<p>Repeat the config on the other servers.</p>

<h2>Start the VPN Service:</h2>

<p>Restart the VPNCloud Service on all the Servers:</p>

<pre><code class="bash">$ service vpncloud@private start
</code></pre>

<p>Check the status:</p>

<pre><code class="bash">$ service vpncloud@private status
</code></pre>

<p>Check if the interface is up:</p>

<pre><code class="bash">$ ifconfig vpncloud0
vpncloud0 Link encap:Ethernet  HWaddr aa:bb:cc:dd:ee:ff
          inet addr:10.0.1.1  Bcast:10.0.1.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1400  Metric:1
          RX packets:55 errors:0 dropped:0 overruns:0 frame:0
          TX packets:71 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:5046 (5.0 KB)  TX bytes:5526 (5.5 KB)
</code></pre>

<p>Ping the 3rd server via the private network:</p>

<pre><code class="bash">$ ping -c 3 10.0.1.3
PING 10.0.1.2 (10.0.1.3) 56(84) bytes of data.
64 bytes from 10.0.1.3: icmp_seq=1 ttl=64 time=0.852 ms
64 bytes from 10.0.1.3: icmp_seq=2 ttl=64 time=0.831 ms
64 bytes from 10.0.1.3: icmp_seq=3 ttl=64 time=0.800 ms

--- 10.0.1.3 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2028ms
rtt min/avg/max/mdev = 0.800/0.827/0.852/0.039 ms
</code></pre>

<p>Awesome service, please check their <a href="https://github.com/dswd/vpncloud.rs">Github Repo</a> out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a NFS Server on Ubuntu]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/02/11/setup-a-nfs-server-on-ubuntu/"/>
    <updated>2018-02-11T17:26:56-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/02/11/setup-a-nfs-server-on-ubuntu</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/3sUALo.jpg" alt="" /></p>

<p>Quick post on how to setup a NFS Server on Ubuntu and how to setup the client to interact with the NFS Server.</p>

<h2>Setup the Dependencies:</h2>

<pre><code class="bash">$ apt update &amp;&amp; sudo apt upgrade -y
$ sudo apt-get install nfs-kernel-server nfs-common -y
</code></pre>

<p>Create the Directory for NFS and set permissions:</p>

<pre><code class="bash">mkdir /vol
chown -R nobody:nogroup /vol
</code></pre>

<h2>Allow the Clients:</h2>

<p>We need to set in the <code>exports</code> file, the clients we would like to allow:</p>

<ul>
<li><code>rw</code>: Allows Client R/W Access to the Volume.</li>
<li><code>sync</code>: This option forces NFS to write changes to disk before replying. More stable and Consistent. Note, it does reduce the speed of file operations.</li>
<li><code>no_subtree_check</code>: This prevents subtree checking, which is a process where the host must check whether the file is actually still available in the exported tree for every request. This can cause many problems when a file is renamed while the client has it opened. In almost all cases, it is better to disable subtree checking.</li>
</ul>


<pre><code class="bash">$ echo '/vol 10.8.133.83(rw,sync,no_subtree_check) 10.8.166.19(rw,sync,no_subtree_check) 10.8.142.195(rw,sync,no_subtree_check)' &gt;&gt; /etc/exports
</code></pre>

<h2>Start the NFS Server:</h2>

<p>Restart the service and enable the service on boot:</p>

<pre><code class="bash">$ sudo systemctl restart nfs-kernel-server
$ sudo systemctl enable nfs-kernel-server
</code></pre>

<h2>Client Side:</h2>

<p>We will mount the NFS Volume to our Clients <code>/mnt</code> partition.</p>

<p>Install the dependencies:</p>

<pre><code class="bash">$ sudo apt-get install nfs-common -y
</code></pre>

<p>Test if we can mount the volume, then unmount it, as we will set the config in our <code>fstab</code>:</p>

<pre><code class="bash">$ sudo mount 10.8.133.83:/vol /mnt
$ sudo umount /mnt
$ df -h
</code></pre>

<p>Set the config in your <code>fstab</code>, then mount it from there:</p>

<pre><code class="bash">$ sudo bash -c "echo '10.8.133.83:/vol /mnt nfs auto,nofail,noatime,nolock,intr,tcp,actimeo=1800 0 0' &gt;&gt; /etc/fstab"
$ sudo mount -a
$ df -h
</code></pre>

<p>Now you shoule be able to write to your NFS Volume from your client.</p>

<p>Sources:
- <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nfs-mount-on-ubuntu-16-04">1</a> <a href="https://gist.github.com/deviantony/557984d62e867e6f505577b207db6ffc%">2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Site to Site IPsec VPN With Strongswan and PreShared Key Authentication]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/02/11/setup-a-site-to-site-ipsec-vpn-with-strongswan-and-preshared-key-authentication/"/>
    <updated>2018-02-11T16:09:37-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/02/11/setup-a-site-to-site-ipsec-vpn-with-strongswan-and-preshared-key-authentication</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/sWn8zc.jpg" alt="" /></p>

<p>Today we will setup a Site to Site ipsec VPN with Strongswan, which will be configured with PreShared Key Authentication.</p>

<p>After our tunnels are established, we will be able to reach the private ips over the vpn tunnels.</p>

<script id="mNCC" language="javascript">
    medianet_width = "728";
    medianet_height = "90";
    medianet_crid = "218284798";
    medianet_versionId = "3111299"; 
  </script>


<script src="//contextual.media.net/nmedianet.js?cid=8CUD78FSV"></script>


<h2>Get the Dependencies:</h2>

<p>Update your repository indexes and install strongswan:</p>

<pre><code class="bash">$ apt update &amp;&amp; sudo apt upgrade -y
$ apt install strongswan -y
</code></pre>

<p>Set the following kernel parameters:</p>

<pre><code class="bash">$ cat &gt;&gt; /etc/sysctl.conf &lt;&lt; EOF
net.ipv4.ip_forward = 1 
net.ipv4.conf.all.accept_redirects = 0 
net.ipv4.conf.all.send_redirects = 0
EOF

$ sysctl -p /etc/sysctl.conf
</code></pre>

<h2>Generate Preshared Key:</h2>

<p>We will need a preshared key that both servers will use:</p>

<pre><code>$ openssl rand -base64 64
87zRQqylaoeF5I8o4lRhwvmUzf+pYdDpsCOlesIeFA/2xrtxKXJTbCPZgqplnXgPX5uprL+aRgxD8ua7MmdWaQ
</code></pre>

<h2>Details of our 2 Sites:</h2>

<p>Site A:</p>

<pre><code class="bash">Location: Paris, France
External IP: 51.15.139.201
Internal IP: 10.10.27.1/24
</code></pre>

<p>Site B:</p>

<pre><code class="bash">Location: Amsterdam, Netherlands
External IP: 51.15.44.48
Internal IP: 10.9.141.1/24
</code></pre>

<h2>Configure Site A:</h2>

<p>We will setup our VPN Gateway in Site A (Paris), first to setup the <code>/etc/ipsec.secrets</code> file:</p>

<pre><code class="bash">$ cat /etc/ipsec.secrets
# source      destination
51.15.139.201 51.15.44.48 : PSK "87zRQqylaoeF5I8o4lRhwvmUzf+pYdDpsCOlesIeFA/2xrtxKXJTbCPZgqplnXgPX5uprL+aRgxD8ua7MmdWaQ"
</code></pre>

<p>Now to setup our VPN configuration in <code>/etc/ipsec.conf</code>:</p>

<pre><code>cat /etc/ipsec.conf
# basic configuration
config setup
        charondebug="all"
        uniqueids=yes
        strictcrlpolicy=no

# connection to amsterdam datacenter
conn paris-to-amsterdam
    authby=secret
    left=%defaultroute
    leftid=51.15.139.201
    leftsubnet=10.10.27.1/24
    right=51.15.44.48
    rightsubnet=10.9.141.1/24
    ike=aes256-sha2_256-modp1024!
    esp=aes256-sha2_256!
    keyingtries=0
    ikelifetime=1h
    lifetime=8h
    dpddelay=30
    dpdtimeout=120
    dpdaction=restart
    auto=start
</code></pre>

<p>Firewall Rules:</p>

<pre><code class="bash">$ sudo iptables -t nat -A POSTROUTING -s 10.9.141.0/24 -d 10.10.27.0/24 -j MASQUERADE
</code></pre>

<h2>Configure Site B:</h2>

<p>We will setup our VPN Gateway in Site B (Amsterdam), setup the <code>/etc/ipsec.secrets</code> file:</p>

<pre><code class="bash">$ cat /etc/ipsec.secrets
51.15.44.48 51.15.139.201 : PSK "87zRQqylaoeF5I8o4lRhwvmUzf+pYdDpsCOlesIeFA/2xrtxKXJTbCPZgqplnXgPX5uprL+aRgxD8ua7MmdWaQ"
</code></pre>

<p>Next to setup our VPN Configuration:</p>

<pre><code>cat /etc/ipsec.conf
# basic configuration
config setup
        charondebug="all"
        uniqueids=yes
        strictcrlpolicy=no

# connection to paris datacenter
conn amsterdam-to-paris
    authby=secret
    left=%defaultroute
    leftid=51.15.44.48
    leftsubnet=10.9.141.1/24
    right=51.15.139.201
    rightsubnet=10.10.27.1/24
    ike=aes256-sha2_256-modp1024!
    esp=aes256-sha2_256!
    keyingtries=0
    ikelifetime=1h
    lifetime=8h
    dpddelay=30
    dpdtimeout=120
    dpdaction=restart
    auto=start
</code></pre>

<p>Firewall Rules:</p>

<pre><code class="bash">$ sudo iptables -t nat -A POSTROUTING -s 10.10.27.0/24 -d 10.9.41.0/24 -J MASQUERADE
</code></pre>

<h2>Start the VPN:</h2>

<p>Start the VPN on both ends:</p>

<pre><code class="bash">$ sudo ipsec restart
</code></pre>

<p>Get the status of the tunnel, in this case we are logged onto our Site A (Paris) Server:</p>

<pre><code>$ sudo ipsec status
Security Associations (1 up, 0 connecting):
paris-to-amsterdam[2]: ESTABLISHED 14 minutes ago, 10.10.27.161[51.15.139.201]...51.15.44.48[51.15.44.48]
paris-to-amsterdam{1}:  INSTALLED, TUNNEL, reqid 1, ESP in UDP SPIs: c8c868ee_i c9d58dbd_o
paris-to-amsterdam{1}:   10.10.27.1/24 === 10.9.141.1/24
</code></pre>

<p>Test if we can see the remote end on its private range:</p>

<pre><code class="bash">$ ping 10.9.141.97
PING 10.9.141.97 (10.9.141.97) 56(84) bytes of data.
64 bytes from 10.9.141.97: icmp_seq=1 ttl=64 time=14.6 ms
</code></pre>

<p>Set the service to start on boot:</p>

<pre><code class="bash">$ sudo systemctl enable strongswan
</code></pre>

<p>Then your VPN should be setup correctly.</p>

<h2>Other useful commands:</h2>

<p>Start / Stop / Status:</p>

<pre><code class="bash">$ sudo ipsec up connection-name
$ sudo ipsec down connection-name

$ sudo ipsec restart
$ sudo ipsec status
$ sudo ipsec statusall
</code></pre>

<p>Get the Policies and States of the IPsec Tunnel:</p>

<pre><code class="bash">$ sudo ip xfrm state
$ sudo ip xfrm policy
</code></pre>

<p>Reload the secrets, while the service is running:</p>

<pre><code class="bash">$ sudo ipsec rereadsecrets
</code></pre>

<p>Check if traffic flows through the tunnel:</p>

<pre><code class="bash">$ sudo tcpdump esp
</code></pre>

<h2>Adding more connections to your config:</h2>

<p>If you have to add another site to your config, the example of the <code>ipsec.secrets</code> will look like:</p>

<pre><code class="bash">$ cat /etc/ipsec.secrets
51.15.139.201 51.15.44.48 : PSK "87zRQqylaoeF5I8o4lRhwvmUzf+pYdDpsCOlesIeFA/2xrtxKXJTbCPZgqplnXgPX5uprL+aRgxD8ua7MmdWaQ"
51.15.139.201 51.15.87.41  : PSK "87zRQqylaoeF5I8o4lRhwvmUzf+pYdDpsCOlesIeFA/2xrtxKXJTbCPZgqplnXgPX5uprL+aRgxD8ua7MmdWaQ"
</code></pre>

<p>And the <code>ipsec.conf</code>:</p>

<pre><code class="bash">cat /etc/ipsec.conf
# basic configuration
config setup
        charondebug="all"
        uniqueids=yes
        strictcrlpolicy=no

# connection to amsterdam datacenter
conn paris-to-amsterdam
    authby=secret
    left=%defaultroute
    leftid=51.15.139.201
    leftsubnet=10.10.27.161/32
    right=51.15.44.48
    rightsubnet=10.9.141.97/32
    ike=aes256-sha2_256-modp1024!
    esp=aes256-sha2_256!
    keyingtries=0
    ikelifetime=1h
    lifetime=8h
    dpddelay=30
    dpdtimeout=120
    dpdaction=restart
    auto=start

# connection to frankfurt datacenter
conn paris-to-frankfurt
    authby=secret
    left=%defaultroute
    leftid=51.15.139.201
    leftsubnet=10.10.27.1/24
    right=51.15.87.41
    rightsubnet=10.9.137.1/24
    ike=aes256-sha2_256-modp1024!
    esp=aes256-sha2_256!
    keyingtries=0
    ikelifetime=1h
    lifetime=8h
    dpddelay=30
    dpdtimeout=120
    dpdaction=restart
    auto=start
</code></pre>

<p>Just remember to configure the config on the Frankfurt VPN Gateway, and the example of the status output will look like the following:</p>

<pre><code class="bash">$ sudo ipsec status
Security Associations (2 up, 0 connecting):
paris-to-frankfurt[2]: ESTABLISHED 102 seconds ago, 10.10.27.161[51.15.139.201]...51.15.87.41[51.15.87.41]
paris-to-frankfurt{1}:  INSTALLED, TUNNEL, reqid 2, ESP in UDP SPIs: cbc62a1f_i c95b8f78_o
paris-to-frankfurt{1}:   10.10.27.1/24 === 10.9.137.1/24
paris-to-amsterdam[1]: ESTABLISHED 102 seconds ago, 10.10.27.161[51.15.139.201]...51.15.44.48[51.15.44.48]
paris-to-amsterdam{2}:  INSTALLED, TUNNEL, reqid 1, ESP in UDP SPIs: c7b36756_i cc54053c_o
paris-to-amsterdam{2}:   10.10.27.1/24 === 10.9.141.1/24
</code></pre>
]]></content>
  </entry>
  
</feed>
