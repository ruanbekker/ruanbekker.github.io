<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Nodejs | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/nodejs/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-11-11T15:50:56-05:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Update Your Ghost Blog With the Ghost-CLI]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/11/22/update-your-ghost-blog-with-the-ghost-cli/"/>
    <updated>2017-11-22T17:36:45-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/11/22/update-your-ghost-blog-with-the-ghost-cli</id>
    <content type="html"><![CDATA[<p>If you installed your Ghost Blog with the <a href="https://docs.ghost.org/docs/install">Ghost-CLI</a>, you can easily upgrade your Ghost version using the CLI.</p>

<h2>Backups</h2>

<p>Backup your blog by exporting the json via the Ghost Admin Interface, and also update your content directory:</p>

<pre><code class="bash">$ sudo su - ghost
$ cd /var/www/ghost
$ tar -zcf /home/ghost/backups/ghost-content-$(date +%F).tar.gz content
</code></pre>

<h2>Check the Current Version:</h2>

<pre><code class="bash">$ ghost status

Version:
1.17.0
</code></pre>

<h2>Update Ghost:</h2>

<pre><code class="bash">$ npm i -g ghost-cli
$ ghost update
</code></pre>

<h2>Verify Version:</h2>

<pre><code class="bash">$ ghost status

Version:
1.17.0
</code></pre>

<p>No need to restart Ghost as the update function restarted the process already.</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://docs.ghost.org/docs/upgrade">https://docs.ghost.org/docs/upgrade</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Elasticdump to Backup Elasticsearch Indexes to JSON]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/11/22/using-elasticdump-to-backup-elasticsearch-indexes-to-json/"/>
    <updated>2017-11-22T08:35:28-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/11/22/using-elasticdump-to-backup-elasticsearch-indexes-to-json</id>
    <content type="html"><![CDATA[<p>We will use Elasticdump to dump data from Elasticsearch to json files on disk, then delete the index, then restore data back to elasticsearch</p>

<h2>Install Elasticdump:</h2>

<pre><code class="bash">$ docker run -it node:alpine sh
$ npm install elasticdump -g
</code></pre>

<h2>Create a Index:</h2>

<pre><code class="bash">$ curl -XPUT http://10.79.2.193:9200/test-index
{"acknowledged":true}
</code></pre>

<p>Ingest Some Data into the Index:</p>

<pre><code class="bash">$ curl -XPUT http://10.79.2.193:9200/test-index/docs/doc1 -d '{"name": "ruan", "age": 30}'
{"_index":"test-index","_type":"docs","_id":"doc1","_version":1,"_shards":{"total":2,"successful":1,"failed":0},"created":true}

$ curl -XPUT http://10.79.2.193:9200/test-index/docs/doc2 -d '{"name": "stefan", "age": 29}'
{"_index":"test-index","_type":"docs","_id":"doc2","_version":1,"_shards":{"total":2,"successful":1,"failed":0},"created":true}
</code></pre>

<h2>Elasticdump to dump the ata</h2>

<p>First dump the mappings:</p>

<pre><code class="bash">$ elasticdump --input=http://10.79.2.193:9200/test-index --output=/opt/backup/elasticsearch/es_test-index_mapping.json --type=mapping
Mon, 26 Jun 2017 14:15:34 GMT | starting dump
Mon, 26 Jun 2017 14:15:34 GMT | got 1 objects from source elasticsearch (offset: 0)
Mon, 26 Jun 2017 14:15:34 GMT | sent 1 objects to destination file, wrote 1
Mon, 26 Jun 2017 14:15:34 GMT | got 0 objects from source elasticsearch (offset: 1)
Mon, 26 Jun 2017 14:15:34 GMT | Total Writes: 1
Mon, 26 Jun 2017 14:15:34 GMT | dump complete
</code></pre>

<p>Then dump the data:</p>

<pre><code class="bash">$ elasticdump --input=http://10.79.2.193:9200/test-index --output=/opt/backup/elasticsearch/es_test-index.json --type=data
Mon, 26 Jun 2017 14:15:43 GMT | starting dump
Mon, 26 Jun 2017 14:15:43 GMT | got 2 objects from source elasticsearch (offset: 0)
Mon, 26 Jun 2017 14:15:43 GMT | sent 2 objects to destination file, wrote 2
Mon, 26 Jun 2017 14:15:43 GMT | got 0 objects from source elasticsearch (offset: 2)
Mon, 26 Jun 2017 14:15:43 GMT | Total Writes: 2
Mon, 26 Jun 2017 14:15:43 GMT | dump complete
</code></pre>

<p>Preview the Metadata</p>

<pre><code class="bash">$ cat /opt/backup/elasticsearch/es_test-index_mapping.json | python -m json.tool
{
    "test-index": {
        "mappings": {
            "docs": {
                "properties": {
                    "age": {
                        "type": "long"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            }
        }
    }
}
</code></pre>

<p>Preview the Data</p>

<pre><code class="bash">$ cat /opt/backup/elasticsearch/es_test-index.json | jq
{
  "_index": "test-index",
  "_type": "docs",
  "_id": "doc1",
  "_score": 1,
  "_source": {
    "name": "ruan",
    "age": 30
  }
}
{
  "_index": "test-index",
  "_type": "docs",
  "_id": "doc2",
  "_score": 1,
  "_source": {
    "name": "stefan",
    "age": 29
  }
}
</code></pre>

<h2>Restore The Data</h2>

<p>Let&rsquo;s test the restoring part, go ahead and delete The index:</p>

<pre><code class="bash">$ curl -XDELETE http://10.79.2.193:9200/test-index
{"acknowledged":true}
</code></pre>

<p>Restore the Index by Importing the Mapping:</p>

<pre><code class="bash">$ elasticdump --input=/opt/backup/elasticsearch/es_test-index_mapping.json --output=http://10.79.2.193:9200/test-index --type=mapping
Mon, 26 Jun 2017 14:51:48 GMT | starting dump
Mon, 26 Jun 2017 14:51:48 GMT | got 1 objects from source file (offset: 0)
Mon, 26 Jun 2017 14:51:48 GMT | sent 1 objects to destination elasticsearch, wrote 1
Mon, 26 Jun 2017 14:51:48 GMT | got 0 objects from source file (offset: 1)
Mon, 26 Jun 2017 14:51:48 GMT | Total Writes: 1
Mon, 26 Jun 2017 14:51:48 GMT | dump complete
</code></pre>

<p>Verify to see if the Index Exist:</p>

<pre><code class="bash">$ curl -s -XGET http://10.79.2.193:9200/_cat/indices?v | grep -E '(docs.count|test)'
health status index                     pri rep docs.count docs.deleted store.size pri.store.size
yellow open   test-index                  5   1          0            0       650b           650b
</code></pre>

<h2>Restore the Data for the Index:</h2>

<p>Use elasticdump to restore the data from json to elasticsearch:</p>

<pre><code class="bash">$ elasticdump --input=/opt/backup/elasticsearch/es_test-index.json --output=http://10.79.2.193:9200/test-index --type=data
Mon, 26 Jun 2017 14:53:56 GMT | starting dump
Mon, 26 Jun 2017 14:53:56 GMT | got 2 objects from source file (offset: 0)
Mon, 26 Jun 2017 14:53:56 GMT | sent 2 objects to destination elasticsearch, wrote 2
Mon, 26 Jun 2017 14:53:56 GMT | got 0 objects from source file (offset: 2)
Mon, 26 Jun 2017 14:53:56 GMT | Total Writes: 2
Mon, 26 Jun 2017 14:53:56 GMT | dump complete
</code></pre>

<p>Verify to see if the Documents was Ingested:</p>

<pre><code class="bash">$ curl -s -XGET http://10.79.2.193:9200/_cat/indices?v | grep -E '(docs.count|test)'
health status index                     pri rep docs.count docs.deleted store.size pri.store.size
yellow open   test-index                  5   1          2            0       650b           650b
</code></pre>

<p>Preview the Data from Elasticsearch:</p>

<pre><code class="bash">$ curl -s -XGET http://10.79.2.193:9200/test-index/_search?pretty

{
  "took" : 3,
  "timed_out" : false,
  "_shards" : {
    "total" : 5,
    "successful" : 5,
    "failed" : 0
  },
  "hits" : {
    "total" : 2,
    "max_score" : 1.0,
    "hits" : [ {
      "_index" : "test-index",
      "_type" : "docs",
      "_id" : "doc1",
      "_score" : 1.0,
      "_source" : {
        "name" : "ruan",
        "age" : 30
      }
    }, {
      "_index" : "test-index",
      "_type" : "docs",
      "_id" : "doc2",
      "_score" : 1.0,
      "_source" : {
        "name" : "stefan",
        "age" : 29
      }
    } ]
  }
}
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://www.npmjs.com/package/elasticdump">https://www.npmjs.com/package/elasticdump</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Nodejs Hostname App With Docker Stacks on Swarm]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/24/creating-a-nodejs-hostname-app-with-docker-stacks-on-swarm/"/>
    <updated>2017-09-24T17:52:51-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/24/creating-a-nodejs-hostname-app-with-docker-stacks-on-swarm</id>
    <content type="html"><![CDATA[<p>Create a Nodejs Application that responds GET requests with its Hostname.</p>

<p>Our nodejs application will sit beind a HAProxy Load Balancer, we are mounting the <code>docker.sock</code> from the host to the container, so as we scale our web application, our load balancer is aware of the changes, and scales as we scale our web application.</p>

<h2>Creating the Application:</h2>

<p>Our nodejs application:</p>

<pre><code class="javascript app.js">var http = require('http');
var os = require('os');
http.createServer(function (req, res) {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.end(`My Hostname: ${os.hostname()}\n`);
}).listen(8080);
</code></pre>

<p>Our Dockerfile:</p>

<pre><code class="docker Dockerfile">FROM node:alpine
ADD app.js /app.js
CMD ["node", "/app.js"]
</code></pre>

<p>Build and Push to your registry, or you could use my image on Dockerhub: <a href="https://hub.docker.com/r/rbekker87/node-containername/">hub.docker.com/r/rbekker87/node-containername</a></p>

<pre><code class="bash Build and Push">$ docker login
$ docker build -t &lt;username&gt;/&lt;repo&gt;:&lt;tag&gt; .
$ docker push  &lt;username&gt;/&lt;repo&gt;:&lt;tag&gt;
</code></pre>

<h2>Creating the Compose file</h2>

<p>Create the compose file that will define our services:</p>

<pre><code class="bash docker-compose.yml">version: '3'

services:
  node-app:
    image: rbekker87/node-containername
    networks:
      - nodenet
    environment:
      - SERVICE_PORTS=8080
    deploy:
      replicas: 20
      update_config:
        parallelism: 5
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s

  loadbalancer:
    image: dockercloud/haproxy:latest
    depends_on:
      - node-app
    environment:
      - BALANCE=leastconn
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 80:80
    networks:
      - nodenet
    deploy:
      placement:
        constraints: [node.role == manager]

networks:
  nodenet:
    driver: overlay
</code></pre>

<h2>Create the Stack:</h2>

<p>Deploy the Stack by specifying the compose file and name of our stack:</p>

<pre><code class="bash Deploy our Stack">$ docker stack deploy -c docker-compose.yml node
</code></pre>

<p>List the Services in the Stack:</p>

<pre><code class="bash List Services in our Stack">$ docker stack ls
NAME                SERVICES
node                2
</code></pre>

<p>List the Tasks in the Stack:</p>

<pre><code class="bash Tasks in our Stack">$ docker stack ps node
ID                  NAME                  IMAGE                                 NODE     DESIRED STATE       CURRENT STATE            ERROR               PORTS
l5ryfaedzzaq        node_loadbalancer.1   dockercloud/haproxy:latest            dsm-01   Running             Running 40 minutes ago
c8nrrcvek79h        node_node-app.5       rbekker87/node-containername:latest   dsm-01   Running             Running 40 minutes ago
dqii18b2q5nn        node_node-app.10      rbekker87/node-containername:latest   dsm-01   Running             Running 40 minutes ago
vkpw2rugy0ah        node_node-app.11      rbekker87/node-containername:latest   dsm-01   Running             Running 40 minutes ago
mm88nvnvy5lg        node_node-app.12      rbekker87/node-containername:latest   dsm-01   Running             Running 40 minutes ago
oyx8rfqc1xl2        node_node-app.16      rbekker87/node-containername:latest   dsm-01   Running             Running 41 minutes ago
</code></pre>

<h2>Test out our Application</h2>

<p>Test out the Service:</p>

<pre><code class="bash GET Requests">$ curl -XGET http://127.0.0.1/
My Hostname: a6e34246e73b

$ curl -XGET http://127.0.0.1/
My Hostname: 5de71278be38

$ curl -XGET http://127.0.0.1/
My Hostname: e0b7316fdd51
</code></pre>

<h2>Scaling Out:</h2>

<p>Scale our Application out to 30 replica&rsquo;s</p>

<pre><code class="bash Scaling Up">$ docker service scale node-app=30
</code></pre>

<p>Scale our Application down to 10 replica&rsquo;s</p>

<pre><code class="bash Scaling Down">$ docker service scale node-app=10
</code></pre>

<h2>Cleanup</h2>

<p>Remove the Stack:</p>

<pre><code class="bash Delete the Stack">$ docker stack rm node
Removing service node_loadbalancer
Removing service node_node-app
Removing network node_nodenet
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://github.com/ruanbekker/docker-node-containername">https://github.com/ruanbekker/docker-node-containername</a></li>
<li><a href="https://hub.docker.com/r/rbekker87/node-containername/">https://hub.docker.com/r/rbekker87/node-containername/</a></li>
<li><a href="https://medium.com/@nirgn/load-balancing-applications-with-haproxy-and-docker-d719b7c5b231">Resource 1</a> + <a href="http://anokun7.github.io/microservices-demo/">Resource 2</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
