<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Notifications | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/notifications/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2020-10-29T10:13:48+00:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install Alertmanager to Alert Based on Metrics From Prometheus]]></title>
    <link href="https://blog.ruanbekker.com/blog/2019/05/17/install-alertmanager-to-alert-based-on-metrics-from-prometheus/"/>
    <updated>2019-05-17T12:49:26-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2019/05/17/install-alertmanager-to-alert-based-on-metrics-from-prometheus</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57307750-696bb980-70e5-11e9-9b0b-73ad88bde6a3.png" alt="prometheus" /></p>

<p>So we are pushing our time series metrics into prometheus, and now we would like to alarm based on certain metric dimensions. That&rsquo;s where alertmanager fits in. We can setup targets and rules, once rules for our targets does not match, we can alarm to destinations suchs as slack, email etc.</p>

<p><a href="https://bekkerclothing.com/collections/developer?utm_source=blog.ruanbekker.com&utm_medium=blog&utm_campaign=leaderboard_ad" target="_blank"><img alt="bekker-clothing-developer-tshirts" src="https://user-images.githubusercontent.com/567298/70170981-7c278a80-16d6-11ea-9759-6621d02c1423.png"></a></p>

<h2>What we will be doing:</h2>

<p>In our previous tutorial we installed blackbox exporter to probe a endpoint. Now we will install Alertmanager and configure an alert to notify us via email and slack when our endpoint goes down. See <a href="https://blog.ruanbekker.com/blog/2019/05/17/install-blackbox-exporter-to-monitor-websites-with-prometheus/">this post</a> if you have not seen the previous tutorial.</p>

<h2>Install Alertmanager</h2>

<p>Create the user for alertmanager:</p>

<pre><code>$ useradd --no-create-home --shell /bin/false alertmanager
</code></pre>

<p>Download alertmanager and extract:</p>

<pre><code>$ https://github.com/prometheus/alertmanager/releases/download/v0.17.0/alertmanager-0.17.0.linux-amd64.tar.gz
$ tar -xvf alertmanager-0.17.0.linux-amd64.tar.gz
</code></pre>

<p>Move alertmanager and amtool birnaries in place:</p>

<pre><code>$ cp alertmanager-0.17.0.linux-amd64/alertmanager /usr/local/bin/
$ cp alertmanager-0.17.0.linux-amd64/amtool /usr/local/bin/
</code></pre>

<p>Ensure that the correct permissions are in place:</p>

<pre><code>$ chown alertmanager:alertmanager /usr/local/bin/alertmanager
$ chown alertmanager:alertmanager /usr/local/bin/amtool
</code></pre>

<p>Cleanup:</p>

<pre><code>$ rm -rf alertmanager-0.17.0*
</code></pre>

<h2>Configure Alertmanager:</h2>

<p>Create the alertmanager directory and configure the global alertmanager configuration:</p>

<pre><code>$ mkdir /etc/alertmanager
$ vim /etc/alertmanager/alertmanager.yml
</code></pre>

<p>Provide the global config and ensure to populate your personal information. See <a href="https://blog.ruanbekker.com/blog/2019/04/18/setup-a-slack-webhook-for-sending-messages-from-applications/">this post</a> to create a slack webhook.</p>

<pre><code>global:
  smtp_smarthost: 'smtp.domain.net:587'
  smtp_from: 'AlertManager &lt;mailer@domain.com&gt;'
  smtp_require_tls: true
  smtp_hello: 'alertmanager'
  smtp_auth_username: 'username'
  smtp_auth_password: 'password'

  slack_api_url: 'https://hooks.slack.com/services/x/xx/xxx'

route:
  group_by: ['instance', 'alert']
  group_wait: 30s
  group_interval: 5m
  repeat_interval: 3h
  receiver: team-1

receivers:
  - name: 'team-1'
    email_configs:
      - to: 'user@domain.com'
    slack_configs:
      # https://prometheus.io/docs/alerting/configuration/#slack_config
      - channel: 'system_events'
      - username: 'AlertManager'
      - icon_emoji: ':joy:'
</code></pre>

<p>Ensure the permissions are in place:</p>

<pre><code>$ chown alertmanager:alertmanager -R /etc/alertmanager
</code></pre>

<p>Create the alertmanager systemd unit file:</p>

<pre><code>$ vim /etc/systemd/system/alertmanager.service
</code></pre>

<p>And supply the unit file configuration. Note that I am exposing port <code>9093</code> directly as Im not using a reverse proxy.</p>

<pre><code>[Unit]
Description=Alertmanager
Wants=network-online.target
After=network-online.target

[Service]
User=alertmanager
Group=alertmanager
Type=simple
WorkingDirectory=/etc/alertmanager/
ExecStart=/usr/local/bin/alertmanager --config.file=/etc/alertmanager/alertmanager.yml --web.external-url http://0.0.0.0:9093

[Install]
WantedBy=multi-user.target
</code></pre>

<p>Now we need to inform prometheus that we will send alerts to alertmanager to it&rsquo;s exposed port:</p>

<pre><code>$ vim /etc/prometheus/prometheus.yml
</code></pre>

<p>And supply the alertmanager configuration for prometheus:</p>

<pre><code>...
alerting:
  alertmanagers:
  - static_configs:
    - targets:
      - localhost:9093
...
</code></pre>

<p>So when we get alerted, our alert will include a link to our alert. We need to provide the base url of that alert. That get&rsquo;s done in our alertmanager systemd unit file: <code>/etc/systemd/system/alertmanager.service</code> under <code>--web.external-url</code> passing the alertmanager base ip address:</p>

<pre><code>[Unit]
Description=Alertmanager
Wants=network-online.target
After=network-online.target

[Service]
User=alertmanager
Group=alertmanager
Type=simple
WorkingDirectory=/etc/alertmanager/
ExecStart=/usr/local/bin/alertmanager --config.file=/etc/alertmanager/alertmanager.yml --web.external-url http://&lt;your.alertmanager.ip.address&gt;:9093

[Install]
WantedBy=multi-user.target
</code></pre>

<p>Then we need to do the same with the prometheus systemd unit file: <code>/etc/systemd/system/prometheus.service</code> under <code>--web.external-url</code> passing the prometheus base ip address:</p>

<pre><code>[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target

[Service]
User=prometheus
Group=prometheus
Type=simple
ExecStart=/usr/local/bin/prometheus \
    --config.file /etc/prometheus/prometheus.yml \
    --storage.tsdb.path /var/lib/prometheus/ \
    --web.console.templates=/etc/prometheus/consoles \
    --web.console.libraries=/etc/prometheus/console_libraries \
    --web.external-url http://&lt;your.prometheus.ip.address&gt;

[Install]
WantedBy=multi-user.target
</code></pre>

<p>Since we have edited the systemd unit files, we need to reload the systemd daemon:</p>

<pre><code>$ systemctl daemon-reload
</code></pre>

<p>Then restart prometheus and alertmanager:</p>

<pre><code>$ systemctl restart prometheus
$ systemctl restart alertmanager
</code></pre>

<p>Inspect the status of alertmanager and prometheus:</p>

<pre><code>$ systemctl status alertmanager
$ systemctl status prometheus
</code></pre>

<p>If everything seems good, enable alertmanager on boot:</p>

<pre><code>$ systemctl enable alertmanager
</code></pre>

<h2>Access Alertmanager:</h2>

<p>Access alertmanager on your endpoint on port <code>9093</code>:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57946361-69856980-78dc-11e9-8c48-ebcc3b0d201e.png" alt="alertmanager" /></p>

<p>From our previous tutorial we started a local web service on port <code>8080</code> that is being monitored by prometheus. Let&rsquo;s stop that service to test out the alerting. You should get a notification via email:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57946586-f29ca080-78dc-11e9-983c-6b857ef21bae.png" alt="alertmanager" /></p>

<p>And the notification via slack:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57946602-03e5ad00-78dd-11e9-9ecc-c3d58b2ad3ec.png" alt="alertmanager" /></p>

<p>When you start the service again and head over to the prometheus ui under alerts, you will see that the service recovered:</p>

<p><img src="https://user-images.githubusercontent.com/567298/57946647-2677c600-78dd-11e9-95a9-b9f4190172bf.png" alt="prometheus" /></p>

<h2>Install Prometheus Alertmanager Plugin</h2>

<p>Install the Prometheus Alertmanager Plugin in Grafana. Head to the instance where grafana is installed and install the plugin:</p>

<pre><code>$ grafana-cli plugins install camptocamp-prometheus-alertmanager-datasource
</code></pre>

<p>Once the plugin is installed, restart grafana:</p>

<pre><code>$ service grafana-server restart
</code></pre>

<p>Install the dasboard <a href="https://grafana.com/dashboards/8010">grafana.com/dashboards/8010</a>. Create a new datasource, select the prometheus-alertmanager datasource, configure and save.</p>

<p>Add a new dasboard, select import and provide the ID <code>8010</code>, select the prometheus-alertmanager datasource and save. You should see the following (more or less):</p>

<p><img src="https://user-images.githubusercontent.com/567298/57947092-3f34ab80-78de-11e9-904b-f42d5ecd7d0a.png" alt="prometheus-alertmanager" /></p>

<h2>Resources</h2>

<p>See all <a href="https://blog.ruanbekker.com/blog/categories/prometheus/">#prometheus</a> blogposts</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Slack Webhook for Sending Messages From Applications]]></title>
    <link href="https://blog.ruanbekker.com/blog/2019/04/18/setup-a-slack-webhook-for-sending-messages-from-applications/"/>
    <updated>2019-04-18T06:07:42-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2019/04/18/setup-a-slack-webhook-for-sending-messages-from-applications</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/56354543-55165a00-61d4-11e9-9101-f979dcb4cdb3.png" alt="slack" /></p>

<p>Slack is amazing and I cant live without it.</p>

<p>We can also use custom webhook integrations to allow applications to notify us via slack in response of events.</p>

<h2>What we will be doing</h2>

<p>We will be configuring a custom slack webhook integration and test out the api to show you how easy it is to use it to inform us via slack, whenever something is happening.</p>

<h2>Configuration</h2>

<p>Head over to:
- <a href="https://">https://</a>{your-team}.slack.com/apps/manage/custom-integrations</p>

<p>Select Incoming Webhooks:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56352324-49746480-61cf-11e9-8dd2-e4482fc16f9e.png" alt="" /></p>

<p>Select Add Configuration:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56352369-6ad55080-61cf-11e9-9d98-4193a7aeb321.png" alt="" /></p>

<p>Select the channel it should post to:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56352447-90625a00-61cf-11e9-8f94-098b2c088159.png" alt="" /></p>

<p>Select Add Incoming Webhook Integration.</p>

<p>Save the webhook url that will look like this:</p>

<pre><code>https://hooks.slack.com/services/ABCDEFGHI/ZXCVBNMAS/AbCdEfGhJiKlOpRQwErTyUiO
</code></pre>

<p>You can then further configure the integration.</p>

<h2>Sending Messages</h2>

<pre><code>curl -XPOST -d 'payload={"channel": "#system_events", "username": "My-WebhookBot", "text": "This is posted to #general and comes from a bot named &lt;https://alert-system.com/alerts/1234|webhookbot&gt; for details!", "icon_emoji": ":borat:"}' https://hooks.slack.com/services/xx/xx/xx
</code></pre>

<p>Will result in:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56353019-be946980-61d0-11e9-874c-56074b8d2da7.png" alt="image" /></p>

<p>Message Attachment, Error:</p>

<pre><code>curl -XPOST -d 'payload={"channel": "#system_events", "username": "My-WebhookBot", "text": "*Incoming Alert!*", "icon_emoji": ":borat:", "attachments":[{"fallback":"New open task [Urgent]: &lt;http://url_to_task|Test out Slack message attachments&gt;","pretext":"New open task [Urgent]: &lt;http://url_to_task|Test out Slack message attachments&gt;","color":"#D00000","fields":[{"title":"Notes","value":"This is much easier than I thought it would be.","short":false}]}]}}' https://hooks.slack.com/services/xx/xx/xx
</code></pre>

<p>Results in:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56353534-df10f380-61d1-11e9-92f5-f14a75c19049.png" alt="image" /></p>

<p>Message Attachment, OK:</p>

<pre><code>curl -XPOST -d 'payload={"channel": "#system_events", "username": "My-WebhookBot", "text": "*Status Update:*", "icon_emoji": ":borat:", "attachments":[{"fallback":"New open task has been closed [OK]: &lt;http://url_to_task|Test out Slack message attachments&gt;","pretext":"Task has been closed [OK]: &lt;http://url_to_task|Test out Slack message attachments&gt;","color":"#28B463","fields":[{"title":"Notes","value":"The error has been resolved and the status is OK","short":false}]}]}}' https://hooks.slack.com/services/xx/xx/xx
</code></pre>

<p>Results in:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56353591-f819a480-61d1-11e9-8810-3586f56dd0f3.png" alt="image" /></p>

<h2>Join my Slack</h2>

<p>If you want to join my slack workspace, use <a href="https://join.slack.com/t/linux-hackers/shared_invite/enQtNjE0NDMzODI1OTI2LTFhYTRkNTQxYzAyMjQwNTNhMmE5ZmZkYjU2MDg2NGFlOTYyNmM2MjdkMzg1NTMwOTM0MGY1MjVmMTdhYjkxZTk">this invite link</a></p>

<h2>Resources:</h2>

<ul>
<li><a href="https://htmlcolorcodes.com/">https://htmlcolorcodes.com/</a></li>
<li><a href="https://api.slack.com/docs/message-attachments">https://api.slack.com/docs/message-attachments</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
