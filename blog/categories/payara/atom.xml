<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Payara | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/payara/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2020-02-21T00:12:47+02:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Build a REST API War File for Payara With Java Springboot and Maven Part 1]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/08/10/build-a-rest-api-war-file-for-payara-with-java-springboot-and-maven-part-1/"/>
    <updated>2018-08-10T02:43:34+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/08/10/build-a-rest-api-war-file-for-payara-with-java-springboot-and-maven-part-1</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/payara-logo.png" alt="" /></p>

<p>This is a command line approach to create a java web app for payara that takes war files, which we will be using in conjunction with springboot and apache maven.</p>

<h2>Setup Java and Apache Maven:</h2>

<p>Setup Java 1.8:</p>

<pre><code class="bash">$ apt update
$ apt install wget openssl vim software-properties-common -y
$ add-apt-repository ppa:webupd8team/java -y
$ apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C2518248EEA14886
$ apt update &amp;&amp; apt install oracle-java8-installer -y
</code></pre>

<p>Setup Apache Maven:</p>

<pre><code class="bash">$ cd /opt
$ curl -SL  http://www-eu.apache.org/dist/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz | tar -xz
$ mv apache-maven-3.5.4 maven
$ echo 'M2_HOME=/opt/maven' &gt; /etc/profile.d/mavenenv.sh
$ echo 'export PATH=${M2_HOME}/bin:${PATH}' &gt;&gt; /etc/profile.d/mavenenv.sh
$ chmod +x /etc/profile.d/mavenenv.sh
$ source /etc/profile.d/mavenenv.sh
</code></pre>

<p>Ensure Java and Maven is installed:</p>

<pre><code class="bash">$ java -version
java version "1.8.0_181"

$ mvn -version
Apache Maven 3.5.4
</code></pre>

<h2>Prepare the directories:</h2>

<p>Prepare the directories where we will be working with our application&rsquo;s source code:</p>

<pre><code class="bash">$ mkdir -p /root/app
$ cd /root/app
$ mkdir -p src/main/webapp/WEB-INF
$ mkdir -p src/main/java/fish/payara/spring/boot/{controller,domain}
</code></pre>

<h2>The source code:</h2>

<p>The <code>pom.xml</code> file:</p>

<pre><code class="bash">$ vim pom.xml
</code></pre>

<pre><code class="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;fish.payara.appserver&lt;/groupId&gt;
    &lt;artifactId&gt;payara-micro-with-spring-boot-rest&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
    &lt;packaging&gt;war&lt;/packaging&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                &lt;configuration&gt;
                    &lt;compilerArguments&gt;
                        &lt;source&gt;1.8&lt;/source&gt;
                        &lt;target&gt;1.8&lt;/target&gt;
                    &lt;/compilerArguments&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;
                &lt;version&gt;1.2.6.RELEASE&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
            &lt;exclusions&gt;
                &lt;exclusion&gt;
                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;
                &lt;/exclusion&gt;
            &lt;/exclusions&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
        &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.batch&lt;/groupId&gt;
        &lt;artifactId&gt;spring-batch-test&lt;/artifactId&gt;
        &lt;scope&gt;import&lt;/scope&gt;
    &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.crsh&lt;/groupId&gt;
            &lt;artifactId&gt;crsh.plugins&lt;/artifactId&gt;
            &lt;version&gt;1.2.11&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;
            &lt;version&gt;3.1.0&lt;/version&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/project&gt;
</code></pre>

<p>The <code>web.xml</code>:</p>

<pre><code class="bash">$ vim src/main/webapp/WEB-INF/web.xml
</code></pre>

<pre><code class="xml">&lt;web-app
    xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaeehttp://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
    version="3.1"&gt;

&lt;/web-app&gt;
</code></pre>

<p>The <code>Application.java</code>:</p>

<pre><code class="bash">$ vim src/main/java/fish/payara/spring/boot/Application.java
</code></pre>

<pre><code class="java">package fish.payara.spring.boot;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.context.web.SpringBootServletInitializer;

@SpringBootApplication
public class Application extends SpringBootServletInitializer {

    @Override
    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
        return application.sources(Application.class);
    }

    public static void main(String[] args) throws Exception {
        SpringApplication.run(Application.class, args);
    }
}
</code></pre>

<p>The <code>Person.java</code>:</p>

<pre><code class="bash">$ vim src/main/java/fish/payara/spring/boot/domain/Person.java
</code></pre>

<pre><code class="java">package fish.payara.spring.boot.domain;

public class Person {

    private int id;
    private String name;
    private String lastName;
    private String email;

    public Person() {
    }

    public Person(int id, String name, String lastName, String email) {
        this.id = id;
        this.name = name;
        this.lastName = lastName;
        this.email = email;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}
</code></pre>

<p>The <code>PersonRestController.java</code>:</p>

<pre><code class="bash">$ src/main/java/fish/payara/spring/boot/controller/PersonRestController.java
</code></pre>

<pre><code class="java">package fish.payara.spring.boot.controller;

import fish.payara.spring.boot.domain.Person;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.PostConstruct;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/person")
public class PersonRestController {

    Map&lt;Integer, Person&gt; personMap = new HashMap&lt;&gt;();

    @PostConstruct
    public void init() {
        personMap.put(1, new Person(1, "Ruan", "Bekker", "ruan@gmail.com"));
        personMap.put(2, new Person(2, "Steve", "James", "steve@gmail.com"));
        personMap.put(3, new Person(3, "Frank", "Phillips", "frank@gmail.com"));
    }

    @RequestMapping("/all")
    public Collection&lt;Person&gt; getAll() {
        return personMap.values();
    }
}
</code></pre>

<h2>Build with Maven:</h2>

<p>Build the war file with maven:</p>

<pre><code class="bash">$ mvn clean package

[INFO] Packaging webapp
[INFO] Assembling webapp [payara-micro-with-spring-boot-rest] in [/root/app/target/payara-micro-with-spring-boot-rest-1.0]
[INFO] Processing war project
[INFO] Copying webapp resources [/root/app/src/main/webapp]
[INFO] Webapp assembled in [113 msecs]
[INFO] Building war: /root/app/target/payara-micro-with-spring-boot-rest-1.0.war
[INFO] WEB-INF/web.xml already added, skipping
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 18.662 s
[INFO] Finished at: 2018-08-04T10:46:50Z
[INFO] ------------------------------------------------------------------------
</code></pre>

<p>You will find your war file under:</p>

<pre><code class="bash">$ ls target/
classes  maven-archiver  maven-status  payara-micro-with-spring-boot-rest-1.0  payara-micro-with-spring-boot-rest-1.0.war
</code></pre>

<p>You can change the name in the <code>pom.xml</code>, but since we already built it, lets rename the file to something shorter:</p>

<pre><code class="bash">$ mv /root/app/target/payara-micro-with-spring-boot-rest-1.0.war /root/app/target/webapp.war
</code></pre>

<h2>Deploy your Application with Payara Micro:</h2>

<p>Deploy your application with docker:</p>

<pre><code class="bash">$ docker run -it -p 8080:8080 -v /root/app/target:/opt/payara/deployments payara/micro --deploy /opt/payara/deployments/webapp.war


  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v1.2.6.RELEASE)

{
    "Instance Configuration": {
        "Host": "4e90ecf6a1a7",
        "Http Port(s)": "8080",
        "Https Port(s)": "",
        "Instance Name": "Cloudy-Chub",
        "Instance Group": "MicroShoal",
        "Hazelcast Member UUID": "a1af817d-473b-4fa7-9ee9-7d53291a35a2",
        "Deployed": [
            {
                "Name": "webapp",
                "Type": "war",
                "Context Root": "/webapp"
            }
        ]
    }
}
2018-08-04 11:26:39.655  INFO 1 --- [           main] PayaraMicro                              :
Payara Micro URLs:
http://4e90ecf6a1a7:8080/webapp
</code></pre>

<h2>Testing</h2>

<p>Let&rsquo;s hit our app&rsquo;s health endpoint to test:</p>

<pre><code class="bash">$ curl -s http://localhost:8080/webapp/health | jq .
{
  "status": "UP"
}
</code></pre>

<p>Now to interact with our API:</p>

<pre><code class="bash">$ curl -s http://localhost:8080/webapp/person/all | jq .
[
  {
    "id": 1,
    "name": "Ruan",
    "lastName": "Bekker",
    "email": "ruan@gmail.com"
  },
  {
    "id": 2,
    "name": "Steve",
    "lastName": "James",
    "email": "steve@gmail.com"
  },
  {
    "id": 3,
    "name": "Frank",
    "lastName": "Phillips",
    "email": "frank@gmail.com"
  }
]
</code></pre>

<p>Payara also provides a <code>/metrics</code> endpoint:</p>

<pre><code class="bash">$ curl -s http://localhost:8080/webapp/metrics | jq .
{
  "mem": 219648,
  "mem.free": 67104,
  "processors": 4,
  "instance.uptime": 369749,
  "uptime": 390417,
  "systemload.average": 0.14697265625,
  "heap.committed": 219648,
  "heap.init": 32768,
  "heap.used": 152543,
  "heap": 455168,
  "threads.peak": 98,
  "threads.daemon": 37,
  "threads": 72,
  "classes": 16951,
  "classes.loaded": 16951,
  "classes.unloaded": 0,
  "gc.ps_scavenge.count": 42,
  "gc.ps_scavenge.time": 515,
  "gc.ps_marksweep.count": 4,
  "gc.ps_marksweep.time": 634,
  "counter.status.200.health": 1,
  "counter.status.200.mappings": 2,
  "counter.status.200.person.all": 2,
  "counter.status.404.error": 5,
  "gauge.response.error": 6,
  "gauge.response.health": 120,
  "gauge.response.mappings": 3,
  "gauge.response.person.all": 9
}
</code></pre>

<p>And to get a mapping of all the endpoints:</p>

<pre><code class="bash">$ curl -s http://localhost:8080/webapp/mappings | jq .
</code></pre>

<p>If you decided to deploy as a jar, you can use the payara-micro jar to deploy the war file:</p>

<pre><code class="bash">$ java -jar payara-micro-5.182.jar --deploy target/webapp.war
</code></pre>

<p>For more info on this, have a look at their <a href="https://blog.payara.fish/creating-rest-web-services-with-spring-boot-hosted-on-payara-micro">website</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Payara Application Server on Ubuntu 16.04]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/03/30/setup-payara-application-server-on-ubuntu-16-dot-04/"/>
    <updated>2018-03-30T01:57:40+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/03/30/setup-payara-application-server-on-ubuntu-16-dot-04</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/CJMlTj.jpg" alt="" /></p>

<p>Today we will setup Payara 5 on Ubuntu 16.04</p>

<h2>About:</h2>

<p>Payara is an Open Source Java Application Server.</p>

<h2>Pre-Requirements:</h2>

<p>Update and Install Java 8:</p>

<pre><code class="bash">$ apt update &amp;&amp; apt upgrade -y
$ apt-get install wget curl unzip software-properties-common python-software-properties -y
$ add-apt-repository ppa:webupd8team/java
$ apt-get update
$ apt-get install oracle-java8-installer -y
$ source /etc/profile.d/jdk.sh
</code></pre>

<h2>Install Payara:</h2>

<p>Download and Install Payara 5:</p>

<pre><code class="bash">$ cd /usr/local
$ wget --content-disposition 'https://info.payara.fish/cs/c/?cta_guid=b9609f35-f630-492f-b3c0-238fc55f489b&amp;placement_guid=7cca6202-06a3-4c29-aee0-ca58af60528a&amp;portal_id=334594&amp;redirect_url=APefjpGt1aFvHUflpzz7Lec8jDz7CbeIIHZmgORmDSpteTCT2XjiMvjEzeY8yte3kiHi7Ph9mWDB7qUDEr96P0JS8Ev2ZFqahif2huSBfQV6lt4S6YUQpzPMrpHgf_n4VPV62NjKe8vLZBLnYkUALyR2mkrU3vWe7ME9XjHJqYPsHtxkHn-W7bYPFgY2LjEzKIYrdUsCviMgGrUh_LIbLxCESBa0N90vzaWKjK5EwZT021VaPP0jgfgvt0gF2UdtBQGcsTHrAlrb&amp;hsutk=c279766888b67917a591ec4e209cb29a&amp;canon=https%3A%2F%2Fwww.payara.fish%2Fall_downloads&amp;click=5bad781c-f4f5-422d-ba2b-5e0c2bff7098&amp;utm_referrer=https%3A%2F%2Fwww.google.co.za%2F&amp;__hstc=229474563.c279766888b67917a591ec4e209cb29a.1519832301251.1521408251653.1521485598794.4&amp;__hssc=229474563.7.1521485598794&amp;__hsfp=2442083907'

$ unzip payara-5.181.zip
$ mv payara5 payara
$ rm -rf payara-5.181.zip
</code></pre>

<h2>Permissions:</h2>

<p>Create the Payara user and Grant Permissions:</p>

<pre><code class="bash">$ echo 'export PATH=/usr/local/payara/glassfish/bin:$PATH' &gt; /etc/profile.d/payara.sh
$ addgroup --system payara
$ adduser --system --shell /bin/bash --ingroup payara payara
$ echo 'payara soft nofile 32768' &gt;&gt; /etc/security/limits.conf
$ echo 'payara hard nofile 65536' &gt;&gt; /etc/security/limits.conf
$ chown -R payara:payara /usr/local/payara
</code></pre>

<h2>Setup the Payara Domain:</h2>

<p>Switch to the Payara user, delete the default domain and start the production domain. It is useful to configure the JVM Options under the domains config directory according to your servers resources.</p>

<pre><code class="bash">$ su - payara

$ asadmin delete-domain domain1
$ asadmin change-admin-password --domain_name production # default blank pass for admin
$ asadmin --port 4848 enable-secure-admin production

$ asadmin start-domain production
$ asadmin stop-domain production

$ exit
</code></pre>

<h2>SystemD Unit File:</h2>

<p>Create the SystemD Unit File to be able to manage the state of the Payara Server via SystemD:</p>

<pre><code class="bash">$ cat &gt; /etc/systemd/system/payara.service &lt;&lt; EOF
[Unit]
Description=Payara Server
After=network.target remote-fs.target

[Service]
User=payara
WorkingDirectory=/usr/local/payara/glassfish
Environment=PATH=/usr/local/payara/glassfish/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/payara/glassfish/bin/asadmin start-domain production
ExecReload=/usr/local/payara/glassfish/bin/asadmin restart-domain production
ExecStop=/usr/local/payara/glassfish/bin/asadmin stop-domain production
TimeoutStartSec=300
TimeoutStopSec=30

[Install]
WantedBy = multi-user.target
EOF
</code></pre>

<p>Reload the systemd daemon:</p>

<pre><code class="bash">$ systemctl daemon-reload
</code></pre>

<p>Start the Payara Service:</p>

<pre><code class="bash">$ systemctl enable payara
$ systemctl start payara
</code></pre>

<p>Verify that port 4848, 8080 and 8181 is running:</p>

<pre><code class="bash">$ netstat -tulpn | grep java
tcp        0      0 :::8080                     :::*                        LISTEN      24542/java
tcp        0      0 :::4848                     :::*                        LISTEN      24542/java
tcp        0      0 :::8181                     :::*                        LISTEN      24542/java
...
</code></pre>

<h2>Access Payara Admin UI:</h2>

<p>Access the Payara DAS via <code>https://ip-of-payara-server:4848</code></p>
]]></content>
  </entry>
  
</feed>
