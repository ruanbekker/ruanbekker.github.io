<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-03-02T06:57:07-05:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Golang: Reading From Files and Writing to Disk With Golang]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/03/02/golang-reading-from-files-and-writing-to-disk-with-golang/"/>
    <updated>2018-03-02T06:44:59-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/03/02/golang-reading-from-files-and-writing-to-disk-with-golang</id>
    <content type="html"><![CDATA[<p>Today we will create a very basic application to read content from a file, and write the content from the file back to disk, but to another filename.</p>

<p>Basically, doing a copy of the file to another filename.</p>

<h2>Golang Environment: Golang Docker Image</h2>

<p>Dropping into a Golang Environment using Docker:</p>

<pre><code class="bash">$ docker run -it golang:alpine sh
</code></pre>

<h2>Our Golang Application</h2>

<p>After we are in our container, lets write our app:</p>

<pre><code class="go app.go">package main

import (
    "io/ioutil"
)

func main() {

    content, error := ioutil.ReadFile("source-data.txt")
    if error != nil {
        panic(error)
    }

    error = ioutil.WriteFile("destination-data.txt", content, 0644)
    if error != nil {
        panic(error)
    }
}
</code></pre>

<p>Building our application to a binary:</p>

<pre><code class="bash">$ go build app.go
</code></pre>

<p>Creating our <code>source-data.txt</code> :</p>

<pre><code class="bash">$ echo "foo" &gt; source-data.txt
</code></pre>

<h2>Running the Golang App:</h2>

<p>When we run this app, it will read the content of <code>source-data.txt</code> and write it to <code>destination-data.txt</code>:</p>

<pre><code class="bash">$ ./app.go
</code></pre>

<p>We can see that the file has been written to disk:</p>

<pre><code class="bash">$ ls | grep data
destination-data.txt
source-data.txt
</code></pre>

<p>Making sure the data is the same, we can do a <code>md5sum hash</code> function on them:</p>

<pre><code class="bash">$ md5sum source-data.txt
d3b07384d113edec49eaa6238ad5ff00  source-data.txt

$ md5sum destination-data.txt
d3b07384d113edec49eaa6238ad5ff00  destination-data.txt
</code></pre>

<h2>Next:</h2>

<p>This was a very static way of doing it, as you need to hardcode the filenames. In the next post I will show how to use arguments to make it more dynamic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Your First Hello World App With Golang]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/25/your-first-hello-world-app-with-golang/"/>
    <updated>2017-10-25T17:16:25-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/25/your-first-hello-world-app-with-golang</id>
    <content type="html"><![CDATA[<p>So everyone has been saying how awesome Golang is, and at this moment, I am quite curious to fiddle with it.</p>

<h2>Golang Environment: Golang Docker Image</h2>

<p>A quick way to get a Golang Environment, will be to use Docker. We will be using the Alpine tag:</p>

<pre><code class="bash">$ docker run -it golang:alpine sh
</code></pre>

<h2>Our Basic App</h2>

<p>After we are in our container, lets write our first Hello World App:</p>

<pre><code class="go app.go">package main

import "fmt"

func main() {
  fmt.Println("Hello, World!")
}
</code></pre>

<h2>Running our App:</h2>

<p>Using golang to run our app:</p>

<pre><code class="bash">$ go run app.go
Hello, World!
</code></pre>

<p>We can also build our app to create a executable binary:</p>

<pre><code class="bash">$ go build app.go
</code></pre>

<p>You will find that there is a executable binary named <code>app</code> placed in the current working directory. Let&rsquo;s execute it:</p>

<pre><code class="bash">$ ./app
Hello, World!
</code></pre>

<p>This was a very basic example, but will add more examples as I am learning the language</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://golang.org/">https://golang.org/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Python to Build a Dictionary From Data Eg Sports Per Person]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/14/using-python-to-build-a-dictionary-from-data-eg-sports-per-person/"/>
    <updated>2017-10-14T14:53:48-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/14/using-python-to-build-a-dictionary-from-data-eg-sports-per-person</id>
    <content type="html"><![CDATA[<p>I had to achieve a way to provide data in key-value format, where I wanted to see what sports people like, eg: <code>{"ruan": ["rugby", "cricket"]}</code></p>

<h2>The Idea</h2>

<p>So my idea was to have the <code>name</code> as the key, and the <code>sports</code> as the value in a list.</p>

<h2>Some Catches</h2>

<p>So for this post, I will be setting the data statically in the code, while at the time I was working data that was returned via a API.</p>

<p>I am looping through each occurence, adding the name, and when the name exists, I append the sport to the list of the person.</p>

<p>The catch was that, if there was any duplicated data, the person will only exists once in the dictionary that I am building, but the sport will be appended, so if there were 2 occurences of <code>rugby</code> it will show the sport 2 times. So I had to put some logic into the code to handle that.</p>

<h2>The Code</h2>

<pre><code class="python">"""|Info:

Printing Sports per Person, by looping through data, appending the sports to a list per person, which gets added to our dictionary.

Variables:
    group {dict} -- "the dictionary that we are building up"
    people {list} -- "list of people with their sport choices"
    for sportman in people: {[for-loop]} -- "iterating through our data, if the sport exists, continue, if not, apeend it to the list"
    print(group) {[dict]} -- "printing the results"
"""

group = {}
people = [
    {
        "name": "ruan", 
        "sport": "cricket"
    }, 
    {
        "name": "stefan", 
        "sport": "rugby"
    }, 
    {
        "name": "stefan", 
        "sport": "cricket"
    }, 
    {
        "name": "james", 
        "sport": "rugby"
    }, 
    {
        "name": "james", 
        "sport": "golf"
    }, 
    {
        "name": "stefan", 
        "sport": "rugby"
    }, 
    {
        "name": "james", 
        "sport": "hockey"
    }
]

for sportman in people:
    if sportman['name'] in group:
        if sportman['sport'] not in group[sportman['name']]:
            group[sportman['name']].append(sportman['sport'])
        else:
            pass
    else:
        group[sportman['name']] = []
        group[sportman['name']].append(sportman['sport'])

print(group)
</code></pre>

<h2>Running the Script:</h2>

<p>When running the script results in the following:</p>

<pre><code class="bash">$ python sports.py 
{'james': ['rugby', 'golf', 'hockey'], 'ruan': ['cricket'], 'stefan': ['rugby', 'cricket']}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Program With C Language on Linux]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/24/simple-program-with-c-language-on-linux/"/>
    <updated>2017-09-24T06:41:58-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/24/simple-program-with-c-language-on-linux</id>
    <content type="html"><![CDATA[<p>Today the idea popped up on how to write a Simple &ldquo;Hello World&rdquo; Application using C Programming Language, as I just wanted to see how it works.</p>

<h2>Requirements:</h2>

<p>You will need the <code>gcc</code> package to compile the program:</p>

<pre><code class="bash RHEL">$ yum install gcc -y
</code></pre>

<pre><code class="bash Debian">$ apt install gcc -y
</code></pre>

<h2>Writing our first Program:</h2>

<p>We will create a app that just prints out a static defined value:</p>

<p>Create any file with a <code>.c</code> extension, in my case it will be <code>app.c</code>:</p>

<pre><code class="c app.c">#include &lt;stdio.h&gt;

int main(){
    printf("Hello, World\n");
    return 0;
}
</code></pre>

<p>Now compile <code>app.c</code> with <code>gcc</code> and specify the output path of your app with <code>-o &lt;app-name&gt;</code></p>

<pre><code>$ gcc -o app app.c
</code></pre>

<h2>Testing our App:</h2>

<p>You will see that there is a executable file with the name that you have specified as the output:</p>

<pre><code>$ ./app
Hello, World
</code></pre>

<p>Really basic, but quite cool.</p>
]]></content>
  </entry>
  
</feed>
