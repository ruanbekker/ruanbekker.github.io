<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2022-07-31T04:54:41-04:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Flask Forms With Jinja Templating]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/05/31/python-flask-forms-with-jinja-templating/"/>
    <updated>2022-05-31T02:39:30-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/05/31/python-flask-forms-with-jinja-templating</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/171112630-7fd74a3a-d216-4b4c-85a2-8d9de6428f45.png" alt="ruanbekker-blog" /></p>

<p>In this tutorial, we will demonstrate how to use <a href="https://flask.palletsprojects.com/en/2.1.x/">Python Flask</a> and <code>render_template</code> to use <a href="https://jinja.palletsprojects.com/en/3.1.x/">Jinja Templating</a> with our Form. The example is just a ui that accepts a firstname, lastname and email address and when we submit the form data, it renders on a table.</p>

<h2>Install Flask</h2>

<p>Create a virtual environment and install python flask</p>

<pre><code class="bash">python3 -m pip install virtualenv
python3 -m virtualenv -p python3 .venv
source .venv/bin/activate
</code></pre>

<h2>The Code</h2>

<p>First we will create our application code in <code>app.py</code>:</p>

<pre><code class="python">from flask import Flask, render_template, request

app_version = '1.1.0'

app = Flask(__name__)

@app.route('/')
def root():
    return render_template('form.html')

@app.route('/result',methods = ['POST', 'GET'])
def result():
    if request.method == 'POST':
        result = request.form
        json_result = dict(result)
        print(json_result)
        return render_template("result.html", result=result, app_version=app_version)

if __name__ == '__main__':
    app.run(debug = True)
</code></pre>

<p>As you can see our first route <code>/</code> will render the template in <code>form.html</code>. Our second route <code>/result</code> a couple of things are happening:</p>

<ul>
<li>If we received a POST method, we will capture the form data</li>
<li>We are then casting it to a dictionary data type</li>
<li>Print the results out of our form data (for debugging)</li>
<li>Then we are passing the result object and the app_version variable to our template where it will be parsed.</li>
</ul>


<p>When using <code>render_template</code> all html files resides under the <code>templates</code> directory, so let&rsquo;s first create our <code>base.html</code> file that we will use as a starting point in <code>templates/base.html</code>:</p>

<pre><code>mkdir templates
</code></pre>

<p>Then in your <code>templates/base.html</code>:</p>

<script src="https://gist.github.com/ruanbekker/4d6b3e91b629795b3429a15f5db72972.js"></script>


<p>In our <code>templates/form.html</code> we have our form template, and you can see we are referencing our <code>base.html</code> in our template to include the first bit:</p>

<script src="https://gist.github.com/ruanbekker/f9e0c78d12987e19862486e446378ed7.js"></script>


<p>Then our last template <code>templates/result.html</code> is used when we click on submit, when the form data is displayed in our table:</p>

<script src="https://gist.github.com/ruanbekker/ad40ae4c59a81e8c089e7df2d50c605a.js"></script>


<p>So our directory structure should look like this:</p>

<pre><code class="bash">├── app.py
└── templates
    ├── base.html
    ├── form.html
    └── result.html

1 directory, 4 files
</code></pre>

<p>Then run the server:</p>

<pre><code>python app.py
</code></pre>

<h2>Screenshots</h2>

<p>It should look like the following when you access <a href="http://localhost:5000/">http://localhost:5000/</a></p>

<p><img src="https://user-images.githubusercontent.com/567298/171111587-915935a6-1557-4039-bbd0-d1d95070c2ae.png" alt="python-flask-forms" /></p>

<p>After entering your form data, select &ldquo;Submit&rdquo;, then you should see the following:</p>

<p><img src="https://user-images.githubusercontent.com/567298/171111868-9f8974d2-90cc-45c9-b930-da2d6ec96cbf.png" alt="python-flask-forms" /></p>

<p>So you can see that our request data was parsed through the template and our app version variable as well.</p>

<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>

<p><a href="https://github.com/ruanbekker/cheatsheets" target="_blank"><img alt="ruanbekker-cheatsheets" src="https://user-images.githubusercontent.com/567298/169162832-ef3019de-bc49-4d6c-b2a6-8ac17c457d24.png"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB Examples With Golang]]></title>
    <link href="https://blog.ruanbekker.com/blog/2019/04/17/mongodb-examples-with-golang/"/>
    <updated>2019-04-17T08:51:35-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2019/04/17/mongodb-examples-with-golang</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55478904-236e9200-561d-11e9-9382-f31b25a9ae03.png" alt="" /></p>

<p>While looking into working with mongodb using golang, I found it quite frustrating getting it up and running and decided to make a quick post about it.</p>

<p><a href="https://github.com/ruanbekker/cheatsheets" target="_blank"><img alt="ruanbekker-cheatsheets" src="https://user-images.githubusercontent.com/567298/169162832-ef3019de-bc49-4d6c-b2a6-8ac17c457d24.png"></a></p>

<h2>What are we doing?</h2>

<p>Examples using the golang driver for mongodb to connect, read, update and delete documents from mongodb.</p>

<h2>Environment:</h2>

<p>Provision a mongodb server in docker:</p>

<pre><code>$ docker network create container-net
$ docker run -itd --name mongodb --network container-net -p 27017:27017 ruanbekker/mongodb
</code></pre>

<p>Drop into a golang environment using docker:</p>

<pre><code>$ docker run -it golang:alpine sh
</code></pre>

<p>Get the dependencies:</p>

<pre><code>$ apk add --no-cache git
</code></pre>

<p>Change to your project path:</p>

<pre><code>$ mkdir $GOPATH/src/myapp
$ cd $GOPATH/src/myapp
</code></pre>

<p>Download the golang mongodb driver:</p>

<pre><code>$ go get go.mongodb.org/mongo-driver
</code></pre>

<h2>Connecting to MongoDB in Golang</h2>

<p>First example will be to connect to your mongodb instance:</p>

<pre><code class="go">package main

import (
    "context"
    "fmt"
    "log"
    "go.mongodb.org/mongo-driver/mongo"
    "go.mongodb.org/mongo-driver/bson"
    "go.mongodb.org/mongo-driver/mongo/options"
)

type Person struct {
    Name string
    Age  int
    City string
}

func main() {
    clientOptions := options.Client().ApplyURI("mongodb://mongodb:27017")
    client, err := mongo.Connect(context.TODO(), clientOptions)

    if err != nil {
        log.Fatal(err)
    }

    err = client.Ping(context.TODO(), nil)

    if err != nil {
        log.Fatal(err)
    }

    fmt.Println("Connected to MongoDB!")

}
</code></pre>

<p>Running our app:</p>

<pre><code class="bash">$ go run main.go
Connected to MongoDB!
</code></pre>

<h2>Writing to MongoDB with Golang</h2>

<p>Let&rsquo;s insert a single document to MongoDB:</p>

<pre><code class="go">func main() {
    ..
    collection := client.Database("mydb").Collection("persons")

    ruan := Person{"Ruan", 34, "Cape Town"}

    insertResult, err := collection.InsertOne(context.TODO(), ruan)
    if err != nil {
        log.Fatal(err)
    }
    fmt.Println("Inserted a Single Document: ", insertResult.InsertedID)
}
</code></pre>

<p>Running it will produce:</p>

<pre><code class="bash">$ go run main.go
Connected to MongoDB!
Inserted a single document:  ObjectID("5cb717dcf597b4411252341f")
</code></pre>

<p>Writing more than one document:</p>

<pre><code>func main() {
    ..
    collection := client.Database("mydb").Collection("persons")

    ruan := Person{"Ruan", 34, "Cape Town"}
    james := Person{"James", 32, "Nairobi"}
    frankie := Person{"Frankie", 31, "Nairobi"}

    trainers := []interface{}{james, frankie}

    insertManyResult, err := collection.InsertMany(context.TODO(), trainers)
    if err != nil {
        log.Fatal(err)
    }
    fmt.Println("Inserted multiple documents: ", insertManyResult.InsertedIDs)
}
</code></pre>

<p>This will output in:</p>

<pre><code class="bash">$ go run main.go
Inserted Multiple Documents:  [ObjectID("5cb717dcf597b44112523420") ObjectID("5cb717dcf597b44112523421")]
</code></pre>

<h2>Updating Documents in MongoDB using Golang</h2>

<p>Updating Frankie&rsquo;s age:</p>

<pre><code>func main() {
    ..
    filter := bson.Dname
    update := bson.D{
        {"$inc", bson.D{
            {"age", 1},
        }},
    }

    updateResult, err := collection.UpdateOne(context.TODO(), filter, update)
    if err != nil {
        log.Fatal(err)
    }
    fmt.Printf("Matched %v documents and updated %v documents.\n", updateResult.MatchedCount, updateResult.ModifiedCount)
}
</code></pre>

<p>Running that will update Frankie&rsquo;s age:</p>

<pre><code class="bash">$ go run main.go
Matched 1 documents and updated 1 documents.
</code></pre>

<h2>Reading Data from MongoDB</h2>

<p>Reading the data:</p>

<pre><code class="go">funct main() {
    ..
    filter := bson.Dname
    var result Trainer

    err = collection.FindOne(context.TODO(), filter).Decode(&amp;result)
    if err != nil {
        log.Fatal(err)
    }

    fmt.Printf("Found a single document: %+v\n", result)

    findOptions := options.Find()
    findOptions.SetLimit(2)

}
</code></pre>

<pre><code class="bash">$ go run main.go
Found a single document: {Name:Frankie Age:32 City:Nairobi}
</code></pre>

<p>Finding multiple documents and returning the cursor</p>

<pre><code class="go">func main() {
    ..
    var results []*Trainer
    cur, err := collection.Find(context.TODO(), bson.D, findOptions)
    if err != nil {
        log.Fatal(err)
    }

    for cur.Next(context.TODO()) {
        var elem Trainer
        err := cur.Decode(&amp;elem)
        if err != nil {
            log.Fatal(err)
        }

        results = append(results, &amp;elem)
    }

    if err := cur.Err(); err != nil {
        log.Fatal(err)
    }

    cur.Close(context.TODO())
    fmt.Printf("Found multiple documents (array of pointers): %+v\n", results)
}
</code></pre>

<p>Running the example:</p>

<pre><code>$ go run main.go
Found multiple documents (array of pointers): [0xc0001215c0 0xc0001215f0]
</code></pre>

<h2>Deleting Data from MongoDB:</h2>

<p>Deleting our data and closing the connection:</p>

<pre><code class="go">func main(){
    ..
    deleteResult, err := collection.DeleteMany(context.TODO(), bson.D)
    if err != nil {
        log.Fatal(err)
    }

    fmt.Printf("Deleted %v documents in the trainers collection\n", deleteResult.DeletedCount)

    err = client.Disconnect(context.TODO())

    if err != nil {
        log.Fatal(err)
    } else {
        fmt.Println("Connection to MongoDB closed.")
    }
}
</code></pre>

<p>Running the example:</p>

<pre><code class="bash">$ go run main.go
Deleted 3 documents in the trainers collection
Connection to MongoDB closed.
</code></pre>

<p>The code for this example can be found at <a href="https://github.com/ruanbekker/code-examples/blob/master/mongodb/golang/examples.go">github.com/ruanbekker/code-examples/mongodb/golang/examples.go</a></p>

<h2>Resources:</h2>

<ul>
<li><a href="https://www.mongodb.com/blog/post/mongodb-go-driver-tutorial">https://www.mongodb.com/blog/post/mongodb-go-driver-tutorial</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Port Status Checker Script in C Language]]></title>
    <link href="https://blog.ruanbekker.com/blog/2019/02/08/port-status-checker-script-in-c-language/"/>
    <updated>2019-02-08T08:56:11-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2019/02/08/port-status-checker-script-in-c-language</id>
    <content type="html"><![CDATA[<p>This is a simple script in the C Programming Language to test the port status of a remote address.</p>

<h2>Requirements:</h2>

<p>You will need the gcc package to compile the program:</p>

<p>For RHEL based distro&rsquo;s:</p>

<pre><code class="bash">$ yum install gcc -y
</code></pre>

<p>For Debian based distro&rsquo;s:</p>

<pre><code class="bash">$ apt install gcc -y
</code></pre>

<h2>Check TCP Port Status in C Language:</h2>

<p>Our file: <code>test.c</code></p>

<pre><code class="c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;netdb.h&gt;


int main(int argc, char *argv[]) {

    int portno     = 443;
    char *hostname = "google.com";

    int sockfd;
    struct sockaddr_in serv_addr;
    struct hostent *server;

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd &lt; 0) {
        error("Error opening socket\n");
    }

    server = gethostbyname(hostname);

    if (server == NULL) {
        fprintf(stderr,"ERROR, no such host\n");
        exit(0);
    }

    bzero((char *) &amp;serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    bcopy((char *)server-&gt;h_addr,
         (char *)&amp;serv_addr.sin_addr.s_addr,
         server-&gt;h_length);

    serv_addr.sin_port = htons(portno);
    if (connect(sockfd,(struct sockaddr *) &amp;serv_addr, sizeof(serv_addr)) &lt; 0) {
        printf("Port is Closed\n");
    } else {
        printf("Port is Open\n");
    }

    close(sockfd);
    return 0;
}
</code></pre>

<h2>Compile:</h2>

<p>Compile using gcc:</p>

<pre><code>$ gcc -o test test.c
</code></pre>

<h2>Execute:</h2>

<p>Execute the script:</p>

<pre><code class="bash">$ ./test
Port is Open
</code></pre>

<h2>Thank You</h2>

<p>Please feel free to show support by, <strong>sharing</strong> this post, making a <strong>donation</strong>, <strong>subscribing</strong> or <strong>reach out to me</strong> if you want me to demo and write up on any specific tech topic.</p>

<center>
<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
<input type="hidden" name="cmd" value="_s-xclick" />
<input type="hidden" name="hosted_button_id" value="W7CBGYTCWGANQ" />
<input type="image" src="https://user-images.githubusercontent.com/567298/49853901-461c3700-fdf1-11e8-9d80-8a424a3173af.png" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
<img alt="" border="0" src="https://www.paypal.com/en_ZA/i/scr/pixel.gif" width="1" height="1" />
</form>
</center>


<p><br></p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang: Building a Basic Web Server in Go]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/11/21/golang-building-a-basic-web-server-in-go/"/>
    <updated>2018-11-21T00:57:54-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/11/21/golang-building-a-basic-web-server-in-go</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/golang-web-server.png" alt="" /></p>

<p>Continuing with our <a href="https://blog.ruanbekker.com/blog/categories/golang-tutorial/">#golang-tutorial</a> blog series, in this post we will setup a Basic HTTP Server in Go.</p>

<h2>Our Web Server:</h2>

<p>Our Web Server will respond on 2 Request Paths:</p>

<pre><code>- / -&gt; returns "Hello, Wolrd!"
- /cheers -&gt; returns "Goodbye!"
</code></pre>

<h2>Application Code:</h2>

<p>If you have not setup your golang environment, you can do so by visiting <a href="https://medium.com/@AkyunaAkish/setting-up-a-golang-development-environment-mac-os-x-d58e5a7ea24f">@AkyunaAkish&rsquo;s Post on Setting up a Golang Development Enviornment on MacOSX</a>.</p>

<p>Create the <code>server.go</code> or any filename of your choice. Note: I created 2 ways of returning the content of http response for demonstration</p>

<pre><code class="go">package main

import (
    "io"
        "log"
    "net/http"
)

func hello(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "text/plain; charset=utf-8")
    w.WriteHeader(http.StatusOK)
    w.Write([]byte("Hello, World!" + "\n")
    log.Println("hello function handler was executed")
}

func goodbye(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "text/plain; charset=utf-8")
    w.WriteHeader(http.StatusOK)
    io.WriteString(w, "Cheers!" + "\n")
    log.Println("goodbye function handler was executed")
}

func main() {
    http.HandleFunc("/", hello)
    http.HandleFunc("/cheers", goodbye)
    http.ListenAndServe(":8000", nil)
}
</code></pre>

<p>Explanation of what we are doing:</p>

<ul>
<li>Programs runs in the package <code>main</code></li>
<li>We are importing 3 packages: <code>io</code>, <code>log</code> and <code>net/http</code></li>
<li>HandleFunc registers the handler function for the given pattern in the DefaultServeMux, in this case the HandleFunc registers <code>/</code> to the <code>hello</code> handler function and <code>/cheers</code> to the goodbye handler function.</li>
<li>In our 2 handler functions, we have two arguments:

<ul>
<li>The first one is <code>http.ResponseWriter</code> and its corresponding response stream, which is actually an interface type.</li>
<li>The second is <code>*http.Request</code> and its corresponding HTTP request. <code>io.WriteString</code> is a helper function to let you write a string into a given writable stream, this is named the <code>io.Writer</code> interface in Golang.</li>
</ul>
</li>
<li>ListenAndServe starts an HTTP server with a given address and handler. The handler is usually nil, which means to use DefaultServeMux</li>
<li>The logging is not a requirement, but used it for debugging/verbosity</li>
</ul>


<h2>Running our Server:</h2>

<p>Run the http server:</p>

<pre><code class="bash">$ go run server.go
</code></pre>

<h2>Client Side Requests:</h2>

<p>Run client side http requests to your golang web server:</p>

<pre><code class="bash">$ curl -i http://localhost:8000/
HTTP/1.1 200 OK
Content-Type: text/plain; charset=utf-8
Date: Wed, 21 Nov 2018 21:33:42 GMT
Content-Length: 14

Hello, World!
</code></pre>

<p>And another request to <code>/cheers</code>:</p>

<pre><code class="bash">$ curl -i http://localhost:8000/cheers
HTTP/1.1 200 OK
Content-Type: text/plain; charset=utf-8
Date: Wed, 21 Nov 2018 21:29:46 GMT
Content-Length: 8

Cheers!
</code></pre>

<h2>Server Side Output:</h2>

<p>As we used the log package, the logging gets returned to stdout:</p>

<pre><code class="bash">$ go run server.go
2018/11/21 23:29:36 hello function handler was executed
2018/11/21 23:29:46 goodbye function handler was executed
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://golang.org/doc/code.html">https://golang.org/doc/code.html</a></li>
<li><a href="https://gowalker.org/net/http#HandleFunc">https://gowalker.org/net/http#HandleFunc</a></li>
<li><a href="https://stackoverflow.com/questions/37863374/whats-the-difference-between-responsewriter-write-and-io-writestring">https://stackoverflow.com/questions/37863374/whats-the-difference-between-responsewriter-write-and-io-writestring</a></li>
<li><a href="https://www.alexedwards.net/blog/golang-response-snippets">https://www.alexedwards.net/blog/golang-response-snippets</a></li>
</ul>


<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Tutorial Series Setup and Variables]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/08/09/ruby-tutorial-series-setup-and-variables/"/>
    <updated>2018-08-09T21:11:52-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/08/09/ruby-tutorial-series-setup-and-variables</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/ruby-variables-logo.png" alt="" /></p>

<p>In this post we will setup our Ruby environment, then start printing out values to the console and will also be touching on variables.</p>

<h2>Ruby Environment:</h2>

<p>I have a Docker image built on Alpine, the resources can be found via:</p>

<ul>
<li><a href="https://hub.docker.com/r/rbekker87/alpine-ruby">DockerHub</a></li>
<li><a href="https://github.com/ruanbekker/dockerhub-sources/blob/master/alpine-ruby/Dockerfile">GitHub</a></li>
</ul>


<p>To setup a Ruby environment on your workstation, I would recommend using <a href="https://github.com/rbenv/rbenv">https://github.com/rbenv/rbenv</a>.</p>

<h2>Drop into a Ruby Shell:</h2>

<p>I will be using Docker to drop into a ruby container:</p>

<pre><code class="bash">$ docker run -it rbekker87/alpine-ruby:2.5 sh

       ______       _____
______ ___  /__________(_)___________
_  __ `/_  /___  __ \_  /__  __ \  _ \
/ /_/ /_  / __  /_/ /  / _  / / /  __/
\__,_/ /_/  _  .___//_/  /_/ /_/\___/
            /_/

Alpine Build:
Container Hostname: 8a4dfc590dd0
Checkout my Docker Blogs:
- https://sysadmins.co.za/tag/docker
- http://blog.ruanbekker.com/blog/categories/docker

$ irb
irb(main):001:0&gt;
</code></pre>

<p>If you have the <code>irb</code> output, you should be good to go.</p>

<h2>Strings and Integers</h2>

<p>You will find when you enter a string, which is represented as one or more characters enclosed within quotation marks:</p>

<pre><code class="bash">irb(main):001:0&gt; "hello"
=&gt; "hello"
</code></pre>

<p>The integers will be without the quotation marks, when we introduce anything within quotation marks, ruby will read it as a string. So for a integer, lets provide ruby with a number and the number will be returned to the shell:</p>

<pre><code class="bash">irb(main):002:0&gt; 1
=&gt; 1
</code></pre>

<p>Using mathematical symbols like the <code>+</code> will either sum the two values when they are integers, or concatenate when they are strings.</p>

<p>Let&rsquo;s start with strings: we will add the string <code>hello</code> and <code>world</code></p>

<pre><code class="bash">irb(main):003:0&gt; "hello" + "world"
=&gt; "helloworld"
</code></pre>

<p>Now let&rsquo;s add two numbers together, <code>10</code> and <code>20</code>:</p>

<pre><code class="bash">irb(main):004:0&gt; 10 + 20
=&gt; 30
</code></pre>

<p>As you can see, it did a calculation on the two numbers as they were treated as integeres. But what happens when we add them as strings?</p>

<pre><code class="bash">irb(main):005:0&gt; "10" + "20"
=&gt; "1020"
</code></pre>

<p>Adding them as strings, will concatenate them.</p>

<h2>String Methods</h2>

<p>Ruby&rsquo;s strings has many built in methods, which makes it convenient manipulating data, let me go through a couple that I am working with:</p>

<p>Getting the length of the string:</p>

<pre><code class="bash">irb(main):006:0&gt; "hello".length
5
</code></pre>

<p>Is the string empty?</p>

<pre><code class="bash">irb(main):007:0&gt; "hello".empty?
=&gt; false
</code></pre>

<p>Getting the index position of 0 of the string:</p>

<pre><code class="bash">irb(main):008:0&gt; "hello"[0]
=&gt; "h"
</code></pre>

<p>Getting a array of your string:</p>

<pre><code class="bash">irb(main):009:0&gt; "hello".chars
=&gt; ["h", "e", "l", "l", "o"]
</code></pre>

<p>Returning your string in Uppercase:</p>

<pre><code class="bash">irb(main):010:0&gt; "hello".upcase
=&gt; "HELLO"
</code></pre>

<p>Returning your string in Lowercase:</p>

<pre><code class="bash">irb(main):011:0&gt; "HELLO".downcase
=&gt; "hello"
</code></pre>

<p>Capitalize your String:</p>

<pre><code class="bash">irb(main):012:0&gt; "hello".capitalize
=&gt; "Hello"
</code></pre>

<p>Swap the case of your string:</p>

<pre><code class="bash">irb(main):013:0&gt; "Hello".swapcase
=&gt; "hELLO"
</code></pre>

<h2>Variables</h2>

<p>Let&rsquo;s define variables to the static content that we used above.</p>

<p>Let&rsquo;s define our key: <code>word</code> to the value: of <code>hello, world</code>:</p>

<pre><code class="bash">irb(main):019:0&gt; word = "hello, world"
=&gt; "hello, world"
</code></pre>

<p>Accessing the variables value:</p>

<pre><code class="bash">irb(main):020:0&gt; word
=&gt; "hello, world"
</code></pre>

<p>We can also use <code>puts</code>, which stands for <code>put string</code>, which prints out the value to the terminal:</p>

<pre><code class="bash">irb(main):021:0&gt; puts word
hello, world
</code></pre>

<p>We can also, format our variable so that we can add something like a exclamation mark:</p>

<pre><code class="bash">irb(main):022:0&gt; puts "#{word}!"
hello, world!
</code></pre>

<p>Let&rsquo;s do the same with integers:</p>

<pre><code class="bash">irb(main):023:0&gt; num_1 = 10
=&gt; 10
irb(main):024:0&gt; num_2 = 20
=&gt; 20
</code></pre>

<p>Now when we calculate the numbers using variables, you will find the expected result of 30:</p>

<pre><code class="bash">irb(main):025:0&gt; num_1 + num_2
=&gt; 30
</code></pre>

<p>or:</p>

<pre><code class="bash">irb(main):026:0&gt; num_1 + num_2
puts "#{num_1 + num_2}"
30
</code></pre>

<h2>Variables are Mutable:</h2>

<p>Remember that variables are mutable, so they can be changed after they have been set, lets take age for example:</p>

<pre><code class="bash">irb(main):027:0&gt; age = 20
irb(main):028:0&gt; puts age
20

irb(main):029:0&gt; age = 22
irb(main):030:0&gt; puts age
22
</code></pre>

<h2>Strings and Integers:</h2>

<p>What happens when we add strings and integers together in one line:</p>

<pre><code class="bash">irb(main):038:0&gt; name = "ruan"
=&gt; "ruan"
irb(main):039:0&gt; id = 120398
=&gt; 120398
irb(main):040:0&gt; puts "#{name + id}"
Traceback (most recent call last):
        3: from /usr/bin/irb:11:in `&lt;main&gt;'
        2: from (irb):40
        1: from (irb):40:in `+'
TypeError (no implicit conversion of Integer into String)
</code></pre>

<p>That is because we cant concatenate strings with integers, so we will need to convert the integer to a string, we do that with the <code>to_s</code> method:</p>

<pre><code class="bash">irb(main):041:0&gt; puts "#{name + id.to_s}"
ruan120398
</code></pre>

<p>And if we want to define that to a variable:</p>

<pre><code class="bash">irb(main):042:0&gt; userid = "#{name + id.to_s}"
irb(main):043:0&gt; userid
=&gt; "ruan120398"
</code></pre>

<h2>Working with rb files:</h2>

<p>We can add this together in a file with a <code>.rb</code> extension and call the file as an argument with ruby, as a script:</p>

<p>Create the file, in my case <code>test.rb</code></p>

<pre><code class="bash">$ vim test.rb
</code></pre>

<pre><code class="ruby">user = "ruan"
idnumber = 23049823
userid = "#{user + idnumber}"

puts "#{userid}"
</code></pre>

<p>Running the ruby file:</p>

<pre><code class="bash">$ ruby test.rb
ruan23049823
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-work-with-string-methods-in-ruby">1</a></li>
<li><a href="https://learnrubythehardway.org/book/ex3.html">2</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
