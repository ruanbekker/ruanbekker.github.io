<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Proxy | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/proxy/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2021-07-31T04:21:31-04:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Routing Web Traffic With a SOCKS Tunnel]]></title>
    <link href="https://blog.ruanbekker.com/blog/2017/11/14/routing-web-traffic-with-a-socks-tunnel/"/>
    <updated>2017-11-14T10:17:07-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2017/11/14/routing-web-traffic-with-a-socks-tunnel</id>
    <content type="html"><![CDATA[<p>I wanted to access a Non Standard HTTP Port on one of my RaspberryPi Hosts, which was not directly available to the Internet, so I have chosen to establish a SOCKS Tunnel to achieve that.</p>

<h2>Web Application on my LAN</h2>

<p>Getting my RaspberryPi&rsquo;s Private IP Address:</p>

<pre><code class="bash">$ ifconfig eth0 | grep 'inet 192' | awk '{print $2}'
192.168.1.118
</code></pre>

<p>For demonstration purposes, I will use Python&rsquo;s SimpleHTTPServer:</p>

<pre><code class="bash">$ mkdir web
$ cd web
$ echo 'yeehaa' &gt; index.html
$ python -m SimpleHTTPServer 5050
Serving HTTP on 0.0.0.0 port 5050 ...
</code></pre>

<h2>Establish the SOCKS Tunnel</h2>

<p>From my laptop, establishing the SOCKS Tunnel with SSH, you can use <code>-f</code> to fork it in the background:</p>

<pre><code class="bash">$ ssh -D 8157 -CqN user@home.domain.com
</code></pre>

<h2>Configure your Browser:</h2>

<p>Configure your browser to Proxy via:</p>

<ul>
<li>Host: localhost</li>
<li>Port: 8157</li>
</ul>


<p>Now when you access the destined host&rsquo;s private ip, you will get a response:</p>

<pre><code class="bash">Browse to http://192.168.1.118:5050/ and in my case my response is:
-&gt; yeehaa
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx Reverse Proxy for Elasticsearch and Kibana 5 on AWS]]></title>
    <link href="https://blog.ruanbekker.com/blog/2017/09/16/nginx-reverse-proxy-for-elasticsearch-and-kibana-5-on-aws/"/>
    <updated>2017-09-16T17:24:32-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2017/09/16/nginx-reverse-proxy-for-elasticsearch-and-kibana-5-on-aws</id>
    <content type="html"><![CDATA[<p>As up untill today, there&rsquo;s currently no VPC Support for Amazon&rsquo;s Elasticsearch Service.</p>

<p>So for scenarios where you would like to allow private network traffic to Elasticsearch is impossible straight out of the box as Amazon&rsquo;s Elasticsearch Services, only sees Public Internet Traffic.</p>

<p>We will setup 2 configs, one for Kibana and one for Elasticsearch, each one having its own FQDN:</p>

<ul>
<li>Kibana: <code>http://kibana.domain.com</code></li>
<li>Elasticsearch: <code>http://elasticsearch.domain.com</code></li>
</ul>


<script id="mNCC" language="javascript">
    medianet_width = "728";
    medianet_height = "90";
    medianet_crid = "218284798";
    medianet_versionId = "3111299"; 
  </script>


<script src="//contextual.media.net/nmedianet.js?cid=8CUD78FSV"></script>


<h2>Workaround:</h2>

<p>There&rsquo;s a couple of workarounds, which includes:</p>

<ul>
<li>Nginx Reverse Proxy</li>
<li>NAT Gateway</li>
<li>Allow IAM Users/Roles</li>
</ul>


<p>Today we will tackle the Nginx Reverse Proxy Route.</p>

<p>The benefit of this, would be to associate an EIP to the Nginx EC2 Instnace, then whitelist your EIP with Elasticsearch, so the only traffic that will be accepted will be the traffic that is coming from the Nginx Instance. We will also apply an additional layer of security, in this case we will use HTTP Basic Authentication, then also authorize network sources on a Security Group level.</p>

<h2>Installing Nginx:</h2>

<p>In this case I am using Ubuntu 16.04, so we will need to install <code>nginx</code> and <code>apache2-utils</code> for creating the Basic HTTP Auth accounts.</p>

<pre><code class="bash">$ apt update &amp;&amp; apt upgrade -y
$ apt install nginx apache2-utils -y
</code></pre>

<h2>Configure Nginx:</h2>

<p>Our main config: <code>/etc/nginx/nginx.conf</code>:</p>

<pre><code class="bash /etc/nginx/nginx.conf">user www-data;
worker_processes auto;
pid /run/nginx.pid;
error_log /var/log/nginx/error.log;

events {
    worker_connections 1024;
}

http {

    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_names_hash_bucket_size 128;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging Settings
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Gzip Settings
    gzip on;
    gzip_disable "msie6";

    # Elasticsearch and Kibana Configs
    include /etc/nginx/conf.d/elasticsearch.conf;
    include /etc/nginx/conf.d/kibana.conf;
}
</code></pre>

<p>Our <code>/etc/nginx/conf.d/elasticsearch.conf</code> configuration:</p>

<pre><code class="bash /etc/nginx/conf.d/elasticsearch.conf">server {

  listen 80;
  server_name elasticsearch.domain.com;

  # error logging
  error_log /var/log/nginx/elasticsearch_error.log;

  # authentication: elasticsearch
  auth_basic "Elasticsearch Auth";
  auth_basic_user_file /etc/nginx/.secrets_elasticsearch;

  location / {

    proxy_http_version 1.1;
    proxy_set_header Host https://search-elasticsearch-name.eu-west-1.es.amazonaws.com;
    proxy_set_header X-Real-IP &lt;ELASTIC-IP&gt;;
    proxy_set_header Connection "Keep-Alive";
    proxy_set_header Proxy-Connection "Keep-Alive";
    proxy_set_header Authorization "";

    proxy_pass https://search-elasticsearch-name.eu-west-1.es.amazonaws.com/;
    proxy_redirect https://search-elasticsearch-name.eu-west-1.es.amazonaws.com/ http://&lt;ELASTIC-IP&gt;/;

  }

  # ELB Health Checks
  location /status {
    root /usr/share/nginx/html/;
  }

}
</code></pre>

<p>Our <code>/etc/nginx/conf.d/kibana.conf</code> configuration:</p>

<pre><code class="bash /etc/nginx/conf.d/kibana.conf">server {

  listen 80;
  server_name kibana.domain.com;

  # error logging
  error_log /var/log/nginx/kibana_error.log;

  # authentication: kibana
  auth_basic "Kibana Auth";
  auth_basic_user_file /etc/nginx/.secrets_kibana;

  location / {

    proxy_http_version 1.1;
    proxy_set_header Host https://search.elasticsearch-name.eu-west-1.es.amazonaws.com;
    proxy_set_header X-Real-IP &lt;ELASTIC-IP&gt;;
    proxy_set_header Connection "Keep-Alive";
    proxy_set_header Proxy-Connection "Keep-Alive";
    proxy_set_header Authorization "";

    proxy_pass https://search.elasticsearch-name.eu-west-1.es.amazonaws.com/_plugin/kibana/;
    proxy_redirect https://search.elasticsearch-name.eu-west-1.es.amazonaws.com/_plugin/kibana/ http://&lt;ELASTIC-IP&gt;/kibana/;

  }

      location ~ (/app/kibana|/app/timelion|/bundles|/es_admin|/plugins|/api|/ui|/elasticsearch) {
         proxy_pass              https://search.elasticsearch-name.eu-west-1.es.amazonaws.com;
         proxy_set_header        Host $host;
         proxy_set_header        X-Real-IP $remote_addr;
         proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header        X-Forwarded-Proto $scheme;
         proxy_set_header        X-Forwarded-Host $http_host;
         proxy_set_header    Authorization  "";
    }
}
</code></pre>

<p>Once you have replaced the elasticsearch endpoint and your EPI values, we can go ahead and create the auth accounts.</p>

<h2>Create User Accounts for HTTP Basic Auth</h2>

<p>Create the 2 accounts for authentication on kibana and elasticsearch:</p>

<pre><code class="bash">$ htpasswd -c /etc/nginx/.secrets_elasticsearch elasticsearch-admin
$ htpasswd -c /etc/nginx/.secrets_kibana kibana-admin
</code></pre>

<h2>Restart Nginx:</h2>

<p>Restart and enable Nginx on boot:</p>

<pre><code class="bash">$ systemctl enable nginx
$ systemctl restart nginx
</code></pre>

<p>Once your Nginx Service is running, you should be able to access Kibana and Elasticsearch using the credentials that you created.</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://www.nginx.com/blog/tcp-load-balancing-udp-load-balancing-nginx-tips-tricks/">https://www.nginx.com/blog/tcp-load-balancing-udp-load-balancing-nginx-tips-tricks/</a></li>
<li><a href="https://www.elastic.co/blog/playing-http-tricks-nginx">https://www.elastic.co/blog/playing-http-tricks-nginx</a></li>
<li><a href="https://sysadmins.co.za/aws-access-kibana-5-behind-elb-via-nginx-reverse-proxy-on-custom-dns/">https://sysadmins.co.za/aws-access-kibana-5-behind-elb-via-nginx-reverse-proxy-on-custom-dns/</a></li>
</ul>


<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modern Reverse Proxy With Traefik on Docker Swarm]]></title>
    <link href="https://blog.ruanbekker.com/blog/2017/08/24/modern-reverse-proxy-with-traefik-on-docker-swarm/"/>
    <updated>2017-08-24T19:00:33-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2017/08/24/modern-reverse-proxy-with-traefik-on-docker-swarm</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/31991539/images/traefik.png" alt="" /></p>

<p><a href="https://traefik.io/">Traefik</a> is a modern load balancer and reverse proxy built for micro services.</p>

<p>We will build 4 WebServices with Traefik, where we will go through the following scenarios:</p>

<ul>
<li>Hostname Based Routingi (With Path&rsquo;s and Without)</li>
<li>Path Based Routing</li>
</ul>


<h2>Pre-Requisites:</h2>

<p>From your DNS Provider add wildcard entries to the Docker Swarm Public IPs:</p>

<ul>
<li><code>apps.domain.com</code> -> A Record to each Docker Swarm Node</li>
<li><code>*.apps.domain.com</code> => apps.doamin.com</li>
</ul>


<p>This will allow us to create web applications on the fly.</p>

<h2>Static Website with Traefik:</h2>

<p>Create Traefik Proxy:</p>

<pre><code>docker service create \
--name traefik \
--constraint 'node.role==manager' \
--publish 80:80 \
--publish 443:443 \
--publish 8080:8080 \
--mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \
--network appnet \
traefik:camembert \
--docker --docker.swarmmode  \
--docker.domain=apps.domain.com \
--docker.watch \
--logLevel=DEBUG \
--web
</code></pre>

<h2>Build a WebService with 2 Endpoints:</h2>

<p>Our Website will have:</p>

<ul>
<li><code>/</code></li>
<li><code>/test/</code></li>
</ul>


<p>Our <code>Dockerfile</code>:</p>

<pre><code>FROM alpine:edge

RUN apk update \
    &amp;&amp; apk add lighttpd

ADD htdocs /var/www/localhost/htdocs

CMD ["lighttpd", "-D", "-f", "/etc/lighttpd/lighttpd.conf"]
</code></pre>

<p>Our <code>htdocs</code> directory:</p>

<pre><code>find ./htdocs/
./htdocs/
./htdocs/index.html
./htdocs/test
./htdocs/test/index.html
</code></pre>

<p>Building and Push the Image to a Registry of your choice:</p>

<pre><code>docker login registry.gitlab.com
docker build -t registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:test
docker push registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:test
</code></pre>

<h2>Create the 1st Service, No Hostname or Path based specified:</h2>

<p>The Service will allow us to view <code>/</code> and <code>/test/</code> paths, and also enable us to use the service name as the subdomain, or the domain specified in the <code>traefik</code> service:</p>

<pre><code>docker service create --name web1 --label 'traefik.port=80'  --network appnet --with-registry-auth registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:test
</code></pre>

<p>Testing the service:</p>

<pre><code>$ curl http://web1.apps.domain.com/
&lt;html&gt;
Root Page
&lt;/html&gt;
</code></pre>

<pre><code>$ curl http://web2.apps.domain.com/test/
&lt;html&gt;
Test Page
&lt;/html&gt;
</code></pre>

<p>and</p>

<pre><code>$ curl http://apps.domain.com/test/
&lt;html&gt;
Test Page
&lt;/html&gt;
</code></pre>

<p>but</p>

<pre><code>$ curl http://foo.apps.domain.com/test/
404 page not found
</code></pre>

<h2>Create the 2nd Service, Only 1 Path Based Routing:</h2>

<p>This service will only allow us to view the <code>/test/</code> endpoint:</p>

<pre><code>$ docker service create --name website2 --label 'traefik.port=80' --label traefik.frontend.rule="Path: /test/" --network appnet --with-registry-auth registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:test
</code></pre>

<p>Testing the Service:</p>

<pre><code>$ curl http://web1.apps.domain.com/
404 page not found
</code></pre>

<pre><code>$ curl http://web2.apps.domain.com/test/
&lt;html&gt;
Test Page
&lt;/html&gt;
</code></pre>

<h2>Hostname Based and Path Based Routing:</h2>

<pre><code>$ docker service create \
--name web3 \
--label 'traefik.port=80' \
--label traefik.frontend.rule="Host:apps.domain.com; Path: /test/" \
--network appnet \
--with-registry-auth registry.gitlab.com/rbekker87/docker/lighttpd:u1t-test
</code></pre>

<p>Test the <code>/</code> endpoint, which should not work:</p>

<pre><code>$ curl  http://apps.domain.com/
404 page not found
</code></pre>

<p>and the <code>/test/</code> endpoint:</p>

<pre><code>$ curl  http://apps.domain.com/test/
&lt;html&gt;
Test Page
&lt;/html&gt;
</code></pre>

<p>Also, any other FQDN that is specified will not work as it does not match the <code>traefik.frontend.rule</code>:</p>

<pre><code>$ curl  http://web3.apps.domain.com/
404 page not found
</code></pre>

<h2>Strictly Hostname Based Routing and not specifying any paths:</h2>

<pre><code>$ docker service create \
--name web4 \
--label 'traefik.port=80' \
--label traefik.frontend.rule="Host:apps.domain.com" \
--network appnet \
--with-registry-auth registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:u1t-test
</code></pre>

<p>Testing the Service:</p>

<pre><code>$ curl http://apps.domain.com/
&lt;html&gt;
Root Page
&lt;/html&gt;
</code></pre>

<pre><code>$ curl http://apps.domain.com/test/
&lt;html&gt;
Test Page
&lt;/html&gt;
</code></pre>

<p>Anything specified other than that, will result in a 404 Response.</p>
]]></content>
  </entry>
  
</feed>
