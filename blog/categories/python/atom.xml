<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-08-09T21:08:23-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Capture Geo Location Data With Python Flask and PyGeoIP]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/07/16/capture-geo-location-data-with-python-flask-and-pygeoip/"/>
    <updated>2018-07-16T17:46:01-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/07/16/capture-geo-location-data-with-python-flask-and-pygeoip</id>
    <content type="html"><![CDATA[<p>With the PyGeoIP package you can capture geo location data, which is pretty cool, for example, when you have IOT devices pushing location data to elasticsearch and visualizing the data with Kibana. That will be one example, but the possibilites are endless.</p>

<h2>Dependencies:</h2>

<p>Get the Maxmind Geo Database:</p>

<pre><code class="bash">$ wget -N http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz
$ gunzip GeoLiteCity.dat.gz
</code></pre>

<p>Install Python Flask and PyGeoIP:</p>

<pre><code class="bash">$ pip install flask pygeoip
</code></pre>

<h2>Getting Started with PyGeoIP:</h2>

<p>Let&rsquo;s run through a couple of examples on how to get:</p>

<ul>
<li>Country Name by IP Address and DNS</li>
<li>Country Code by IP Address and DNS</li>
<li>GeoData by IP Address</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; import pygeoip, json
&gt;&gt;&gt; gi = pygeoip.GeoIP('GeoLiteCity.dat')

&gt;&gt;&gt; gi.country_name_by_addr('8.8.8.8')
'United States'
&gt;&gt;&gt; gi.country_code_by_addr('8.8.8.8')
'US'

&gt;&gt;&gt; gi.country_name_by_name('scaleway.com')
'France'
&gt;&gt;&gt; gi.country_code_by_name('scaleway.com')
'FR'

&gt;&gt;&gt; gi.region_by_name('scaleway.com')
{'region_code': None, 'country_code': 'FR'}

&gt;&gt;&gt; data = gi.record_by_addr('104.244.42.193')
&gt;&gt;&gt; print(json.dumps(data, indent=2))
{
  "city": "San Francisco",
  "region_code": "CA",
  "area_code": 415,
  "time_zone": "America/Los_Angeles",
  "dma_code": 807,
  "metro_code": "San Francisco, CA",
  "country_code3": "USA",
  "latitude": 37.775800000000004,
  "postal_code": "94103",
  "longitude": -122.4128,
  "country_code": "US",
  "country_name": "United States",
  "continent": "NA"
}

&gt;&gt;&gt; data = gi.record_by_name('twitter.com')
&gt;&gt;&gt; print(json.dumps(data, indent=2))
{
  "city": "San Francisco",
  "region_code": "CA",
  "area_code": 415,
  "time_zone": "America/Los_Angeles",
  "dma_code": 807,
  "metro_code": "San Francisco, CA",
  "country_code3": "USA",
  "latitude": 37.775800000000004,
  "postal_code": "94103",
  "longitude": -122.4128,
  "country_code": "US",
  "country_name": "United States",
  "continent": "NA"
}
</code></pre>

<h2>Python Flask Web App to Capture Data</h2>

<p>Let&rsquo;s create a basic Flask App that will capture the data from the client making the request to the server. In this example we will just return the data, but we can filter the data and ingest it into a database like elasticsearch, etc.</p>

<pre><code class="python">from flask import Flask, request, jsonify
import pygeoip, json

app = Flask(__name__)

geo = pygeoip.GeoIP('GeoLiteCity.dat', pygeoip.MEMORY_CACHE)

@app.route('/')
def index():
    client_ip = request.remote_addr
    geo_data = geo.record_by_addr(client_ip)
    return json.dumps(geo_data, indent=2) + '\n'

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80, debug=False)
</code></pre>

<p>Run the Server:</p>

<pre><code class="bash">$ python app.py
</code></pre>

<p>Make a request from the client over a remote connection:</p>

<pre><code class="bash">$ curl http://remote-endpoint.com
{
  "city": "Cape Town",
  "region_code": "11",
  "area_code": 0,
  "time_zone": "Africa/Johannesburg",
  "dma_code": 0,
  "metro_code": null,
  "country_code3": "ZAF",
  "latitude": -01.12345,
  "postal_code": "8000",
  "longitude": 02.123456789,
  "country_code": "ZA",
  "country_name": "South Africa",
  "continent": "AF"
}
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="http://pygeoip.readthedocs.io/en/latest/getting-started.html">PyGeoIP</a></li>
<li><a href="https://dev.maxmind.com/geoip/legacy/install/city/">MaxMind</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Salt and Hash Example Using Python With Bcrypt on Alpine]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/07/04/salt-and-hash-example-using-python-with-bcrypt-on-alpine/"/>
    <updated>2018-07-04T05:05:00-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/07/04/salt-and-hash-example-using-python-with-bcrypt-on-alpine</id>
    <content type="html"><![CDATA[<p>This is a post on a example of how to hash a password with a salt. A salt in cryptography is a method that applies a one way function to hash data like passwords. The advantage of using salts is to protect your sensitive data against dictionary attacks, etc. Everytime a salt is applied to the same string, the hashed string will provide a different result.</p>

<h2>Installing Bcrypt</h2>

<p>I will be using bcrypt to hash my password. I always use alpine images and this is how I got bcrypt running on alpine:</p>

<pre><code class="bash">$ docker run -it apline sh
$ apk add python python-dev py2-pip autoconf automake g++ make --no-cache
$ pip install py-bcrypt
</code></pre>

<p>This command should produce a <code>0 exit code</code>:</p>

<pre><code class="bash">$ python -c 'import bcrypt'; echo $?
</code></pre>

<h2>Bcrypt Example to Hash a Password</h2>

<p>Here is a example to show you the output when a salt is applied to a string, such as a password. First we will define our very weak password:</p>

<pre><code class="python">&gt;&gt;&gt; import bcrypt
&gt;&gt;&gt; password = 'pass123'
&gt;&gt;&gt; password
'pass123'
</code></pre>

<p>The bcrypt package has a function called <code>gensalt()</code> that accepts a parameter <code>log_rounds</code> which defines the complexity of the hashing. Lets create a hash for our password:</p>

<pre><code class="python">&gt;&gt;&gt; bcrypt.hashpw(password, bcrypt.gensalt(12))
'$2a$12$iquyyyJAlA9nZwlGo0CYK.J37Qn.to/0mTtiCspNAyO8778006XZG'

&gt;&gt;&gt; bcrypt.hashpw(password, bcrypt.gensalt(12))
'$2a$12$UzNjJ1W/cWqBrt5rzNkb..j.gUvrW64DbvVkNbhRDzBtbRvNInaqq'
</code></pre>

<p>As you can see, the hashed string was different when we called it for the second time.</p>

<h2>Bcrypt Salt Hash and Verification Example:</h2>

<p>Thanks to <a href="https://stackoverflow.com/questions/9594125/salt-and-hash-a-password-in-python">this</a> post, here is a example on how to hash strings and how to verify the plain text password with the provided salt.</p>

<p>Our functions to create the hash and to verify the password:</p>

<pre><code class="python">&gt;&gt;&gt; import bcrypt
&gt;&gt;&gt; def get_hashed_password(plain_text_password):
...     return bcrypt.hashpw(plain_text_password, bcrypt.gensalt())
...
&gt;&gt;&gt;
&gt;&gt;&gt; def check_password(plain_text_password, hashed_password):
...     return bcrypt.checkpw(plain_text_password, hashed_password)
...
&gt;&gt;&gt;
</code></pre>

<p>Create a hashed string:</p>

<pre><code class="python">&gt;&gt;&gt; print(get_hashed_password('mynewpassword'))
$2a$12$/MemcgbnwJLN8XE86VQZseVxopU6tY76KxnH/AJ0I9T9y1Ldko5gm
</code></pre>

<p>Verify the hash with your plain text password and the salt that was created:</p>

<pre><code class="python">&gt;&gt;&gt; print(check_password('mynewpassword', '$2a$12$/MemcgbnwJLN8XE86VQZseVxopU6tY76KxnH/AJ0I9T9y1Ldko5gm'))
True
</code></pre>

<p>When you you provide the wrong password, with the correct salt, the verification will fail:</p>

<pre><code class="python">&gt;&gt;&gt; print(check_password('myOLDpassword', '$2a$12$/MemcgbnwJLN8XE86VQZseVxopU6tY76KxnH/AJ0I9T9y1Ldko5gm'))
False
</code></pre>

<p>When you provide the correct password with the incorrect salt, the verification will also fail:</p>

<pre><code class="python">&gt;&gt;&gt; print(check_password('mynewpassword', '$2a$12$/MemcgbnwJLN8XE86VQZseVxopU6tY76KxnH/AJ0I9T9y1Ldko5gmX'))
False
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World Programs in Different Languages]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/06/09/hello-world-programs-in-different-languages/"/>
    <updated>2018-06-09T21:11:00-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/06/09/hello-world-programs-in-different-languages</id>
    <content type="html"><![CDATA[<p>This post will demonstrate running hello world programs in different languages and also providing return time statistics</p>

<h2>C++</h2>

<p>Code</p>

<pre><code class="c">#include &lt;iostream&gt;
using namespace std;

int main()
{
    std::cout &lt;&lt; "Hello, World!" &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<p>Compile:</p>

<pre><code class="bash">$ c++ hello_cpp.cpp -o hello_cpp
</code></pre>

<p>Run:</p>

<pre><code class="bash">$ time ./hello_cpp
Hello, World!

real    0m0.005s
user    0m0.001s
sys   0m0.001s
</code></pre>

<h2>Golang:</h2>

<p>Code</p>

<pre><code class="go">package main

import "fmt"

func main() {
  fmt.Println("Hello, World!")
}
</code></pre>

<p>Compile:</p>

<pre><code class="bash">$ go build hello_golang.go
</code></pre>

<p>Run:</p>

<pre><code class="bash">time ./hello_golang
Hello, World!

real    0m0.006s
user    0m0.001s
sys   0m0.003s
</code></pre>

<h2>Python</h2>

<p>Code:</p>

<pre><code class="python">#!/usr/bin/env python
print("Hello, World!")
</code></pre>

<p>Make it executable:</p>

<pre><code class="bash">$ chmod +x ./hello_python.py
</code></pre>

<p>Run:</p>

<pre><code class="bash">$ time ./hello_python.py
Hello, World!

real    0m0.033s
user    0m0.015s
sys   0m0.010s
</code></pre>

<h2>Ruby</h2>

<p>Code:</p>

<pre><code class="ruby">#!/usr/bin/env ruby
puts "Hello, World!"
</code></pre>

<p>Make it executable:</p>

<pre><code class="bash">$ chmod +x ./hello_ruby.rb
</code></pre>

<p>Run:</p>

<pre><code class="bash">$ time ./hello_ruby.rb
Hello, World!

real    0m0.136s
user    0m0.080s
sys   0m0.024s
</code></pre>

<h2>Java</h2>

<p>Code:</p>

<pre><code class="java">public class hello_java {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
</code></pre>

<p>Compile:</p>

<pre><code class="bash">$ javac hello_java.java
</code></pre>

<p>Run:</p>

<pre><code class="bash">$ time java hello_java
Hello, World!

real    0m0.114s
user    0m0.086s
sys   0m0.023s
</code></pre>

<h2>Resource:</h2>

<ul>
<li><a href="https://www.lifewire.com/command-return-time-command-4054237">https://www.lifewire.com/command-return-time-command-4054237</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add a Authentication Header to Your Python Flask App]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/06/01/add-a-authentication-header-to-your-python-flask-app/"/>
    <updated>2018-06-01T03:28:05-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/06/01/add-a-authentication-header-to-your-python-flask-app</id>
    <content type="html"><![CDATA[<p><img src="http://obj-cache.cloud.ruanbekker.com/flask.png" alt="" /></p>

<p>We will write a simple Python Flask application that requires authentication in order to respond with a 200 HTTP Status code.</p>

<h2>Python Flask Application:</h2>

<p>Our Python Flask application will require the Header <code>x-api-key dhuejso2dj3d0</code> in the HTTP Request, to give us a 200 HTTP Status code, if not, we will respond with a 401 Unauthorized Response:</p>

<pre><code class="python">from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/')
def index():
    headers = request.headers
    auth = headers.get("X-Api-Key")
    if auth == 'asoidewfoef':
        return jsonify({"message": "OK: Authorized"}), 200
    else:
        return jsonify({"message": "ERROR: Unauthorized"}), 401

if __name__ == '__main__':
    app.run()
</code></pre>

<p>To get the headers, you can use <code>headers.get("X-Api-Key")</code> or <code>headers["X-Api-Key"]</code></p>

<p>Create a virtual environment, install flask and run the app:</p>

<pre><code class="bash">$ virtualenv .venv
$ source .venv/bin/activate
$ python app.py
 * Serving Flask app "app" (lazy loading)
 * Environment: production
   WARNING: Do not use the development server in a production environment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
</code></pre>

<h2>Requests to our App:</h2>

<p>Let&rsquo;s first make a request with no headers, which should then give us a 401 Unautorhized response:</p>

<pre><code class="bash">$ curl -i http://localhost:5000

HTTP/1.0 401 UNAUTHORIZED
Content-Type: application/json
Content-Length: 33
Server: Werkzeug/0.14.1 Python/3.6.5
Date: Fri, 01 Jun 2018 07:26:25 GMT

{"message":"ERROR: Unauthorized"}
</code></pre>

<p>Now let&rsquo;s include the authentication token in our headers. If the string is the same as the one in the code, we should see a 200 HTTP Response:</p>

<pre><code class="bash">$ curl -i -H 'x-api-key: asoidewfoef' http://localhost:5000

HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 29
Server: Werkzeug/0.14.1 Python/3.6.5
Date: Fri, 01 Jun 2018 07:27:03 GMT

{"message":"OK: Authorized"}
</code></pre>

<h2>Note:</h2>

<p>From a best practice, its not a good decision to hard code sensitive details in your code, but rather read that from an encrypted database and store that in your applications environment variables, and let your application read from the environment variables, something like that :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Forms With Python Flask and the WTForms Module With Bootstrap]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/05/27/web-forms-with-python-flask-and-the-wtforms-module-with-bootstrap/"/>
    <updated>2018-05-27T17:44:41-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/05/27/web-forms-with-python-flask-and-the-wtforms-module-with-bootstrap</id>
    <content type="html"><![CDATA[<p><img src="http://obj-cache.cloud.ruanbekker.com/flask.png" alt="" /></p>

<p>Quick demo with Web Forms using the WTForms module in Python Flask.</p>

<h2>Requirements:</h2>

<p>Install the required dependencies:</p>

<pre><code class="bash">$ pip install flask wtforms
</code></pre>

<h2>Application:</h2>

<p>The Application code of the Web Forms Application. Note that we are also using validation, as we want the user to complete all the fields. I am also including a function that logs to the directory where the application is running, for previewing the data that was logged.</p>

<pre><code class="python app.py">from random import randint
from time import strftime
from flask import Flask, render_template, flash, request
from wtforms import Form, TextField, TextAreaField, validators, StringField, SubmitField

DEBUG = True
app = Flask(__name__)
app.config.from_object(__name__)
app.config['SECRET_KEY'] = 'SjdnUends821Jsdlkvxh391ksdODnejdDw'

class ReusableForm(Form):
    name = TextField('Name:', validators=[validators.required()])
    surname = TextField('Surname:', validators=[validators.required()])

def get_time():
    time = strftime("%Y-%m-%dT%H:%M")
    return time

def write_to_disk(name, surname, email):
    data = open('file.log', 'a')
    timestamp = get_time()
    data.write('DateStamp={}, Name={}, Surname={}, Email={} \n'.format(timestamp, name, surname, email))
    data.close()

@app.route("/", methods=['GET', 'POST'])
def hello():
    form = ReusableForm(request.form)

    #print(form.errors)
    if request.method == 'POST':
        name=request.form['name']
        surname=request.form['surname']
    email=request.form['email']
    password=request.form['password']

        if form.validate():
            write_to_disk(name, surname, email)
            flash('Hello: {} {}'.format(name, surname))

        else:
            flash('Error: All Fields are Required')

    return render_template('index.html', form=form)

if __name__ == "__main__":
    app.run()
</code></pre>

<h2>HTML Template:</h2>

<p><code>templates/index.html</code></p>

<script src="https://gist.github.com/ruanbekker/f552f1e57aeb038e8c10b148ed1e4c2b.js"></script>


<p>This will result in a basic web form like this:</p>

<p><img src="https://i.snag.gy/3x98UV.jpg" alt="" /></p>

<h2>Resources:</h2>

<ul>
<li><a href="https://getbootstrap.com/docs/4.1/components/alerts/">https://getbootstrap.com/docs/4.1/components/alerts/</a></li>
<li><a href="https://pythonspot.com/en/download-flask-examples/">https://pythonspot.com/en/download-flask-examples/</a></li>
<li><a href="https://flask-wtf.readthedocs.io/en/stable/quickstart.html">https://flask-wtf.readthedocs.io/en/stable/quickstart.html</a></li>
<li><a href="https://pythonspot.com/flask-web-forms/">https://pythonspot.com/flask-web-forms/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
