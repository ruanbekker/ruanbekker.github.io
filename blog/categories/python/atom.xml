<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-04-21T20:28:19-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Basic RESTFul API Server With Python Flask]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/21/basic-restful-api-server-with-python-flask/"/>
    <updated>2018-04-21T19:35:34-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/21/basic-restful-api-server-with-python-flask</id>
    <content type="html"><![CDATA[<p><img src="http://obj-cache.cloud.ruanbekker.com/flask.png" alt="" /></p>

<p>A Basic RESTFul API Service with Python Flask. We will be using the Flask, jsonify and request classes to build our API service.</p>

<h2>Description of this demonstration:</h2>

<p>Our API will be able to do the following:</p>

<ul>
<li>Create, Read, Update, Delete</li>
</ul>


<p>In this demonstration, we will add some information about people to our API, then go through each method that is mentioned above.</p>

<h2>Getting the Dependencies:</h2>

<p>Setup the virtualenv and install the dependencies:</p>

<pre><code class="bash">$ virtualenv .venv
$ source .venv/bin/activate
$ pip install flask
</code></pre>

<h2>The API Server Code:</h2>

<p>Here&rsquo;s the complete code, as you can see I have a couple of decorators for each url endpoint, and a <code>id_generator</code> function, that will generate id&rsquo;s for each document. The id will be used for getting users information, updates and deletes:</p>

<pre><code class="python">from flask import Flask, jsonify, request
from multiprocessing import Value

counter = Value('i', 0)
app = Flask(__name__)

a = []
help_message = """
API Usage:

- GET    /api/list
- POST   /api/add data={"key": "value"}
- GET    /api/get/&lt;id&gt;
- PUT    /api/update/&lt;id&gt; data={"key": "value_to_replace"}
- DELETE /api/delete/&lt;id&gt; 

"""

def id_generator():
    with counter.get_lock():
        counter.value += 1
        return counter.value

@app.route('/api', methods=['GET'])
def help():
    return help_message

@app.route('/api/list', methods=['GET'])
def list():
    return jsonify(a)

@app.route('/api/add', methods=['POST'])
def index():
    payload = request.json 
    payload['id'] = id_generator()
    a.append(payload)
    return "Created: {} \n".format(payload)

@app.route('/api/get', methods=['GET'])
def get_none():
    return 'ID Required: /api/get/&lt;id&gt; \n'

@app.route('/api/get/&lt;int:_id&gt;', methods=['GET'])
def get(_id):
    for user in a:
        if _id == user['id']:
            selected_user = user
    return jsonify(selected_user)

@app.route('/api/update', methods=['PUT'])
def update_none():
    return 'ID and Desired K/V in Payload required: /api/update/&lt;id&gt; -d \'{"name": "john"}\' \n'

@app.route('/api/update/&lt;int:_id&gt;', methods=['PUT'])
def update(_id):
    update_req = request.json
    key_to_update = update_req.keys()[0]
    update_val = (item for item in a if item['id'] == _id).next()[key_to_update] = update_req.values()[0]
    update_resp = (item for item in a if item['id'] == _id).next()
    return "Updated: {} \n".format(update_resp)

@app.route('/api/delete/&lt;int:_id&gt;', methods=['DELETE'])
def delete(_id):
    deleted_user = (item for item in a if item['id'] == _id).next()
    a.remove(deleted_user)
    return "Deleted: {} \n".format(deleted_user)

if __name__ == '__main__':
    app.run()
</code></pre>

<h2>Demo Time:</h2>

<p>Retrieving the Help output:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api

API Usage:

- GET    /api/list
- POST   /api/add data={"key": "value"}
- GET    /api/get/&lt;id&gt;
- PUT    /api/update/&lt;id&gt; data={"key": "value_to_replace"}
- DELETE /api/delete/&lt;id&gt; 
</code></pre>

<p>Doing a list, to list all the users, its expected for it to be empty as we have not added any info to our API:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api/list
[]
</code></pre>

<p>Adding our first user:</p>

<pre><code class="bash">$ curl -XPOST -H 'Content-Type: application/json' http://localhost:5000/api/add -d '{"name": "ruan", "country": "south africa", "age": 30}'
Created: {u'country': u'south africa', u'age': 30, u'name': u'ruan', 'id': 1} 
</code></pre>

<p>Adding our second user:</p>

<pre><code class="bash">$ curl -XPOST -H 'Content-Type: application/json' http://localhost:5000/api/add -d '{"name": "stefan", "country": "south africa", "age": 29}'
Created: {u'country': u'south africa', u'age': 29, u'name': u'stefan', 'id': 2}
</code></pre>

<p>Doing a list again, will retrieve all our users:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api/list
[
  {
    "age": 30, 
    "country": "south africa", 
    "id": 1, 
    "name": "ruan"
  }, 
  {
    "age": 29, 
    "country": "south africa", 
    "id": 2, 
    "name": "stefan"
  }
]
</code></pre>

<p>Doing a GET on the userid, to only display the users info:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api/get/2
{
  "age": 29, 
  "country": "south africa", 
  "id": 2, 
  "name": "stefan"
}
</code></pre>

<p>Now, let&rsquo;s update some details. Let&rsquo;s say that Stefan relocated to New Zealand. We will need to provide his <code>id</code> and also the key/value that we want to update:</p>

<pre><code class="bash">$ curl -XPUT -H 'Content-Type: application/json' http://localhost:5000/api/update/2 -d '{"country": "new zealand"}'
Updated: {u'country': u'new zealand', u'age': 29, u'name': u'stefan', 'id': 2} 
</code></pre>

<p>As you can see the response confirmed that the value was updated, but let&rsquo;s verify the output, by doing a get on his id:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api/get/2
{
  "age": 29, 
  "country": "new zealand", 
  "id": 2, 
  "name": "stefan"
}
</code></pre>

<p>And lastly, lets delete our user, which will only require the userid:</p>

<pre><code class="bash">$ curl -XDELETE -H 'Content-Type: application/json' http://localhost:5000/api/delete/2
Deleted: {u'country': u'new zealand', u'age': 29, u'name': u'stefan', 'id': 2} 
</code></pre>

<p>To verify this, list all the users:</p>

<pre><code class="bash">$ curl -XGET -H 'Content-Type: application/json' http://localhost:5000/api/list
[
  {
    "age": 30, 
    "country": "south africa", 
    "id": 1, 
    "name": "ruan"
  }
]
</code></pre>

<h2>Using Python Requests:</h2>

<p>We can also use python&rsquo;s requests module to do the same, to give a demonstration I will create a new user:</p>

<pre><code class="bash">$ pip install requests
$ python
</code></pre>

<pre><code class="python">&gt;&gt;&gt; import requests
&gt;&gt;&gt; import json

&gt;&gt;&gt; base_url = 'http://localhost:5000/api/add'
&gt;&gt;&gt; headers = {"Content-Type": "application/json"}
&gt;&gt;&gt; payload = json.dumps({"name": "shaun", "country": "australia", "age": 24})

&gt;&gt;&gt; r = requests.post(base_url, headers=headers, data=payload)
&gt;&gt;&gt; r.content
Created: {u'country': u'australia', u'age': 24, u'name': u'shaun', 'id': 4}
</code></pre>

<p>Thats it. I&rsquo;ve stumbled upon <a href="https://flask-restful.readthedocs.io/en/latest/">Flask-Restful</a> which I still want to check out, and as soon as I do, I will do a post on it, maybe baked with a NoSQL db or something like that.</p>

<p>Cheers!</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://stackoverflow.com/a/8653568">Python Generator Expressions</a></li>
<li><a href="http://flask.pocoo.org/docs/0.12/api/#flask.Request">Flask Docs</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Introduction to Use Arguments With Argparse on Python]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/18/basic-introduction-to-use-arguments-with-argparse-on-python/"/>
    <updated>2018-04-18T13:35:28-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/18/basic-introduction-to-use-arguments-with-argparse-on-python</id>
    <content type="html"><![CDATA[<p>I used to work a lot with <code>sys.argv</code> for using arguments in my applications, until I stumbled upon the <code>argparse</code> module! (Thanks Donovan!)</p>

<p>What I like about argparse, is that it builds up the help menu for you, and you also have a lot of options, as you can set the argument to be required, set the datatypes, addtional help context etc.</p>

<h2>The Basic Demonstration:</h2>

<p>Today we will just run through a very basic example on how to use <code>argparse</code>:</p>

<ul>
<li>Return the generated help menu</li>
<li>Return the required value</li>
<li>Return the additional arguments</li>
<li>Compare arguments with a IF statement</li>
</ul>


<h2>The Python Argparse Tutorial Code:</h2>

<pre><code class="python">import argparse

parser = argparse.ArgumentParser(description='argparse demo')
parser.add_argument('-w', '--word', help='a word (required)', required=True)
parser.add_argument('-s', '--sentence', help='a sentence (not required)', required=False)
parser.add_argument('-c', '--comparison', help='a word to compare (not required)', required=False)
args = parser.parse_args()

print("Word: {}".format(args.word))

if args.sentence:
    print("Sentence: :{}".format(args.sentence))

if args.comparison:
    if args.comparison == args.word:
        print("Comparison: the provided word argument and provided comparison argument is the same")
    else:
        print("Comparison: the provided word argument and provided comparison argument is NOT the same")
</code></pre>

<h2>Seeing it in action:</h2>

<p>To return a usage/help info, run it with the <code>-h</code> or <code>--help</code> argument:</p>

<pre><code class="bash">$ python foo.py -h
usage: foo.py [-h] -w WORD [-s SENTENCE] [-c COMPARISON]

argparse demo

optional arguments:
  -h, --help            show this help message and exit
  -w WORD, --word WORD  a word (required)
  -s SENTENCE, --sentence SENTENCE
                        a sentence (not required)
  -c COMPARISON, --comparison COMPARISON
                        a word to compare (not required)
</code></pre>

<p>For this to work, the application is expecting the <code>word</code> argument to run, as we declared it as <code>required=True</code>:</p>

<pre><code class="bash">$ python foo.py -w hello
Word: hello
</code></pre>

<p>Now to use the arguments that is not required, which makes it optional:</p>

<pre><code class="bash">$ python foo.py -w hello -s "hello, world"
Word: hello
Sentence: :hello, world
</code></pre>

<p>We can also implement some if statements into our application to compare if arguments are the same (as a basic example):</p>

<pre><code class="bash">$ python foo.py -w hello -s "hello, world" -c goodbye
Word: hello
Sentence: :hello, world
Comparison: the provided word argument and provided comparison argument is NOT the same
</code></pre>

<p>We can see that the word and comparison arguments are not the same. When they match up:</p>

<pre><code class="bash">$ python foo.py -w hello -s "hello, world" -c hello
Word: hello
Sentence: :hello, world
Comparison: the provided word argument and provided comparison argument is the same
</code></pre>

<p>This was a very basic demonstration on the <code>argparse</code> module.</p>

<h2>Resource:</h2>

<ul>
<li><a href="https://docs.python.org/3/library/argparse.html">Python Docs: Argparse</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experimenting With Python and TinyMongo a MongoDB Wrapper for TinyDB]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/15/experimenting-with-python-and-tinymongo-a-mongodb-wrapper-for-tinydb/"/>
    <updated>2018-04-15T16:39:22-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/15/experimenting-with-python-and-tinymongo-a-mongodb-wrapper-for-tinydb</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/schapman1974/tinymongo">TinyMongo</a> is a wrapper for MongoDB on top of TinyDB.</p>

<p>This is awesome for testing, where you need a local document orientated database which is backed by a flat file. It feels just like using MongoDB, except that its local, lightweight and using TinyDB in the backend.</p>

<h2>Installing Dependencies:</h2>

<pre><code class="bash">$ pip install tinymongo
</code></pre>

<h2>Usage Examples:</h2>

<p>Initialize tinymongo and create the database and collection:</p>

<pre><code class="python">&gt;&gt;&gt; from tinymongo import TinyMongoClient
&gt;&gt;&gt; connection = TinyMongoClient('foo')
&gt;&gt;&gt; db_init = connection.mydb
&gt;&gt;&gt; db = db_init.users
</code></pre>

<p>Insert a Document, catch the document id and search for that document:</p>

<pre><code class="python">&gt;&gt;&gt; record_id = db .insert_one({'username': 'ruanb', 'name': 'ruan', 'age': 31, 'gender': 'male', 'location': 'south africa'}).inserted_id
&gt;&gt;&gt; user_info = db.find_one({"_id": record_id})
&gt;&gt;&gt; print(user_info)
{u'username': u'ruanb', u'name': u'ruan', u'gender': u'male', u'age': 31, u'_id': u'8d2ce01140ec11e888110242ac110004', u'location': u'south africa'}
</code></pre>

<p>Update a document: Update the age attribute from 31 to 32</p>

<pre><code class="python">&gt;&gt;&gt; db.users.update_one({'_id': '8d2ce01140ec11e888110242ac110004'}, {'$set': {'age': 32 }})
&gt;&gt;&gt; print(user_info)
{u'username': u'ruanb', u'name': u'ruan', u'gender': u'male', u'age': 32, u'_id': u'8d2ce01140ec11e888110242ac110004', u'location': u'south africa'}
</code></pre>

<p>Insert some more data:</p>

<pre><code class="python">&gt;&gt;&gt; record_id = db .insert_one({'username': 'stefanb', 'name': 'stefan', 'age': 30, 'gender': 'male', 'location': 'south africa'}).inserted_id
&gt;&gt;&gt; record_id = db .insert_one({'username': 'alexa', 'name': 'alex', 'age': 34, 'gender': 'male', 'location': 'south africa'}).inserted_id
</code></pre>

<p>Find all the users, sorted by descending age, oldest to youngest:</p>

<pre><code class="python">&gt;&gt;&gt; response = db.users.find(sort=[('age', -1)])
&gt;&gt;&gt; for doc in response:
...     print(doc)
...
{u'username': u'alexa', u'name': u'alex', u'gender': u'male', u'age': 34, u'_id': u'66b1cc3d40ee11e892980242ac110004', u'location': u'south africa'}
{u'username': u'ruanb', u'name': u'ruan', u'gender': u'male', u'age': 32, u'_id': u'8d2ce01140ec11e888110242ac110004', u'location': u'south africa'}
{u'username': u'stefanb', u'name': u'stefan', u'gender': u'male', u'age': 30, u'_id': u'fbe9da8540ed11e88c5e0242ac110004', u'location': u'south africa'}
</code></pre>

<p>Find the number of documents in the collection:</p>

<pre><code class="python">&gt;&gt;&gt; db.users.find().count()
3
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://github.com/schapman1974/tinymongo">TinyMongo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experimenting With Python and Flata the Lightweight Document Orientated Database]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/15/experimenting-with-python-and-flata-the-lightweight-document-orientated-database/"/>
    <updated>2018-04-15T15:09:25-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/15/experimenting-with-python-and-flata-the-lightweight-document-orientated-database</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/l298Y7.jpg" alt="" /></p>

<p><a href="https://github.com/harryho/flata">Flata</a> is a lightweight document orientated database, which was inspired by <a href="https://github.com/msiemens/tinydb">TinyDB</a> and <a href="https://github.com/typicode/lowdb">LowDB</a>.</p>

<h2>Why Flata?</h2>

<p>Most of the times my mind gets in its curious states and I think about alternative ways on doing things, especially testing lightweight apps and today I wondered if theres any NoSQL-like software out there that is easy to spin up and is backed by a flat file, something like <code>sqlite</code> for SQL-like services, so this time just something for NoSQL-like.</p>

<p>So I stumbled upon TinyDB and Flata which is really easy to use and awesome!</p>

<h2>What will we be doing today:</h2>

<ul>
<li>Create Database / Table</li>
<li>Write to the Table</li>
<li>Update Documents from the Table</li>
<li>Scan the Table</li>
<li>Query the Table</li>
<li>Delete Documents from the Table</li>
<li>Purge the Table</li>
</ul>


<h2>Getting the Dependencies:</h2>

<p>Flata is written in Python, so no external dependencies is needed. To install it:</p>

<pre><code class="bash">$ pip install flata
</code></pre>

<h2>Usage Examples:</h2>

<p>My home working directory:</p>

<pre><code class="bash">$ pwd
/home/ruan
</code></pre>

<p>This will be the directory where we will save our database in <code>.json</code> format.</p>

<p>Import the Dependencies:</p>

<pre><code class="python">&gt;&gt;&gt; from flata import Flata, Query, where
&gt;&gt;&gt; from flata.storages import JSONStorage
</code></pre>

<p>Create the Database file where all the data will be persisted:</p>

<pre><code class="python">&gt;&gt;&gt; db_init = Flata('mydb.json', storage=JSONStorage)
</code></pre>

<p>Create the collection / table, with a custom id field. If the resource already exists a retrieve will be done:</p>

<pre><code class="python">&gt;&gt;&gt; db_init.table('collection1', id_field = 'uid')
</code></pre>

<p>List the tables:</p>

<pre><code class="python">&gt;&gt;&gt; db_init.all()
{u'collection1': {}}
</code></pre>

<p>a get method can only be done if the resource exists, and we will assign it to the <code>db</code> object:</p>

<pre><code class="python">&gt;&gt;&gt; db = db_init.get('collection1')
</code></pre>

<p>Insert some data into our table:</p>

<pre><code class="python">&gt;&gt;&gt; db.insert({'username': 'ruanb', 'name': 'ruan', 'age': 31, 'gender': 'male', 'location': 'south africa'})
{'username': 'ruanb', 'uid': 1, 'gender': 'male', 'age': 31, 'location': 'south africa', 'name': 'ruan'}

&gt;&gt;&gt; db.insert({'username': 'stefanb', 'name': 'stefan', 'age': 30, 'gender': 'male', 'location': 'south africa'})
{'username': 'stefanb', 'uid': 2, 'gender': 'male', 'age': 30, 'location': 'south africa', 'name': 'stefan'}

&gt;&gt;&gt; db.insert({'username': 'mikec', 'name': 'mike', 'age': 28, 'gender': 'male', 'location': 'south africa'})
{'username': 'mikec', 'uid': 3, 'gender': 'male', 'age': 28, 'location': 'south africa', 'name': 'mike'}

&gt;&gt;&gt; db.insert({'username': 'sam', 'name': 'samantha', 'age': 24, 'gender': 'female', 'location': 'south africa'})
{'username': 'sam', 'uid': 4, 'gender': 'female', 'age': 24, 'location': 'south africa', 'name': 'samantha'}

&gt;&gt;&gt; db.insert({'username': 'michellek', 'name': 'michelle', 'age': 32, 'gender': 'female', 'location': 'south africa'})
{'username': 'michellek', 'uid': 5, 'gender': 'female', 'age': 32, 'location': 'south africa', 'name': 'michelle'}
</code></pre>

<p>Scan the whole table:</p>

<pre><code class="python">&gt;&gt;&gt; db.all()
[{u'username': u'ruanb', u'uid': 1, u'name': u'ruan', u'gender': u'male', u'age': 31, u'location': u'south africa'}, {u'username': u'stefanb', u'uid': 2, u'name': u'stefan', u'gender': u'male', u'age': 30, u'location': u'south africa'}, {u'username': u'mikec', u'uid': 3, u'name': u'mike', u'gender': u'male', u'age': 28, u'location': u'south africa'}, {u'username': u'sam', u'uid': 4, u'name': u'samantha', u'gender': u'female', u'age': 24, u'location': u'south africa'}, {u'username': u'michellek', u'uid': 5, u'name': u'michelle', u'gender': u'female', u'age': 32, u'location': u'south africa'}]
</code></pre>

<p>Query data from the table.</p>

<p>Query the table for the <code>username =&gt; ruanb</code>:</p>

<pre><code class="python">&gt;&gt;&gt; import json
&gt;&gt;&gt; q = Query()

&gt;&gt;&gt; response = db.search(q.username == 'ruanb')
&gt;&gt;&gt; print(json.dumps(response, indent=2))
[
  {
    u'username': u'ruanb', 
    u'uid': 1, 
    u'name': u'ruan', 
    u'gender': u'male', 
    u'age': 31, 
    u'location': u'south africa'
  }
]
</code></pre>

<p>Query the table for everyone that is older than <code>29</code> and only <code>male</code> genders:</p>

<pre><code class="python">&gt;&gt;&gt; db.search(( q.gender == 'male' ) &amp; (q.age &gt;= 29 ))
[
  {
    u'username': u'ruanb', 
    u'uid': 1, 
    u'name': u'ruan', 
    u'gender': u'male', 
    u'age': 31, 
    u'location': u'south africa'
  }, 
  {
    u'username': u'stefanb', 
    u'uid': 2, 
    u'name': u'stefan', 
    u'gender': u'male', 
    u'age': 30, 
    u'location': u'south africa'
  }
]
</code></pre>

<p>Query the table for everyone that is younger than 25 or males:</p>

<pre><code class="python">&gt;&gt;&gt; db.search(( q.age &lt; 25 ) | (q.gender == 'male' ) )
[
  {
    "username": "ruanb",
    "uid": 1,
    "name": "ruan",
    "gender": "male",
    "age": 31,
    "location": "south africa"
  },
  {
    "username": "stefanb",
    "uid": 2,
    "name": "stefan",
    "gender": "male",
    "age": 30,
    "location": "south africa"
  },
  {
    "username": "mikec",
    "uid": 3,
    "name": "mike",
    "gender": "male",
    "age": 28,
    "location": "south africa"
  },
  {
    "username": "sam",
    "uid": 4,
    "name": "samantha",
    "gender": "female",
    "age": 24,
    "location": "south africa"
  }
]
</code></pre>

<p>Update the location value: Lets say Samantha relocated to New Zealand, and we need to update her location from <code>South Africa</code> to <code>New Zealand</code>:</p>

<pre><code class="python">&gt;&gt;&gt; db.update({'location': 'new zealand'}, where('username') == 'sam' )
([4], [{u'username': u'sam', u'uid': 4, u'name': u'samantha', u'gender': u'female', u'age': 24, u'location': 'new zealand'}])

&gt;&gt;&gt; db.search(q.username == 'sam')
[{u'username': u'sam', u'uid': 4, u'name': u'samantha', u'gender': u'female', u'age': 24, u'location': u'new zealand'}]
</code></pre>

<p>Delete a document by its id:</p>

<pre><code class="python">&gt;&gt;&gt; db.remove(ids=[4])
([4], [])
</code></pre>

<p>Delete all documents matching a query, for this example, all people with the gender: <code>male</code>:</p>

<pre><code class="python">&gt;&gt;&gt; db.remove(q.gender == 'male')
([1, 2, 3], [])
</code></pre>

<p>Delete all the data in the table:</p>

<pre><code class="python">&gt;&gt;&gt; db.purge()
</code></pre>

<p>When we exit, you will find the database file, which we created:</p>

<pre><code class="bash">$ ls
mydb.json
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://github.com/harryho/flata">Flata</a></li>
<li><a href="https://github.com/msiemens/tinydb">TinyDB</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using AWS SSM Parameter Store to Retrieve Secrets Encrypted by KMS Using Python]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/04/using-aws-ssm-parameter-store-to-retrieve-secrets-encrypted-by-kms-using-python/"/>
    <updated>2018-04-04T16:47:16-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/04/using-aws-ssm-parameter-store-to-retrieve-secrets-encrypted-by-kms-using-python</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/4ytE3W.jpg" alt="" /></p>

<p>Today we will use Amazon Web Services SSM Service to store secrets in their Parameter Store which we will encyrpt using KMS.</p>

<p>Then we will read the data from SSM and decrypt using our KMS key. We will then end it off by writing a Python Script that reads the AWS credentials, authenticates with SSM and then read the secret values that we stored.</p>

<h2>The Do List:</h2>

<p>We will break up this post in the following topics:</p>

<ul>
<li>Create a KMS Key which will use to Encrypt/Decrypt the Parameter in SSM</li>
<li>Create the IAM Policy which will be used to authorize the Encrypt/Decrypt by the KMS ID</li>
<li>Create the KMS Alias</li>
<li>Create the Parameter using PutParameter as a SecureString to use Encryption with KMS</li>
<li>Describe the Parameters</li>
<li>Read the Parameter with and without Decryption to determine the difference using GetParameter</li>
<li>Read the Parameters using GetParameters</li>
<li>Environment Variable Example</li>
</ul>


<h2>Create the KMS Key:</h2>

<p>As the administrator, or root account, create the KMS Key:</p>

<pre><code class="python">&gt;&gt;&gt; import boto3
&gt;&gt;&gt; session = boto3.Session(region_name='eu-west-1', profile_name='personal')
&gt;&gt;&gt; iam = session.client('iam')
&gt;&gt;&gt; kms = session.client('kms')
&gt;&gt;&gt; response = kms.create_key(
    Description='Ruan Test Key', 
    KeyUsage='ENCRYPT_DECRYPT', 
    Origin='AWS_KMS', 
    BypassPolicyLockoutSafetyCheck=False, 
    Tags=[{'TagKey': 'Name', 'TagValue': 'RuanTestKey'}]
)

&gt;&gt;&gt; print(response['KeyMetadata']['KeyId'])
foobar-2162-4363-ba02-a953729e5ce6 
</code></pre>

<p>Create the IAM Policy:</p>

<pre><code class="python">&gt;&gt;&gt; response = iam.create_policy(
    PolicyName='ruan-kms-test-policy', 
    PolicyDocument='{
        "Version": "2012-10-17", 
        "Statement": [{
            "Sid": "Stmt1517212478199", 
            "Action": [
                "kms:Decrypt", 
                "kms:Encrypt"
            ], 
            "Effect": "Allow", 
            "Resource": "arn:aws:kms:eu-west-1:0123456789012:key/foobar-2162-4363-ba02-a953729e5ce6"
        }]
    }', 
    Description='Ruan KMS Test Policy'
)
&gt;&gt;&gt; print(response['Policy']['Arn'])
arn:aws:iam::0123456789012:policy/ruan-kms-test-policy
</code></pre>

<p>Create the KMS Alias:</p>

<pre><code class="python">&gt;&gt;&gt; response = kms.create_alias(AliasName='alias/ruan-test-kms', TargetKeyId='foobar-2162-4363-ba02-a953729e5ce6')
</code></pre>

<h2>Publish the Secrets to SSM:</h2>

<p>As the administrator, write the secret values to the parameter store in SSM. We will publish a secret with the Parameter: <code>/test/ruan/mysql/db01/mysql_hostname</code> and the Value: <code>db01.eu-west-1.mycompany.com</code>:</p>

<pre><code class="python">&gt;&gt;&gt; from getpass import getpass
&gt;&gt;&gt; secretvalue = getpass()
Password:

&gt;&gt;&gt; print(secretvalue)
db01.eu-west-1.mycompany.com

&gt;&gt;&gt; response = ssm.put_parameter(
    Name='/test/ruan/mysql/db01/mysql_hostname', 
    Description='RuanTest MySQL Hostname', 
    Value=secretvalue, 
    Type='SecureString', 
    KeyId='foobar-2162-4363-ba02-a953729e5ce6', 
    Overwrite=False
)
</code></pre>

<h2>Describe Parameters</h2>

<p>Describe the Parameter that we written to SSM:</p>

<pre><code class="python">&gt;&gt;&gt; response = ssm.describe_parameters(
    Filters=[{'Key': 'Name', 'Values': ['/test/ruan/mysql/db01/mysql_hostname']}]
)
&gt;&gt;&gt; print(response['ResponseMetadata']['Parameters'][0]['Name'])
'/test/ruan/mysql/db01/mysql_hostname' 
</code></pre>

<h2>Reading from SSM:</h2>

<p>Read the Parameter value from SSM without using decryption via KMS:</p>

<pre><code class="python">&gt;&gt;&gt; response = ssm.get_parameter(Name='/test/ruan/mysql/db01/mysql_hostname')
&gt;&gt;&gt; print(response['Parameter']['Value'])
AQICAHh7jazUUBgNxMQbYFeve2/p+UWTuyAd5F3ZJkZkf9+hwgF+H+kSABfPCTEarjXqYBaJAAAAejB4BgkqhkiG9w0BBwagazBpAgEAMGQGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMJUEuT8wDGCQ3zRBmAgEQgDc8LhLgFe+Rutgi0hOKnjTEVQa2lKTy3MmTDZEeLy3Tlr5VUl6AVJNBpd4IWJTbj5YuqrrAAWWJ
</code></pre>

<p>As you can see the value is encrypted, this time read the parameter value with specifying decryption via KMS:</p>

<pre><code class="python">&gt;&gt;&gt; response = ssm.get_parameter(Name='/test/ruan/mysql/db01/mysql_hostname', WithDecryption=True)
&gt;&gt;&gt; print(response['Parameter']['Value'])
db01.eu-west-1.mycompany.com
</code></pre>

<h2>Grant Permissions to Instance Profile:</h2>

<p>Now we will create a policy that can only decrypt and read values from SSM that matches the path: <code>/test/ruan/mysql/db01/mysql_*</code>. This policy will be associated to a instance profile role, which will be used by EC2, where our application will read the values from.</p>

<p>Our policy will look like this:</p>

<pre><code class="json">{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "Stmt1517398919242",
      "Action": [
        "kms:Decrypt"
      ],
      "Effect": "Allow",
      "Resource": "arn:aws:kms:eu-west-1:0123456789012:key/foobar-2162-4363-ba02-a953729e5ce6"
    },
    {
      "Sid": "Stmt1517399021096",
      "Action": [
        "ssm:GetParameter"
      ],
      "Effect": "Allow",
      "Resource": "arn:aws:ssm:eu-west-1:0123456789012:parameter/test/ruan/mysql/db01/mysql_*"
    }
  ]
}
</code></pre>

<p>Create the Policy:</p>

<pre><code class="python">&gt;&gt;&gt; pol = '{"Version": "2012-10-17","Statement": [{"Sid": "Stmt1517398919242","Action": ["kms:Decrypt"],"Effect": "Allow","Resource": "arn:aws:kms:eu-west-1:0123456789012:key/foobar-2162-4363-ba02-a953729e5ce6"},{"Sid": "Stmt1517399021096","Action": ["ssm:GetParameter"],"Effect": "Allow","Resource": "arn:aws:ssm:eu-west-1:0123456789012:parameter/test/ruan/mysql/db01/mysql_*"}]}'
&gt;&gt;&gt; response = iam.create_policy(PolicyName='RuanGetSSM-Policy', PolicyDocument=pol, Description='Test Policy to Get SSM Parameters')
</code></pre>

<p>Create the instance profile:</p>

<pre><code class="python">&gt;&gt;&gt; response = iam.create_instance_profile(InstanceProfileName='RuanTestSSMInstanceProfile')
</code></pre>

<p>Create the Role:</p>

<pre><code class="python">&gt;&gt;&gt; response = iam.create_role(RoleName='RuanTestGetSSM-Role', AssumeRolePolicyDocument='{"Version": "2012-10-17","Statement": [{"Sid": "","Effect": "Allow","Principal": {"Service": "ec2.amazonaws.com"},"Action": "sts:AssumeRole"}]}')
</code></pre>

<p>Associate the Role and Instance Profile:</p>

<pre><code class="python">&gt;&gt;&gt; response = iam.add_role_to_instance_profile(InstanceProfileName='RuanTestSSMInstanceProfile', RoleName='RuanTestGetSSM-Role')
</code></pre>

<p>Attach the Policy to the Role:</p>

<pre><code class="python">&gt;&gt;&gt; response = iam.put_role_policy(RoleName='RuanTestGetSSM-Role', PolicyName='RuanTestGetSSMPolicy1', PolicyDocument=pol')
</code></pre>

<p>Launch the EC2 instance with the above mentioned Role. Create the <code>get_ssm.py</code> and run it to decrypt and read the value from SSM:</p>

<pre><code class="python get_ssm.py">import boto3
session = boto3.Session(region_name='eu-west-1')
ssm = session.client('ssm')
hostname = ssm.get_parameter(Name='/test/ruan/mysql/db01/mysql_hostname', WithDecryption=True)
print(hostname['Parameter']['Value'])
</code></pre>

<p>Run it:</p>

<pre><code class="bash">$ python get_ssm.py
db01.eu-west-1.mycompany.com
</code></pre>

<h2>Reading with GetParameters:</h2>

<p>So say that we created more than one parameter in the path that we allowed, lets use <code>GetParameters</code> to read more than one Parameter:</p>

<pre><code class="python get_parameters.py">import boto3
session = boto3.Session(region_name='eu-west-1')
ssm = session.client('ssm')
response = ssm.get_parameters(
    Names=[
        '/test/ruan/mysql/db01/mysql_hostname', 
        '/test/ruan/mysql/db01/mysql_user'
    ], 
    WithDecryption=True
)

for secrets in response['Parameters']:
    if secrets['Name'] == '/test/ruan/mysql/db01/mysql_hostname':
        print("Hostname: {}".format(secrets['Value']))
    if secrets['Name'] == '/test/ruan/mysql/db01/mysql_user':
        print("Username: {}".format(secrets['Value']))
</code></pre>

<p>Run it:</p>

<pre><code class="bash">$ python get_parameters.py
Hostname: db01.eu-west-1.mycompany.com
Username: super_dba
</code></pre>

<h2>Environment Variable Example from an Application:</h2>

<p>Set the Environment Variable value to the SSM key:</p>

<pre><code class="bash">$ export MYSQL_HOSTNAME="/test/ruan/mysql/db01/mysql_hostname"
$ export MYSQL_USERNAME="/test/ruan/mysql/db01/mysql_user"
</code></pre>

<p>The application code:</p>

<pre><code class="python">import os
import boto3

session = boto3.Session(region_name='eu-west-1')
ssm = session.client('ssm')

MYSQL_HOSTNAME = os.environ.get('MYSQL_HOSTNAME')
MYSQL_USERNAME = os.environ.get('MYSQL_USERNAME')

hostname = ssm.get_parameter(Name=MYSQL_HOSTNAME, WithDecryption=True)
username = ssm.get_parameter(Name=MYSQL_USERNAME, WithDecryption=True)

print("Hostname: {}".format(hostname['Parameter']['Value']))
print("Username: {}".format(username['Parameter']['Value']))
</code></pre>

<p>Let the application transform the key to the SSM Value:</p>

<pre><code class="bash">$ python app.py
Hostname: db01.eu-west-1.mycompany.com
Username: super_dba
</code></pre>

<h2>Resources:</h2>

<p>Great thanks to the following resources:</p>

<ul>
<li><a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-su-organize.html">https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-su-organize.html</a></li>
<li><a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-roles.html">https://docs.aws.amazon.com/cli/latest/userguide/cli-roles.html</a></li>
<li><a href="https://github.com/iMilnb/awstools/blob/master/platforms/roles/mkrole.py">https://github.com/iMilnb/awstools/blob/master/platforms/roles/mkrole.py</a></li>
<li><a href="https://github.com/ktruckenmiller/ssm-get-parameter-by-path/blob/master/python.py">https://github.com/ktruckenmiller/ssm-get-parameter-by-path/blob/master/python.py</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
