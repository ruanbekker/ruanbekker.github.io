<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2017-11-09T11:26:05-05:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux Shell Commands With the Python Commands Module]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/11/06/linux-shell-commands-with-the-python-commands-module/"/>
    <updated>2017-11-06T15:15:23-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/11/06/linux-shell-commands-with-the-python-commands-module</id>
    <content type="html"><![CDATA[<p>Using Python to Execute Shell Commands in Linux</p>

<h2>Status Code and Output:</h2>

<p>Getting the Status Code and the Output:</p>

<pre><code class="python">&gt;&gt;&gt; import commands
&gt;&gt;&gt; commands.getstatusoutput('echo foo')
(0, 'foo')

&gt;&gt;&gt; status, output = commands.getstatusoutput('echo foo')
&gt;&gt;&gt; print(status)
0
&gt;&gt;&gt; print(output)
foo
</code></pre>

<h2>Command Output Only:</h2>

<p>Only getting the Shell Output:</p>

<pre><code class="python">&gt;&gt;&gt; import commands
&gt;&gt;&gt; commands.getoutput('echo foo')
'foo'
</code></pre>

<h2>Basic Script</h2>

<p>Test file with a one line of data:</p>

<pre><code class="bash">$ cat file.txt 
test-string
</code></pre>

<p>Our very basic python script:</p>

<pre><code class="python">import commands

status = None
output = None

status, output = commands.getstatusoutput('cat file.txt')
print("Status: {}, Output: {}".format(status, output))
</code></pre>

<p>Running the script:</p>

<pre><code class="bash">$ python script.py 
Status: 0, Output: test-string
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Python to Query MySQL Database With MySQLdb Library]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/26/using-python-to-query-mysql-database-with-mysqldb-library/"/>
    <updated>2017-10-26T03:40:11-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/26/using-python-to-query-mysql-database-with-mysqldb-library</id>
    <content type="html"><![CDATA[<p>a Quick post to demostrate how to use Python to Query data from MySQL. We will use the MySQL Docker Image for the demonstration.</p>

<h2>Provision MySQL</h2>

<p>We will use the latest mysql image, and use the environment variable to pass the root password, and also expose the mysql port:</p>

<pre><code class="bash">$ docker run -itd -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password mysql
</code></pre>

<h2>Populate some data in MySQL</h2>

<p>Connect to MySQL:</p>

<pre><code class="bash">$ mysql -h 127.0.0.1 -u root -ppasword
</code></pre>

<p>Create some test data:</p>

<pre><code class="sql">mysql&gt; create database foo;
mysql&gt; use foo;
mysql&gt; create table bar (name VARCHAR(20), surname VARCHAR(20));
mysql&gt; insert into bar values('ruan', 'bekker');
mysql&gt; insert into bar values('stefan', 'bester');
mysql&gt; insert into bar values('peter', 'williams');
</code></pre>

<h2>Python with MySQL: Setup the Environment</h2>

<p>We will use virtualenv to create a virtual environment to keep our installation isolated from the rest of our system. Install virtualenv:</p>

<pre><code class="bash">$ pip install virtualenv
</code></pre>

<p>Create a virtual environment and install the required dependency:</p>

<pre><code class="bash">$ virtualenv venv-mysql
$ source venv-mysql/bin/activate
(venv-mysql) pip install MySQL-python
</code></pre>

<h2>Python with MySQL: Develop the Client</h2>

<pre><code class="python">&gt;&gt;&gt; import MySQLdb
&gt;&gt;&gt; db = MySQLdb.connect('127.0.0.1', 'root', 'password', 'foo')
&gt;&gt;&gt; con = db.cursor()
&gt;&gt;&gt; con.execute("SELECT * from bar")
4L
&gt;&gt;&gt; rows = con.fetchall()
&gt;&gt;&gt; for row in rows:
...     print(row[0], row[1])
... 
('ruan', 'bekker')
('stefan', 'bester')
('peter', 'williams')
&gt;&gt;&gt; exit()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Example With Python to Create a Module That Consists of Classes and Functions]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/22/basic-example-with-python-to-create-a-module-that-consists-of-classes-and-functions/"/>
    <updated>2017-10-22T05:45:17-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/22/basic-example-with-python-to-create-a-module-that-consists-of-classes-and-functions</id>
    <content type="html"><![CDATA[<p>Just a very basic example how to create a Python Module that consists of a Single Class and 2 basic functions.</p>

<p>Our main app will can our module to print out a word, that we pass to our first function.</p>

<h2>The Directory Setup:</h2>

<p>Below is a tree view of my current working directory:</p>

<pre><code class="bash">$ tree
.
├── providers
│   ├── __init__.py
│   ├── test.py
├── README.md
└── main.py
</code></pre>

<p>In order to make a python file a module, we need to have a blank <code>__init__.py</code> file in our directory. So any files under our providers directory will be seen as modules from our <code>main.py</code> file.</p>

<h2>Our Test Module:</h2>

<p>in our <code>providers/test.py</code> file:</p>

<pre><code class="python">class TestClass:

    def word_to_return(self, word_value):
        return word_value

    def simple_test(self):
        data = self.word_to_return('its me!')
        return data
</code></pre>

<p>Then our <code>providers/test.py</code> file will be blank.</p>

<p>Our <code>main.py</code>, we will import our test module, instantiate our class, and call our function within the class that we instantiated:</p>

<pre><code class="python">from providers import test

test_instance = test.TestClass()
response = test_instance.simple_test()

print(response)
</code></pre>

<p>instead of <code>response = test_instance.simple_test()</code>, you could also do <code>print(test_instance.simple_test()</code></p>

<h2>Testing it out:</h2>

<pre><code class="bash">$ python main.py
its me!
</code></pre>

<p>It&rsquo;s very basic but will post some more topics around this in the future.</p>

<p>Also note, this blog is for quick posts that I come accross during my daily doings, for more details tutorials have a look at my main blog: <a href="https://sysadmins.co.za/?referral=blog.ruanbekker.com?category=python">sysadmins.co.za</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Script to Decrypt Encrypted Data With AWS KMS]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/20/python-script-to-decrypt-encrypted-data-with-aws-kms/"/>
    <updated>2017-10-20T04:54:51-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/20/python-script-to-decrypt-encrypted-data-with-aws-kms</id>
    <content type="html"><![CDATA[<p>Quick script to decrypt data that was encrypted with your KMS key:</p>

<h2>The Script:</h2>

<p>The script requires the encrypted scring as an argument:</p>

<pre><code class="python">#!/usr/bin/env python

import boto3
import sys
from base64 import b64decode

try:
    encrypted_value = sys.argv[1]
except IndexError:
    print("Usage: {} {}".format(sys.argv[0], 'the-encrypted-string'))
    exit(1)

session = boto3.Session(
        region_name='eu-west-1',
        profile_name='default'
    )

kms = session.client('kms')

response = kms.decrypt(CiphertextBlob=b64decode(encrypted_value))['Plaintext']
print("Decrypted Value: {}".format(response))
</code></pre>

<p>Change the permissions so that the file is executable:</p>

<pre><code class="bash">$ chmod +x decrypt.py
</code></pre>

<h2>Usage:</h2>

<pre><code class="bash">$ ./decrypt.py asdlaskjdasidausd09q3uoijad09ujd38u309
Decrypted Value: thisIsMyDecryptedValue
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Python to Build a Dictionary From Data Eg Sports Per Person]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/14/using-python-to-build-a-dictionary-from-data-eg-sports-per-person/"/>
    <updated>2017-10-14T14:53:48-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/14/using-python-to-build-a-dictionary-from-data-eg-sports-per-person</id>
    <content type="html"><![CDATA[<p>I had to achieve a way to provide data in key-value format, where I wanted to see what sports people like, eg: <code>{"ruan": ["rugby", "cricket"]}</code></p>

<h2>The Idea</h2>

<p>So my idea was to have the <code>name</code> as the key, and the <code>sports</code> as the value in a list.</p>

<h2>Some Catches</h2>

<p>So for this post, I will be setting the data statically in the code, while at the time I was working data that was returned via a API.</p>

<p>I am looping through each occurence, adding the name, and when the name exists, I append the sport to the list of the person.</p>

<p>The catch was that, if there was any duplicated data, the person will only exists once in the dictionary that I am building, but the sport will be appended, so if there were 2 occurences of <code>rugby</code> it will show the sport 2 times. So I had to put some logic into the code to handle that.</p>

<h2>The Code</h2>

<pre><code class="python">"""|Info:

Printing Sports per Person, by looping through data, appending the sports to a list per person, which gets added to our dictionary.

Variables:
    group {dict} -- "the dictionary that we are building up"
    people {list} -- "list of people with their sport choices"
    for sportman in people: {[for-loop]} -- "iterating through our data, if the sport exists, continue, if not, apeend it to the list"
    print(group) {[dict]} -- "printing the results"
"""

group = {}
people = [
    {
        "name": "ruan", 
        "sport": "cricket"
    }, 
    {
        "name": "stefan", 
        "sport": "rugby"
    }, 
    {
        "name": "stefan", 
        "sport": "cricket"
    }, 
    {
        "name": "james", 
        "sport": "rugby"
    }, 
    {
        "name": "james", 
        "sport": "golf"
    }, 
    {
        "name": "stefan", 
        "sport": "rugby"
    }, 
    {
        "name": "james", 
        "sport": "hockey"
    }
]

for sportman in people:
    if sportman['name'] in group:
        if sportman['sport'] not in group[sportman['name']]:
            group[sportman['name']].append(sportman['sport'])
        else:
            pass
    else:
        group[sportman['name']] = []
        group[sportman['name']].append(sportman['sport'])

print(group)
</code></pre>

<h2>Running the Script:</h2>

<p>When running the script results in the following:</p>

<pre><code class="bash">$ python sports.py 
{'james': ['rugby', 'golf', 'hockey'], 'ruan': ['cricket'], 'stefan': ['rugby', 'cricket']}
</code></pre>
]]></content>
  </entry>
  
</feed>
