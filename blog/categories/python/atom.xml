<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2017-09-09T19:11:11-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Python to Write Data to a MySQL Database]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/09/using-python-to-write-data-to-a-mysql-database/"/>
    <updated>2017-09-09T16:39:59-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/09/using-python-to-write-data-to-a-mysql-database</id>
    <content type="html"><![CDATA[<p>From our <a href="http://blog.ruanbekker.com/blog/2017/09/09/using-python-to-read-data-from-a-mysql-database/">previous</a> post, we used python to read data from mysql. In this post we will be using the <code>random</code> library to write random data into mysql.</p>

<p>We will define our lists with the categorized data, and then using for loop, to write data into our mysql database:</p>

<h2>Create The Database:</h2>

<p>Using Python to Create the Database:</p>

<pre><code class="python">&gt;&gt;&gt; conn = pdb.connect(host=db_host, user=db_username, passwd=db_password)
&gt;&gt;&gt; cursor = conn.cursor()
&gt;&gt;&gt; cursor.execute("CREATE DATABASE testdb1")
1L
&gt;&gt;&gt; cursor.execute("CREATE TABLE testdb1.myusers(name VARCHAR(50), surname VARCHAR(50), countries VARCHAR(50), job VARCHAR(20), os VARCHAR(20), car VARCHAR(20))")
0L
</code></pre>

<p>Now to list our databases:</p>

<pre><code class="python">&gt;&gt;&gt; cursor.execute("show databases")
12L

&gt;&gt;&gt; dbs = cursor.fetchall()
&gt;&gt;&gt; for x in dbs:
...     print(x)
...

('information_schema',)
('mysql',)
('performance_schema',)
('testdb1',)
</code></pre>

<h2>Python Code to Write to MySQL</h2>

<p>We will create a <code>mysql_write.py</code> file, with the following contents to define our random data that we will write to our mysql database. The config module can be found from <a href="http://blog.ruanbekker.com/blog/2017/09/09/using-python-to-read-data-from-a-mysql-database/">this</a> post.</p>

<pre><code class="python mysql_write.py">import MySQLdb as pdb
from config import credentials as secrets
import random
import datetime

db_host = secrets['mysql']['host']
db_username = secrets['mysql']['username']
db_password = secrets['mysql']['password']
db_name = secrets['mysql']['database']

for x in range(10):
    a = random.choice(names)
    b = random.choice(surnames)
    c = random.choice(countries)
    d = random.choice(job)
    e = random.choice(os)
    f = random.choice(car)

    cursor.execute("INSERT INTO myusers values('{name}', '{surname}', '{countries}', '{job}', '{os}', '{car}');".format(name=a, surname=b, countries=c, job=d, os=e, car=f))

conn.commit()
conn.close()
</code></pre>

<p>After running the file: <code>python mysql_write.py</code> we should have 10 records in our database.</p>

<h2>Reading the Data from MySQLL</h2>

<p>To verify that the data is in our MySQL Database, lets logon to our mysql database:</p>

<pre><code class="bash">$ mysql -u root -p
</code></pre>

<pre><code class="mysql">mysql&gt; select * from testdb1.myusers;
+----------+----------+-----------+----------------+---------+---------------+
| name     | surname  | countries | job            | os      | car           |
+----------+----------+-----------+----------------+---------+---------------+
| James    | James    | New York  | Waiter         | Mac     | Volkswagen    |
| Jennifer | Smith    | New York  | Scientist      | Windows | Audi          |
| Michelle | Jacobs   | Italy     | Police Officer | Mac     | Ford          |
| Michelle | Anderson | Italy     | Waiter         | Windows | Ford          |
| Jennifer | Smith    | England   | Doctor         | Windows | Toyota        |
| Peter    | Jacobs   | England   | IT             | Windows | BMW           |
| Samantha | James    | England   | Doctor         | Mac     | Mazda         |
| Frank    | Phillips | England   | IT             | Mac     | BMW           |
| Samantha | James    | England   | Banker         | Linux   | Mercedez-Benz |
| Peter    | Anderson | Sweden    | Doctor         | Windows | BMW           |
+----------+----------+-----------+----------------+---------+---------------+
</code></pre>

<p>Next, lets use Python to do the same, create a file <code>mysql_read.py</code> with the following content:</p>

<pre><code class="python">import MySQLdb as pdb
from config import credentials as secrets

db_host = secrets['mysql']['host']
db_username = secrets['mysql']['username']
db_password = secrets['mysql']['password']
db_name = secrets['mysql']['database']

conn = pdb.connect(host=db_host, user=db_username, passwd=db_password, db=db_name)
cursor = conn.cursor()

cursor.execute("select * from myusers")
read = cursor.fetchall()

for x in read:
    print(x)

conn.close()
</code></pre>

<p>Running the Python file, to read the data:</p>

<pre><code class="bash">$ python mysql_read.py

('James', 'James', 'New York', 'Waiter', 'Mac', 'Volkswagen')
('Jennifer', 'Smith', 'New York', 'Scientist', 'Windows', 'Audi')
('Michelle', 'Jacobs', 'Italy', 'Police Officer', 'Mac', 'Ford')
('Michelle', 'Anderson', 'Italy', 'Waiter', 'Windows', 'Ford')
('Jennifer', 'Smith', 'England', 'Doctor', 'Windows', 'Toyota')
('Peter', 'Jacobs', 'England', 'IT', 'Windows', 'BMW')
('Samantha', 'James', 'England', 'Doctor', 'Mac', 'Mazda')
('Frank', 'Phillips', 'England', 'IT', 'Mac', 'BMW')
('Samantha', 'James', 'England', 'Banker', 'Linux', 'Mercedez-Benz')
('Peter', 'Anderson', 'Sweden', 'Doctor', 'Windows', 'BMW')
</code></pre>

<center>
        <script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script>
</center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Python to Read Data From a MySQL Database]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/09/using-python-to-read-data-from-a-mysql-database/"/>
    <updated>2017-09-09T15:23:05-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/09/using-python-to-read-data-from-a-mysql-database</id>
    <content type="html"><![CDATA[<p>Wanted to use Python to read some data from MySQL and stumbled upon a couple of great resources, which I noted some of my output below:</p>

<h2>Install Dependencies:</h2>

<pre><code class="bash ">$ apt install python-dev libmysqlclient-dev python-setuptools gcc
$ easy_install pip
$ pip install MySQL-python
</code></pre>

<h2>Download Some Sample Data:</h2>

<p>Download the world dataset for MySQL:</p>

<pre><code class="bash">$ wget http://downloads.mysql.com/docs/world.sql.zip
$ unzip world.sql.zip
</code></pre>

<h2>Create Database:</h2>

<p>Create the Database in MySQL for the dataset that we downloaded:</p>

<pre><code class="bash">$ mysql -u root -p -e'CREATE DATABASE world;'
</code></pre>

<h2>Import Data:</h2>

<p>Import the data into the <code>world</code> database:</p>

<pre><code class="bash">$ mysql -u root -p world &lt; world.sql
</code></pre>

<h2>Create the MySQL Credentials File:</h2>

<p>Create a <code>config.py</code> file and populate the credentials in a dictionary:</p>

<pre><code class="python">credentials = {
    'mysql': {
        'host': 'localhost',
        'username': 'root',
        'password': 'password',
        'database': 'world'
    }
}
</code></pre>

<h2>Run Queries from Python:</h2>

<p>Enter the Python interpreter and run some queries:</p>

<pre><code class="python">&gt;&gt;&gt; import MySQLdb as pdb
&gt;&gt;&gt; from config import credentials as secrets

# assignments 
&gt;&gt;&gt; db_host = secrets['mysql']['host']
&gt;&gt;&gt; db_username = secrets['mysql']['username']
&gt;&gt;&gt; db_password = secrets['mysql']['password']
&gt;&gt;&gt; db_name = secrets['mysql']['database']

# create a connection to the database
&gt;&gt;&gt; conn = pdb.connect(host=db_host, user=db_username, passwd=db_password, db=db_name)

# create a object for the queries we will be using
&gt;&gt;&gt; cursor = conn.cursor()

# execute the query
&gt;&gt;&gt; cursor.execute('select continent, name from country where continent = "Africa" limit 5')
5L

# fetch the results by assigning it to the results object:
&gt;&gt;&gt; results = cursor.fetchall()

# loop and print results:
&gt;&gt;&gt; for x in results:
...     print(x)
...
('Africa', 'Angola')
('Africa', 'Burundi')
('Africa', 'Benin')
('Africa', 'Burkina Faso')
('Africa', 'Botswana')

# close the connection
&gt;&gt;&gt; conn.close()
</code></pre>

<h2>Graphing Results to Plotly:</h2>

<p>A great <a href="http://moderndata.plot.ly/graph-data-from-mysql-database-in-python/">blogpost</a> that shows how to use this data to graph the results to plotly</p>

<h2>Resources:</h2>

<ul>
<li><a href="http://moderndata.plot.ly/graph-data-from-mysql-database-in-python/">http://moderndata.plot.ly/graph-data-from-mysql-database-in-python/</a></li>
<li><a href="https://stackoverflow.com/questions/11007627/python-variable-declaration">https://stackoverflow.com/questions/11007627/python-variable-declaration</a></li>
</ul>


<center>
        <script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script>
</center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Minios Python SDK to Interact With a Minio S3 Bucket]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/08/using-minios-python-sdk-to-interact-with-a-minio-s3-bucket/"/>
    <updated>2017-09-08T16:15:52-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/08/using-minios-python-sdk-to-interact-with-a-minio-s3-bucket</id>
    <content type="html"><![CDATA[<p>In our previous post, we have <a href="http://blog.ruanbekker.com/blog/2017/09/08/run-your-self-hosted-s3-service-with-minio-on-docker-swarm/">Setup Minio Server</a> which is a self-hosted alternative to Amazon&rsquo;s S3 Service.</p>

<p>We will go through some basic examples on working with the Python SDK, to interact with Minio.</p>

<h2>Installing the Minio Python Library:</h2>

<p>Ensure that Python and Pip is installed, the install the Python Minio Library:</p>

<pre><code class="bash">$ virtualenv -p /usr/local/bin/python2.7 .venv
$ source .venv/bin/activate
(.venv)$ pip install minio
</code></pre>

<h2>Create a Bucket:</h2>

<p>Enter the Python Interpreter and Create a S3 Bucket on your Minio Server:</p>

<pre><code class="python">&gt;&gt;&gt; from minio import Minio
&gt;&gt;&gt; client = Minio('10.0.0.2:9000', access_key='ASDASDASD', secret_key='ASDASDASD', secure=False)
&gt;&gt;&gt; client.make_bucket('pythonbucket', location='us-west-1')
</code></pre>

<h2>List Buckets:</h2>

<p>I have also created a bucket from my previous post, so we should have 2 buckets:</p>

<pre><code class="python">&gt;&gt;&gt; buckets = client.list_buckets()
&gt;&gt;&gt; for bucket in buckets:
...     print(bucket).name
...
news3bucket
pythonbucket
</code></pre>

<h2>Put Objects to your Bucket:</h2>

<p>Write a string to a file, then upload the file to 2 different destination objects. The arguments is: BucketName, Destination, Source.</p>

<pre><code class="python">&gt;&gt;&gt; data = open('file.txt', 'w')
&gt;&gt;&gt; data.write('This is some text' + '\n')
&gt;&gt;&gt; data.close()

&gt;&gt;&gt; client.fput_object('pythonbucket', 'bucket/contents/file.txt', 'file.txt')
'6b8c327f0fc6f470c030a5b6c71154c5'
&gt;&gt;&gt; client.fput_object('pythonbucket', 'bucket/contents/file2.txt', 'file.txt')
'6b8c327f0fc6f470c030a5b6c71154c5'
</code></pre>

<h2>List Objects in your Bucket:</h2>

<p>List the objects in your bucket:</p>

<pre><code class="python">&gt;&gt;&gt; objects = client.list_objects('pythonbucket', prefix='bucket/contents/', recursive=True)
&gt;&gt;&gt; for obj in objects:
&gt;&gt;&gt; for obj in objects:
...     print(obj.object_name, obj.size)
...
('bucket/contents/file.txt', 18)
('bucket/contents/file2.txt', 18)
</code></pre>

<h2>Remove Objects from your Bucket:</h2>

<p>Remove the objects from your Bucket, the list your bucket to verify that they are removed:</p>

<pre><code class="python">&gt;&gt;&gt; client.remove_object('pythonbucket', 'bucket/contents/file.txt')
&gt;&gt;&gt; client.remove_object('pythonbucket', 'bucket/contents/file2.txt')

&gt;&gt;&gt; for obj in objects:
...     print(obj.object_name, obj.size)
...
&gt;&gt;&gt;
</code></pre>

<h2>Remove the Bucket:</h2>

<p>Remove the Bucket that we created:</p>

<pre><code class="python">&gt;&gt;&gt; client.remove_bucket('pythonbucket')
&gt;&gt;&gt; exit()
</code></pre>

<h2>Resources:</h2>

<p>Minio has some great documentation, for more information on their SDK:</p>

<ul>
<li><a href="https://docs.minio.io/docs/python-client-api-reference">https://docs.minio.io/docs/python-client-api-reference</a></li>
</ul>


<center>
    <script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script> 
</center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Splitting Characters With Python to Determine Name Surname and Email Address]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/04/splitting-characters-with-python-to-determine-name-surname-and-email-address/"/>
    <updated>2017-09-04T09:22:42-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/04/splitting-characters-with-python-to-determine-name-surname-and-email-address</id>
    <content type="html"><![CDATA[<p>I had a bunch of email addresses that was set in a specific format that I can strip characters from, to build up a Username, Name and Surname from the Email Address, that I could use to for dynamic reporting.</p>

<h2>Using Split in Python</h2>

<p>Here I will define the value of <code>emailadress</code> to a string, then using Python&rsquo;s <code>split()</code> function to get the values that I want:</p>

<pre><code class="python">&gt;&gt;&gt; emailaddress = "ruan.bekker@domain.com"
&gt;&gt;&gt; emailaddress.split("@", 1)
['ruan.bekker', 'domain.com']
&gt;&gt;&gt; username = emailaddress.split("@", 1)[0]
&gt;&gt;&gt; username
'ruan.bekker'
&gt;&gt;&gt; username.split(".", 1)
['ruan', 'bekker']
&gt;&gt;&gt; name = username.split(".", 1)[0].capitalize()
&gt;&gt;&gt; surname = username.split(".", 1)[1].capitalize()
&gt;&gt;&gt; name
'Ruan'
&gt;&gt;&gt; surname
'Bekker'
&gt;&gt;&gt; username
'ruan.bekker'
&gt;&gt;&gt; emailaddress
'ruan.bekker@domain.com'
</code></pre>

<h2>Print The Values in Question:</h2>

<p>Now that we have define our keys, let&rsquo;s print the values:</p>

<pre><code class="python">&gt;&gt;&gt; print("Name: {0}, Surname: {1}, UserName: {2}, Email Address: {3}".format(name, surname, username, emailaddress))
Name: Ruan, Surname: Bekker, UserName: ruan.bekker, Email Address: ruan.bekker@domain.com
</code></pre>

<p>From here on you can build up for example an email function that you can pass the values to your function to get a specific job done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reference Credentials Outside Your Main Application in Python]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/08/31/reference-credentials-outside-your-main-application-in-python/"/>
    <updated>2017-08-31T03:00:58-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/08/31/reference-credentials-outside-your-main-application-in-python</id>
    <content type="html"><![CDATA[<p>In this post I will show one way of referencing credentials from your application in Python, without setting them in your applications code. We will create a seperate python file which will hold our credentials, and then call them from our main application.</p>

<h2>Our Main Application</h2>

<p>This app will print our username, just for the sake of this example:</p>

<pre><code class="python app.py">from config import credentials as secrets

my_username = secrets['APP1']['username']
my_password = secrets['APP1']['password']

print("Hello, your username is: {username}".format(username=my_username))
</code></pre>

<h2>Our Credentials File</h2>

<p>Then we have our file which will hold our credentials:</p>

<pre><code class="python config.py">credentials = {
        'APP1': {
            'username': 'foo',
            'password': 'bar'
            }
        }
</code></pre>

<p>That is at least one way of doing it, you could also use environment variables using the <code>os</code> module, which is described <a href="https://stackoverflow.com/a/4907053">here</a></p>

<h2>References:</h2>

<ul>
<li><a href="https://docs.python.org/2/tutorial/inputoutput.html">https://docs.python.org/2/tutorial/inputoutput.html</a></li>
<li><a href="https://docs.python.org/2/library/os.html#os.environ">https://docs.python.org/2/library/os.html#os.environ</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
