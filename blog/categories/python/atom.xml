<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2022-05-27T06:55:51-04:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Create a Discord Bot in Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/05/05/create-a-discord-bot-in-python/"/>
    <updated>2022-05-05T04:32:12-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/05/05/create-a-discord-bot-in-python</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/166907630-cfd0760e-ddff-46b4-9b82-f163fb90f0ee.png" alt="discord-logo" /></p>

<p>In this tutorial we will develop our own <strong><a href="https://discord.com/">Discord</a></strong> bot using <strong>Python</strong>.</p>

<p>The source code for this bot will be stored in my <a href="https://github.com/ruanbekker/discord-minecraft-python-bot">github repository</a></p>

<h2>About the bot</h2>

<p>First we will create a basic discord bot that will greet the message sender, and then we will create a Minecraft Bot, that will enable us to do the following:</p>

<pre><code>:: Bot Usage ::
!mc help          : shows help
!mc serverusage   : shows system load in percentage
!mc serverstatus  : shows if the server is online or offline
!mc whoisonline   : shows who is online at the moment
</code></pre>

<p>Let&rsquo;s get into it.</p>

<h2>Dependencies</h2>

<p>Create a python virtual environment and install the dependent packages:</p>

<pre><code>$ python3 -m virtualenv .venv
$ source .venv/bin/activate
$ pip install discord
$ pip install python-dotenv
</code></pre>

<h2>Create the Discord Application</h2>

<p>We first need to create the application on discord and retrieve a token that our python app will require.</p>

<p>Create a application on discord:</p>

<ul>
<li><a href="https://discordapp.com/developers/applications">https://discordapp.com/developers/applications</a></li>
</ul>


<p>You should see:</p>

<p><img width="1782" alt="image" src="https://user-images.githubusercontent.com/567298/165783157-0747c6f1-af2d-434a-9e3f-1e554f7e69ef.png"></p>

<p>Click &ldquo;New Application&rdquo; and provide it a name:</p>

<p><img width="478" alt="image" src="https://user-images.githubusercontent.com/567298/165783246-68899cd9-c796-41a9-ae9d-88764a83ec0d.png"></p>

<p>Once you create the application you will get a screen to upload a logo, provide a description and most importantly get your application id as well as your public key:</p>

<p><img src="https://user-images.githubusercontent.com/567298/165911250-0fd11a0b-b851-4d65-a898-7049dd73aa60.png" alt="image" /></p>

<p>Then select the Bot section:</p>

<p><img width="1756" alt="image" src="https://user-images.githubusercontent.com/567298/165911940-a85498bd-d572-455b-b38a-50114e6b4144.png"></p>

<p>Then select &ldquo;Add Bot&rdquo;:</p>

<p><img width="717" alt="image" src="https://user-images.githubusercontent.com/567298/165912066-6cd72b29-e0fe-4c4f-b73d-269e48da61d6.png"></p>

<p>Select OAuth2 and select the &ldquo;bot&rdquo; scope:</p>

<p><img width="1751" alt="image" src="https://user-images.githubusercontent.com/567298/165912862-a51a9f29-d876-4ba7-b226-be78214c934d.png"></p>

<p>At the bottom of the page it will provide you with a URL that looks something like:</p>

<pre><code>https://discord.com/api/oauth2/authorize?client_id=xxxxxxxxxxx&amp;permissions=0&amp;scope=bot
</code></pre>

<p>Paste the link in your browser and authorize the bot to your server of choice:</p>

<p><img src="https://user-images.githubusercontent.com/567298/165917380-6e8fbbed-9237-4017-a8bd-c27d58bcdc6d.png" alt="image" /></p>

<p>Then click authorize, and you should see your bot appearing on Discord:</p>

<p><img src="https://user-images.githubusercontent.com/567298/165917760-d8c132e9-18d4-4428-b551-c895d4a5102c.png" alt="image" /></p>

<h2>Developing the Discord Bot</h2>

<p>Now we will be building our python discord bot, head back to the &ldquo;Bot&rdquo; section and select &ldquo;Reset Token&rdquo;, then copy and store the token value to a file <code>.env</code>:</p>

<pre><code>DISCORD_TOKEN=xxxxxxxxx
</code></pre>

<p>So in our current working directory, we should have a file <code>.env</code> with the following content:</p>

<pre><code>$ cat .env
DISCORD_TOKEN=your-unique-token-value-will-be-here
</code></pre>

<p>For this demonstration, I will create a private channel in discord called <code>minecraft-test</code> and add the bot <code>MinecraftBot</code> to the channel (this is only for testing, after testing you can add your bot to your other channels for other people to use):</p>

<p><img src="https://user-images.githubusercontent.com/567298/166233812-2596960b-5142-4ad1-809e-96d884ea5c58.png" alt="image" /></p>

<p>For our first test, a basic bot, where we would like to type <code>hello</code> and the bot should greet us by our username, in our <code>mc_discord_bot.py</code> file we will have:</p>

<pre><code class="python">import discord
import os
from dotenv import load_dotenv

BOT_NAME = "MinecraftBot"

load_dotenv()
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")

bot = discord.Client()

@bot.event
async def on_ready():
    print(f'{bot.user} has logged in.')

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    if message.content == 'hello':
        await message.channel.send(f'Hey {message.author}')
    if message.content == 'goodbye':
        await message.channel.send(f'Goodbye {message.author}')

bot.run(DISCORD_TOKEN)
</code></pre>

<p>Then run the bot:</p>

<pre><code>$ python mc_discord_bot.py
MinecraftBot has logged in.
</code></pre>

<p>And when we type <code>hello</code> and <code>goodbye</code> you can see our bot responds on those values:</p>

<p><img src="https://user-images.githubusercontent.com/567298/166235388-7240a66c-2be4-4343-8f36-398077c4fcf6.png" alt="image" /></p>

<p>Now that we tested our bot, we can clear the <code>mc_discord_bot.py</code> and write our minecraft bot, the requirements of this bot is simple, but we would like the following:</p>

<ul>
<li>use the command <code>!mc</code> to trigger our bot and subcommands for what we want</li>
<li>able to see who is playing minecraft on our server at the moment</li>
<li>able to get the status if the minecraft server is online</li>
<li>able to get the server load percentage (as the bot runs on the minecraft server)</li>
</ul>


<p>This is our complete <code>mc_discord_bot.py</code>:</p>

<pre><code class="python">import discord
from discord.ext import commands
import requests
import os
from dotenv import load_dotenv
import random
import multiprocessing

# Variables
BOT_NAME = "MinecraftBot"
load_dotenv()
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")

minecraft_server_url = "lightmc.fun" # this is just an example, and you should use your own minecraft server

bot_help_message = """
:: Bot Usage ::
`!mc help`                   : shows help
`!mc serverusage`   : shows system load in percentage
`!mc serverstatus` : shows if the server is online or offline
`!mc whoisonline`   : shows who is online at the moment
"""

available_commands = ['help', 'serverusage', 'serverstatus', 'whoisonline']

# Set the bot command prefix
bot = commands.Bot(command_prefix="!")

# Executes when the bot is ready
@bot.event
async def on_ready():
    print(f'{bot.user} succesfully logged in!')

# Executes whenever there is an incoming message event
@bot.event
async def on_message(message):
    print(f'Guild: {message.guild.name}, User: {message.author}, Message: {message.content}')
    if message.author == bot.user:
        return

    if message.content == '!mc':
        await message.channel.send(bot_help_message)

    if 'whosonline' in message.content:
        print(f'{message.author} used {message.content}')
    await bot.process_commands(message)

# Executes when the command mc is used and we trigger specific functions
# when specific arguments are caught in our if statements
@bot.command()
async def mc(ctx, arg):
    if arg == 'help':
        await ctx.send(bot_help_message)

    if arg == 'serverusage':
        cpu_count = multiprocessing.cpu_count()
        one, five, fifteen = os.getloadavg()
        load_percentage = int(five / cpu_count * 100)
        await ctx.send(f'Server load is at {load_percentage}%')

    if arg == 'serverstatus':
        response = requests.get(f'https://api.mcsrvstat.us/2/{minecraft_server_url}').json()
        server_status = response['online']
        if server_status == True:
            server_status = 'online'
        await ctx.send(f'Server is {server_status}')

    if arg == 'whoisonline':
        response = requests.get('https://api.mcsrvstat.us/2/{minecraft_server_url}').json()
        players_status = response['players']
        if players_status['online'] == 0:
            players_online_message = 'No one is online'
        if players_status['online'] == 1:
            players_online_username = players_status['list'][0]
            players_online_message = f'1 player is online: {players_online_username}'
        if players_status['online'] &gt; 1:
            po = players_status['online']
            players_online_usernames = players_status['list']
            joined_usernames = ", ".join(players_online_usernames)
            players_online_message = f'{po} players are online: {joined_usernames}'
        await ctx.send(f'{players_online_message}')

bot.run(DISCORD_TOKEN)
</code></pre>

<p>And now we can start our bot:</p>

<pre><code class="bash">$ python mc_discord_bot.py
</code></pre>

<p>And we can run our help command:</p>

<pre><code class="bash">!mc help
</code></pre>

<p>Which will prompt our help message, and then test out the others:</p>

<p><img src="https://user-images.githubusercontent.com/567298/166237617-c2df1dd1-99bc-4558-8eb8-b1159e850836.png" alt="image" /></p>

<h2>Resources</h2>

<p>Thank you to the following authors, which really helped me doing this:</p>

<ul>
<li><a href="https://www.freecodecamp.org/news/create-a-discord-bot-with-python/">https://www.freecodecamp.org/news/create-a-discord-bot-with-python/</a></li>
<li><a href="https://betterprogramming.pub/coding-a-discord-bot-with-python-64da9d6cade7">https://betterprogramming.pub/coding-a-discord-bot-with-python-64da9d6cade7</a></li>
<li><a href="https://dev.to/codesphere/create-a-discord-bot-in-minutes-with-python-2jgp">https://dev.to/codesphere/create-a-discord-bot-in-minutes-with-python-2jgp</a></li>
</ul>


<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>

<p>The source code for this bot will be stored in my github repository:
- <a href="https://github.com/ruanbekker/discord-minecraft-python-bot">https://github.com/ruanbekker/discord-minecraft-python-bot</a></p>

<p>I&rsquo;ve started a brand new Discord server, not much happening at the moment, but planning to share and distribute tech content and a place for like minded people to hang out. If that&rsquo;s something you are interested in, feel free to join on <strong><a href="https://discord.gg/bPmc4Stchd">this link</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matrix Bot Using SimpleMatrixBotlib in Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/03/29/matrix-bot-using-simplematrixbotlib-in-python/"/>
    <updated>2022-03-29T18:50:43-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/03/29/matrix-bot-using-simplematrixbotlib-in-python</id>
    <content type="html"><![CDATA[<p>In this tutorial we will setup a python bot for our matrix chat server. We will only do a couple of basic commands, so that you have a solid base to build from.</p>

<h2>Matrix Server</h2>

<p>In our <a href="https://blog.ruanbekker.com/blog/2022/03/29/setup-matrix-and-element-chat-server/">previous post</a> we&rsquo;ve setup a matrix and element server, so if you are following along, head over to that post to setup your matrix server before continuing.</p>

<h2>Matrix Python Bot</h2>

<p>We will be using <a href="https://simple-matrix-bot-lib.readthedocs.io/en/latest/index.html">simple-matrix-bot-lib</a> as our bot, so first we need to install it:</p>

<pre><code class="bash">python3 -m pip install simplematrixbotlib
python3 -m pip install requests
</code></pre>

<p>We will need to authenticate with a user, so I will create a dedicated bot user:</p>

<pre><code class="bash">$ docker exec -it matrix_synapse_1 bash
&gt; register_new_matrix_user -c /data/homeserver.yaml http://localhost:8008

New user localpart [root]: bot
Password:
Confirm password:
Make admin [no]: no
Sending registration request...
Success!
</code></pre>

<p>The most basic bot is the echo bot, which just returns your message:</p>

<pre><code class="python">import subprocess
import simplematrixbotlib as botlib
from urllib.request import ssl, socket
import datetime, smtplib

MATRIX_URL="https://matrix.foodmain.co.za"
MATRIX_USER="@foobot:matrix.foodmain.co.za"
MATRIX_PASS="foo"

creds = botlib.Creds(MATRIX_URL, MATRIX_USER, MATRIX_PASS)
bot = botlib.Bot(creds)

PREFIX = '!'

# Help
@bot.listener.on_message_event
async def help(room, message):
    match = botlib.MessageMatch(room, message, bot, PREFIX)
    if match.is_not_from_this_bot() and match.prefix() and match.command("help"):
        help_message = """
        Help:
         - !help
        Echo
         - !echo your message
        """
        await bot.api.send_markdown_message(room.room_id, help_message)

# Echo
@bot.listener.on_message_event
async def echo(room, message):
    """
    Example function that "echoes" arguements.
    Usage:
    user:  !echo say something
    bot:   say something
    """
    match = botlib.MessageMatch(room, message, bot, PREFIX)
    if match.is_not_from_this_bot() and match.prefix() and match.command("echo"):
        print("Room: {r}, User: {u}, Message: {m}".format(r=room.room_id, u=str(message).split(':')[0], m=str(message).split(':')[-1].strip()))
        await bot.api.send_text_message(room.room_id, " ".join(arg for arg in match.args()))

bot.run()
</code></pre>

<p>Run the bot, invite the bot user to a room and test it with <code>!echo hi</code></p>

<p>For a bot having to use the requests library, such as getting a quote from an api, we can use the following:</p>

<pre><code class="python">import random
import subprocess
import simplematrixbotlib as botlib
import requests
from urllib.request import ssl, socket
import datetime, smtplib

MATRIX_URL="https://matrix.foodmain.co.za"
MATRIX_USER="@foobot:matrix.foodmain.co.za"
MATRIX_PASS="foo"

creds = botlib.Creds(MATRIX_URL, MATRIX_USER, MATRIX_PASS)
bot = botlib.Bot(creds)

PREFIX = '!'

# Help
@bot.listener.on_message_event
async def help(room, message):
    match = botlib.MessageMatch(room, message, bot, PREFIX)
    if match.is_not_from_this_bot() and match.prefix() and match.command("help"):
        help_message = """
        Help:
         - !help
        Echo
         - !echo msg
        Fortune:
         - !fortune
        Quote:
         - !quote
        """
        await bot.api.send_markdown_message(room.room_id, help_message)

# Echo
@bot.listener.on_message_event
async def echo(room, message):
    """
    Example function that "echoes" arguements.
    Usage:
    user: !echo say something
    bot:  say something
    """
    match = botlib.MessageMatch(room, message, bot, PREFIX)
    if match.is_not_from_this_bot() and match.prefix() and match.command("echo"):
        print("Room: {r}, User: {u}, Message: {m}".format(r=room.room_id, u=str(message).split(':')[0], m=str(message).split(':')[-1].strip()))
        await bot.api.send_text_message(room.room_id, " ".join(arg for arg in match.args()))

# Fortune
@bot.listener.on_message_event
async def fortune(room, message):
    match = botlib.MessageMatch(room, message, bot)
    if match.is_not_from_this_bot and match.command('!fortune'):
        fortune = subprocess.run(['/usr/games/fortune'], capture_output=True).stdout.decode('UTF-8')
        print(fortune)
        await bot.api.send_text_message(room.room_id, fortune)

# Quotes
@bot.listener.on_message_event
async def quote(room, message):
    match = botlib.MessageMatch(room, message, bot, PREFIX)
    if match.is_not_from_this_bot() and match.prefix() and (
            match.command("quote") or match.command("q")):

        response = requests.get('https://goquotes-api.herokuapp.com/api/v1/random?count=1').json()['quotes'][0]
        quote = response['text']
        author = response['author']
        tag = response['tag']
        formatted_message = f"""{quote}
        - {author}
        """
        #await bot.api.send_text_message(room.room_id, formatted_message)
        await bot.api.send_markdown_message(room.room_id,  formatted_message)

bot.run()
</code></pre>

<h2>Resources</h2>

<p>For more information, have a look at their <a href="https://simple-matrix-bot-lib.readthedocs.io/en/latest/index.html">documentation</a></p>

<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Environment Variables From File in Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/03/22/load-environment-variables-from-file-in-python/"/>
    <updated>2022-03-22T07:34:11-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/03/22/load-environment-variables-from-file-in-python</id>
    <content type="html"><![CDATA[<p>In this quick tutorial we will demonstrate how to load additional environment variables from file into your python application.</p>

<p>It loads key value pairs from a file and append it to its current runtime environment variables, so your current environment is unaffected.</p>

<h2>python-dotenv</h2>

<p>We will make use of the package <a href="https://pypi.org/project/python-dotenv">python-dotenv</a> so we will need to install the python package with pip:</p>

<pre><code class="bash">python3 -m pip install python-dotenv
</code></pre>

<h2>The env file</h2>

<p>I will create the <code>.env</code> in my current working directory with the content:</p>

<pre><code class="bash">APPLICATION_NAME=foo
APPLICATION_OWNER=bar
</code></pre>

<h2>The application</h2>

<p>This is a basic demonstration of a python application which loads the additional environment variables from file, then we will use <code>json.dumps(.., indent=2)</code> so that we can get a pretty print of all our environment variables:</p>

<pre><code class="python">import os
import json
from dotenv import load_dotenv

load_dotenv('.env')

print(json.dumps(dict(os.environ), indent=2))
</code></pre>

<p>When we run the application the output will look something like this:</p>

<pre><code class="json">{
  "SHELL": "/bin/bash",
  "PWD": "/home/ubuntu/env-vars",
  "LOGNAME": "ubuntu",
  "HOME": "/home/ubuntu",
  "LANG": "C.UTF-8",
  "TERM": "xterm-256color",
  "USER": "ubuntu",
  "LC_CTYPE": "C.UTF-8",
  "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin",
  "SSH_TTY": "/dev/pts/0",
  "OLDPWD": "/home/ubuntu",
  "APPLICATION_NAME": "foo",
  "APPLICATION_OWNER": "bar"
}
</code></pre>

<p>As we can see our two environment variables was added to the environment. If you would like to access your two environment variables, we can do the following:</p>

<pre><code class="python">import os
from dotenv import load_dotenv

load_dotenv('.env')

APPLICATION_NAME = os.getenv('APPLICATION_NAME')
APPLICATION_OWNER = os.getenv('APPLICATION_OWNER')

print('Name: {0}, Owner: {1}'.format(APPLICATION_NAME, APPLICATION_OWNER))
</code></pre>

<p>And when we run that, the output should be the following:</p>

<pre><code class="bash">Name: foo, Owner: bar
</code></pre>

<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run a Basic Python Flask Restful API]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/03/20/run-a-basic-python-flask-restful-api/"/>
    <updated>2022-03-20T17:33:17-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/03/20/run-a-basic-python-flask-restful-api</id>
    <content type="html"><![CDATA[<p>In this tutorial we will run a basic api using flask-restful, it will only have two routes which will be a get and post method for the purpose of demonstration.</p>

<h2>What is Flask Restful</h2>

<p><a href="https://flask-restful.readthedocs.io/en/latest/index.html">Flask-RESTful</a> is an extension for <a href="https://flask.palletsprojects.com/en/2.0.x/">Flask</a> that adds support for quickly building REST APIs. It is a lightweight abstraction that works with your existing ORM/libraries. Flask-RESTful encourages best practices with minimal setup.</p>

<p>If you want to see a basic Flask API post, you can follow the link below:
- <a href="https://blog.ruanbekker.com/blog/2018/11/27/python-flask-tutorial-series-create-a-hello-world-app-p1/">https://blog.ruanbekker.com/blog/2018/11/27/python-flask-tutorial-series-create-a-hello-world-app-p1/</a></p>

<h2>Installation</h2>

<p>Install Flask and Flask Restful:</p>

<pre><code class="bash">python3 -m pip install flask
python3 -m pip install flask-restful
</code></pre>

<h2>Code</h2>

<p>The basic code that we have, is to have two methods available (get and post):</p>

<pre><code class="python">import flask
import flask_restful

app = flask.Flask(__name__)
api = flask_restful.Api(app)

class HelloWorld(flask_restful.Resource):
    def get(self):
        return {'hello': 'world'}

    def post(self):
        json_data = request.get_json(force=True)
        firstname = json_data['firstname']
        lastname = json_data['lastname']
        return jsonify(firstname=firstname, lastname=lastname)

api.add_resource(HelloWorld, '/')

if __name__ == "__main__":
    app.run(debug=True)
</code></pre>

<h2>Run the Server</h2>

<p>Run the server:</p>

<pre><code class="bash">python api.py
</code></pre>

<p>Then make a get request:</p>

<pre><code class="bash">curl http://localhost:5000/
</code></pre>

<p>The response should be the following:</p>

<pre><code class="json">{
    "hello": "world"
}
</code></pre>

<p>Then make a post request:</p>

<pre><code class="bash">curl -XPOST http://localhost:5000/ -d '{"firstname": "ruan", "lastname": "bekker"}'
</code></pre>

<p>The response should look something like this:</p>

<pre><code class="json">{
  "firstname": "ruan",
  "lastname": "bekker"
}
</code></pre>

<h2>Integration Tests</h2>

<p>We can setup integration tests with <code>unittest</code> by creating <code>test_api.py</code>:</p>

<pre><code class="python">import unittest
import app as api

class TestFlaskApi(unittest.TestCase):
    def setUp(self):
        self.app = api.app.test_client()

    def test_get_method(self):
        response = self.app.get("/")
        self.assertEqual(
            response.get_json(),
            {"hello": "world"},
        )

    def test_post_method(self):
        # request payload
        payload = json.dumps({
            "firstname": "ruan",
            "lastname": "bekker"
        })

        # make request
        response = self.app.post("/", data=payload, headers={"Content-Type": "application/json"})

        # assert
        self.assertEqual(str, type(response.json['lastname']))
        self.assertEqual(200, response.status_code)

    def tearDown(self):
        # delete if anything was created
        pass

if __name__ == '__main__':
    unittest.main()
</code></pre>

<p>Then we can run our test with:</p>

<pre><code class="bash">python -m unittest discover -p test_app.py -v
</code></pre>

<p>Since our first test is expecting <code>{"hello": "world"}</code> our test will pass, and our second test we are validating that our post request returns a 200 response code and that our lastname field is of string type.</p>

<p>The output of our tests will show something like this:</p>

<pre><code class="bash">test_get_request (test_app.TestFlaskApi) ... ok
test_post_request (test_app.TestFlaskApi) ... ok

----------------------------------------------------------------------
Ran 2 tests in 0.009s

OK
</code></pre>

<h2>More on Flask-Restful</h2>

<p>This was a very basic example and their <a href="https://flask-restful.readthedocs.io/en/latest/quickstart.html">documentation</a> provides a great tutorial on how to extend from this example. This is also a <a href="https://dev.to/paurakhsharma/flask-rest-api-part-6-testing-rest-apis-4lla">great blogpost</a> on testing rest api&rsquo;s.</p>

<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Logging With Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/07/31/basic-logging-with-python/"/>
    <updated>2021-07-31T04:17:24-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/07/31/basic-logging-with-python</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/ruanbekker-header-photo.png" alt="" /></p>

<p>I&rsquo;m trying to force myself to move away from using the <code>print()</code> function as I&rsquo;m pretty much using print all the time to cater for logging, and using the <code>logging</code> package instead.</p>

<p>This is a basic example of using logging in a basic python app:</p>

<pre><code class="python">import logging

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s %(message)s",
    handlers=[
        logging.StreamHandler()
    ]
)

messagestring = {'info': 'info message', 'warn': 'this is a warning', 'err': 'this is a error'}

logger = logging.getLogger('thisapp')
logger.info('message: {}'.format(messagestring['info']))
logger.warning('message: {}'.format(messagestring['warn']))
logger.error('message: {}'.format(messagestring['err']))
</code></pre>

<p>When running this example, this is the output that you will see:</p>

<pre><code class="bash">$ python app.py
2021-07-19 13:07:43,647 [INFO] thisapp message: info message
2021-07-19 13:07:43,647 [WARNING] thisapp message: this is a warning
2021-07-19 13:07:43,647 [ERROR] thisapp message: this is a error
</code></pre>

<p>More more info on this package, see it&rsquo;s documentation:
- <a href="https://docs.python.org/3/library/logging.html">https://docs.python.org/3/library/logging.html</a></p>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
</feed>
