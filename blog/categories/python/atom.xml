<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-05-23T07:32:23-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generate Random Characters With Python Using Random and String Modules]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/05/23/generate-random-characters-with-python-using-random-and-string-modules/"/>
    <updated>2018-05-23T06:29:06-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/05/23/generate-random-characters-with-python-using-random-and-string-modules</id>
    <content type="html"><![CDATA[<p>When generating random characters for whatever reason, passwords, secrets-keys etc, you could use the <code>uuid</code> module, which looks like this:</p>

<pre><code class="python Random String with UUID">&gt;&gt;&gt; from uuid import uuid4
&gt;&gt;&gt; print("Your string is: {0}".format(uuid4()) )
Your string is: 53a6e1a7-a2c7-488e-bed9-d76662de9c5f
</code></pre>

<p>But if you want to be more specific, like digits, letters, capitalization etc, you can use the <code>string</code> and <code>random</code> modules to do so. First we will generate a random string containing only letters:</p>

<pre><code class="python Random String with letters">&gt;&gt;&gt; from string import ascii_letters, punctuation, digits
&gt;&gt;&gt; from random import choice, randint
&gt;&gt;&gt; min = 12
&gt;&gt;&gt; max = 15
&gt;&gt;&gt; string_format = ascii_letters
&gt;&gt;&gt; generated_string = "".join(choice(string_format) for x in range(randint(min, max)))

&gt;&gt;&gt; print("Your String is: {0}".format(generated_string))
Your String is: zNeUFluvZwED
</code></pre>

<p>As you can see, you have a randomized string which will be always at least 12 characters and max 15 characters, which is lower and upper case. You can also use the <code>lower</code> and <code>upper</code> functions if you want to capitalize or lower case your string:</p>

<pre><code class="python">&gt;&gt;&gt; generated_string.lower()
'zneufluvzwed'

&gt;&gt;&gt; generated_string.upper()
'ZNEUFLUVZWED'
</code></pre>

<p>Let&rsquo;s add some logic so that we can have a more randomized characters with digits, punctuations etc:</p>

<pre><code class="python Random String with Letters, Punctuations and Digits">&gt;&gt;&gt; from string import ascii_letters, punctuation, digits
&gt;&gt;&gt; from random import choice, randint
&gt;&gt;&gt; min = 12
&gt;&gt;&gt; max = 15
&gt;&gt;&gt; string_format = ascii_letters + punctuation + digits
&gt;&gt;&gt; generated_string = "".join(choice(string_format) for x in range(randint(min, max)))
&gt;&gt;&gt; print("Your String is: {0}".format(generated_string))
Your String is: Bu&gt;}x_/-H5)fLAr
</code></pre>

<p>More <a href="https://goo.gl/G9VRpe">Python</a> related blog posts.</p>

<center>
  <script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script>
  <script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script>
</center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Temporary IAM Credentials From EC2 Instance Metadata Using Python]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/05/09/temporary-iam-credentials-from-ec2-instance-metadata-using-python/"/>
    <updated>2018-05-09T12:14:11-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/05/09/temporary-iam-credentials-from-ec2-instance-metadata-using-python</id>
    <content type="html"><![CDATA[<p>From a Best Practice Perspective its good not having to pass sensitive information around, and especially not hard coding them.</p>

<h2>Best Practice: Security</h2>

<p>One good way is to use SSM with KMS to Encrypt/Decrypt them, but since EC2 has a <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html">Metadata Service</a> available, we can make use of that to retrieve <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html">temporary credentials</a>. One requirement though, is that the instance will require an IAM Role where the code will be executed on. The IAM Role also needs to have sufficient privileges to be able to execute, whatever you need to do.</p>

<p>The <a href="https://12factor.net/">12 Factor</a> Methodology however states to use config in your environment variables, but from the application logic, its easy to save it in our environment.</p>

<h2>Scenario: Applications on AWS EC2</h2>

<p>When you run applications on Amazon EC2 the nodes has access to the EC2 Metadata Service, so in this case our IAM Role has a Policy that authorizes GetItem on our DynamoDB table, therefore we can define our code with no sensitive information, as the code will do all the work to get the credentials and use the credentials to access DynamoDB.</p>

<h2>Use Temporary Credentials to Read from DynamoDB</h2>

<p>In this example we will get the temporary credentials from the metadata service, then define the temporary credentials in our session to authorize our request against dynamodb to read from our table:</p>

<pre><code class="python">&gt;&gt;&gt; import boto3
&gt;&gt;&gt; from botocore.utils import InstanceMetadataFetcher
&gt;&gt;&gt; from botocore.credentials import InstanceMetadataProvider
&gt;&gt;&gt; provider = InstanceMetadataProvider(iam_role_fetcher=InstanceMetadataFetcher(timeout=1000, num_attempts=2))
&gt;&gt;&gt; creds = provider.load()

&gt;&gt;&gt; session = boto3.Session(
    aws_access_key_id=creds.access_key,
    aws_secret_access_key=creds.secret_key,
    aws_session_token=creds.token
)

&gt;&gt;&gt; ddb = session.client('dynamodb')

&gt;&gt;&gt; response = ddb.get_item(
    TableName='my-dynamodb-table',
    Key={
        'node_type': {
            'S': 'primary_manager'
        }
    }
)

&gt;&gt;&gt; print(response['Item']['ip']['S'])
'10.0.0.32
</code></pre>

<p>Also, when you are logged onto the EC2 instance, you can use curl to see the temporary credentials information:</p>

<pre><code class="bash">$ iam_role_name=$(curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/)
$ curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/${iam_role_name}
{
  "Code" : "Success",
  "LastUpdated" : "2018-05-09T14:25:48Z",
  "Type" : "AWS-HMAC",
  "AccessKeyId" : "",
  "SecretAccessKey" : "",
  "Token" : "",
  "Expiration" : "2018-05-09T20:46:55Z"
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Python Requests to Interact With the iTunes API to Search for Music Info]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/05/08/use-python-requests-to-interact-with-the-itunes-api-to-search-for-music-info/"/>
    <updated>2018-05-08T17:01:11-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/05/08/use-python-requests-to-interact-with-the-itunes-api-to-search-for-music-info</id>
    <content type="html"><![CDATA[<p>Tutorial on using Python Requests and using Apple iTunes Music API, where we will be doing the following:</p>

<ul>
<li>Basics of using the Requests module</li>
<li>Query iTunes API on Songs by Artist</li>
<li>Query iTunes API on Artists Info</li>
<li>Query iTunes API on All Albums by Artist</li>
<li>Query iTunes API on Top 5 Albums</li>
<li>Query iTunes API on Multipe Artists</li>
</ul>


<h2>Resources:</h2>

<ul>
<li><a href="http://docs.python-requests.org/en/master/">Python Requests</a></li>
<li><a href="https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/">iTunes API</a></li>
</ul>


<h2>Install the Request Module:</h2>

<pre><code>$ virtualenv -p /usr/bin/python .venv
$ source .venv/bin/activate
$ pip install requests
</code></pre>

<h2>Basic Usage of Requests:</h2>

<p>In this demonstration we will only use the GET HTTP Method.</p>

<p>Make the GET Request to the endpoint:</p>

<pre><code class="python">&gt;&gt;&gt; import requests
&gt;&gt;&gt; response = requests.get('https://itunes.apple.com/search?term=guns+and+roses&amp;limit=1')
</code></pre>

<p>View the HTTP Status Code of the Response:</p>

<pre><code class="python">&gt;&gt;&gt; response.status_code
200
</code></pre>

<p>To view some of the status codes of the request library:</p>

<pre><code class="python">&gt;&gt;&gt; requests.codes.ok
200
&gt;&gt;&gt; requests.codes.no_content
204
&gt;&gt;&gt; requests.codes.temporary_redirect
307
&gt;&gt;&gt; requests.codes.permanent_redirect
308
&gt;&gt;&gt; requests.codes.bad
400
&gt;&gt;&gt; requests.codes.not_found
404
&gt;&gt;&gt; requests.codes.bad_gateway
502
</code></pre>

<p>Call <code>.ok</code> for the status lookup, the boolean answer will indicate if it responded with a <code>200 OK</code>:</p>

<pre><code class="python">&gt;&gt;&gt; response.ok
True
</code></pre>

<p>Measure the amount of time the request took:</p>

<pre><code class="python">&gt;&gt;&gt; response.elapsed.total_seconds()
0.706043
</code></pre>

<p>View the content of the response:</p>

<pre><code class="python">&gt;&gt;&gt; response.content
'\n\n\n{\n "resultCount":1,\n "results": [\n{"wrapperType":"track", "kind":"song", "artistId":106621, "collectionId":5669937, "trackId":5669911, "artistName":"Guns N\' Roses", "collectionName":"Greatest Hits", "trackName":"Sweet Child O\' Mine", "collectionCensoredName":"Greatest Hits", "trackCensoredName":"Sweet Child O\' Mine", "artistViewUrl":"https://itunes.apple.com/us/artist/guns-n-roses/106621?uo=4", "collectionViewUrl":"https://itunes.apple.com/us/album/sweet-child-o-mine/5669937?i=5669911&amp;uo=4", "trackViewUrl":"https://itunes.apple.com/us/album/sweet-child-o-mine/5669937?i=5669911&amp;uo=4", \n"previewUrl":"https://audio-ssl.itunes.apple.com/apple-assets-us-std-000001/Music6/v4/f2/7d/73/f27d7346-de92-bdc6-e148-56a3da406005/mzaf_2747902348777129728.plus.aac.p.m4a", "artworkUrl30":"https://is3-ssl.mzstatic.com/image/thumb/Music/v4/3c/18/87/3c188735-e462-3c99-92eb-50fb06afa73f/source/30x30bb.jpg", "artworkUrl60":"https://is3-ssl.mzstatic.com/image/thumb/Music/v4/3c/18/87/3c188735-e462-3c99-92eb-50fb06afa73f/source/60x60bb.jpg", "artworkUrl100":"https://is3-ssl.mzstatic.com/image/thumb/Music/v4/3c/18/87/3c188735-e462-3c99-92eb-50fb06afa73f/source/100x100bb.jpg", "collectionPrice":9.99, "trackPrice":1.29, "releaseDate":"1987-07-21T07:00:00Z", "collectionExplicitness":"notExplicit", "trackExplicitness":"notExplicit", "discCount":1, "discNumber":1, "trackCount":14, "trackNumber":2, "trackTimeMillis":355267, "country":"USA", "currency":"USD", "primaryGenreName":"Rock", "isStreamable":true}]\n}\n\n\n'
</code></pre>

<p>View the content in json format:</p>

<pre><code class="python">&gt;&gt;&gt; response.json()
{u'resultCount': 1, u'results': [{u'collectionExplicitness': u'notExplicit', u'releaseDate': u'1987-07-21T07:00:00Z', u'currency': u'USD', u'artistId': 106621, u'previewUrl': u'https://audio-ssl.itunes.apple.com/apple-assets-us-std-000001/Music6/v4/f2/7d/73/f27d7346-de92-bdc6-e148-56a3da406005/mzaf_2747902348777129728.plus.aac.p.m4a', u'trackPrice': 1.29, u'isStreamable': True, u'trackViewUrl': u'https://itunes.apple.com/us/album/sweet-child-o-mine/5669937?i=5669911&amp;uo=4', u'collectionName': u'Greatest Hits', u'collectionId': 5669937, u'trackId': 5669911, u'collectionViewUrl': u'https://itunes.apple.com/us/album/sweet-child-o-mine/5669937?i=5669911&amp;uo=4', u'trackCount': 14, u'trackNumber': 2, u'discNumber': 1, u'collectionPrice': 9.99, u'trackCensoredName': u"Sweet Child O' Mine", u'trackName': u"Sweet Child O' Mine", u'trackTimeMillis': 355267, u'primaryGenreName': u'Rock', u'artistViewUrl': u'https://itunes.apple.com/us/artist/guns-n-roses/106621?uo=4', u'kind': u'song', u'country': u'USA', u'wrapperType': u'track', u'artworkUrl100': u'https://is3-ssl.mzstatic.com/image/thumb/Music/v4/3c/18/87/3c188735-e462-3c99-92eb-50fb06afa73f/source/100x100bb.jpg', u'collectionCensoredName': u'Greatest Hits', u'artistName': u"Guns N' Roses", u'artworkUrl60': u'https://is3-ssl.mzstatic.com/image/thumb/Music/v4/3c/18/87/3c188735-e462-3c99-92eb-50fb06afa73f/source/60x60bb.jpg', u'trackExplicitness': u'notExplicit', u'artworkUrl30': u'https://is3-ssl.mzstatic.com/image/thumb/Music/v4/3c/18/87/3c188735-e462-3c99-92eb-50fb06afa73f/source/30x30bb.jpg', u'discCount': 1}]}
</code></pre>

<p>View the request headers:</p>

<pre><code class="python">&gt;&gt;&gt; response.headers
{'Content-Length': '650', 'x-apple-translated-wo-url': '/WebObjects/MZStoreServices.woa/ws/wsSearch?term=guns+and+roses&amp;limit=1&amp;urlDesc=', 'Access-Control-Allow-Origin': '*', 'x-webobjects-loadaverage': '0', 'X-Cache': 'TCP_MISS from a2-21-98-60.deploy.akamaitechnologies.com (AkamaiGHost/9.3.0.3-22245996) (-)', 'x-content-type-options': 'nosniff', 'x-apple-orig-url': 'https://itunes.apple.com/search?term=guns+and+roses&amp;limit=1', 'x-apple-jingle-correlation-key': 'GUOFR25MGUUK5J7LUKI6UUFUWM', 'x-apple-application-site': 'ST11', 'Date': 'Tue, 08 May 2018 20:50:39 GMT', 'apple-tk': 'false', 'content-disposition': 'attachment; filename=1.txt', 'Connection': 'keep-alive', 'apple-seq': '0', 'x-apple-application-instance': '2001318', 'X-Apple-Partner': 'origin.0', 'Content-Encoding': 'gzip', 'strict-transport-security': 'max-age=31536000', 'Vary': 'Accept-Encoding', 'apple-timing-app': '109 ms', 'X-True-Cache-Key': '/L/itunes.apple.com/search ci2=limit=1&amp;term=guns+and+roses__', 'X-Cache-Remote': 'TCP_MISS from a23-57-75-64.deploy.akamaitechnologies.com (AkamaiGHost/9.3.0.3-22245996) (-)', 'Cache-Control': 'max-age=86400', 'x-apple-request-uuid': '351c58eb-ac35-28ae-a7eb-a291ea50b4b3', 'Content-Type': 'text/javascript; charset=utf-8', 'apple-originating-system': 'MZStoreServices'}
</code></pre>

<h2>Python Requests and the iTunes API:</h2>

<p>Search for the Artist Guns and Roses and limit the output to 1 Song:</p>

<pre><code class="python">&gt;&gt;&gt; import requests
&gt;&gt;&gt; import json
&gt;&gt;&gt; a = 'https://itunes.apple.com/search?term=guns+and+roses&amp;limit=1'
&gt;&gt;&gt; b = requests.get(a).json()
&gt;&gt;&gt; print(json.dumps(b, indent=2))
{
  "resultCount": 1,
  "results": [
    {
      "collectionExplicitness": "notExplicit",
      "releaseDate": "1987-07-21T07:00:00Z",
      "currency": "USD",
      "artistId": 106621,
      "previewUrl": "https://audio-ssl.itunes.apple.com/apple-assets-us-std-000001/Music6/v4/f2/7d/73/f27d7346-de92-bdc6-e148-56a3da406005/mzaf_2747902348777129728.plus.aac.p.m4a",
      "trackPrice": 1.29,
      "isStreamable": true,
      "trackViewUrl": "https://itunes.apple.com/us/album/sweet-child-o-mine/5669937?i=5669911&amp;uo=4",
      "collectionName": "Greatest Hits",
      "collectionId": 5669937,
      "trackId": 5669911,
      "collectionViewUrl": "https://itunes.apple.com/us/album/sweet-child-o-mine/5669937?i=5669911&amp;uo=4",
      "trackCount": 14,
      "trackNumber": 2,
      "discNumber": 1,
      "collectionPrice": 9.99,
      "trackCensoredName": "Sweet Child O' Mine",
      "trackName": "Sweet Child O' Mine",
      "trackTimeMillis": 355267,
      "primaryGenreName": "Rock",
      "artistViewUrl": "https://itunes.apple.com/us/artist/guns-n-roses/106621?uo=4",
      "kind": "song",
      "country": "USA",
      "wrapperType": "track",
      "artworkUrl100": "https://is3-ssl.mzstatic.com/image/thumb/Music/v4/3c/18/87/3c188735-e462-3c99-92eb-50fb06afa73f/source/100x100bb.jpg",
      "collectionCensoredName": "Greatest Hits",
      "artistName": "Guns N' Roses",
      "artworkUrl60": "https://is3-ssl.mzstatic.com/image/thumb/Music/v4/3c/18/87/3c188735-e462-3c99-92eb-50fb06afa73f/source/60x60bb.jpg",
      "trackExplicitness": "notExplicit",
      "artworkUrl30": "https://is3-ssl.mzstatic.com/image/thumb/Music/v4/3c/18/87/3c188735-e462-3c99-92eb-50fb06afa73f/source/30x30bb.jpg",
      "discCount": 1
    }
  ]
}
</code></pre>

<p>From the response we got a <code>"artistId": 106621</code>, lets query the API on the ArtistId, to get info of the Artist:</p>

<pre><code class="python">&gt;&gt;&gt; a = 'https://itunes.apple.com/lookup?id=106621'
&gt;&gt;&gt; b = requests.get(a).json()
&gt;&gt;&gt; print(json.dumps(b, indent=2))
{
  "resultCount": 1,
  "results": [
    {
      "artistType": "Artist",
      "amgArtistId": 4416,
      "wrapperType": "artist",
      "artistId": 106621,
      "artistLinkUrl": "https://itunes.apple.com/us/artist/guns-n-roses/106621?uo=4",
      "artistName": "Guns N' Roses",
      "primaryGenreId": 21,
      "primaryGenreName": "Rock"
    }
  ]
}
</code></pre>

<p>Query all the Albums by Artist by using the ArtistId and Entity for Album:</p>

<pre><code class="python">&gt;&gt;&gt; a = 'https://itunes.apple.com/lookup?id=106621&amp;entity=album'
&gt;&gt;&gt; b = requests.get(a).json()
&gt;&gt;&gt; print(json.dumps(b, indent=2))
{
  "resultCount": 13,
  "results": [
    {
      "artistType": "Artist",
      "amgArtistId": 4416,
      "wrapperType": "artist",
      "artistId": 106621,
      "artistLinkUrl": "https://itunes.apple.com/us/artist/guns-n-roses/106621?uo=4",
      "artistName": "Guns N' Roses",
      "primaryGenreId": 21,
      "primaryGenreName": "Rock"
    },
    {
      "artistViewUrl": "https://itunes.apple.com/us/artist/guns-n-roses/106621?uo=4",
      "releaseDate": "2004-01-01T08:00:00Z",
      "collectionType": "Compilation",
      "collectionName": "Greatest Hits",
      "amgArtistId": 4416,
      "copyright": "\u2117 2004 Geffen Records",
      "collectionId": 5669937,
      "artworkUrl60": "https://is3-ssl.mzstatic.com/image/thumb/Music/v4/3c/18/87/3c188735-e462-3c99-92eb-50fb06afa73f/source/60x60bb.jpg",
      "wrapperType": "collection",
      "collectionViewUrl": "https://itunes.apple.com/us/album/greatest-hits/5669937?uo=4",
      "artistId": 106621,
      "collectionCensoredName": "Greatest Hits",
      "artworkUrl100": "https://is3-ssl.mzstatic.com/image/thumb/Music/v4/3c/18/87/3c188735-e462-3c99-92eb-50fb06afa73f/source/100x100bb.jpg",
      "trackCount": 14,
      "currency": "USD",
      "artistName": "Guns N' Roses",
      "country": "USA",
      "primaryGenreName": "Rock",
      "collectionExplicitness": "notExplicit",
      "collectionPrice": 9.99
    },
</code></pre>

<p>Get the Top 5 Albums by the Artist:</p>

<pre><code class="python">a = 'https://itunes.apple.com/lookup?id=106621&amp;entity=album&amp;limit=5'
</code></pre>

<p>How to get AMG ID (all music id):</p>

<pre><code class="python">&gt;&gt;&gt; a = 'https://itunes.apple.com/search?term=jack+johnson&amp;limit=2'
&gt;&gt;&gt; b = requests.get(a).json()
&gt;&gt;&gt; print(json.dumps(b, indent=2))
{
  "resultCount": 2,
  "results": [
    {
      "collectionExplicitness": "notExplicit",
      "releaseDate": "2005-03-01T08:00:00Z",
      "currency": "USD",
      "artistId": 909253,
</code></pre>

<p>Query Multiple Artists by using the amgId&rsquo;s:</p>

<pre><code class="python">&gt;&gt;&gt; a = 'https://itunes.apple.com/lookup?amgArtistId=468749,5723'
&gt;&gt;&gt; b = requests.get(a).json()
&gt;&gt;&gt; print(json.dumps(b, indent=2))
{
  "resultCount": 2,
  "results": [
    {
      "artistType": "Artist",
      "amgArtistId": 468749,
      "wrapperType": "artist",
      "artistId": 909253,
      "artistLinkUrl": "https://itunes.apple.com/us/artist/jack-johnson/909253?uo=4",
      "artistName": "Jack Johnson",
      "primaryGenreId": 21,
      "primaryGenreName": "Rock"
    },
    {
      "artistType": "Artist",
      "amgArtistId": 5723,
      "wrapperType": "artist",
      "artistId": 78500,
      "artistLinkUrl": "https://itunes.apple.com/us/artist/u2/78500?uo=4",
      "artistName": "U2",
      "primaryGenreId": 21,
      "primaryGenreName": "Rock"
    }
  ]
}
</code></pre>

<p>If we Query the ArtistId from the previous response we will get the same artist:</p>

<pre><code class="python">&gt;&gt;&gt; a = 'https://itunes.apple.com/lookup?id=909253'
&gt;&gt;&gt; b = requests.get(a).json()
&gt;&gt;&gt; print(json.dumps(b, indent=2))
{
  "resultCount": 1,
  "results": [
    {
      "artistType": "Artist",
      "amgArtistId": 468749,
      "wrapperType": "artist",
      "artistId": 909253,
      "artistLinkUrl": "https://itunes.apple.com/us/artist/jack-johnson/909253?uo=4",
      "artistName": "Jack Johnson",
      "primaryGenreId": 21,
      "primaryGenreName": "Rock"
    }
  ]
}
</code></pre>

<p>Only get the Artist Name:</p>

<pre><code class="python">&gt;&gt; b
{u'resultCount': 1, u'results': [{u'artistType': u'Artist', u'amgArtistId': 468749, u'wrapperType': u'artist', u'artistId': 909253, u'artistLinkUrl': u'https://itunes.apple.com/us/artist/jack-johnson/909253?uo=4', u'artistName': u'Jack Johnson', u'primaryGenreId': 21, u'primaryGenreName': u'Rock'}]}

&gt;&gt;&gt; b['results'][0]['artistName']
u'Jack Johnson'
</code></pre>

<p>Printing out the Artist Name and Genre with String Formatting:</p>

<pre><code class="python">&gt;&gt;&gt; print('Artist: {artist_name}, Genre: {genre_name}'.format(artist_name=b['results'][0]['artistName'], genre_name=b['results'][0]['primaryGenreName']))
Artist: Jack Johnson, Genre: Rock
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Encryption and Decryption With the PyCrypto Module Using the AES Cipher in Python]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/30/encryption-and-decryption-with-the-pycrypto-module-using-the-aes-cipher-in-python/"/>
    <updated>2018-04-30T01:43:26-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/30/encryption-and-decryption-with-the-pycrypto-module-using-the-aes-cipher-in-python</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/0MaLsx.jpg" alt="" /></p>

<p>While I&rsquo;m learning a lot about encryption at the moment, I wanted to test out encryption with the PyCrypto module in Python using the <a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">Advanced Encryption Standard (AES)</a> Symmetric Block Cipher.</p>

<h2>Installing PyCrypto:</h2>

<pre><code class="bash">$ pip install pycrypto --user
</code></pre>

<h2>PyCrypto Example:</h2>

<p>Our AES Key needs to be either 16, 24 or 32 bytes long and our Initialization Vector needs to be 16 Bytes long. That will be generated using the random and string modules.</p>

<p>Encrypting:</p>

<pre><code class="python">&gt;&gt;&gt; from Crypto.Cipher import AES
&gt;&gt;&gt; import random, string, base64

&gt;&gt;&gt; key = ''.join(random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for x in range(32))
&gt;&gt;&gt; iv = ''.join(random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for x in range(16))

&gt;&gt;&gt; print(key, len(key))
('BLhgpCL81fdLBk23HkZp8BgbT913cqt0', 32)
&gt;&gt;&gt; print(iv, len(iv))
('OWFJATh1Zowac2xr', 16)

&gt;&gt;&gt; enc_s = AES.new(key, AES.MODE_CFB, iv)
&gt;&gt;&gt; cipher_text = enc_s.encrypt('this is a super important message')
&gt;&gt;&gt; encoded_cipher_text = base64.b64encode(cipher_text)
&gt;&gt;&gt; print(encoded_cipher_text)
'AtBa6zVB0UQ3U/50ogOb6g09FlyPdpmJB7UzoCqxhsQ6'
</code></pre>

<p>Decrypting:</p>

<pre><code class="python">&gt;&gt;&gt; from Crypto.Cipher import AES
&gt;&gt;&gt; import base64
&gt;&gt;&gt; key = 'BLhgpCL81fdLBk23HkZp8BgbT913cqt0'
&gt;&gt;&gt; iv = 'OWFJATh1Zowac2xr'

&gt;&gt;&gt; decryption_suite = AES.new(key, AES.MODE_CFB, iv)
&gt;&gt;&gt; plain_text = decryption_suite.decrypt(base64.b64decode(encoded_cipher_text))
&gt;&gt;&gt; print(plain_text)
this is a super important message
</code></pre>

<p>It&rsquo;s not needed to use base64, but to have the ability to stay away from strange characters I decided to encode them with base64 :D</p>

<h2>References:</h2>

<ul>
<li><a href="http://docs.python-guide.org/en/latest/scenarios/crypto/">PyCrypto</a></li>
<li><a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">Wiki - AES</a></li>
<li><a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Feedback_(CFB">Wiki - CFB Mode</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Encryption and Decryption With Simple Crypt Using Python]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/29/encryption-and-decryption-with-simple-crypt-using-python/"/>
    <updated>2018-04-29T10:50:46-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/29/encryption-and-decryption-with-simple-crypt-using-python</id>
    <content type="html"><![CDATA[<p>Today I wanted to encrypt sensitive information to not expose passwords, hostnames etc. I wanted to have a way to encrypt my strings with a master password and stumbled upon Simple Crypt.</p>

<h2>Simple Crypt</h2>

<p>Why simple-crypt? Referenced from their <a href="https://pypi.org/project/simple-crypt/">docs</a>:</p>

<ul>
<li>Simple Crypt uses standard, well-known algorithms following the recommendations from <a href="http://www.daemonology.net/blog/2009-06-11-cryptographic-right-answers.html">this</a> link.</li>
<li>The PyCrypto library provides the algorithm implementation, where AES256 cipher is used.</li>
<li>It includes a check (an HMAC with SHA256) to warn when ciphertext data are modified.</li>
<li>It tries to make things as secure as possible when poor quality passwords are used (PBKDF2 with SHA256, a 256 bit random salt, and 100,000 rounds).</li>
<li>Using a library, rather than writing your own code, means that we have less solutions to the same problem.</li>
</ul>


<h2>Installing Simple-Crypt:</h2>

<p>From a base alpine image:</p>

<pre><code class="bash">$ apk update
$ apk add python python-dev py2-pip
$ apk add gcc g++ make libffi-dev openssl-dev
$ pip install simple-crypt
</code></pre>

<h2>Simple Examples:</h2>

<p>Two simple examples to encrypt and decrypt data with simple-crypt. We will use a password <code>sekret</code> and we will encrypt the string: <code>this is a secure message</code>:</p>

<pre><code class="python">&gt;&gt;&gt; from simplecrypt import encrypt, decrypt
&gt;&gt;&gt; password = 'sekret'
&gt;&gt;&gt; message = 'this is a secret message'
&gt;&gt;&gt; ciphertext = encrypt(password, message)
&gt;&gt;&gt;
&gt;&gt;&gt; print(ciphertext)
sc#$%^&amp;*(..........
</code></pre>

<p>Now that we have our encrypted string, lets decrypt it. First we will use the wrong password, so that you will see how the expected output should look when using a different password, than was used when it was encrypted:</p>

<pre><code class="python">&gt;&gt;&gt; print(decrypt('badpass', ciphertext))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/site-packages/simplecrypt/__init__.py", line 72, in decrypt
    _assert_hmac(hmac_key, hmac, hmac2)
  File "/usr/lib/python2.7/site-packages/simplecrypt/__init__.py", line 116, in _assert_hmac
    raise DecryptionException('Bad password or corrupt / modified data.')
simplecrypt.DecryptionException: Bad password or corrupt / modified data.
</code></pre>

<p>Now using the correct password to decrypt:</p>

<pre><code class="python">&gt;&gt;&gt; print(decrypt('sekret', ciphertext))
this is a secret message
</code></pre>

<h2>SimpleCrypt Base64 and Getpass</h2>

<p>I wanted to store the encrypted string in a database, but the ciphertext has a combination of random special characters, so I decided to encode the ciphertext with base64. And the password input will be used with the getpass module.</p>

<p>Our encryption app:</p>

<pre><code class="python encrypt.py">import sys
from simplecrypt import encrypt, decrypt
from base64 import b64encode, b64decode
from getpass import getpass

password = getpass()
message = sys.argv[1]

cipher = encrypt(password, message)
encoded_cipher = b64encode(cipher)
print(encoded_cipher)
</code></pre>

<p>Our decryption app:</p>

<pre><code class="python">import sys
from simplecrypt import encrypt, decrypt
from base64 import b64encode, b64decode
from getpass import getpass

password = getpass()
encoded_cipher = sys.argv[1]

cipher = b64decode(encoded_cipher)
plaintext = decrypt(password, cipher)
print(plaintext)
</code></pre>

<h2>Encrypt and Decrypting Data using our Scripts:</h2>

<p>Encrypting the string <code>this is a secret message</code>:</p>

<pre><code class="bash">$ python encrypt.py "this is a secret message"
Password: 
c2MAAnyfWIfOBV43vxo3sVCEYMG4C6hx69hv2Ii1JKlVHJUgBAlADJPOsD5cJO6MMI9faTDm1As/VfesvBzIe5S16mNyg2q7xfnP5iJ0RlK92vMNRbKOvNibg3M=
</code></pre>

<p>Now that we have our encoded ciphertext, lets decrypt it with the password that we encrypted it with:</p>

<pre><code class="bash">$ python decrypt.py 'c2MAAnyfWIfOBV43vxo3sVCEYMG4C6hx69hv2Ii1JKlVHJUgBAlADJPOsD5cJO6MMI9faTDm1As/VfesvBzIe5S16mNyg2q7xfnP5iJ0RlK92vMNRbKOvNibg3M='
Password: 
this is a secret message
</code></pre>

<p>This is one way of working with sensitive info that you would like to encrypt/decrypt.</p>
]]></content>
  </entry>
  
</feed>
