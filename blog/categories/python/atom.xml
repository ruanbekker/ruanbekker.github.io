<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2017-10-14T15:11:31-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Python to Build a Dictionary From Data Eg Sports Per Person]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/14/using-python-to-build-a-dictionary-from-data-eg-sports-per-person/"/>
    <updated>2017-10-14T14:53:48-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/14/using-python-to-build-a-dictionary-from-data-eg-sports-per-person</id>
    <content type="html"><![CDATA[<p>I had to achieve a way to provide data in key-value format, where I wanted to see what sports people like, eg: <code>{"ruan": ["rugby", "cricket"]}</code></p>

<h2>The Idea</h2>

<p>So my idea was to have the <code>name</code> as the key, and the <code>sports</code> as the value in a list.</p>

<h2>Some Catches</h2>

<p>So for this post, I will be setting the data statically in the code, while at the time I was working data that was returned via a API.</p>

<p>I am looping through each occurence, adding the name, and when the name exists, I append the sport to the list of the person.</p>

<p>The catch was that, if there was any duplicated data, the person will only exists once in the dictionary that I am building, but the sport will be appended, so if there were 2 occurences of <code>rugby</code> it will show the sport 2 times. So I had to put some logic into the code to handle that.</p>

<h2>The Code</h2>

<pre><code class="python">"""|Info:

Printing Sports per Person, by looping through data, appending the sports to a list per person, which gets added to our dictionary.

Variables:
    group {dict} -- "the dictionary that we are building up"
    people {list} -- "list of people with their sport choices"
    for sportman in people: {[for-loop]} -- "iterating through our data, if the sport exists, continue, if not, apeend it to the list"
    print(group) {[dict]} -- "printing the results"
"""

group = {}
people = [
    {
        "name": "ruan", 
        "sport": "cricket"
    }, 
    {
        "name": "stefan", 
        "sport": "rugby"
    }, 
    {
        "name": "stefan", 
        "sport": "cricket"
    }, 
    {
        "name": "james", 
        "sport": "rugby"
    }, 
    {
        "name": "james", 
        "sport": "golf"
    }, 
    {
        "name": "stefan", 
        "sport": "rugby"
    }, 
    {
        "name": "james", 
        "sport": "hockey"
    }
]

for sportman in people:
    if sportman['name'] in group:
        if sportman['sport'] not in group[sportman['name']]:
            group[sportman['name']].append(sportman['sport'])
        else:
            pass
    else:
        group[sportman['name']] = []
        group[sportman['name']].append(sportman['sport'])

print(group)
</code></pre>

<h2>Running the Script:</h2>

<p>When running the script results in the following:</p>

<pre><code class="bash">$ python sports.py 
{'james': ['rugby', 'golf', 'hockey'], 'ruan': ['cricket'], 'stefan': ['rugby', 'cricket']}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Python Sys Library to Read Data From Stdin]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/18/using-the-python-sys-library-to-read-data-from-stdin/"/>
    <updated>2017-09-18T11:42:01-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/18/using-the-python-sys-library-to-read-data-from-stdin</id>
    <content type="html"><![CDATA[<p>Using Python&rsquo;s <code>sys</code> library to read data from <code>stdin</code>.</p>

<p>In this basic example we will strip our input, delimited by the comma character, add it to a list, and print it out</p>

<h2>Python: Read Data from Standard Input</h2>

<pre><code class="python">import sys
import json

mylist = []

data_input = sys.stdin.read()
destroy_newline = data_input.replace('\n', '')
mylist = destroy_newline.split(', ')

print("Stripping each word and adding it to 'mylist'")
print("Found: {} words in 'mylist'".format(len(mylist)))
for x in mylist:
    print("Word: {}".format(x))
</code></pre>

<p>We will echo three words and pipe it into our python script:</p>

<pre><code class="bash">$ echo "one, two, three" | python basic-stdin.py
Stripping each word and adding it to 'mylist'
Found: 3 words in 'mylist'
Word: one
Word: two
Word: three
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Python for Image Analysis With Amazons Rekognition Service]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/11/using-python-for-image-analysis-with-amazons-rekognition-service/"/>
    <updated>2017-09-11T10:20:28-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/11/using-python-for-image-analysis-with-amazons-rekognition-service</id>
    <content type="html"><![CDATA[<p>Amazon&rsquo;s Rekognition Service, which falls under their Artificial Intelligence tier, makes it easy to add image analysis to your applications.</p>

<p>Today we will use Rekognition to analyze an image, to determine the percentage of detection that the service analyzes. We will be using the Python SDK to do this.</p>

<h2>Getting a Random Image:</h2>

<p>So, I got this drunk guy on the couch, which I thought we could use to analyze.</p>

<p>Image Used:
- <a href="http://imgur.com/a/CHnSu">http://imgur.com/a/CHnSu</a></p>

<blockquote class="imgur-embed-pub" lang="en" data-id="a/CHnSu"><a href="//imgur.com/CHnSu"></a></blockquote>


<script async src="//s.imgur.com/min/embed.js" charset="utf-8"></script>


<h2>Our Python Code:</h2>

<p>Our code will use boto3 to use rekognition from Amazon Web Services, detects the image, and prints out the values.</p>

<p>Note that I am not specifying any credentials, as my credentials is configured in my local credential provider, where boto will pick it up from.</p>

<pre><code class="python">import boto3

BUCKET = "rekognition-bucket"
KEY = "images/image-02.jpg"

def detect_labels(bucket, key, max_labels=10, min_confidence=90, region="eu-west-1", profile_name="aws"):
    rekognition = boto3.client("rekognition")
    response = rekognition.detect_labels(
        Image={
        "S3Object": {
        "Bucket": BUCKET,
        "Name": KEY,
    }
        },
        MaxLabels=max_labels,
        MinConfidence=min_confidence,
    )
    return response['Labels']


for label in detect_labels(BUCKET, KEY):
    print("{Name} - {Confidence}%".format(**label))
</code></pre>

<h2>Running the App:</h2>

<p>Running our Python App, will result in the following:</p>

<pre><code class="bash">$ python rekog.py 
People - 98.9893875122%
Person - 98.9893951416%
Human - 98.9505844116%
Alcohol - 98.573425293%
Beer - 98.573425293%
Beer Bottle - 98.573425293%
Beverage - 98.573425293%
Bottle - 98.573425293%
Drink - 98.573425293%
Couch - 98.4713821411%
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://aws.amazon.com/rekognition/">https://aws.amazon.com/rekognition/</a></li>
<li><a href="https://gist.github.com/alexcasalboni/0f21a1889f09760f8981b643326730ff">https://gist.github.com/alexcasalboni/0f21a1889f09760f8981b643326730ff</a></li>
</ul>


<center>
        <script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script>
</center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Python to Write Data to a MySQL Database]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/09/using-python-to-write-data-to-a-mysql-database/"/>
    <updated>2017-09-09T16:39:59-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/09/using-python-to-write-data-to-a-mysql-database</id>
    <content type="html"><![CDATA[<p>From our <a href="http://blog.ruanbekker.com/blog/2017/09/09/using-python-to-read-data-from-a-mysql-database/">previous</a> post, we used python to read data from mysql. In this post we will be using the <code>random</code> library to write random data into mysql.</p>

<p>We will define our lists with the categorized data, and then using for loop, to write data into our mysql database:</p>

<h2>Create The Database:</h2>

<p>Using Python to Create the Database:</p>

<pre><code class="python">&gt;&gt;&gt; conn = pdb.connect(host=db_host, user=db_username, passwd=db_password)
&gt;&gt;&gt; cursor = conn.cursor()
&gt;&gt;&gt; cursor.execute("CREATE DATABASE testdb1")
1L
&gt;&gt;&gt; cursor.execute("CREATE TABLE testdb1.myusers(name VARCHAR(50), surname VARCHAR(50), countries VARCHAR(50), job VARCHAR(20), os VARCHAR(20), car VARCHAR(20))")
0L
</code></pre>

<p>Now to list our databases:</p>

<pre><code class="python">&gt;&gt;&gt; cursor.execute("show databases")
12L

&gt;&gt;&gt; dbs = cursor.fetchall()
&gt;&gt;&gt; for x in dbs:
...     print(x)
...

('information_schema',)
('mysql',)
('performance_schema',)
('testdb1',)
</code></pre>

<h2>Python Code to Write to MySQL</h2>

<p>We will create a <code>mysql_write.py</code> file, with the following contents to define our random data that we will write to our mysql database. The config module can be found from <a href="http://blog.ruanbekker.com/blog/2017/09/09/using-python-to-read-data-from-a-mysql-database/">this</a> post.</p>

<pre><code class="python mysql_write.py">import MySQLdb as pdb
from config import credentials as secrets
import random
import datetime

db_host = secrets['mysql']['host']
db_username = secrets['mysql']['username']
db_password = secrets['mysql']['password']
db_name = secrets['mysql']['database']

for x in range(10):
    a = random.choice(names)
    b = random.choice(surnames)
    c = random.choice(countries)
    d = random.choice(job)
    e = random.choice(os)
    f = random.choice(car)

    cursor.execute("INSERT INTO myusers values('{name}', '{surname}', '{countries}', '{job}', '{os}', '{car}');".format(name=a, surname=b, countries=c, job=d, os=e, car=f))

conn.commit()
conn.close()
</code></pre>

<p>After running the file: <code>python mysql_write.py</code> we should have 10 records in our database.</p>

<h2>Reading the Data from MySQLL</h2>

<p>To verify that the data is in our MySQL Database, lets logon to our mysql database:</p>

<pre><code class="bash">$ mysql -u root -p
</code></pre>

<pre><code class="mysql">mysql&gt; select * from testdb1.myusers;
+----------+----------+-----------+----------------+---------+---------------+
| name     | surname  | countries | job            | os      | car           |
+----------+----------+-----------+----------------+---------+---------------+
| James    | James    | New York  | Waiter         | Mac     | Volkswagen    |
| Jennifer | Smith    | New York  | Scientist      | Windows | Audi          |
| Michelle | Jacobs   | Italy     | Police Officer | Mac     | Ford          |
| Michelle | Anderson | Italy     | Waiter         | Windows | Ford          |
| Jennifer | Smith    | England   | Doctor         | Windows | Toyota        |
| Peter    | Jacobs   | England   | IT             | Windows | BMW           |
| Samantha | James    | England   | Doctor         | Mac     | Mazda         |
| Frank    | Phillips | England   | IT             | Mac     | BMW           |
| Samantha | James    | England   | Banker         | Linux   | Mercedez-Benz |
| Peter    | Anderson | Sweden    | Doctor         | Windows | BMW           |
+----------+----------+-----------+----------------+---------+---------------+
</code></pre>

<p>Next, lets use Python to do the same, create a file <code>mysql_read.py</code> with the following content:</p>

<pre><code class="python">import MySQLdb as pdb
from config import credentials as secrets

db_host = secrets['mysql']['host']
db_username = secrets['mysql']['username']
db_password = secrets['mysql']['password']
db_name = secrets['mysql']['database']

conn = pdb.connect(host=db_host, user=db_username, passwd=db_password, db=db_name)
cursor = conn.cursor()

cursor.execute("select * from myusers")
read = cursor.fetchall()

for x in read:
    print(x)

conn.close()
</code></pre>

<p>Running the Python file, to read the data:</p>

<pre><code class="bash">$ python mysql_read.py

('James', 'James', 'New York', 'Waiter', 'Mac', 'Volkswagen')
('Jennifer', 'Smith', 'New York', 'Scientist', 'Windows', 'Audi')
('Michelle', 'Jacobs', 'Italy', 'Police Officer', 'Mac', 'Ford')
('Michelle', 'Anderson', 'Italy', 'Waiter', 'Windows', 'Ford')
('Jennifer', 'Smith', 'England', 'Doctor', 'Windows', 'Toyota')
('Peter', 'Jacobs', 'England', 'IT', 'Windows', 'BMW')
('Samantha', 'James', 'England', 'Doctor', 'Mac', 'Mazda')
('Frank', 'Phillips', 'England', 'IT', 'Mac', 'BMW')
('Samantha', 'James', 'England', 'Banker', 'Linux', 'Mercedez-Benz')
('Peter', 'Anderson', 'Sweden', 'Doctor', 'Windows', 'BMW')
</code></pre>

<center>
        <script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script>
</center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Python to Read Data From a MySQL Database]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/09/using-python-to-read-data-from-a-mysql-database/"/>
    <updated>2017-09-09T15:23:05-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/09/using-python-to-read-data-from-a-mysql-database</id>
    <content type="html"><![CDATA[<p>Wanted to use Python to read some data from MySQL and stumbled upon a couple of great resources, which I noted some of my output below:</p>

<h2>Install Dependencies:</h2>

<pre><code class="bash ">$ apt install python-dev libmysqlclient-dev python-setuptools gcc
$ easy_install pip
$ pip install MySQL-python
</code></pre>

<h2>Download Some Sample Data:</h2>

<p>Download the world dataset for MySQL:</p>

<pre><code class="bash">$ wget http://downloads.mysql.com/docs/world.sql.zip
$ unzip world.sql.zip
</code></pre>

<h2>Create Database:</h2>

<p>Create the Database in MySQL for the dataset that we downloaded:</p>

<pre><code class="bash">$ mysql -u root -p -e'CREATE DATABASE world;'
</code></pre>

<h2>Import Data:</h2>

<p>Import the data into the <code>world</code> database:</p>

<pre><code class="bash">$ mysql -u root -p world &lt; world.sql
</code></pre>

<h2>Create the MySQL Credentials File:</h2>

<p>Create a <code>config.py</code> file and populate the credentials in a dictionary:</p>

<pre><code class="python">credentials = {
    'mysql': {
        'host': 'localhost',
        'username': 'root',
        'password': 'password',
        'database': 'world'
    }
}
</code></pre>

<h2>Run Queries from Python:</h2>

<p>Enter the Python interpreter and run some queries:</p>

<pre><code class="python">&gt;&gt;&gt; import MySQLdb as pdb
&gt;&gt;&gt; from config import credentials as secrets

# assignments 
&gt;&gt;&gt; db_host = secrets['mysql']['host']
&gt;&gt;&gt; db_username = secrets['mysql']['username']
&gt;&gt;&gt; db_password = secrets['mysql']['password']
&gt;&gt;&gt; db_name = secrets['mysql']['database']

# create a connection to the database
&gt;&gt;&gt; conn = pdb.connect(host=db_host, user=db_username, passwd=db_password, db=db_name)

# create a object for the queries we will be using
&gt;&gt;&gt; cursor = conn.cursor()

# execute the query
&gt;&gt;&gt; cursor.execute('select continent, name from country where continent = "Africa" limit 5')
5L

# fetch the results by assigning it to the results object:
&gt;&gt;&gt; results = cursor.fetchall()

# loop and print results:
&gt;&gt;&gt; for x in results:
...     print(x)
...
('Africa', 'Angola')
('Africa', 'Burundi')
('Africa', 'Benin')
('Africa', 'Burkina Faso')
('Africa', 'Botswana')

# close the connection
&gt;&gt;&gt; conn.close()
</code></pre>

<h2>Graphing Results to Plotly:</h2>

<p>A great <a href="http://moderndata.plot.ly/graph-data-from-mysql-database-in-python/">blogpost</a> that shows how to use this data to graph the results to plotly</p>

<h2>Resources:</h2>

<ul>
<li><a href="http://moderndata.plot.ly/graph-data-from-mysql-database-in-python/">http://moderndata.plot.ly/graph-data-from-mysql-database-in-python/</a></li>
<li><a href="https://stackoverflow.com/questions/11007627/python-variable-declaration">https://stackoverflow.com/questions/11007627/python-variable-declaration</a></li>
</ul>


<center>
        <script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script>
</center>

]]></content>
  </entry>
  
</feed>
