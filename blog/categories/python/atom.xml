<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2022-03-29T18:42:48-04:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Load Environment Variables From File in Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/03/22/load-environment-variables-from-file-in-python/"/>
    <updated>2022-03-22T07:34:11-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/03/22/load-environment-variables-from-file-in-python</id>
    <content type="html"><![CDATA[<p>In this quick tutorial we will demonstrate how to load additional environment variables from file into your python application.</p>

<p>It loads key value pairs from a file and append it to its current runtime environment variables, so your current environment is unaffected.</p>

<h2>python-dotenv</h2>

<p>We will make use of the package <a href="https://pypi.org/project/python-dotenv">python-dotenv</a> so we will need to install the python package with pip:</p>

<pre><code class="bash">python3 -m pip install python-dotenv
</code></pre>

<h2>The env file</h2>

<p>I will create the <code>.env</code> in my current working directory with the content:</p>

<pre><code class="bash">APPLICATION_NAME=foo
APPLICATION_OWNER=bar
</code></pre>

<h2>The application</h2>

<p>This is a basic demonstration of a python application which loads the additional environment variables from file, then we will use <code>json.dumps(.., indent=2)</code> so that we can get a pretty print of all our environment variables:</p>

<pre><code class="python">import os
import json
from dotenv import load_dotenv

load_dotenv('.env')

print(json.dumps(dict(os.environ), indent=2))
</code></pre>

<p>When we run the application the output will look something like this:</p>

<pre><code class="json">{
  "SHELL": "/bin/bash",
  "PWD": "/home/ubuntu/env-vars",
  "LOGNAME": "ubuntu",
  "HOME": "/home/ubuntu",
  "LANG": "C.UTF-8",
  "TERM": "xterm-256color",
  "USER": "ubuntu",
  "LC_CTYPE": "C.UTF-8",
  "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin",
  "SSH_TTY": "/dev/pts/0",
  "OLDPWD": "/home/ubuntu",
  "APPLICATION_NAME": "foo",
  "APPLICATION_OWNER": "bar"
}
</code></pre>

<p>As we can see our two environment variables was added to the environment. If you would like to access your two environment variables, we can do the following:</p>

<pre><code class="python">import os
from dotenv import load_dotenv

load_dotenv('.env')

APPLICATION_NAME = os.getenv('APPLICATION_NAME')
APPLICATION_OWNER = os.getenv('APPLICATION_OWNER')

print('Name: {0}, Owner: {1}'.format(APPLICATION_NAME, APPLICATION_OWNER))
</code></pre>

<p>And when we run that, the output should be the following:</p>

<pre><code class="bash">Name: foo, Owner: bar
</code></pre>

<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run a Basic Python Flask Restful API]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/03/20/run-a-basic-python-flask-restful-api/"/>
    <updated>2022-03-20T17:33:17-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/03/20/run-a-basic-python-flask-restful-api</id>
    <content type="html"><![CDATA[<p>In this tutorial we will run a basic api using flask-restful, it will only have two routes which will be a get and post method for the purpose of demonstration.</p>

<h2>What is Flask Restful</h2>

<p><a href="https://flask-restful.readthedocs.io/en/latest/index.html">Flask-RESTful</a> is an extension for <a href="https://flask.palletsprojects.com/en/2.0.x/">Flask</a> that adds support for quickly building REST APIs. It is a lightweight abstraction that works with your existing ORM/libraries. Flask-RESTful encourages best practices with minimal setup.</p>

<p>If you want to see a basic Flask API post, you can follow the link below:
- <a href="https://blog.ruanbekker.com/blog/2018/11/27/python-flask-tutorial-series-create-a-hello-world-app-p1/">https://blog.ruanbekker.com/blog/2018/11/27/python-flask-tutorial-series-create-a-hello-world-app-p1/</a></p>

<h2>Installation</h2>

<p>Install Flask and Flask Restful:</p>

<pre><code class="bash">python3 -m pip install flask
python3 -m pip install flask-restful
</code></pre>

<h2>Code</h2>

<p>The basic code that we have, is to have two methods available (get and post):</p>

<pre><code class="python">import flask
import flask_restful

app = flask.Flask(__name__)
api = flask_restful.Api(app)

class HelloWorld(flask_restful.Resource):
    def get(self):
        return {'hello': 'world'}

    def post(self):
        json_data = request.get_json(force=True)
        firstname = json_data['firstname']
        lastname = json_data['lastname']
        return jsonify(firstname=firstname, lastname=lastname)

api.add_resource(HelloWorld, '/')

if __name__ == "__main__":
    app.run(debug=True)
</code></pre>

<h2>Run the Server</h2>

<p>Run the server:</p>

<pre><code class="bash">python api.py
</code></pre>

<p>Then make a get request:</p>

<pre><code class="bash">curl http://localhost:5000/
</code></pre>

<p>The response should be the following:</p>

<pre><code class="json">{
    "hello": "world"
}
</code></pre>

<p>Then make a post request:</p>

<pre><code class="bash">curl -XPOST http://localhost:5000/ -d '{"firstname": "ruan", "lastname": "bekker"}'
</code></pre>

<p>The response should look something like this:</p>

<pre><code class="json">{
  "firstname": "ruan",
  "lastname": "bekker"
}
</code></pre>

<h2>Integration Tests</h2>

<p>We can setup integration tests with <code>unittest</code> by creating <code>test_api.py</code>:</p>

<pre><code class="python">import unittest
import app as api

class TestFlaskApi(unittest.TestCase):
    def setUp(self):
        self.app = api.app.test_client()

    def test_get_method(self):
        response = self.app.get("/")
        self.assertEqual(
            response.get_json(),
            {"hello": "world"},
        )

    def test_post_method(self):
        # request payload
        payload = json.dumps({
            "firstname": "ruan",
            "lastname": "bekker"
        })

        # make request
        response = self.app.post("/", data=payload, headers={"Content-Type": "application/json"})

        # assert
        self.assertEqual(str, type(response.json['lastname']))
        self.assertEqual(200, response.status_code)

    def tearDown(self):
        # delete if anything was created
        pass

if __name__ == '__main__':
    unittest.main()
</code></pre>

<p>Then we can run our test with:</p>

<pre><code class="bash">python -m unittest discover -p test_app.py -v
</code></pre>

<p>Since our first test is expecting <code>{"hello": "world"}</code> our test will pass, and our second test we are validating that our post request returns a 200 response code and that our lastname field is of string type.</p>

<p>The output of our tests will show something like this:</p>

<pre><code class="bash">test_get_request (test_app.TestFlaskApi) ... ok
test_post_request (test_app.TestFlaskApi) ... ok

----------------------------------------------------------------------
Ran 2 tests in 0.009s

OK
</code></pre>

<h2>More on Flask-Restful</h2>

<p>This was a very basic example and their <a href="https://flask-restful.readthedocs.io/en/latest/quickstart.html">documentation</a> provides a great tutorial on how to extend from this example. This is also a <a href="https://dev.to/paurakhsharma/flask-rest-api-part-6-testing-rest-apis-4lla">great blogpost</a> on testing rest api&rsquo;s.</p>

<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Logging With Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/07/31/basic-logging-with-python/"/>
    <updated>2021-07-31T04:17:24-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/07/31/basic-logging-with-python</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/ruanbekker-header-photo.png" alt="" /></p>

<p>I&rsquo;m trying to force myself to move away from using the <code>print()</code> function as I&rsquo;m pretty much using print all the time to cater for logging, and using the <code>logging</code> package instead.</p>

<p>This is a basic example of using logging in a basic python app:</p>

<pre><code class="python">import logging

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s %(message)s",
    handlers=[
        logging.StreamHandler()
    ]
)

messagestring = {'info': 'info message', 'warn': 'this is a warning', 'err': 'this is a error'}

logger = logging.getLogger('thisapp')
logger.info('message: {}'.format(messagestring['info']))
logger.warning('message: {}'.format(messagestring['warn']))
logger.error('message: {}'.format(messagestring['err']))
</code></pre>

<p>When running this example, this is the output that you will see:</p>

<pre><code class="bash">$ python app.py
2021-07-19 13:07:43,647 [INFO] thisapp message: info message
2021-07-19 13:07:43,647 [WARNING] thisapp message: this is a warning
2021-07-19 13:07:43,647 [ERROR] thisapp message: this is a error
</code></pre>

<p>More more info on this package, see it&rsquo;s documentation:
- <a href="https://docs.python.org/3/library/logging.html">https://docs.python.org/3/library/logging.html</a></p>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualize Weather Data With Grafana and the DHT22 Sensor]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/03/10/visualize-weather-data-with-grafana-and-the-dht22-sensor/"/>
    <updated>2021-03-10T00:06:31-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/03/10/visualize-weather-data-with-grafana-and-the-dht22-sensor</id>
    <content type="html"><![CDATA[<p>In this tutorial, we will connect the <a href="https://learn.adafruit.com/dht">DHT22</a> sensor to the Raspberry Pi Zero via the GPIO pins to measure temperature and humidity and visualize it with Grafana.</p>

<p><em>Note</em>: This post was originally posted on my <a href="https://blog.pistack.co.za/monitor-temperature-with-the-dht22-sensor-on-the-raspberry-pi/">RaspberryPi Blog</a></p>

<p>Then we will write a Python exporter for prometheus to expose our metrics so that we can visualize it in Grafana.</p>

<h2>The Endgoal</h2>

<p><img src="https://user-images.githubusercontent.com/30043398/104296987-fd9d3f00-54ca-11eb-8623-f3fd4a63e3cc.png" alt="image" /></p>

<h2>The Hardware</h2>

<p>This is how the sensor looks like (I got it from <a href="https://www.communica.co.za/products/bmt-temp-humd-snsr-dht22-on-pcb">Communica</a>)</p>

<p><img src="https://user-images.githubusercontent.com/567298/103872941-ba605c00-50d7-11eb-9f60-531995a185e6.png" alt="image" /></p>

<h2>Connecting the Sensor</h2>

<p>You can use the following graphic to connect your sensor to your raspberry pi:</p>

<p><img src="https://user-images.githubusercontent.com/567298/103873892-27c0bc80-50d9-11eb-9c41-3f3b2ff5aee2.png" alt="image" /></p>

<h2>Installing Software</h2>

<p>To install the required software, we will be using pip:</p>

<pre><code>$ pip3 install Adafruit_DHT --user
</code></pre>

<p>Once we installed the software we can configure it</p>

<h2>Interact with the Sensor</h2>

<p>Enter your python interpreter:</p>

<pre><code>$ python3
&gt;&gt;&gt;
</code></pre>

<p>Then import the library, and get the current temperature and humidity:</p>

<pre><code>&gt;&gt;&gt; import Adafruit_DHT as dht
&gt;&gt;&gt; humidity, temperature = dht.read_retry(dht.DHT22, 4)
&gt;&gt;&gt; humidity = format(humidity, ".2f") + "%"
&gt;&gt;&gt; humidity
'47.20%'
&gt;&gt;&gt; temperature = format(temperature, ".2f") + "C"
&gt;&gt;&gt; temperature
'29.10C'
</code></pre>

<p>Let&rsquo;s create a python script for it:</p>

<pre><code>$ cat temps.py
#!/usr/bin/env python3

import Adafruit_DHT as dht_sensor
import time

def get_temperature_readings():
    humidity, temperature = dht_sensor.read_retry(dht_sensor.DHT22, 4)
    humidity = format(humidity, ".2f") + "%"
    temperature = format(temperature, ".2f") + "C"
    return {"temperature": temperature, "humidity": humidity}

while True:
    print(get_temperature_readings())
    time.sleep(30)
</code></pre>

<p>And run it:</p>

<pre><code>$ python3 temps.py
{'temperature': '28.00C', 'humidity': '47.40%'}
{'temperature': '28.00C', 'humidity': '47.30%'}
{'temperature': '28.00C', 'humidity': '47.70%'}
{'temperature': '28.00C', 'humidity': '47.40%'}
{'temperature': '28.00C', 'humidity': '47.60%'}
</code></pre>

<h2>Visualize with Grafana</h2>

<p>Let&rsquo;s visualize our data with Grafana. For this, we need to write an exporter so that Prometheus can scrape the data.</p>

<p>Let&rsquo;s create a python flask application with the prometheus client library for python to expose the metrics to prometheus with a <code>/metrics</code> endpoint.</p>

<p>Note: I have used <a href="https://openweathermap.org/api">OpenWeatherMap</a>&rsquo;s API to get the outside temperature for my location.</p>

<pre><code>$ cat flask_temps.py
#!/usr/bin/env python3

import Adafruit_DHT as dht_sensor
import time
from flask import Flask, Response
from prometheus_client import Counter, Gauge, start_http_server, generate_latest
import requests

params = {"lat": "-xx.xxxxx", "lon": "xx.xxxx", "units": "metric", "appid": "your-api-key"}
baseurl = "https://api.openweathermap.org/data/2.5/weather"
content_type = str('text/plain; version=0.0.4; charset=utf-8')

def get_temperature_readings():
    humidity, temperature = dht_sensor.read_retry(dht_sensor.DHT22, 4)
    humidity = format(humidity, ".2f")
    temperature = format(temperature, ".2f")
    outside_temp = get_outside_weather()
    if all(v is not None for v in [humidity, temperature, outside_temp]):
        response = {"temperature": temperature, "humidity": humidity, "outside_temp": outside_temp}
        return response
    else:
        time.sleep(0.2)
        humidity, temperature = dht_sensor.read_retry(dht_sensor.DHT22, 4)
        humidity = format(humidity, ".2f")
        temperature = format(temperature, ".2f")
        outside_temp = get_outside_weather()
        response = {"temperature": temperature, "humidity": humidity, "outside_temp": outside_temp}
        return response

def get_outside_weather():
    response = requests.get(baseurl, params=params)
    temp = response.json()['main']['temp']
    return temp

app = Flask(__name__)

current_humidity = Gauge(
        'current_humidity',
        'the current humidity percentage, this is a gauge as the value can increase or decrease',
        ['room']
)

current_temperature = Gauge(
        'current_temperature',
        'the current temperature in celsius, this is a gauge as the value can increase or decrease',
        ['room']
)

current_temperature_outside = Gauge(
        'current_temperature_outside',
        'the current outside temperature in celsius, this is a gauge as the value can increase or decrease',
        ['location']
)

@app.route('/metrics')
def metrics():
    metrics = get_temperature_readings()
    current_humidity.labels('study').set(metrics['humidity'])
    current_temperature.labels('study').set(metrics['temperature'])
    current_temperature_outside.labels('za_ct').set(metrics['outside_temp'])
    return Response(generate_latest(), mimetype=content_type)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
</code></pre>

<p>Then install the flask and prometheus_client package:</p>

<pre><code>$ python3 -m pip install flask prometheus_client --user
</code></pre>

<p>When you run the program, you should be able to retrieve metrics from the exporter by making a request on port 5000 on the <code>/metrics</code> request path:</p>

<pre><code>$ curl http://localhost:5000/metrics
# HELP python_gc_objects_collected_total Objects collected during gc
# TYPE python_gc_objects_collected_total counter
python_gc_objects_collected_total{generation="0"} 646.0
python_gc_objects_collected_total{generation="1"} 129.0
python_gc_objects_collected_total{generation="2"} 0.0
# HELP python_gc_objects_uncollectable_total Uncollectable object found during GC
# TYPE python_gc_objects_uncollectable_total counter
python_gc_objects_uncollectable_total{generation="0"} 0.0
python_gc_objects_uncollectable_total{generation="1"} 0.0
python_gc_objects_uncollectable_total{generation="2"} 0.0
# HELP python_gc_collections_total Number of times this generation was collected
# TYPE python_gc_collections_total counter
python_gc_collections_total{generation="0"} 104.0
python_gc_collections_total{generation="1"} 9.0
python_gc_collections_total{generation="2"} 0.0
# HELP python_info Python platform information
# TYPE python_info gauge
python_info{implementation="CPython",major="3",minor="7",patchlevel="3",version="3.7.3"} 1.0
# HELP process_virtual_memory_bytes Virtual memory size in bytes.
# TYPE process_virtual_memory_bytes gauge
process_virtual_memory_bytes 4.4761088e+07
# HELP process_resident_memory_bytes Resident memory size in bytes.
# TYPE process_resident_memory_bytes gauge
process_resident_memory_bytes 2.7267072e+07
# HELP process_start_time_seconds Start time of the process since unix epoch in seconds.
# TYPE process_start_time_seconds gauge
process_start_time_seconds 1.61044381853e+09
# HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.
# TYPE process_cpu_seconds_total counter
process_cpu_seconds_total 5.86
# HELP process_open_fds Number of open file descriptors.
# TYPE process_open_fds gauge
process_open_fds 6.0
# HELP process_max_fds Maximum number of open file descriptors.
# TYPE process_max_fds gauge
process_max_fds 1024.0
# HELP current_humidity the current humidity percentage, this is a gauge as the value can increase or decrease
# TYPE current_humidity gauge
current_humidity{room="study"} 47.0
# HELP current_temperature the current temperature in celsius, this is a gauge as the value can increase or decrease
# TYPE current_temperature gauge
current_temperature{room="study"} 25.7
# HELP current_temperature_outside the current outside temperature in celsius, this is a gauge as the value can increase or decrease
# TYPE current_temperature_outside gauge
current_temperature_outside{location="za_ct"} 27.97
</code></pre>

<p>Now to configure our prometheus scrape config to scrape our endpoint:</p>

<pre><code>$ cat /etc/prometheus/prometheus.yml
...
scrape_configs:
  - job_name: 'temperature-exporter'
    scrape_interval: 15s
    static_configs:
    - targets: ['192.168.0.5:5000']
      labels:
        instance: 'pi-zero'
        room: 'study'
</code></pre>

<p>Then restart prometheus and head over to Grafana.</p>

<p>We will be adding a new panel with a graph visualization, and from our prometheus datasource, we will be referencing the 2 metrics (different from the screenshot):</p>

<pre><code>current_humidity{room="study"} 47.0
current_temperature{room="study"} 25.7
current_temperature_outside{location="za_ct"} 27.97
</code></pre>

<p>As can be seen below:</p>

<p><img src="https://user-images.githubusercontent.com/567298/103987136-a169b080-5194-11eb-8a61-6d36f45caf5c.png" alt="image" /></p>

<p>After a bit of customization, you can get something more or less like this:</p>

<p><img src="https://user-images.githubusercontent.com/30043398/104296987-fd9d3f00-54ca-11eb-8623-f3fd4a63e3cc.png" alt="image" /></p>

<h2>Thank You</h2>

<p>Thanks for reading, if you like my content feel free to visit my website <strong><a href="https://ruan.dev">ruan.dev</a></strong> or follow me on Twitter <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending Slack Messages With Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/11/06/sending-slack-messages-with-python/"/>
    <updated>2020-11-06T13:58:50+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/11/06/sending-slack-messages-with-python</id>
    <content type="html"><![CDATA[<p>In this post I will demonstrate how to send messages to slack using python based on the status of an event.</p>

<p>We will keep it basic, that when something is down or up, it should send a slack message with the status, message, color and embed your grafana dashboard links inside the alert (or any links that you would like).</p>

<h2>Create a Webhook</h2>

<p>From a previous post on <a href="https://blog.ruanbekker.com/blog/2019/04/18/setup-a-slack-webhook-for-sending-messages-from-applications/">how to use curl to send slack messages</a> I showed how to create your webhook, so you can just follow that post if you want to follow along.</p>

<p>Once you have a webhook, which will look like <code>https://hooks.slack.com/services/xx/yy/zz</code>, you are good to follow to the next step.</p>

<h2>Creating the Script</h2>

<p>First we need requests:</p>

<pre><code>$ pip install requests
</code></pre>

<p>Then we will create the <code>slack_notifier.py</code>, just ensure that you replace your slack webhook url and slack channel to yours:</p>

<pre><code class="python">import requests
import sys
import os

SLACK_WEBHOOK_URL = 'https://hooks.slack.com/&lt;your&gt;/&lt;slack&gt;/&lt;webhook&gt;'
SLACK_CHANNEL = "#your-slack-channel"
ALERT_STATE = sys.argv[1]

alert_map = {
    "emoji": {
        "up": ":white_check_mark:",
        "down": ":fire:"
    },
    "text": {
        "up": "RESOLVED",
        "down": "FIRING"
    },
    "message": {
        "up": "Everything is good!",
        "down": "Stuff is burning!"
    },
    "color": {
        "up": "#32a852",
        "down": "#ad1721"
    }
}

def alert_to_slack(status, log_url, metric_url):
    data = {
        "text": "AlertManager",
        "username": "Notifications",
        "channel": SLACK_CHANNEL,
        "attachments": [
        {
            "text": "{emoji} [*{state}*] Status Checker\n {message}".format(
                emoji=alert_map["emoji"][status],
                state=alert_map["text"][status],
                message=alert_map["message"][status]
            ),
            "color": alert_map["color"][status],
            "attachment_type": "default",
            "actions": [
                {
                    "name": "Logs",
                    "text": "Logs",
                    "type": "button",
                    "style": "primary",
                    "url": log_url
                },
                {
                    "name": "Metrics",
                    "text": "Metrics",
                    "type": "button",
                    "style": "primary",
                    "url": metric_url
                }
            ]
        }]
    }
    r = requests.post(SLACK_WEBHOOK_URL, json=data)
    return r.status_code

alert_to_slack(ALERT_STATE, "https://grafana-logs.dashboard.local", "https://grafana-metrics.dashboard.local")
</code></pre>

<h2>Testing it out</h2>

<p>Time to test it out, so let&rsquo;s assume something is down, then we can react on that event and action the following:</p>

<pre><code>$ python slack_notifier.py down
</code></pre>

<p>Which will look like the following on slack:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98374881-fdf00880-2049-11eb-9d7f-7599665871db.png" alt="image" /></p>

<p>And when recovery is in place, we can action the following:</p>

<pre><code>$ python slack_notifier.py up
</code></pre>

<p>Which will look like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98374958-1eb85e00-204a-11eb-8ab0-c6a8a0640752.png" alt="image" /></p>

<h2>Thanks</h2>

<p>That was a basic example on how you can use python to send slack messages.</p>
]]></content>
  </entry>
  
</feed>
