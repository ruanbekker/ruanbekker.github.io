<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2017-10-24T10:10:34-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Basic Example With Python to Create a Module That Consists of Classes and Functions]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/22/basic-example-with-python-to-create-a-module-that-consists-of-classes-and-functions/"/>
    <updated>2017-10-22T05:45:17-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/22/basic-example-with-python-to-create-a-module-that-consists-of-classes-and-functions</id>
    <content type="html"><![CDATA[<p>Just a very basic example how to create a Python Module that consists of a Single Class and 2 basic functions.</p>

<p>Our main app will can our module to print out a word, that we pass to our first function.</p>

<h2>The Directory Setup:</h2>

<p>Below is a tree view of my current working directory:</p>

<pre><code class="bash">$ tree
.
├── providers
│   ├── __init__.py
│   ├── test.py
├── README.md
└── main.py
</code></pre>

<p>In order to make a python file a module, we need to have a blank <code>__init__.py</code> file in our directory. So any files under our providers directory will be seen as modules from our <code>main.py</code> file.</p>

<h2>Our Test Module:</h2>

<p>in our <code>providers/test.py</code> file:</p>

<pre><code class="python">class TestClass:

    def word_to_return(self, word_value):
        return word_value

    def simple_test(self):
        data = self.word_to_return('its me!')
        return data
</code></pre>

<p>Then our <code>providers/test.py</code> file will be blank.</p>

<p>Our <code>main.py</code>, we will import our test module, instantiate our class, and call our function within the class that we instantiated:</p>

<pre><code class="python">from providers import test

test_instance = test.TestClass()
response = test_instance.simple_test()

print(response)
</code></pre>

<p>instead of <code>response = test_instance.simple_test()</code>, you could also do <code>print(test_instance.simple_test()</code></p>

<h2>Testing it out:</h2>

<pre><code class="bash">$ python main.py
its me!
</code></pre>

<p>It&rsquo;s very basic but will post some more topics around this in the future.</p>

<p>Also note, this blog is for quick posts that I come accross during my daily doings, for more details tutorials have a look at my main blog: <a href="https://sysadmins.co.za/?referral=blog.ruanbekker.com?category=python">sysadmins.co.za</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Script to Decrypt Encrypted Data With AWS KMS]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/20/python-script-to-decrypt-encrypted-data-with-aws-kms/"/>
    <updated>2017-10-20T04:54:51-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/20/python-script-to-decrypt-encrypted-data-with-aws-kms</id>
    <content type="html"><![CDATA[<p>Quick script to decrypt data that was encrypted with your KMS key:</p>

<h2>The Script:</h2>

<p>The script requires the encrypted scring as an argument:</p>

<pre><code class="python">#!/usr/bin/env python

import boto3
import sys
from base64 import b64decode

try:
    encrypted_value = sys.argv[1]
except IndexError:
    print("Usage: {} {}".format(sys.argv[0], 'the-encrypted-string'))
    exit(1)

session = boto3.Session(
        region_name='eu-west-1',
        profile_name='default'
    )

kms = session.client('kms')

response = kms.decrypt(CiphertextBlob=b64decode(encrypted_value))['Plaintext']
print("Decrypted Value: {}".format(response))
</code></pre>

<p>Change the permissions so that the file is executable:</p>

<pre><code class="bash">$ chmod +x decrypt.py
</code></pre>

<h2>Usage:</h2>

<pre><code class="bash">$ ./decrypt.py asdlaskjdasidausd09q3uoijad09ujd38u309
Decrypted Value: thisIsMyDecryptedValue
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Python to Build a Dictionary From Data Eg Sports Per Person]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/14/using-python-to-build-a-dictionary-from-data-eg-sports-per-person/"/>
    <updated>2017-10-14T14:53:48-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/14/using-python-to-build-a-dictionary-from-data-eg-sports-per-person</id>
    <content type="html"><![CDATA[<p>I had to achieve a way to provide data in key-value format, where I wanted to see what sports people like, eg: <code>{"ruan": ["rugby", "cricket"]}</code></p>

<h2>The Idea</h2>

<p>So my idea was to have the <code>name</code> as the key, and the <code>sports</code> as the value in a list.</p>

<h2>Some Catches</h2>

<p>So for this post, I will be setting the data statically in the code, while at the time I was working data that was returned via a API.</p>

<p>I am looping through each occurence, adding the name, and when the name exists, I append the sport to the list of the person.</p>

<p>The catch was that, if there was any duplicated data, the person will only exists once in the dictionary that I am building, but the sport will be appended, so if there were 2 occurences of <code>rugby</code> it will show the sport 2 times. So I had to put some logic into the code to handle that.</p>

<h2>The Code</h2>

<pre><code class="python">"""|Info:

Printing Sports per Person, by looping through data, appending the sports to a list per person, which gets added to our dictionary.

Variables:
    group {dict} -- "the dictionary that we are building up"
    people {list} -- "list of people with their sport choices"
    for sportman in people: {[for-loop]} -- "iterating through our data, if the sport exists, continue, if not, apeend it to the list"
    print(group) {[dict]} -- "printing the results"
"""

group = {}
people = [
    {
        "name": "ruan", 
        "sport": "cricket"
    }, 
    {
        "name": "stefan", 
        "sport": "rugby"
    }, 
    {
        "name": "stefan", 
        "sport": "cricket"
    }, 
    {
        "name": "james", 
        "sport": "rugby"
    }, 
    {
        "name": "james", 
        "sport": "golf"
    }, 
    {
        "name": "stefan", 
        "sport": "rugby"
    }, 
    {
        "name": "james", 
        "sport": "hockey"
    }
]

for sportman in people:
    if sportman['name'] in group:
        if sportman['sport'] not in group[sportman['name']]:
            group[sportman['name']].append(sportman['sport'])
        else:
            pass
    else:
        group[sportman['name']] = []
        group[sportman['name']].append(sportman['sport'])

print(group)
</code></pre>

<h2>Running the Script:</h2>

<p>When running the script results in the following:</p>

<pre><code class="bash">$ python sports.py 
{'james': ['rugby', 'golf', 'hockey'], 'ruan': ['cricket'], 'stefan': ['rugby', 'cricket']}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Python Sys Library to Read Data From Stdin]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/18/using-the-python-sys-library-to-read-data-from-stdin/"/>
    <updated>2017-09-18T11:42:01-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/18/using-the-python-sys-library-to-read-data-from-stdin</id>
    <content type="html"><![CDATA[<p>Using Python&rsquo;s <code>sys</code> library to read data from <code>stdin</code>.</p>

<p>In this basic example we will strip our input, delimited by the comma character, add it to a list, and print it out</p>

<h2>Python: Read Data from Standard Input</h2>

<pre><code class="python">import sys
import json

mylist = []

data_input = sys.stdin.read()
destroy_newline = data_input.replace('\n', '')
mylist = destroy_newline.split(', ')

print("Stripping each word and adding it to 'mylist'")
print("Found: {} words in 'mylist'".format(len(mylist)))
for x in mylist:
    print("Word: {}".format(x))
</code></pre>

<p>We will echo three words and pipe it into our python script:</p>

<pre><code class="bash">$ echo "one, two, three" | python basic-stdin.py
Stripping each word and adding it to 'mylist'
Found: 3 words in 'mylist'
Word: one
Word: two
Word: three
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Python for Image Analysis With Amazons Rekognition Service]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/09/11/using-python-for-image-analysis-with-amazons-rekognition-service/"/>
    <updated>2017-09-11T10:20:28-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/09/11/using-python-for-image-analysis-with-amazons-rekognition-service</id>
    <content type="html"><![CDATA[<p>Amazon&rsquo;s Rekognition Service, which falls under their Artificial Intelligence tier, makes it easy to add image analysis to your applications.</p>

<p>Today we will use Rekognition to analyze an image, to determine the percentage of detection that the service analyzes. We will be using the Python SDK to do this.</p>

<h2>Getting a Random Image:</h2>

<p>So, I got this drunk guy on the couch, which I thought we could use to analyze.</p>

<p>Image Used:
- <a href="http://imgur.com/a/CHnSu">http://imgur.com/a/CHnSu</a></p>

<blockquote class="imgur-embed-pub" lang="en" data-id="a/CHnSu"><a href="//imgur.com/CHnSu"></a></blockquote>


<script async src="//s.imgur.com/min/embed.js" charset="utf-8"></script>


<h2>Our Python Code:</h2>

<p>Our code will use boto3 to use rekognition from Amazon Web Services, detects the image, and prints out the values.</p>

<p>Note that I am not specifying any credentials, as my credentials is configured in my local credential provider, where boto will pick it up from.</p>

<pre><code class="python">import boto3

BUCKET = "rekognition-bucket"
KEY = "images/image-02.jpg"

def detect_labels(bucket, key, max_labels=10, min_confidence=90, region="eu-west-1", profile_name="aws"):
    rekognition = boto3.client("rekognition")
    response = rekognition.detect_labels(
        Image={
        "S3Object": {
        "Bucket": BUCKET,
        "Name": KEY,
    }
        },
        MaxLabels=max_labels,
        MinConfidence=min_confidence,
    )
    return response['Labels']


for label in detect_labels(BUCKET, KEY):
    print("{Name} - {Confidence}%".format(**label))
</code></pre>

<h2>Running the App:</h2>

<p>Running our Python App, will result in the following:</p>

<pre><code class="bash">$ python rekog.py 
People - 98.9893875122%
Person - 98.9893951416%
Human - 98.9505844116%
Alcohol - 98.573425293%
Beer - 98.573425293%
Beer Bottle - 98.573425293%
Beverage - 98.573425293%
Bottle - 98.573425293%
Drink - 98.573425293%
Couch - 98.4713821411%
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://aws.amazon.com/rekognition/">https://aws.amazon.com/rekognition/</a></li>
<li><a href="https://gist.github.com/alexcasalboni/0f21a1889f09760f8981b643326730ff">https://gist.github.com/alexcasalboni/0f21a1889f09760f8981b643326730ff</a></li>
</ul>


<center>
        <script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script>
</center>

]]></content>
  </entry>
  
</feed>
