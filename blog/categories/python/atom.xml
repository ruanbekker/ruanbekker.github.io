<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2023-12-22T07:58:04-05:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating a Python Lambda Function With Terraform on AWS]]></title>
    <link href="https://blog.ruanbekker.com/blog/2023/08/03/creating-a-python-lambda-function-with-terraform-on-aws/"/>
    <updated>2023-08-03T11:29:35-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2023/08/03/creating-a-python-lambda-function-with-terraform-on-aws</id>
    <content type="html"><![CDATA[<p>In this tutorial I will explain how to deploy a AWS Lambda Function with Terraform using the Python runtime. It will include the permissions it needs to write its logs to AWS CloudWatch as well as to get information from the AWS API&rsquo;s as a boilerplate for you to expand on it.</p>

<p>We will also use CloudWatch Events to trigger this lambda function every two hours.</p>

<h2>Pre-Requisites</h2>

<p>First you will need to have <a href="https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli">Terraform</a> installed as well as authentication for Terraform to interact with your AWS account, I have written a post about it and you can follow that on &ldquo;<a href="https://blog.ruanbekker.com/blog/2023/07/15/how-to-use-the-aws-terraform-provider/">How to use the AWS Terraform Provider</a>&rdquo;.</p>

<h2>Project Structure</h2>

<p>The following code will be available on my <a href="https://github.com/ruanbekker/terraformfiles/tree/master/modules/aws-lambda-function">github repository</a>, but if you would like to follow along we will create everything step by step.</p>

<p>First create the project directory:</p>

<pre><code class="bash">mkdir -p ~/workspace/aws-lambda-terraform
</code></pre>

<p>Then change into the directory:</p>

<pre><code class="bash">cd ~/workspace/aws-lambda-terraform
</code></pre>

<p>First we want to create our modules directory:</p>

<pre><code class="bash">mkdir -p modules/lambda-function
</code></pre>

<p>Then our environment directory:</p>

<pre><code class="bash">mkdir -p environment/test
</code></pre>

<p>We will also create the directory for our function code:</p>

<pre><code class="bash">mkdir -p modules/lambda-function/functions
</code></pre>

<p>And we can create the file for our python function:</p>

<pre><code class="bash">touch modules/lambda-function/functions/demo.py
</code></pre>

<p>Now we will create our files inside our modules directory:</p>

<pre><code class="bash">touch modules/lambda-function/{main,versions,outputs,variables}.tf
</code></pre>

<p>Then create the files inside our environments directory:</p>

<pre><code class="bash">touch environment/test/{main,provider,output}.tf
</code></pre>

<p>Then in summary our project structure should look more or less like this:</p>

<pre><code class="bash">tree .
.
├── environment
│   └── test
│       ├── main.tf
│       ├── output.tf
│       └── provider.tf
└── modules
    └── lambda-function
        ├── functions
        │   └── demo.py
        ├── main.tf
        ├── outputs.tf
        ├── variables.tf
        └── versions.tf

5 directories, 8 files
</code></pre>

<h2>Terraform Code</h2>

<p>We will first start populating the modules bit, and start with <code>modules/lambda-function/main.tf</code>:</p>

<pre><code>data "aws_iam_policy_document" "lambda" {
  statement {
    actions = ["sts:AssumeRole"]

    principals {
      type        = "Service"
      identifiers = ["lambda.amazonaws.com"]
    }
  }
}

data "aws_iam_policy_document" "lambda_execution" {
  count = var.logs_enabled ? 1 : 0

  statement {
    sid     = "GetCallerIdentity"
    effect  = "Allow"

    actions = [
      "sts:GetCallerIdentity"
    ]

    resources = ["*"]

  }

  statement {
    sid     = "DescribeFunctionsInRegion"
    effect  = "Allow"

    actions = [
      "lambda:GetFunction"
    ]

    resources = ["*"]

    condition {
      test     = "StringEquals"
      variable = "aws:RequestedRegion"
      values = [var.aws_region]
    }
  }

}

resource "aws_iam_role_policy" "lambda_execution_policy" {
  count  = var.logs_enabled ? 1 : 0
  name   = "${var.project_name}-lambda-function-execution-policy"
  role   = aws_iam_role.lambda_role[count.index].id
  policy = data.aws_iam_policy_document.lambda_execution[count.index].json
}

data "archive_file" "lambda_zip" {
  type        = "zip"
  source_file = "${path.module}/functions/demo.py"
  output_path = "${path.module}/lambda-archives/package.zip"
}

resource "aws_iam_role" "lambda_role" {
  count              = var.logs_enabled ? 1 : 0
  name               = "${var.project_name}-lambda-function-role"
  assume_role_policy = data.aws_iam_policy_document.lambda.json
}

resource "aws_lambda_function" "lambda" {
  count            = var.logs_enabled ? 1 : 0
  filename         = data.archive_file.lambda_zip.output_path
  function_name    = "${var.project_name}-lambda-function"
  role             = aws_iam_role.lambda_role[count.index].arn
  handler          = "demo.lambda_handler"
  source_code_hash = filebase64sha256(data.archive_file.lambda_zip.output_path)
  runtime          = "python3.8"
  timeout          = 30

  environment {
    variables = {
      PROJECT_NAME  = var.project_name
      FUNCTION_NAME = "${var.project_name}-lambda-function"
    }
  }

  depends_on = [
    data.archive_file.lambda_zip
  ]

}

resource "aws_cloudwatch_event_rule" "every_two_hours" {
  count               = var.logs_enabled ? 1 : 0
  name                = "${var.project_name}-every-two-hours"
  description         = "Fires every 2 hours"
  schedule_expression = "rate(2 hours)"
}

resource "aws_lambda_permission" "allow_cloudwatch" {
  count         = var.logs_enabled ? 1 : 0
  statement_id  = "AllowExecutionFromCloudWatch"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.lambda[count.index].function_name
  principal     = "events.amazonaws.com"
  source_arn    = aws_cloudwatch_event_rule.every_two_hours[count.index].arn
}

resource "aws_cloudwatch_event_target" "cloudwatch_event" {
  count     = var.logs_enabled ? 1 : 0
  rule      = aws_cloudwatch_event_rule.every_two_hours[count.index].name
  target_id = "${var.project_name}-snapshot-retention-target"
  arn       = aws_lambda_function.lambda[count.index].arn
}

// CloudWatch Logs
resource "aws_cloudwatch_log_group" "cloudwatch_log_group" {
  count     = var.logs_enabled ? 1 : 0
  name      = "/aws/lambda/${aws_lambda_function.lambda[count.index].function_name}"
  retention_in_days = 5
}

resource "aws_iam_role_policy_attachment" "lambda_exec_policy" {
  count      = var.logs_enabled ? 1 : 0
  role       = aws_iam_role.lambda_role[count.index].name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}
</code></pre>

<p>The next one will be the <code>modules/lambda-function/variables.tf</code>:</p>

<pre><code>variable "aws_region" {
  default = "eu-west-1"
  type    = string
}

variable "project_name" {
  default = "example"
  type    = string
}

variable "logs_enabled" {
  default = false
  type    = bool
}
</code></pre>

<p>Then define the modules output in <code>modules/lambda-function/outputs.tf</code>:</p>

<pre><code>output "arn_string" {
  value = aws_lambda_function.lambda[*].arn
}
</code></pre>

<p>Then we define our python function code in <code>modules/lambda-function/functions/demo.py</code>:</p>

<pre><code class="python">import os
import json
import logging
import boto3

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    client = boto3.client('lambda')
    logger.info(event)

    response = client.get_function(
        FunctionName=os.environ['FUNCTION_NAME']
    )

    logger.info(response)

    return {
        'statusCode' : 200,
        'body': response
    }
</code></pre>

<p>For our environment we want to specify the source as our module in <code>environment/test/main.tf</code>:</p>

<pre><code>module "myfunction" {
  source       = "../../modules/lambda-function"
  project_name = "test"
  logs_enabled = true
}
</code></pre>

<p>Our outputs in <code>environment/test/output.tf</code>:</p>

<pre><code>output "arn_string" {
  value = module.myfunction.arn_string
}
</code></pre>

<p>And since we are using AWS, we need to define our providers and the profile that we will use to authenticate against AWS, in my case, im using the default profile in <code>environment/test/provider.tf</code>:</p>

<pre><code>terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "4.23.0"
    }
  }
}

provider "aws" {
  region                   = "eu-west-1"
  profile                  = "default"
  shared_credentials_files = ["~/.aws/credentials"]
}
</code></pre>

<h2>Terraform Plan</h2>

<p>Now that we have defined our terraform code we can run:</p>

<pre><code class="bash">terraform plan
</code></pre>

<p>And it should return something more or less like the following:</p>

<pre><code class="bash">Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.myfunction.aws_cloudwatch_event_rule.every_two_hours[0] will be created
  + resource "aws_cloudwatch_event_rule" "every_two_hours" {
      + arn                 = (known after apply)
      + description         = "Fires every 2 hours"
      + event_bus_name      = "default"
      + id                  = (known after apply)
      + is_enabled          = true
      + name                = "test-every-two-hours"
      + name_prefix         = (known after apply)
      + schedule_expression = "rate(2 hours)"
      + tags_all            = (known after apply)
    }

  # module.myfunction.aws_cloudwatch_event_target.cloudwatch_event[0] will be created
  + resource "aws_cloudwatch_event_target" "cloudwatch_event" {
      + arn            = (known after apply)
      + event_bus_name = "default"
      + id             = (known after apply)
      + rule           = "test-every-two-hours"
      + target_id      = "test-snapshot-retention-target"
    }

  # module.myfunction.aws_cloudwatch_log_group.cloudwatch_log_group[0] will be created
  + resource "aws_cloudwatch_log_group" "cloudwatch_log_group" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + name              = "/aws/lambda/test-lambda-function"
      + retention_in_days = 5
      + tags_all          = (known after apply)
    }

  # module.myfunction.aws_iam_role.lambda_role[0] will be created
  + resource "aws_iam_role" "lambda_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = "sts:GetCallerIdentity"
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = "GetCallerIdentity"
                    },
                  + {
                      + Action    = "lambda:GetFunction"
                      + Condition = {
                          + StringEquals = {
                              + "aws:RequestedRegion" = "eu-west-1"
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = "*"
                      + Sid       = "DescribeFunctionsInRegion"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "test-lambda-function-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)
    }

  # module.myfunction.aws_iam_role_policy.lambda_execution_policy[0] will be created
  + resource "aws_iam_role_policy" "lambda_execution_policy" {
      + id     = (known after apply)
      + name   = "test-lambda-function-execution-policy"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = "sts:GetCallerIdentity"
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = "GetCallerIdentity"
                    },
                  + {
                      + Action    = "lambda:GetFunction"
                      + Condition = {
                          + StringEquals = {
                              + "aws:RequestedRegion" = "eu-west-1"
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = "*"
                      + Sid       = "DescribeFunctionsInRegion"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role   = (known after apply)
    }

  # module.myfunction.aws_iam_role_policy_attachment.lambda_exec_policy[0] will be created
  + resource "aws_iam_role_policy_attachment" "lambda_exec_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      + role       = "test-lambda-function-role"
    }

  # module.myfunction.aws_lambda_function.lambda[0] will be created
  + resource "aws_lambda_function" "lambda" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + filename                       = "../../modules/lambda-function/lambda-archives/package.zip"
      + function_name                  = "test-lambda-function"
      + handler                        = "demo.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.8"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + source_code_hash               = "MI7FD/KHgxRFh7cmPjzxg+w494pmyRGgQIr9Ls8Yups="
      + source_code_size               = (known after apply)
      + tags_all                       = (known after apply)
      + timeout                        = 30
      + version                        = (known after apply)

      + environment {
          + variables = {
              + "FUNCTION_NAME" = "test-lambda-function"
              + "PROJECT_NAME"  = "test"
            }
        }
    }

  # module.myfunction.aws_lambda_permission.allow_cloudwatch[0] will be created
  + resource "aws_lambda_permission" "allow_cloudwatch" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "test-lambda-function"
      + id                  = (known after apply)
      + principal           = "events.amazonaws.com"
      + source_arn          = (known after apply)
      + statement_id        = "AllowExecutionFromCloudWatch"
      + statement_id_prefix = (known after apply)
    }

Plan: 8 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + arn_string = [
      + (known after apply),
    ]
</code></pre>

<h2>Create Resources</h2>

<p>If you are happy with the plan you can go ahead and run:</p>

<pre><code>terraform apply
</code></pre>

<p>Which will create the resources in AWS. Upon creation we should see something like this:</p>

<pre><code>Apply complete! Resources: 0 added, 1 changed, 0 destroyed.

Outputs:

arn_string = [
  "arn:aws:lambda:eu-west-1:000000000000:function:test-lambda-function",
]
</code></pre>

<p>Since we have our aws cli configured with a profile we can also test our lambda function:</p>

<pre><code class="bash">$ aws --profile default lambda invoke --function-name test-lambda-function --cli-binary-format raw-in-base64-out --payload '{"name": "ruan"}' out.log
{
    "StatusCode": 200,
    "ExecutedVersion": "$LATEST"
}
</code></pre>

<p>And the response from the invocation can be seen in the file we defined:</p>

<pre><code class="bash">$ cat out.log
{"statusCode": 200, "body": {"ResponseMetadata": {"RequestId": "5171x", "HTTPStatusCode": 200, "HTTPHeaders": {"date": "Thu, 21 Dec 2023 06:34:13 GMT", "content-type": "application/json", "content-length": "3517", "connection": "keep-alive", "x-amzn-requestid": "5171x"}, "RetryAttempts": 0}, "Configuration": {"FunctionName": "test-lambda-function", "FunctionArn": "arn:aws:lambda:eu-west-1:000000000000:function:test-lambda-function", "Runtime": "python3.8", "Role": "arn:aws:iam::000000000000:role/test-lambda-function-role", "Handler": "demo.lambda_handler", "CodeSize": 401, "Description": "", "Timeout": 30, "MemorySize": 128, "LastModified": "2023-12-21T06:26:46.000+0000", "CodeSha256": "x", "Version": "$LATEST", "Environment": {"Variables": {"FUNCTION_NAME": "test-lambda-function", "PROJECT_NAME": "test"}}, "TracingConfig": {"Mode": "PassThrough"}, "RevisionId": "7faex", "State": "Active", "LastUpdateStatus": "Successful", "PackageType": "Zip", "Architectures": ["x86_64"], "EphemeralStorage": {"Size": 512}, "SnapStart": {"ApplyOn": "None", "OptimizationStatus": "Off"}, "RuntimeVersionConfig": {"RuntimeVersionArn": "arn:aws:lambda:eu-west-1::runtime:x"}}, "Code": {"RepositoryType": "S3", "Location": "https://awslambda-eu-west-1-tasks.s3.eu-west-1.amazonaws.com/snapshots/x/test-lambda-function-x?queryparameters"}}}
</code></pre>

<h2>Updating Lambda Function Code</h2>

<p>If we want to redeploy our function with updated code, we can change the content of <code>functions/demo.py</code> and then run:</p>

<pre><code>terraform apply
</code></pre>

<p>Since our terraform code defined that if the source has of the function code changes, it will trigger a redeploy, and from the computed plan we can see that it will redeploy our function code:</p>

<pre><code class="bash">Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  ~ update in-place

Terraform will perform the following actions:

  # module.myfunction.aws_lambda_function.lambda[0] will be updated in-place
  ~ resource "aws_lambda_function" "lambda" {
        id                             = "test-lambda-function"
      ~ last_modified                  = "2023-12-21T06:26:46.000+0000" -&gt; (known after apply)
      ~ source_code_hash               = "8TLrm4GmTrfAxwfElmIjws1Vf9UDZ6k2w1+VEONJaCQ=" -&gt; "RIQ62KCcjlcHh5lLCOlrkB7GioBpLY1Y5vN4UZGyN+c="
        tags                           = {}
        # (18 unchanged attributes hidden)

        # (3 unchanged blocks hidden)
    }

Plan: 0 to add, 1 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value:
</code></pre>

<p>After entering &ldquo;yes&rdquo; we will update our function code</p>

<h2>Discover AWS Console</h2>

<p>If we logon to the AWS Console and head to Lambda we can inspect our function code:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker/assets/567298/2326b074-fa5b-443c-8715-59451293ccb2" alt="image" /></p>

<p>If we manually want to trigger the function, select &ldquo;Test&rdquo;, then enter the &ldquo;Event name&rdquo; with something like &ldquo;testing&rdquo; then click &ldquo;Test&rdquo;:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker/assets/567298/76bcde33-185f-47ed-a70c-4d967df80e92" alt="image" /></p>

<p>If we follow the CloudWatch log link we can view the logs in CloudWatch:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker/assets/567298/f5483602-3144-48ce-98bf-d50f625cdd92" alt="image" /></p>

<h2>Destroy Infrastructure</h2>

<p>If you followed along and would like to destroy the created infrastructure:</p>

<pre><code class="bash">terraform destroy
</code></pre>

<h2>Resources</h2>

<p>Terraform Examples</p>

<ul>
<li><a href="https://github.com/ruanbekker/terraformfiles/tree/master/modules/aws-lambda-function">https://github.com/ruanbekker/terraformfiles/tree/master/modules/aws-lambda-function</a></li>
</ul>


<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>

<ul>
<li>Linktree: <a href="https://go.ruan.dev/links">https://go.ruan.dev/links</a></li>
<li>Patreon: <a href="https://go.ruan.dev/patreon">https://go.ruan.dev/patreon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install a Specific Python Version on Ubuntu]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/06/23/install-a-specific-python-version-on-ubuntu/"/>
    <updated>2022-06-23T17:53:46-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/06/23/install-a-specific-python-version-on-ubuntu</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/ruanbekker-install-specific-python-version.png" alt="install-specific-python-version" /></p>

<p>In this short tutorial, I will demonstrate how to install a spcific version of Python on Ubuntu Linux.</p>

<p><a href="https://ruan.dev"><img src="https://img.shields.io/badge/website-ruan.dev-red.svg" alt="" /></a> <a href="https://twitter.com/ruanbekker"><img src="https://img.shields.io/badge/twitter-@ruanbekker-00acee.svg" alt="" /></a> <a href="https://github.com/ruanbekker"><img src="https://img.shields.io/badge/github-cheatsheets-orange.svg" alt="" /></a> <a href="https://saythanks.io/to/ruanbekker"><img src="https://img.shields.io/badge/dm-saythanks.io-07B63F.svg" alt="Say Thanks!" /></a>  <a href="https://ko-fi.com/ruanbekker"><img src="https://img.shields.io/badge/-Buy%20Me%20a%20Coffee-ff5f5f?logo=ko-fi&amp;logoColor=white" alt="Ko-fi" /></a></p>

<h2>Dependencies</h2>

<p>Update the apt repositories:</p>

<pre><code class="bash">$ sudo apt update
</code></pre>

<p>Then install the required dependencies:</p>

<pre><code class="bash">$ sudo apt install libssl-dev openssl wget build-essential zlib1g-dev -y
</code></pre>

<h2>Python Versions</h2>

<p>Head over to the <a href="https://www.python.org/downloads/">Python Downloads</a> section and select the version of your choice, in my case I will be using Python 3.8.13, once you have the download link, download it:</p>

<pre><code class="bash">$ wget https://www.python.org/ftp/python/3.8.13/Python-3.8.13.tgz
</code></pre>

<p>Then extract the tarball:</p>

<pre><code class="bash">$ tar -xvf Python-3.8.13.tgz
</code></pre>

<p>Once it completes, change to the directory:</p>

<pre><code class="bash">$ cd Python-3.8.13
</code></pre>

<h2>Installation</h2>

<p>Compile and add <code>--enable-optimizations</code> flag as an argument:</p>

<pre><code class="bash">$ ./configure --enable-optimizations
</code></pre>

<p>Run make and make install:</p>

<pre><code class="bash">$ make 
$ sudo make install 
</code></pre>

<p>Once it completes, you can symlink the python binary so that it&rsquo;s detected by your <code>PATH</code>, if you have no installed python versions or want to use it as the default, you can force overwriting the symlink:</p>

<pre><code class="bash">$ sudo ln -fs /usr/local/bin/python3 /usr/bin/python3
</code></pre>

<p>Then we can test it by running:</p>

<pre><code class="bash">$ python3 --version
Python 3.8.13
</code></pre>

<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Read and Write Json Data With Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/06/14/how-to-read-and-write-json-data-with-python/"/>
    <updated>2022-06-14T19:02:53-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/06/14/how-to-read-and-write-json-data-with-python</id>
    <content type="html"><![CDATA[<p>This is a short tutorial on how to use python to write and read files.</p>

<h2>Example</h2>

<p>To write the following json data:</p>

<pre><code class="json">{"name": "ruan"}
</code></pre>

<p>To a file named <code>/tmp/data.json</code>, we will be using this code:</p>

<pre><code class="python">import json

data = {"name": "ruan"}
with open('data.json', 'w') as f:
    f.write(json.dumps(data))
</code></pre>

<p>When we execute that code, we will find the data inside that file:</p>

<pre><code class="bash">$ cat /tmp/data.json
{"name": "ruan"}
</code></pre>

<p>And if we want to use python to read the data:</p>

<pre><code class="python">import json

with open('data.json', 'r') as f:
    json.loads(f.read())
</code></pre>

<p>When we execute that code, we will see:</p>

<pre><code class="json">{'name': 'ruan'}
</code></pre>

<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Flask Forms With Jinja Templating]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/05/31/python-flask-forms-with-jinja-templating/"/>
    <updated>2022-05-31T02:39:30-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/05/31/python-flask-forms-with-jinja-templating</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/171112630-7fd74a3a-d216-4b4c-85a2-8d9de6428f45.png" alt="ruanbekker-blog" /></p>

<p>In this tutorial, we will demonstrate how to use <a href="https://flask.palletsprojects.com/en/2.1.x/">Python Flask</a> and <code>render_template</code> to use <a href="https://jinja.palletsprojects.com/en/3.1.x/">Jinja Templating</a> with our Form. The example is just a ui that accepts a firstname, lastname and email address and when we submit the form data, it renders on a table.</p>

<h2>Install Flask</h2>

<p>Create a virtual environment and install python flask</p>

<pre><code class="bash">python3 -m pip install virtualenv
python3 -m virtualenv -p python3 .venv
source .venv/bin/activate
</code></pre>

<h2>The Code</h2>

<p>First we will create our application code in <code>app.py</code>:</p>

<pre><code class="python">from flask import Flask, render_template, request

app_version = '1.1.0'

app = Flask(__name__)

@app.route('/')
def root():
    return render_template('form.html')

@app.route('/result',methods = ['POST', 'GET'])
def result():
    if request.method == 'POST':
        result = request.form
        json_result = dict(result)
        print(json_result)
        return render_template("result.html", result=result, app_version=app_version)

if __name__ == '__main__':
    app.run(debug = True)
</code></pre>

<p>As you can see our first route <code>/</code> will render the template in <code>form.html</code>. Our second route <code>/result</code> a couple of things are happening:</p>

<ul>
<li>If we received a POST method, we will capture the form data</li>
<li>We are then casting it to a dictionary data type</li>
<li>Print the results out of our form data (for debugging)</li>
<li>Then we are passing the result object and the app_version variable to our template where it will be parsed.</li>
</ul>


<p>When using <code>render_template</code> all html files resides under the <code>templates</code> directory, so let&rsquo;s first create our <code>base.html</code> file that we will use as a starting point in <code>templates/base.html</code>:</p>

<pre><code>mkdir templates
</code></pre>

<p>Then in your <code>templates/base.html</code>:</p>

<script src="https://gist.github.com/ruanbekker/4d6b3e91b629795b3429a15f5db72972.js"></script>


<p>In our <code>templates/form.html</code> we have our form template, and you can see we are referencing our <code>base.html</code> in our template to include the first bit:</p>

<script src="https://gist.github.com/ruanbekker/f9e0c78d12987e19862486e446378ed7.js"></script>


<p>Then our last template <code>templates/result.html</code> is used when we click on submit, when the form data is displayed in our table:</p>

<script src="https://gist.github.com/ruanbekker/ad40ae4c59a81e8c089e7df2d50c605a.js"></script>


<p>So our directory structure should look like this:</p>

<pre><code class="bash">├── app.py
└── templates
    ├── base.html
    ├── form.html
    └── result.html

1 directory, 4 files
</code></pre>

<p>Then run the server:</p>

<pre><code>python app.py
</code></pre>

<h2>Screenshots</h2>

<p>It should look like the following when you access <a href="http://localhost:5000/">http://localhost:5000/</a></p>

<p><img src="https://user-images.githubusercontent.com/567298/171111587-915935a6-1557-4039-bbd0-d1d95070c2ae.png" alt="python-flask-forms" /></p>

<p>After entering your form data, select &ldquo;Submit&rdquo;, then you should see the following:</p>

<p><img src="https://user-images.githubusercontent.com/567298/171111868-9f8974d2-90cc-45c9-b930-da2d6ec96cbf.png" alt="python-flask-forms" /></p>

<p>So you can see that our request data was parsed through the template and our app version variable as well.</p>

<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>

<p><a href="https://github.com/ruanbekker/cheatsheets" target="_blank"><img alt="ruanbekker-cheatsheets" src="https://user-images.githubusercontent.com/567298/169162832-ef3019de-bc49-4d6c-b2a6-8ac17c457d24.png"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Discord Bot in Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2022/05/05/create-a-discord-bot-in-python/"/>
    <updated>2022-05-05T04:32:12-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2022/05/05/create-a-discord-bot-in-python</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/166907630-cfd0760e-ddff-46b4-9b82-f163fb90f0ee.png" alt="discord-logo" /></p>

<p>In this tutorial we will develop our own <strong><a href="https://discord.com/">Discord</a></strong> bot using <strong>Python</strong>.</p>

<p>The source code for this bot will be stored in my <a href="https://github.com/ruanbekker/discord-minecraft-python-bot">github repository</a></p>

<h2>About the bot</h2>

<p>First we will create a basic discord bot that will greet the message sender, and then we will create a Minecraft Bot, that will enable us to do the following:</p>

<pre><code>:: Bot Usage ::
!mc help          : shows help
!mc serverusage   : shows system load in percentage
!mc serverstatus  : shows if the server is online or offline
!mc whoisonline   : shows who is online at the moment
</code></pre>

<p>Let&rsquo;s get into it.</p>

<h2>Dependencies</h2>

<p>Create a python virtual environment and install the dependent packages:</p>

<pre><code>$ python3 -m virtualenv .venv
$ source .venv/bin/activate
$ pip install discord
$ pip install python-dotenv
</code></pre>

<h2>Create the Discord Application</h2>

<p>We first need to create the application on discord and retrieve a token that our python app will require.</p>

<p>Create a application on discord:</p>

<ul>
<li><a href="https://discordapp.com/developers/applications">https://discordapp.com/developers/applications</a></li>
</ul>


<p>You should see:</p>

<p><img width="1782" alt="image" src="https://user-images.githubusercontent.com/567298/165783157-0747c6f1-af2d-434a-9e3f-1e554f7e69ef.png"></p>

<p>Click &ldquo;New Application&rdquo; and provide it a name:</p>

<p><img width="478" alt="image" src="https://user-images.githubusercontent.com/567298/165783246-68899cd9-c796-41a9-ae9d-88764a83ec0d.png"></p>

<p>Once you create the application you will get a screen to upload a logo, provide a description and most importantly get your application id as well as your public key:</p>

<p><img src="https://user-images.githubusercontent.com/567298/165911250-0fd11a0b-b851-4d65-a898-7049dd73aa60.png" alt="image" /></p>

<p>Then select the Bot section:</p>

<p><img width="1756" alt="image" src="https://user-images.githubusercontent.com/567298/165911940-a85498bd-d572-455b-b38a-50114e6b4144.png"></p>

<p>Then select &ldquo;Add Bot&rdquo;:</p>

<p><img width="717" alt="image" src="https://user-images.githubusercontent.com/567298/165912066-6cd72b29-e0fe-4c4f-b73d-269e48da61d6.png"></p>

<p>Select OAuth2 and select the &ldquo;bot&rdquo; scope:</p>

<p><img width="1751" alt="image" src="https://user-images.githubusercontent.com/567298/165912862-a51a9f29-d876-4ba7-b226-be78214c934d.png"></p>

<p>At the bottom of the page it will provide you with a URL that looks something like:</p>

<pre><code>https://discord.com/api/oauth2/authorize?client_id=xxxxxxxxxxx&amp;permissions=0&amp;scope=bot
</code></pre>

<p>Paste the link in your browser and authorize the bot to your server of choice:</p>

<p><img src="https://user-images.githubusercontent.com/567298/165917380-6e8fbbed-9237-4017-a8bd-c27d58bcdc6d.png" alt="image" /></p>

<p>Then click authorize, and you should see your bot appearing on Discord:</p>

<p><img src="https://user-images.githubusercontent.com/567298/165917760-d8c132e9-18d4-4428-b551-c895d4a5102c.png" alt="image" /></p>

<h2>Developing the Discord Bot</h2>

<p>Now we will be building our python discord bot, head back to the &ldquo;Bot&rdquo; section and select &ldquo;Reset Token&rdquo;, then copy and store the token value to a file <code>.env</code>:</p>

<pre><code>DISCORD_TOKEN=xxxxxxxxx
</code></pre>

<p>So in our current working directory, we should have a file <code>.env</code> with the following content:</p>

<pre><code>$ cat .env
DISCORD_TOKEN=your-unique-token-value-will-be-here
</code></pre>

<p>For this demonstration, I will create a private channel in discord called <code>minecraft-test</code> and add the bot <code>MinecraftBot</code> to the channel (this is only for testing, after testing you can add your bot to your other channels for other people to use):</p>

<p><img src="https://user-images.githubusercontent.com/567298/166233812-2596960b-5142-4ad1-809e-96d884ea5c58.png" alt="image" /></p>

<p>For our first test, a basic bot, where we would like to type <code>hello</code> and the bot should greet us by our username, in our <code>mc_discord_bot.py</code> file we will have:</p>

<pre><code class="python">import discord
import os
from dotenv import load_dotenv

BOT_NAME = "MinecraftBot"

load_dotenv()
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")

bot = discord.Client()

@bot.event
async def on_ready():
    print(f'{bot.user} has logged in.')

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    if message.content == 'hello':
        await message.channel.send(f'Hey {message.author}')
    if message.content == 'goodbye':
        await message.channel.send(f'Goodbye {message.author}')

bot.run(DISCORD_TOKEN)
</code></pre>

<p>Then run the bot:</p>

<pre><code>$ python mc_discord_bot.py
MinecraftBot has logged in.
</code></pre>

<p>And when we type <code>hello</code> and <code>goodbye</code> you can see our bot responds on those values:</p>

<p><img src="https://user-images.githubusercontent.com/567298/166235388-7240a66c-2be4-4343-8f36-398077c4fcf6.png" alt="image" /></p>

<p>Now that we tested our bot, we can clear the <code>mc_discord_bot.py</code> and write our minecraft bot, the requirements of this bot is simple, but we would like the following:</p>

<ul>
<li>use the command <code>!mc</code> to trigger our bot and subcommands for what we want</li>
<li>able to see who is playing minecraft on our server at the moment</li>
<li>able to get the status if the minecraft server is online</li>
<li>able to get the server load percentage (as the bot runs on the minecraft server)</li>
</ul>


<p>This is our complete <code>mc_discord_bot.py</code>:</p>

<pre><code class="python">import discord
from discord.ext import commands
import requests
import os
from dotenv import load_dotenv
import random
import multiprocessing

# Variables
BOT_NAME = "MinecraftBot"
load_dotenv()
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")

minecraft_server_url = "lightmc.fun" # this is just an example, and you should use your own minecraft server

bot_help_message = """
:: Bot Usage ::
`!mc help`                   : shows help
`!mc serverusage`   : shows system load in percentage
`!mc serverstatus` : shows if the server is online or offline
`!mc whoisonline`   : shows who is online at the moment
"""

available_commands = ['help', 'serverusage', 'serverstatus', 'whoisonline']

# Set the bot command prefix
bot = commands.Bot(command_prefix="!")

# Executes when the bot is ready
@bot.event
async def on_ready():
    print(f'{bot.user} succesfully logged in!')

# Executes whenever there is an incoming message event
@bot.event
async def on_message(message):
    print(f'Guild: {message.guild.name}, User: {message.author}, Message: {message.content}')
    if message.author == bot.user:
        return

    if message.content == '!mc':
        await message.channel.send(bot_help_message)

    if 'whosonline' in message.content:
        print(f'{message.author} used {message.content}')
    await bot.process_commands(message)

# Executes when the command mc is used and we trigger specific functions
# when specific arguments are caught in our if statements
@bot.command()
async def mc(ctx, arg):
    if arg == 'help':
        await ctx.send(bot_help_message)

    if arg == 'serverusage':
        cpu_count = multiprocessing.cpu_count()
        one, five, fifteen = os.getloadavg()
        load_percentage = int(five / cpu_count * 100)
        await ctx.send(f'Server load is at {load_percentage}%')

    if arg == 'serverstatus':
        response = requests.get(f'https://api.mcsrvstat.us/2/{minecraft_server_url}').json()
        server_status = response['online']
        if server_status == True:
            server_status = 'online'
        await ctx.send(f'Server is {server_status}')

    if arg == 'whoisonline':
        response = requests.get('https://api.mcsrvstat.us/2/{minecraft_server_url}').json()
        players_status = response['players']
        if players_status['online'] == 0:
            players_online_message = 'No one is online'
        if players_status['online'] == 1:
            players_online_username = players_status['list'][0]
            players_online_message = f'1 player is online: {players_online_username}'
        if players_status['online'] &gt; 1:
            po = players_status['online']
            players_online_usernames = players_status['list']
            joined_usernames = ", ".join(players_online_usernames)
            players_online_message = f'{po} players are online: {joined_usernames}'
        await ctx.send(f'{players_online_message}')

bot.run(DISCORD_TOKEN)
</code></pre>

<p>And now we can start our bot:</p>

<pre><code class="bash">$ python mc_discord_bot.py
</code></pre>

<p>And we can run our help command:</p>

<pre><code class="bash">!mc help
</code></pre>

<p>Which will prompt our help message, and then test out the others:</p>

<p><img src="https://user-images.githubusercontent.com/567298/166237617-c2df1dd1-99bc-4558-8eb8-b1159e850836.png" alt="image" /></p>

<h2>Resources</h2>

<p>Thank you to the following authors, which really helped me doing this:</p>

<ul>
<li><a href="https://www.freecodecamp.org/news/create-a-discord-bot-with-python/">https://www.freecodecamp.org/news/create-a-discord-bot-with-python/</a></li>
<li><a href="https://betterprogramming.pub/coding-a-discord-bot-with-python-64da9d6cade7">https://betterprogramming.pub/coding-a-discord-bot-with-python-64da9d6cade7</a></li>
<li><a href="https://dev.to/codesphere/create-a-discord-bot-in-minutes-with-python-2jgp">https://dev.to/codesphere/create-a-discord-bot-in-minutes-with-python-2jgp</a></li>
</ul>


<h2>Thank You</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong>, read my <strong><a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>

<p>The source code for this bot will be stored in my github repository:
- <a href="https://github.com/ruanbekker/discord-minecraft-python-bot">https://github.com/ruanbekker/discord-minecraft-python-bot</a></p>

<p>I&rsquo;ve started a brand new Discord server, not much happening at the moment, but planning to share and distribute tech content and a place for like minded people to hang out. If that&rsquo;s something you are interested in, feel free to join on <strong><a href="https://discord.gg/bPmc4Stchd">this link</a></strong></p>
]]></content>
  </entry>
  
</feed>
