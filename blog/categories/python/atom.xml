<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-04-03T17:24:26-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Python Boto3 and DreamHosts DreamObjects to Interact With Their Object Storage Offering]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/03/using-python-boto3-and-dreamhosts-dreamobjects-to-interact-with-their-object-storage-offering/"/>
    <updated>2018-04-03T07:19:27-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/03/using-python-boto3-and-dreamhosts-dreamobjects-to-interact-with-their-object-storage-offering</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/uxK5qy.jpg" alt="" /></p>

<p>In this post I will demonstrate how to interact with Dreamhost&rsquo;s Object Storage Service Offering called DreamObjects using Python Boto3 library. Dreamhost offers Object Storage at great pricing, for more information have a look at their <a href="https://goo.gl/N7Xws8">Documentation</a></p>

<h2>Whats on the Menu:</h2>

<p>We will do the following:</p>

<ul>
<li>List Buckets</li>
<li>List Objects</li>
<li>Put Object</li>
<li>Get Object</li>
<li>Upload Object</li>
<li>Download Object</li>
<li>Delete Object(s)</li>
</ul>


<h2>Configuration</h2>

<p>First we need to configure credentials, by providing the access key and access secret key, that is provided by DreamHost:</p>

<pre><code class="bash">$ pip install awscli
$ aws configure --profile dreamhost
</code></pre>

<p>After your credentials is set to your profile, we will need to import boto3 and instantiate the s3 client with our profile name, region name and endpoint url:</p>

<pre><code class="python">&gt;&gt;&gt; import boto3
&gt;&gt;&gt; session = boto3.Session(region_name='us-west-2', profile_name='dreamhost')
&gt;&gt;&gt; s3 = session.client('s3', endpoint_url='https://objects-us-west-1.dream.io')
</code></pre>

<h2>List Buckets:</h2>

<p>To list our Buckets:</p>

<pre><code>&gt;&gt;&gt; response = s3.list_buckets()
&gt;&gt;&gt; print(response)
{u'Owner': {u'DisplayName': 'foobar', u'ID': 'foobar'}, u'Buckets': [{u'CreationDate': datetime.datetime(2017, 4, 15, 21, 51, 3, 921000, tzinfo=tzutc()), u'Name': 'ruanbucket'}], 'ResponseMetadata': {'HTTPStatusCode': 200, 'RetryAttempts': 0, 'HostId': '', 'RequestId': 'tx00000000000000003cd88-005ac361f5-foobar-default', 'HTTPHeaders': {'date': 'Tue, 03 Apr 2018 11:13:57 GMT', 'content-length': '306', 'x-amz-request-id': 'tx00000000000000003cd88-005ac361f5-foobar-default', 'content-type': 'application/xml'}}}

&gt;&gt;&gt; for bucket in response['Buckets']:
...     print(bucket['Name'])
...
ruanbucket
</code></pre>

<h2>List Objects:</h2>

<p>List all the Objects, after the given prefix:</p>

<pre><code class="python">&gt;&gt;&gt; response = s3.list_objects(Bucket='ruanbucket', Prefix='logs/sysadmins.co.za/access/')
&gt;&gt;&gt; for obj in response['Contents']:
...     print obj['Key']
...
logs/sysadmins.co.za/access/access.log-2017-10-10.gz
logs/sysadmins.co.za/access/access.log-2017-10-11.gz
logs/sysadmins.co.za/access/access.log-2017-10-12.gz
</code></pre>

<h2>Put Object:</h2>

<p>Write text as the body to the destination key on the Bucket:</p>

<pre><code class="python">&gt;&gt;&gt; response = s3.put_object(Bucket='ruanbucket', Body='My Name is Ruan\n', Key='uploads/docs/file.txt')
&gt;&gt;&gt; print(response)
{u'Body': &lt;botocore.response.StreamingBody object at 0x13cde10&gt;, u'AcceptRanges': 'bytes', u'ContentType': 'binary/octet-stream', 'ResponseMetadata': {'HTTPStatusCode': 200, 'RetryAttempts': 0, 'HostId': '', 'RequestId': 'tx0000000000000000053f2-005ac3e0db-foobar-default', 'HTTPHeaders': {'content-length': '16', 'accept-ranges': 'bytes', 'last-modified': 'Tue, 03 Apr 2018 20:14:54 GMT', 'etag': '"292edceea84d1234465f725c3921fc2a"', 'x-amz-request-id': 'tx0000000000000000053f2-005ac3e0db-foobar-default', 'date': 'Tue, 03 Apr 2018 20:15:23 GMT', 'content-type': 'binary/octet-stream'}}, u'LastModified': datetime.datetime(2018, 4, 3, 20, 14, 54, tzinfo=tzutc()), u'ContentLength': 16, u'ETag': '"292edceea84d1234465f725c3921fc2a"', u'Metadata': {}}
</code></pre>

<p>List the Object that we have created in the Bucket::</p>

<pre><code class="python">&gt;&gt;&gt; response = s3.list_objects(Bucket='ruanbucket', Prefix='uploads/')
&gt;&gt;&gt; for obj in response['Contents']:
...     print obj['Key']
...
uploads/docs/file.txt
</code></pre>

<h2>Get Object:</h2>

<p>Read the value from the key that was uploaded:</p>

<pre><code class="python">&gt;&gt;&gt; response = s3.get_object(Bucket='ruanbucket', Key='uploads/docs/file.txt')
&gt;&gt;&gt; print(response['Body'].read())
My Name is Ruan
</code></pre>

<h2>Upload Files:</h2>

<p>Upload the file from disk to the Bucket:</p>

<pre><code class="python">&gt;&gt;&gt; with open('myfile.txt', 'rb') as data:
...     s3.upload_fileobj(Fileobj=data, Bucket='ruanbucket', Key='uploads/docs/uploadobj.txt')
...
</code></pre>

<p>Read the contents from the uploaded file:</p>

<pre><code class="python">&gt;&gt;&gt; response = s3.get_object(Bucket='ruanbucket', Key='uploads/docs/uploadobj.txt')
&gt;&gt;&gt; print(response['Body'].read())
This is some text
</code></pre>

<h2>Download File:</h2>

<p>Download the file from the Bucket to the local disk:</p>

<pre><code class="python">&gt;&gt;&gt; with open('downloaded.txt', 'wb') as data:
...     s3.download_fileobj(Bucket='ruanbucket', Key='uploads/docs/uploadobj.txt', Fileobj=data)
...
</code></pre>

<p>Read the file&rsquo;s content from disk:</p>

<pre><code class="python">&gt;&gt;&gt; print(open('downloaded.txt').read())
This is some text
</code></pre>

<h2>Delete Object:</h2>

<p>Delete one object:</p>

<pre><code class="python">&gt;&gt;&gt; response = s3.delete_object(Bucket='ruanbucket', Key='uploads/docs/uploadobj.txt')
&gt;&gt;&gt; print(response)
{'ResponseMetadata': {'HTTPStatusCode': 204, 'RetryAttempts': 0, 'HostId': '', 'RequestId': 'tx00000000000000000be5a-005ac3e61a-foobar-default', 'HTTPHeaders': {'date': 'Tue, 03 Apr 2018 20:37:46 GMT', 'x-amz-request-id': 'tx00000000000000000be5a-005ac3e61a-foobar-default'}}}
</code></pre>

<h2>Delete Objects:</h2>

<p>Delete more than one object with a single API call:</p>

<pre><code class="python">&gt;&gt;&gt; response = s3.delete_objects(Bucket='ruanbucket', Delete={'Objects': [{'Key': 'uploads/docs/file.txt'}, {'Key': 'uploads/docs/file2.txt'}, {'Key': 'uploads/docs/file3.txt'}]})
&gt;&gt;&gt; print(response)
{u'Deleted': [{u'Key': 'uploads/docs/file.txt'}, {u'Key': 'uploads/docs/file2.txt'}, {u'Key': 'uploads/docs/file3.txt'}], 'ResponseMetadata': {'HTTPStatusCode': 200, 'RetryAttempts': 0, 'HostId': '', 'RequestId': 'tx000000000000000011008-005ac3e951-foobar-default', 'HTTPHeaders': {'date': 'Tue, 03 Apr 2018 20:51:29 GMT', 'content-length': '270', 'x-amz-request-id': 'tx000000000000000011008-005ac3e951-217c0ac5-default', 'content-type': 'application/xml'}}}
</code></pre>

<p>For more information on the above, have a look at <a href="http://boto3.readthedocs.io/en/latest/guide/quickstart.html">Boto&rsquo;s Documentation</a> and <a href="https://www.dreamhost.com/">DreamHost&rsquo;s Website</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Send SMS Messages With Python and Twilio via Their API]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/03/02/send-sms-messages-with-python-and-twilio-via-their-api/"/>
    <updated>2018-03-02T17:09:56-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/03/02/send-sms-messages-with-python-and-twilio-via-their-api</id>
    <content type="html"><![CDATA[<p>This post will guide you through the steps on how to send SMS messages with Python and Twilio. We will use <code>talaikis.com</code> API to get a random quote that we will include in the body of the sms.</p>

<h2>Signup for a Trail Account:</h2>

<p>Sign up for a trail account at <a href="https://www.twilio.com">Twilio</a> then create a number, which I will refer to as the <code>sender number</code>, take note of your accountid and token.</p>

<h2>Create the Config:</h2>

<p>Create the config, that will keep the accountid, token, sender number and recipient number:</p>

<pre><code class="python config.py">secrets = {
    'account': 'xxxxxxxx',
    'token': 'xxxxxxx',
    'sender': '+1234567890',
    'receiver': '+0987654321'
}
</code></pre>

<h2>Create the Client:</h2>

<p>We will get a random quote via talaikis.com&rsquo;s API which we will be using for the body of our text message, and then use twilio&rsquo;s API to send the text message:</p>

<pre><code class="python sms_client.py">from config import secrets
from twilio.rest import Client
import requests

twilio_acountid = secrets['account']
twilio_token = secrets['token']
twilio_receiver = secrets['receiver']
twilio_sender = secrets['sender']

quote_response = requests.get('https://talaikis.com/api/quotes/random').json()

client = Client(
    twilio_acountid, 
    twilio_token
)

message = client.messages.create(
    to=twilio_receiver, 
    from_=twilio_sender, 
    body=quote_response['quote']
)
</code></pre>

<h2>Message Preview:</h2>

<p>Then within a couple of seconds your message should look something more or less like this:</p>

<p><img src="https://i.snag.gy/Oqj2cP.jpg" alt="" /></p>

<p>For more info, have a look at their docs:
- <a href="https://www.twilio.com/docs/">https://www.twilio.com/docs/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Getpass in Python to Accept Passwords From Stdin Without Echoing It Back]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/01/22/using-getpass-in-python-to-accept-passwords-from-stdin-without-echoing-it-back/"/>
    <updated>2018-01-22T13:15:09-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/01/22/using-getpass-in-python-to-accept-passwords-from-stdin-without-echoing-it-back</id>
    <content type="html"><![CDATA[<p>Using <code>raw_input</code> in python expects standard input, which echo&rsquo;s it back after enter is executed, below is an example:</p>

<pre><code class="python">&gt;&gt;&gt; word = raw_input("What is the word? \n")
What is the word?
football
&gt;&gt;&gt; print(word)
football
</code></pre>

<p>Using getpass, the standard input gets masked, like you would expect when entering a password, like below:</p>

<pre><code class="python">&gt;&gt;&gt; from getpass import getpass
&gt;&gt;&gt; word = getpass()
Password:
&gt;&gt;&gt; print(word)
rugby
</code></pre>

<p>Changing the default prompt:</p>

<pre><code class="python">&gt;&gt;&gt; word = getpass(prompt='What is your name? ')
What is your name?
&gt;&gt;&gt; print(word)
Ruan
</code></pre>

<p>Creating a Simple Insecure Password Verification App:</p>

<pre><code class="python">from getpass import getpass

password = getpass()
if password.lower() == 'simplepass':
    print 'Password Correct'
else:
    print 'Password Failed'
</code></pre>

<p>Testing it, by first entering a incorrect string, then the correct one:</p>

<pre><code class="bash">$ python auth-check.py
Password:
Password Failed

$ python auth-check.py
Password:
Password Correct
</code></pre>

<p>You definitely don&rsquo;t want to hard code the credentials in your app, but you get the idea.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graphing Pretty Charts With Python Flask and Chartjs]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/12/14/graphing-pretty-charts-with-python-flask-and-chartjs/"/>
    <updated>2017-12-14T02:28:51-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/12/14/graphing-pretty-charts-with-python-flask-and-chartjs</id>
    <content type="html"><![CDATA[<p><img src="https://thumbsplus.tutsplus.com/uploads/users/1251/posts/28278/preview_image/chartjs-tutsplus.jpg" alt="" /></p>

<p>I am a big sucker for Charts and Graphs, and today I found one awesome library called <a href="http://www.chartjs.org/">Chart.js</a>, which we will use with Python Flask Web Framework, to graph our data.</p>

<p>As Bitcoin is doing so well, I decided to graph the monthly Bitcoin price from January up until now.</p>

<h2>Dependencies:</h2>

<p>Install Flask:</p>

<pre><code class="bash">$ pip install flask
</code></pre>

<p>Create the files and directories:</p>

<pre><code class="bash">$ touch app.py
$ mkdir templates
</code></pre>

<p>We need the <a href="http://www.chartjs.org/docs/latest/#installation">Chart.js</a> library, but I will use the CDN version, in my html.</p>

<h2>Creating the Flask App:</h2>

<p>Our data that we want to graph will be hard-coded in our application, but there are many ways to make this more dynamic, in your <code>app.py</code>:</p>

<pre><code class="python">from flask import Flask, Markup, render_template

app = Flask(__name__)

labels = [
    'JAN', 'FEB', 'MAR', 'APR',
    'MAY', 'JUN', 'JUL', 'AUG',
    'SEP', 'OCT', 'NOV', 'DEC'
]

values = [
    967.67, 1190.89, 1079.75, 1349.19,
    2328.91, 2504.28, 2873.83, 4764.87,
    4349.29, 6458.30, 9907, 16297
]

colors = [
    "#F7464A", "#46BFBD", "#FDB45C", "#FEDCBA",
    "#ABCDEF", "#DDDDDD", "#ABCABC", "#4169E1",
    "#C71585", "#FF4500", "#FEDCBA", "#46BFBD"]

@app.route('/bar')
def bar():
    bar_labels=labels
    bar_values=values
    return render_template('bar_chart.html', title='Bitcoin Monthly Price in USD', max=17000, labels=bar_labels, values=bar_values)

@app.route('/line')
def line():
    line_labels=labels
    line_values=values
    return render_template('line_chart.html', title='Bitcoin Monthly Price in USD', max=17000, labels=line_labels, values=line_values)

@app.route('/pie')
def pie():
    pie_labels = labels
    pie_values = values
    return render_template('pie_chart.html', title='Bitcoin Monthly Price in USD', max=17000, set=zip(values, labels, colors))

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
</code></pre>

<h2>Populating the HTML Static Content:</h2>

<p>As we are using <code>render_template</code> we need to populate our html files in our <code>templates/</code> directory. As you can see we have 3 different html files:</p>

<ul>
<li><code>templates/bar_chart.html</code> :</li>
</ul>


<script src="https://gist.github.com/ruanbekker/019a893face148a43b048240a79c4605.js"></script>


<ul>
<li><code>templates/line_chart.html</code>:</li>
</ul>


<script src="https://gist.github.com/ruanbekker/b9fe6d95019a0e382108f7bfe3ed4122.js"></script>


<ul>
<li><code>templates/pie_chart.html</code>:</li>
</ul>


<script src="https://gist.github.com/ruanbekker/540737448cd8d4a1b427028fa713b061.js"></script>


<h2>Running our Application:</h2>

<p>As you can see, we have 3 endpoints, each representing a different chart style:</p>

<ul>
<li>/line</li>
<li>/bar</li>
<li>/pie</li>
</ul>


<p>Let&rsquo;s start our flask application:</p>

<pre><code class="bash">$ python app.py
</code></pre>

<p>When we access our <code>/line</code> endpoint:</p>

<p><img src="https://i.snag.gy/M8FU6S.jpg" alt="" /></p>

<p>When we access our <code>/bar</code> endpoint:</p>

<p><img src="https://i.snag.gy/DTp0AZ.jpg" alt="" /></p>

<p>When we access our <code>/pie</code> endpoint:</p>

<p><img src="https://i.snag.gy/D6nqJN.jpg?nocache=1513261344206" alt="" /></p>

<h2>Resources:</h2>

<ul>
<li><a href="https://pythonspot.com/flask-and-great-looking-charts-using-chart-js/">https://pythonspot.com/flask-and-great-looking-charts-using-chart-js/</a></li>
<li><a href="http://www.chartjs.org/docs/latest/#installation">http://www.chartjs.org/docs/latest/#installation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Chatbot With Chatterbot on Python]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/12/13/create-a-chatbot-with-chatterbot-on-python/"/>
    <updated>2017-12-13T08:53:50-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/12/13/create-a-chatbot-with-chatterbot-on-python</id>
    <content type="html"><![CDATA[<p><img src="https://chatterbot.readthedocs.io/en/stable/_images/banner.png" alt="" /></p>

<p>So I&rsquo;ve been wanting to take a stab at chatbots for some time, and recently discovered <a href="https://github.com/gunthercox/ChatterBot">Chatterbot</a>, so in this tutorial I will go through some examples on setting up a very basic chatbot.</p>

<h2>Getting the Dependencies:</h2>

<p>I will be using Alpine on <a href="docker.com">Docker</a> to run all the the examples, I am using Alpine so that we have a basic container with nothing special pre-installed.</p>

<p>Chatterbot is written in Python, so let&rsquo;s install Python and Chatterbot:</p>

<pre><code class="bash">$ docker run -it --name chatbot alpine:edge sh
$ apk update &amp;&amp; apk add python py2-pip
$ pip install pip --upgrade --user
$ pip install chatterbot
</code></pre>

<h2>Setup the Basic Chatbot:</h2>

<p>Now that our dependencies is installed, enter the Python interpreter where we will instantiate our Chatbot, and get a response from our Chatbot. By default the library will create a sqlite database to build up statements that is passed to and from the bot.</p>

<p>At this point, the bot is still pretty useless:</p>

<pre><code class="bash">$ python
&gt;&gt;&gt; from chatterbot import ChatBot
&gt;&gt;&gt; chatbot = ChatBot('Ben')
&gt;&gt;&gt; chatbot.get_response('What is your name?')
&lt;Statement text:What is your name?&gt;
&gt;&gt;&gt; chatbot.get_response('My name is Ruan, what is your name?')
&lt;Statement text:What is your name?&gt;
</code></pre>

<h2>Training your Bot:</h2>

<p>To enable your bot to have some knowledge, we can train the bot with training data. The training data is populated in a list, which will represent the conversation.</p>

<p>Exit the python interpreter and delete the sqlite database:</p>

<pre><code class="bash">$ rm -rf db.sqlite3
</code></pre>

<p>Now our Bot wont have any history of what we said. Start the interpreter again and add some data to train our bot. In this example, we want our Chatbot to respond when we ask it, what his name is:</p>

<pre><code class="bash">&gt;&gt;&gt; from chatterbot import ChatBot
&gt;&gt;&gt; from chatterbot.trainers import ListTrainer
&gt;&gt;&gt; chatbot = ChatBot('Ben')
&gt;&gt;&gt; chatbot.set_trainer(ListTrainer)
&gt;&gt;&gt; chatbot.train(['What is your name?', 'My name is Ben'])
List Trainer: [####################] 100%
</code></pre>

<p>Now that we have trained our bot, let&rsquo;s try to chat to our bot:</p>

<pre><code class="bash">&gt;&gt;&gt; chatbot.get_response('What is your name?')
&lt;Statement text:My name is Ben&gt;
&gt;&gt;&gt; chatbot.get_response('Who is Ben?')
&lt;Statement text:My name is Ben&gt;
</code></pre>

<p>We can also enable our bot to respond on multiple statements:</p>

<pre><code class="bash">&gt;&gt;&gt; chatbot.train(['Do you know someone with the name of Sarah?', 'Yes, my sisters name is Sarah', 'Is your sisters name, Sarah?', 'Faw shizzle!'])
List Trainer: [####################] 100%

&gt;&gt;&gt; chatbot.get_response('do you know someone with the name of Sarah?')
&lt;Statement text:Yes, my sisters name is Sarah&gt;
&gt;&gt;&gt; chatbot.get_response('is your sisters name Sarah?')
&lt;Statement text:Faw shizzle!&gt;
</code></pre>

<p>With that said, we can define our list of statements in our code:</p>

<pre><code class="python">&gt;&gt;&gt; conversations = [
...     'Are you an athlete?', 'No, are you mad? I am a bot',
...     'Do you like big bang theory?', 'Bazinga!',
...     'What is my name?', 'Ruan',
...     'What color is the sky?', 'Blue, stop asking me stupid questions'
... ]

&gt;&gt;&gt; chatbot.train(conversations)
List Trainer: [####################] 100%
&gt;&gt;&gt; chatbot.get_response('What color is the sky?')
&lt;Statement text:Blue, stop asking me stupid questions&gt;
</code></pre>

<p>So we can see it works as expected, but let&rsquo;s state one of the answers from our statements, to see what happens:</p>

<pre><code class="bash">&gt;&gt;&gt; chatbot.get_response('Bazinga')
&lt;Statement text:What is my name?&gt;
&gt;&gt;&gt; chatbot.get_response('Your name is Ben')
&lt;Statement text:Yes, my name is Ben&gt;
</code></pre>

<p>So we can see it uses natural language processing to learn from the data that we provide our bot. Just to check another question:</p>

<pre><code class="bash">&gt;&gt;&gt; chatbot.get_response('Do you like big bang theory?')
&lt;Statement text:Bazinga!&gt;
</code></pre>

<p>If we have quite a large subset of learning data, we can add all the data in a file, seperated by new lines then we can use python to read the data from disk, and split up the data in the expected format.</p>

<p>The training file will reside in our working directory, let&rsquo;s name it <code>training-data.txt</code> and the content will look like this:</p>

<pre><code class="bash">What is Bitcoin?
Bitcoin is a Crypto Currency
Where is this blog hosted?
Github
</code></pre>

<p>A visual example of how we will process this data will look like this:</p>

<pre><code class="bash">&gt;&gt;&gt; data = open('training-data.txt').read()
&gt;&gt;&gt; data.strip().split('\n')
['What is Bitcoin?', 'Bitcoin is a Crypto Currency', 'Where is this blog hosted?', 'Github']
</code></pre>

<p>And in action, it will look like this:</p>

<pre><code class="bash">&gt;&gt;&gt; data = open('training-data.txt').read()
&gt;&gt;&gt; conversations = data.strip().split('\n')
&gt;&gt;&gt; chatbot.train(conversations)
List Trainer: [####################] 100%

&gt;&gt;&gt; chatbot.get_response('Where is this blog hosted?')
&lt;Statement text:Github&gt;
</code></pre>

<p>There is also pre-populated data that you can use to train your bot, on the <a href="https://chatterbot.readthedocs.io/en/stable/training.html#training-with-corpus-data">documentation</a> is a couple of examples, but for demonstration, we will use the CorpusTrainer:</p>

<pre><code class="bash">&gt;&gt;&gt; from chatterbot.trainers import ChatterBotCorpusTrainer
&gt;&gt;&gt; chatterbot.set_trainer(ChatterBotCorpusTrainer)
&gt;&gt;&gt; chatbot.train("chatterbot.corpus.english")
ai.yml Training: [####################] 100%
botprofile.yml Training: [####################] 100%
computers.yml Training: [####################] 100%
conversations.yml Training: [####################] 100%
emotion.yml Training: [####################] 100%
food.yml Training: [####################] 100%
gossip.yml Training: [####################] 100%
greetings.yml Training: [####################] 100%
history.yml Training: [####################] 100%
humor.yml Training: [####################] 100%
literature.yml Training: [####################] 100%
money.yml Training: [####################] 100%
movies.yml Training: [####################] 100%
politics.yml Training: [####################] 100%
psychology.yml Training: [####################] 100%
science.yml Training: [####################] 100%
sports.yml Training: [####################] 100%
trivia.yml Training: [####################] 100%

&gt;&gt;&gt; chatbot.get_response('Do you like peace?')
&lt;Statement text:not especially. i am not into violence.&gt;
&gt;&gt;&gt; chatbot.get_response('Are you emotional?')
&lt;Statement text:Sort of.&gt;
&gt;&gt;&gt; chatbot.get_response('What language do you speak?')
&lt;Statement text:Python.&gt;
&gt;&gt;&gt; chatbot.get_response('What is your name?')
&lt;Statement text:My name is Ben&gt;
&gt;&gt;&gt; chatbot.get_response('Who is the President of America?')
&lt;Statement text:Richard Nixon&gt; #data seems outdated :D
&gt;&gt;&gt; chatbot.get_response('I like cheese')
&lt;Statement text:What kind of movies do you like?&gt;
</code></pre>

<h2>Using an External Database like MongoDB</h2>

<p>Instead of using sqlite on the same host, we can use a NoSQL Database like MongoDB that resides outside our application.</p>

<p>For the sake of this tutorial, I will use Docker to spin up a MongoDB Container:</p>

<pre><code class="bash">$ docker run -d --name mongodb -p 27017:27017 -p 28017:28017 -e AUTH=no -e OPLOG_SIZE=50 tutum/mongodb
</code></pre>

<p>Below is my code of a terminal application that uses Chatterbot, MongoDB as a Storage Adapter, and we are using a while loop, so that we can chat with our bot, and in our except statement, we can stop our application by using our keyboard to exit:</p>

<pre><code class="python">from chatterbot import ChatBot
from chatterbot.trainers import ChatterBotCorpusTrainer

chatbot = ChatBot(
    "Chatbot Backed by MongoDB",
    storage_adapter="chatterbot.storage.MongoDatabaseAdapter",
    database="chatterbot_db",
    database_uri="mongodb://172.17.0.3:27017/",
    logic_adapters=[
        'chatterbot.logic.BestMatch'
    ],
    trainer='chatterbot.trainers.ChatterBotCorpusTrainer',
    filters=[
        'chatterbot.filters.RepetitiveResponseFilter'
    ],
    input_adapter='chatterbot.input.TerminalAdapter',
    output_adapter='chatterbot.output.TerminalAdapter'
)

chatbot.set_trainer(ChatterBotCorpusTrainer)
chatbot.train("chatterbot.corpus.english")

print('Chatbot Started:')

while True:
    try:
        print(" -&gt; You:")
        botInput = chatbot.get_response(None)
    except (KeyboardInterrupt, EOFError, SystemExit):
        break
</code></pre>

<p>Running the example:</p>

<pre><code class="bash">$ python bot.py
 -&gt; You:
How are you?
I am doing well.
 -&gt; You:
Tell me a joke
A 3-legged dog walks into an old west saloon, slides up to the bar and announces "I'm looking for the man who shot my paw."
</code></pre>

<p>And from mongodb, we can see some data:</p>

<pre><code class="bash">$ mongo
&gt; show dbs
admin          0.078GB
chatterbot_db  0.078GB
local          0.078GB

&gt; use chatterbot_db
switched to db chatterbot_db

&gt; show collections;
conversations
statements
system.indexes

&gt; db.conversations.find().count()
4
&gt; db.statements.find().count()
1240
&gt; db.system.indexes.find().count()
3
</code></pre>

<p>That was a basic tutorial on Chatterbot, next I will be looking into mining data from Twitter&rsquo;s API and see how clever our bot can become.</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://chatterbot.readthedocs.io/en/stable/quickstart.html#quick-start-guide">Chatterbot Documentation</a></li>
<li><a href="https://github.com/gunthercox/ChatterBot/tree/master/examples">Chatterbot Examples</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
