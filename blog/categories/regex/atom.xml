<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Regex | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/regex/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2020-10-23T13:40:34+00:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Validate Strings in Python With Regex]]></title>
    <link href="https://blog.ruanbekker.com/blog/2019/02/27/how-to-validate-strings-in-python-with-regex/"/>
    <updated>2019-02-27T06:47:53-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2019/02/27/how-to-validate-strings-in-python-with-regex</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s say you need to validate strings in Python. Making decisions if a string is valid or not, is what we will be looking at today.</p>

<script src="//ap.lijit.com/www/delivery/fpi.js?z=601358&width=300&height=250"></script>


<p></p>

<h2>The Scenario</h2>

<p>We have a string that will look like this: <code>my-random-abc-string-2947104284738593726152637836291</code>. The <code>abc</code> section will always be 3 random string characters and the integers, will always be 32 integer characters, the rest will always stay the same.</p>

<p>Using the <code>re</code> library, we will create our regex expression and match them up with a input string, then if they are the same, we will pass the validation check, and make a decision from there.</p>

<h2>The Script</h2>

<p>Our random string generator:</p>

<pre><code class="python">&gt;&gt;&gt; import uuid
&gt;&gt;&gt; import random
&gt;&gt;&gt; letters = 'abcdefghijklmnopqrstuvwxyz'
&gt;&gt;&gt; def generate_string():
...     random_letters = ''.join(random.choice(letters) for x in range(3))
...     response = 'my-random-' + random_letters + '-string_' + uuid.uuid4().hex
...     return response
</code></pre>

<p>Our validation check:</p>

<pre><code class="python">&gt;&gt;&gt; import re
&gt;&gt;&gt; def validation_check(input_string):
...     regex = re.compile('my-random-[a-z]{3}-string_[0-9a-z]{32}\Z', re.I)
...     match = regex.match(str(input_string))
...     return bool(match)
</code></pre>

<p>Doing the validation check against our data:</p>

<pre><code class="python">&gt;&gt;&gt; mystring = generate_string()
&gt;&gt;&gt; mystring
'my-random-ngt-string_6346145281738193742120539836241'

&gt;&gt;&gt; validate = validation_check(mystring)
&gt;&gt;&gt; if validate == True:
...     print('The string {} is valid'.format(mystring))
... else:
...     print('The string {} is not valid'.format(mystring))

the string my-random-ngt-string_6346145281738193742120539836241 is valid
</code></pre>

<p>The function checks for a strict 32 characters in the random hex number, if you had to randomize the length, you can always use this regex:</p>

<pre><code class="python">regex = re.compile('my-random-[a-z]{3}-string__[0-9]+', re.I)
</code></pre>
]]></content>
  </entry>
  
</feed>
