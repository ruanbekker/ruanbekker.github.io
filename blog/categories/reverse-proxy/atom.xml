<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Reverse-proxy | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/reverse-proxy/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2022-06-30T01:13:04-04:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup a Reverse Proxy on Nginx for Your Backend Applications]]></title>
    <link href="https://blog.ruanbekker.com/blog/2019/03/09/setup-a-reverse-proxy-on-nginx-for-your-backend-applications/"/>
    <updated>2019-03-09T17:50:32-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2019/03/09/setup-a-reverse-proxy-on-nginx-for-your-backend-applications</id>
    <content type="html"><![CDATA[<p><img src="https://www.nginx.com/wp-content/uploads/2018/08/NGINX-logo-rgb-large.png" alt="" /></p>

<p>Nginx is a great product! And today we will use nginx to setup a http reverse proxy to access our backend applications.</p>

<script id="mNCC" language="javascript">
    medianet_width = "728";
    medianet_height = "90";
    medianet_crid = "218284798";
    medianet_versionId = "3111299";
  </script>


<script src="//contextual.media.net/nmedianet.js?cid=8CUD78FSV"></script>


<h2>Our Setup</h2>

<p>We will have a flask backend application listening on <code>127.0.0.1:5000</code> and our nginx reverse proxy will listen on <code>0.0.0.0:80</code> which will proxy requests through to our flask upstream.</p>

<h2>Our Backend Application</h2>

<p>Our Flask application:</p>

<pre><code>from flask import Flask
app = Flask(__name__)

@app.route('/')
def index():
    return 'Hello'

if __name__ == '__main__':
    app.run(host='127.0.0.1', port=5000)
</code></pre>

<h2>Nginx</h2>

<p>Install nginx:</p>

<pre><code class="bash">$ apt install nginx -y
</code></pre>

<p>Our main nginx configuration:</p>

<pre><code># /etc/nginx/nginx.conf
user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 768;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_names_hash_bucket_size 64;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    gzip on;
    gzip_disable "msie6";

    include /etc/nginx/conf.d/backend-*.conf;
}
</code></pre>

<p>Our application&rsquo;s configuration:</p>

<pre><code># /etc/nginx/conf.d/backend-flask.conf
upstream backend_flask {
    server 127.0.0.1:5000;
}

server {
    listen 80 default_server;
    listen [::]:80;
    server_name _;

    location / {
        include proxy_params;
        proxy_http_version 1.1;
        proxy_read_timeout 90;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_pass http://backend_flask;
        proxy_buffering off;
    }
}
</code></pre>

<p>Restart nginx and enable nginx on boot:</p>

<pre><code class="bash">$ systemctl restart nginx
$ systemctl enable nginx
</code></pre>

<h2>Test your Application:</h2>

<p>Access your server on port 80 and you should receive the response from your flask application:</p>

<pre><code class="bash">$ curl http://nginx-public-ip:80/
Hello
</code></pre>

<h2>Resoures</h2>

<ul>
<li><a href="https://itnext.io/step-over-nginx-buffer-issue-94a498bedb82">https://itnext.io/step-over-nginx-buffer-issue-94a498bedb82</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
