<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-08-09T21:08:23-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Programming Tutorial Series]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/08/09/ruby-programming-tutorial-series/"/>
    <updated>2018-08-09T20:59:34-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/08/09/ruby-programming-tutorial-series</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbeker.com/assets/images/ruby-tutorial-logo.png" alt="" /></p>

<p>Welcome! This will be a multi post ruby tutorial programming series, as I am on a mission learning ruby.</p>

<h2>Outline of the Series:</h2>

<p>This may change, but the path will look like this:</p>

<ul>
<li>Setup, The Terminal and Variables</li>
<li>Arrays</li>
<li>Data Types</li>
<li>Objects, Classes and Methods</li>
</ul>


<p>All posts associated to this tutorial series will be tagged as <a href="http://blog.ruanbekker.com/blog/tags/ruby-tutorial-series">#ruby-tutorial-series</a></p>

<p>Resources:</p>

<ul>
<li><a href="http://ruby-for-beginners.rubymonstas.org/index.html">RFB</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World Ruby on Rails App Tutorial Using Mac]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/07/20/hello-world-ruby-on-rails-app-tutorial-using-mac/"/>
    <updated>2018-07-20T03:30:20-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/07/20/hello-world-ruby-on-rails-app-tutorial-using-mac</id>
    <content type="html"><![CDATA[<p>In this tutorial, we will setup a basic ruby on rails web app, that consists of a <code>/hello_world</code> and a <code>/status</code> controller. The hello_world controller will return <code>Hello, World</code> and our <code>/status</code> controller will return a <code>HTTP 204</code> no content response code.</p>

<h2>Setup Ruby on Rails</h2>

<p>Setup Ruby on Rails on your Mac:</p>

<pre><code>$ brew install rbenv ruby-build

$ echo 'if which rbenv &gt; /dev/null; then eval "$(rbenv init -)"; fi' &gt;&gt; ~/.bash_profile
$ source ~/.bash_profile

$ rbenv install 2.5.0
$ rbenv global 2.5.0
$ ruby -v

$ gem install rails -v 5.1.4
$ benv rehash
</code></pre>

<h2>Creating the App</h2>

<p>Create your ruby on rails application:</p>

<pre><code>$ rails new fist-app
$ cd first-app
$ rails server
</code></pre>

<h2>Route Config</h2>

<p>Our routes config:</p>

<pre><code>$ cat config/routes.rb
Rails.application.routes.draw do
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
  get 'hello_world', to: 'hello_world#call'
  get 'status', to: 'status#call'
end
</code></pre>

<h2>Controllers</h2>

<p>Configure the hello_world controller:</p>

<pre><code>$ cat app/controllers/hello_world_controller.rb

class HelloWorldController &lt; ApplicationController
  def call
    render body: "Hello, World"
  end
end
</code></pre>

<p>Configure the status controller:</p>

<pre><code>$ cat app/controllers/status_controller.rb

class StatusController &lt; ApplicationController
  def call
    [204, {}, ['']]
  end
end
</code></pre>

<h2>Testing</h2>

<p>For our hello world controller:</p>

<pre><code>$ curl -i http://localhost:3000/hello_world
HTTP/1.1 200 OK
X-Frame-Options: SAMEORIGIN
X-XSS-Protection: 1; mode=block
X-Content-Type-Options: nosniff
Content-Type: text/plain; charset=utf-8
ETag: W/"565339bc4d33d72817b583024112eb7f"
Cache-Control: max-age=0, private, must-revalidate
X-Request-Id: 62441a6d-faa3-42d5-a5a2-bcf7eff5e917
X-Runtime: 0.001940
Transfer-Encoding: chunked
Hello, World
</code></pre>

<p>For our status controller:</p>

<pre><code class="bash">$ curl -i http://localhost:3000/status
HTTP/1.1 204 No Content
X-Frame-Options: SAMEORIGIN
X-XSS-Protection: 1; mode=block
X-Content-Type-Options: nosniff
Cache-Control: no-cache
X-Request-Id: bec91213-ff82-4fc6-8698-3ee7622b1f51
X-Runtime: 0.075504
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://gorails.com/setup/osx/10.12-sierra">https://gorails.com/setup/osx/10.12-sierra</a></li>
<li><a href="http://guides.rubyonrails.org/routing.html">http://guides.rubyonrails.org/routing.html</a></li>
<li><a href="https://www.railstutorial.org/book/beginning#sec-installing_rails">https://www.railstutorial.org/book/beginning#sec-installing_rails</a></li>
<li><a href="https://www.railstutorial.org/book/toy_app">https://www.railstutorial.org/book/toy_app</a></li>
<li><a href="http://codingnudge.com/2017/03/17/tutorial-how-to-run-ruby-on-rails-on-docker-part-1/">http://codingnudge.com/2017/03/17/tutorial-how-to-run-ruby-on-rails-on-docker-part-1/</a></li>
<li><a href="https://medium.com/how-i-learned-ruby-rails/how-i-trained-to-learn-rails-e08c94e2a51e">https://medium.com/how-i-learned-ruby-rails/how-i-trained-to-learn-rails-e08c94e2a51e</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World Programs in Different Languages]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/06/09/hello-world-programs-in-different-languages/"/>
    <updated>2018-06-09T21:11:00-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/06/09/hello-world-programs-in-different-languages</id>
    <content type="html"><![CDATA[<p>This post will demonstrate running hello world programs in different languages and also providing return time statistics</p>

<h2>C++</h2>

<p>Code</p>

<pre><code class="c">#include &lt;iostream&gt;
using namespace std;

int main()
{
    std::cout &lt;&lt; "Hello, World!" &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<p>Compile:</p>

<pre><code class="bash">$ c++ hello_cpp.cpp -o hello_cpp
</code></pre>

<p>Run:</p>

<pre><code class="bash">$ time ./hello_cpp
Hello, World!

real    0m0.005s
user    0m0.001s
sys   0m0.001s
</code></pre>

<h2>Golang:</h2>

<p>Code</p>

<pre><code class="go">package main

import "fmt"

func main() {
  fmt.Println("Hello, World!")
}
</code></pre>

<p>Compile:</p>

<pre><code class="bash">$ go build hello_golang.go
</code></pre>

<p>Run:</p>

<pre><code class="bash">time ./hello_golang
Hello, World!

real    0m0.006s
user    0m0.001s
sys   0m0.003s
</code></pre>

<h2>Python</h2>

<p>Code:</p>

<pre><code class="python">#!/usr/bin/env python
print("Hello, World!")
</code></pre>

<p>Make it executable:</p>

<pre><code class="bash">$ chmod +x ./hello_python.py
</code></pre>

<p>Run:</p>

<pre><code class="bash">$ time ./hello_python.py
Hello, World!

real    0m0.033s
user    0m0.015s
sys   0m0.010s
</code></pre>

<h2>Ruby</h2>

<p>Code:</p>

<pre><code class="ruby">#!/usr/bin/env ruby
puts "Hello, World!"
</code></pre>

<p>Make it executable:</p>

<pre><code class="bash">$ chmod +x ./hello_ruby.rb
</code></pre>

<p>Run:</p>

<pre><code class="bash">$ time ./hello_ruby.rb
Hello, World!

real    0m0.136s
user    0m0.080s
sys   0m0.024s
</code></pre>

<h2>Java</h2>

<p>Code:</p>

<pre><code class="java">public class hello_java {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
</code></pre>

<p>Compile:</p>

<pre><code class="bash">$ javac hello_java.java
</code></pre>

<p>Run:</p>

<pre><code class="bash">$ time java hello_java
Hello, World!

real    0m0.114s
user    0m0.086s
sys   0m0.023s
</code></pre>

<h2>Resource:</h2>

<ul>
<li><a href="https://www.lifewire.com/command-return-time-command-4054237">https://www.lifewire.com/command-return-time-command-4054237</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
