<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2020-05-22T00:01:53+02:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Tutorial Series Setup and Variables]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/08/10/ruby-tutorial-series-setup-and-variables/"/>
    <updated>2018-08-10T03:11:52+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/08/10/ruby-tutorial-series-setup-and-variables</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/ruby-variables-logo.png" alt="" /></p>

<p>In this post we will setup our Ruby environment, then start printing out values to the console and will also be touching on variables.</p>

<h2>Ruby Environment:</h2>

<p>I have a Docker image built on Alpine, the resources can be found via:</p>

<ul>
<li><a href="https://hub.docker.com/r/rbekker87/alpine-ruby">DockerHub</a></li>
<li><a href="https://github.com/ruanbekker/dockerhub-sources/blob/master/alpine-ruby/Dockerfile">GitHub</a></li>
</ul>


<p>To setup a Ruby environment on your workstation, I would recommend using <a href="https://github.com/rbenv/rbenv">https://github.com/rbenv/rbenv</a>.</p>

<h2>Drop into a Ruby Shell:</h2>

<p>I will be using Docker to drop into a ruby container:</p>

<pre><code class="bash">$ docker run -it rbekker87/alpine-ruby:2.5 sh

       ______       _____
______ ___  /__________(_)___________
_  __ `/_  /___  __ \_  /__  __ \  _ \
/ /_/ /_  / __  /_/ /  / _  / / /  __/
\__,_/ /_/  _  .___//_/  /_/ /_/\___/
            /_/

Alpine Build:
Container Hostname: 8a4dfc590dd0
Checkout my Docker Blogs:
- https://sysadmins.co.za/tag/docker
- http://blog.ruanbekker.com/blog/categories/docker

$ irb
irb(main):001:0&gt;
</code></pre>

<p>If you have the <code>irb</code> output, you should be good to go.</p>

<h2>Strings and Integers</h2>

<p>You will find when you enter a string, which is represented as one or more characters enclosed within quotation marks:</p>

<pre><code class="bash">irb(main):001:0&gt; "hello"
=&gt; "hello"
</code></pre>

<p>The integers will be without the quotation marks, when we introduce anything within quotation marks, ruby will read it as a string. So for a integer, lets provide ruby with a number and the number will be returned to the shell:</p>

<pre><code class="bash">irb(main):002:0&gt; 1
=&gt; 1
</code></pre>

<p>Using mathematical symbols like the <code>+</code> will either sum the two values when they are integers, or concatenate when they are strings.</p>

<p>Let&rsquo;s start with strings: we will add the string <code>hello</code> and <code>world</code></p>

<pre><code class="bash">irb(main):003:0&gt; "hello" + "world"
=&gt; "helloworld"
</code></pre>

<p>Now let&rsquo;s add two numbers together, <code>10</code> and <code>20</code>:</p>

<pre><code class="bash">irb(main):004:0&gt; 10 + 20
=&gt; 30
</code></pre>

<p>As you can see, it did a calculation on the two numbers as they were treated as integeres. But what happens when we add them as strings?</p>

<pre><code class="bash">irb(main):005:0&gt; "10" + "20"
=&gt; "1020"
</code></pre>

<p>Adding them as strings, will concatenate them.</p>

<h2>String Methods</h2>

<p>Ruby&rsquo;s strings has many built in methods, which makes it convenient manipulating data, let me go through a couple that I am working with:</p>

<p>Getting the length of the string:</p>

<pre><code class="bash">irb(main):006:0&gt; "hello".length
5
</code></pre>

<p>Is the string empty?</p>

<pre><code class="bash">irb(main):007:0&gt; "hello".empty?
=&gt; false
</code></pre>

<p>Getting the index position of 0 of the string:</p>

<pre><code class="bash">irb(main):008:0&gt; "hello"[0]
=&gt; "h"
</code></pre>

<p>Getting a array of your string:</p>

<pre><code class="bash">irb(main):009:0&gt; "hello".chars
=&gt; ["h", "e", "l", "l", "o"]
</code></pre>

<p>Returning your string in Uppercase:</p>

<pre><code class="bash">irb(main):010:0&gt; "hello".upcase
=&gt; "HELLO"
</code></pre>

<p>Returning your string in Lowercase:</p>

<pre><code class="bash">irb(main):011:0&gt; "HELLO".downcase
=&gt; "hello"
</code></pre>

<p>Capitalize your String:</p>

<pre><code class="bash">irb(main):012:0&gt; "hello".capitalize
=&gt; "Hello"
</code></pre>

<p>Swap the case of your string:</p>

<pre><code class="bash">irb(main):013:0&gt; "Hello".swapcase
=&gt; "hELLO"
</code></pre>

<h2>Variables</h2>

<p>Let&rsquo;s define variables to the static content that we used above.</p>

<p>Let&rsquo;s define our key: <code>word</code> to the value: of <code>hello, world</code>:</p>

<pre><code class="bash">irb(main):019:0&gt; word = "hello, world"
=&gt; "hello, world"
</code></pre>

<p>Accessing the variables value:</p>

<pre><code class="bash">irb(main):020:0&gt; word
=&gt; "hello, world"
</code></pre>

<p>We can also use <code>puts</code>, which stands for <code>put string</code>, which prints out the value to the terminal:</p>

<pre><code class="bash">irb(main):021:0&gt; puts word
hello, world
</code></pre>

<p>We can also, format our variable so that we can add something like a exclamation mark:</p>

<pre><code class="bash">irb(main):022:0&gt; puts "#{word}!"
hello, world!
</code></pre>

<p>Let&rsquo;s do the same with integers:</p>

<pre><code class="bash">irb(main):023:0&gt; num_1 = 10
=&gt; 10
irb(main):024:0&gt; num_2 = 20
=&gt; 20
</code></pre>

<p>Now when we calculate the numbers using variables, you will find the expected result of 30:</p>

<pre><code class="bash">irb(main):025:0&gt; num_1 + num_2
=&gt; 30
</code></pre>

<p>or:</p>

<pre><code class="bash">irb(main):026:0&gt; num_1 + num_2
puts "#{num_1 + num_2}"
30
</code></pre>

<h2>Variables are Mutable:</h2>

<p>Remember that variables are mutable, so they can be changed after they have been set, lets take age for example:</p>

<pre><code class="bash">irb(main):027:0&gt; age = 20
irb(main):028:0&gt; puts age
20

irb(main):029:0&gt; age = 22
irb(main):030:0&gt; puts age
22
</code></pre>

<h2>Strings and Integers:</h2>

<p>What happens when we add strings and integers together in one line:</p>

<pre><code class="bash">irb(main):038:0&gt; name = "ruan"
=&gt; "ruan"
irb(main):039:0&gt; id = 120398
=&gt; 120398
irb(main):040:0&gt; puts "#{name + id}"
Traceback (most recent call last):
        3: from /usr/bin/irb:11:in `&lt;main&gt;'
        2: from (irb):40
        1: from (irb):40:in `+'
TypeError (no implicit conversion of Integer into String)
</code></pre>

<p>That is because we cant concatenate strings with integers, so we will need to convert the integer to a string, we do that with the <code>to_s</code> method:</p>

<pre><code class="bash">irb(main):041:0&gt; puts "#{name + id.to_s}"
ruan120398
</code></pre>

<p>And if we want to define that to a variable:</p>

<pre><code class="bash">irb(main):042:0&gt; userid = "#{name + id.to_s}"
irb(main):043:0&gt; userid
=&gt; "ruan120398"
</code></pre>

<h2>Working with rb files:</h2>

<p>We can add this together in a file with a <code>.rb</code> extension and call the file as an argument with ruby, as a script:</p>

<p>Create the file, in my case <code>test.rb</code></p>

<pre><code class="bash">$ vim test.rb
</code></pre>

<pre><code class="ruby">user = "ruan"
idnumber = 23049823
userid = "#{user + idnumber}"

puts "#{userid}"
</code></pre>

<p>Running the ruby file:</p>

<pre><code class="bash">$ ruby test.rb
ruan23049823
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-work-with-string-methods-in-ruby">1</a></li>
<li><a href="https://learnrubythehardway.org/book/ex3.html">2</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Programming Tutorial Series]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/08/10/ruby-programming-tutorial-series/"/>
    <updated>2018-08-10T02:59:34+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/08/10/ruby-programming-tutorial-series</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/ruby-tutorial-logo.png" alt="" /></p>

<p>Welcome! This will be a multi post ruby tutorial programming series, as I am on a mission learning ruby.</p>

<h2>Outline of the Series:</h2>

<p>This may change, but the path will look like this:</p>

<ul>
<li>Setup, The Terminal and Variables</li>
<li>Arrays</li>
<li>Data Types</li>
<li>Objects, Classes and Methods</li>
</ul>


<p>All posts associated to this tutorial series will be tagged as <a href="http://blog.ruanbekker.com/blog/tags/ruby-tutorial-series">#ruby-tutorial-series</a></p>

<p>Resources:</p>

<ul>
<li><a href="http://ruby-for-beginners.rubymonstas.org/index.html">RFB</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World Ruby on Rails App Tutorial Using Mac]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/07/20/hello-world-ruby-on-rails-app-tutorial-using-mac/"/>
    <updated>2018-07-20T09:30:20+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/07/20/hello-world-ruby-on-rails-app-tutorial-using-mac</id>
    <content type="html"><![CDATA[<p>In this tutorial, we will setup a basic ruby on rails web app, that consists of a <code>/hello_world</code> and a <code>/status</code> controller. The hello_world controller will return <code>Hello, World</code> and our <code>/status</code> controller will return a <code>HTTP 204</code> no content response code.</p>

<h2>Setup Ruby on Rails</h2>

<p>Setup Ruby on Rails on your Mac:</p>

<pre><code>$ brew install rbenv ruby-build

$ echo 'if which rbenv &gt; /dev/null; then eval "$(rbenv init -)"; fi' &gt;&gt; ~/.bash_profile
$ source ~/.bash_profile

$ rbenv install 2.5.0
$ rbenv global 2.5.0
$ ruby -v

$ gem install rails -v 5.1.4
$ benv rehash
</code></pre>

<h2>Creating the App</h2>

<p>Create your ruby on rails application:</p>

<pre><code>$ rails new fist-app
$ cd first-app
$ rails server
</code></pre>

<h2>Route Config</h2>

<p>Our routes config:</p>

<pre><code>$ cat config/routes.rb
Rails.application.routes.draw do
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
  get 'hello_world', to: 'hello_world#call'
  get 'status', to: 'status#call'
end
</code></pre>

<h2>Controllers</h2>

<p>Configure the hello_world controller:</p>

<pre><code>$ cat app/controllers/hello_world_controller.rb

class HelloWorldController &lt; ApplicationController
  def call
    render body: "Hello, World"
  end
end
</code></pre>

<p>Configure the status controller:</p>

<pre><code>$ cat app/controllers/status_controller.rb

class StatusController &lt; ApplicationController
  def call
    [204, {}, ['']]
  end
end
</code></pre>

<h2>Testing</h2>

<p>For our hello world controller:</p>

<pre><code>$ curl -i http://localhost:3000/hello_world
HTTP/1.1 200 OK
X-Frame-Options: SAMEORIGIN
X-XSS-Protection: 1; mode=block
X-Content-Type-Options: nosniff
Content-Type: text/plain; charset=utf-8
ETag: W/"565339bc4d33d72817b583024112eb7f"
Cache-Control: max-age=0, private, must-revalidate
X-Request-Id: 62441a6d-faa3-42d5-a5a2-bcf7eff5e917
X-Runtime: 0.001940
Transfer-Encoding: chunked
Hello, World
</code></pre>

<p>For our status controller:</p>

<pre><code class="bash">$ curl -i http://localhost:3000/status
HTTP/1.1 204 No Content
X-Frame-Options: SAMEORIGIN
X-XSS-Protection: 1; mode=block
X-Content-Type-Options: nosniff
Cache-Control: no-cache
X-Request-Id: bec91213-ff82-4fc6-8698-3ee7622b1f51
X-Runtime: 0.075504
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://gorails.com/setup/osx/10.12-sierra">https://gorails.com/setup/osx/10.12-sierra</a></li>
<li><a href="http://guides.rubyonrails.org/routing.html">http://guides.rubyonrails.org/routing.html</a></li>
<li><a href="https://www.railstutorial.org/book/beginning#sec-installing_rails">https://www.railstutorial.org/book/beginning#sec-installing_rails</a></li>
<li><a href="https://www.railstutorial.org/book/toy_app">https://www.railstutorial.org/book/toy_app</a></li>
<li><a href="http://codingnudge.com/2017/03/17/tutorial-how-to-run-ruby-on-rails-on-docker-part-1/">http://codingnudge.com/2017/03/17/tutorial-how-to-run-ruby-on-rails-on-docker-part-1/</a></li>
<li><a href="https://medium.com/how-i-learned-ruby-rails/how-i-trained-to-learn-rails-e08c94e2a51e">https://medium.com/how-i-learned-ruby-rails/how-i-trained-to-learn-rails-e08c94e2a51e</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World Programs in Different Languages]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/06/10/hello-world-programs-in-different-languages/"/>
    <updated>2018-06-10T03:11:00+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/06/10/hello-world-programs-in-different-languages</id>
    <content type="html"><![CDATA[<p>This post will demonstrate running hello world programs in different languages and also providing return time statistics</p>

<h2>C++</h2>

<p>Code</p>

<pre><code class="c">#include &lt;iostream&gt;
using namespace std;

int main()
{
    std::cout &lt;&lt; "Hello, World!" &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<p>Compile:</p>

<pre><code class="bash">$ c++ hello_cpp.cpp -o hello_cpp
</code></pre>

<p>Run:</p>

<pre><code class="bash">$ time ./hello_cpp
Hello, World!

real    0m0.005s
user    0m0.001s
sys   0m0.001s
</code></pre>

<h2>Golang:</h2>

<p>Code</p>

<pre><code class="go">package main

import "fmt"

func main() {
  fmt.Println("Hello, World!")
}
</code></pre>

<p>Compile:</p>

<pre><code class="bash">$ go build hello_golang.go
</code></pre>

<p>Run:</p>

<pre><code class="bash">time ./hello_golang
Hello, World!

real    0m0.006s
user    0m0.001s
sys   0m0.003s
</code></pre>

<h2>Python</h2>

<p>Code:</p>

<pre><code class="python">#!/usr/bin/env python
print("Hello, World!")
</code></pre>

<p>Make it executable:</p>

<pre><code class="bash">$ chmod +x ./hello_python.py
</code></pre>

<p>Run:</p>

<pre><code class="bash">$ time ./hello_python.py
Hello, World!

real    0m0.033s
user    0m0.015s
sys   0m0.010s
</code></pre>

<h2>Ruby</h2>

<p>Code:</p>

<pre><code class="ruby">#!/usr/bin/env ruby
puts "Hello, World!"
</code></pre>

<p>Make it executable:</p>

<pre><code class="bash">$ chmod +x ./hello_ruby.rb
</code></pre>

<p>Run:</p>

<pre><code class="bash">$ time ./hello_ruby.rb
Hello, World!

real    0m0.136s
user    0m0.080s
sys   0m0.024s
</code></pre>

<h2>Java</h2>

<p>Code:</p>

<pre><code class="java">public class hello_java {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
</code></pre>

<p>Compile:</p>

<pre><code class="bash">$ javac hello_java.java
</code></pre>

<p>Run:</p>

<pre><code class="bash">$ time java hello_java
Hello, World!

real    0m0.114s
user    0m0.086s
sys   0m0.023s
</code></pre>

<h2>Resource:</h2>

<ul>
<li><a href="https://www.lifewire.com/command-return-time-command-4054237">https://www.lifewire.com/command-return-time-command-4054237</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
