<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Salt | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/salt/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2019-09-05T01:08:19+02:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Salt and Hash Example Using Python With Bcrypt on Alpine]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/07/04/salt-and-hash-example-using-python-with-bcrypt-on-alpine/"/>
    <updated>2018-07-04T11:05:00+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/07/04/salt-and-hash-example-using-python-with-bcrypt-on-alpine</id>
    <content type="html"><![CDATA[<p>This is a post on a example of how to hash a password with a salt. A salt in cryptography is a method that applies a one way function to hash data like passwords. The advantage of using salts is to protect your sensitive data against dictionary attacks, etc. Everytime a salt is applied to the same string, the hashed string will provide a different result.</p>

<h2>Installing Bcrypt</h2>

<p>I will be using bcrypt to hash my password. I always use alpine images and this is how I got bcrypt running on alpine:</p>

<pre><code class="bash">$ docker run -it apline sh
$ apk add python python-dev py2-pip autoconf automake g++ make --no-cache
$ pip install py-bcrypt
</code></pre>

<p>This command should produce a <code>0 exit code</code>:</p>

<pre><code class="bash">$ python -c 'import bcrypt'; echo $?
</code></pre>

<h2>Bcrypt Example to Hash a Password</h2>

<p>Here is a example to show you the output when a salt is applied to a string, such as a password. First we will define our very weak password:</p>

<pre><code class="python">&gt;&gt;&gt; import bcrypt
&gt;&gt;&gt; password = 'pass123'
&gt;&gt;&gt; password
'pass123'
</code></pre>

<p>The bcrypt package has a function called <code>gensalt()</code> that accepts a parameter <code>log_rounds</code> which defines the complexity of the hashing. Lets create a hash for our password:</p>

<pre><code class="python">&gt;&gt;&gt; bcrypt.hashpw(password, bcrypt.gensalt(12))
'$2a$12$iquyyyJAlA9nZwlGo0CYK.J37Qn.to/0mTtiCspNAyO8778006XZG'

&gt;&gt;&gt; bcrypt.hashpw(password, bcrypt.gensalt(12))
'$2a$12$UzNjJ1W/cWqBrt5rzNkb..j.gUvrW64DbvVkNbhRDzBtbRvNInaqq'
</code></pre>

<p>As you can see, the hashed string was different when we called it for the second time.</p>

<h2>Bcrypt Salt Hash and Verification Example:</h2>

<p>Thanks to <a href="https://stackoverflow.com/questions/9594125/salt-and-hash-a-password-in-python">this</a> post, here is a example on how to hash strings and how to verify the plain text password with the provided salt.</p>

<p>Our functions to create the hash and to verify the password:</p>

<pre><code class="python">&gt;&gt;&gt; import bcrypt
&gt;&gt;&gt; def get_hashed_password(plain_text_password):
...     return bcrypt.hashpw(plain_text_password, bcrypt.gensalt())
...
&gt;&gt;&gt;
&gt;&gt;&gt; def check_password(plain_text_password, hashed_password):
...     return bcrypt.checkpw(plain_text_password, hashed_password)
...
&gt;&gt;&gt;
</code></pre>

<p>Create a hashed string:</p>

<pre><code class="python">&gt;&gt;&gt; print(get_hashed_password('mynewpassword'))
$2a$12$/MemcgbnwJLN8XE86VQZseVxopU6tY76KxnH/AJ0I9T9y1Ldko5gm
</code></pre>

<p>Verify the hash with your plain text password and the salt that was created:</p>

<pre><code class="python">&gt;&gt;&gt; print(check_password('mynewpassword', '$2a$12$/MemcgbnwJLN8XE86VQZseVxopU6tY76KxnH/AJ0I9T9y1Ldko5gm'))
True
</code></pre>

<p>When you you provide the wrong password, with the correct salt, the verification will fail:</p>

<pre><code class="python">&gt;&gt;&gt; print(check_password('myOLDpassword', '$2a$12$/MemcgbnwJLN8XE86VQZseVxopU6tY76KxnH/AJ0I9T9y1Ldko5gm'))
False
</code></pre>

<p>When you provide the correct password with the incorrect salt, the verification will also fail:</p>

<pre><code class="python">&gt;&gt;&gt; print(check_password('mynewpassword', '$2a$12$/MemcgbnwJLN8XE86VQZseVxopU6tY76KxnH/AJ0I9T9y1Ldko5gmX'))
False
</code></pre>
]]></content>
  </entry>
  
</feed>
