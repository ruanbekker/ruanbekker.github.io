<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scripting | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/scripting/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2023-07-15T18:07:51-04:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Get the Top 10 Items on Hackernews in Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/06/13/get-the-top-10-items-on-hackernews-in-python/"/>
    <updated>2020-06-13T19:53:20+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/06/13/get-the-top-10-items-on-hackernews-in-python</id>
    <content type="html"><![CDATA[<p>This is a quick post on how to use python to get the 10 latest items from hacker<a href="news:">news:</a></p>

<pre><code>import requests
import json

def get_top_ten():
    ids = requests.get('https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty').json()[0:10]
    for id in ids:
        postresponse = requests.get('https://hacker-news.firebaseio.com/v0/item/{postid}.json?print=pretty'.format(postid=id)).json()
        formatted = {"title": postresponse["title"], "type": postresponse["type"], "url": postresponse["url"], "by": postresponse["by"]}
        print(json.dumps(formatted, indent=2))
</code></pre>

<p>When running it:</p>

<pre><code>&gt;&gt;&gt; get_top_ten()
..
{
  "title": "Play Counter-Strike 1.6 in your browser",
  "type": "story",
  "url": "http://cs-online.club",
  "by": "m0ck"
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Validate Strings in Python With Regex]]></title>
    <link href="https://blog.ruanbekker.com/blog/2019/02/27/how-to-validate-strings-in-python-with-regex/"/>
    <updated>2019-02-27T06:47:53-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2019/02/27/how-to-validate-strings-in-python-with-regex</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s say you need to validate strings in Python. Making decisions if a string is valid or not, is what we will be looking at today.</p>

<script src="//ap.lijit.com/www/delivery/fpi.js?z=601358&width=300&height=250"></script>


<p></p>

<h2>The Scenario</h2>

<p>We have a string that will look like this: <code>my-random-abc-string-2947104284738593726152637836291</code>. The <code>abc</code> section will always be 3 random string characters and the integers, will always be 32 integer characters, the rest will always stay the same.</p>

<p>Using the <code>re</code> library, we will create our regex expression and match them up with a input string, then if they are the same, we will pass the validation check, and make a decision from there.</p>

<h2>The Script</h2>

<p>Our random string generator:</p>

<pre><code class="python">&gt;&gt;&gt; import uuid
&gt;&gt;&gt; import random
&gt;&gt;&gt; letters = 'abcdefghijklmnopqrstuvwxyz'
&gt;&gt;&gt; def generate_string():
...     random_letters = ''.join(random.choice(letters) for x in range(3))
...     response = 'my-random-' + random_letters + '-string_' + uuid.uuid4().hex
...     return response
</code></pre>

<p>Our validation check:</p>

<pre><code class="python">&gt;&gt;&gt; import re
&gt;&gt;&gt; def validation_check(input_string):
...     regex = re.compile('my-random-[a-z]{3}-string_[0-9a-z]{32}\Z', re.I)
...     match = regex.match(str(input_string))
...     return bool(match)
</code></pre>

<p>Doing the validation check against our data:</p>

<pre><code class="python">&gt;&gt;&gt; mystring = generate_string()
&gt;&gt;&gt; mystring
'my-random-ngt-string_6346145281738193742120539836241'

&gt;&gt;&gt; validate = validation_check(mystring)
&gt;&gt;&gt; if validate == True:
...     print('The string {} is valid'.format(mystring))
... else:
...     print('The string {} is not valid'.format(mystring))

the string my-random-ngt-string_6346145281738193742120539836241 is valid
</code></pre>

<p>The function checks for a strict 32 characters in the random hex number, if you had to randomize the length, you can always use this regex:</p>

<pre><code class="python">regex = re.compile('my-random-[a-z]{3}-string__[0-9]+', re.I)
</code></pre>


]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Tag All Your AWS IAM Users With Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2019/02/25/how-to-tag-all-your-aws-iam-users-with-python/"/>
    <updated>2019-02-25T06:44:55-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2019/02/25/how-to-tag-all-your-aws-iam-users-with-python</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s say that all your IAM users are named in <code>name.surname</code> and your system accounts are named as <code>my-system-account</code> and you find yourself in a position that you need to tag all your IAM users based on Human/System account type.</p>

<script src="//ap.lijit.com/www/delivery/fpi.js?z=601358&width=300&height=250"></script>


<p>With AWS and Python&rsquo;s Boto library, it makes things easy. We would list all our users, loop through each one and tag them with the predefined tag values that we chose.</p>

<h2>Batch Tagging AWS IAM Users with Python</h2>

<p>This script wil tag all users with the tag: Name, Email, Environment and Account_Type.</p>

<pre><code class="python">import boto3

iam = boto3.Session(profile_name='test', region_name='eu-west-1').client('iam')
paginator = iam.get_paginator('list_users')

iam_environment = 'test'

unstructed_users = []
userlist = []
taggable_users = []
already_tagged_users = []
email_address_domain = '@example.com'

# generate tag list based on account type
def tag_template(username, environment):
    if '.' in username:
        account_type = 'human'
    email = username
    else:
        account_type = 'system'
    email = 'system-admin'

    template = [
        {'Key': 'Name','Value': username.lower()}, 
        {'Key': 'Email', 'Value': email.lower() + email_address_domain}, 
        {'Key': 'Environment','Value': environment}, 
        {'Key': 'Account_Type','Value': account_type}
    ]

    return template

# generate userlist
for response in paginator.paginate():
    unstructed_users.append(response['Users'])

for iteration in range(len(unstructed_users)):
    for userobj in range(len(unstructed_users[iteration])):
        userlist.append((unstructed_users[iteration][userobj]['UserName']))

# generate taggable userlist:
for user in userlist:
    tag_response = iam.list_user_tags(UserName=user)
    if len(tag_response['Tags']) == 0:
        taggable_users.append(user)
    else:
        already_tagged_users.append(user)

# tag users from taggable_list
for tag_user in taggable_users:
    user_template = tag_template(tag_user, iam_environment)
    print(tag_user, user_template)
    response = iam.tag_user(UserName=tag_user, Tags=user_template)

# print lists
print('Userlists: {}'.format(userlist))
print('Taggable Users: {}'.format(taggable_users))
print('Already Tagged Users: {}'.format(already_tagged_users))
</code></pre>

<p>After it completes, your IAM users should be tagged in the following format:</p>

<pre><code>Name: john.doe
Email: john.doe@example.com
Environment: test
Account_Type: human

or:

Name: system-account
Email: system-admin@example.com
Environment: test
Account-Type: system
</code></pre>

<h2>Thank You</h2>

<p>Please feel free to show support by, <strong>sharing</strong> this post, making a <strong>donation</strong>, <strong>subscribing</strong> or <strong>reach out to me</strong> if you want me to demo and write up on any specific tech topic.</p>

<center>
<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
<input type="hidden" name="cmd" value="_s-xclick" />
<input type="hidden" name="hosted_button_id" value="W7CBGYTCWGANQ" />
<input type="image" src="https://user-images.githubusercontent.com/567298/49853901-461c3700-fdf1-11e8-9d80-8a424a3173af.png" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
<img alt="" border="0" src="https://www.paypal.com/en_ZA/i/scr/pixel.gif" width="1" height="1" />
</form>
</center>


<p><br></p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Port Status Checker Script in C Language]]></title>
    <link href="https://blog.ruanbekker.com/blog/2019/02/08/port-status-checker-script-in-c-language/"/>
    <updated>2019-02-08T08:56:11-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2019/02/08/port-status-checker-script-in-c-language</id>
    <content type="html"><![CDATA[<p>This is a simple script in the C Programming Language to test the port status of a remote address.</p>

<h2>Requirements:</h2>

<p>You will need the gcc package to compile the program:</p>

<p>For RHEL based distro&rsquo;s:</p>

<pre><code class="bash">$ yum install gcc -y
</code></pre>

<p>For Debian based distro&rsquo;s:</p>

<pre><code class="bash">$ apt install gcc -y
</code></pre>

<h2>Check TCP Port Status in C Language:</h2>

<p>Our file: <code>test.c</code></p>

<pre><code class="c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;netdb.h&gt;


int main(int argc, char *argv[]) {

    int portno     = 443;
    char *hostname = "google.com";

    int sockfd;
    struct sockaddr_in serv_addr;
    struct hostent *server;

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd &lt; 0) {
        error("Error opening socket\n");
    }

    server = gethostbyname(hostname);

    if (server == NULL) {
        fprintf(stderr,"ERROR, no such host\n");
        exit(0);
    }

    bzero((char *) &amp;serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    bcopy((char *)server-&gt;h_addr,
         (char *)&amp;serv_addr.sin_addr.s_addr,
         server-&gt;h_length);

    serv_addr.sin_port = htons(portno);
    if (connect(sockfd,(struct sockaddr *) &amp;serv_addr, sizeof(serv_addr)) &lt; 0) {
        printf("Port is Closed\n");
    } else {
        printf("Port is Open\n");
    }

    close(sockfd);
    return 0;
}
</code></pre>

<h2>Compile:</h2>

<p>Compile using gcc:</p>

<pre><code>$ gcc -o test test.c
</code></pre>

<h2>Execute:</h2>

<p>Execute the script:</p>

<pre><code class="bash">$ ./test
Port is Open
</code></pre>

<h2>Thank You</h2>

<p>Please feel free to show support by, <strong>sharing</strong> this post, making a <strong>donation</strong>, <strong>subscribing</strong> or <strong>reach out to me</strong> if you want me to demo and write up on any specific tech topic.</p>

<center>
<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
<input type="hidden" name="cmd" value="_s-xclick" />
<input type="hidden" name="hosted_button_id" value="W7CBGYTCWGANQ" />
<input type="image" src="https://user-images.githubusercontent.com/567298/49853901-461c3700-fdf1-11e8-9d80-8a424a3173af.png" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
<img alt="" border="0" src="https://www.paypal.com/en_ZA/i/scr/pixel.gif" width="1" height="1" />
</form>
</center>


<p><br></p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generate Random Characters With Python Using Random and String Modules]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/05/23/generate-random-characters-with-python-using-random-and-string-modules/"/>
    <updated>2018-05-23T06:29:06-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/05/23/generate-random-characters-with-python-using-random-and-string-modules</id>
    <content type="html"><![CDATA[<p>When generating random characters for whatever reason, passwords, secrets-keys etc, you could use the <code>uuid</code> module, which looks like this:</p>

<pre><code class="python Random String with UUID">&gt;&gt;&gt; from uuid import uuid4
&gt;&gt;&gt; print("Your string is: {0}".format(uuid4()) )
Your string is: 53a6e1a7-a2c7-488e-bed9-d76662de9c5f
</code></pre>

<p>But if you want to be more specific, like digits, letters, capitalization etc, you can use the <code>string</code> and <code>random</code> modules to do so. First we will generate a random string containing only letters:</p>

<pre><code class="python Random String with letters">&gt;&gt;&gt; from string import ascii_letters, punctuation, digits
&gt;&gt;&gt; from random import choice, randint
&gt;&gt;&gt; min = 12
&gt;&gt;&gt; max = 15
&gt;&gt;&gt; string_format = ascii_letters
&gt;&gt;&gt; generated_string = "".join(choice(string_format) for x in range(randint(min, max)))

&gt;&gt;&gt; print("Your String is: {0}".format(generated_string))
Your String is: zNeUFluvZwED
</code></pre>

<p>As you can see, you have a randomized string which will be always at least 12 characters and max 15 characters, which is lower and upper case. You can also use the <code>lower</code> and <code>upper</code> functions if you want to capitalize or lower case your string:</p>

<pre><code class="python">&gt;&gt;&gt; generated_string.lower()
'zneufluvzwed'

&gt;&gt;&gt; generated_string.upper()
'ZNEUFLUVZWED'
</code></pre>

<p>Let&rsquo;s add some logic so that we can have a more randomized characters with digits, punctuations etc:</p>

<pre><code class="python Random String with Letters, Punctuations and Digits">&gt;&gt;&gt; from string import ascii_letters, punctuation, digits
&gt;&gt;&gt; from random import choice, randint
&gt;&gt;&gt; min = 12
&gt;&gt;&gt; max = 15
&gt;&gt;&gt; string_format = ascii_letters + punctuation + digits
&gt;&gt;&gt; generated_string = "".join(choice(string_format) for x in range(randint(min, max)))
&gt;&gt;&gt; print("Your String is: {0}".format(generated_string))
Your String is: Bu&gt;}x_/-H5)fLAr
</code></pre>

<p>More <a href="https://goo.gl/G9VRpe">Python</a> related blog posts.</p>

<center>
  <script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script>
  <script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script>
</center>

]]></content>
  </entry>
  
</feed>
