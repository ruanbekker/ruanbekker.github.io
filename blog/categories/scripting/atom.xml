<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scripting | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/scripting/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2019-02-12T15:56:19-05:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Port Status Checker Script in C Language]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/02/08/port-status-checker-script-in-c-language/"/>
    <updated>2019-02-08T08:56:11-05:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/02/08/port-status-checker-script-in-c-language</id>
    <content type="html"><![CDATA[<p>This is a simple script in the C Programming Language to test the port status of a remote address.</p>

<h2>Requirements:</h2>

<p>You will need the gcc package to compile the program:</p>

<p>For RHEL based distro&rsquo;s:</p>

<pre><code class="bash">$ yum install gcc -y
</code></pre>

<p>For Debian based distro&rsquo;s:</p>

<pre><code class="bash">$ apt install gcc -y
</code></pre>

<h2>Check TCP Port Status in C Language:</h2>

<p>Our file: <code>test.c</code></p>

<pre><code class="c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;netdb.h&gt;


int main(int argc, char *argv[]) {

    int portno     = 443;
    char *hostname = "google.com";

    int sockfd;
    struct sockaddr_in serv_addr;
    struct hostent *server;

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd &lt; 0) {
        error("Error opening socket\n");
    }

    server = gethostbyname(hostname);

    if (server == NULL) {
        fprintf(stderr,"ERROR, no such host\n");
        exit(0);
    }

    bzero((char *) &amp;serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    bcopy((char *)server-&gt;h_addr,
         (char *)&amp;serv_addr.sin_addr.s_addr,
         server-&gt;h_length);

    serv_addr.sin_port = htons(portno);
    if (connect(sockfd,(struct sockaddr *) &amp;serv_addr, sizeof(serv_addr)) &lt; 0) {
        printf("Port is Closed\n");
    } else {
        printf("Port is Open\n");
    }

    close(sockfd);
    return 0;
}
</code></pre>

<h2>Compile:</h2>

<p>Compile using gcc:</p>

<pre><code>$ gcc -o test test.c
</code></pre>

<h2>Execute:</h2>

<p>Execute the script:</p>

<pre><code class="bash">$ ./test
Port is Open
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generate Random Characters With Python Using Random and String Modules]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/05/23/generate-random-characters-with-python-using-random-and-string-modules/"/>
    <updated>2018-05-23T06:29:06-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/05/23/generate-random-characters-with-python-using-random-and-string-modules</id>
    <content type="html"><![CDATA[<p>When generating random characters for whatever reason, passwords, secrets-keys etc, you could use the <code>uuid</code> module, which looks like this:</p>

<pre><code class="python Random String with UUID">&gt;&gt;&gt; from uuid import uuid4
&gt;&gt;&gt; print("Your string is: {0}".format(uuid4()) )
Your string is: 53a6e1a7-a2c7-488e-bed9-d76662de9c5f
</code></pre>

<p>But if you want to be more specific, like digits, letters, capitalization etc, you can use the <code>string</code> and <code>random</code> modules to do so. First we will generate a random string containing only letters:</p>

<pre><code class="python Random String with letters">&gt;&gt;&gt; from string import ascii_letters, punctuation, digits
&gt;&gt;&gt; from random import choice, randint
&gt;&gt;&gt; min = 12
&gt;&gt;&gt; max = 15
&gt;&gt;&gt; string_format = ascii_letters
&gt;&gt;&gt; generated_string = "".join(choice(string_format) for x in range(randint(min, max)))

&gt;&gt;&gt; print("Your String is: {0}".format(generated_string))
Your String is: zNeUFluvZwED
</code></pre>

<p>As you can see, you have a randomized string which will be always at least 12 characters and max 15 characters, which is lower and upper case. You can also use the <code>lower</code> and <code>upper</code> functions if you want to capitalize or lower case your string:</p>

<pre><code class="python">&gt;&gt;&gt; generated_string.lower()
'zneufluvzwed'

&gt;&gt;&gt; generated_string.upper()
'ZNEUFLUVZWED'
</code></pre>

<p>Let&rsquo;s add some logic so that we can have a more randomized characters with digits, punctuations etc:</p>

<pre><code class="python Random String with Letters, Punctuations and Digits">&gt;&gt;&gt; from string import ascii_letters, punctuation, digits
&gt;&gt;&gt; from random import choice, randint
&gt;&gt;&gt; min = 12
&gt;&gt;&gt; max = 15
&gt;&gt;&gt; string_format = ascii_letters + punctuation + digits
&gt;&gt;&gt; generated_string = "".join(choice(string_format) for x in range(randint(min, max)))
&gt;&gt;&gt; print("Your String is: {0}".format(generated_string))
Your String is: Bu&gt;}x_/-H5)fLAr
</code></pre>

<p>More <a href="https://goo.gl/G9VRpe">Python</a> related blog posts.</p>

<center>
  <script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script>
  <script type='text/javascript'>kofiwidget2.init('Buy Me a Coffee', '#46b798', 'A6423ZIQ');kofiwidget2.draw();</script>
</center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Python to Build a Dictionary From Data Eg Sports Per Person]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/10/14/using-python-to-build-a-dictionary-from-data-eg-sports-per-person/"/>
    <updated>2017-10-14T14:53:48-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/10/14/using-python-to-build-a-dictionary-from-data-eg-sports-per-person</id>
    <content type="html"><![CDATA[<p>I had to achieve a way to provide data in key-value format, where I wanted to see what sports people like, eg: <code>{"ruan": ["rugby", "cricket"]}</code></p>

<h2>The Idea</h2>

<p>So my idea was to have the <code>name</code> as the key, and the <code>sports</code> as the value in a list.</p>

<h2>Some Catches</h2>

<p>So for this post, I will be setting the data statically in the code, while at the time I was working data that was returned via a API.</p>

<p>I am looping through each occurence, adding the name, and when the name exists, I append the sport to the list of the person.</p>

<p>The catch was that, if there was any duplicated data, the person will only exists once in the dictionary that I am building, but the sport will be appended, so if there were 2 occurences of <code>rugby</code> it will show the sport 2 times. So I had to put some logic into the code to handle that.</p>

<h2>The Code</h2>

<pre><code class="python">"""|Info:

Printing Sports per Person, by looping through data, appending the sports to a list per person, which gets added to our dictionary.

Variables:
    group {dict} -- "the dictionary that we are building up"
    people {list} -- "list of people with their sport choices"
    for sportman in people: {[for-loop]} -- "iterating through our data, if the sport exists, continue, if not, apeend it to the list"
    print(group) {[dict]} -- "printing the results"
"""

group = {}
people = [
    {
        "name": "ruan", 
        "sport": "cricket"
    }, 
    {
        "name": "stefan", 
        "sport": "rugby"
    }, 
    {
        "name": "stefan", 
        "sport": "cricket"
    }, 
    {
        "name": "james", 
        "sport": "rugby"
    }, 
    {
        "name": "james", 
        "sport": "golf"
    }, 
    {
        "name": "stefan", 
        "sport": "rugby"
    }, 
    {
        "name": "james", 
        "sport": "hockey"
    }
]

for sportman in people:
    if sportman['name'] in group:
        if sportman['sport'] not in group[sportman['name']]:
            group[sportman['name']].append(sportman['sport'])
        else:
            pass
    else:
        group[sportman['name']] = []
        group[sportman['name']].append(sportman['sport'])

print(group)
</code></pre>

<h2>Running the Script:</h2>

<p>When running the script results in the following:</p>

<pre><code class="bash">$ python sports.py 
{'james': ['rugby', 'golf', 'hockey'], 'ruan': ['cricket'], 'stefan': ['rugby', 'cricket']}
</code></pre>
]]></content>
  </entry>
  
</feed>
