<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Secrets | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/secrets/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2019-05-07T06:20:22-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup Hashicorp Vault Server on Docker and a Getting Started CLI Guide]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/05/06/setup-hashicorp-vault-server-on-docker-and-cli-guide/"/>
    <updated>2019-05-06T16:49:09-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/05/06/setup-hashicorp-vault-server-on-docker-and-cli-guide</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/57256060-f1a27e00-7055-11e9-9a05-77d3fdd6c76f.png" alt="" /></p>

<p>Vault is one of Hashicorp&rsquo;s awesome services, which enables you to centrally store, access and distribute dynamic secrets such as tokens, passwords, certificates and encryption keys.</p>

<h2>What will we be doing today</h2>

<p>We will setup a Vault Server on Docker and demonstrate a getting started guide with the Vault CLI to Initialize the Vault, Create / Use and Manage Secrets.</p>

<h2>Setting up the Vault Server</h2>

<p>Create the directory structure:</p>

<pre><code>$ touch docker-compose.yml
$ mkdir -p volumes/{config,file,logs}
</code></pre>

<p>Populate the vault config <code>vault.json</code>. (As you can see the config is local, in the next couple of posts, I will show how to persist this config to Amazon S3)</p>

<pre><code>$ cat &gt; volumes/config/vault.json &lt;&lt; EOF
{
  "backend": {
    "file": {
      "path": "/vault/file"
    }
  },
  "listener": {
    "tcp":{
      "address": "0.0.0.0:8200",
      "tls_disable": 1
    }
  },
  "ui": true
}
EOF
</code></pre>

<p>Populate the <code>docker-compose.yml</code>:</p>

<pre><code>$ cat &gt; docker-compose.yml &lt;&lt; EOF
version: '2'
services:
  vault:
    image: vault
    container_name: vault
    ports:
      - "8200:8200"
    restart: always
    volumes:
      - ./volumes/logs:/vault/logs
      - ./volumes/file:/vault/file
      - ./volumes/config:/vault/config
    cap_add:
      - IPC_LOCK
    entrypoint: vault server -config=/vault/config/vault.json
EOF
</code></pre>

<p>Start the Vault Server:</p>

<pre><code>$ docker-compose up
</code></pre>

<p>The UI is available at <a href="http://localhost:8200/ui">http://localhost:8200/ui</a> and the api at <a href="http://localhost:8200">http://localhost:8200</a></p>

<h2>Interacting with the Vault CLI</h2>

<p>I will demonstrate how to use the Vault CLI to interact with Vault. Let&rsquo;s start by installing the vault cli tools, I am using mac, so I will be using brew:</p>

<pre><code>$ brew install vault
</code></pre>

<p>Set environment variables:</p>

<pre><code>$ export VAULT_ADDR='http://127.0.0.1:8200'
</code></pre>

<h2>Initialize the Vault Cluster:</h2>

<p>Initialize new vault cluster with 6 key shares:</p>

<pre><code>$ vault operator init -key-shares=6 -key-threshold=3
Unseal Key 1: RntjR...DQv
Unseal Key 2: 7E1bG...0LL+
Unseal Key 3: AEuhl...A1NO
Unseal Key 4: bZU76...FMGl
Unseal Key 5: DmEjY...n7Hk
Unseal Key 6: pC4pK...XbKb

Initial Root Token: s.F0JGq..98s2U

Vault initialized with 10 key shares and a key threshold of 3. Please
securely distribute the key shares printed above. When the Vault is re-sealed,
restarted, or stopped, you must supply at least 3 of these keys to unseal it
before it can start servicing requests.

Vault does not store the generated master key. Without at least 3 key to
reconstruct the master key, Vault will remain permanently sealed!

It is possible to generate new unseal keys, provided you have a quorum of
existing unseal keys shares. See "vault operator rekey" for more information.
</code></pre>

<p>In order to unseal the vault cluster, we need to supply it with 3 key shares:</p>

<pre><code>$ vault operator unseal RntjR...DQv
$ vault operator unseal bZU76...FMGl
$ vault operator unseal pC4pK...XbKb
</code></pre>

<p>Ensure the vault is unsealed:</p>

<pre><code>$ vault status -format=json
{
  "type": "shamir",
  "initialized": true,
  "sealed": false,
  "t": 3,
  "n": 5,
  "progress": 0,
  "nonce": "",
  "version": "1.1.0",
  "migration": false,
  "cluster_name": "vault-cluster-dca2b572",
  "cluster_id": "469c2f1d-xx-xx-xx-03bfc497c883",
  "recovery_seal": false
}
</code></pre>

<p>Authenticate against the vault:</p>

<pre><code>$ vault login s.tdlEqsfzGbePVlke5hTpr9Um
Success! You are now authenticated. The token information displayed below
is already stored in the token helper. You do NOT need to run "vault login"
again. Future Vault requests will automatically use this token.
</code></pre>

<p>Using the cli your auth token will be saved locally at <code>~/.vault-token</code>.</p>

<p>Enable the secret kv engine:</p>

<pre><code>$ vault secrets enable -version=1 -path=secret kv
</code></pre>

<h2>Create and Read Secrets</h2>

<p>Write a secret to the path enabled above:</p>

<pre><code>$ vault kv put secret/my-app/password password=123
</code></pre>

<p>List your secrets:</p>

<pre><code>$ vault kv list secret/
Keys
----
my-app/
</code></pre>

<p>Read the secret (defaults in table format):</p>

<pre><code>$ vault kv get secret/my-app/password
Key                 Value
---                 -----
refresh_interval    768h
password            123
</code></pre>

<p>Read the secret in json format:</p>

<pre><code>$ vault kv get --format=json secret/my-app/password
{
  "request_id": "0249c878-7432-9555-835a-89b275fca32o",
  "lease_id": "",
  "lease_duration": 2764800,
  "renewable": false,
  "data": {
    "password": "123"
  },
  "warnings": null
}
</code></pre>

<p>Read only the password value in the secret:</p>

<pre><code>$ vault kv get -field=password secret/my-app/password
123
</code></pre>

<h2>Key with Multiple Secrets</h2>

<p>Create a key with multiple secrets:</p>

<pre><code>$ vault kv put secret/reminders/app db_username=db.ruanbekker.com username=root password=secret
</code></pre>

<p>Read all the secrets:</p>

<pre><code>$ vault kv get --format=json secret/reminders/app
{
  "request_id": "0144c878-7532-9555-835a-8cb275fca3dd",
  "lease_id": "",
  "lease_duration": 2764800,
  "renewable": false,
  "data": {
    "db_username": "db.ruanbekker.com",
    "password": "secret",
    "username": "root"
  },
  "warnings": null
}
</code></pre>

<p>Read only the username field in the key:</p>

<pre><code>$ vault kv get -field=username secret/reminders/app
root
</code></pre>

<p>Delete the secret:</p>

<pre><code>$ vault kv delete secret/reminders
</code></pre>

<h2>Versioning</h2>

<p>Create a key and set the metadata to max of 5 versions:</p>

<pre><code>$ vault kv metadata put -max-versions=5 secret/fooapp/appname
</code></pre>

<p>Get the metadata of the key:</p>

<pre><code>$ vault kv metadata get secret/fooapp/appname
======= Metadata =======
Key                Value
---                -----
cas_required       false
created_time       2019-04-07T12:35:54.355411Z
current_version    0
max_versions       5
oldest_version     0
updated_time       2019-04-07T12:35:54.355411Z
</code></pre>

<p>Write a secret <code>appname</code> to our key: <code>secret/fooapp/appname</code>:</p>

<pre><code>$ vault kv put secret/fooapp/appname appname=app1
Key              Value
---              -----
created_time     2019-04-07T12:36:41.7577102Z
deletion_time    n/a
destroyed        false
version          1
</code></pre>

<p>Overwrite the key with a couple of requests:</p>

<pre><code>$ vault kv put secret/fooapp/appname appname=app2
$ vault kv put secret/fooapp/appname appname=app3
</code></pre>

<p>Read the current value:</p>

<pre><code>$ vault kv get -field=appname secret/fooapp/appname
app3
</code></pre>

<p>Get the version=2 value of this file:</p>

<pre><code>$ vault kv get -field=appname -version=2 secret/fooapp/appname
app2
</code></pre>

<h2>Thanks</h2>

<p>Thanks for reading, hope this was informative. Have a look at <a href="https://www.vaultproject.io">Hashicorp&rsquo;s Vault Documentation</a> for more information on the project. I will post more posts on Vault under the <a href="https://blog.ruanbekker.com/blog/categories/vault">#vault</a> category.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using AWS SSM Parameter Store to Retrieve Secrets Encrypted by KMS Using Python]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/04/04/using-aws-ssm-parameter-store-to-retrieve-secrets-encrypted-by-kms-using-python/"/>
    <updated>2018-04-04T16:47:16-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/04/04/using-aws-ssm-parameter-store-to-retrieve-secrets-encrypted-by-kms-using-python</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/4ytE3W.jpg" alt="" /></p>

<p>Today we will use Amazon Web Services SSM Service to store secrets in their Parameter Store which we will encyrpt using KMS.</p>

<p>Then we will read the data from SSM and decrypt using our KMS key. We will then end it off by writing a Python Script that reads the AWS credentials, authenticates with SSM and then read the secret values that we stored.</p>

<h2>The Do List:</h2>

<p>We will break up this post in the following topics:</p>

<ul>
<li>Create a KMS Key which will use to Encrypt/Decrypt the Parameter in SSM</li>
<li>Create the IAM Policy which will be used to authorize the Encrypt/Decrypt by the KMS ID</li>
<li>Create the KMS Alias</li>
<li>Create the Parameter using PutParameter as a SecureString to use Encryption with KMS</li>
<li>Describe the Parameters</li>
<li>Read the Parameter with and without Decryption to determine the difference using GetParameter</li>
<li>Read the Parameters using GetParameters</li>
<li>Environment Variable Example</li>
</ul>


<h2>Create the KMS Key:</h2>

<p>As the administrator, or root account, create the KMS Key:</p>

<pre><code class="python">&gt;&gt;&gt; import boto3
&gt;&gt;&gt; session = boto3.Session(region_name='eu-west-1', profile_name='personal')
&gt;&gt;&gt; iam = session.client('iam')
&gt;&gt;&gt; kms = session.client('kms')
&gt;&gt;&gt; response = kms.create_key(
    Description='Ruan Test Key', 
    KeyUsage='ENCRYPT_DECRYPT', 
    Origin='AWS_KMS', 
    BypassPolicyLockoutSafetyCheck=False, 
    Tags=[{'TagKey': 'Name', 'TagValue': 'RuanTestKey'}]
)

&gt;&gt;&gt; print(response['KeyMetadata']['KeyId'])
foobar-2162-4363-ba02-a953729e5ce6 
</code></pre>

<p>Create the IAM Policy:</p>

<pre><code class="python">&gt;&gt;&gt; response = iam.create_policy(
    PolicyName='ruan-kms-test-policy', 
    PolicyDocument='{
        "Version": "2012-10-17", 
        "Statement": [{
            "Sid": "Stmt1517212478199", 
            "Action": [
                "kms:Decrypt", 
                "kms:Encrypt"
            ], 
            "Effect": "Allow", 
            "Resource": "arn:aws:kms:eu-west-1:0123456789012:key/foobar-2162-4363-ba02-a953729e5ce6"
        }]
    }', 
    Description='Ruan KMS Test Policy'
)
&gt;&gt;&gt; print(response['Policy']['Arn'])
arn:aws:iam::0123456789012:policy/ruan-kms-test-policy
</code></pre>

<p>Create the KMS Alias:</p>

<pre><code class="python">&gt;&gt;&gt; response = kms.create_alias(AliasName='alias/ruan-test-kms', TargetKeyId='foobar-2162-4363-ba02-a953729e5ce6')
</code></pre>

<h2>Publish the Secrets to SSM:</h2>

<p>As the administrator, write the secret values to the parameter store in SSM. We will publish a secret with the Parameter: <code>/test/ruan/mysql/db01/mysql_hostname</code> and the Value: <code>db01.eu-west-1.mycompany.com</code>:</p>

<pre><code class="python">&gt;&gt;&gt; from getpass import getpass
&gt;&gt;&gt; secretvalue = getpass()
Password:

&gt;&gt;&gt; print(secretvalue)
db01.eu-west-1.mycompany.com

&gt;&gt;&gt; response = ssm.put_parameter(
    Name='/test/ruan/mysql/db01/mysql_hostname', 
    Description='RuanTest MySQL Hostname', 
    Value=secretvalue, 
    Type='SecureString', 
    KeyId='foobar-2162-4363-ba02-a953729e5ce6', 
    Overwrite=False
)
</code></pre>

<h2>Describe Parameters</h2>

<p>Describe the Parameter that we written to SSM:</p>

<pre><code class="python">&gt;&gt;&gt; response = ssm.describe_parameters(
    Filters=[{'Key': 'Name', 'Values': ['/test/ruan/mysql/db01/mysql_hostname']}]
)
&gt;&gt;&gt; print(response['ResponseMetadata']['Parameters'][0]['Name'])
'/test/ruan/mysql/db01/mysql_hostname' 
</code></pre>

<h2>Reading from SSM:</h2>

<p>Read the Parameter value from SSM without using decryption via KMS:</p>

<pre><code class="python">&gt;&gt;&gt; response = ssm.get_parameter(Name='/test/ruan/mysql/db01/mysql_hostname')
&gt;&gt;&gt; print(response['Parameter']['Value'])
AQICAHh7jazUUBgNxMQbYFeve2/p+UWTuyAd5F3ZJkZkf9+hwgF+H+kSABfPCTEarjXqYBaJAAAAejB4BgkqhkiG9w0BBwagazBpAgEAMGQGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMJUEuT8wDGCQ3zRBmAgEQgDc8LhLgFe+Rutgi0hOKnjTEVQa2lKTy3MmTDZEeLy3Tlr5VUl6AVJNBpd4IWJTbj5YuqrrAAWWJ
</code></pre>

<p>As you can see the value is encrypted, this time read the parameter value with specifying decryption via KMS:</p>

<pre><code class="python">&gt;&gt;&gt; response = ssm.get_parameter(Name='/test/ruan/mysql/db01/mysql_hostname', WithDecryption=True)
&gt;&gt;&gt; print(response['Parameter']['Value'])
db01.eu-west-1.mycompany.com
</code></pre>

<h2>Grant Permissions to Instance Profile:</h2>

<p>Now we will create a policy that can only decrypt and read values from SSM that matches the path: <code>/test/ruan/mysql/db01/mysql_*</code>. This policy will be associated to a instance profile role, which will be used by EC2, where our application will read the values from.</p>

<p>Our policy will look like this:</p>

<pre><code class="json">{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "Stmt1517398919242",
      "Action": [
        "kms:Decrypt"
      ],
      "Effect": "Allow",
      "Resource": "arn:aws:kms:eu-west-1:0123456789012:key/foobar-2162-4363-ba02-a953729e5ce6"
    },
    {
      "Sid": "Stmt1517399021096",
      "Action": [
        "ssm:GetParameter"
      ],
      "Effect": "Allow",
      "Resource": "arn:aws:ssm:eu-west-1:0123456789012:parameter/test/ruan/mysql/db01/mysql_*"
    }
  ]
}
</code></pre>

<p>Create the Policy:</p>

<pre><code class="python">&gt;&gt;&gt; pol = '{"Version": "2012-10-17","Statement": [{"Sid": "Stmt1517398919242","Action": ["kms:Decrypt"],"Effect": "Allow","Resource": "arn:aws:kms:eu-west-1:0123456789012:key/foobar-2162-4363-ba02-a953729e5ce6"},{"Sid": "Stmt1517399021096","Action": ["ssm:GetParameter"],"Effect": "Allow","Resource": "arn:aws:ssm:eu-west-1:0123456789012:parameter/test/ruan/mysql/db01/mysql_*"}]}'
&gt;&gt;&gt; response = iam.create_policy(PolicyName='RuanGetSSM-Policy', PolicyDocument=pol, Description='Test Policy to Get SSM Parameters')
</code></pre>

<p>Create the instance profile:</p>

<pre><code class="python">&gt;&gt;&gt; response = iam.create_instance_profile(InstanceProfileName='RuanTestSSMInstanceProfile')
</code></pre>

<p>Create the Role:</p>

<pre><code class="python">&gt;&gt;&gt; response = iam.create_role(RoleName='RuanTestGetSSM-Role', AssumeRolePolicyDocument='{"Version": "2012-10-17","Statement": [{"Sid": "","Effect": "Allow","Principal": {"Service": "ec2.amazonaws.com"},"Action": "sts:AssumeRole"}]}')
</code></pre>

<p>Associate the Role and Instance Profile:</p>

<pre><code class="python">&gt;&gt;&gt; response = iam.add_role_to_instance_profile(InstanceProfileName='RuanTestSSMInstanceProfile', RoleName='RuanTestGetSSM-Role')
</code></pre>

<p>Attach the Policy to the Role:</p>

<pre><code class="python">&gt;&gt;&gt; response = iam.put_role_policy(RoleName='RuanTestGetSSM-Role', PolicyName='RuanTestGetSSMPolicy1', PolicyDocument=pol')
</code></pre>

<p>Launch the EC2 instance with the above mentioned Role. Create the <code>get_ssm.py</code> and run it to decrypt and read the value from SSM:</p>

<pre><code class="python get_ssm.py">import boto3
session = boto3.Session(region_name='eu-west-1')
ssm = session.client('ssm')
hostname = ssm.get_parameter(Name='/test/ruan/mysql/db01/mysql_hostname', WithDecryption=True)
print(hostname['Parameter']['Value'])
</code></pre>

<p>Run it:</p>

<pre><code class="bash">$ python get_ssm.py
db01.eu-west-1.mycompany.com
</code></pre>

<h2>Reading with GetParameters:</h2>

<p>So say that we created more than one parameter in the path that we allowed, lets use <code>GetParameters</code> to read more than one Parameter:</p>

<pre><code class="python get_parameters.py">import boto3
session = boto3.Session(region_name='eu-west-1')
ssm = session.client('ssm')
response = ssm.get_parameters(
    Names=[
        '/test/ruan/mysql/db01/mysql_hostname', 
        '/test/ruan/mysql/db01/mysql_user'
    ], 
    WithDecryption=True
)

for secrets in response['Parameters']:
    if secrets['Name'] == '/test/ruan/mysql/db01/mysql_hostname':
        print("Hostname: {}".format(secrets['Value']))
    if secrets['Name'] == '/test/ruan/mysql/db01/mysql_user':
        print("Username: {}".format(secrets['Value']))
</code></pre>

<p>Run it:</p>

<pre><code class="bash">$ python get_parameters.py
Hostname: db01.eu-west-1.mycompany.com
Username: super_dba
</code></pre>

<h2>Environment Variable Example from an Application:</h2>

<p>Set the Environment Variable value to the SSM key:</p>

<pre><code class="bash">$ export MYSQL_HOSTNAME="/test/ruan/mysql/db01/mysql_hostname"
$ export MYSQL_USERNAME="/test/ruan/mysql/db01/mysql_user"
</code></pre>

<p>The application code:</p>

<pre><code class="python">import os
import boto3

session = boto3.Session(region_name='eu-west-1')
ssm = session.client('ssm')

MYSQL_HOSTNAME = os.environ.get('MYSQL_HOSTNAME')
MYSQL_USERNAME = os.environ.get('MYSQL_USERNAME')

hostname = ssm.get_parameter(Name=MYSQL_HOSTNAME, WithDecryption=True)
username = ssm.get_parameter(Name=MYSQL_USERNAME, WithDecryption=True)

print("Hostname: {}".format(hostname['Parameter']['Value']))
print("Username: {}".format(username['Parameter']['Value']))
</code></pre>

<p>Let the application transform the key to the SSM Value:</p>

<pre><code class="bash">$ python app.py
Hostname: db01.eu-west-1.mycompany.com
Username: super_dba
</code></pre>

<h2>Resources:</h2>

<p>Great thanks to the following resources:</p>

<ul>
<li><a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-su-organize.html">https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-su-organize.html</a></li>
<li><a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-roles.html">https://docs.aws.amazon.com/cli/latest/userguide/cli-roles.html</a></li>
<li><a href="https://github.com/iMilnb/awstools/blob/master/platforms/roles/mkrole.py">https://github.com/iMilnb/awstools/blob/master/platforms/roles/mkrole.py</a></li>
<li><a href="https://github.com/ktruckenmiller/ssm-get-parameter-by-path/blob/master/python.py">https://github.com/ktruckenmiller/ssm-get-parameter-by-path/blob/master/python.py</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Populate Environment Variables From Docker Secrets With a Flask Demo App]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/03/12/populate-environment-variables-from-docker-secrets-with-a-flask-demo-app/"/>
    <updated>2018-03-12T18:16:42-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/03/12/populate-environment-variables-from-docker-secrets-with-a-flask-demo-app</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/53351889-85572000-392a-11e9-9720-464e9318206e.jpg" alt="" /></p>

<p>In this post we will create a basic Python Flask WebApp on Docker Swarm, but we will read our Flask Host, and Flask Port from Environment Variables, which will be populated from Docker Secrets, which we will read in from a python script.</p>

<h2>Our Directory Setup:</h2>

<p>This can be retrieved from <a href="https://github.com/ruanbekker/docker-swarm-apps/tree/master/tools-secrets-env-exporter">github.com/ruanbekker/docker-swarm-apps/tool-secrets-env-exporter</a>, but I will place the code in here as well.</p>

<pre><code class="bash Dockerfile:">FROM alpine:edge
RUN apk add --no-cache python2 py2-pip &amp;&amp; pip install flask
ADD exporter.py /exporter.py
ADD boot.sh /boot.sh
ADD app.py /app.py
CMD ["/bin/sh", "/boot.sh"]
</code></pre>

<pre><code class="python exporter.py">import os
from glob import glob

for var in glob('/run/secrets/*'):
    k=var.split('/')[-1]
    v=open(var).read().rstrip('\n')
    os.environ[k] = v
    print("export {key}={value}".format(key=k,value=v))
</code></pre>

<pre><code class="python app.py">import os
from flask import Flask

flask_host = str(os.environ['flask_host'])
flask_port = int(os.environ['flask_port'])

app = Flask(__name__)

@app.route('/')
def index():
    return 'ok\n'

if __name__ == '__main__':
    app.run(host=flask_host, port=flask_port)
</code></pre>

<pre><code class="bash boot.sh">#!/bin/sh
set -e
eval $(python /exporter.py)
python /app.py
</code></pre>

<h2>Flow Information:</h2>

<p>The exporter script checks all the secrets that is mounted to the container, then formats the secrets to a key/value pair, which then exports the environment variables to the current shell, which thereafter gets read by the flask application.</p>

<h2>Usage:</h2>

<p>Create Docker Secrets:</p>

<pre><code>$ echo 5001 | docker secret create flask_port -
$ echo 0.0.0.0 | docker secret create flask_host -
</code></pre>

<p>Build and Push the Image:</p>

<pre><code>$ docker build -t registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/&lt;image&gt;:&lt;tag&gt;
$ docker push registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/&lt;image&gt;:&lt;tag&gt;
</code></pre>

<p>Create the Service, and specify the secrets that we created earlier:</p>

<pre><code>$ docker service create --name webapp \
--secret source=flask_host,target=flask_host \
--secret source=flask_port,target=flask_port \
registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/&lt;image&gt;:&lt;tag&gt;
</code></pre>

<p>Exec into the container, list to see where the secrets got populated:</p>

<pre><code>$ ls /run/secrets/
flask_host  flask_port
</code></pre>

<p>Do a netstat, to see that the value from the created secret is listening:</p>

<pre><code>$ netstat -tulpn
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:5001            0.0.0.0:*               LISTEN      7/python
</code></pre>

<p>Do a GET request on the Flask Application:</p>

<pre><code>$ curl http://0.0.0.0:5001/
ok
</code></pre>
]]></content>
  </entry>
  
</feed>
