<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Slack | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/slack/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2022-05-31T03:05:54-04:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sending Slack Messages With Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/11/06/sending-slack-messages-with-python/"/>
    <updated>2020-11-06T13:58:50+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/11/06/sending-slack-messages-with-python</id>
    <content type="html"><![CDATA[<p>In this post I will demonstrate how to send messages to slack using python based on the status of an event.</p>

<p>We will keep it basic, that when something is down or up, it should send a slack message with the status, message, color and embed your grafana dashboard links inside the alert (or any links that you would like).</p>

<h2>Create a Webhook</h2>

<p>From a previous post on <a href="https://blog.ruanbekker.com/blog/2019/04/18/setup-a-slack-webhook-for-sending-messages-from-applications/">how to use curl to send slack messages</a> I showed how to create your webhook, so you can just follow that post if you want to follow along.</p>

<p>Once you have a webhook, which will look like <code>https://hooks.slack.com/services/xx/yy/zz</code>, you are good to follow to the next step.</p>

<h2>Creating the Script</h2>

<p>First we need requests:</p>

<pre><code>$ pip install requests
</code></pre>

<p>Then we will create the <code>slack_notifier.py</code>, just ensure that you replace your slack webhook url and slack channel to yours:</p>

<pre><code class="python">import requests
import sys
import os

SLACK_WEBHOOK_URL = 'https://hooks.slack.com/&lt;your&gt;/&lt;slack&gt;/&lt;webhook&gt;'
SLACK_CHANNEL = "#your-slack-channel"
ALERT_STATE = sys.argv[1]

alert_map = {
    "emoji": {
        "up": ":white_check_mark:",
        "down": ":fire:"
    },
    "text": {
        "up": "RESOLVED",
        "down": "FIRING"
    },
    "message": {
        "up": "Everything is good!",
        "down": "Stuff is burning!"
    },
    "color": {
        "up": "#32a852",
        "down": "#ad1721"
    }
}

def alert_to_slack(status, log_url, metric_url):
    data = {
        "text": "AlertManager",
        "username": "Notifications",
        "channel": SLACK_CHANNEL,
        "attachments": [
        {
            "text": "{emoji} [*{state}*] Status Checker\n {message}".format(
                emoji=alert_map["emoji"][status],
                state=alert_map["text"][status],
                message=alert_map["message"][status]
            ),
            "color": alert_map["color"][status],
            "attachment_type": "default",
            "actions": [
                {
                    "name": "Logs",
                    "text": "Logs",
                    "type": "button",
                    "style": "primary",
                    "url": log_url
                },
                {
                    "name": "Metrics",
                    "text": "Metrics",
                    "type": "button",
                    "style": "primary",
                    "url": metric_url
                }
            ]
        }]
    }
    r = requests.post(SLACK_WEBHOOK_URL, json=data)
    return r.status_code

alert_to_slack(ALERT_STATE, "https://grafana-logs.dashboard.local", "https://grafana-metrics.dashboard.local")
</code></pre>

<h2>Testing it out</h2>

<p>Time to test it out, so let&rsquo;s assume something is down, then we can react on that event and action the following:</p>

<pre><code>$ python slack_notifier.py down
</code></pre>

<p>Which will look like the following on slack:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98374881-fdf00880-2049-11eb-9d7f-7599665871db.png" alt="image" /></p>

<p>And when recovery is in place, we can action the following:</p>

<pre><code>$ python slack_notifier.py up
</code></pre>

<p>Which will look like this:</p>

<p><img src="https://user-images.githubusercontent.com/567298/98374958-1eb85e00-204a-11eb-8ab0-c6a8a0640752.png" alt="image" /></p>

<h2>Thanks</h2>

<p>That was a basic example on how you can use python to send slack messages.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Slack Webhook for Sending Messages From Applications]]></title>
    <link href="https://blog.ruanbekker.com/blog/2019/04/18/setup-a-slack-webhook-for-sending-messages-from-applications/"/>
    <updated>2019-04-18T06:07:42-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2019/04/18/setup-a-slack-webhook-for-sending-messages-from-applications</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/56354543-55165a00-61d4-11e9-9101-f979dcb4cdb3.png" alt="slack" /></p>

<p>Slack is amazing and I cant live without it.</p>

<p>We can also use custom webhook integrations to allow applications to notify us via slack in response of events.</p>

<h2>What we will be doing</h2>

<p>We will be configuring a custom slack webhook integration and test out the api to show you how easy it is to use it to inform us via slack, whenever something is happening.</p>

<h2>Configuration</h2>

<p>Head over to:
- <a href="https://">https://</a>{your-team}.slack.com/apps/manage/custom-integrations</p>

<p>Select Incoming Webhooks:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56352324-49746480-61cf-11e9-8dd2-e4482fc16f9e.png" alt="" /></p>

<p>Select Add Configuration:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56352369-6ad55080-61cf-11e9-9d98-4193a7aeb321.png" alt="" /></p>

<p>Select the channel it should post to:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56352447-90625a00-61cf-11e9-8f94-098b2c088159.png" alt="" /></p>

<p>Select Add Incoming Webhook Integration.</p>

<p>Save the webhook url that will look like this:</p>

<pre><code>https://hooks.slack.com/services/ABCDEFGHI/ZXCVBNMAS/AbCdEfGhJiKlOpRQwErTyUiO
</code></pre>

<p>You can then further configure the integration.</p>

<h2>Sending Messages</h2>

<pre><code>curl -XPOST -d 'payload={"channel": "#system_events", "username": "My-WebhookBot", "text": "This is posted to #general and comes from a bot named &lt;https://alert-system.com/alerts/1234|webhookbot&gt; for details!", "icon_emoji": ":borat:"}' https://hooks.slack.com/services/xx/xx/xx
</code></pre>

<p>Will result in:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56353019-be946980-61d0-11e9-874c-56074b8d2da7.png" alt="image" /></p>

<p>Message Attachment, Error:</p>

<pre><code>curl -XPOST -d 'payload={"channel": "#system_events", "username": "My-WebhookBot", "text": "*Incoming Alert!*", "icon_emoji": ":borat:", "attachments":[{"fallback":"New open task [Urgent]: &lt;http://url_to_task|Test out Slack message attachments&gt;","pretext":"New open task [Urgent]: &lt;http://url_to_task|Test out Slack message attachments&gt;","color":"#D00000","fields":[{"title":"Notes","value":"This is much easier than I thought it would be.","short":false}]}]}}' https://hooks.slack.com/services/xx/xx/xx
</code></pre>

<p>Results in:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56353534-df10f380-61d1-11e9-92f5-f14a75c19049.png" alt="image" /></p>

<p>Message Attachment, OK:</p>

<pre><code>curl -XPOST -d 'payload={"channel": "#system_events", "username": "My-WebhookBot", "text": "*Status Update:*", "icon_emoji": ":borat:", "attachments":[{"fallback":"New open task has been closed [OK]: &lt;http://url_to_task|Test out Slack message attachments&gt;","pretext":"Task has been closed [OK]: &lt;http://url_to_task|Test out Slack message attachments&gt;","color":"#28B463","fields":[{"title":"Notes","value":"The error has been resolved and the status is OK","short":false}]}]}}' https://hooks.slack.com/services/xx/xx/xx
</code></pre>

<p>Results in:</p>

<p><img src="https://user-images.githubusercontent.com/567298/56353591-f819a480-61d1-11e9-8810-3586f56dd0f3.png" alt="image" /></p>

<h2>Join my Slack</h2>

<p>If you want to join my slack workspace, use <a href="https://join.slack.com/t/linux-hackers/shared_invite/enQtNjE0NDMzODI1OTI2LTFhYTRkNTQxYzAyMjQwNTNhMmE5ZmZkYjU2MDg2NGFlOTYyNmM2MjdkMzg1NTMwOTM0MGY1MjVmMTdhYjkxZTk">this invite link</a></p>

<h2>Resources:</h2>

<ul>
<li><a href="https://htmlcolorcodes.com/">https://htmlcolorcodes.com/</a></li>
<li><a href="https://api.slack.com/docs/message-attachments">https://api.slack.com/docs/message-attachments</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Python Serverless Slack Apps on OpenFaas]]></title>
    <link href="https://blog.ruanbekker.com/blog/2019/02/21/building-python-serverless-slack-apps-on-openfaas/"/>
    <updated>2019-02-21T16:29:15-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2019/02/21/building-python-serverless-slack-apps-on-openfaas</id>
    <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/cf01eefb5b6905f3774376d6d1ed55b8f052d211/68747470733a2f2f626c6f672e616c6578656c6c69732e696f2f636f6e74656e742f696d616765732f323031372f30382f666161735f736964652e706e67" alt="" /></p>

<p>If you are not familliar with OpenFaas, it&rsquo;s definitely time that you should have a look at it, plus, they are doing some pretty awesome work!</p>

<script src="//ap.lijit.com/www/delivery/fpi.js?z=601358&width=300&height=250"></script>


<p></p>

<p>From their documentation: &ldquo;OpenFaaS (Functions as a Service) is a framework for building serverless functions with Docker and Kubernetes which has first class support for metrics. Any process can be packaged as a function enabling you to consume a range of web events without repetitive boiler-plate coding.&rdquo;</p>

<p>Make sure to give them a visit at <a href="https://docs.openfaas.com">openfaas.com</a> and while you are there, in the world of serverless, have a look at how Alex outlines architecture and patterns he applies in a real-world example, <a href="https://www.openfaas.com/blog/serverless-single-page-app/">absolutely great read!</a></p>

<h2>What are we doing today?</h2>

<p>Today we will build a slack app using python which we will deploy as a function on OpenFaas!</p>

<p>Our slash command will make a request to our <code>slack-request</code> function, which will respond with a json string, which will then be parsed in a slack attachment message, then based on your button decision, it will then invoke our <code>slack-interaction</code> function, which will then respond with another message that will allow you to follow the embedded link.</p>

<p>The slack messages are really basic, but you can create a awesome workflow using slack apps. And the best of all, its running on OpenFaas!</p>

<h2>Deploying OpenFaas</h2>

<p>Docker Swarm and Kubernetes are supported, but since I am using Docker Swarm at the moment of writing, this tutorial will show how to deploy OpenFaas to your cluster. Have a look at <a href="https://docs.openfaas.com/deployment/docker-swarm/">OpenFaas Documentation</a> for more detailed information.</p>

<p>Installing OpenFaas CLI for Mac:</p>

<pre><code class="bash">$ brew install faas-cli
</code></pre>

<p>Deploy the OpenFaas Stack:</p>

<pre><code class="bash">$ git clone https://github.com/openfaas/faas
$ cd faas 
$ ./deploy_stack.sh
</code></pre>

<p>Credentials: The default configuration will create credentials for you and returns instructions on how to authorize faas-cli, for demonstration it will look more or less like the following:</p>

<pre><code class="bash">$ echo -n &lt;some_hash_secret&gt; | faas-cli login --username=admin --password-stdin
</code></pre>

<p>The UI will be available at: <a href="http://127.0.0.1:8080.">http://127.0.0.1:8080.</a> For this demonstration we will only use the cli.</p>

<h2>Create the Functions</h2>

<p>I will create 2 python functions:</p>

<ul>
<li>The <code>slack-request</code> function, which will be associated to the slash command</li>
<li>The <code>slack-interactive</code> function, which will be used for interactivity</li>
</ul>


<p>Create a home directory for your functions and create 2 functions:</p>

<pre><code class="bash">$ mkdir -p ~/functions &amp;&amp; cd ~/functions
$ faas-cli new --lang python slack-request
$ faas-cli new --lang python slack-interactive
</code></pre>

<p>Read the <a href="https://docs.openfaas.com/tutorials/first-python-function/">documentation</a> if you&rsquo;d like to learn more.</p>

<p>Configure the first function:</p>

<pre><code class="bash">$ vim slack-request/handler.py
</code></pre>

<p>And our function code:</p>

<pre><code class="python">import json

def handle(req):
    data = {
        "text": "Serverless Message",
        "attachments": [{
            "title": "The Awesome world of Serverless introduces: OpenFaas!",
            "fields": [{
                "title": "Amazing Level",
                "value": "10",
                "short": True
            },
        {
                "title": "Github Stars",
                "value": "15k +",
                "short": True
            }],
            "author_name": "OpenFaas",
            "author_icon": "",
            "image_url": "https://blog.alexellis.io/content/images/2017/08/small.png"
        },
        {
            "title": "About OpenFaas",
            "text": "OpenFaaS is a framework for packaging code, binaries or containers as Serverless functions on any platform."
        },
        {
            "fallback": "Would you recommend OpenFaas to your friends?",
            "title": "Would you recommend OpenFaas to your friends?",
            "callback_id": "response123",
            "color": "#3AA3E3",
            "attachment_type": "default",
            "actions": [
                {
                    "name": "recommend",
                    "text": "Ofcourse!",
                    "type": "button",
                    "value": "recommend"
                },
                {
                    "name": "definitely",
                    "text": "Most Definitely!",
                    "type": "button",
                    "value": "definitely"
                }
            ]
        }]
    }
    return json.dumps(data)
</code></pre>

<p>Since our response needs to be parsed as json, we need to set the content type for our environment in our yaml configuration. Read more on it <a href="https://docs.openfaas.com/reference/yaml/">here</a>. Edit the <code>slack-request.yml</code> :</p>

<pre><code class="yaml">provider:
  name: faas
  gateway: http://&lt;your.gw.address&gt;:8080
functions:
  slack-request:
    lang: python
    handler: ./slack-request
    image: &lt;your-repo&gt;/slack-request:latest
    environment:
      content_type: application/json
</code></pre>

<p>Now we need to build our image, push it to our repository like dockerhub, then deploy to openfaas:</p>

<pre><code class="bash">$ faas-cli build -f ./slack-request.yml 
$ faas-cli push -f ./slack-request.yml 
$ faas-cli deploy -f ./slack-request.yml
Deploying: slack-request.

Deployed. 202 Accepted.
URL: http://your.gw.address:8080/function/slack-interactive
</code></pre>

<p>Configure the <code>slack-interactive</code> function:</p>

<pre><code class="bash">$ vim slack-interactive/handler.py
</code></pre>

<p>Note that whenever your interact with the first message, a post request will be made against the interactivity request url, you will notice that I decoded the payload (but not doing anything with it), where you will find the callback_id, request_url etc. But for simplicity, I am just using a static json message to respond. Our function code:</p>

<pre><code class="python">import json
import urllib

def handle(req):
    urlstring = urllib.unquote(req).decode('utf8').strip('payload=')
    response = json.loads(urlstring)
    data = {
        "attachments": [
            {
                "replace_original": True,
                "response_type": "ephemeral",
                "fallback": "Required plain-text summary of the attachment.",
                "color": "#36a64f",
                "pretext": "Ahh yeah! Great choice, OpenFaas is absolutely brilliant!",
                "author_name": "",
                "author_link": "https://github.com/openfaas/faas",
                "author_icon": "http://flickr.com/icons/bobby.jpg",
                "title": "OpenFaas",
                "title_link": "https://github.com/openfaas/faas",
                "text": "Head over to OpenFaas",
                "image_url": "https://avatars2.githubusercontent.com/u/27013154?s=400&amp;v=4",
                "thumb_url": "https://github.com/openfaas/faas",
                "footer": "Slack Apps built on OpenFaas",
                "footer_icon": "https://a.slack-edge.com/45901/marketing/img/_rebrand/meta/slack_hash_256.png",
                "ts": 123456789
            }
        ]
    }
    return json.dumps(data)
</code></pre>

<p>We also need to set the content type to json:</p>

<pre><code class="bash">provider:
  name: faas
  gateway: http://&lt;your.gw.address&gt;:8080
functions:
  slack-interactive:
    lang: python
    handler: ./slack-interactive
    image: &lt;repo&gt;/slack-interactive:latest
    environment:
      content_type: application/json
</code></pre>

<p>Build, deploy and ship:</p>

<pre><code class="bash">$ faas-cli build -f ./slack-interactive.yml 
$ faas-cli push -f ./slack-interactive.yml
$ faas-cli deploy -f ./slack-interactive.yml

Deploying: slack-interactive.

Deployed. 202 Accepted.
URL: http://&lt;your.gw.address&gt;:8080/function/slack-interactive
</code></pre>

<p>When your functions are deployed, go ahead and create the slack app.</p>

<h2>Create the Slack App</h2>

<ul>
<li>Head over to <a href="https://api.slack.com/apps">https://api.slack.com/apps</a> and create a new app</li>
<li>Create a incoming webhook</li>
<li>Head over to slash commands and create a new command, in my case it was <code>/supersam</code>, set the request url to the public endpoint of your function: <code>http://pub-ip:8080/function/slack-request</code></li>
<li>Head over to interactive components, set the request url for the interactivity: <code>http://pub-ip:8080/function/slack-interactive</code></li>
<li>If you dont have a public routable address, have a look at <a href="https://ngrok.com">ngrok</a></li>
</ul>


<p>Once you are set, you should be able to see the slash command integration in your slack workspace, head over to slacks <a href="https://api.slack.com/docs">documentation</a> if you run into any trouble.</p>

<h2>Test your Slack App</h2>

<p>Now that everything is good to go, its time to test your slack app running on OpenFaas!</p>

<p>Head over to slack and run your command <code>/&lt;your-slack-slash-command&gt;</code>. You should see this output:</p>

<p><img src="https://user-images.githubusercontent.com/567298/53206700-56932e00-363a-11e9-8d44-dfd27f005ab0.png" alt="" /></p>

<p>When you select one of the buttons, you will get a new message:</p>

<p><img src="https://user-images.githubusercontent.com/567298/53206764-74f92980-363a-11e9-91cb-6cfc30c74457.png" alt="" /></p>

<p>This is a real basic example of slack apps, but slack apps are really powerful. You can for example create a slack app that deploys ephemeral environments on swarm, or create change management approval workflows etc.</p>

<p>I hope this was informative, I am really enjoying OpenFaas at the moment and if your have not tested it, I encourage you to try it out, its really, really amazing!</p>
]]></content>
  </entry>
  
</feed>
