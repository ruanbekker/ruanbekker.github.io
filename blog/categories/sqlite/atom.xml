<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sqlite | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/sqlite/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2019-11-24T02:53:41+02:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SQL Inner Joins Examples With SQLite]]></title>
    <link href="http://blog.ruanbekker.com/blog/2019/04/06/sql-inner-joins-examples-with-sqlite/"/>
    <updated>2019-04-06T21:47:38+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2019/04/06/sql-inner-joins-examples-with-sqlite</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55704774-53cb7d00-59dd-11e9-9f43-65ec3aa857b5.png" alt="sqlite" /></p>

<h2>Overview</h2>

<p>In this tutorial we will get started with sqlite and use inner joins to query data from multiple tables to answer specific use case needs.</p>

<h2>Connecting to your Sqlite Database</h2>

<p>Connecting to your database uses the argument to the target database. You can use additional flags to set the properties that you want to enable:</p>

<pre><code class="sql">$ sqlite3 -header -column mydatabase.db
</code></pre>

<p>or you can specify the additional options to your config:</p>

<pre><code class="bash">cat &gt; ~/.sqliterc &lt;&lt; EOF
.mode column
.headers on
EOF
</code></pre>

<p>Then connecting to your database:</p>

<pre><code class="bash">$ sqlite3 mydatabase.db
-- Loading resources from /Users/ruan/.sqliterc
SQLite version 3.16.0 2016-11-04 19:09:39
Enter ".help" for usage hints.
sqlite&gt;
</code></pre>

<h2>Create the Tables</h2>

<p>Create the <code>users</code> table:</p>

<pre><code class="sql">sqlite&gt; create table users (
   ...&gt; id INT(20), name VARCHAR(20), surname VARCHAR(20), city VARCHAR(20),
   ...&gt; age INT(2), credit_card_num VARCHAR(20), job_position VARCHAR(20)
   ...&gt; );
</code></pre>

<p>Create the <code>transactions</code> table:</p>

<pre><code class="sql">sqlite&gt; create table transactions (
   ...&gt; credit_card_num VARCHAR(20), transaction_id INT(20), shop_name VARCHAR(20),
   ...&gt; product_name VARCHAR(20), spent_total DECIMAL(6,2), purchase_option VARCHAR(20)
   ...&gt; );
</code></pre>

<p>You can view the tables using <code>.tables</code>:</p>

<pre><code class="sql">sqlite&gt; .tables
transactions  users 
</code></pre>

<p>And view the schema of the tables using <code>.schema &lt;table-name&gt;</code></p>

<pre><code class="sql">sqlite&gt; .schema users
CREATE TABLE users (
id INT(20), name VARCHAR(20), surname VARCHAR(20), city VARCHAR(20),
age INT(2), credit_card_num VARCHAR(20), job_position VARCHAR(20)
);
</code></pre>

<h2>Write to Sqlite Database</h2>

<p>Now we will populate data to our tables. Insert a record to our users table:</p>

<pre><code class="sql">sqlite&gt; insert into users values(1, 'ruan', 'bekker', 'cape town', 31, '2345-8970-6712-4352', 'devops');
</code></pre>

<p>Insert a record to our transactions table:</p>

<pre><code class="sql">sqlite&gt; insert into transactions values('2345-8970-6712-4352', 981623, 'spaza01', 'burger', 101.02, 'credit_card');
</code></pre>

<h2>Read from the Sqlite Database</h2>

<p>Read the data from the users table:</p>

<pre><code class="sql">sqlite&gt; select * from users;
id          name        surname     city        age         credit_card_num      job_position
----------  ----------  ----------  ----------  ----------  -------------------  ------------
1           ruan        bekker      cape town   31          2345-8970-6712-4352  devops      
</code></pre>

<p>Read the data from the transactions table:</p>

<pre><code class="sql">sqlite&gt; select * from transactions;
credit_card_num      transaction_id  shop_name   product_name  spent_total  purchase_option
-------------------  --------------  ----------  ------------  -----------  ---------------
2345-8970-6712-4352  981623          spaza01     burger        101.02       credit_card    
</code></pre>

<h2>Inner Joins with Sqlite</h2>

<p>This is where stuff gets interesting.</p>

<p>Let&rsquo;s say you want to join data from 2 tables, in this example we have a table with our userdata and a table with transaction data.</p>

<p>Say we want to see the user&rsquo;s name, transaction id, the product they purchased and the total amount spent, we will make use of inner joins.</p>

<p>Example looks like this:</p>

<pre><code class="sql">sqlite&gt; select a.name, b.transaction_id, b.product_name, b.spent_total
   ...&gt; from users
   ...&gt; as a inner join transactions
   ...&gt; as b on a.credit_card_num = b.credit_card_num
   ...&gt; where a.credit_card_num = '2345-8970-6712-4352';
name        transaction_id  product_name  spent_total
----------  --------------  ------------  -----------
ruan        981623          burger         101.02  
</code></pre>

<p>Let&rsquo;s say you dont know the credit_card number but you would like to do a lookup the credit card number via the user&rsquo;s id, then pass the value to the where statement:</p>

<pre><code class="sql">sqlite&gt; select a.name, b.transaction_id, b.product_name, b.spent_total
   ...&gt; from users
   ...&gt; as a inner join transactions
   ...&gt; as b on a.credit_card_num = b.credit_card_num
   ...&gt; where a.credit_card_num = (select credit_card_num from users where id = 1);
name        transaction_id  product_name  spent_total
----------  --------------  ------------  -----------
ruan        981623          burger         101.02   
</code></pre>

<p>Let&rsquo;s create another table called <code>products</code>:</p>

<pre><code class="sql">sqlite&gt; create table products (
   ...&gt; product_id INTEGER(18), product_name VARCHAR(20), 
   ...&gt; product_category VARCHAR(20), product_price DECIMAL(6,2)
   ...&gt; );
</code></pre>

<p>Write a record with product data to the table:</p>

<pre><code class="sql">sqlite&gt; insert into products values(0231, 'burger', 'fast foods', 101.02);
</code></pre>

<p>Now, lets say the question will be that we need to display the users name, credit card number, product name as well as the product category and products price, by only giving you the credit card number</p>

<pre><code class="sql">sqlite&gt; select a.name, b.credit_card_num, c.product_name, c.product_category, c.product_price
   ...&gt; from users
   ...&gt; as a inner join transactions
   ...&gt; as b on a.credit_card_num = b.credit_card_num inner join products
   ...&gt; as c on b.product_name = c.product_name
   ...&gt; where a.credit_card_num = '2345-8970-6712-4352' and c.product_name = 'burger';
name        credit_card_num      product_name  product_category   product_price
----------  -------------------  ------------  -----------------  -------------
ruan        2345-8970-6712-4352  burger        fast foods         101.02   
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Give Your Database a Break and Use Memcached to Return Frequently Accessed Data]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/09/01/give-your-database-a-break-and-use-memcached-to-return-frequently-accessed-data/"/>
    <updated>2018-09-01T23:05:10+02:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/09/01/give-your-database-a-break-and-use-memcached-to-return-frequently-accessed-data</id>
    <content type="html"><![CDATA[<p><img src="https://objects.ruanbekker.com/assets/images/memcached-logo.png" alt="" /></p>

<p>So let&rsquo;s take this scenario:</p>

<p>Your database is getting hammered with requests and building up some load over time and we would like to place a caching layer in front of our database that will return data from the caching layer, to reduce some traffic to our database and also improve our performance for our application.</p>

<h2>The Scenario:</h2>

<p>Our scenario will be very simple for this demonstration:</p>

<ul>
<li>Database will be using SQLite with product information (product_name, product_description)</li>
<li>Caching Layer will be Memcached</li>
<li>Our Client will be written in Python, which checks if the product name is in cache, if not a <code>GET_MISS</code> will be returned, then the data will be fetched from the database, returns it to the client and save it to the cache</li>
<li>Next time the item will be read, a <code>GET_HIT</code> will be received, then the item will be delivered to the client directly from the cache</li>
</ul>


<h2>SQL Database:</h2>

<p>As mentioned we will be using sqlite for demonstration.</p>

<p>Create the table, populate some very basic data:</p>

<pre><code class="sql">$ sqlite3 db.sql -header -column
import sqlite3 as sql
SQLite version 3.16.0 2016-11-04 19:09:39
Enter ".help" for usage hints.

sqlite&gt; create table products (product_name STRING(32), product_description STRING(32));
sqlite&gt; insert into products values('apple', 'fruit called apple');
sqlite&gt; insert into products values('guitar', 'musical instrument');
</code></pre>

<p>Read all the data from the table:</p>

<pre><code class="sql">sqlite&gt; select * from products;
product_name  product_description
------------  -------------------
apple         fruit called apple
guitar        musical instrument
sqlite&gt; .exit
</code></pre>

<h2>Run a Memcached Container:</h2>

<p>We will use docker to run a memcached container on our workstation:</p>

<pre><code class="bash">$ docker run -itd --name memcached -p 11211:11211 rbekker87/memcached:alpine
</code></pre>

<h2>Our Application Code:</h2>

<p>I will use <a href="https://pymemcache.readthedocs.io/en/latest/getting_started.html">pymemcache</a> as our client library. Install:</p>

<pre><code class="bash">$ virtualenv .venv &amp;&amp; source .venv/bin/activate
$ pip install pymemcache
</code></pre>

<p>Our Application Code which will be in Python</p>

<pre><code class="python">import sqlite3 as sql
from pymemcache.client import base

product_name = 'guitar'

client = base.Client(('localhost', 11211))
result = client.get(product_name)

def query_db(product_name):
    db_connection = sql.connect('db.sql')
    c = db_connection.cursor()
    try:
        c.execute('select product_description from products where product_name = "{k}"'.format(k=product_name))
        data = c.fetchone()[0]
        db_connection.close()
    except:
        data = 'invalid'
    return data

if result is None:
    print("got a miss, need to get the data from db")
    result = query_db(product_name)
    if result == 'invalid':
        print("requested data does not exist in db")
    else:
        print("returning data to client from db")
        print("=&gt; Product: {p}, Description: {d}".format(p=product_name, d=result))
        print("setting the data to memcache")
        client.set(product_name, result)

else:
    print("got the data directly from memcache")
    print("=&gt; Product: {p}, Description: {d}".format(p=product_name, d=result))
</code></pre>

<p>Explanation:</p>

<ul>
<li>We have a function that takes a argument of the product name, that makes the call to the database and returns the description of that product</li>
<li>We will make a get operation to memcached, if nothing is returned, then we know the item does not exists in our cache,</li>
<li>Then we will call our function to get the data from the database and return it directly to our client, and</li>
<li>Save it to the cache in memcached so the next time the same product is queried, it will be delivered directly from the cache</li>
</ul>


<h2>The Demo:</h2>

<p>Our Product Name is <code>guitar</code>, lets call the product, which will be the first time so memcached wont have the item in its cache:</p>

<pre><code class="bash">$ python app.py
got a miss, need to get the data from db
returning data to client from db
=&gt; Product: guitar, Description: musical instrument
setting the data to memcache
</code></pre>

<p>Now from the output, we can see that the item was delivered from the database and saved to the cache, lets call that same product and observe the behavior:</p>

<pre><code class="bash">$ python app.py
got the data directly from memcache
=&gt; Product: guitar, Description: musical instrument
</code></pre>

<p>When our cache instance gets rebooted we will lose our data that is in the cache, but since the source of truth will be in our database, data will be re-added to the cache as they are requested. That is one good reason not to rely on a cache service to be your primary data source.</p>

<p>What if the product we request is not in our cache or database, let&rsquo;s say the product <code>tree</code></p>

<pre><code class="bash">$ python app.py
got a miss, need to get the data from db
requested data does not exist in db
</code></pre>

<p>This was a really simple scenario, but when working with masses amount of data, you can benefit from a lot of performance using caching.</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://realpython.com/python-memcache-efficient-caching/">https://realpython.com/python-memcache-efficient-caching/</a></li>
<li><a href="https://github.com/ruanbekker/dockerhub-sources/tree/master/memcached/alpine">https://github.com/ruanbekker/dockerhub-sources/tree/master/memcached/alpine</a></li>
<li><a href="https://pymemcache.readthedocs.io/en/latest/getting_started.html#basic-usage">https://pymemcache.readthedocs.io/en/latest/getting_started.html#basic-usage</a></li>
<li><a href="https://sebastianraschka.com/Articles/2014_sqlite_in_python_tutorial.html">https://sebastianraschka.com/Articles/2014_sqlite_in_python_tutorial.html</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
