<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sshuttle | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/sshuttle/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2022-06-30T01:13:04-04:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Easy Ad-Hoc VPNs With Sshuttle]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/10/26/easy-ad-hoc-vpns-with-sshuttle/"/>
    <updated>2020-10-26T06:59:44+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/10/26/easy-ad-hoc-vpns-with-sshuttle</id>
    <content type="html"><![CDATA[<p>Theres a utility called <code>sshuttle</code> which allows you to VPN via a SSH connection, which is really handy when you quickly want to be able to reach a private range, which is accessible from a public reachable server such as a bastion host.</p>

<p>In this tutorial, I will demonstrate how to install sshuttle on a mac, if you are using a different OS you can see their <a href="https://github.com/sshuttle/sshuttle">documentation</a> and then we will use the VPN connection to reach a &ldquo;prod&rdquo; and a &ldquo;dev&rdquo; environment.</p>

<h2>SSH Config</h2>

<p>We will declare 2 jump-boxes / bastion hosts in our ssh config:</p>

<ul>
<li><code>dev-jump-host</code> is a public server that has network access to our private endpoints in <code>172.31.0.0/16</code></li>
<li><code>prod-jump-host</code> is a public server that has network access to our private endpoints in <code>172.31.0.0/16</code></li>
</ul>


<p>In this case, the above example is 2 AWS Accounts with the same CIDR&rsquo;s, and wanted to demonstrate using sshuttle for this reason, as if we had different CIDRs we can setup a dedicated VPN and route them respectively.</p>

<pre><code>$ cat ~/.ssh/config
Host *
    Port 22
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
    ServerAliveInterval 60
    ServerAliveCountMax 30

Host dev-jump-host
    HostName dev-bastion.mydomain.com
    User bastion
    IdentityFile ~/.ssh/id_rsa

Host prod-jump-host
    HostName prod-bastion.mydomain.com
    User bastion
    IdentityFile ~/.ssh/id_rsa
</code></pre>

<h2>Install sshuttle</h2>

<p>Install sshuttle for your operating system:</p>

<pre><code># macos
$ brew install shuttle

# debian
$ apt install sshuttle
</code></pre>

<h2>Usage</h2>

<p>To setup a vpn tunnel to route connections to our prod account:</p>

<pre><code>$ sshuttle -r prod-jump-host 172.31.0.0/16
</code></pre>

<p>Or to setup a vpn tunnel to route connections to our dev account:</p>

<pre><code>$ sshuttle -r dev-jump-host 172.31.0.0/16
</code></pre>

<p>Once one of your chosen sessions establishes, you can use a new terminal to access your private network, as example:</p>

<pre><code>$ nc -vz 172.31.23.40 22
</code></pre>

<h2>Bash Functions</h2>

<p>We can wrap this into functions, so we can use <code>vpn_dev</code> or <code>vpn_prod</code> which aliases to the commands shown below:</p>

<pre><code>$ cat ~/.functions
vpn_prod(){
  sshuttle -r prod-jump-host 172.31.0.0/16
}

vpn_dev(){
  sshuttle -r dev-jump-host 172.31.0.0/16
}
</code></pre>

<p>Now source that to your environment:</p>

<pre><code>$ source ~/.functions
</code></pre>

<p>Then you should be able to use <code>vpn_dev</code> and <code>vpn_prod</code> from your terminal:</p>

<pre><code>$ vpn_prod
[local sudo] Password:
Warning: Permanently added 'xx,xx' (ECDSA) to the list of known hosts.
client: Connected.
</code></pre>

<p>And in a new terminal we can connect to a RDS MySQL Database sitting in a private network:</p>

<pre><code>$ mysql -h my-prod-db.pvt.mydomain.com -u dbadmin -p$pass
mysql&gt;
</code></pre>

<h2>Sshuttle as a Service</h2>

<p>You can create a systemd unit file to run a sshuttle vpn as a service. In this scenario I provided 2 different vpn routes, dev and prod, so you can create 2 seperate systemd unit files, but my case I will only create for prod:</p>

<pre><code>$ cat /etc/systemd/system/vpn_prod.service
[Unit]
Description=ShuttleProdVPN
Wants=network-online.target
After=network-online.target
StartLimitIntervalSec=500
StartLimitBurst=5

[Service]
User=root
Group=root
Type=simple
Restart=on-failure
RestartSec=10s
ExecStart=/usr/bin/sshuttle -r prod-jump-host 172.31.0.0/16

[Install]
WantedBy=multi-user.target
</code></pre>

<p>Reload the systemd daemon:</p>

<pre><code>$ sudo systemctl daemon-reload
</code></pre>

<p>Enable and start the service:</p>

<pre><code>$ sudo systemctl enable vpn_prod
$ sudo systemctl start vpn_prod
</code></pre>

<h2>Thank You</h2>

<p>Thanks for reading.</p>
]]></content>
  </entry>
  
</feed>
