<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Taskfile | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/taskfile/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2022-09-20T03:07:55-04:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Task Runner With YAML Config Written in Go]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/08/01/task-runner-with-yaml-config-written-in-go/"/>
    <updated>2021-08-01T06:11:54-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/08/01/task-runner-with-yaml-config-written-in-go</id>
    <content type="html"><![CDATA[<p><img src="https://blog.ruanbekker.com/images/ruanbekker-header-photo.png" alt="" /></p>

<p><a href="https://taskfile.dev/">Task</a> (aka Taskfile) is a task runner written in <a href="https://golang.org/">Go</a>, which is similar to GNU Make, but in my opinion is a lot easier to use as you specify your tasks in yaml.</p>

<h2>What to expect</h2>

<p>In this post we will go through a quick demonstration using Task, how to install Task, as well as a couple of basic examples to get you up and running with Task.</p>

<h2>Install</h2>

<p>For mac, installing task::</p>

<pre><code class="bash">$ brew install go-task/tap/go-task
</code></pre>

<p>For linux, installing task:</p>

<pre><code class="bash">$ sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
</code></pre>

<p>Or manual installation for arm as an example:</p>

<pre><code class="bash">$ pushd /tmp
$ wget https://github.com/go-task/task/releases/download/v3.7.0/task_linux_arm.tar.gz
$ tar -xvf task_linux_arm.tar.gz
$ sudo mv task /usr/local/bin/task
$ sudo chmod +x /usr/local/bin/task
$ popd
</code></pre>

<p>Verify that task is installed:</p>

<pre><code class="bash">$ task --version
Task version: v3.7.0
</code></pre>

<p>For more information check the installation page:
- <a href="https://taskfile.dev/#/installation">https://taskfile.dev/#/installation</a></p>

<h2>Usage</h2>

<p>Task uses a default config file: <code>Taskfile.yml</code> in the current working directory where you can provide context on what your tasks should do.</p>

<p>To generate a <code>Taskfile.yml</code> with example config, task gives us a <code>--init</code> flag to generate a sample.</p>

<p>For a basic hello-world example, our task <code>helloworld</code> will echo out <code>hello, world!</code>. To generate the sample code, run:</p>

<pre><code class="bash">task --init
</code></pre>

<p>Then update the config, to the following:</p>

<pre><code class="yaml">version: '3'

tasks:
  helloworld:
    desc: prints out hello world message
    cmds:
      - echo "hello, world!"
</code></pre>

<p>To demonstrate what the config means:</p>

<ul>
<li><code>tasks</code>: refers to the list of tasks</li>
<li><code>helloworld</code>: is the task name</li>
<li><code>desc</code>: describes the task, useful for listing tasks</li>
<li><code>cmds</code>: the commands that the task will execute</li>
</ul>


<p>To list all our tasks for our taskfile:</p>

<pre><code class="bash">$ task --list
task: Available tasks for this project:
* helloworld:   prints out hello world message
</code></pre>

<p>Which we call using the application <code>task</code> with the argument of the task name:</p>

<pre><code class="bash">$ task helloworld
task: [helloworld] echo "hello, world!"
hello, world!
</code></pre>

<p>We can also reduce the output verbosity using <code>silent</code>:</p>

<pre><code class="yaml">version: '3'

tasks:
  helloworld:
    desc: prints out hello world message
    cmds:
      - echo "hello, world!"
    silent: true
</code></pre>

<p>Which will result in:</p>

<pre><code class="bash">$ task helloworld
hello, world!
</code></pre>

<p>For a example using environment variables, we can use it in two ways:</p>

<ul>
<li>per task</li>
<li>globally, across all tasks</li>
</ul>


<p>For using environment variables per task:</p>

<pre><code class="yaml">version: '3'

tasks:
  helloworld:
    cmds:
      - echo "hello, $WORD!"
    env:
      WORD: world
</code></pre>

<p>Results in:</p>

<pre><code class="bash">$ task helloworld
task: [helloworld] echo "hello, $WORD!"
hello, world!
</code></pre>

<p>For using environment variables globally across all tasks:</p>

<pre><code class="yaml">version: '3'

env:
  WORD: world

tasks:
  helloworld:
    cmds:
      - echo "hello, $WORD!"
    env:
      GREETING: hello

  byeworld:
    cmds:
      - echo "$GREETING, $WORD!"
    env:
      GREETING: bye
</code></pre>

<p>Running our first task:</p>

<pre><code class="bash">$ task helloworld
task: [helloworld] echo "hello, $WORD!"
hello, world!
</code></pre>

<p>And running our second task:</p>

<pre><code class="bash">$ task byeworld
task: [byeworld] echo "$GREETING, $WORD!"
bye, world!
</code></pre>

<p>To store your environment variables in a <code>.env</code> file, you can specify it as the following in your <code>Taskfile.yml</code>:</p>

<pre><code class="yaml">version: '3'

dotenv: ['.env']

tasks:
  helloworld:
    cmds:
      - echo "hello, $WORD!"
    env:
      GREETING: hello

  byeworld:
    cmds:
      - echo "$GREETING, $WORD!"
    env:
      GREETING: bye
</code></pre>

<p>And in your <code>.env</code>:</p>

<pre><code>WORD=world
</code></pre>

<p>Then you should see your environment variables referenced from the <code>.env</code> file:</p>

<pre><code>$ task helloworld
task: [helloworld] echo "hello, $WORD!"
hello, world!
</code></pre>

<p>We can also reference config using <code>vars</code>:</p>

<pre><code class="yaml">version: '3'

vars:
  GREETING: Hello, World!

tasks:
  default:
    desc: prints out a message
    cmds:
      - echo ""
</code></pre>

<p>In this case our task name is <code>default</code>, therefore we can only run <code>task</code> without any arguments, as default with be the default task:</p>

<pre><code>$ task
task: [default] echo "Hello, World!"
Hello, World!
</code></pre>

<p>To run both tasks with one command, you can specify dependencies, so if we define a task with zero commands but just dependencies, it will call those tasks and execute them:</p>

<pre><code class="yaml">version: '3'

env:
  WORD: world

tasks:
  helloworld:
    cmds:
      - echo "hello, $WORD!"
    env:
      GREETING: hello

  byeworld:
    cmds:
      - echo "$GREETING, $WORD!"
    env:
      GREETING: bye

  all:
    deps: [helloworld, byeworld]
</code></pre>

<p>So when we run the <code>all</code> task:</p>

<pre><code class="bash">$ task all
task: [helloworld] echo "hello, $WORD!"
hello, world!
task: [byeworld] echo "$GREETING, $WORD!"
bye, world!
</code></pre>

<p>For more usage examples, have a look at their documentation:
- <a href="https://taskfile.dev/#/usage">https://taskfile.dev/#/usage</a></p>

<h2>Thanks</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
</feed>
