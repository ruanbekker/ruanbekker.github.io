<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Traefik | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/traefik/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2017-09-08T16:41:48-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Modern Reverse Proxy With Traefik on Docker Swarm]]></title>
    <link href="http://blog.ruanbekker.com/blog/2017/08/24/modern-reverse-proxy-with-traefik-on-docker-swarm/"/>
    <updated>2017-08-24T19:00:33-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2017/08/24/modern-reverse-proxy-with-traefik-on-docker-swarm</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/31991539/images/traefik.png" alt="" /></p>

<p><a href="https://traefik.io/">Traefik</a> is a modern load balancer and reverse proxy built for micro services.</p>

<p>We will build 4 WebServices with Traefik, where we will go through the following scenarios:</p>

<ul>
<li>Hostname Based Routingi (With Path&rsquo;s and Without)</li>
<li>Path Based Routing</li>
</ul>


<h2>Pre-Requisites:</h2>

<p>From your DNS Provider add wildcard entries to the Docker Swarm Public IPs:</p>

<ul>
<li><code>apps.domain.com</code> -> A Record to each Docker Swarm Node</li>
<li><code>*.apps.domain.com</code> => apps.doamin.com</li>
</ul>


<p>This will allow us to create web applications on the fly.</p>

<h2>Static Website with Traefik:</h2>

<p>Create Traefik Proxy:</p>

<pre><code>docker service create \
--name traefik \
--constraint 'node.role==manager' \
--publish 80:80 \
--publish 443:443 \
--publish 8080:8080 \
--mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \
--network appnet \
traefik:camembert \
--docker --docker.swarmmode  \
--docker.domain=apps.domain.com \
--docker.watch \
--logLevel=DEBUG \
--web
</code></pre>

<h2>Build a WebService with 2 Endpoints:</h2>

<p>Our Website will have:</p>

<ul>
<li><code>/</code></li>
<li><code>/test/</code></li>
</ul>


<p>Our <code>Dockerfile</code>:</p>

<pre><code>FROM alpine:edge

RUN apk update \
    &amp;&amp; apk add lighttpd

ADD htdocs /var/www/localhost/htdocs

CMD ["lighttpd", "-D", "-f", "/etc/lighttpd/lighttpd.conf"]
</code></pre>

<p>Our <code>htdocs</code> directory:</p>

<pre><code>find ./htdocs/
./htdocs/
./htdocs/index.html
./htdocs/test
./htdocs/test/index.html
</code></pre>

<p>Building and Push the Image to a Registry of your choice:</p>

<pre><code>docker login registry.gitlab.com
docker build -t registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:test
docker push registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:test
</code></pre>

<h2>Create the 1st Service, No Hostname or Path based specified:</h2>

<p>The Service will allow us to view <code>/</code> and <code>/test/</code> paths, and also enable us to use the service name as the subdomain, or the domain specified in the <code>traefik</code> service:</p>

<pre><code>docker service create --name web1 --label 'traefik.port=80'  --network appnet --with-registry-auth registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:test
</code></pre>

<p>Testing the service:</p>

<pre><code>$ curl http://web1.apps.domain.com/
&lt;html&gt;
Root Page
&lt;/html&gt;
</code></pre>

<pre><code>$ curl http://web2.apps.domain.com/test/
&lt;html&gt;
Test Page
&lt;/html&gt;
</code></pre>

<p>and</p>

<pre><code>$ curl http://apps.domain.com/test/
&lt;html&gt;
Test Page
&lt;/html&gt;
</code></pre>

<p>but</p>

<pre><code>$ curl http://foo.apps.domain.com/test/
404 page not found
</code></pre>

<h2>Create the 2nd Service, Only 1 Path Based Routing:</h2>

<p>This service will only allow us to view the <code>/test/</code> endpoint:</p>

<pre><code>$ docker service create --name website2 --label 'traefik.port=80' --label traefik.frontend.rule="Path: /test/" --network appnet --with-registry-auth registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:test
</code></pre>

<p>Testing the Service:</p>

<pre><code>$ curl http://web1.apps.domain.com/
404 page not found
</code></pre>

<pre><code>$ curl http://web2.apps.domain.com/test/
&lt;html&gt;
Test Page
&lt;/html&gt;
</code></pre>

<h2>Hostname Based and Path Based Routing:</h2>

<pre><code>$ docker service create \
--name web3 \
--label 'traefik.port=80' \
--label traefik.frontend.rule="Host:apps.domain.com; Path: /test/" \
--network appnet \
--with-registry-auth registry.gitlab.com/rbekker87/docker/lighttpd:u1t-test
</code></pre>

<p>Test the <code>/</code> endpoint, which should not work:</p>

<pre><code>$ curl  http://apps.domain.com/
404 page not found
</code></pre>

<p>and the <code>/test/</code> endpoint:</p>

<pre><code>$ curl  http://apps.domain.com/test/
&lt;html&gt;
Test Page
&lt;/html&gt;
</code></pre>

<p>Also, any other FQDN that is specified will not work as it does not match the <code>traefik.frontend.rule</code>:</p>

<pre><code>$ curl  http://web3.apps.domain.com/
404 page not found
</code></pre>

<h2>Strictly Hostname Based Routing and not specifying any paths:</h2>

<pre><code>$ docker service create \
--name web4 \
--label 'traefik.port=80' \
--label traefik.frontend.rule="Host:apps.domain.com" \
--network appnet \
--with-registry-auth registry.gitlab.com/&lt;user&gt;/&lt;repo&gt;/lighttpd:u1t-test
</code></pre>

<p>Testing the Service:</p>

<pre><code>$ curl http://apps.domain.com/
&lt;html&gt;
Root Page
&lt;/html&gt;
</code></pre>

<pre><code>$ curl http://apps.domain.com/test/
&lt;html&gt;
Test Page
&lt;/html&gt;
</code></pre>

<p>Anything specified other than that, will result in a 404 Response.</p>
]]></content>
  </entry>
  
</feed>
