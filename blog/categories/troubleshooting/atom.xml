<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Troubleshooting | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/troubleshooting/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2022-02-20T13:13:11-05:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sysadmin Linux Troubleshooting Cheatsheet]]></title>
    <link href="https://blog.ruanbekker.com/blog/2019/02/10/sysadmin-linux-troubleshooting-cheatsheet/"/>
    <updated>2019-02-10T14:17:54-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2019/02/10/sysadmin-linux-troubleshooting-cheatsheet</id>
    <content type="html"><![CDATA[<p>This is a one pager of all the commands I use when I have to troubleshoot problems. This post will be updated as time goes by.</p>

<h2>Curl / Web Response Times</h2>

<p>Template file:</p>

<pre><code class="bash">$ cat curl-format.txt
time_namelookup:  %{time_namelookup}\n
time_connect:  %{time_connect}\n
time_appconnect:  %{time_appconnect}\n
time_pretransfer:  %{time_pretransfer}\n
time_redirect:  %{time_redirect}\n
time_starttransfer:  %{time_starttransfer}\n
----------\n
time_total:  %{time_total}\n
</code></pre>

<p>The host header, source addres, destination address:</p>

<pre><code class="bash">$ curl -sk -w "@curl-format.txt" -o /dev/null -H "Host: remote-host.mydomain.com" 10.0.2.10 https://10.244.0.240:443 -L

time_namelookup:  0.012178
time_connect:  0.012225
time_appconnect:  0.062149
time_pretransfer:  0.062175
time_redirect:  0.000172
time_starttransfer:  0.125631
----------
time_total:  0.125849
</code></pre>

<h2>MTR / Network Latencies / Packetloss</h2>

<p>No dns, TCP, counts, port, source address, destination address:</p>

<pre><code class="bash">$ mtr -n -T -c 10 --port 443 10.2.0.2 10.244.10.5 --report
Start: Sun Feb 10 19:04:50 2019
HOST: my-internet-gatewewy         Loss%   Snt   Last   Avg  Best  Wrst StDev
  1.|-- 172.18.110.22              0.0%    10    0.3   0.3   0.3   0.3   0.0
  2.|-- 172.18.110.22              0.0%    10    0.3   0.3   0.3   0.3   0.0
  3.|-- 172.18.110.22              0.0%    10    0.3   0.3   0.3   0.3   0.0
</code></pre>

<h2>TCPTraceroute</h2>

<p>No dns, TCP, port, source address, destination address:</p>

<pre><code class="bash">$ traceroute -T -n -p 443 -s 10.80.4.7 10.2.129.4; done
traceroute to 10.2.129.4 (10.2.129.4), 30 hops max, 60 byte packets
 1  10.80.4.1   0.322 ms  0.291 ms  0.224 ms
 2  10.2.129.4  179.090 ms  179.022 ms  179.023 ms
</code></pre>

<h2>Connection Related:</h2>

<p>Connection flow: <a href="https://askubuntu.com/questions/538443/whats-the-difference-between-port-status-listening-time-wait-close-wait">Thanks to</a></p>

<pre><code>Consider two programs attempting a socket connection (call them a and b). Both set up sockets and transition to the LISTEN state. Then one program (say a) tries to connect to the other (b). a sends a request and enters the SYN_SENT state, and b receives the request and enters the SYN_RECV state. When b acknowledges the request, they enter the ESTABLISHED state, and do their business. Now a couple of things can happen:

    a wishes to close the connection, and enters FIN_WAIT1. b receives the FIN request, sends an ACK (then a enters FIN_WAIT2), enters CLOSE_WAIT, tells a it is closing down and the enters LAST_ACK. Once a acknowledges this (and enters TIME_WAIT), b enters CLOSE. a waits a bit to see if anythings is left, then enters CLOSE.
    a and b have finished their business and decide to close the connection (simultaneous closing). When a is in FIN_WAIT, and instead of receiving an ACK from b, it receives a FIN (as b wishes to close it as well), a enters CLOSING. But there are still some messages to send (the ACK that a is supposed to get for its original FIN), and once this ACK arrives, a enters TIME_WAIT as usual.
</code></pre>

<p>Active Connections:</p>

<pre><code>$ netstat -n -A  inet | grep -v "127.0.0.1"
</code></pre>

<p>Established Connections:</p>

<pre><code>$ netstat -nputw | grep ESTABLISHED
$ netstat -antp | grep :3306 | grep ESTABLISHED
</code></pre>

<p>Time Wait Connections:</p>

<pre><code>$ netstat -antp | grep TIME_WAIT
</code></pre>

<p>How many connections:</p>

<pre><code>$ wc -l /proc/net/tcp
</code></pre>

<p>Listing Open files per Port:</p>

<pre><code>$ lsof -i:3306
</code></pre>

<p>Listing Open files per User:</p>

<pre><code>$ lsof -u glassfish
</code></pre>

<h2>Network Throughput</h2>

<p>You can test the network throughput between two linux hosts with <code>iperf</code>:</p>

<p>On side-a we will start the server in TCP mode:</p>

<pre><code>$ iperf -s
------------------------------------------------------------
Server listening on TCP port 5001
TCP window size:  128 KByte (default)
------------------------------------------------------------
</code></pre>

<p>On side-b we will start the client, which connects to the server:</p>

<pre><code>$ iperf -c 192.168.1.213
------------------------------------------------------------
Client connecting to 192.168.1.213, TCP port 5001
TCP window size: 43.8 KByte (default)
------------------------------------------------------------
[  3] local 192.168.0.114 port 43870 connected with 192.168.1.213 port 5001
[ ID] Interval       Transfer     Bandwidth
[  3]  0.0-10.0 sec  11.4 MBytes  9.54 Mbits/sec
</code></pre>

<p>We can also run this in UDP mode where the server will run <code>iperf -s -u</code> and the client will run <code>iperf -c host-address -u</code></p>

<h2>Resources</h2>

<ul>
<li><a href="https://aws.amazon.com/premiumsupport/knowledge-center/troubleshoot-vpn-packet-loss/">AWS: Troubleshoot VPN Latencies</a></li>
<li><a href="https://www.linode.com/docs/networking/diagnostics/diagnosing-network-issues-with-mtr/">Linode: Diagnose Network Issues with MTR</a></li>
</ul>


<h2>Thank You</h2>

<p>Please feel free to show support by, <strong>sharing</strong> this post, making a <strong>donation</strong>, <strong>subscribing</strong> or <strong>reach out to me</strong> if you want me to demo and write up on any specific tech topic.</p>

<center>
<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
<input type="hidden" name="cmd" value="_s-xclick" />
<input type="hidden" name="hosted_button_id" value="W7CBGYTCWGANQ" />
<input type="image" src="https://user-images.githubusercontent.com/567298/49853901-461c3700-fdf1-11e8-9d80-8a424a3173af.png" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
<img alt="" border="0" src="https://www.paypal.com/en_ZA/i/scr/pixel.gif" width="1" height="1" />
</form>
</center>


<p><br></p>

<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"rbekker87","width":728,"height":90,"sid":"Chitika Default"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>


<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Investigating High Request Latencies on Amazon DynamoDB]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/09/05/investigating-high-request-latencies-on-amazon-dynamodb/"/>
    <updated>2018-09-05T18:03:09-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/09/05/investigating-high-request-latencies-on-amazon-dynamodb</id>
    <content type="html"><![CDATA[<p>While testing DynamoDB for a specific use case I picked up at times where a GetItem will incur about 150ms in RequestLatency on the Max Statistic. This made me want to understand the behavior that I&rsquo;m observing.</p>

<p>I will go through my steps drilling down on pointers where latency can be reduced.</p>

<script id="mNCC" language="javascript">
    medianet_width = "728";
    medianet_height = "90";
    medianet_crid = "218284798";
    medianet_versionId = "3111299"; 
  </script>


<script src="//contextual.media.net/nmedianet.js?cid=8CUD78FSV"></script>


<h2>DynamoDB Performance Testing Overview</h2>

<p>Tests:</p>

<ul>
<li>Create 2 Tables with 10 WCU / 10 RCU, one encrypted, one non-encrypted</li>
<li>Seed both tables with 10 items, 18KB per item</li>
<li>Do 4 tests:

<ul>
<li>Encrypted: Consistent Reads</li>
<li>Encrypted: Eventual Consistent Reads</li>
<li>Non-Encrypted: Consistent Reads</li>
<li>Non-Encrypted: Eventual Consistent Reads</li>
</ul>
</li>
</ul>


<h2>Seed the Table(s):</h2>

<p>Seed the Table with 10 items, 18KB per item:</p>

<pre><code>from boto3 import Session as boto3_session
from time import sleep, strftime
from random import sample

# session ids that will be fetched in a random.choice order
session_ids = [
    '77c81e29-c86a-411e-a5b3-9a8fb3b2595f',
    'b9a2b8ee-17ab-423c-8dbc-91020cd66097',
    'cbe01734-c506-4998-8727-45f1aa0de7e3',
    'e789f69b-420b-4e6d-9095-cd4482820454',
    'c808a4e6-311e-48d2-b3fd-e9b0602a16ac',
    '2ddf0416-6206-4c95-b6e5-d88b5325a7b1',
    'e8157439-95f4-49a9-91e3-d1afc60a812f',
    'f032115b-b04f-423c-9dfe-e004445b771b',
    'dd6904c5-b65b-4da4-b0b2-f9e1c5895086',
    '075e59be-9114-447b-8187-a0acf1b2f127'
]

generated_string = ''

# instantiating dynamodb client
session = boto3_session(region_name='eu-west-1', profile_name='perf')
dynamodb = session.client('dynamodb')

timestamp = strftime("%Y-%m-%dT-%H:%M")
results = open('dynamodb-put-results_{}.txt'.format(timestamp), 'a')
count = 0

for sid in session_ids:
    count += 1
    gen_data = ''.join(sample(generated_string, len(generated_string)))
    sleep(1)

    response = dynamodb.put_item(
        TableName='ddb-perf-testing',
        Item={
            'session_id': {'S': sid },
            'data': {'S': gen_data },
            'item_num': {'S': str(count) }
        }
    )

    results.write('Call Number: {call_num} \n'.format(call_num=count))
    results.write('Call ResponseMetadata: {metadata} \n\n'.format(metadata=response['ResponseMetadata']))

results.close()
</code></pre>

<h2>Read from the Table(s):</h2>

<ul>
<li>Read 18KB per second for 3 Hours:</li>
</ul>


<pre><code>from boto3 import Session as boto3_session
from time import sleep, strftime
from random import choice

# delay between each iteration
iteration_delay = 1

# iterations number - 3 hours
iterations = 10800

# session ids that will be fetched in a random.choice order
session_ids = [
    '77c81e29-c86a-411e-a5b3-9a8fb3b2595f',
    'b9a2b8ee-17ab-423c-8dbc-91020cd66097',
    'cbe01734-c506-4998-8727-45f1aa0de7e3',
    'e789f69b-420b-4e6d-9095-cd4482820454',
    'c808a4e6-311e-48d2-b3fd-e9b0602a16ac',
    '2ddf0416-6206-4c95-b6e5-d88b5325a7b1',
    'e8157439-95f4-49a9-91e3-d1afc60a812f',
    'f032115b-b04f-423c-9dfe-e004445b771b',
    'dd6904c5-b65b-4da4-b0b2-f9e1c5895086',
    '075e59be-9114-447b-8187-a0acf1b2f127'
]

# instantiating dynamodb client
session = boto3_session(region_name='eu-west-1', profile_name='perf')
dynamodb = session.client('dynamodb')
dynamodb-table = 'ddb-perf-testing'

timestamp = strftime("%Y-%m-%dT-%H:%M")
results = open('dynamodb-results_{}.txt'.format(timestamp), 'a')

for iteration in range(iterations):
    count = iteration + 1
    print(count)
    sleep(iteration_delay)

    response = dynamodb.get_item(
        TableName=dynamodb-table,
        Key={'session_id': {'S': choice(session_ids)}},
        ConsistentRead=False
    )

    results.write('Call Number: {cur_iter}/{max_iter} \n'.format(cur_iter=count, max_iter=iterations))
    results.write('Call Item Response =&gt; Key: {attr_id}, Key Number:{attr_num} \n'.format(attr_id=response['Item']['session_id']['S'], attr_num=response['Item']['item_num']['S']))
    results.write('Call ResponseMetadata: {metadata} \n\n'.format(metadata=response['ResponseMetadata']))

results.close()
</code></pre>

<h2>Results</h2>

<p><img src="https://cdn.pbrd.co/images/Hp8NsH8.png" alt="" /></p>

<h2>Notes from AWS Support:</h2>

<p>Reasons for High Latencies:</p>

<ul>
<li>RequestLatency is a Server Side Metric</li>
<li>Long requests could relate to metadata lookups</li>
<li>Executing Relative Low Amount of Requests there is Frequent Metadata Lookups; This may cause a spike in latency</li>
<li>Consistent Requests can have higher average latency then Eventual Consistent Reads</li>
<li>Requests in general can encounter higher then normal latency at times, due to network issue, storage node issue, metadata issue.</li>
<li>The p90 should still be single digit</li>
<li>Using Encryption has to interact with KMS API as well (mechanisms in place to deal with KMS integration though to still offer p90 under 10 ms)</li>
<li>DAX: Strongly consistent reads will be passed on to DynamoDB and not handled by the cache</li>
<li>1 RCU reading in Eventual Consistent manner can read 8 kb</li>
<li>Consistent read costs double an eventual consistent read</li>
<li>DDB not 100% of requests will be under 10 ms</li>
</ul>


<p>Resources:
- <a href="https://aws.amazon.com/blogs/developer/tuning-the-aws-sdk-for-java-to-improve-resiliency/">https://aws.amazon.com/blogs/developer/tuning-the-aws-sdk-for-java-to-improve-resiliency/</a>
- <a href="https://aws.amazon.com/blogs/developer/enabling-metrics-with-the-aws-sdk-for-java/">https://aws.amazon.com/blogs/developer/enabling-metrics-with-the-aws-sdk-for-java/</a>
- <a href="https://en.wikipedia.org/wiki/Eventual_consistency">https://en.wikipedia.org/wiki/Eventual_consistency</a></p>
]]></content>
  </entry>
  
</feed>
