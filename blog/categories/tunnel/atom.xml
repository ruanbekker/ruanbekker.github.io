<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tunnel | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/tunnel/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2020-05-22T07:16:43+02:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup a SSH Tunnel With the Sshtunnel Module in Python]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/04/23/setup-a-ssh-tunnel-with-the-sshtunnel-module-in-python/"/>
    <updated>2018-04-23T17:56:46+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/04/23/setup-a-ssh-tunnel-with-the-sshtunnel-module-in-python</id>
    <content type="html"><![CDATA[<p>Sometimes we need to restrict access to a port, where a port should listen on localhost, but you want to access that port from a remote source. One secure way of doing that, is to establish a SSH Tunnel to the remote side, and forward to port via the SSH Tunnel.</p>

<p>Today we will setup a Flask Web Service on our Remote Server (Side B) which will be listening on <code>127.0.0.1:5000</code> and setup the SSH Tunnel with the <code>sshtunnel</code> module in Python from our client side (Side A). Then we will make a GET request on our client side to the port that we are forwarding via the tunnel to our remote side.</p>

<p><a href="https://bekkerclothing.com/collections/developer?utm_source=blog.ruanbekker.com&utm_medium=blog&utm_campaign=leaderboard_ad" target="_blank"><img alt="bekker-clothing-developer-tshirts" src="https://user-images.githubusercontent.com/567298/70170981-7c278a80-16d6-11ea-9759-6621d02c1423.png"></a></p>

<h2>Remote Side:</h2>

<p>Our Demo Python Flask Application:</p>

<pre><code class="python">from flask import Flask

app = Flask(__name__)

@app.route('/')
def index():
    return 'OK'

if __name__ == '__main__':
    app.run(host='127.0.0.1', port=5000)
</code></pre>

<p>Run the server:</p>

<pre><code class="bash">$ python app.py
Listening on 127.0.0.1:5000
</code></pre>

<h2>Client Side:</h2>

<p>From our client side we first need to install sshtunnel via pip:</p>

<pre><code class="bash">$ pip install sshtunnel requests --user
</code></pre>

<p>Our code for our client that will establish the tunnel and do the GET request:</p>

<pre><code class="python">from sshtunnel import SSHTunnelForwarder
import requests

remote_user = 'ubuntu'
remote_host = '192.168.10.10'
remote_port = 22
local_host = '127.0.0.1'
local_port = 5000

server = SSHTunnelForwarder(
   (remote_host, remote_port),
   ssh_username=remote_user,
   ssh_private_key='/home/ubuntu/.ssh/mykey.pem',
   remote_bind_address=(local_host, local_port),
   local_bind_address=(local_host, local_port),
   )

server.start()

headers = { 'User-Agent': 'Mozilla/5.0 (Windows NT 6.0; WOW64; rv:24.0) Gecko/20100101 Firefox/24.0'}
r = requests.get('http://127.0.0.1:5000', headers=headers).content
print(r)
server.stop()
</code></pre>

<p>Running our app:</p>

<pre><code class="bash">$ python ssh_tunnel.py
OK
</code></pre>

<p>So we have sucessfully established our ssh tunnel to our remote side, and able to access the network restricted port via the tunnel.</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://pypi.org/project/sshtunnel/">SSHTunnel</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Routing Web Traffic With a SOCKS Tunnel]]></title>
    <link href="https://blog.ruanbekker.com/blog/2017/11/14/routing-web-traffic-with-a-socks-tunnel/"/>
    <updated>2017-11-14T17:17:07+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2017/11/14/routing-web-traffic-with-a-socks-tunnel</id>
    <content type="html"><![CDATA[<p>I wanted to access a Non Standard HTTP Port on one of my RaspberryPi Hosts, which was not directly available to the Internet, so I have chosen to establish a SOCKS Tunnel to achieve that.</p>

<h2>Web Application on my LAN</h2>

<p>Getting my RaspberryPi&rsquo;s Private IP Address:</p>

<pre><code class="bash">$ ifconfig eth0 | grep 'inet 192' | awk '{print $2}'
192.168.1.118
</code></pre>

<p>For demonstration purposes, I will use Python&rsquo;s SimpleHTTPServer:</p>

<pre><code class="bash">$ mkdir web
$ cd web
$ echo 'yeehaa' &gt; index.html
$ python -m SimpleHTTPServer 5050
Serving HTTP on 0.0.0.0 port 5050 ...
</code></pre>

<h2>Establish the SOCKS Tunnel</h2>

<p>From my laptop, establishing the SOCKS Tunnel with SSH, you can use <code>-f</code> to fork it in the background:</p>

<pre><code class="bash">$ ssh -D 8157 -CqN user@home.domain.com
</code></pre>

<h2>Configure your Browser:</h2>

<p>Configure your browser to Proxy via:</p>

<ul>
<li>Host: localhost</li>
<li>Port: 8157</li>
</ul>


<p>Now when you access the destined host&rsquo;s private ip, you will get a response:</p>

<pre><code class="bash">Browse to http://192.168.1.118:5050/ and in my case my response is:
-&gt; yeehaa
</code></pre>
]]></content>
  </entry>
  
</feed>
