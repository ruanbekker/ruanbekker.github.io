<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ubuntu | Ruan Bekker's Blog]]></title>
  <link href="http://blog.ruanbekker.com/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://blog.ruanbekker.com/"/>
  <updated>2018-07-16T16:54:35-04:00</updated>
  <id>http://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install Java Development Kit 10 on Ubuntu]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/07/15/install-java-development-kit-10-on-ubuntu/"/>
    <updated>2018-07-15T06:17:43-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/07/15/install-java-development-kit-10-on-ubuntu</id>
    <content type="html"><![CDATA[<p>With the announcement of improved docker container integration with Java 10, the JVM is now aware of resource constraints, as not from prior versions. More information on <a href="https://blog.docker.com/2018/04/improved-docker-container-integration-with-java-10/">this post</a></p>

<h2>Differences in Java 8 and Java 10:</h2>

<p>As you can see with Java 8:</p>

<pre><code class="bash">$ docker run -it -m512M --entrypoint bash openjdk:latest

$ docker-java-home/bin/java -XX:+PrintFlagsFinal -version | grep MaxHeapSize
    uintx MaxHeapSize                              := 524288000                          {product}
openjdk version "1.8.0_162"
</code></pre>

<p>And with Java 10:</p>

<pre><code class="bash">$ docker run -it -m512M --entrypoint bash openjdk:10-jdk

$ docker-java-home/bin/java -XX:+PrintFlagsFinal -version | grep MaxHeapSize
   size_t MaxHeapSize                              = 134217728                                {product} {ergonomic}
openjdk version "10" 2018-03-20
</code></pre>

<h2>Installing JDK 10 on Ubuntu:</h2>

<p>Installing Java Development Kit 10:</p>

<pre><code class="bash">$ apt update &amp;&amp; apt upgrade -y
$ add-apt-repository ppa:linuxuprising/java
$ apt update
$ apt install oracle-java10-installer
$ apt install oracle-java10-set-default
</code></pre>

<p>Confirming the Java Version:</p>

<pre><code class="bash">$ java -version
java version "10.0.1" 2018-04-17
Java(TM) SE Runtime Environment 18.3 (build 10.0.1+10)
Java HotSpot(TM) 64-Bit Server VM 18.3 (build 10.0.1+10, mixed mode)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a LAMP Stack With Ansible Using Ubuntu]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/07/08/setup-a-lamp-stack-with-ansible-using-ubuntu/"/>
    <updated>2018-07-08T17:15:15-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/07/08/setup-a-lamp-stack-with-ansible-using-ubuntu</id>
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/rbekker/image/upload/v1531083331/ansible_tojf8l.png" alt="" /></p>

<p>This is Part-2 of our <a href="http://blog.ruanbekker.com/blog/categories/ansible-tutorial">Ansible-Tutorial</a> and in this post we will cover how to setup a LAMP Stack on Ubuntu using Ansible. We will only have one host in our inventory, but this can be scaled easily by increasing the number of nodes in your invetory configuration file.</p>

<h2>Our Playbook:</h2>

<p>Our <code>lamp.yml</code> playbook:</p>

<pre><code class="yml lamp.yml">---
# Setup LAMP Stack
- hosts: newhost
  tasks:
    - name: install lamp stack
      sudo: yes
      apt: name= state=present update_cache=yes
      with_items:
        - apache2
        - mysql-server
        - php7.0
        - php7.0-mysql

    - name: start services
      service: name= state=started enabled=yes
      sudo: yes
      with_items:
        - apache2
        - mysql

    - name: deploy index.html
      sudo: yes
      copy:
        src: /tmp/index.html
        dest: /var/www/html/index.html
</code></pre>

<p>Our <code>index.html</code> that will be deployed on our servers:</p>

<pre><code class="html /tmp/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;body&gt;
    &lt;h1&gt;Deployed with Ansible&lt;/h1&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>Deploy your LAMP Stack:</h2>

<pre><code class="bash">$ ansible-playbook -i inventory.ini -u root lamp.yml

PLAY [newhost] ***************************************************************************************************************************

TASK [Gathering Facts] *******************************************************************************************************************
ok: [web-1]

TASK [install lamp stack] ****************************************************************************************************************
ok: [web-1] =&gt; (item=[u'apache2', u'mysql-server', u'php7.0', u'php7.0-mysql'])

TASK [start services] ********************************************************************************************************************
ok: [web-1] =&gt; (item=apache2)
ok: [web-1] =&gt; (item=mysql)

TASK [deploy index.html] *****************************************************************************************************************
changed: [web-1]

PLAY RECAP *******************************************************************************************************************************
web-1                      : ok=4    changed=1    unreachable=0    failed=0
</code></pre>

<p>Test our web server:</p>

<pre><code class="bash">$ curl http://10.0.0.4

Deployed with Ansible
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Ansible on Ubuntu]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/07/08/getting-started-with-ansible-on-ubuntu/"/>
    <updated>2018-07-08T15:56:06-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/07/08/getting-started-with-ansible-on-ubuntu</id>
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/rbekker/image/upload/v1531083331/ansible_tojf8l.png" alt="" /></p>

<p><a href="">Part 1</a> - This is a getting started series on Ansible.</p>

<p>The first post will be on how to setup ansible and how to reach your nodes in order to deploy software to your nodes.</p>

<h2>Install Ansible:</h2>

<p>Ansible relies on python, so we will first install the dependencies:</p>

<pre><code class="bash">$ apt update &amp;&amp; apt install python python-setuptools -y
$ easy_install pip
$ pip install ansible
</code></pre>

<h2>Populate the invetory configuration:</h2>

<p>Your invetory file will hold your host and variable information. Lets say we have 3 nodes that we want to deploy software to; <code>node-1</code>, <code>node-2</code> and <code>node-3</code>. We will group them under <code>nodes</code>. This will be saved under the a new file <code>inventory.init</code>:</p>

<pre><code class="bash inventory.ini">[nodes]
node-1
node-2
node-3
</code></pre>

<p>Next we will populate information about our node names, this will be done under our <code>~/.ssh/config</code> configuration:</p>

<p>```bash ~/.ssh/config
Host node-1
  Hostname 10.0.0.2
  User root
  IdentityFile ~/.ssh/id_rsa
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null</p>

<p>Host node-2
  Hostname 10.0.0.3
  User root
  IdentityFile ~/.ssh/id_rsa
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null</p>

<p>Host node-3
  Hostname 10.0.0.4
  User root
  IdentityFile ~/.ssh/id_rsa
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null
```</p>

<p>Now we need to generate a ssh key for our node where we will run our ansible commands from:</p>

<pre><code class="bash">$ ssh-keygen -b 2048 -f ~/.ssh/id_rsa -t rsa -q -N ""
</code></pre>

<p>Now we will copy the contents of <code>~/.ssh/id_rsa.pub</code> into our destination nodes <code>~/.ssh/authorized_keys</code> or if you have password authentication enabled, we can do <code>$ ssh-copy-id root@10.0.0.x</code> etc. Now we should be able to ssh to our nodes to <code>node-1, node-2</code> and <code>node-3</code>.</p>

<h2>Deploy Python:</h2>

<p>As Ansible requires Python, we need to bootstrap our nodes with Python. Since we are able to ssh to our nodes, we will use ansible to deploy Python to our nodes:</p>

<pre><code class="bash">$ ansible -m raw -s -a "apt update &amp;&amp; apt install python -y" -i inventory.ini nodes
</code></pre>

<p>This should succeed, then we can test our connection by running the ping module:</p>

<pre><code class="bash">$ ansible -i inventory.ini nodes -m ping
node-2 | SUCCESS =&gt; {
    "changed": false,
    "ping": "pong"
}
node-3 | SUCCESS =&gt; {
    "changed": false,
    "ping": "pong"
}
node-1 | SUCCESS =&gt; {
    "changed": false,
    "ping": "pong"
}
</code></pre>

<h2>Run a command on your nodes:</h2>

<p>Let&rsquo;s run a cat command on all the nodes:</p>

<pre><code class="bash">$ ansible -i inventory.ini nodes -a "/bin/cat /etc/hostname"
node-3 | SUCCESS | rc=0 &gt;&gt;
node-3

node-1 | SUCCESS | rc=0 &gt;&gt;
node-1

node-2 | SUCCESS | rc=0 &gt;&gt;
node-2
</code></pre>

<h2>Ansible Playbooks:</h2>

<p>Let&rsquo;s run shell commands, the traditional hello world, using the ansible-playbook command. First we need a task definition, which I will name <code>shell_command-1.yml</code>:</p>

<pre><code class="bash shell_command.yml">---
# Echo Static String
- hosts: nodes
  tasks:
  - name: echo static value
    shell: /bin/echo "hello world"
    register: echo_static
  - debug: msg=""
</code></pre>

<p>Now we have defined that our commands will be executed against the host group defined in our inventory.ini. Let&rsquo;s run our ansible playbook command:</p>

<pre><code class="bash">$ ansible-playbook -i inventory.ini shell_command.yml

PLAY [nodes] *************************************************************************************

TASK [Gathering Facts] **********************************************************************************
ok: [node-1]
ok: [node-2]
ok: [node-3]

TASK [echo static value] ********************************************************************************
changed: [node-1]
changed: [node-2]
changed: [node-3]

TASK [debug] ********************************************************************************************
ok: [node-1] =&gt; {
    "msg": "hello world"
}
ok: [node-2] =&gt; {
    "msg": "hello world"
}
ok: [node-3] =&gt; {
    "msg": "hello world"
}

PLAY RECAP **********************************************************************************************
node-1              : ok=3    changed=1    unreachable=0    failed=0
node-2              : ok=3    changed=1    unreachable=0    failed=0
node-3              : ok=3    changed=1    unreachable=0    failed=0
</code></pre>

<p>Let&rsquo;s define a variable <code>location_city = Cape Town</code> in our <code>inventory.ini</code> configuration, then we will call the variable key in our task definition:</p>

<pre><code class="bash inventory.ini">[nodes]
node-1
node-2
node-3

[nodes:vars]
location_city="Cape Town"
</code></pre>

<p>Now our task definition with our variable:</p>

<pre><code class="yml shell_command-2.yml">---
# Echo Variable
- hosts: nodes
  tasks:
  - name: echo variable value
    shell: /bin/echo ""
    register: echo
  - debug: msg=""
</code></pre>

<p>Running our ansible-playbook:</p>

<pre><code class="bash">$ ansible-playbook -i inventory.ini shell_command.yml

PLAY [nodes] **************************************************************************************************************************************************************************************

TASK [Gathering Facts] ***********************************************************************************************************************************************************************************
ok: [node-1]
ok: [node-2]
ok: [node-3]

TASK [echo variable value] *******************************************************************************************************************************************************************************
changed: [node-1]
changed: [node-2]
changed: [node-3]

TASK [debug] *********************************************************************************************************************************************************************************************
ok: [node-1] =&gt; {
    "msg": "Cape Town"
}
ok: [node-2] =&gt; {
    "msg": "Cape Town"
}
ok: [node-3] =&gt; {
    "msg": "Cape Town"
}

PLAY RECAP ***********************************************************************************************************************************************************************************************
node-1              : ok=3    changed=1    unreachable=0    failed=0
node-2              : ok=3    changed=1    unreachable=0    failed=0
node-3              : ok=3    changed=1    unreachable=0    failed=0
</code></pre>

<p>This is it for this post, all posts for this tutorial will be posted under <a href="http://blog.ruanbekker.com/blog/categories/ansible-tutorial">#ansible-tutorials</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Logical Volume Using LVM on Ubuntu]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/03/30/create-a-logical-volume-using-lvm-on-ubuntu/"/>
    <updated>2018-03-30T20:38:18-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/03/30/create-a-logical-volume-using-lvm-on-ubuntu</id>
    <content type="html"><![CDATA[<p>Logical Volume Manager (LVM) - adds an extra layer between the physical disks and the file system, which allows you to resize your storage on the fly, use multiple disks, instead of one, etc.</p>

<h2>Concepts:</h2>

<p>Physical Volume:
- Physical Volume represents the actual disk / block device.</p>

<p>Volume Group:
- Volume Groups combines the collection of Logical Volumes and Physical Volumes into one administrative unit.</p>

<p>Logical Volume:
- A Logical Volume is the conceptual equivalent of a disk partition in a non-LVM system.</p>

<p>File Systems:
- File systems are built on top of logical volumes.</p>

<h2>What we are doing today:</h2>

<p>We have a disk installed on our server which is 150GB that is located on <code>/dev/vdb</code>, which we will manage via LVM and will be mounted under <code>/mnt</code></p>

<h2>Dependencies:</h2>

<p>Update and Install LVM:</p>

<pre><code>$ apt update &amp;&amp; apt upgrade -y
$ apt install lvm2 -y
$ systemctl enable lvm2-lvmetad
$ systemctl start lvm2-lvmetad
</code></pre>

<h2>Create the Logical Volume:</h2>

<p>Initialize the Physical Volume to be managed by LVM, then create the Volume Group, then go ahead to create the Logical Volume:</p>

<pre><code>$ pvcreate /dev/vdb
$ vgcreate vg1 /dev/vdb
$ lvcreate -l 100%FREE -n vol1 vg1
</code></pre>

<p>Build the Linux Filesystem with ext4 and mount the volume to the <code>/mnt</code> partition:</p>

<pre><code>$ mkfs.ext4 /dev/vg1/vol1
$ mount /dev/vg1/vol1 /mnt
$ echo '/dev/mapper/vg1-vol1 /mnt ext4 defaults,nofail 0 0' &gt;&gt; /etc/fstab
</code></pre>

<h2>Other useful commands:</h2>

<p>To list Physical Volume Info:</p>

<pre><code>$ pvs
PV         VG   Fmt  Attr PSize   PFree
/dev/vdb   vg1  lvm2 a--  139.70g    0
</code></pre>

<p>To list Volume Group Info:</p>

<pre><code>$ vgs
VG   #PV #LV #SN Attr   VSize   VFree
vg1    1   1   0 wz--n- 139.70g    0
</code></pre>

<p>And viewing the logical volume size from the volume group:</p>

<pre><code>$ vgs -o +lv_size,lv_name
VG   #PV #LV #SN Attr   VSize   VFree LSize   LV
vg1    1   1   0 wz--n- 139.70g    0  139.70g vol1
</code></pre>

<p>Information about Logical Volumes:</p>

<pre><code>$ lvs
LV   VG   Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
vol1 vg1  -wi-ao---- 139.70g
</code></pre>

<h2>Resources:</h2>

<ul>
<li><a href="https://www.thegeekdiary.com/redhat-centos-a-beginners-guide-to-lvm-logical-volume-manager/">1</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Payara Application Server on Ubuntu 16.04]]></title>
    <link href="http://blog.ruanbekker.com/blog/2018/03/29/setup-payara-application-server-on-ubuntu-16-dot-04/"/>
    <updated>2018-03-29T19:57:40-04:00</updated>
    <id>http://blog.ruanbekker.com/blog/2018/03/29/setup-payara-application-server-on-ubuntu-16-dot-04</id>
    <content type="html"><![CDATA[<p><img src="https://i.snag.gy/CJMlTj.jpg" alt="" /></p>

<p>Today we will setup Payara 5 on Ubuntu 16.04</p>

<h2>About:</h2>

<p>Payara is an Open Source Java Application Server.</p>

<h2>Pre-Requirements:</h2>

<p>Update and Install Java 8:</p>

<pre><code class="bash">$ apt update &amp;&amp; apt upgrade -y
$ apt-get install wget curl unzip software-properties-common python-software-properties -y
$ add-apt-repository ppa:webupd8team/java
$ apt-get update
$ apt-get install oracle-java8-installer -y
$ source /etc/profile.d/jdk.sh
</code></pre>

<h2>Install Payara:</h2>

<p>Download and Install Payara 5:</p>

<pre><code class="bash">$ cd /usr/local
$ wget --content-disposition 'https://info.payara.fish/cs/c/?cta_guid=b9609f35-f630-492f-b3c0-238fc55f489b&amp;placement_guid=7cca6202-06a3-4c29-aee0-ca58af60528a&amp;portal_id=334594&amp;redirect_url=APefjpGt1aFvHUflpzz7Lec8jDz7CbeIIHZmgORmDSpteTCT2XjiMvjEzeY8yte3kiHi7Ph9mWDB7qUDEr96P0JS8Ev2ZFqahif2huSBfQV6lt4S6YUQpzPMrpHgf_n4VPV62NjKe8vLZBLnYkUALyR2mkrU3vWe7ME9XjHJqYPsHtxkHn-W7bYPFgY2LjEzKIYrdUsCviMgGrUh_LIbLxCESBa0N90vzaWKjK5EwZT021VaPP0jgfgvt0gF2UdtBQGcsTHrAlrb&amp;hsutk=c279766888b67917a591ec4e209cb29a&amp;canon=https%3A%2F%2Fwww.payara.fish%2Fall_downloads&amp;click=5bad781c-f4f5-422d-ba2b-5e0c2bff7098&amp;utm_referrer=https%3A%2F%2Fwww.google.co.za%2F&amp;__hstc=229474563.c279766888b67917a591ec4e209cb29a.1519832301251.1521408251653.1521485598794.4&amp;__hssc=229474563.7.1521485598794&amp;__hsfp=2442083907'

$ unzip payara-5.181.zip
$ mv payara5 payara
$ rm -rf payara-5.181.zip
</code></pre>

<h2>Permissions:</h2>

<p>Create the Payara user and Grant Permissions:</p>

<pre><code class="bash">$ echo 'export PATH=/usr/local/payara/glassfish/bin:$PATH' &gt; /etc/profile.d/payara.sh
$ addgroup --system payara
$ adduser --system --shell /bin/bash --ingroup payara payara
$ echo 'payara soft nofile 32768' &gt;&gt; /etc/security/limits.conf
$ echo 'payara hard nofile 65536' &gt;&gt; /etc/security/limits.conf
$ chown -R payara:payara /usr/local/payara
</code></pre>

<h2>Setup the Payara Domain:</h2>

<p>Switch to the Payara user, delete the default domain and start the production domain. It is useful to configure the JVM Options under the domains config directory according to your servers resources.</p>

<pre><code class="bash">$ su - payara

$ asadmin delete-domain domain1
$ asadmin change-admin-password --domain_name production # default blank pass for admin
$ asadmin --port 4848 enable-secure-admin production

$ asadmin start-domain production
$ asadmin stop-domain production

$ exit
</code></pre>

<h2>SystemD Unit File:</h2>

<p>Create the SystemD Unit File to be able to manage the state of the Payara Server via SystemD:</p>

<pre><code class="bash">$ cat &gt; /etc/systemd/system/payara.service &lt;&lt; EOF
[Unit]
Description=Payara Server
After=network.target remote-fs.target

[Service]
User=payara
WorkingDirectory=/usr/local/payara/glassfish
Environment=PATH=/usr/local/payara/glassfish/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/payara/glassfish/bin/asadmin start-domain production
ExecReload=/usr/local/payara/glassfish/bin/asadmin restart-domain production
ExecStop=/usr/local/payara/glassfish/bin/asadmin stop-domain production
TimeoutStartSec=300
TimeoutStopSec=30

[Install]
WantedBy = multi-user.target
EOF
</code></pre>

<p>Reload the systemd daemon:</p>

<pre><code class="bash">$ systemctl daemon-reload
</code></pre>

<p>Start the Payara Service:</p>

<pre><code class="bash">$ systemctl enable payara
$ systemctl start payara
</code></pre>

<p>Verify that port 4848, 8080 and 8181 is running:</p>

<pre><code class="bash">$ netstat -tulpn | grep java
tcp        0      0 :::8080                     :::*                        LISTEN      24542/java
tcp        0      0 :::4848                     :::*                        LISTEN      24542/java
tcp        0      0 :::8181                     :::*                        LISTEN      24542/java
...
</code></pre>

<h2>Access Payara Admin UI:</h2>

<p>Access the Payara DAS via <code>https://ip-of-payara-server:4848</code></p>
]]></content>
  </entry>
  
</feed>
