<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Virtualization | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/virtualization/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2023-07-15T17:54:12-04:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Run a AMD64 Bit Linux VM on a Mac M1]]></title>
    <link href="https://blog.ruanbekker.com/blog/2023/05/26/how-to-run-a-amd64-bit-linux-vm-on-a-mac-m1/"/>
    <updated>2023-05-26T08:35:38-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2023/05/26/how-to-run-a-amd64-bit-linux-vm-on-a-mac-m1</id>
    <content type="html"><![CDATA[<p>This tutorial will show you how you can run 64bit Ubuntu Linux Virtual Machines on a Apple Mac M1 arm64 architecture macbook using <a href="https://github.com/utmapp/UTM">UTM</a>.</p>

<h2>Installation</h2>

<p>Head over to their <a href="https://docs.getutm.app/installation/ios/">documentation</a> and download the <code>UTM.dmg</code> file and install it, once it is installed and you have opened UTM, you should see this screen:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/a5303fc2-0925-4055-921e-78292d5b45e0" alt="image" /></p>

<h2>Creating a Virtual Machine</h2>

<p>In my case I would like to run a Ubuntu VM, so head over to the <a href="https://ubuntu.com/download/server">Ubuntu Server Download</a> page and download the version of choice, I will be downloading Ubuntu Server 22.04, once you have your ISO image downloaded, you can head over to the next step which is to &ldquo;Create a New Virtual Machine&rdquo;:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/3fa35dc5-982e-469b-822d-e9c548edf69f" alt="image" /></p>

<p>I will select &ldquo;Emulate&rdquo; as I want to run a amd64 bit architecture, then select &ldquo;Linux&rdquo;:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/58f1485c-9b6a-4703-a2fb-377263c4750c" alt="image" /></p>

<p>In the next step we want to select the Ubuntu ISO image that we downloaded, which we want to use to boot our VM from:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/676b6258-ccab-4e4e-a447-db012a2de1b3" alt="image" /></p>

<p>Browse and select the image that you downloaded, once you selected it, it should show something like this:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/c102f46e-e5df-45f5-9bec-727b67ec1bf2" alt="image" /></p>

<p>Select continue, then select the architecture to <code>x86_64</code>, the system I kept on defaults and the memory I have set to <code>2048MB</code> and cores to <code>2</code> but that is just my preference:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/2c79e154-5fef-46bb-8b10-17e4a837ce0c" alt="image" /></p>

<p>The next screen is to configure storage, as this is for testing I am setting mine to <code>8GB</code>:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/d62730e8-dda7-4324-95bd-6d01532af1da" alt="image" /></p>

<p>The next screen is shared directories, this is purely optional, I have created a directory for this:</p>

<pre><code class="bash">mkdir ~/utm
</code></pre>

<p>Which I&rsquo;ve then defined for a shared directory, but this depends if you need to have shared directories from your local workstation.</p>

<p>The next screen is a summary of your choices and you can name your vm here:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/3dee86f1-8f09-4caa-8cb2-0470352c9e77" alt="image" /></p>

<p>Once you are happy select save, and you should see something like this:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/725951b7-d0ed-4b64-8418-1197415da91a" alt="image" /></p>

<p>You can then select the play button to start your VM.</p>

<p>The console should appear and you can select install or try this vm:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/bf8ed7fe-e7c2-4855-a4c0-cfd98857fbd0" alt="image" /></p>

<p>This will start the installation process of a Linux Server:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/09364ab8-be5a-4c51-9a0f-edea04707802" alt="image" /></p>

<p>Here you can select the options that you would like, I would just recommend to ensure that you select <code>Install OpenSSH Server</code> so that you can connect to your VM via SSH.</p>

<p>Once you get to this screen:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/8204583e-2175-4815-a96b-3c4d8063758a" alt="image" /></p>

<p>The installation process is busy and you will have to wait a couple of minutes for it to complete. Once you see the following screen the installation is complete:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/4c8add6a-fb1e-469e-967f-0c78228eb340" alt="image" /></p>

<p>On the right hand side select the circle, then select CD/DVD and select the ubuntu iso and select eject:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/4c17223e-a755-4742-9b95-ef64dc217264" alt="image" /></p>

<h2>Starting your VM</h2>

<p>Then power off the guest and power on again, then you should get a console login, then you can proceed to login, and view the ip address:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/51d56c64-2be2-4036-836d-579fd1bd6ac2" alt="" /></p>

<h2>SSH to your VM</h2>

<p>Now from your terminal you should be able to ssh to the VM:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/7ee94cb4-73bf-4ddc-9eb3-01fcee68a29f" alt="" /></p>

<p>We can also verify that we are running a 64bit vm, by running <code>uname --processor</code>:</p>

<p><img src="https://github.com/ruanbekker/ruanbekker.github.io/assets/567298/ed444a85-28c1-44af-88ac-5e956a742f59" alt="" /></p>

<h2>Thank You</h2>

<p>Thanks for reading, feel free to check out my <a href="https://ruan.dev/">website</a>, feel free to subscribe to my <a href="http://digests.ruanbekker.com/?via=ruanbekker-blog">newsletter</a> or follow me at <a href="https://twitter.com/ruanbekker">@ruanbekker</a> on Twitter.</p>

<ul>
<li>Linktree: <a href="https://go.ruan.dev/links">https://go.ruan.dev/links</a></li>
<li>Patreon: <a href="https://go.ruan.dev/patreon">https://go.ruan.dev/patreon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a KVM Host for Virtualization on OneProvider]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/10/07/setup-a-kvm-host-for-virtualization-on-oneprovider/"/>
    <updated>2020-10-07T23:31:43+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/10/07/setup-a-kvm-host-for-virtualization-on-oneprovider</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been on the hunt for a hobby dedicated server for a terraform project, where I&rsquo;m intending to use the <a href="https://github.com/dmacvicar/terraform-provider-libvirt">libvirt provider</a> and found one awesome provider that offers amazingly great prices.</p>

<p>At <a href="https://oneprovider.com/dedicated-servers">oneprovider.com</a>, they offer dedicated servers for great prices and they offer a huge number of locations. So I decided to give them a go and ordered a dedicated server in Amsterdam, Netherlands:</p>

<p><img src="https://user-images.githubusercontent.com/567298/95398393-e9630800-0905-11eb-8277-79f13393187c.png" alt="cheap-dedicated-servers" /></p>

<p>I went for a 4GB DDR3 RAM, Atom C2350 2 Cores CPU with 128GB SSD and 1Gbps unmetered bandwidth for $7.30 a month, which is super cheap and more than enough for a hobby project:</p>

<p><img src="https://user-images.githubusercontent.com/567298/95398413-f7188d80-0905-11eb-9250-6368ea92b873.png" alt="image" /></p>

<p>I&rsquo;ve been using them for the last week and super impressed.</p>

<h2>What are we doing</h2>

<p>As part of my Terraform project, I would like to experiment with the libvirt provisioner to provision KVM instances, I need a dedicated server with KVM installed, and in this guide we will install KVM and create a dedicated user that we will use with Terraform.</p>

<h2>Install KVM</h2>

<p>Once your server is provisioned, SSH to your dedicated server and install <code>cpu-checker</code> to ensure that we are able to install KVM:</p>

<pre><code>$ $ apt update &amp;&amp; apt upgrade -y
$ apt install cpu-checker -y
</code></pre>

<p>Test using <code>kvm-ok</code>:</p>

<pre><code>$ kvm-ok
INFO: /dev/kvm exists
KVM acceleration can be used
</code></pre>

<p>On a client pc, generate the SSH key that we will use to authenticate with on our KVM host:</p>

<pre><code>$ ssh-keygen -t rsa -C deploys -f ~/.ssh/deploys.pem
</code></pre>

<p>Back on the server, create the user and prepare the ssh directory:</p>

<pre><code>$ useradd -m -s /bin/bash deploys
$ mkdir /home/deploys/.ssh
$ touch /home/deploys/.ssh/authorized_keys
</code></pre>

<p>On the client PC where you generated your SSH key, copy the public key:</p>

<pre><code>$ cat ~/.ssh/deploys.pem.pub| pbcopy
</code></pre>

<p>Paste your public key to the servers authorized_keys file:</p>

<pre><code>$ vim /home/deploys/.ssh/authorized_keys
# paste the public key contents and save
</code></pre>

<p>Update the content below with the correct permissions:</p>

<pre><code>$ chown -R deploys:deploys /home/deploys
$ chmod 755 /home/deploys/.ssh
$ chmod 644 /home/deploys/.ssh/authorized_keys
</code></pre>

<p>Install KVM on the host:</p>

<pre><code>$ apt install bridge-utils qemu-kvm libvirt-bin virtinst -y
</code></pre>

<p>Add our dedicated user to the libvirt group:</p>

<pre><code>$ usermod -G libvirt deploys
</code></pre>

<p>Create the directory where we will store our vm&rsquo;s disks:</p>

<pre><code>$ mkdir -p /opt/kvm
</code></pre>

<p>And apply ownership permissions for our user and group:</p>

<pre><code>$ chown -R deploys:libvirt /opt/kvm
</code></pre>

<p>I ran into a permission denied issue using terraform and the dedicated user, and to resolve I had to ensure that the <code>security_driver</code> is set to <code>none</code> in <code>/etc/libvirt/qemu.conf</code>:</p>

<pre><code>$ vim /etc/libvirt/qemu.conf
</code></pre>

<p>and update the following:</p>

<pre><code>security_driver = "none"
</code></pre>

<p>Then restart libvirtd:</p>

<pre><code>$ sudo systemctl restart libvirtd 
</code></pre>

<h2>Test KVM</h2>

<p>Switch to the <code>deploys</code> user:</p>

<pre><code>$ sudo su - deploys
</code></pre>

<p>And list domains using <code>virsh</code>:</p>

<pre><code>$ virsh list
 Id    Name                           State
----------------------------------------------------
</code></pre>

<h2>Thank You</h2>

<p>That&rsquo;s it, now we have a KVM host that allows us to provision VM&rsquo;s. In the next post we will install terraform and the libvirt provisioner for terraform to provision a vm and use ansible to deploy software to our vm.</p>

<p><a href="https://saythanks.io/to/ruan.ru.bekker@gmail.com"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!" /></a></p>

<p>Thanks for reaching out to me, check out my <strong><a href="" rel="nofollow" target="_blank">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker" rel="nofollow" target="_blank">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a KVM Hypervisor on Ubuntu to Host Virtual Machines]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/02/20/setup-a-kvm-hypervisor-on-ubuntu-to-host-virtual-machines/"/>
    <updated>2018-02-20T06:21:56-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/02/20/setup-a-kvm-hypervisor-on-ubuntu-to-host-virtual-machines</id>
    <content type="html"><![CDATA[<p>Today we will setup a KVM (Kernel Virtual Machine) Hypervisor, where we can host Virtual Machines. In order to do so, your host needs to Support Hardware Virtualization.</p>

<h2>What we will be doing today:</h2>

<ul>
<li>Check if your host supports Hardware Virtualization</li>
<li>Setup the KVM Hypervisor</li>
<li>Setup a Alpine VM</li>
</ul>


<h2>Check for Hardware Virtualization Support:</h2>

<p>We will install the package required to do the check:</p>

<pre><code class="bash">$ sudo apt update &amp;&amp; sudo apt install cpu-checker -y
</code></pre>

<p>Once that is installed, run <code>kvm-ok</code> and if its supported, your output should look something like this:</p>

<pre><code class="bash">$ kvm-ok
INFO: /dev/kvm exists
KVM acceleration can be used
</code></pre>

<h2>Installing KVM</h2>

<p>Update your System and get the Packages required to Setup KVM:</p>

<pre><code class="bash">$ sudo apt update &amp;&amp; sudo apt upgrade -y
$ apt install bridge-utils qemu-kvm libvirt-bin virtinst -y
</code></pre>

<p>Add your user to the libvirtd group:</p>

<pre><code class="bash">$ sudo usermod -G libvirtd $USER
</code></pre>

<p>Check that the libvirtd service is running:</p>

<pre><code class="bash">$ sudo systemctl is-active libvirtd
active
</code></pre>

<p>You will also find that there is a new interface configured called <code>virbr0</code> in my case.</p>

<h2>Provision the Alpine VM and Setup OpenSSH:</h2>

<p>Get the ISO:</p>

<ul>
<li><a href="https://alpinelinux.org/downloads/">https://alpinelinux.org/downloads/</a></li>
</ul>


<pre><code class="bash">$ wget http://dl-cdn.alpinelinux.org/alpine/v3.7/releases/x86_64/alpine-virt-3.7.0-x86_64.iso
</code></pre>

<p>Provision the VM:</p>

<pre><code class="bash">$ virt-install \
--name alpine1 \
--ram 256 \
--disk path=/var/lib/libvirt/images/alpine1.img,size=8 \
--vcpus 1 \
--os-type linux \
--os-variant generic \
--network bridge:virbr0,model=virtio \
--graphics none \
--console pty,target_type=serial \
--cdrom ./alpine-virt-3.7.0-x86_64.iso 
</code></pre>

<p>After this, you will be dropped into the console:</p>

<pre><code class="bash">Starting install...
Allocating 'alpine1.img'                                                                                                           |   8 GB  00:00:01
Creating domain...                                                                                                                 |    0 B  00:00:00
Connected to domain alpine1
Escape character is ^]

ISOLINUX 6.04 6.04-pre1  Copyright (C) 1994-2015 H. Peter Anvin et al
boot:

   OpenRC 0.24.1.a941ee4a0b is starting up Linux 4.9.65-1-virthardened (x86_64)

Welcome to Alpine Linux 3.7
Kernel 4.9.65-1-virthardened on an x86_64 (/dev/ttyS0)

localhost login:
</code></pre>

<p>Login with the <code>root</code> user and no password, then setup the VM by running <code>setup-alpine</code>:</p>

<pre><code class="bash">localhost login: root
Welcome to Alpine!

localhost:~# setup-alpine
</code></pre>

<p>After completing the prompts reboot the VM by running <code>reboot</code>, then you will be dropped out of the console. Check the status of the reboot:</p>

<pre><code class="bash">$ virsh list
 Id    Name                           State
----------------------------------------------------
 2     alpine1                        running
</code></pre>

<p>As we can see our guest is running, lets console to our guest, provide the root user and password that you provided during the setup phase:</p>

<pre><code class="bash">$ virsh console 2
Connected to domain alpine1
Escape character is ^]

alpine1 login: root
Password:
Welcome to Alpine!
</code></pre>

<p>Setup OpenSSH so that we can SSH to our guest over the network:</p>

<pre><code class="bash">$ apk update
$ apk add openssh
</code></pre>

<p>Configure SSH to accept Root Passwords, this is not advisable for production environments, but for testing this is okay. For Production servers, we will rather look at Key Based Authentication etc.</p>

<pre><code class="bash">$ sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config
$ /etc/init.d/sshd restart
</code></pre>

<p>Get the IP Address:</p>

<pre><code>$ ifconfig
eth0      Link encap:Ethernet  HWaddr 52:54:00:D0:48:0C
          inet addr:192.168.122.176  Bcast:192.168.122.255  Mask:255.255.255.0
          inet6 addr: fe80::5054:ff:fed0:480c/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:55 errors:0 dropped:28 overruns:0 frame:0
          TX packets:34 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:4545 (4.4 KiB)  TX bytes:3345 (3.2 KiB)
</code></pre>

<p>Exit the guest by running <code>exit</code> and <code>Ctrl + ]</code> to exit the console session.</p>

<p>Now SSH to your Alpine VM:</p>

<pre><code class="bash">$ ssh root@192.168.122.176
root@192.168.122.176's password:
Welcome to Alpine!
</code></pre>

<h2>Some Useful Commands:</h2>

<p>List Running VMs:</p>

<pre><code>$ virsh list
 Id    Name                           State
----------------------------------------------------
 3     alpine1                        running
</code></pre>

<p>Shutdown a VM:</p>

<pre><code class="bash">$ virsh shutdown alpine1
Domain alpine1 is being shutdown
</code></pre>

<p>List all VMs:</p>

<pre><code class="bash">$ virsh list --all
 Id    Name                           State
----------------------------------------------------
 -     alpine1                        shut off
</code></pre>

<p>Delete a VM:</p>

<pre><code class="bash">$ virsh shutdown alpine1 #or to force shutdown:
$ virsh destroy alpine1
$ virsh undefine alpine1
</code></pre>

<p>Any future KVM posts will be tagged under <a href="http://blog.ruanbekker.com/blog/categories/kvm?source_site=blog.ruanbekker.com?source_category=kvm">KVM</a> and Alpine posts will be available under the <a href="http://blog.ruanbekker.com/blog/categories/alpine?source_site=blog.ruanbekker.com?source_category=kvm">Alpine</a> tag.</p>
]]></content>
  </entry>
  
</feed>
