<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Visualizations | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/visualizations/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2022-08-07T09:34:12-04:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup Kibana Dashboards for Nginx Log Data to Understand the Behavior]]></title>
    <link href="https://blog.ruanbekker.com/blog/2019/04/02/setup-kibana-dashboards-for-nginx-log-data-to-understand-the-behavior/"/>
    <updated>2019-04-02T12:34:18-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2019/04/02/setup-kibana-dashboards-for-nginx-log-data-to-understand-the-behavior</id>
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/567298/55418811-b8b54c00-5573-11e9-810d-d244d27c4fb3.png" alt="kibana" /></p>

<p>In this tutorial we will setup a Basic Kibana Dashboard for a Web Server that is running a Blog on Nginx.</p>

<h2>What do we want to achieve?</h2>

<p>We will setup common visualizations to give us an idea on how our blog/website is doing.</p>

<p>In some situations we need to create visualizations to understand the behavior of our log data in order to answer these type of questions:</p>

<table>
<thead>
<tr>
<th> <strong>Number</strong> </th>
<th> <strong>Scenario</strong>                                                         </th>
</tr>
</thead>
<tbody>
<tr>
<td> 1          </td>
<td> Geographical map to see where people are connecting from             </td>
</tr>
<tr>
<td> 2          </td>
<td> Piechart that represents the percentage of cities accessing my blog  </td>
</tr>
<tr>
<td> 3          </td>
<td> Top 10 Most Accessed Pages                                           </td>
</tr>
<tr>
<td> 4          </td>
<td> Top 5 HTTP Status Codes                                              </td>
</tr>
<tr>
<td> 5          </td>
<td> Top 10 Pages that returned 404 Responses                             </td>
</tr>
<tr>
<td> 6          </td>
<td> The Top 10 User Agents                                               </td>
</tr>
<tr>
<td> 7          </td>
<td> Timeseries: Status Codes Over Time                                   </td>
</tr>
<tr>
<td> 8          </td>
<td> Timeseries: Successfull Website Hits over time                       </td>
</tr>
<tr>
<td> 9          </td>
<td> Counter with Website Hits                                            </td>
</tr>
<tr>
<td> 10         </td>
<td> Average Bytes Returned                                               </td>
</tr>
<tr>
<td> 11         </td>
<td> Tag Cloud with the City Names that Accessed my Blog                  </td>
</tr>
</tbody>
</table>


<h2>Pre-Requirements</h2>

<p>I am consuming my nginx access logs with filebeat and shipping them to elasticsearch. You can check out <a href="https://blog.ruanbekker.com/blog/2019/03/27/ship-your-logs-to-elasticsearch-with-filebeat/">this blogpost</a> to set that up.</p>

<p>The GeoIP Processor plugin is installed on elasticsearch to enrich our data with geographical information. You can check out <a href="https://blog.ruanbekker.com/blog/2018/09/12/using-the-geoip-processor-plugin-with-elasticsearch-to-enrich-your-location-based-data/">this blogpost</a> to setup geoip.</p>

<p>You can setup <a href="https://blog.ruanbekker.com/blog/2018/04/29/running-a-3-node-elasticsearch-cluster-with-docker-compose-on-your-laptop-for-testing/">Kibana and Elasticsearch on Docker</a> or setup a <a href="https://blog.ruanbekker.com/blog/2019/04/02/setup-a-5-node-highly-available-elasticsearch-cluster/">5 Node Elasticsearch Cluster</a></p>

<h2>Setup Kibana Visulizations</h2>

<p>Head over to Kibana, make sure that you have added the <code>filebeat-*</code> index patterns. If not, head over to Management -> Index Patterns -> Create Index -> Enter filebeat-* as you Index Pattern, select Next, select your @timestamp as your timestamp field, select create.</p>

<p>Now from the visualization section we will add 11 Visualizations. Everytime that you create a visualization, make sure that you select filebeat as your pattern (thats if you are using filebeat).</p>

<p>When configuring your visualization it will look like the configuration box from below:</p>

<p><img width="337" alt="image" src="https://user-images.githubusercontent.com/567298/55053831-1aeaea00-5066-11e9-93cf-edfd2ac98e44.png"></p>

<h2>Geomap: Map to see where people are connecting from</h2>

<p><img width="728" alt="kibana geomap" src="https://user-images.githubusercontent.com/567298/55258476-9cf83000-526b-11e9-8560-014098c435ee.png"></p>

<p>Select New Visualization: Coordinate Map</p>

<pre><code>  -&gt; Metrics, Value: Count. 
     Buckets, Geo Coordinates, Aggregation: Geohash, 
     Field: nginx.access.geoip.location. 
</code></pre>

<p>Save the visualization, in my case Nginx:GeoMap:Filebeat</p>

<h2>Piechart: Cities</h2>

<p>This can give us a quick overview on the percentage of people interested in our website grouped per city.</p>

<p><img width="688" alt="image" src="https://user-images.githubusercontent.com/567298/55258529-c44efd00-526b-11e9-900a-e93ed7eed11e.png"></p>

<p>Select New Visualization, Pie</p>

<pre><code> -&gt; Metrics: Slice Size, Aggregation: Count
 -&gt; Buckets: Split Slices, 
    Aggregation: Terms, Field: nginx.access.geoip.city_name, 
    Order by: metric: count, 
    Order: Descending, Size: 20
</code></pre>

<p>Save Visualization.</p>

<h2>Top 10 Accessed Pages</h2>

<p>Great for seeing which page is popular, and Kibana makes it easy to see which page is doing good over a specific time.</p>

<p><img width="750" alt="image" src="https://user-images.githubusercontent.com/567298/55258583-f2ccd800-526b-11e9-98b8-4f1da917cb52.png"></p>

<p>New Visualization: Vertical</p>

<pre><code>  -&gt; Metrics: Y-Axis, Aggregation: Count
  -&gt; Buckets: X-Axis, Aggregation: Terms, 
     Field: nginx.access.url, 
     Ordery by: Metric count, 
     Order: Descending, Size 10
</code></pre>

<p>I would like to remove <code>/rss</code> and <code>/</code> from my results, so in the search box:</p>

<pre><code>NOT (nginx.access.url:"/" OR nginx.access.url:"/rss/" OR nginx.access.url:"/subscribe/" OR nginx.access.url:*.txt)
</code></pre>

<p>Save Visualization.</p>

<h2>Top 5 HTTP Status Codes</h2>

<p>A Grouping of Status Codes (You should see more 200&rsquo;s) but its quick to identify when 404&rsquo;s spike etc.</p>

<p><img width="692" alt="image" src="https://user-images.githubusercontent.com/567298/55258695-44756280-526c-11e9-887c-bd58e9b25750.png"></p>

<p>Select new visualization: Vertical Bar</p>

<pre><code>  -&gt; Metrics: Y-Axis, Aggregation: Count
  -&gt; Buckets: X-Axis, Aggregation: Terms, 
     Field: nginx.access.response_code, 
     Ordery by: Metric count, 
     Order: Descending, Size 5
</code></pre>

<p>Save Visualization</p>

<h2>Top 404 Pages</h2>

<p>So when people are requesting pages that does not exist, it could most probably be bots trying to attack your site, or trying to gain access etc. This is a great view to see which ones are they trying and then you can handle it from there.</p>

<p><img width="699" alt="image" src="https://user-images.githubusercontent.com/567298/55259089-5b688480-526d-11e9-963d-936a61285507.png"></p>

<pre><code>  -&gt; Metrics: Y-Axis, Aggregation: Count
  -&gt; Buckets: X-Axis, Aggregation: Terms, 
     Terms, Field: nginx.access.url, 
     Order by: Metric count, 
     Order: Descending, Size 20
</code></pre>

<h2>Top 10 User Agents</h2>

<p>Some insights to see the top 10 browsers.</p>

<p><img width="611" alt="image" src="https://user-images.githubusercontent.com/567298/55258763-74246a80-526c-11e9-9873-da2766e4a518.png"></p>

<p>New Visualization: Data Table</p>

<pre><code>  -&gt; Metrics: Y-Axis, Aggregation: Count
  -&gt; Buckets: Split Rows, 
     Aggregation: Terms, 
     Field: nginx.access.user_agent.name, 
     Ordery by: Metric count, 
     Order: Descending, Size 10
</code></pre>

<p>Save Visualization</p>

<h2>Timeseries: Status Codes over Time</h2>

<p>With timeseries data its great to see when there was a spike in status codes, when you identify the time, you can further investigate why that happened.</p>

<p>New Visualization: Timelion</p>

<pre><code>.es(index=filebeat*, timefield='@timestamp', q=nginx.access.response_code:200).label('OK'), .es(index=filebeat*, timefield='@timestamp', q=nginx.access.response_code:404).label('Page Not Found')
</code></pre>

<h2>Timeseries: Successfull Website Hits over Time</h2>

<p>This is a good view to see how your website is serving traffic over time.</p>

<p><img width="734" alt="image" src="https://user-images.githubusercontent.com/567298/55258920-eac16800-526c-11e9-85ca-5ebff8978b2b.png"></p>

<p>New Visualization: Timelion</p>

<pre><code>.es(index=filebeat*, timefield='@timestamp', q=nginx.access.response_code:200).label('200')
</code></pre>

<h2>Count Metric: Website Hits</h2>

<p>A counter to see the number of website hits over time.</p>

<p><img width="606" alt="image" src="https://user-images.githubusercontent.com/567298/55258980-17757f80-526d-11e9-8664-91afda3db62c.png"></p>

<p>New Visualization: Metric</p>

<pre><code>  -&gt; Search Query: fields.blog_name:sysadmins AND nginx.access.response_code:200
  -&gt; Metrics: Y-Axis, Aggregation: Count
</code></pre>

<h2>Average Bytes Transferred</h2>

<p>Line chart with the amount of bandwidth being transferred.</p>

<p><img width="677" alt="image" src="https://user-images.githubusercontent.com/567298/55259036-3c69f280-526d-11e9-90fe-0853d2c0313d.png"></p>

<pre><code>New Visualization: Line

-&gt; Metrics: Y-Axis, Aggregation: Average, Field: nginx.access.body_sent.bytes
-&gt; Buckets: X-Axis, Aggregation: Date Histogram, Field: @timestamp
</code></pre>

<h2>Tag Cloud with Most Popular Cities</h2>

<p>I&rsquo;ve used cities here, but its a nice looking visualization to group the most accessed fields. With server logs you can use this for the usernames failed in ssh attempts for example.</p>

<p><img width="646" alt="image" src="https://user-images.githubusercontent.com/567298/55259343-14c75a00-526e-11e9-88dd-7c3a3f396280.png"></p>

<pre><code>  -&gt; Metrics: Tag size, Aggregation: Count
  -&gt; Buckets: Tags, 
     Aggregation: Terms, 
     Field: nginx.access.geoip.city_name, 
     Ordery by: Metric count, 
     Order: Descending, Size 10
</code></pre>

<h2>Create the Dashboard</h2>

<p>Now that we have all our visualizations, lets build the dashboard that hosts all our visualizations.</p>

<p>Select Dashboard -> Create New Dashboard -> Add -> Select your visualizations -> Reorder and Save</p>

<p>The visualizations in my dashboard looks like this:</p>

<p><img width="1266" alt="image" src="https://user-images.githubusercontent.com/567298/55418811-b8b54c00-5573-11e9-810d-d244d27c4fb3.png"></p>

<p>This is a basic dashboard but its just enough so that you can get your hands dirty and build some awesome visualizations.</p>
]]></content>
  </entry>
  
</feed>
