<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vpn | Ruan Bekker's Blog]]></title>
  <link href="https://blog.ruanbekker.com/blog/categories/vpn/atom.xml" rel="self"/>
  <link href="https://blog.ruanbekker.com/"/>
  <updated>2023-07-15T18:04:57-04:00</updated>
  <id>https://blog.ruanbekker.com/</id>
  <author>
    <name><![CDATA[Ruan]]></name>
    <email><![CDATA[ruan@ruanbekker.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Wireguard VPN With Unbound ADS Blocking DNS]]></title>
    <link href="https://blog.ruanbekker.com/blog/2021/03/10/wireguard-vpn-with-unbound-ads-blocking-dns/"/>
    <updated>2021-03-10T00:59:51-05:00</updated>
    <id>https://blog.ruanbekker.com/blog/2021/03/10/wireguard-vpn-with-unbound-ads-blocking-dns</id>
    <content type="html"><![CDATA[<p>In this tutorial we will setup a Wireguard VPN with Unbound DNS Server with some additional configuration to block ads for any clients using the DNS Server while connected to the VPN.</p>

<p>A massive thank you to <a href="https://github.com/complexorganizations/wireguard-manager/blob/main/wireguard-server.sh">complexorganizations</a> for providing the source where this tuturial is based off.</p>

<h2>Install Packages</h2>

<p>I will be using Debian Buster for this installation:</p>

<pre><code>$ apt update
$ apt upgrade -y
$ apt update &amp;&amp; apt install iptables curl coreutils bc jq sed e2fsprogs -y
$ apt install linux-headers-"$(uname -r)" -y
</code></pre>

<p>I want to disable IPv6, in my case I had to apply a couple of kernel parameter tweaks:</p>

<pre><code>$ echo net.ipv6.conf.all.disable_ipv6 = 1 &gt; /etc/sysctl.d/70-disable-ipv6.conf
$ echo "net.ipv6.conf.$(ip -4 route ls | grep default | grep -Po '(?&lt;=dev )(\S+)' | head -1).disable_ipv6 = 1" &gt;&gt; /etc/sysctl.d/70-disable-ipv6.conf
$ echo 'net.ipv4.ip_forward = 1' &gt; /etc/sysctl.d/60-enable-ip-forwarding.conf
$ sysctl -p -f /etc/sysctl.d/70-disable-ipv6.conf
$ sysctl -p -f /etc/sysctl.d/60-enable-ip-forwarding.conf
</code></pre>

<h2>Environment Variables</h2>

<p>A couple of environment variables that we will reference during our installation, tweak where your setup differs:</p>

<pre><code>$ export NPROC=$(nproc)
$ export SERVER_HOST=$(curl -s -4 ifconfig.co)
$ export SERVER_PORT="51820"
$ export MTU_CHOICE="1280"
$ export NAT_CHOICE="25"
$ export IPV4_SUBNET="10.7.0.0/24"
$ export PRIVATE_SUBNET_V4=${IPV4_SUBNET}
$ export GATEWAY_ADDRESS_V4="${PRIVATE_SUBNET_V4::-4}1"
$ export PRIVATE_SUBNET_MASK_V4=$(echo "$PRIVATE_SUBNET_V4" | cut -d "/" -f 2)
$ export CLIENT_DNS="$GATEWAY_ADDRESS_V4"
$ export CLIENT_ALLOWED_IP="0.0.0.0/0"
</code></pre>

<h2>Unbound Installation</h2>

<p>Download the unbound <code>root.hints</code> file from internic:</p>

<pre><code>$ curl https://www.internic.net/domain/named.cache --create-dirs -o /etc/unbound/root.hints
</code></pre>

<p>Generate the <code>/etc/unbound/unbound.conf</code> config:</p>

<pre><code>$ echo "include: \"/etc/unbound/unbound.conf.d/*.conf\"
server:
    num-threads: $NPROC
    verbosity: 1
    root-hints: /etc/unbound/root.hints
    # auto-trust-anchor-file: /var/lib/unbound/root.key
    interface: 0.0.0.0
    interface: ::0
    max-udp-size: 3072
    access-control: 0.0.0.0/0                 refuse
    access-control: $PRIVATE_SUBNET_V4               allow
    access-control: 127.0.0.1                 allow
    private-address: $PRIVATE_SUBNET_V4
    hide-identity: yes
    hide-version: yes
    harden-glue: yes
    harden-dnssec-stripped: yes
    harden-referral-path: yes
    unwanted-reply-threshold: 10000000
    val-log-level: 1
    cache-min-ttl: 1800
    cache-max-ttl: 14400
    prefetch: yes
    qname-minimisation: yes
    prefetch-key: yes
    forward-zone:
        name: \".\"
        forward-addr: 1.1.1.1
        forward-addr: 8.8.8.8" &gt;&gt; /etc/unbound/unbound.conf
</code></pre>

<p>Download the host entries for all the ad servers which we will block:</p>

<pre><code>$ curl https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/social/hosts -o /tmp/adblocking_hosts
</code></pre>

<p>Include the ads configuration in <code>/etc/unbound/unbound.d/ads.conf</code>:</p>

<pre><code>$ echo "server:" &gt; /etc/unbound/unbound.conf.d/ads.conf
$ cat /etc/unbound/adblocking_hosts | grep '^0\.0\.0\.0' | awk '{print "    local-zone: \""$2"\" redirect\n    local-data: \""$2" A 0.0.0.0\""}' &gt;&gt; /etc/unbound/unbound.conf.d/ads.conf
</code></pre>

<p>Update the VPN Server&rsquo;s nameserver configuration to unbound:</p>

<pre><code>$ chattr -i /etc/resolv.conf
$ mv /etc/resolv.conf /etc/resolv.conf.old
$ echo "nameserver 127.0.0.1" &gt;&gt;/etc/resolv.conf
$ chattr +i /etc/resolv.conf
</code></pre>

<p>Enable and Restart Unbound:</p>

<pre><code>$ systemctl enable unbound
$ systemctl restart unbound
</code></pre>

<p>Test if DNS Resolution works:</p>

<pre><code>$ dig google.com
</code></pre>

<h2>Wireguard Installation</h2>

<p>Include the sources and install wireguard and its dependencies:</p>

<pre><code>$ echo "deb http://deb.debian.org/debian/ unstable main" &gt;&gt;/etc/apt/sources.list.d/unstable.list
$ echo -e "Package: *\nPin: release a=unstable\nPin-Priority: 90"  &gt;&gt;/etc/apt/preferences.d/limit-unstable
$ apt update
$ apt install wireguard qrencode haveged ifupdown -y
</code></pre>

<p>Set the environment variables and tweak where you need to:</p>

<pre><code>$ export SERVER_PRIVKEY=$(wg genkey)
$ export SERVER_PUBKEY=$(echo "$SERVER_PRIVKEY" | wg pubkey)
$ export CLIENT_NAME="ruan-pc"
$ export CLIENT_PRIVKEY=$(wg genkey)
$ export CLIENT_PUBKEY=$(echo "$CLIENT_PRIVKEY" | wg pubkey)
$ export CLIENT_ADDRESS_V4="${PRIVATE_SUBNET_V4::-4}3"
$ export PRESHARED_KEY=$(wg genpsk)
$ export WIREGUARD_PUB_NIC="wg0"
$ export PEER_PORT=$(shuf -i1024-65535 -n1)
$ export WG_CONFIG="/etc/wireguard/$WIREGUARD_PUB_NIC.conf"
</code></pre>

<p>Create the wireguard clients directory and create the config filename:</p>

<pre><code>$ mkdir -p /etc/wireguard/clients
$ touch $WG_CONFIG &amp;&amp; chmod 600 $WG_CONFIG
</code></pre>

<p>Create the wireguard server config content and write it to the config file:</p>

<pre><code>$ echo "# $PRIVATE_SUBNET_V4 $SERVER_HOST:$SERVER_PORT $SERVER_PUBKEY $CLIENT_DNS $MTU_CHOICE $NAT_CHOICE $CLIENT_ALLOWED_IP
[Interface]
Address = $GATEWAY_ADDRESS_V4/$PRIVATE_SUBNET_MASK_V4
ListenPort = $SERVER_PORT
PrivateKey = $SERVER_PRIVKEY
PostUp = iptables -A FORWARD -i $WIREGUARD_PUB_NIC -o $SERVER_PUB_NIC -j ACCEPT; iptables -t nat -A POSTROUTING -o $SERVER_PUB_NIC -j MASQUERADE; iptables -A INPUT -s $PRIVATE_SUBNET_V4 -p udp -m udp --dport 53 -m conntrack --ctstate NEW -j ACCEPT
PostDown = iptables -D FORWARD -i $WIREGUARD_PUB_NIC  -o $SERVER_PUB_NIC -j ACCEPT; iptables -t nat -D POSTROUTING -o $SERVER_PUB_NIC -j MASQUERADE; iptables -D INPUT -s $PRIVATE_SUBNET_V4 -p udp -m udp --dport 53 -m conntrack --ctstate NEW -j ACCEPT
SaveConfig = false
# $CLIENT_NAME start
[Peer]
PublicKey = $CLIENT_PUBKEY
PresharedKey = $PRESHARED_KEY
AllowedIPs = $CLIENT_ADDRESS_V4/32
# $CLIENT_NAME end &gt;&gt;" &gt;&gt; $WG_CONFIG
</code></pre>

<p>Create the client config:</p>

<pre><code>$ echo "# $CLIENT_NAME
[Interface]
Address = $CLIENT_ADDRESS_V4/$PRIVATE_SUBNET_MASK_V4
DNS = $CLIENT_DNS
ListenPort = $PEER_PORT
MTU = $MTU_CHOICE
PrivateKey = $CLIENT_PRIVKEY
[Peer]
AllowedIPs = $CLIENT_ALLOWED_IP
Endpoint = $SERVER_HOST:$SERVER_PORT
PersistentKeepalive = $NAT_CHOICE
PresharedKey = $PRESHARED_KEY
PublicKey = $SERVER_PUBKEY" &gt;&gt; /etc/wireguard/clients/"$CLIENT_NAME"-$WIREGUARD_PUB_NIC.conf
</code></pre>

<p>Restart and Enable Wireguard:</p>

<pre><code>$ systemctl enable wg-quick@$WIREGUARD_PUB_NIC
$ systemctl restart wg-quick@$WIREGUARD_PUB_NIC
</code></pre>

<h2>Connect your Client</h2>

<p>Head over to <a href="https://www.wireguard.com/install/">Wireguard.com</a> and install the client of your choice then generate a QR Code:</p>

<pre><code>$ qrencode -t ansiutf8 -l L &lt;/etc/wireguard/clients/"$CLIENT_NAME"-$WIREGUARD_PUB_NIC.conf
</code></pre>

<p>Configure your client and connect to the VPN, after the connection has been established you can have a look on the server for connection details with:</p>

<pre><code>$ wg show
</code></pre>

<p>Once connected head over to a website with ads, such as <a href="https://www.speedtest.net/">https://www.speedtest.net/</a> and you should see no ads.</p>

<h2>Thanks</h2>

<p>Thanks for reading, if you like my content, check out my <strong><a href="https://ruan.dev">website</a></strong> or follow me at <strong><a href="https://twitter.com/ruanbekker">@ruanbekker</a></strong> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy Ad-Hoc VPNs With Sshuttle]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/10/26/easy-ad-hoc-vpns-with-sshuttle/"/>
    <updated>2020-10-26T06:59:44+00:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/10/26/easy-ad-hoc-vpns-with-sshuttle</id>
    <content type="html"><![CDATA[<p>Theres a utility called <code>sshuttle</code> which allows you to VPN via a SSH connection, which is really handy when you quickly want to be able to reach a private range, which is accessible from a public reachable server such as a bastion host.</p>

<p>In this tutorial, I will demonstrate how to install sshuttle on a mac, if you are using a different OS you can see their <a href="https://github.com/sshuttle/sshuttle">documentation</a> and then we will use the VPN connection to reach a &ldquo;prod&rdquo; and a &ldquo;dev&rdquo; environment.</p>

<h2>SSH Config</h2>

<p>We will declare 2 jump-boxes / bastion hosts in our ssh config:</p>

<ul>
<li><code>dev-jump-host</code> is a public server that has network access to our private endpoints in <code>172.31.0.0/16</code></li>
<li><code>prod-jump-host</code> is a public server that has network access to our private endpoints in <code>172.31.0.0/16</code></li>
</ul>


<p>In this case, the above example is 2 AWS Accounts with the same CIDR&rsquo;s, and wanted to demonstrate using sshuttle for this reason, as if we had different CIDRs we can setup a dedicated VPN and route them respectively.</p>

<pre><code>$ cat ~/.ssh/config
Host *
    Port 22
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
    ServerAliveInterval 60
    ServerAliveCountMax 30

Host dev-jump-host
    HostName dev-bastion.mydomain.com
    User bastion
    IdentityFile ~/.ssh/id_rsa

Host prod-jump-host
    HostName prod-bastion.mydomain.com
    User bastion
    IdentityFile ~/.ssh/id_rsa
</code></pre>

<h2>Install sshuttle</h2>

<p>Install sshuttle for your operating system:</p>

<pre><code># macos
$ brew install shuttle

# debian
$ apt install sshuttle
</code></pre>

<h2>Usage</h2>

<p>To setup a vpn tunnel to route connections to our prod account:</p>

<pre><code>$ sshuttle -r prod-jump-host 172.31.0.0/16
</code></pre>

<p>Or to setup a vpn tunnel to route connections to our dev account:</p>

<pre><code>$ sshuttle -r dev-jump-host 172.31.0.0/16
</code></pre>

<p>Once one of your chosen sessions establishes, you can use a new terminal to access your private network, as example:</p>

<pre><code>$ nc -vz 172.31.23.40 22
</code></pre>

<h2>Bash Functions</h2>

<p>We can wrap this into functions, so we can use <code>vpn_dev</code> or <code>vpn_prod</code> which aliases to the commands shown below:</p>

<pre><code>$ cat ~/.functions
vpn_prod(){
  sshuttle -r prod-jump-host 172.31.0.0/16
}

vpn_dev(){
  sshuttle -r dev-jump-host 172.31.0.0/16
}
</code></pre>

<p>Now source that to your environment:</p>

<pre><code>$ source ~/.functions
</code></pre>

<p>Then you should be able to use <code>vpn_dev</code> and <code>vpn_prod</code> from your terminal:</p>

<pre><code>$ vpn_prod
[local sudo] Password:
Warning: Permanently added 'xx,xx' (ECDSA) to the list of known hosts.
client: Connected.
</code></pre>

<p>And in a new terminal we can connect to a RDS MySQL Database sitting in a private network:</p>

<pre><code>$ mysql -h my-prod-db.pvt.mydomain.com -u dbadmin -p$pass
mysql&gt;
</code></pre>

<h2>Sshuttle as a Service</h2>

<p>You can create a systemd unit file to run a sshuttle vpn as a service. In this scenario I provided 2 different vpn routes, dev and prod, so you can create 2 seperate systemd unit files, but my case I will only create for prod:</p>

<pre><code>$ cat /etc/systemd/system/vpn_prod.service
[Unit]
Description=ShuttleProdVPN
Wants=network-online.target
After=network-online.target
StartLimitIntervalSec=500
StartLimitBurst=5

[Service]
User=root
Group=root
Type=simple
Restart=on-failure
RestartSec=10s
ExecStart=/usr/bin/sshuttle -r prod-jump-host 172.31.0.0/16

[Install]
WantedBy=multi-user.target
</code></pre>

<p>Reload the systemd daemon:</p>

<pre><code>$ sudo systemctl daemon-reload
</code></pre>

<p>Enable and start the service:</p>

<pre><code>$ sudo systemctl enable vpn_prod
$ sudo systemctl start vpn_prod
</code></pre>

<h2>Thank You</h2>

<p>Thanks for reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IPSec Site to Site VPN With Dynamic IPs With Openswan]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/04/19/ipsec-site-to-site-vpn-with-dynamic-ips-with-openswan/"/>
    <updated>2020-04-19T20:58:17+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/04/19/ipsec-site-to-site-vpn-with-dynamic-ips-with-openswan</id>
    <content type="html"><![CDATA[<p>In this tutorial we will setup a site to site ipsec vpn with strongswan and we will enable each server to discover the other vpn server via dynamic dns. We will also append to our config the ability of roadwarriors so that you will be able to connect to your homelab from any mobile or laptop device from any remote source.</p>

<h2>Some background</h2>

<p>Me and one of my friends decided to build a site to site vpn with strongswan so that our homelabs could be reachable to each other over private networks.</p>

<p>One challenge that I thought of is that both of our internet providers don&rsquo;t support static ip addressing, so each vpn server needs to know where to connect to whenever the ip address changes.</p>

<h2>What we will be doing</h2>

<p>We will setup strongswan vpn on both servers and allow the private LAN ranges to be reachable for both sides. As I have a domain hosted on cloudflare, I will be using cloudflare&rsquo;s api to update the A record of each sides dns whenever the IP changes.</p>

<h2>Environment</h2>

<p>On my side, which I will be referring to as <strong>Side-A</strong>:</p>

<pre><code>Public DNS Name: side-a.example.com
Private Range: 192.168.0.0/24
VPN Server IP: 192.168.0.2
</code></pre>

<p>On my friend&rsquo;s side, which I will be referring to as <strong>Side-B</strong>:</p>

<pre><code>Public DNS Name: side-b.example.com
Private Range: 192.168.1.0/24
VPN Server IP: 192.168.1.2
</code></pre>

<h2>Cloudflare Dynamic DNS</h2>

<p>You don&rsquo;t need to use Cloudflare, theres services such as dyndns.com, no-ip.com. But for this tutorial I will be using cloudflare to utilize my own domain.</p>

<p>I will be using the <a href="https://github.com/LINKIWI/cloudflare-ddns-client">cloudflare-ddns-client</a></p>

<p>First we need to create a API Token, head over to your dashboard: <a href="https://dash.cloudflare.com">dash.cloudflare.com</a>, head over to &ldquo;my profile&rdquo;, select &ldquo;API Tokens&rdquo;, then allow &ldquo;Read Zones&rdquo; and &ldquo;Edit DNS&rdquo;, then select &ldquo;Create Token&rdquo;. Keep the returned token value in a safe place.</p>

<p>Install the pre-requirements:</p>

<pre><code>$ apt install python python-dev python-pip make curl build-essential -y
</code></pre>

<p>Get the source and install:</p>

<pre><code>$ git clone https://github.com/LINKIWI/cloudflare-ddns-client.git
$ cd cloudflare-ddns-client
$ make install
</code></pre>

<p>We will now configure the cloudflare dynamic dns client, this will be done on both sides, but will only demonstrate for side-a:</p>

<pre><code>$ cloudflare-ddns --configure
Use API token or API key to authenticate?
Choose [T]oken or [K]ey: T
Enter the API token you created at https://dash.cloudflare.com/profile/api-tokens.
Required permissions are READ Account.Access: Organizations, Identity Providers, and Groups; READ Zone.Zone; EDIT Zone.DNS
CloudFlare API token: [redacted]
Enter the domains for which you would like to automatically update the DNS records, delimited by a single comma.
Comma-delimited domains: side-a.example.com
</code></pre>

<p>Testing it out to ensure the A record can be updated:</p>

<pre><code>$ cloudflare-ddns --update-now
Found external IPv4: "1.x.x.x"
Listing all zones.
Finding all DNS records.
Updating the A record (ID x) of (sub)domain side-a.example.com (ID x) to 1.x.x.x.
DNS record updated successfully!
</code></pre>

<p>We can run this command from above in a cron, but I will use a bash script to only run when the public ip changed: <code>/opt/scripts/detect_ip_change.sh</code>:</p>

<pre><code>#!/bin/bash
set -ex
MY_DDNS_HOST="side-a.example.com"

if [ $(dig ${MY_DDNS_HOST} +short) == $(curl -s icanhazip.com) ];
  then exit 0;
  else /usr/local/bin/cloudflare-ddns --update-now;
fi
</code></pre>

<p>Make the file executable: <code>chmod +x /opt/scripts/detect_ip_change.sh</code> then edit your cronjobs: <code>crontab -e</code> and add the script:</p>

<pre><code>* * * * * /opt/scripts/detect_ip_change.sh
</code></pre>

<p>This will keep your DNS updated, this needs to be done on both sides, if you want to use dynamic dns.</p>

<h2>Port Forwarding</h2>

<p>We will need to forward UDP traffic from the router to the VPN server, on both sides:</p>

<pre><code>Port: UDP/500 
Target: VPN-Server-IP:500

Port: UDP/4500
Target: VPN-Server-IP:4500
</code></pre>

<h2>Create a Pre-Shared Key</h2>

<p>Create a preshared key that will be used on both sides to authenticate:</p>

<pre><code>$ openssl rand -base64 36
pgDU4eKZaQNL7GNRWJPvZbaSYFn2PAFjK9vDOvxAQ85p7qc4
</code></pre>

<p>This value will be used on both sides, which we will need later.</p>

<h2>Install Strongswan on Side-A</h2>

<p>Install strongswan and enable the service on boot:</p>

<pre><code>$ apt install strongswan -y
$ systemctl enable strongswan
</code></pre>

<p>The left side will be the side we are configuring and the right side will be the remote side.</p>

<p>Create the config: <code>/etc/ipsec.conf</code> and provide the following config:</p>

<pre><code>config setup
    charondebug="all"
    uniqueids=yes
    virtual_private=
    cachecrls=no

conn vpn-to-side-b
    type=tunnel
    authby=secret
    left=%defaultroute
    leftid=side-a.example.com
    leftsubnet=192.168.0.0/24
    right=%side-b.example.com
    rightid=side-b.example.com
    rightsubnet=192.168.1.0/24
    ike=aes256-sha2_256-modp1024!
    esp=aes256-sha2_256!
    keyingtries=0
    ikelifetime=1h
    lifetime=8h
    dpddelay=30
    dpdtimeout=120
    dpdaction=restart
    auto=start
</code></pre>

<p>Create the secrets file: <code>/etc/ipsec.secrets</code>:</p>

<pre><code>side-b.example.com : PSK "pgDU4eKZaQNL7GNRWJPvZbaSYFn2PAFjK9vDOvxAQ85p7qc4"
</code></pre>

<p>Append the following kernel parameters to <code>/etc/sysctl.conf</code>:</p>

<pre><code>net.ipv4.ip_forward = 1
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.all.send_redirects = 0
</code></pre>

<p>Save:</p>

<pre><code>$ sysctl -p
</code></pre>

<p>We now want to add a POSTROUTING and FORWARD rule using iptables:</p>

<pre><code>$ iptables -t nat -A POSTROUTING -s 192.168.1.0/24  -d 192.168.0.0/24 -j MASQUERADE
$ iptables -A FORWARD -s 192.168.1.0/24 -d 192.168.0.0/24 -j ACCEPT
</code></pre>

<p>Now we need to route back:</p>

<pre><code>$ ip route add 192.168.1.0/24 via 192.168.0.2 dev eth0
</code></pre>

<p>We want to persist the iptables and static route across reboots, so edit the <code>/etc/rc.local</code> file, if it&rsquo;s not there create it with the following values:</p>

<pre><code>#!/bin/bash
iptables -t nat -A POSTROUTING -s 192.168.1.0/24  -d 192.168.0.0/24 -j MASQUERADE
iptables -A FORWARD -s 192.168.1.0/24 -d 192.168.0.0/24 -j ACCEPT
ip route add 192.168.1.0/24 via 192.168.0.2 dev eth0
exit 0
</code></pre>

<p>If you created the file, make sure to apply executable permissions:</p>

<pre><code>$ chmod +x /etc/rc.local
</code></pre>

<p>Read the secrets and restart strongswan:</p>

<pre><code>$ ipsec rereadsecrets
$ systemctl restart strongswan
</code></pre>

<h2>Install Strongswan on Side-B</h2>

<p>Install strongswan and enable the service on boot:</p>

<pre><code>$ apt install strongswan -y
$ systemctl enable strongswan
</code></pre>

<p>The left side will be the side we are configuring and the right side will be the remote side.</p>

<p>Create the config: <code>/etc/ipsec.conf</code> and provide the following config:</p>

<pre><code>config setup
    charondebug="all"
    uniqueids=yes
    virtual_private=
    cachecrls=no

conn vpn-to-side-a
    type=tunnel
    authby=secret
    left=%defaultroute
    leftid=side-b.example.com
    leftsubnet=192.168.1.0/24
    right=%side-a.example.com
    rightid=side-a.example.com
    rightsubnet=192.168.0.0/24
    ike=aes256-sha2_256-modp1024!
    esp=aes256-sha2_256!
    keyingtries=0
    ikelifetime=1h
    lifetime=8h
    dpddelay=30
    dpdtimeout=120
    dpdaction=restart
    auto=start
</code></pre>

<p>Create the secrets file: <code>/etc/ipsec.secrets</code>:</p>

<pre><code>side-a.example.com : PSK "pgDU4eKZaQNL7GNRWJPvZbaSYFn2PAFjK9vDOvxAQ85p7qc4"
</code></pre>

<p>Append the following kernel parameters to <code>/etc/sysctl.conf</code>:</p>

<pre><code>net.ipv4.ip_forward = 1
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.all.send_redirects = 0
</code></pre>

<p>Save:</p>

<pre><code>$ sysctl -p
</code></pre>

<p>We now want to add a POSTROUTING and FORWARD rule using iptables:</p>

<pre><code>$ iptables -t nat -A POSTROUTING -s 192.168.0.0/24  -d 192.168.1.0/24 -j MASQUERADE
$ iptables -A FORWARD -s 192.168.0.0/24 -d 192.168.1.0/24 -j ACCEPT
</code></pre>

<p>Now we need to route back:</p>

<pre><code>$ ip route add 192.168.0.0/24 via 192.168.1.2 dev eth0
</code></pre>

<p>We want to persist the iptables and static route across reboots, so edit the <code>/etc/rc.local</code> file, if it&rsquo;s not there create it with the following values:</p>

<pre><code>#!/bin/bash
iptables -t nat -A POSTROUTING -s 192.168.0.0/24  -d 192.168.1.0/24 -j MASQUERADE
iptables -A FORWARD -s 192.168.0.0/24 -d 192.168.1.0/24 -j ACCEPT
ip route add 192.168.0.0/24 via 192.168.1.2 dev eth0
exit 0
</code></pre>

<p>If you created the file, make sure to apply executable permissions:</p>

<pre><code>$ chmod +x /etc/rc.local
</code></pre>

<p>Read the secrets and restart strongswan:</p>

<pre><code>$ ipsec rereadsecrets
$ systemctl restart strongswan
</code></pre>

<h2>Verify Status</h2>

<p>Verify that the ipsec tunnel is up on side-a:</p>

<pre><code>$ ipsec statusall

Connections:
  vpn-to-side-b:  %any...side-b.example.com,0.0.0.0/0,::/0  IKEv1/2
  vpn-to-side-b:   local:  [side-a.example.com] uses pre-shared key authentication
  vpn-to-side-b:   remote: [side-b.example.com] uses pre-shared key authentication
  vpn-to-side-b:   child:  192.168.0.0/24 === 192.168.1.0/24 TUNNEL
Security Associations (1 up, 0 connecting):
  vpn-to-side-b[1]: ESTABLISHED 28 minutes ago, 192.168.0.2[side-a.example.com]...4x.x.x.214[side-b.example.com]
  vpn-to-side-b[1]: IKEv2 SPIs: 81996170df1c927d_i e8294946491ddf08_r, pre-shared key reauthentication in 2 hours
  vpn-to-side-b[1]: IKE proposal: AES_CBC_128/HMAC_SHA2_256_128/PRF_HMAC_SHA2_256/ECP_256
  vpn-to-side-b{2}:  INSTALLED, TUNNEL, reqid 1, ESP in UDP SPIs: cc4504be_i c294cb26_o
  vpn-to-side-b{2}:  AES_CBC_128/HMAC_SHA2_256_128, 0 bytes_i, 240 bytes_o (4 pkts, 7s ago), rekeying in 18 minutes
  vpn-to-side-b{2}:   192.168.0.0/24 === 192.168.1.0/24
</code></pre>

<p>Verify that the ipsec tunnel is up on side-b:</p>

<pre><code>$ ipsec statusall

Connections:
 vpn-to-side-a:  %any...side-a.example.com,0.0.0.0/0,::/0  IKEv1/2
 vpn-to-side-a:   local:  [side-b.example.com] uses pre-shared key authentication
 vpn-to-side-a:   remote: [side-a.example.com] uses pre-shared key authentication
 vpn-to-side-a:   child:  192.168.1.0/24 === 192.168.0.0/24 TUNNEL
Security Associations (1 up, 0 connecting):
 vpn-to-side-a[2]: ESTABLISHED 20 minutes ago, 192.168.1.2[side-b.example.com]...14x.x.x.x[side-a.example.com]
 vpn-to-side-a[2]: IKEv2 SPIs: 81996170df1c927d_i e8294946491ddf08_r, pre-shared key reauthentication in 2 hours
 vpn-to-side-a[2]: IKE proposal: AES_CBC_128/HMAC_SHA2_256_128/PRF_HMAC_SHA2_256/ECP_256
 vpn-to-side-a{2}:  INSTALLED, TUNNEL, reqid 1, ESP in UDP SPIs: c294cb26_i cc4504be_o
 vpn-to-side-a{2}:  AES_CBC_128/HMAC_SHA2_256_128, 0 bytes_i, 0 bytes_o, rekeying in 26 minutes
 vpn-to-side-a{2}:   192.168.1.0/24 === 192.168.0.0/24
</code></pre>

<p>From side-a (192.168.0.2) ping the gateway on side-b (192.168.1.1):</p>

<pre><code>$ $ ping -c2 192.168.1.1
PING 10.3.96.2 (192.168.1.1) 56(84) bytes of data.
64 bytes from 192.168.1.1: icmp_seq=1 ttl=62 time=11.9 ms
</code></pre>

<p>If you want to be able to reach the private range of the other side of the vpn from any device on your network, you should add a static route on your router to inform your default gateway where to route traffic to.</p>

<p>In this case on side-a (192.168.0.0/24) we want to inform our default gateway to route (192.168.1.0/24) to the VPN as it knows to route that destination over the VPN.</p>

<p>On side-a, on your router, add a static route:</p>

<pre><code>Route: 192.168.1.0
Subnet: 255.255.255.0
Gateway: 192.168.0.2
</code></pre>

<p>On side-b, on your router, add a static route:</p>

<pre><code>Route: 192.168.0.0
Subnet: 255.255.255.0
Gateway: 192.168.1.2
</code></pre>

<h2>Optional: Roadwarrior VPN Clients</h2>

<p>This step is optional, but since we can access each others homelabs, we thought it would be nice to be able to access the resources from mobile devices or laptops when we are on remote locations.</p>

<p>We made it that each VPN owner will connect to its own endpoint (for roadwarriors), so side-a (which will be me) will connect to its own dns endpoint to connect when away from home..</p>

<p>I will only demonstrate how to append your config to add the ability for a roadwarrion vpn connection, append to the <code>/etc/ipsec.conf</code>:</p>

<pre><code># ...
conn ikev2-vpn
    auto=add
    type=tunnel
    authby=secret
    left=%any
    leftid=side-a.roadwarrior
    leftsubnet=0.0.0.0/0
    right=%any
    rightid=%any
    rightsourceip=10.10.0.0/24
    rightdns=192.168.0.1,8.8.8.8
    auto=start
</code></pre>

<p>Append the secret in <code>/etc/ipsec.secrets</code>:</p>

<pre><code># ...
side-a.roadwarrior my-laptop : PSK "MySuperSecureSecret123"
</code></pre>

<p>Add the vpn ip&rsquo;s that we will assign to the roardwarrior clients to the routing table:</p>

<pre><code>$ ip route add 10.10.0.0/24 via 192.168.0.2 dev eth0
</code></pre>

<p>If you only want the roadwarriors to be able to reach your network, you will only forward to the local network such as:</p>

<pre><code>$ iptables -A FORWARD -s 10.10.0.0/24 -d 192.168.0.0/24 -j ACCEPT
</code></pre>

<p>But we will be forwarding traffic to all destinations:</p>

<pre><code>$ iptables -A FORWARD -s 10.10.0.0/24 -d 0.0.0.0/0 -j ACCEPT
$ iptables -t nat -A POSTROUTING -s 10.10.0.0/24 -d 0.0.0.0/0 -j MASQUERADE
</code></pre>

<p>Remember to append the routes to <code>/etc/rc.local</code> to persist across reboots.</p>

<p>Reread the secrets and restart strongswan:</p>

<pre><code>$ ipsec rereadsecrets
$ systemctl restart strongswan
</code></pre>

<p>Connecting your VPN Client, I will be using my Laptop, with the following details:</p>

<pre><code>VPN Type: IKEv2
Description: Home VPN
Server: side-a.example.com
Remote ID: side-a.roadwarrior
Local ID: my-laptop
User Authentication: None
Secret: MySuperSecureSecret123
</code></pre>

<h2>Thank You</h2>

<p>In this tutorial I demonstrated how to setup a site to site ipsec vpn between 2 sides that consists of internet connections that has dynamic ip&rsquo;s and also appending roadwarrior config so that you can connect to your homelab from anywhere in the world.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a WireGuard VPN Server on Linux]]></title>
    <link href="https://blog.ruanbekker.com/blog/2020/01/11/setup-a-wireguard-vpn-server-on-linux/"/>
    <updated>2020-01-11T23:37:03+02:00</updated>
    <id>https://blog.ruanbekker.com/blog/2020/01/11/setup-a-wireguard-vpn-server-on-linux</id>
    <content type="html"><![CDATA[<h2>Installation</h2>

<p>I will be installing my wireguard vpn server on a ubuntu 18 server, for other distributions you can have a look at their <a href="https://www.wireguard.com/install/">docs</a></p>

<pre><code>$ sudo add-apt-repository ppa:wireguard/wireguard
$ sudo apt update
$ sudo apt install wireguard -y
</code></pre>

<h2>Configuration</h2>

<p>On the Server, create they keys directory where we will save our keys:</p>

<pre><code>$ mkdir -p /etc/wireguard/keys
</code></pre>

<p>Create the private and public key:</p>

<pre><code>$ wg genkey | tee privatekey | wg pubkey &gt; publickey
</code></pre>

<p>Generate the pre-shared key:</p>

<pre><code>$ wg genpsk &gt; client.psk
</code></pre>

<p>On the client, create the keys directory:</p>

<pre><code>$ mkdir -p ~/wireguard/keys
</code></pre>

<p>Create the private and public keys:</p>

<pre><code>$ cd ~/wireguard/keys
$ wg genkey | tee privatekey | wg pubkey &gt; publickey
</code></pre>

<p>Populate the server config:</p>

<pre><code>$ cat /etc/wireguard/wg0.conf
[Interface]
PrivateKey = &lt;output-of-client.privatekey&gt;
Address = 192.168.199.1/32
ListenPort = 8999
PostUp = sysctl -w net.ipv4.ip_forward=1; iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o ens3 -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o ens3 -j MASQUERADE

[Peer]
PublicKey = &lt;output-of-server.publickey&gt;
PresharedKey = &lt;output-of-client.psk&gt;
AllowedIPs = 192.168.199.2/32
</code></pre>

<p>Populate the client config:</p>

<pre><code>$ cat ~/wireguard/wg0.conf
[Interface]
PrivateKey = &lt;output-of-client.privatekey&gt;
Address = 192.168.199.2/24
DNS = 1.1.1.1

[Peer]
PublicKey = &lt;output-of-server.publickey&gt;
PresharedKey = &lt;output-of-client.psk&gt;
Endpoint = &lt;server-public-ip&gt;:8999
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 25
</code></pre>

<h2>Start the Server</h2>

<p>On the server, enable and start the service:</p>

<pre><code>$ systemctl enable wg-quick@wg0.service
$ wg-quick up wg0
</code></pre>

<p>On the client, connect the VPN:</p>

<pre><code>$ wg-quick up ~/wireguard/wg0.conf
</code></pre>

<p>Verify the status:</p>

<pre><code>$ wg show
interface: wg0
  public key: +Giwk8Y5KS5wx9mw0nEIdQODI+DsR+3TcbMxjJqfZys=
  private key: (hidden)
  listening port: 8999

peer: Q8LGMj6CeCYQJp+sTu74mLMRoPFAprV8PsnS0cu9fDI=
  preshared key: (hidden)
  endpoint: 102.132.208.80:57800
  allowed ips: 192.168.199.2/32
  latest handshake: 22 seconds ago
  transfer: 292.00 KiB received, 322.15 KiB sent
</code></pre>

<p>Check if you can ping the private ip address of the VPN:</p>

<pre><code>$ ping 192.168.199.2
PING 192.168.199.2 (192.168.199.2): 56 data bytes
64 bytes from 192.168.199.2: icmp_seq=0 ttl=63 time=304.844 ms
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a PPTP VPN on Ubuntu]]></title>
    <link href="https://blog.ruanbekker.com/blog/2018/06/27/setup-a-pptp-vpn-on-ubuntu/"/>
    <updated>2018-06-27T04:18:51-04:00</updated>
    <id>https://blog.ruanbekker.com/blog/2018/06/27/setup-a-pptp-vpn-on-ubuntu</id>
    <content type="html"><![CDATA[<p>In this post we will setup a <a href="https://en.wikipedia.org/wiki/Point-to-Point_Tunneling_Protocol">PPTP</a> VPN on Ubuntu 16.04</p>

<script id="mNCC" language="javascript">
    medianet_width = "728";
    medianet_height = "90";
    medianet_crid = "218284798";
    medianet_versionId = "3111299"; 
  </script>


<script src="//contextual.media.net/nmedianet.js?cid=8CUD78FSV"></script>


<h2>Disable IPv6 Networking:</h2>

<p>Edit the grub config:</p>

<pre><code class="bash">$ vi /etc/default/grub
</code></pre>

<p>Make the following changes:</p>

<pre><code>GRUB_CMDLINE_LINUX_DEFAULT="ipv6.disable=1"
GRUB_CMDLINE_LINUX="ipv6.disable=1"
</code></pre>

<p>Update Grub and Reboot:</p>

<pre><code class="bash">$ update-grub
$ reboot
</code></pre>

<h2>Updates and Install PPTP:</h2>

<p>Update Repositories and install PPTPD:</p>

<pre><code class="bash">$ apt update &amp;&amp; apt upgrade -y
$ apt install pptpd -y
</code></pre>

<p>Configure your Authentication</p>

<pre><code class="bash">$ vi /etc/ppp/chap-secrets
</code></pre>



<pre><code># client    server  secret          IP addresses
youruser    pptpd   yourpass        *
</code></pre>

<p>Configure Local and Remote IP, in this case I want 10.1.1.2 to 10.1.5.1-254</p>

<pre><code class="bash">$ vi /etc/pptpd.conf
</code></pre>



<pre><code>option /etc/ppp/pptpd-options
logwtmp
connections 10000
localip 10.1.1.1
remoteip 10.1.1.2-254,10.1.2.1-254,10.1.3.2-254,10.1.4.1-254,10.1.5.1-254
# for a /24 you can set
# remoteip 10.1.1.2-254
</code></pre>

<h2>Enable IP Forwarding:</h2>

<p>Edit the sysctl.conf and enable IP Forwarding:</p>

<pre><code class="bash">$ vim /etc/sysctl.conf
</code></pre>

<p>Populate the following value:</p>

<pre><code>net.ipv4.ip_forward=1
</code></pre>

<p>Update the Changes:</p>

<pre><code class="bash">$ sysctl -p
</code></pre>

<h2>Enable and Start PPTPD:</h2>

<p>Enable the service on boot and start the service:</p>

<pre><code class="bash">$ systemctl enable pptpd
$ systemctl start pptpd
$ systemctl status pptpd
</code></pre>

<p>Connect to your VPN.</p>

<h2>Resources:</h2>

<ul>
<li><a href="https://www.vultr.com/docs/setup-a-pptp-vpn-server-on-ubuntu">https://www.vultr.com/docs/setup-a-pptp-vpn-server-on-ubuntu</a></li>
<li><a href="https://github.com/viljoviitanen/setup-simple-pptp-vpn">https://github.com/viljoviitanen/setup-simple-pptp-vpn</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
